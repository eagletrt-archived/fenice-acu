
EngineControlUnitChimeraNoControl_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b04  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004db4  08004db4  00014db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006f4  20000070  08004e28  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  20000764  08004e28  00020764  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010614  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001dc8  00000000  00000000  000306b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009292  00000000  00000000  0003247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d38  00000000  00000000  0003b710  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d08  00000000  00000000  0003c448  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002251f  00000000  00000000  0003d150  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009496  00000000  00000000  0005f66f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000d2d77  00000000  00000000  00068b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0013b87c  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000028ac  00000000  00000000  0013b8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004cbc 	.word	0x08004cbc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004cbc 	.word	0x08004cbc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b510      	push	{r4, lr}
 8000efe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_InitTick+0x40>)
 8000f02:	7818      	ldrb	r0, [r3, #0]
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f0c:	4a0c      	ldr	r2, [pc, #48]	; (8000f40 <HAL_InitTick+0x44>)
 8000f0e:	6810      	ldr	r0, [r2, #0]
 8000f10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f14:	f000 fcac 	bl	8001870 <HAL_SYSTICK_Config>
 8000f18:	b968      	cbnz	r0, 8000f36 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	2c0f      	cmp	r4, #15
 8000f1c:	d901      	bls.n	8000f22 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f1e:	2001      	movs	r0, #1
 8000f20:	e00a      	b.n	8000f38 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f22:	2200      	movs	r2, #0
 8000f24:	4621      	mov	r1, r4
 8000f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f2a:	f000 fc5f 	bl	80017ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2e:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_InitTick+0x40>)
 8000f30:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2000      	movs	r0, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f36:	2001      	movs	r0, #1
}
 8000f38:	bd10      	pop	{r4, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008

08000f44 <HAL_Init>:
{
 8000f44:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <HAL_Init+0x30>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f56:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f5e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f60:	2003      	movs	r0, #3
 8000f62:	f000 fc31 	bl	80017c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff ffc8 	bl	8000efc <HAL_InitTick>
  HAL_MspInit();
 8000f6c:	f003 f906 	bl	800417c <HAL_MspInit>
}
 8000f70:	2000      	movs	r0, #0
 8000f72:	bd08      	pop	{r3, pc}
 8000f74:	40023c00 	.word	0x40023c00

08000f78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f78:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <HAL_IncTick+0x10>)
 8000f7a:	6811      	ldr	r1, [r2, #0]
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_IncTick+0x14>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	440b      	add	r3, r1
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000098 	.word	0x20000098
 8000f8c:	20000000 	.word	0x20000000

08000f90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f90:	4b01      	ldr	r3, [pc, #4]	; (8000f98 <HAL_GetTick+0x8>)
 8000f92:	6818      	ldr	r0, [r3, #0]
}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000098 	.word	0x20000098

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff fff6 	bl	8000f90 <HAL_GetTick>
 8000fa4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000faa:	d002      	beq.n	8000fb2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <HAL_Delay+0x24>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb2:	f7ff ffed 	bl	8000f90 <HAL_GetTick>
 8000fb6:	1b40      	subs	r0, r0, r5
 8000fb8:	42a0      	cmp	r0, r4
 8000fba:	d3fa      	bcc.n	8000fb2 <HAL_Delay+0x16>
  {
  }
}
 8000fbc:	bd38      	pop	{r3, r4, r5, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000000 	.word	0x20000000

08000fc4 <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	f000 80a1 	beq.w	800110c <HAL_CAN_Init+0x148>
{
 8000fca:	b538      	push	{r3, r4, r5, lr}
 8000fcc:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000fce:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000fd2:	b1d3      	cbz	r3, 800100a <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	6813      	ldr	r3, [r2, #0]
 8000fd8:	f023 0302 	bic.w	r3, r3, #2
 8000fdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fde:	f7ff ffd7 	bl	8000f90 <HAL_GetTick>
 8000fe2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fe4:	6823      	ldr	r3, [r4, #0]
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	f012 0f02 	tst.w	r2, #2
 8000fec:	d010      	beq.n	8001010 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fee:	f7ff ffcf 	bl	8000f90 <HAL_GetTick>
 8000ff2:	1b40      	subs	r0, r0, r5
 8000ff4:	280a      	cmp	r0, #10
 8000ff6:	d9f5      	bls.n	8000fe4 <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ff8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffe:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001000:	2305      	movs	r3, #5
 8001002:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8001006:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001008:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 800100a:	f003 f8d3 	bl	80041b4 <HAL_CAN_MspInit>
 800100e:	e7e1      	b.n	8000fd4 <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	f042 0201 	orr.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001018:	f7ff ffba 	bl	8000f90 <HAL_GetTick>
 800101c:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	f012 0f01 	tst.w	r2, #1
 8001026:	d10d      	bne.n	8001044 <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001028:	f7ff ffb2 	bl	8000f90 <HAL_GetTick>
 800102c:	1b40      	subs	r0, r0, r5
 800102e:	280a      	cmp	r0, #10
 8001030:	d9f5      	bls.n	800101e <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800103a:	2305      	movs	r3, #5
 800103c:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
 8001042:	e7e1      	b.n	8001008 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001044:	7e22      	ldrb	r2, [r4, #24]
 8001046:	2a01      	cmp	r2, #1
 8001048:	d03d      	beq.n	80010c6 <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001050:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001052:	7e63      	ldrb	r3, [r4, #25]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d03b      	beq.n	80010d0 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001060:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001062:	7ea3      	ldrb	r3, [r4, #26]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d039      	beq.n	80010dc <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	f023 0320 	bic.w	r3, r3, #32
 8001070:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001072:	7ee3      	ldrb	r3, [r4, #27]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d037      	beq.n	80010e8 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001082:	7f23      	ldrb	r3, [r4, #28]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d035      	beq.n	80010f4 <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	6813      	ldr	r3, [r2, #0]
 800108c:	f023 0308 	bic.w	r3, r3, #8
 8001090:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001092:	7f63      	ldrb	r3, [r4, #29]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d033      	beq.n	8001100 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001098:	6822      	ldr	r2, [r4, #0]
 800109a:	6813      	ldr	r3, [r2, #0]
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010a2:	68a3      	ldr	r3, [r4, #8]
 80010a4:	68e2      	ldr	r2, [r4, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	6922      	ldr	r2, [r4, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	6962      	ldr	r2, [r4, #20]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	6862      	ldr	r2, [r4, #4]
 80010b2:	3a01      	subs	r2, #1
 80010b4:	6821      	ldr	r1, [r4, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010ba:	2000      	movs	r0, #0
 80010bc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80010be:	2301      	movs	r3, #1
 80010c0:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 80010c4:	e7a0      	b.n	8001008 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e7c0      	b.n	8001052 <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80010d0:	6822      	ldr	r2, [r4, #0]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e7c2      	b.n	8001062 <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	6813      	ldr	r3, [r2, #0]
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e7c4      	b.n	8001072 <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e8:	6822      	ldr	r2, [r4, #0]
 80010ea:	6813      	ldr	r3, [r2, #0]
 80010ec:	f023 0310 	bic.w	r3, r3, #16
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e7c6      	b.n	8001082 <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	6813      	ldr	r3, [r2, #0]
 80010f8:	f043 0308 	orr.w	r3, r3, #8
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e7c8      	b.n	8001092 <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001100:	6822      	ldr	r2, [r4, #0]
 8001102:	6813      	ldr	r3, [r2, #0]
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e7ca      	b.n	80010a2 <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 800110c:	2001      	movs	r0, #1
}
 800110e:	4770      	bx	lr

08001110 <HAL_CAN_ConfigFilter>:
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001110:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001114:	3b01      	subs	r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d905      	bls.n	8001128 <HAL_CAN_ConfigFilter+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800111c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800111e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001122:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001124:	2001      	movs	r0, #1
  }
}
 8001126:	4770      	bx	lr
{
 8001128:	b470      	push	{r4, r5, r6}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800112a:	4b43      	ldr	r3, [pc, #268]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 800112c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001130:	f042 0201 	orr.w	r2, r2, #1
 8001134:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001138:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800113c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001140:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001144:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001148:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800114a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800114e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001152:	694a      	ldr	r2, [r1, #20]
 8001154:	f002 021f 	and.w	r2, r2, #31
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800115e:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 8001162:	43d0      	mvns	r0, r2
 8001164:	4004      	ands	r4, r0
 8001166:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800116a:	69cb      	ldr	r3, [r1, #28]
 800116c:	b9b3      	cbnz	r3, 800119c <HAL_CAN_ConfigFilter+0x8c>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 8001170:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 8001174:	4004      	ands	r4, r0
 8001176:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800117a:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800117c:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800117e:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001180:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001184:	3448      	adds	r4, #72	; 0x48
 8001186:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800118a:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800118c:	880c      	ldrh	r4, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800118e:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001190:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001194:	3548      	adds	r5, #72	; 0x48
 8001196:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800119a:	605c      	str	r4, [r3, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800119c:	69cb      	ldr	r3, [r1, #28]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d01d      	beq.n	80011de <HAL_CAN_ConfigFilter+0xce>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80011a2:	698b      	ldr	r3, [r1, #24]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d132      	bne.n	800120e <HAL_CAN_ConfigFilter+0xfe>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80011a8:	4c23      	ldr	r4, [pc, #140]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 80011aa:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 80011ae:	4003      	ands	r3, r0
 80011b0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80011b4:	690b      	ldr	r3, [r1, #16]
 80011b6:	bb8b      	cbnz	r3, 800121c <HAL_CAN_ConfigFilter+0x10c>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 80011ba:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 80011be:	4020      	ands	r0, r4
 80011c0:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80011c4:	6a0b      	ldr	r3, [r1, #32]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d02f      	beq.n	800122a <HAL_CAN_ConfigFilter+0x11a>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011ca:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 80011cc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 80011d8:	2000      	movs	r0, #0
}
 80011da:	bc70      	pop	{r4, r5, r6}
 80011dc:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 80011e0:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80011e4:	4314      	orrs	r4, r2
 80011e6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011ea:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011ec:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ee:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011f0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f4:	3448      	adds	r4, #72	; 0x48
 80011f6:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fa:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80011fc:	898c      	ldrh	r4, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fe:	694d      	ldr	r5, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001200:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001204:	3548      	adds	r5, #72	; 0x48
 8001206:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800120a:	605c      	str	r4, [r3, #4]
 800120c:	e7c9      	b.n	80011a2 <HAL_CAN_ConfigFilter+0x92>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800120e:	4c0a      	ldr	r4, [pc, #40]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 8001210:	f8d4 3204 	ldr.w	r3, [r4, #516]	; 0x204
 8001214:	4313      	orrs	r3, r2
 8001216:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
 800121a:	e7cb      	b.n	80011b4 <HAL_CAN_ConfigFilter+0xa4>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 800121e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8001222:	4313      	orrs	r3, r2
 8001224:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
 8001228:	e7cc      	b.n	80011c4 <HAL_CAN_ConfigFilter+0xb4>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800122a:	4903      	ldr	r1, [pc, #12]	; (8001238 <HAL_CAN_ConfigFilter+0x128>)
 800122c:	f8d1 321c 	ldr.w	r3, [r1, #540]	; 0x21c
 8001230:	431a      	orrs	r2, r3
 8001232:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
 8001236:	e7c8      	b.n	80011ca <HAL_CAN_ConfigFilter+0xba>
 8001238:	40006400 	.word	0x40006400

0800123c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800123c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800123e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d005      	beq.n	8001254 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001248:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800124a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800124e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
  }
}
 8001252:	bd38      	pop	{r3, r4, r5, pc}
 8001254:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001256:	2302      	movs	r3, #2
 8001258:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	6813      	ldr	r3, [r2, #0]
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001266:	f7ff fe93 	bl	8000f90 <HAL_GetTick>
 800126a:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f013 0f01 	tst.w	r3, #1
 8001274:	d00d      	beq.n	8001292 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001276:	f7ff fe8b 	bl	8000f90 <HAL_GetTick>
 800127a:	1b40      	subs	r0, r0, r5
 800127c:	280a      	cmp	r0, #10
 800127e:	d9f5      	bls.n	800126c <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001286:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8001288:	2305      	movs	r3, #5
 800128a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800128e:	2001      	movs	r0, #1
 8001290:	e7df      	b.n	8001252 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001292:	2000      	movs	r0, #0
 8001294:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8001296:	e7dc      	b.n	8001252 <HAL_CAN_Start+0x16>

08001298 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001298:	b470      	push	{r4, r5, r6}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800129a:	f890 4020 	ldrb.w	r4, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800129e:	6805      	ldr	r5, [r0, #0]
 80012a0:	68ad      	ldr	r5, [r5, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80012a2:	3c01      	subs	r4, #1
 80012a4:	b2e4      	uxtb	r4, r4
 80012a6:	2c01      	cmp	r4, #1
 80012a8:	d906      	bls.n	80012b8 <HAL_CAN_AddTxMessage+0x20>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80012b2:	2001      	movs	r0, #1
  }
}
 80012b4:	bc70      	pop	{r4, r5, r6}
 80012b6:	4770      	bx	lr
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012b8:	f015 5fe0 	tst.w	r5, #469762048	; 0x1c000000
 80012bc:	d05b      	beq.n	8001376 <HAL_CAN_AddTxMessage+0xde>
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012be:	f3c5 6501 	ubfx	r5, r5, #24, #2
      if (transmitmailbox > 2U)
 80012c2:	2d02      	cmp	r5, #2
 80012c4:	d83e      	bhi.n	8001344 <HAL_CAN_AddTxMessage+0xac>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012c6:	2401      	movs	r4, #1
 80012c8:	40ac      	lsls	r4, r5
 80012ca:	601c      	str	r4, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 80012cc:	688b      	ldr	r3, [r1, #8]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d13e      	bne.n	8001350 <HAL_CAN_AddTxMessage+0xb8>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012d2:	680e      	ldr	r6, [r1, #0]
                                                           pHeader->RTR);
 80012d4:	68cb      	ldr	r3, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012d6:	6804      	ldr	r4, [r0, #0]
 80012d8:	ea43 5646 	orr.w	r6, r3, r6, lsl #21
 80012dc:	f105 0318 	add.w	r3, r5, #24
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	50e6      	str	r6, [r4, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80012e4:	6803      	ldr	r3, [r0, #0]
 80012e6:	690c      	ldr	r4, [r1, #16]
 80012e8:	f105 0618 	add.w	r6, r5, #24
 80012ec:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 80012f0:	605c      	str	r4, [r3, #4]
      if (pHeader->TransmitGlobalTime == ENABLE)
 80012f2:	7d0b      	ldrb	r3, [r1, #20]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d036      	beq.n	8001366 <HAL_CAN_AddTxMessage+0xce>
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012f8:	79d1      	ldrb	r1, [r2, #7]
 80012fa:	7993      	ldrb	r3, [r2, #6]
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001302:	7951      	ldrb	r1, [r2, #5]
 8001304:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001308:	7914      	ldrb	r4, [r2, #4]
 800130a:	6801      	ldr	r1, [r0, #0]
 800130c:	4323      	orrs	r3, r4
 800130e:	012c      	lsls	r4, r5, #4
 8001310:	4421      	add	r1, r4
 8001312:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001316:	78d1      	ldrb	r1, [r2, #3]
 8001318:	7893      	ldrb	r3, [r2, #2]
 800131a:	041b      	lsls	r3, r3, #16
 800131c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001320:	7851      	ldrb	r1, [r2, #1]
 8001322:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001326:	7811      	ldrb	r1, [r2, #0]
 8001328:	6802      	ldr	r2, [r0, #0]
 800132a:	430b      	orrs	r3, r1
 800132c:	4422      	add	r2, r4
 800132e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001332:	6802      	ldr	r2, [r0, #0]
 8001334:	3518      	adds	r5, #24
 8001336:	012d      	lsls	r5, r5, #4
 8001338:	5953      	ldr	r3, [r2, r5]
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	5153      	str	r3, [r2, r5]
      return HAL_OK;
 8001340:	2000      	movs	r0, #0
 8001342:	e7b7      	b.n	80012b4 <HAL_CAN_AddTxMessage+0x1c>
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001344:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800134a:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 800134c:	2001      	movs	r0, #1
 800134e:	e7b1      	b.n	80012b4 <HAL_CAN_AddTxMessage+0x1c>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001350:	684c      	ldr	r4, [r1, #4]
 8001352:	ea43 03c4 	orr.w	r3, r3, r4, lsl #3
                                                           pHeader->RTR);
 8001356:	68cc      	ldr	r4, [r1, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001358:	6806      	ldr	r6, [r0, #0]
                                                           pHeader->IDE |
 800135a:	4323      	orrs	r3, r4
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800135c:	f105 0418 	add.w	r4, r5, #24
 8001360:	0124      	lsls	r4, r4, #4
 8001362:	5133      	str	r3, [r6, r4]
 8001364:	e7be      	b.n	80012e4 <HAL_CAN_AddTxMessage+0x4c>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001366:	6803      	ldr	r3, [r0, #0]
 8001368:	eb03 1306 	add.w	r3, r3, r6, lsl #4
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001372:	6059      	str	r1, [r3, #4]
 8001374:	e7c0      	b.n	80012f8 <HAL_CAN_AddTxMessage+0x60>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001376:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137c:	6243      	str	r3, [r0, #36]	; 0x24
      return HAL_ERROR;
 800137e:	2001      	movs	r0, #1
 8001380:	e798      	b.n	80012b4 <HAL_CAN_AddTxMessage+0x1c>

08001382 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001382:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001386:	3b01      	subs	r3, #1
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d901      	bls.n	8001392 <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 800138e:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8001390:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001392:	6803      	ldr	r3, [r0, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
 800139a:	d10b      	bne.n	80013b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x32>
  uint32_t freelevel = 0U;
 800139c:	2000      	movs	r0, #0
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
 80013a4:	d000      	beq.n	80013a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
      freelevel++;
 80013a6:	3001      	adds	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80013ae:	d0ef      	beq.n	8001390 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 80013b0:	3001      	adds	r0, #1
 80013b2:	4770      	bx	lr
      freelevel++;
 80013b4:	2001      	movs	r0, #1
 80013b6:	e7f2      	b.n	800139e <HAL_CAN_GetTxMailboxesFreeLevel+0x1c>

080013b8 <HAL_CAN_IsTxMessagePending>:
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
  uint32_t status = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013b8:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80013bc:	3b01      	subs	r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d901      	bls.n	80013c8 <HAL_CAN_IsTxMessagePending+0x10>
  uint32_t status = 0U;
 80013c4:	2000      	movs	r0, #0
 80013c6:	4770      	bx	lr
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80013c8:	6803      	ldr	r3, [r0, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	0689      	lsls	r1, r1, #26
 80013ce:	ea31 0303 	bics.w	r3, r1, r3
 80013d2:	d001      	beq.n	80013d8 <HAL_CAN_IsTxMessagePending+0x20>
    {
      status = 1U;
 80013d4:	2001      	movs	r0, #1
    }
  }

  /* Return status */
  return status;
}
 80013d6:	4770      	bx	lr
  uint32_t status = 0U;
 80013d8:	2000      	movs	r0, #0
 80013da:	4770      	bx	lr

080013dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80013dc:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 80013de:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80013e2:	3c01      	subs	r4, #1
 80013e4:	b2e4      	uxtb	r4, r4
 80013e6:	2c01      	cmp	r4, #1
 80013e8:	d906      	bls.n	80013f8 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80013f2:	2001      	movs	r0, #1
  }
}
 80013f4:	bc30      	pop	{r4, r5}
 80013f6:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013f8:	2900      	cmp	r1, #0
 80013fa:	d16f      	bne.n	80014dc <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013fc:	6804      	ldr	r4, [r0, #0]
 80013fe:	68e4      	ldr	r4, [r4, #12]
 8001400:	f014 0f03 	tst.w	r4, #3
 8001404:	d064      	beq.n	80014d0 <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001406:	6805      	ldr	r5, [r0, #0]
 8001408:	f101 041b 	add.w	r4, r1, #27
 800140c:	0124      	lsls	r4, r4, #4
 800140e:	592c      	ldr	r4, [r5, r4]
 8001410:	f004 0404 	and.w	r4, r4, #4
 8001414:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001416:	2c00      	cmp	r4, #0
 8001418:	d16b      	bne.n	80014f2 <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800141a:	6805      	ldr	r5, [r0, #0]
 800141c:	f101 041b 	add.w	r4, r1, #27
 8001420:	0124      	lsls	r4, r4, #4
 8001422:	592c      	ldr	r4, [r5, r4]
 8001424:	0d64      	lsrs	r4, r4, #21
 8001426:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001428:	6805      	ldr	r5, [r0, #0]
 800142a:	f101 041b 	add.w	r4, r1, #27
 800142e:	0124      	lsls	r4, r4, #4
 8001430:	592d      	ldr	r5, [r5, r4]
 8001432:	f3c5 0540 	ubfx	r5, r5, #1, #1
 8001436:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001438:	6805      	ldr	r5, [r0, #0]
 800143a:	4425      	add	r5, r4
 800143c:	686d      	ldr	r5, [r5, #4]
 800143e:	f005 050f 	and.w	r5, r5, #15
 8001442:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001444:	6805      	ldr	r5, [r0, #0]
 8001446:	4425      	add	r5, r4
 8001448:	686d      	ldr	r5, [r5, #4]
 800144a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 800144e:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001450:	6805      	ldr	r5, [r0, #0]
 8001452:	442c      	add	r4, r5
 8001454:	6864      	ldr	r4, [r4, #4]
 8001456:	0c24      	lsrs	r4, r4, #16
 8001458:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800145a:	6804      	ldr	r4, [r0, #0]
 800145c:	010a      	lsls	r2, r1, #4
 800145e:	4414      	add	r4, r2
 8001460:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8001464:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001466:	6804      	ldr	r4, [r0, #0]
 8001468:	4414      	add	r4, r2
 800146a:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800146e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001472:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001474:	6804      	ldr	r4, [r0, #0]
 8001476:	4414      	add	r4, r2
 8001478:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800147c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8001480:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001482:	6804      	ldr	r4, [r0, #0]
 8001484:	4414      	add	r4, r2
 8001486:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 800148a:	0e24      	lsrs	r4, r4, #24
 800148c:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800148e:	6804      	ldr	r4, [r0, #0]
 8001490:	4414      	add	r4, r2
 8001492:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8001496:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001498:	6804      	ldr	r4, [r0, #0]
 800149a:	4414      	add	r4, r2
 800149c:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80014a0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80014a4:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014a6:	6804      	ldr	r4, [r0, #0]
 80014a8:	4414      	add	r4, r2
 80014aa:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 80014ae:	f3c4 4407 	ubfx	r4, r4, #16, #8
 80014b2:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014b4:	6804      	ldr	r4, [r0, #0]
 80014b6:	4422      	add	r2, r4
 80014b8:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80014bc:	0e12      	lsrs	r2, r2, #24
 80014be:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c0:	b9f9      	cbnz	r1, 8001502 <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80014c2:	6802      	ldr	r2, [r0, #0]
 80014c4:	68d3      	ldr	r3, [r2, #12]
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 80014cc:	2000      	movs	r0, #0
 80014ce:	e791      	b.n	80013f4 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d6:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80014d8:	2001      	movs	r0, #1
 80014da:	e78b      	b.n	80013f4 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014dc:	6804      	ldr	r4, [r0, #0]
 80014de:	6924      	ldr	r4, [r4, #16]
 80014e0:	f014 0f03 	tst.w	r4, #3
 80014e4:	d18f      	bne.n	8001406 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ec:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	e780      	b.n	80013f4 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014f2:	6805      	ldr	r5, [r0, #0]
 80014f4:	f101 041b 	add.w	r4, r1, #27
 80014f8:	0124      	lsls	r4, r4, #4
 80014fa:	592c      	ldr	r4, [r5, r4]
 80014fc:	08e4      	lsrs	r4, r4, #3
 80014fe:	6054      	str	r4, [r2, #4]
 8001500:	e792      	b.n	8001428 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001502:	6802      	ldr	r2, [r0, #0]
 8001504:	6913      	ldr	r3, [r2, #16]
 8001506:	f043 0320 	orr.w	r3, r3, #32
 800150a:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 800150c:	2000      	movs	r0, #0
 800150e:	e771      	b.n	80013f4 <HAL_CAN_GetRxMessage+0x18>

08001510 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001510:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001514:	3b01      	subs	r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d901      	bls.n	8001520 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 800151c:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 800151e:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 8001520:	b121      	cbz	r1, 800152c <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001522:	6803      	ldr	r3, [r0, #0]
 8001524:	6918      	ldr	r0, [r3, #16]
 8001526:	f000 0003 	and.w	r0, r0, #3
 800152a:	4770      	bx	lr
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800152c:	6803      	ldr	r3, [r0, #0]
 800152e:	68d8      	ldr	r0, [r3, #12]
 8001530:	f000 0003 	and.w	r0, r0, #3
 8001534:	4770      	bx	lr

08001536 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001536:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800153a:	3b01      	subs	r3, #1
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d905      	bls.n	800154e <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
  }
}
 800154c:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800154e:	6802      	ldr	r2, [r0, #0]
 8001550:	6953      	ldr	r3, [r2, #20]
 8001552:	4319      	orrs	r1, r3
 8001554:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001556:	2000      	movs	r0, #0
 8001558:	4770      	bx	lr

0800155a <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800155a:	4770      	bx	lr

0800155c <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800155c:	4770      	bx	lr

0800155e <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001560:	4770      	bx	lr

08001562 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001562:	4770      	bx	lr

08001564 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001564:	4770      	bx	lr

08001566 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001566:	4770      	bx	lr

08001568 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001568:	4770      	bx	lr

0800156a <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800156a:	4770      	bx	lr

0800156c <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800156c:	4770      	bx	lr

0800156e <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800156e:	4770      	bx	lr

08001570 <HAL_CAN_IRQHandler>:
{
 8001570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001574:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001576:	6803      	ldr	r3, [r0, #0]
 8001578:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800157a:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800157c:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800157e:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001582:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001586:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800158a:	f014 0f01 	tst.w	r4, #1
 800158e:	d05a      	beq.n	8001646 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001590:	f016 0f01 	tst.w	r6, #1
 8001594:	d017      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001596:	2201      	movs	r2, #1
 8001598:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800159a:	f016 0f02 	tst.w	r6, #2
 800159e:	d108      	bne.n	80015b2 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80015a0:	f016 0f04 	tst.w	r6, #4
 80015a4:	d130      	bne.n	8001608 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015a6:	f016 0f08 	tst.w	r6, #8
 80015aa:	d007      	beq.n	80015bc <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ac:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 80015b0:	e00b      	b.n	80015ca <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80015b2:	f7ff ffd2 	bl	800155a <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015b6:	f04f 0b00 	mov.w	fp, #0
 80015ba:	e006      	b.n	80015ca <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015bc:	f7ff ffd0 	bl	8001560 <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80015c0:	f04f 0b00 	mov.w	fp, #0
 80015c4:	e001      	b.n	80015ca <HAL_CAN_IRQHandler+0x5a>
 80015c6:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015ca:	f416 7f80 	tst.w	r6, #256	; 0x100
 80015ce:	d00b      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d6:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015d8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80015dc:	d117      	bne.n	800160e <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015de:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80015e2:	d018      	beq.n	8001616 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015e4:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015e8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80015ec:	d02d      	beq.n	800164a <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015f4:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80015f6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 80015fa:	d116      	bne.n	800162a <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80015fc:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8001600:	d017      	beq.n	8001632 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001602:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8001606:	e020      	b.n	800164a <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001608:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 800160c:	e7dd      	b.n	80015ca <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800160e:	4628      	mov	r0, r5
 8001610:	f7ff ffa4 	bl	800155c <HAL_CAN_TxMailbox1CompleteCallback>
 8001614:	e7e8      	b.n	80015e8 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001616:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800161a:	d002      	beq.n	8001622 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800161c:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 8001620:	e7e2      	b.n	80015e8 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001622:	4628      	mov	r0, r5
 8001624:	f7ff ff9d 	bl	8001562 <HAL_CAN_TxMailbox1AbortCallback>
 8001628:	e7de      	b.n	80015e8 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800162a:	4628      	mov	r0, r5
 800162c:	f7ff ff97 	bl	800155e <HAL_CAN_TxMailbox2CompleteCallback>
 8001630:	e00b      	b.n	800164a <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001632:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8001636:	d002      	beq.n	800163e <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001638:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 800163c:	e005      	b.n	800164a <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800163e:	4628      	mov	r0, r5
 8001640:	f7ff ff90 	bl	8001564 <HAL_CAN_TxMailbox2AbortCallback>
 8001644:	e001      	b.n	800164a <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001646:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800164a:	f014 0f08 	tst.w	r4, #8
 800164e:	d007      	beq.n	8001660 <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001650:	f019 0f10 	tst.w	r9, #16
 8001654:	d004      	beq.n	8001660 <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001656:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	2210      	movs	r2, #16
 800165e:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001660:	f014 0f04 	tst.w	r4, #4
 8001664:	d002      	beq.n	800166c <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001666:	f019 0f08 	tst.w	r9, #8
 800166a:	d160      	bne.n	800172e <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800166c:	f014 0f02 	tst.w	r4, #2
 8001670:	d004      	beq.n	800167c <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001672:	682b      	ldr	r3, [r5, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f013 0f03 	tst.w	r3, #3
 800167a:	d15f      	bne.n	800173c <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800167c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001680:	d007      	beq.n	8001692 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001682:	f018 0f10 	tst.w	r8, #16
 8001686:	d004      	beq.n	8001692 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001688:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	2210      	movs	r2, #16
 8001690:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001692:	f014 0f20 	tst.w	r4, #32
 8001696:	d002      	beq.n	800169e <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001698:	f018 0f08 	tst.w	r8, #8
 800169c:	d152      	bne.n	8001744 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800169e:	f014 0f10 	tst.w	r4, #16
 80016a2:	d004      	beq.n	80016ae <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f013 0f03 	tst.w	r3, #3
 80016ac:	d151      	bne.n	8001752 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80016ae:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80016b2:	d002      	beq.n	80016ba <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80016b4:	f017 0f10 	tst.w	r7, #16
 80016b8:	d14f      	bne.n	800175a <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016ba:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80016be:	d002      	beq.n	80016c6 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016c0:	f017 0f08 	tst.w	r7, #8
 80016c4:	d150      	bne.n	8001768 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016c6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80016ca:	d067      	beq.n	800179c <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016cc:	f017 0f04 	tst.w	r7, #4
 80016d0:	d061      	beq.n	8001796 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016d2:	f414 7f80 	tst.w	r4, #256	; 0x100
 80016d6:	d004      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x172>
 80016d8:	f01a 0f01 	tst.w	sl, #1
 80016dc:	d001      	beq.n	80016e2 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 80016de:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016e2:	f414 7f00 	tst.w	r4, #512	; 0x200
 80016e6:	d004      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x182>
 80016e8:	f01a 0f02 	tst.w	sl, #2
 80016ec:	d001      	beq.n	80016f2 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 80016ee:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016f2:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80016f6:	d004      	beq.n	8001702 <HAL_CAN_IRQHandler+0x192>
 80016f8:	f01a 0f04 	tst.w	sl, #4
 80016fc:	d001      	beq.n	8001702 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 80016fe:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001702:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8001706:	d046      	beq.n	8001796 <HAL_CAN_IRQHandler+0x226>
 8001708:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 800170c:	d043      	beq.n	8001796 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 800170e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8001712:	d048      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x236>
 8001714:	d92f      	bls.n	8001776 <HAL_CAN_IRQHandler+0x206>
 8001716:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 800171a:	d047      	beq.n	80017ac <HAL_CAN_IRQHandler+0x23c>
 800171c:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8001720:	d047      	beq.n	80017b2 <HAL_CAN_IRQHandler+0x242>
 8001722:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8001726:	d131      	bne.n	800178c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8001728:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 800172c:	e02e      	b.n	800178c <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	2208      	movs	r2, #8
 8001732:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001734:	4628      	mov	r0, r5
 8001736:	f001 fe7b 	bl	8003430 <HAL_CAN_RxFifo0FullCallback>
 800173a:	e797      	b.n	800166c <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800173c:	4628      	mov	r0, r5
 800173e:	f7ff ff12 	bl	8001566 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001742:	e79b      	b.n	800167c <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	2208      	movs	r2, #8
 8001748:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 800174a:	4628      	mov	r0, r5
 800174c:	f001 ff3a 	bl	80035c4 <HAL_CAN_RxFifo1FullCallback>
 8001750:	e7a5      	b.n	800169e <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001752:	4628      	mov	r0, r5
 8001754:	f7ff ff08 	bl	8001568 <HAL_CAN_RxFifo1MsgPendingCallback>
 8001758:	e7a9      	b.n	80016ae <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800175a:	682b      	ldr	r3, [r5, #0]
 800175c:	2210      	movs	r2, #16
 800175e:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8001760:	4628      	mov	r0, r5
 8001762:	f7ff ff02 	bl	800156a <HAL_CAN_SleepCallback>
 8001766:	e7a8      	b.n	80016ba <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001768:	682b      	ldr	r3, [r5, #0]
 800176a:	2208      	movs	r2, #8
 800176c:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800176e:	4628      	mov	r0, r5
 8001770:	f7ff fefc 	bl	800156c <HAL_CAN_WakeUpFromRxMsgCallback>
 8001774:	e7a7      	b.n	80016c6 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8001776:	f1ba 0f10 	cmp.w	sl, #16
 800177a:	d005      	beq.n	8001788 <HAL_CAN_IRQHandler+0x218>
 800177c:	f1ba 0f20 	cmp.w	sl, #32
 8001780:	d104      	bne.n	800178c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001782:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8001786:	e001      	b.n	800178c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001788:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800178c:	682a      	ldr	r2, [r5, #0]
 800178e:	6993      	ldr	r3, [r2, #24]
 8001790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001794:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001796:	682b      	ldr	r3, [r5, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 800179c:	f1bb 0f00 	cmp.w	fp, #0
 80017a0:	d10a      	bne.n	80017b8 <HAL_CAN_IRQHandler+0x248>
}
 80017a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 80017a6:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 80017aa:	e7ef      	b.n	800178c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 80017ac:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 80017b0:	e7ec      	b.n	800178c <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017b2:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 80017b6:	e7e9      	b.n	800178c <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 80017b8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80017ba:	ea43 030b 	orr.w	r3, r3, fp
 80017be:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80017c0:	4628      	mov	r0, r5
 80017c2:	f7ff fed4 	bl	800156e <HAL_CAN_ErrorCallback>
}
 80017c6:	e7ec      	b.n	80017a2 <HAL_CAN_IRQHandler+0x232>

080017c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	0200      	lsls	r0, r0, #8
 80017d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017da:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80017dc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80017e0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80017e4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_NVIC_SetPriority+0x60>)
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f6:	f1c3 0407 	rsb	r4, r3, #7
 80017fa:	2c04      	cmp	r4, #4
 80017fc:	bf28      	it	cs
 80017fe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001800:	1d1d      	adds	r5, r3, #4
 8001802:	2d06      	cmp	r5, #6
 8001804:	d918      	bls.n	8001838 <HAL_NVIC_SetPriority+0x4c>
 8001806:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800180c:	fa05 f404 	lsl.w	r4, r5, r4
 8001810:	ea21 0104 	bic.w	r1, r1, r4
 8001814:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001816:	fa05 f303 	lsl.w	r3, r5, r3
 800181a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001820:	2800      	cmp	r0, #0
 8001822:	db0b      	blt.n	800183c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	0109      	lsls	r1, r1, #4
 8001826:	b2c9      	uxtb	r1, r1
 8001828:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800182c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001830:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001834:	bc30      	pop	{r4, r5}
 8001836:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001838:	2300      	movs	r3, #0
 800183a:	e7e5      	b.n	8001808 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	f000 000f 	and.w	r0, r0, #15
 8001840:	0109      	lsls	r1, r1, #4
 8001842:	b2c9      	uxtb	r1, r1
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_NVIC_SetPriority+0x64>)
 8001846:	5419      	strb	r1, [r3, r0]
 8001848:	e7f4      	b.n	8001834 <HAL_NVIC_SetPriority+0x48>
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00
 8001850:	e000ed14 	.word	0xe000ed14

08001854 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001854:	2800      	cmp	r0, #0
 8001856:	db07      	blt.n	8001868 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001858:	f000 021f 	and.w	r2, r0, #31
 800185c:	0940      	lsrs	r0, r0, #5
 800185e:	2301      	movs	r3, #1
 8001860:	4093      	lsls	r3, r2
 8001862:	4a02      	ldr	r2, [pc, #8]	; (800186c <HAL_NVIC_EnableIRQ+0x18>)
 8001864:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000e100 	.word	0xe000e100

08001870 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	3801      	subs	r0, #1
 8001872:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001876:	d20a      	bcs.n	800188e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_SYSTICK_Config+0x24>)
 800187a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_SYSTICK_Config+0x28>)
 800187e:	21f0      	movs	r1, #240	; 0xf0
 8001880:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	2000      	movs	r0, #0
 8001886:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001888:	2207      	movs	r2, #7
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800188e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189c:	2300      	movs	r3, #0
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	f200 80d1 	bhi.w	8001a46 <HAL_GPIO_Init+0x1aa>
{
 80018a4:	b4f0      	push	{r4, r5, r6, r7}
 80018a6:	b082      	sub	sp, #8
 80018a8:	e039      	b.n	800191e <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018aa:	2206      	movs	r2, #6
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x14>
 80018ae:	2200      	movs	r2, #0
 80018b0:	40b2      	lsls	r2, r6
 80018b2:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b4:	3402      	adds	r4, #2
 80018b6:	4e64      	ldr	r6, [pc, #400]	; (8001a48 <HAL_GPIO_Init+0x1ac>)
 80018b8:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018bc:	4a63      	ldr	r2, [pc, #396]	; (8001a4c <HAL_GPIO_Init+0x1b0>)
 80018be:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	43ea      	mvns	r2, r5
 80018c2:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c6:	684f      	ldr	r7, [r1, #4]
 80018c8:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80018cc:	d001      	beq.n	80018d2 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80018ce:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80018d2:	4c5e      	ldr	r4, [pc, #376]	; (8001a4c <HAL_GPIO_Init+0x1b0>)
 80018d4:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80018d6:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018dc:	684f      	ldr	r7, [r1, #4]
 80018de:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80018e2:	d001      	beq.n	80018e8 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80018e4:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80018e8:	4c58      	ldr	r4, [pc, #352]	; (8001a4c <HAL_GPIO_Init+0x1b0>)
 80018ea:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ec:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f2:	684f      	ldr	r7, [r1, #4]
 80018f4:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80018f8:	d001      	beq.n	80018fe <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80018fa:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80018fe:	4c53      	ldr	r4, [pc, #332]	; (8001a4c <HAL_GPIO_Init+0x1b0>)
 8001900:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8001902:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8001904:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001906:	684e      	ldr	r6, [r1, #4]
 8001908:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800190c:	d001      	beq.n	8001912 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800190e:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8001912:	4c4e      	ldr	r4, [pc, #312]	; (8001a4c <HAL_GPIO_Init+0x1b0>)
 8001914:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001916:	3301      	adds	r3, #1
 8001918:	2b0f      	cmp	r3, #15
 800191a:	f200 8091 	bhi.w	8001a40 <HAL_GPIO_Init+0x1a4>
    ioposition = 0x01U << position;
 800191e:	2201      	movs	r2, #1
 8001920:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001922:	680c      	ldr	r4, [r1, #0]
 8001924:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8001928:	42aa      	cmp	r2, r5
 800192a:	d1f4      	bne.n	8001916 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800192c:	684c      	ldr	r4, [r1, #4]
 800192e:	2c02      	cmp	r4, #2
 8001930:	d001      	beq.n	8001936 <HAL_GPIO_Init+0x9a>
 8001932:	2c12      	cmp	r4, #18
 8001934:	d110      	bne.n	8001958 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3U];
 8001936:	08de      	lsrs	r6, r3, #3
 8001938:	3608      	adds	r6, #8
 800193a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193e:	f003 0407 	and.w	r4, r3, #7
 8001942:	00a7      	lsls	r7, r4, #2
 8001944:	240f      	movs	r4, #15
 8001946:	40bc      	lsls	r4, r7
 8001948:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800194c:	690c      	ldr	r4, [r1, #16]
 800194e:	40bc      	lsls	r4, r7
 8001950:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001954:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001958:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800195a:	005f      	lsls	r7, r3, #1
 800195c:	2603      	movs	r6, #3
 800195e:	40be      	lsls	r6, r7
 8001960:	43f6      	mvns	r6, r6
 8001962:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	684c      	ldr	r4, [r1, #4]
 8001968:	f004 0403 	and.w	r4, r4, #3
 800196c:	40bc      	lsls	r4, r7
 800196e:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8001972:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001974:	684c      	ldr	r4, [r1, #4]
 8001976:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800197a:	f1bc 0f01 	cmp.w	ip, #1
 800197e:	d903      	bls.n	8001988 <HAL_GPIO_Init+0xec>
 8001980:	2c11      	cmp	r4, #17
 8001982:	d001      	beq.n	8001988 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001984:	2c12      	cmp	r4, #18
 8001986:	d110      	bne.n	80019aa <HAL_GPIO_Init+0x10e>
        temp = GPIOx->OSPEEDR; 
 8001988:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198a:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800198e:	68cc      	ldr	r4, [r1, #12]
 8001990:	40bc      	lsls	r4, r7
 8001992:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8001996:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001998:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199a:	ea24 0202 	bic.w	r2, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800199e:	684c      	ldr	r4, [r1, #4]
 80019a0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80019a4:	409c      	lsls	r4, r3
 80019a6:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80019a8:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80019aa:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ac:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ae:	688a      	ldr	r2, [r1, #8]
 80019b0:	40ba      	lsls	r2, r7
 80019b2:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80019b4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b6:	684a      	ldr	r2, [r1, #4]
 80019b8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80019bc:	d0ab      	beq.n	8001916 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2200      	movs	r2, #0
 80019c0:	9201      	str	r2, [sp, #4]
 80019c2:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <HAL_GPIO_Init+0x1b4>)
 80019c4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80019c6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80019ca:	6454      	str	r4, [r2, #68]	; 0x44
 80019cc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019ce:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019d2:	9201      	str	r2, [sp, #4]
 80019d4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80019d6:	089c      	lsrs	r4, r3, #2
 80019d8:	1ca6      	adds	r6, r4, #2
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_GPIO_Init+0x1ac>)
 80019dc:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e0:	f003 0203 	and.w	r2, r3, #3
 80019e4:	0096      	lsls	r6, r2, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	40b2      	lsls	r2, r6
 80019ea:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_GPIO_Init+0x1b8>)
 80019f0:	4290      	cmp	r0, r2
 80019f2:	f43f af5c 	beq.w	80018ae <HAL_GPIO_Init+0x12>
 80019f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80019fa:	4290      	cmp	r0, r2
 80019fc:	d016      	beq.n	8001a2c <HAL_GPIO_Init+0x190>
 80019fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a02:	4290      	cmp	r0, r2
 8001a04:	d014      	beq.n	8001a30 <HAL_GPIO_Init+0x194>
 8001a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a0a:	4290      	cmp	r0, r2
 8001a0c:	d012      	beq.n	8001a34 <HAL_GPIO_Init+0x198>
 8001a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a12:	4290      	cmp	r0, r2
 8001a14:	d010      	beq.n	8001a38 <HAL_GPIO_Init+0x19c>
 8001a16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a1a:	4290      	cmp	r0, r2
 8001a1c:	d00e      	beq.n	8001a3c <HAL_GPIO_Init+0x1a0>
 8001a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001a22:	4290      	cmp	r0, r2
 8001a24:	f43f af41 	beq.w	80018aa <HAL_GPIO_Init+0xe>
 8001a28:	2207      	movs	r2, #7
 8001a2a:	e741      	b.n	80018b0 <HAL_GPIO_Init+0x14>
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	e73f      	b.n	80018b0 <HAL_GPIO_Init+0x14>
 8001a30:	2202      	movs	r2, #2
 8001a32:	e73d      	b.n	80018b0 <HAL_GPIO_Init+0x14>
 8001a34:	2203      	movs	r2, #3
 8001a36:	e73b      	b.n	80018b0 <HAL_GPIO_Init+0x14>
 8001a38:	2204      	movs	r2, #4
 8001a3a:	e739      	b.n	80018b0 <HAL_GPIO_Init+0x14>
 8001a3c:	2205      	movs	r2, #5
 8001a3e:	e737      	b.n	80018b0 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001a40:	b002      	add	sp, #8
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	4770      	bx	lr
 8001a46:	4770      	bx	lr
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40013c00 	.word	0x40013c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000

08001a58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a58:	6903      	ldr	r3, [r0, #16]
 8001a5a:	4219      	tst	r1, r3
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a5e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001a60:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8001a62:	2001      	movs	r0, #1
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a66:	b912      	cbnz	r2, 8001a6e <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a68:	0409      	lsls	r1, r1, #16
 8001a6a:	6181      	str	r1, [r0, #24]
  }
}
 8001a6c:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	6181      	str	r1, [r0, #24]
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a74:	2800      	cmp	r0, #0
 8001a76:	f000 809d 	beq.w	8001bb4 <HAL_RCC_ClockConfig+0x140>
{
 8001a7a:	b570      	push	{r4, r5, r6, lr}
 8001a7c:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7e:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <HAL_RCC_ClockConfig+0x148>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	428b      	cmp	r3, r1
 8001a88:	d209      	bcs.n	8001a9e <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	b2cb      	uxtb	r3, r1
 8001a8c:	4a4b      	ldr	r2, [pc, #300]	; (8001bbc <HAL_RCC_ClockConfig+0x148>)
 8001a8e:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a90:	6813      	ldr	r3, [r2, #0]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	428b      	cmp	r3, r1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8001a9a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 8001a9c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a9e:	6823      	ldr	r3, [r4, #0]
 8001aa0:	f013 0f02 	tst.w	r3, #2
 8001aa4:	d017      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	f013 0f04 	tst.w	r3, #4
 8001aaa:	d004      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aac:	4a44      	ldr	r2, [pc, #272]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001aae:	6893      	ldr	r3, [r2, #8]
 8001ab0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ab4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	f013 0f08 	tst.w	r3, #8
 8001abc:	d004      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001abe:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001ac0:	6893      	ldr	r3, [r2, #8]
 8001ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ac6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4a3d      	ldr	r2, [pc, #244]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001aca:	6893      	ldr	r3, [r2, #8]
 8001acc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad0:	68a0      	ldr	r0, [r4, #8]
 8001ad2:	4303      	orrs	r3, r0
 8001ad4:	6093      	str	r3, [r2, #8]
 8001ad6:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	f013 0f01 	tst.w	r3, #1
 8001ade:	d032      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d021      	beq.n	8001b2a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae6:	1e9a      	subs	r2, r3, #2
 8001ae8:	2a01      	cmp	r2, #1
 8001aea:	d925      	bls.n	8001b38 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aec:	4a34      	ldr	r2, [pc, #208]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	f012 0f02 	tst.w	r2, #2
 8001af4:	d060      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4932      	ldr	r1, [pc, #200]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001af8:	688a      	ldr	r2, [r1, #8]
 8001afa:	f022 0203 	bic.w	r2, r2, #3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001b02:	f7ff fa45 	bl	8000f90 <HAL_GetTick>
 8001b06:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	6862      	ldr	r2, [r4, #4]
 8001b12:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b16:	d016      	beq.n	8001b46 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7ff fa3a 	bl	8000f90 <HAL_GetTick>
 8001b1c:	1b80      	subs	r0, r0, r6
 8001b1e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b22:	4298      	cmp	r0, r3
 8001b24:	d9f0      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001b26:	2003      	movs	r0, #3
 8001b28:	e7b8      	b.n	8001a9c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	4a25      	ldr	r2, [pc, #148]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001b32:	d1e0      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001b34:	2001      	movs	r0, #1
 8001b36:	e7b1      	b.n	8001a9c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b38:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001b40:	d1d9      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	e7aa      	b.n	8001a9c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_ClockConfig+0x148>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	42ab      	cmp	r3, r5
 8001b50:	d909      	bls.n	8001b66 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b52:	b2ea      	uxtb	r2, r5
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_ClockConfig+0x148>)
 8001b56:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	42ab      	cmp	r3, r5
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001b62:	2001      	movs	r0, #1
 8001b64:	e79a      	b.n	8001a9c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	f013 0f04 	tst.w	r3, #4
 8001b6c:	d006      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001b70:	6893      	ldr	r3, [r2, #8]
 8001b72:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b76:	68e1      	ldr	r1, [r4, #12]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f013 0f08 	tst.w	r3, #8
 8001b82:	d007      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001b86:	6893      	ldr	r3, [r2, #8]
 8001b88:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b8c:	6921      	ldr	r1, [r4, #16]
 8001b8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b94:	f000 f840 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x14c>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ba0:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_RCC_ClockConfig+0x150>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	40d8      	lsrs	r0, r3
 8001ba6:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <HAL_RCC_ClockConfig+0x154>)
 8001ba8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff f9a6 	bl	8000efc <HAL_InitTick>
  return HAL_OK;
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	e773      	b.n	8001a9c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001bb4:	2001      	movs	r0, #1
}
 8001bb6:	4770      	bx	lr
        return HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
 8001bba:	e76f      	b.n	8001a9c <HAL_RCC_ClockConfig+0x28>
 8001bbc:	40023c00 	.word	0x40023c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08004d24 	.word	0x08004d24
 8001bc8:	20000008 	.word	0x20000008

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001bcc:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bda:	f7ff fff7 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001be6:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bea:	40d8      	lsrs	r0, r3
 8001bec:	bd08      	pop	{r3, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	08004d34 	.word	0x08004d34

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bfa:	f7ff ffe7 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c06:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c0a:	40d8      	lsrs	r0, r3
 8001c0c:	bd08      	pop	{r3, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08004d34 	.word	0x08004d34

08001c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c1c:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d007      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x20>
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	d05b      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0xcc>
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	f000 80ad 	beq.w	8001d8c <HAL_RCC_GetSysClockFreq+0x174>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c32:	4858      	ldr	r0, [pc, #352]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x17c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c34:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c38:	4b55      	ldr	r3, [pc, #340]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001c46:	d02a      	beq.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c48:	4b51      	ldr	r3, [pc, #324]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001c50:	461e      	mov	r6, r3
 8001c52:	2700      	movs	r7, #0
 8001c54:	015c      	lsls	r4, r3, #5
 8001c56:	2500      	movs	r5, #0
 8001c58:	1ae4      	subs	r4, r4, r3
 8001c5a:	eb65 0507 	sbc.w	r5, r5, r7
 8001c5e:	01a9      	lsls	r1, r5, #6
 8001c60:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001c64:	01a0      	lsls	r0, r4, #6
 8001c66:	1b00      	subs	r0, r0, r4
 8001c68:	eb61 0105 	sbc.w	r1, r1, r5
 8001c6c:	00cb      	lsls	r3, r1, #3
 8001c6e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c72:	00c4      	lsls	r4, r0, #3
 8001c74:	19a0      	adds	r0, r4, r6
 8001c76:	eb43 0107 	adc.w	r1, r3, r7
 8001c7a:	024b      	lsls	r3, r1, #9
 8001c7c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001c80:	0244      	lsls	r4, r0, #9
 8001c82:	4620      	mov	r0, r4
 8001c84:	4619      	mov	r1, r3
 8001c86:	2300      	movs	r3, #0
 8001c88:	f7fe ffb8 	bl	8000bfc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c8c:	4b40      	ldr	r3, [pc, #256]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c94:	3301      	adds	r3, #1
 8001c96:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c98:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001c9c:	e7ca      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ca6:	461e      	mov	r6, r3
 8001ca8:	2700      	movs	r7, #0
 8001caa:	015c      	lsls	r4, r3, #5
 8001cac:	2500      	movs	r5, #0
 8001cae:	1ae4      	subs	r4, r4, r3
 8001cb0:	eb65 0507 	sbc.w	r5, r5, r7
 8001cb4:	01a9      	lsls	r1, r5, #6
 8001cb6:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001cba:	01a0      	lsls	r0, r4, #6
 8001cbc:	1b00      	subs	r0, r0, r4
 8001cbe:	eb61 0105 	sbc.w	r1, r1, r5
 8001cc2:	00cb      	lsls	r3, r1, #3
 8001cc4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cc8:	00c4      	lsls	r4, r0, #3
 8001cca:	19a0      	adds	r0, r4, r6
 8001ccc:	eb43 0107 	adc.w	r1, r3, r7
 8001cd0:	028b      	lsls	r3, r1, #10
 8001cd2:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001cd6:	0284      	lsls	r4, r0, #10
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f7fe ff8d 	bl	8000bfc <__aeabi_uldivmod>
 8001ce2:	e7d3      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x74>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cf2:	d028      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x12e>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001cfc:	461e      	mov	r6, r3
 8001cfe:	2700      	movs	r7, #0
 8001d00:	015c      	lsls	r4, r3, #5
 8001d02:	2500      	movs	r5, #0
 8001d04:	1ae4      	subs	r4, r4, r3
 8001d06:	eb65 0507 	sbc.w	r5, r5, r7
 8001d0a:	01a9      	lsls	r1, r5, #6
 8001d0c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001d10:	01a0      	lsls	r0, r4, #6
 8001d12:	1b00      	subs	r0, r0, r4
 8001d14:	eb61 0105 	sbc.w	r1, r1, r5
 8001d18:	00cb      	lsls	r3, r1, #3
 8001d1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d1e:	00c4      	lsls	r4, r0, #3
 8001d20:	19a0      	adds	r0, r4, r6
 8001d22:	eb43 0107 	adc.w	r1, r3, r7
 8001d26:	024b      	lsls	r3, r1, #9
 8001d28:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001d2c:	0244      	lsls	r4, r0, #9
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4619      	mov	r1, r3
 8001d32:	2300      	movs	r3, #0
 8001d34:	f7fe ff62 	bl	8000bfc <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8001d40:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001d44:	e776      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x178>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001d4e:	461e      	mov	r6, r3
 8001d50:	2700      	movs	r7, #0
 8001d52:	015c      	lsls	r4, r3, #5
 8001d54:	2500      	movs	r5, #0
 8001d56:	1ae4      	subs	r4, r4, r3
 8001d58:	eb65 0507 	sbc.w	r5, r5, r7
 8001d5c:	01a9      	lsls	r1, r5, #6
 8001d5e:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001d62:	01a0      	lsls	r0, r4, #6
 8001d64:	1b00      	subs	r0, r0, r4
 8001d66:	eb61 0105 	sbc.w	r1, r1, r5
 8001d6a:	00cb      	lsls	r3, r1, #3
 8001d6c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d70:	00c4      	lsls	r4, r0, #3
 8001d72:	19a0      	adds	r0, r4, r6
 8001d74:	eb43 0107 	adc.w	r1, r3, r7
 8001d78:	028b      	lsls	r3, r1, #10
 8001d7a:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001d7e:	0284      	lsls	r4, r0, #10
 8001d80:	4620      	mov	r0, r4
 8001d82:	4619      	mov	r1, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	f7fe ff39 	bl	8000bfc <__aeabi_uldivmod>
 8001d8a:	e7d5      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x120>
      sysclockfreq = HSE_VALUE;
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x180>)
  return sysclockfreq;
 8001d8e:	e751      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x1c>
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b570      	push	{r4, r5, r6, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	6803      	ldr	r3, [r0, #0]
 8001da4:	f013 0f01 	tst.w	r3, #1
 8001da8:	d041      	beq.n	8001e2e <HAL_RCC_OscConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001daa:	4ba6      	ldr	r3, [pc, #664]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d032      	beq.n	8001e1c <HAL_RCC_OscConfig+0x80>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001db6:	4ba3      	ldr	r3, [pc, #652]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d027      	beq.n	8001e12 <HAL_RCC_OscConfig+0x76>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dc2:	4ba0      	ldr	r3, [pc, #640]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d059      	beq.n	8001e82 <HAL_RCC_OscConfig+0xe6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dce:	6863      	ldr	r3, [r4, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d05b      	beq.n	8001e8e <HAL_RCC_OscConfig+0xf2>
 8001dd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dda:	d05e      	beq.n	8001e9a <HAL_RCC_OscConfig+0xfe>
 8001ddc:	4b99      	ldr	r3, [pc, #612]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dee:	6863      	ldr	r3, [r4, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d05c      	beq.n	8001eae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f8cc 	bl	8000f90 <HAL_GetTick>
 8001df8:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b92      	ldr	r3, [pc, #584]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e02:	d114      	bne.n	8001e2e <HAL_RCC_OscConfig+0x92>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff f8c4 	bl	8000f90 <HAL_GetTick>
 8001e08:	1b40      	subs	r0, r0, r5
 8001e0a:	2864      	cmp	r0, #100	; 0x64
 8001e0c:	d9f5      	bls.n	8001dfa <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8001e0e:	2003      	movs	r0, #3
 8001e10:	e19d      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e12:	4b8c      	ldr	r3, [pc, #560]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e1a:	d0d2      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4b89      	ldr	r3, [pc, #548]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e24:	d003      	beq.n	8001e2e <HAL_RCC_OscConfig+0x92>
 8001e26:	6863      	ldr	r3, [r4, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 818d 	beq.w	8002148 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f013 0f02 	tst.w	r3, #2
 8001e34:	d067      	beq.n	8001f06 <HAL_RCC_OscConfig+0x16a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e36:	4b83      	ldr	r3, [pc, #524]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f013 0f0c 	tst.w	r3, #12
 8001e3e:	d04a      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e40:	4b80      	ldr	r3, [pc, #512]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d03f      	beq.n	8001ecc <HAL_RCC_OscConfig+0x130>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d048      	beq.n	8001eea <HAL_RCC_OscConfig+0x14e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e58:	68e3      	ldr	r3, [r4, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d074      	beq.n	8001f48 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <HAL_RCC_OscConfig+0x2ac>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f894 	bl	8000f90 <HAL_GetTick>
 8001e68:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b76      	ldr	r3, [pc, #472]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f013 0f02 	tst.w	r3, #2
 8001e72:	d160      	bne.n	8001f36 <HAL_RCC_OscConfig+0x19a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff f88c 	bl	8000f90 <HAL_GetTick>
 8001e78:	1b40      	subs	r0, r0, r5
 8001e7a:	2802      	cmp	r0, #2
 8001e7c:	d9f5      	bls.n	8001e6a <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 8001e7e:	2003      	movs	r0, #3
 8001e80:	e165      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e82:	4b70      	ldr	r3, [pc, #448]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001e8a:	d0a0      	beq.n	8001dce <HAL_RCC_OscConfig+0x32>
 8001e8c:	e7c6      	b.n	8001e1c <HAL_RCC_OscConfig+0x80>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8e:	4a6d      	ldr	r2, [pc, #436]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e90:	6813      	ldr	r3, [r2, #0]
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e7a9      	b.n	8001dee <HAL_RCC_OscConfig+0x52>
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e79f      	b.n	8001dee <HAL_RCC_OscConfig+0x52>
        tickstart = HAL_GetTick();
 8001eae:	f7ff f86f 	bl	8000f90 <HAL_GetTick>
 8001eb2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb4:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ebc:	d0b7      	beq.n	8001e2e <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebe:	f7ff f867 	bl	8000f90 <HAL_GetTick>
 8001ec2:	1b40      	subs	r0, r0, r5
 8001ec4:	2864      	cmp	r0, #100	; 0x64
 8001ec6:	d9f5      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001ec8:	2003      	movs	r0, #3
 8001eca:	e140      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ecc:	4b5d      	ldr	r3, [pc, #372]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ed4:	d1ba      	bne.n	8001e4c <HAL_RCC_OscConfig+0xb0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	4b5b      	ldr	r3, [pc, #364]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f013 0f02 	tst.w	r3, #2
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x15a>
 8001ee0:	68e3      	ldr	r3, [r4, #12]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d007      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x15a>
        return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	e131      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b56      	ldr	r3, [pc, #344]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001ef2:	d1b1      	bne.n	8001e58 <HAL_RCC_OscConfig+0xbc>
 8001ef4:	e7ef      	b.n	8001ed6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4a53      	ldr	r2, [pc, #332]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001ef8:	6813      	ldr	r3, [r2, #0]
 8001efa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001efe:	6921      	ldr	r1, [r4, #16]
 8001f00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f04:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	f013 0f08 	tst.w	r3, #8
 8001f0c:	d040      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f0e:	6963      	ldr	r3, [r4, #20]
 8001f10:	b363      	cbz	r3, 8001f6c <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f12:	4b4e      	ldr	r3, [pc, #312]	; (800204c <HAL_RCC_OscConfig+0x2b0>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7ff f83a 	bl	8000f90 <HAL_GetTick>
 8001f1c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1e:	4b49      	ldr	r3, [pc, #292]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f22:	f013 0f02 	tst.w	r3, #2
 8001f26:	d133      	bne.n	8001f90 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff f832 	bl	8000f90 <HAL_GetTick>
 8001f2c:	1b40      	subs	r0, r0, r5
 8001f2e:	2802      	cmp	r0, #2
 8001f30:	d9f5      	bls.n	8001f1e <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8001f32:	2003      	movs	r0, #3
 8001f34:	e10b      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f36:	4a43      	ldr	r2, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001f38:	6813      	ldr	r3, [r2, #0]
 8001f3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f3e:	6921      	ldr	r1, [r4, #16]
 8001f40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e7de      	b.n	8001f06 <HAL_RCC_OscConfig+0x16a>
        __HAL_RCC_HSI_DISABLE();
 8001f48:	4b3f      	ldr	r3, [pc, #252]	; (8002048 <HAL_RCC_OscConfig+0x2ac>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f81f 	bl	8000f90 <HAL_GetTick>
 8001f52:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f54:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f013 0f02 	tst.w	r3, #2
 8001f5c:	d0d3      	beq.n	8001f06 <HAL_RCC_OscConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f817 	bl	8000f90 <HAL_GetTick>
 8001f62:	1b40      	subs	r0, r0, r5
 8001f64:	2802      	cmp	r0, #2
 8001f66:	d9f5      	bls.n	8001f54 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8001f68:	2003      	movs	r0, #3
 8001f6a:	e0f0      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_RCC_OscConfig+0x2b0>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff f80d 	bl	8000f90 <HAL_GetTick>
 8001f76:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7c:	f013 0f02 	tst.w	r3, #2
 8001f80:	d006      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f82:	f7ff f805 	bl	8000f90 <HAL_GetTick>
 8001f86:	1b40      	subs	r0, r0, r5
 8001f88:	2802      	cmp	r0, #2
 8001f8a:	d9f5      	bls.n	8001f78 <HAL_RCC_OscConfig+0x1dc>
        {
          return HAL_TIMEOUT;
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	e0de      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f90:	6823      	ldr	r3, [r4, #0]
 8001f92:	f013 0f04 	tst.w	r3, #4
 8001f96:	d079      	beq.n	800208c <HAL_RCC_OscConfig+0x2f0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001fa0:	d133      	bne.n	800200a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fba:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <HAL_RCC_OscConfig+0x2b4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fc4:	d023      	beq.n	800200e <HAL_RCC_OscConfig+0x272>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc6:	68a3      	ldr	r3, [r4, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d034      	beq.n	8002036 <HAL_RCC_OscConfig+0x29a>
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d041      	beq.n	8002054 <HAL_RCC_OscConfig+0x2b8>
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001fd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	671a      	str	r2, [r3, #112]	; 0x70
 8001fda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fdc:	f022 0204 	bic.w	r2, r2, #4
 8001fe0:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fe2:	68a3      	ldr	r3, [r4, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03f      	beq.n	8002068 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7fe ffd2 	bl	8000f90 <HAL_GetTick>
 8001fec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f013 0f02 	tst.w	r3, #2
 8001ff6:	d148      	bne.n	800208a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ffca 	bl	8000f90 <HAL_GetTick>
 8001ffc:	1b80      	subs	r0, r0, r6
 8001ffe:	f241 3388 	movw	r3, #5000	; 0x1388
 8002002:	4298      	cmp	r0, r3
 8002004:	d9f3      	bls.n	8001fee <HAL_RCC_OscConfig+0x252>
        {
          return HAL_TIMEOUT;
 8002006:	2003      	movs	r0, #3
 8002008:	e0a1      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2500      	movs	r5, #0
 800200c:	e7d6      	b.n	8001fbc <HAL_RCC_OscConfig+0x220>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800200e:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_RCC_OscConfig+0x2b4>)
 8002010:	6813      	ldr	r3, [r2, #0]
 8002012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002016:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002018:	f7fe ffba 	bl	8000f90 <HAL_GetTick>
 800201c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_RCC_OscConfig+0x2b4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002026:	d1ce      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe ffb2 	bl	8000f90 <HAL_GetTick>
 800202c:	1b80      	subs	r0, r0, r6
 800202e:	2802      	cmp	r0, #2
 8002030:	d9f5      	bls.n	800201e <HAL_RCC_OscConfig+0x282>
          return HAL_TIMEOUT;
 8002032:	2003      	movs	r0, #3
 8002034:	e08b      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002036:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_RCC_OscConfig+0x2a8>)
 8002038:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	e7cf      	b.n	8001fe2 <HAL_RCC_OscConfig+0x246>
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	42470000 	.word	0x42470000
 800204c:	42470e80 	.word	0x42470e80
 8002050:	40007000 	.word	0x40007000
 8002054:	4b40      	ldr	r3, [pc, #256]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 8002056:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002058:	f042 0204 	orr.w	r2, r2, #4
 800205c:	671a      	str	r2, [r3, #112]	; 0x70
 800205e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	671a      	str	r2, [r3, #112]	; 0x70
 8002066:	e7bc      	b.n	8001fe2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7fe ff92 	bl	8000f90 <HAL_GetTick>
 800206c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	4b3a      	ldr	r3, [pc, #232]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	f013 0f02 	tst.w	r3, #2
 8002076:	d008      	beq.n	800208a <HAL_RCC_OscConfig+0x2ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7fe ff8a 	bl	8000f90 <HAL_GetTick>
 800207c:	1b80      	subs	r0, r0, r6
 800207e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002082:	4298      	cmp	r0, r3
 8002084:	d9f3      	bls.n	800206e <HAL_RCC_OscConfig+0x2d2>
        {
          return HAL_TIMEOUT;
 8002086:	2003      	movs	r0, #3
 8002088:	e061      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208a:	b9e5      	cbnz	r5, 80020c6 <HAL_RCC_OscConfig+0x32a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208c:	69a3      	ldr	r3, [r4, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d05c      	beq.n	800214c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002092:	4a31      	ldr	r2, [pc, #196]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 8002094:	6892      	ldr	r2, [r2, #8]
 8002096:	f002 020c 	and.w	r2, r2, #12
 800209a:	2a08      	cmp	r2, #8
 800209c:	d059      	beq.n	8002152 <HAL_RCC_OscConfig+0x3b6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d017      	beq.n	80020d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b2e      	ldr	r3, [pc, #184]	; (800215c <HAL_RCC_OscConfig+0x3c0>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff72 	bl	8000f90 <HAL_GetTick>
 80020ac:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020b6:	d045      	beq.n	8002144 <HAL_RCC_OscConfig+0x3a8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe ff6a 	bl	8000f90 <HAL_GetTick>
 80020bc:	1b00      	subs	r0, r0, r4
 80020be:	2802      	cmp	r0, #2
 80020c0:	d9f5      	bls.n	80020ae <HAL_RCC_OscConfig+0x312>
          {
            return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
 80020c4:	e043      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4a24      	ldr	r2, [pc, #144]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 80020c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6413      	str	r3, [r2, #64]	; 0x40
 80020d0:	e7dc      	b.n	800208c <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCC_OscConfig+0x3c0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020d8:	f7fe ff5a 	bl	8000f90 <HAL_GetTick>
 80020dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020e6:	d006      	beq.n	80020f6 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ff52 	bl	8000f90 <HAL_GetTick>
 80020ec:	1b40      	subs	r0, r0, r5
 80020ee:	2802      	cmp	r0, #2
 80020f0:	d9f5      	bls.n	80020de <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80020f2:	2003      	movs	r0, #3
 80020f4:	e02b      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f6:	69e3      	ldr	r3, [r4, #28]
 80020f8:	6a22      	ldr	r2, [r4, #32]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002102:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002104:	0852      	lsrs	r2, r2, #1
 8002106:	3a01      	subs	r2, #1
 8002108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800210c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800210e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002112:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002114:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002118:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 800211a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_RCC_OscConfig+0x3c0>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002122:	f7fe ff35 	bl	8000f90 <HAL_GetTick>
 8002126:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002128:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_RCC_OscConfig+0x3bc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002130:	d106      	bne.n	8002140 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002132:	f7fe ff2d 	bl	8000f90 <HAL_GetTick>
 8002136:	1b00      	subs	r0, r0, r4
 8002138:	2802      	cmp	r0, #2
 800213a:	d9f5      	bls.n	8002128 <HAL_RCC_OscConfig+0x38c>
            return HAL_TIMEOUT;
 800213c:	2003      	movs	r0, #3
 800213e:	e006      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002140:	2000      	movs	r0, #0
 8002142:	e004      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
 8002144:	2000      	movs	r0, #0
 8002146:	e002      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
        return HAL_ERROR;
 8002148:	2001      	movs	r0, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
  return HAL_OK;
 800214c:	2000      	movs	r0, #0
}
 800214e:	b002      	add	sp, #8
 8002150:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002152:	2001      	movs	r0, #1
 8002154:	e7fb      	b.n	800214e <HAL_RCC_OscConfig+0x3b2>
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	42470060 	.word	0x42470060

08002160 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	2302      	movs	r3, #2
 8002162:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002166:	6802      	ldr	r2, [r0, #0]
 8002168:	6893      	ldr	r3, [r2, #8]
 800216a:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216e:	2b06      	cmp	r3, #6
 8002170:	d003      	beq.n	800217a <HAL_TIM_Base_Start+0x1a>
  {
    __HAL_TIM_ENABLE(htim);
 8002172:	6813      	ldr	r3, [r2, #0]
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6013      	str	r3, [r2, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800217a:	2301      	movs	r3, #1
 800217c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8002180:	2000      	movs	r0, #0
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002184:	6802      	ldr	r2, [r0, #0]
 8002186:	68d3      	ldr	r3, [r2, #12]
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218e:	6802      	ldr	r2, [r0, #0]
 8002190:	6893      	ldr	r3, [r2, #8]
 8002192:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	2b06      	cmp	r3, #6
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80021a2:	2000      	movs	r0, #0
 80021a4:	4770      	bx	lr

080021a6 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a8:	4770      	bx	lr

080021aa <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021aa:	4770      	bx	lr

080021ac <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ac:	4770      	bx	lr

080021ae <HAL_TIM_IRQHandler>:
{
 80021ae:	b510      	push	{r4, lr}
 80021b0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021b2:	6803      	ldr	r3, [r0, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	f012 0f02 	tst.w	r2, #2
 80021ba:	d011      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	f012 0f02 	tst.w	r2, #2
 80021c2:	d00d      	beq.n	80021e0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021c4:	f06f 0202 	mvn.w	r2, #2
 80021c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021ce:	6803      	ldr	r3, [r0, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f013 0f03 	tst.w	r3, #3
 80021d6:	d070      	beq.n	80022ba <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80021d8:	f7ff ffe6 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021dc:	2300      	movs	r3, #0
 80021de:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021e0:	6823      	ldr	r3, [r4, #0]
 80021e2:	691a      	ldr	r2, [r3, #16]
 80021e4:	f012 0f04 	tst.w	r2, #4
 80021e8:	d012      	beq.n	8002210 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	f012 0f04 	tst.w	r2, #4
 80021f0:	d00e      	beq.n	8002210 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021f2:	f06f 0204 	mvn.w	r2, #4
 80021f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f8:	2302      	movs	r3, #2
 80021fa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002204:	d05f      	beq.n	80022c6 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff ffce 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220c:	2300      	movs	r3, #0
 800220e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002210:	6823      	ldr	r3, [r4, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	f012 0f08 	tst.w	r2, #8
 8002218:	d012      	beq.n	8002240 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	f012 0f08 	tst.w	r2, #8
 8002220:	d00e      	beq.n	8002240 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002222:	f06f 0208 	mvn.w	r2, #8
 8002226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002228:	2304      	movs	r3, #4
 800222a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f013 0f03 	tst.w	r3, #3
 8002234:	d04e      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ffb6 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223c:	2300      	movs	r3, #0
 800223e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	f012 0f10 	tst.w	r2, #16
 8002248:	d012      	beq.n	8002270 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	f012 0f10 	tst.w	r2, #16
 8002250:	d00e      	beq.n	8002270 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002252:	f06f 0210 	mvn.w	r2, #16
 8002256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002258:	2308      	movs	r3, #8
 800225a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002264:	d03d      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	4620      	mov	r0, r4
 8002268:	f7ff ff9e 	bl	80021a8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226c:	2300      	movs	r3, #0
 800226e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002270:	6823      	ldr	r3, [r4, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	f012 0f01 	tst.w	r2, #1
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	f012 0f01 	tst.w	r2, #1
 8002280:	d136      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	f012 0f80 	tst.w	r2, #128	; 0x80
 800228a:	d003      	beq.n	8002294 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002292:	d134      	bne.n	80022fe <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002294:	6823      	ldr	r3, [r4, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	f012 0f40 	tst.w	r2, #64	; 0x40
 800229c:	d003      	beq.n	80022a6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80022a4:	d132      	bne.n	800230c <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	f012 0f20 	tst.w	r2, #32
 80022ae:	d003      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	f012 0f20 	tst.w	r2, #32
 80022b6:	d130      	bne.n	800231a <HAL_TIM_IRQHandler+0x16c>
}
 80022b8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	f7ff ff74 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022be:	4620      	mov	r0, r4
 80022c0:	f7ff ff73 	bl	80021aa <HAL_TIM_PWM_PulseFinishedCallback>
 80022c4:	e78a      	b.n	80021dc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c6:	4620      	mov	r0, r4
 80022c8:	f7ff ff6d 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff ff6c 	bl	80021aa <HAL_TIM_PWM_PulseFinishedCallback>
 80022d2:	e79b      	b.n	800220c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff ff66 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ff65 	bl	80021aa <HAL_TIM_PWM_PulseFinishedCallback>
 80022e0:	e7ac      	b.n	800223c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff ff5f 	bl	80021a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	4620      	mov	r0, r4
 80022ea:	f7ff ff5e 	bl	80021aa <HAL_TIM_PWM_PulseFinishedCallback>
 80022ee:	e7bd      	b.n	800226c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022f0:	f06f 0201 	mvn.w	r2, #1
 80022f4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80022f6:	4620      	mov	r0, r4
 80022f8:	f000 fbd8 	bl	8002aac <HAL_TIM_PeriodElapsedCallback>
 80022fc:	e7c1      	b.n	8002282 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002302:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002304:	4620      	mov	r0, r4
 8002306:	f000 f8b0 	bl	800246a <HAL_TIMEx_BreakCallback>
 800230a:	e7c3      	b.n	8002294 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800230c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002310:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002312:	4620      	mov	r0, r4
 8002314:	f7ff ff4a 	bl	80021ac <HAL_TIM_TriggerCallback>
 8002318:	e7c5      	b.n	80022a6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800231a:	f06f 0220 	mvn.w	r2, #32
 800231e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002320:	4620      	mov	r0, r4
 8002322:	f000 f8a1 	bl	8002468 <HAL_TIMEx_CommutCallback>
}
 8002326:	e7c7      	b.n	80022b8 <HAL_TIM_IRQHandler+0x10a>

08002328 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002328:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800232a:	4a30      	ldr	r2, [pc, #192]	; (80023ec <TIM_Base_SetConfig+0xc4>)
 800232c:	4290      	cmp	r0, r2
 800232e:	d012      	beq.n	8002356 <TIM_Base_SetConfig+0x2e>
 8002330:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002334:	d00f      	beq.n	8002356 <TIM_Base_SetConfig+0x2e>
 8002336:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800233a:	4290      	cmp	r0, r2
 800233c:	d00b      	beq.n	8002356 <TIM_Base_SetConfig+0x2e>
 800233e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002342:	4290      	cmp	r0, r2
 8002344:	d007      	beq.n	8002356 <TIM_Base_SetConfig+0x2e>
 8002346:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800234a:	4290      	cmp	r0, r2
 800234c:	d003      	beq.n	8002356 <TIM_Base_SetConfig+0x2e>
 800234e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002352:	4290      	cmp	r0, r2
 8002354:	d103      	bne.n	800235e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800235a:	684a      	ldr	r2, [r1, #4]
 800235c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235e:	4a23      	ldr	r2, [pc, #140]	; (80023ec <TIM_Base_SetConfig+0xc4>)
 8002360:	4290      	cmp	r0, r2
 8002362:	d02a      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 8002364:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002368:	d027      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 800236a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800236e:	4290      	cmp	r0, r2
 8002370:	d023      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 8002372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002376:	4290      	cmp	r0, r2
 8002378:	d01f      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 800237a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800237e:	4290      	cmp	r0, r2
 8002380:	d01b      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 8002382:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002386:	4290      	cmp	r0, r2
 8002388:	d017      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 800238a:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800238e:	4290      	cmp	r0, r2
 8002390:	d013      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 8002392:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002396:	4290      	cmp	r0, r2
 8002398:	d00f      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 800239a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800239e:	4290      	cmp	r0, r2
 80023a0:	d00b      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 80023a2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023a6:	4290      	cmp	r0, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 80023aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ae:	4290      	cmp	r0, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x92>
 80023b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b6:	4290      	cmp	r0, r2
 80023b8:	d103      	bne.n	80023c2 <TIM_Base_SetConfig+0x9a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023be:	68ca      	ldr	r2, [r1, #12]
 80023c0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023c6:	694a      	ldr	r2, [r1, #20]
 80023c8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80023ca:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023cc:	688b      	ldr	r3, [r1, #8]
 80023ce:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d0:	680b      	ldr	r3, [r1, #0]
 80023d2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d4:	4b05      	ldr	r3, [pc, #20]	; (80023ec <TIM_Base_SetConfig+0xc4>)
 80023d6:	4298      	cmp	r0, r3
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0xba>
 80023da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023de:	4298      	cmp	r0, r3
 80023e0:	d101      	bne.n	80023e6 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e2:	690b      	ldr	r3, [r1, #16]
 80023e4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e6:	2301      	movs	r3, #1
 80023e8:	6143      	str	r3, [r0, #20]
}
 80023ea:	4770      	bx	lr
 80023ec:	40010000 	.word	0x40010000

080023f0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80023f0:	b1a8      	cbz	r0, 800241e <HAL_TIM_Base_Init+0x2e>
{
 80023f2:	b510      	push	{r4, lr}
 80023f4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80023f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023fa:	b15b      	cbz	r3, 8002414 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	2302      	movs	r3, #2
 80023fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002402:	1d21      	adds	r1, r4, #4
 8002404:	6820      	ldr	r0, [r4, #0]
 8002406:	f7ff ff8f 	bl	8002328 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800240a:	2301      	movs	r3, #1
 800240c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002410:	2000      	movs	r0, #0
}
 8002412:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002414:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002418:	f001 ff04 	bl	8004224 <HAL_TIM_Base_MspInit>
 800241c:	e7ee      	b.n	80023fc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800241e:	2001      	movs	r0, #1
}
 8002420:	4770      	bx	lr

08002422 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002422:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002426:	2b01      	cmp	r3, #1
 8002428:	d01c      	beq.n	8002464 <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 800242a:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 800242c:	2601      	movs	r6, #1
 800242e:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002438:	6802      	ldr	r2, [r0, #0]
 800243a:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800243c:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800243e:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002442:	680c      	ldr	r4, [r1, #0]
 8002444:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002446:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800244a:	684b      	ldr	r3, [r1, #4]
 800244c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800244e:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002450:	6802      	ldr	r2, [r0, #0]
 8002452:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002454:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002458:	2300      	movs	r3, #0
 800245a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800245e:	4618      	mov	r0, r3
}
 8002460:	bc70      	pop	{r4, r5, r6}
 8002462:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002464:	2002      	movs	r0, #2
}
 8002466:	4770      	bx	lr

08002468 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002468:	4770      	bx	lr

0800246a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800246a:	4770      	bx	lr

0800246c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800246c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002470:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002472:	6802      	ldr	r2, [r0, #0]
 8002474:	6913      	ldr	r3, [r2, #16]
 8002476:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800247a:	68c1      	ldr	r1, [r0, #12]
 800247c:	430b      	orrs	r3, r1
 800247e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002480:	6883      	ldr	r3, [r0, #8]
 8002482:	6902      	ldr	r2, [r0, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	6942      	ldr	r2, [r0, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	69c2      	ldr	r2, [r0, #28]
 800248c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 800248e:	6801      	ldr	r1, [r0, #0]
 8002490:	68cb      	ldr	r3, [r1, #12]
 8002492:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002496:	f023 030c 	bic.w	r3, r3, #12
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800249e:	6802      	ldr	r2, [r0, #0]
 80024a0:	6953      	ldr	r3, [r2, #20]
 80024a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a6:	6981      	ldr	r1, [r0, #24]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ac:	69c3      	ldr	r3, [r0, #28]
 80024ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b2:	d060      	beq.n	8002576 <UART_SetConfig+0x10a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024b4:	6803      	ldr	r3, [r0, #0]
 80024b6:	4ab8      	ldr	r2, [pc, #736]	; (8002798 <UART_SetConfig+0x32c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	f000 8114 	beq.w	80026e6 <UART_SetConfig+0x27a>
 80024be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024c2:	4293      	cmp	r3, r2
 80024c4:	f000 810f 	beq.w	80026e6 <UART_SetConfig+0x27a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80024c8:	f7ff fb86 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80024cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024d4:	6865      	ldr	r5, [r4, #4]
 80024d6:	00ad      	lsls	r5, r5, #2
 80024d8:	fbb0 f5f5 	udiv	r5, r0, r5
 80024dc:	4faf      	ldr	r7, [pc, #700]	; (800279c <UART_SetConfig+0x330>)
 80024de:	fba7 3505 	umull	r3, r5, r7, r5
 80024e2:	096d      	lsrs	r5, r5, #5
 80024e4:	012e      	lsls	r6, r5, #4
 80024e6:	f7ff fb77 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80024ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024f2:	6865      	ldr	r5, [r4, #4]
 80024f4:	00ad      	lsls	r5, r5, #2
 80024f6:	fbb0 f9f5 	udiv	r9, r0, r5
 80024fa:	f7ff fb6d 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80024fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002502:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002506:	6865      	ldr	r5, [r4, #4]
 8002508:	00ad      	lsls	r5, r5, #2
 800250a:	fbb0 f5f5 	udiv	r5, r0, r5
 800250e:	fba7 3505 	umull	r3, r5, r7, r5
 8002512:	096d      	lsrs	r5, r5, #5
 8002514:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002518:	fb08 9515 	mls	r5, r8, r5, r9
 800251c:	012d      	lsls	r5, r5, #4
 800251e:	3532      	adds	r5, #50	; 0x32
 8002520:	fba7 3505 	umull	r3, r5, r7, r5
 8002524:	096d      	lsrs	r5, r5, #5
 8002526:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 800252a:	4435      	add	r5, r6
 800252c:	f7ff fb54 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002530:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002534:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002538:	6866      	ldr	r6, [r4, #4]
 800253a:	00b6      	lsls	r6, r6, #2
 800253c:	fbb0 f6f6 	udiv	r6, r0, r6
 8002540:	f7ff fb4a 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002544:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800254c:	6863      	ldr	r3, [r4, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	fbb0 f0f3 	udiv	r0, r0, r3
 8002554:	fba7 3000 	umull	r3, r0, r7, r0
 8002558:	0940      	lsrs	r0, r0, #5
 800255a:	fb08 6810 	mls	r8, r8, r0, r6
 800255e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002562:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002566:	fba7 3708 	umull	r3, r7, r7, r8
 800256a:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	442f      	add	r7, r5
 8002572:	609f      	str	r7, [r3, #8]
    }
  }
}
 8002574:	e10d      	b.n	8002792 <UART_SetConfig+0x326>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002576:	6803      	ldr	r3, [r0, #0]
 8002578:	4a87      	ldr	r2, [pc, #540]	; (8002798 <UART_SetConfig+0x32c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d05b      	beq.n	8002636 <UART_SetConfig+0x1ca>
 800257e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002582:	4293      	cmp	r3, r2
 8002584:	d057      	beq.n	8002636 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002586:	f7ff fb27 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 800258a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800258e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002592:	6865      	ldr	r5, [r4, #4]
 8002594:	006d      	lsls	r5, r5, #1
 8002596:	fbb0 f5f5 	udiv	r5, r0, r5
 800259a:	4f80      	ldr	r7, [pc, #512]	; (800279c <UART_SetConfig+0x330>)
 800259c:	fba7 3505 	umull	r3, r5, r7, r5
 80025a0:	096d      	lsrs	r5, r5, #5
 80025a2:	012e      	lsls	r6, r5, #4
 80025a4:	f7ff fb18 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80025a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025b0:	6865      	ldr	r5, [r4, #4]
 80025b2:	006d      	lsls	r5, r5, #1
 80025b4:	fbb0 f9f5 	udiv	r9, r0, r5
 80025b8:	f7ff fb0e 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80025bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025c4:	6865      	ldr	r5, [r4, #4]
 80025c6:	006d      	lsls	r5, r5, #1
 80025c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80025cc:	fba7 3505 	umull	r3, r5, r7, r5
 80025d0:	096d      	lsrs	r5, r5, #5
 80025d2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80025d6:	fb08 9515 	mls	r5, r8, r5, r9
 80025da:	00ed      	lsls	r5, r5, #3
 80025dc:	3532      	adds	r5, #50	; 0x32
 80025de:	fba7 3505 	umull	r3, r5, r7, r5
 80025e2:	096d      	lsrs	r5, r5, #5
 80025e4:	006d      	lsls	r5, r5, #1
 80025e6:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 80025ea:	4435      	add	r5, r6
 80025ec:	f7ff faf4 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 80025f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f8:	6866      	ldr	r6, [r4, #4]
 80025fa:	0076      	lsls	r6, r6, #1
 80025fc:	fbb0 f6f6 	udiv	r6, r0, r6
 8002600:	f7ff faea 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8002604:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002608:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800260c:	6863      	ldr	r3, [r4, #4]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fbb0 f3f3 	udiv	r3, r0, r3
 8002614:	fba7 2303 	umull	r2, r3, r7, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	fb08 6813 	mls	r8, r8, r3, r6
 800261e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8002622:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002626:	fba7 3708 	umull	r3, r7, r7, r8
 800262a:	f3c7 1742 	ubfx	r7, r7, #5, #3
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	442f      	add	r7, r5
 8002632:	609f      	str	r7, [r3, #8]
 8002634:	e0ad      	b.n	8002792 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002636:	f7ff fadf 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 800263a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800263e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002642:	6865      	ldr	r5, [r4, #4]
 8002644:	006d      	lsls	r5, r5, #1
 8002646:	fbb0 f5f5 	udiv	r5, r0, r5
 800264a:	4f54      	ldr	r7, [pc, #336]	; (800279c <UART_SetConfig+0x330>)
 800264c:	fba7 3505 	umull	r3, r5, r7, r5
 8002650:	096d      	lsrs	r5, r5, #5
 8002652:	012e      	lsls	r6, r5, #4
 8002654:	f7ff fad0 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8002658:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800265c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002660:	6865      	ldr	r5, [r4, #4]
 8002662:	006d      	lsls	r5, r5, #1
 8002664:	fbb0 f9f5 	udiv	r9, r0, r5
 8002668:	f7ff fac6 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 800266c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002670:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002674:	6865      	ldr	r5, [r4, #4]
 8002676:	006d      	lsls	r5, r5, #1
 8002678:	fbb0 f5f5 	udiv	r5, r0, r5
 800267c:	fba7 3505 	umull	r3, r5, r7, r5
 8002680:	096d      	lsrs	r5, r5, #5
 8002682:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002686:	fb08 9515 	mls	r5, r8, r5, r9
 800268a:	00ed      	lsls	r5, r5, #3
 800268c:	3532      	adds	r5, #50	; 0x32
 800268e:	fba7 3505 	umull	r3, r5, r7, r5
 8002692:	096d      	lsrs	r5, r5, #5
 8002694:	006d      	lsls	r5, r5, #1
 8002696:	f405 75f8 	and.w	r5, r5, #496	; 0x1f0
 800269a:	4435      	add	r5, r6
 800269c:	f7ff faac 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80026a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026a8:	6866      	ldr	r6, [r4, #4]
 80026aa:	0076      	lsls	r6, r6, #1
 80026ac:	fbb0 f6f6 	udiv	r6, r0, r6
 80026b0:	f7ff faa2 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80026b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c4:	fba7 2303 	umull	r2, r3, r7, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	fb08 6813 	mls	r8, r8, r3, r6
 80026ce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80026d2:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80026d6:	fba7 3708 	umull	r3, r7, r7, r8
 80026da:	f3c7 1742 	ubfx	r7, r7, #5, #3
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	442f      	add	r7, r5
 80026e2:	609f      	str	r7, [r3, #8]
 80026e4:	e055      	b.n	8002792 <UART_SetConfig+0x326>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80026e6:	f7ff fa87 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80026ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80026f2:	6865      	ldr	r5, [r4, #4]
 80026f4:	00ad      	lsls	r5, r5, #2
 80026f6:	fbb0 f5f5 	udiv	r5, r0, r5
 80026fa:	4f28      	ldr	r7, [pc, #160]	; (800279c <UART_SetConfig+0x330>)
 80026fc:	fba7 3505 	umull	r3, r5, r7, r5
 8002700:	096d      	lsrs	r5, r5, #5
 8002702:	012e      	lsls	r6, r5, #4
 8002704:	f7ff fa78 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8002708:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800270c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002710:	6865      	ldr	r5, [r4, #4]
 8002712:	00ad      	lsls	r5, r5, #2
 8002714:	fbb0 f9f5 	udiv	r9, r0, r5
 8002718:	f7ff fa6e 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 800271c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002720:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002724:	6865      	ldr	r5, [r4, #4]
 8002726:	00ad      	lsls	r5, r5, #2
 8002728:	fbb0 f5f5 	udiv	r5, r0, r5
 800272c:	fba7 3505 	umull	r3, r5, r7, r5
 8002730:	096d      	lsrs	r5, r5, #5
 8002732:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002736:	fb08 9515 	mls	r5, r8, r5, r9
 800273a:	012d      	lsls	r5, r5, #4
 800273c:	3532      	adds	r5, #50	; 0x32
 800273e:	fba7 3505 	umull	r3, r5, r7, r5
 8002742:	096d      	lsrs	r5, r5, #5
 8002744:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8002748:	4435      	add	r5, r6
 800274a:	f7ff fa55 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 800274e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002752:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002756:	6866      	ldr	r6, [r4, #4]
 8002758:	00b6      	lsls	r6, r6, #2
 800275a:	fbb0 f6f6 	udiv	r6, r0, r6
 800275e:	f7ff fa4b 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8002762:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002766:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800276a:	6863      	ldr	r3, [r4, #4]
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002772:	fba7 3000 	umull	r3, r0, r7, r0
 8002776:	0940      	lsrs	r0, r0, #5
 8002778:	fb08 6810 	mls	r8, r8, r0, r6
 800277c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002780:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8002784:	fba7 3708 	umull	r3, r7, r7, r8
 8002788:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	442f      	add	r7, r5
 8002790:	609f      	str	r7, [r3, #8]
}
 8002792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002796:	bf00      	nop
 8002798:	40011000 	.word	0x40011000
 800279c:	51eb851f 	.word	0x51eb851f

080027a0 <UART_WaitOnFlagUntilTimeout>:
{
 80027a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a4:	4605      	mov	r5, r0
 80027a6:	460f      	mov	r7, r1
 80027a8:	4616      	mov	r6, r2
 80027aa:	4698      	mov	r8, r3
 80027ac:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027ae:	682b      	ldr	r3, [r5, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	ea37 0303 	bics.w	r3, r7, r3
 80027b6:	bf0c      	ite	eq
 80027b8:	2301      	moveq	r3, #1
 80027ba:	2300      	movne	r3, #0
 80027bc:	42b3      	cmp	r3, r6
 80027be:	d11d      	bne.n	80027fc <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80027c0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80027c4:	d0f3      	beq.n	80027ae <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80027c6:	b12c      	cbz	r4, 80027d4 <UART_WaitOnFlagUntilTimeout+0x34>
 80027c8:	f7fe fbe2 	bl	8000f90 <HAL_GetTick>
 80027cc:	eba0 0008 	sub.w	r0, r0, r8
 80027d0:	42a0      	cmp	r0, r4
 80027d2:	d9ec      	bls.n	80027ae <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027d4:	682a      	ldr	r2, [r5, #0]
 80027d6:	68d3      	ldr	r3, [r2, #12]
 80027d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027dc:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027de:	682a      	ldr	r2, [r5, #0]
 80027e0:	6953      	ldr	r3, [r2, #20]
 80027e2:	f023 0301 	bic.w	r3, r3, #1
 80027e6:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80027e8:	2320      	movs	r3, #32
 80027ea:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027ee:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80027f2:	2300      	movs	r3, #0
 80027f4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80027f8:	2003      	movs	r0, #3
 80027fa:	e000      	b.n	80027fe <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80027fc:	2000      	movs	r0, #0
}
 80027fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002802 <HAL_UART_Init>:
  if (huart == NULL)
 8002802:	b358      	cbz	r0, 800285c <HAL_UART_Init+0x5a>
{
 8002804:	b510      	push	{r4, lr}
 8002806:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002808:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800280c:	b30b      	cbz	r3, 8002852 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800280e:	2324      	movs	r3, #36	; 0x24
 8002810:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002814:	6822      	ldr	r2, [r4, #0]
 8002816:	68d3      	ldr	r3, [r2, #12]
 8002818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800281e:	4620      	mov	r0, r4
 8002820:	f7ff fe24 	bl	800246c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	6913      	ldr	r3, [r2, #16]
 8002828:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800282c:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	6953      	ldr	r3, [r2, #20]
 8002832:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002836:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	68d3      	ldr	r3, [r2, #12]
 800283c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002840:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002842:	2000      	movs	r0, #0
 8002844:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002846:	2320      	movs	r3, #32
 8002848:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800284c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8002850:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002852:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002856:	f001 fd2b 	bl	80042b0 <HAL_UART_MspInit>
 800285a:	e7d8      	b.n	800280e <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800285c:	2001      	movs	r0, #1
}
 800285e:	4770      	bx	lr

08002860 <HAL_UART_Transmit>:
{
 8002860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002868:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b20      	cmp	r3, #32
 8002870:	d155      	bne.n	800291e <HAL_UART_Transmit+0xbe>
 8002872:	4604      	mov	r4, r0
 8002874:	460d      	mov	r5, r1
 8002876:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002878:	2900      	cmp	r1, #0
 800287a:	d055      	beq.n	8002928 <HAL_UART_Transmit+0xc8>
 800287c:	2a00      	cmp	r2, #0
 800287e:	d055      	beq.n	800292c <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002880:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002884:	2b01      	cmp	r3, #1
 8002886:	d053      	beq.n	8002930 <HAL_UART_Transmit+0xd0>
 8002888:	2301      	movs	r3, #1
 800288a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288e:	2300      	movs	r3, #0
 8002890:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002892:	2321      	movs	r3, #33	; 0x21
 8002894:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002898:	f7fe fb7a 	bl	8000f90 <HAL_GetTick>
 800289c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800289e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80028a2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028a6:	e010      	b.n	80028ca <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a8:	9600      	str	r6, [sp, #0]
 80028aa:	463b      	mov	r3, r7
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	; 0x80
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff ff75 	bl	80027a0 <UART_WaitOnFlagUntilTimeout>
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d13c      	bne.n	8002934 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80028ba:	882b      	ldrh	r3, [r5, #0]
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80028c4:	6923      	ldr	r3, [r4, #16]
 80028c6:	b9c3      	cbnz	r3, 80028fa <HAL_UART_Transmit+0x9a>
          pData += 2U;
 80028c8:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80028ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	b1b3      	cbz	r3, 80028fe <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80028d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028d8:	68a3      	ldr	r3, [r4, #8]
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028de:	d0e3      	beq.n	80028a8 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028e0:	9600      	str	r6, [sp, #0]
 80028e2:	463b      	mov	r3, r7
 80028e4:	2200      	movs	r2, #0
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff ff59 	bl	80027a0 <UART_WaitOnFlagUntilTimeout>
 80028ee:	bb18      	cbnz	r0, 8002938 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028f0:	782a      	ldrb	r2, [r5, #0]
 80028f2:	6823      	ldr	r3, [r4, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	3501      	adds	r5, #1
 80028f8:	e7e7      	b.n	80028ca <HAL_UART_Transmit+0x6a>
          pData += 1U;
 80028fa:	3501      	adds	r5, #1
 80028fc:	e7e5      	b.n	80028ca <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028fe:	9600      	str	r6, [sp, #0]
 8002900:	463b      	mov	r3, r7
 8002902:	2200      	movs	r2, #0
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	4620      	mov	r0, r4
 8002908:	f7ff ff4a 	bl	80027a0 <UART_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	b9a8      	cbnz	r0, 800293c <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8002910:	2220      	movs	r2, #32
 8002912:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002916:	2200      	movs	r2, #0
 8002918:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 800291c:	e000      	b.n	8002920 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 800291e:	2302      	movs	r3, #2
}
 8002920:	4618      	mov	r0, r3
 8002922:	b002      	add	sp, #8
 8002924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e7f9      	b.n	8002920 <HAL_UART_Transmit+0xc0>
 800292c:	2301      	movs	r3, #1
 800292e:	e7f7      	b.n	8002920 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8002930:	2302      	movs	r3, #2
 8002932:	e7f5      	b.n	8002920 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e7f3      	b.n	8002920 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e7f1      	b.n	8002920 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e7ef      	b.n	8002920 <HAL_UART_Transmit+0xc0>

08002940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002942:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	2400      	movs	r4, #0
 8002946:	9403      	str	r4, [sp, #12]
 8002948:	9404      	str	r4, [sp, #16]
 800294a:	9405      	str	r4, [sp, #20]
 800294c:	9406      	str	r4, [sp, #24]
 800294e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002950:	9400      	str	r4, [sp, #0]
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <MX_GPIO_Init+0x94>)
 8002954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002956:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
 800295c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800295e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	9401      	str	r4, [sp, #4]
 8002968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
 8002970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002972:	f002 0201 	and.w	r2, r2, #1
 8002976:	9201      	str	r2, [sp, #4]
 8002978:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	9402      	str	r4, [sp, #8]
 800297c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800297e:	f042 0202 	orr.w	r2, r2, #2
 8002982:	631a      	str	r2, [r3, #48]	; 0x30
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	9302      	str	r3, [sp, #8]
 800298c:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800298e:	4f12      	ldr	r7, [pc, #72]	; (80029d8 <MX_GPIO_Init+0x98>)
 8002990:	4622      	mov	r2, r4
 8002992:	2120      	movs	r1, #32
 8002994:	4638      	mov	r0, r7
 8002996:	f7ff f866 	bl	8001a66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 800299a:	4d10      	ldr	r5, [pc, #64]	; (80029dc <MX_GPIO_Init+0x9c>)
 800299c:	4622      	mov	r2, r4
 800299e:	f240 1121 	movw	r1, #289	; 0x121
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7ff f85f 	bl	8001a66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029a8:	2320      	movs	r3, #32
 80029aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ac:	2601      	movs	r6, #1
 80029ae:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	a903      	add	r1, sp, #12
 80029b6:	4638      	mov	r0, r7
 80029b8:	f7fe ff70 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_8;
 80029bc:	f240 1321 	movw	r3, #289	; 0x121
 80029c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	a903      	add	r1, sp, #12
 80029ca:	4628      	mov	r0, r5
 80029cc:	f7fe ff66 	bl	800189c <HAL_GPIO_Init>

}
 80029d0:	b009      	add	sp, #36	; 0x24
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40020000 	.word	0x40020000
 80029dc:	40020400 	.word	0x40020400

080029e0 <MX_NVIC_Init>:
{
 80029e0:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	4611      	mov	r1, r2
 80029e6:	2014      	movs	r0, #20
 80029e8:	f7fe ff00 	bl	80017ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80029ec:	2014      	movs	r0, #20
 80029ee:	f7fe ff31 	bl	8001854 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	4611      	mov	r1, r2
 80029f6:	2015      	movs	r0, #21
 80029f8:	f7fe fef8 	bl	80017ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80029fc:	2015      	movs	r0, #21
 80029fe:	f7fe ff29 	bl	8001854 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	4611      	mov	r1, r2
 8002a06:	2016      	movs	r0, #22
 8002a08:	f7fe fef0 	bl	80017ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002a0c:	2016      	movs	r0, #22
 8002a0e:	f7fe ff21 	bl	8001854 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	4611      	mov	r1, r2
 8002a16:	2036      	movs	r0, #54	; 0x36
 8002a18:	f7fe fee8 	bl	80017ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a1c:	2036      	movs	r0, #54	; 0x36
 8002a1e:	f7fe ff19 	bl	8001854 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	4611      	mov	r1, r2
 8002a26:	2037      	movs	r0, #55	; 0x37
 8002a28:	f7fe fee0 	bl	80017ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a2c:	2037      	movs	r0, #55	; 0x37
 8002a2e:	f7fe ff11 	bl	8001854 <HAL_NVIC_EnableIRQ>
}
 8002a32:	bd08      	pop	{r3, pc}

08002a34 <CAN_Send>:

/* USER CODE BEGIN 4 */

//---------------CAN--------------
int CAN_Send(int id, uint8_t dataTx[], int size){
 8002a34:	b510      	push	{r4, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	460c      	mov	r4, r1
	 * than one msgs the hardware has to take its time to reload the msg. */
	uint32_t mailbox;
	uint8_t flag = 0;

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = id;
 8002a3a:	9001      	str	r0, [sp, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9303      	str	r3, [sp, #12]
	TxHeader.RTR = CAN_RTR_DATA;
 8002a40:	9304      	str	r3, [sp, #16]
	TxHeader.DLC = size;
 8002a42:	9205      	str	r2, [sp, #20]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002a44:	f88d 3018 	strb.w	r3, [sp, #24]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0 && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0+CAN_TX_MAILBOX1+CAN_TX_MAILBOX2) == 0){
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <CAN_Send+0x48>)
 8002a4a:	f7fe fc9a 	bl	8001382 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002a4e:	b930      	cbnz	r0, 8002a5e <CAN_Send+0x2a>
	uint8_t flag = 0;
 8002a50:	2400      	movs	r4, #0
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, dataTx, &mailbox);
		flag = 1;
	}

	HAL_Delay(1);
 8002a52:	2001      	movs	r0, #1
 8002a54:	f7fe faa2 	bl	8000f9c <HAL_Delay>

	return flag;
}
 8002a58:	4620      	mov	r0, r4
 8002a5a:	b008      	add	sp, #32
 8002a5c:	bd10      	pop	{r4, pc}
	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0 && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0+CAN_TX_MAILBOX1+CAN_TX_MAILBOX2) == 0){
 8002a5e:	2107      	movs	r1, #7
 8002a60:	4806      	ldr	r0, [pc, #24]	; (8002a7c <CAN_Send+0x48>)
 8002a62:	f7fe fca9 	bl	80013b8 <HAL_CAN_IsTxMessagePending>
 8002a66:	b108      	cbz	r0, 8002a6c <CAN_Send+0x38>
	uint8_t flag = 0;
 8002a68:	2400      	movs	r4, #0
 8002a6a:	e7f2      	b.n	8002a52 <CAN_Send+0x1e>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, dataTx, &mailbox);
 8002a6c:	ab07      	add	r3, sp, #28
 8002a6e:	4622      	mov	r2, r4
 8002a70:	a901      	add	r1, sp, #4
 8002a72:	4802      	ldr	r0, [pc, #8]	; (8002a7c <CAN_Send+0x48>)
 8002a74:	f7fe fc10 	bl	8001298 <HAL_CAN_AddTxMessage>
		flag = 1;
 8002a78:	2401      	movs	r4, #1
 8002a7a:	e7ea      	b.n	8002a52 <CAN_Send+0x1e>
 8002a7c:	200006d4 	.word	0x200006d4

08002a80 <CAN_Receive>:

int CAN_Receive(uint8_t *DataRx, int size){
 8002a80:	b510      	push	{r4, lr}
 8002a82:	4604      	mov	r4, r0
	/* This function is used to receive the msgs sent by other devices */
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 8002a84:	2100      	movs	r1, #0
 8002a86:	4807      	ldr	r0, [pc, #28]	; (8002aa4 <CAN_Receive+0x24>)
 8002a88:	f7fe fd42 	bl	8001510 <HAL_CAN_GetRxFifoFillLevel>
 8002a8c:	b910      	cbnz	r0, 8002a94 <CAN_Receive+0x14>
	}

	int id = RxHeader.StdId;

	return id;
}
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <CAN_Receive+0x28>)
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	bd10      	pop	{r4, pc}
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, DataRx);
 8002a94:	4623      	mov	r3, r4
 8002a96:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <CAN_Receive+0x28>)
 8002a98:	2100      	movs	r1, #0
 8002a9a:	4802      	ldr	r0, [pc, #8]	; (8002aa4 <CAN_Receive+0x24>)
 8002a9c:	f7fe fc9e 	bl	80013dc <HAL_CAN_GetRxMessage>
 8002aa0:	e7f5      	b.n	8002a8e <CAN_Receive+0xe>
 8002aa2:	bf00      	nop
 8002aa4:	200006d4 	.word	0x200006d4
 8002aa8:	200006fc 	.word	0x200006fc

08002aac <HAL_TIM_PeriodElapsedCallback>:
	if (data.dataCounterUp == data.dataCounterDown){
		shutdownErrors(&data, 0x23);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002aac:	b508      	push	{r3, lr}

	/*if (htim->Instance == TIM6){
		data.writeInCan = true;
	}*/

	if (htim->Instance == TIM7){
 8002aae:	6802      	ldr	r2, [r0, #0]
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d000      	beq.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0xc>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET){
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
		}
	}
}
 8002ab6:	bd08      	pop	{r3, pc}
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET){
 8002ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002abc:	4806      	ldr	r0, [pc, #24]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002abe:	f7fe ffcb 	bl	8001a58 <HAL_GPIO_ReadPin>
 8002ac2:	2801      	cmp	r0, #1
 8002ac4:	d1f7      	bne.n	8002ab6 <HAL_TIM_PeriodElapsedCallback+0xa>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002ace:	f7fe ffca 	bl	8001a66 <HAL_GPIO_WritePin>
}
 8002ad2:	e7f0      	b.n	8002ab6 <HAL_TIM_PeriodElapsedCallback+0xa>
 8002ad4:	40001400 	.word	0x40001400
 8002ad8:	40020400 	.word	0x40020400

08002adc <run_state>:
	{ NULL,	to_idle,	NULL,				to_run	},
	{ NULL,	to_idle,	from_run_to_setup,	NULL	},
};

//call the current state and returns the next one
state_t run_state(state_t cur_state, state_global_data_t *data){
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	4605      	mov	r5, r0
 8002ae0:	460f      	mov	r7, r1
	/* This function is the state manager.
	 * According to the cur_state passed by the function before is chosen the
	 * new_state and so on. */
	state_t new_state = state_table[cur_state](data);
 8002ae2:	4c08      	ldr	r4, [pc, #32]	; (8002b04 <run_state+0x28>)
 8002ae4:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4798      	blx	r3
 8002aec:	4606      	mov	r6, r0
	transition_func_t *transition = transition_table[cur_state][new_state];
 8002aee:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002af2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8002af6:	6923      	ldr	r3, [r4, #16]
	if (transition){
 8002af8:	b10b      	cbz	r3, 8002afe <run_state+0x22>
		transition(data);
 8002afa:	4638      	mov	r0, r7
 8002afc:	4798      	blx	r3
	}
	return new_state;
}
 8002afe:	4630      	mov	r0, r6
 8002b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b02:	bf00      	nop
 8002b04:	08004cd4 	.word	0x08004cd4

08002b08 <initData>:

//--------operative function--------
void initData(state_global_data_t *data){
	/* This functions is used to initialize all the variables.
	 * It's called just during the state INIT. */
	data->tractiveSystem = false;		// Tractive system off
 8002b08:	2300      	movs	r3, #0
 8002b0a:	7003      	strb	r3, [r0, #0]
	data->go = false;					// setup
 8002b0c:	7043      	strb	r3, [r0, #1]
	data->breakingPedal = false;		// breaking pedal up
 8002b0e:	7083      	strb	r3, [r0, #2]
	data->inverterSx = false;			// inverter Sx disable
 8002b10:	70c3      	strb	r3, [r0, #3]
	data->inverterDx = false;			// inverter Dx disable
 8002b12:	7103      	strb	r3, [r0, #4]
	data->requestOfShutdown = false;	// shutdown not request
 8002b14:	7143      	strb	r3, [r0, #5]
	data->writeInCan = false;			// wait next timeout for writing
 8002b16:	7183      	strb	r3, [r0, #6]

	data->steeringPresence = false;
 8002b18:	71c3      	strb	r3, [r0, #7]
	data->pedalsPresence = false;
 8002b1a:	7203      	strb	r3, [r0, #8]
	data->frontalPresence = false;
 8002b1c:	7243      	strb	r3, [r0, #9]
	data->centralPresence = false;
 8002b1e:	7283      	strb	r3, [r0, #10]
	data->bmsLvPresence = false;
 8002b20:	72c3      	strb	r3, [r0, #11]
	data->bmsHvPresence = false;
 8002b22:	7303      	strb	r3, [r0, #12]
	data->invDxPresence = false;
 8002b24:	7343      	strb	r3, [r0, #13]
	data->invSxPresence = false;
 8002b26:	7383      	strb	r3, [r0, #14]

	data->errors = 255;					// no devices connected
 8002b28:	22ff      	movs	r2, #255	; 0xff
 8002b2a:	73c2      	strb	r2, [r0, #15]
	data->warningsB1 = 255;				// no sensors connected
 8002b2c:	7402      	strb	r2, [r0, #16]

	for (int i = 0; i < NUM_SCS; i++){
 8002b2e:	e003      	b.n	8002b38 <initData+0x30>
		data->scs[i] = 0;
 8002b30:	18c2      	adds	r2, r0, r3
 8002b32:	2100      	movs	r1, #0
 8002b34:	7451      	strb	r1, [r2, #17]
	for (int i = 0; i < NUM_SCS; i++){
 8002b36:	3301      	adds	r3, #1
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	ddf9      	ble.n	8002b30 <initData+0x28>
	}

	data->dataCounterUp = 0x0000;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f8a0 34cc 	strh.w	r3, [r0, #1228]	; 0x4cc
	data->dataCounterDown = 0x0000;
 8002b42:	f8a0 34ce 	strh.w	r3, [r0, #1230]	; 0x4ce

	data->accelerator = 0x00;
 8002b46:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
	data->motLeftTemp = 0x0000;
 8002b4a:	f8a0 34d2 	strh.w	r3, [r0, #1234]	; 0x4d2
	data->motRightTemp = 0x0000;
 8002b4e:	f8a0 34d4 	strh.w	r3, [r0, #1236]	; 0x4d4
	data->invLeftTemp = 0x0000;
 8002b52:	f8a0 34d6 	strh.w	r3, [r0, #1238]	; 0x4d6
	data->invRightTemp = 0x0000;
 8002b56:	f8a0 34d8 	strh.w	r3, [r0, #1240]	; 0x4d8
	data->invLeftVol = 0x0000;
 8002b5a:	f8a0 34da 	strh.w	r3, [r0, #1242]	; 0x4da
	data->invRightVol = 0x0000;
 8002b5e:	f8a0 34dc 	strh.w	r3, [r0, #1244]	; 0x4dc
	data->invLeftCur = 0x0000;
 8002b62:	f8a0 34de 	strh.w	r3, [r0, #1246]	; 0x4de
	data->invRightCur = 0x0000;
 8002b66:	f8a0 34e0 	strh.w	r3, [r0, #1248]	; 0x4e0
	data->hvCur = 0x0000;;
 8002b6a:	f8a0 34e8 	strh.w	r3, [r0, #1256]	; 0x4e8
	data->hvVol = 0x00000000;
 8002b6e:	f8c0 34e4 	str.w	r3, [r0, #1252]	; 0x4e4
	data->curRequested = 0.0;
 8002b72:	f8c0 34ec 	str.w	r3, [r0, #1260]	; 0x4ec
	data->powerRequested = 0x00;
 8002b76:	f880 34f0 	strb.w	r3, [r0, #1264]	; 0x4f0

	data->steeringTimeStamp = 0x0000;
 8002b7a:	f8c0 34f4 	str.w	r3, [r0, #1268]	; 0x4f4
	data->pedalsTimeStamp = 0x0000;
 8002b7e:	f8c0 34f8 	str.w	r3, [r0, #1272]	; 0x4f8
	data->frontalTimeStamp = 0x0000;
 8002b82:	f8c0 34fc 	str.w	r3, [r0, #1276]	; 0x4fc
	data->centralTimeStamp = 0x0000;
 8002b86:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
	data->bmsLvTimeStamp = 0x0000;
 8002b8a:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	data->bmsHvTimeStamp = 0x0000;
 8002b8e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
	data->invDxTimeStamp = 0x0000;
 8002b92:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	data->invSxTimeStamp = 0x0000;
 8002b96:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
}
 8002b9a:	4770      	bx	lr

08002b9c <do_state_init>:
state_t do_state_init(state_global_data_t *data){
 8002b9c:	b508      	push	{r3, lr}
	initData(data);
 8002b9e:	f7ff ffb3 	bl	8002b08 <initData>
}
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	bd08      	pop	{r3, pc}

08002ba6 <canSendMSGInit>:

void canSendMSGInit(uint8_t *CanSendMSG){
	/* This function is used to initialize the msg everytime you need to send
	 * something via can. */
	for(int i = 0; i < MSG_LENGHT; i++){
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	e002      	b.n	8002bb0 <canSendMSGInit+0xa>
		CanSendMSG[i] = 0;
 8002baa:	2200      	movs	r2, #0
 8002bac:	54c2      	strb	r2, [r0, r3]
	for(int i = 0; i < MSG_LENGHT; i++){
 8002bae:	3301      	adds	r3, #1
 8002bb0:	2b07      	cmp	r3, #7
 8002bb2:	ddfa      	ble.n	8002baa <canSendMSGInit+0x4>
	}
}
 8002bb4:	4770      	bx	lr
	...

08002bb8 <to_idle>:
void to_idle (state_global_data_t *data){
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4605      	mov	r5, r0
	canSendMSGInit(canSendMSG);
 8002bbc:	4e63      	ldr	r6, [pc, #396]	; (8002d4c <to_idle+0x194>)
 8002bbe:	4630      	mov	r0, r6
 8002bc0:	f7ff fff1 	bl	8002ba6 <canSendMSGInit>
	data->requestOfShutdown = false;
 8002bc4:	2400      	movs	r4, #0
 8002bc6:	716c      	strb	r4, [r5, #5]
	canSendMSG[0] = 0x04;
 8002bc8:	2304      	movs	r3, #4
 8002bca:	7033      	strb	r3, [r6, #0]
	for (int i = 0; i < 3; i++){
 8002bcc:	e005      	b.n	8002bda <to_idle+0x22>
		CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8002bce:	2208      	movs	r2, #8
 8002bd0:	495e      	ldr	r1, [pc, #376]	; (8002d4c <to_idle+0x194>)
 8002bd2:	2055      	movs	r0, #85	; 0x55
 8002bd4:	f7ff ff2e 	bl	8002a34 <CAN_Send>
	for (int i = 0; i < 3; i++){
 8002bd8:	3401      	adds	r4, #1
 8002bda:	2c02      	cmp	r4, #2
 8002bdc:	ddf7      	ble.n	8002bce <to_idle+0x16>
	canSendMSGInit(canSendMSG);
 8002bde:	4c5b      	ldr	r4, [pc, #364]	; (8002d4c <to_idle+0x194>)
 8002be0:	4620      	mov	r0, r4
 8002be2:	f7ff ffe0 	bl	8002ba6 <canSendMSGInit>
	canSendMSG[0] = 0x01;
 8002be6:	2301      	movs	r3, #1
 8002be8:	7023      	strb	r3, [r4, #0]
	canSendMSG[1] = data->errors;
 8002bea:	7beb      	ldrb	r3, [r5, #15]
 8002bec:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = data->warningsB1;
 8002bee:	7c2b      	ldrb	r3, [r5, #16]
 8002bf0:	70a3      	strb	r3, [r4, #2]
	canSendMSG[3] = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	70e3      	strb	r3, [r4, #3]
	CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	2055      	movs	r0, #85	; 0x55
 8002bfc:	f7ff ff1a 	bl	8002a34 <CAN_Send>
	canSendMSGInit(canSendMSG);
 8002c00:	4620      	mov	r0, r4
 8002c02:	f7ff ffd0 	bl	8002ba6 <canSendMSGInit>
	canSendMSG[0] = 0x51;
 8002c06:	2351      	movs	r3, #81	; 0x51
 8002c08:	7023      	strb	r3, [r4, #0]
	canSendMSG[1] = 0x04;
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	7063      	strb	r3, [r4, #1]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002c0e:	2208      	movs	r2, #8
 8002c10:	4621      	mov	r1, r4
 8002c12:	f240 2001 	movw	r0, #513	; 0x201
 8002c16:	f7ff ff0d 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002c1a:	2208      	movs	r2, #8
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	f240 2002 	movw	r0, #514	; 0x202
 8002c22:	f7ff ff07 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002c26:	253d      	movs	r5, #61	; 0x3d
 8002c28:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xD8;
 8002c2a:	23d8      	movs	r3, #216	; 0xd8
 8002c2c:	7063      	strb	r3, [r4, #1]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002c2e:	2208      	movs	r2, #8
 8002c30:	4621      	mov	r1, r4
 8002c32:	f240 2001 	movw	r0, #513	; 0x201
 8002c36:	f7ff fefd 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	4621      	mov	r1, r4
 8002c3e:	f240 2002 	movw	r0, #514	; 0x202
 8002c42:	f7ff fef7 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002c46:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x4A;
 8002c48:	234a      	movs	r3, #74	; 0x4a
 8002c4a:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x64;
 8002c4c:	2364      	movs	r3, #100	; 0x64
 8002c4e:	70a3      	strb	r3, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002c50:	2208      	movs	r2, #8
 8002c52:	4621      	mov	r1, r4
 8002c54:	f240 2001 	movw	r0, #513	; 0x201
 8002c58:	f7ff feec 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	4621      	mov	r1, r4
 8002c60:	f240 2002 	movw	r0, #514	; 0x202
 8002c64:	f7ff fee6 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002c68:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xA8;
 8002c6a:	23a8      	movs	r3, #168	; 0xa8
 8002c6c:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002c6e:	26ff      	movs	r6, #255	; 0xff
 8002c70:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002c72:	2208      	movs	r2, #8
 8002c74:	4621      	mov	r1, r4
 8002c76:	f240 2001 	movw	r0, #513	; 0x201
 8002c7a:	f7ff fedb 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002c7e:	2208      	movs	r2, #8
 8002c80:	4621      	mov	r1, r4
 8002c82:	f240 2002 	movw	r0, #514	; 0x202
 8002c86:	f7ff fed5 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002c8a:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x5F;
 8002c8c:	235f      	movs	r3, #95	; 0x5f
 8002c8e:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002c90:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002c92:	2208      	movs	r2, #8
 8002c94:	4621      	mov	r1, r4
 8002c96:	f240 2001 	movw	r0, #513	; 0x201
 8002c9a:	f7ff fecb 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f240 2002 	movw	r0, #514	; 0x202
 8002ca6:	f7ff fec5 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002caa:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x26;
 8002cac:	2326      	movs	r3, #38	; 0x26
 8002cae:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002cb0:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	f240 2001 	movw	r0, #513	; 0x201
 8002cba:	f7ff febb 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f240 2002 	movw	r0, #514	; 0x202
 8002cc6:	f7ff feb5 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002cca:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x49;
 8002ccc:	2349      	movs	r3, #73	; 0x49
 8002cce:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002cd0:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	f240 2001 	movw	r0, #513	; 0x201
 8002cda:	f7ff feab 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002cde:	2208      	movs	r2, #8
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	f240 2002 	movw	r0, #514	; 0x202
 8002ce6:	f7ff fea5 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002cea:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xEB;
 8002cec:	23eb      	movs	r3, #235	; 0xeb
 8002cee:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002cf0:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002cf2:	2208      	movs	r2, #8
 8002cf4:	4621      	mov	r1, r4
 8002cf6:	f240 2001 	movw	r0, #513	; 0x201
 8002cfa:	f7ff fe9b 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002cfe:	2208      	movs	r2, #8
 8002d00:	4621      	mov	r1, r4
 8002d02:	f240 2002 	movw	r0, #514	; 0x202
 8002d06:	f7ff fe95 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002d0a:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x4D;
 8002d0c:	234d      	movs	r3, #77	; 0x4d
 8002d0e:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002d10:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002d12:	2208      	movs	r2, #8
 8002d14:	4621      	mov	r1, r4
 8002d16:	f240 2001 	movw	r0, #513	; 0x201
 8002d1a:	f7ff fe8b 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002d1e:	2208      	movs	r2, #8
 8002d20:	4621      	mov	r1, r4
 8002d22:	f240 2002 	movw	r0, #514	; 0x202
 8002d26:	f7ff fe85 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002d2a:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x4E;
 8002d2c:	234e      	movs	r3, #78	; 0x4e
 8002d2e:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002d30:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002d32:	2208      	movs	r2, #8
 8002d34:	4621      	mov	r1, r4
 8002d36:	f240 2001 	movw	r0, #513	; 0x201
 8002d3a:	f7ff fe7b 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002d3e:	2208      	movs	r2, #8
 8002d40:	4621      	mov	r1, r4
 8002d42:	f240 2002 	movw	r0, #514	; 0x202
 8002d46:	f7ff fe75 	bl	8002a34 <CAN_Send>
}
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	20000758 	.word	0x20000758

08002d50 <from_idle_to_setup>:
void from_idle_to_setup (state_global_data_t *data){
 8002d50:	b570      	push	{r4, r5, r6, lr}
	canSendMSGInit(canSendMSG);
 8002d52:	4c3e      	ldr	r4, [pc, #248]	; (8002e4c <from_idle_to_setup+0xfc>)
 8002d54:	4620      	mov	r0, r4
 8002d56:	f7ff ff26 	bl	8002ba6 <canSendMSGInit>
	canSendMSG[0] = 0x03;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	7023      	strb	r3, [r4, #0]
	CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8002d5e:	2208      	movs	r2, #8
 8002d60:	4621      	mov	r1, r4
 8002d62:	2055      	movs	r0, #85	; 0x55
 8002d64:	f7ff fe66 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x51;
 8002d68:	2351      	movs	r3, #81	; 0x51
 8002d6a:	7023      	strb	r3, [r4, #0]
	canSendMSG[1] = 0x04;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	7063      	strb	r3, [r4, #1]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002d70:	2208      	movs	r2, #8
 8002d72:	4621      	mov	r1, r4
 8002d74:	f240 2001 	movw	r0, #513	; 0x201
 8002d78:	f7ff fe5c 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002d7c:	2208      	movs	r2, #8
 8002d7e:	4621      	mov	r1, r4
 8002d80:	f240 2002 	movw	r0, #514	; 0x202
 8002d84:	f7ff fe56 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002d88:	253d      	movs	r5, #61	; 0x3d
 8002d8a:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xD8;
 8002d8c:	23d8      	movs	r3, #216	; 0xd8
 8002d8e:	7063      	strb	r3, [r4, #1]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002d90:	2208      	movs	r2, #8
 8002d92:	4621      	mov	r1, r4
 8002d94:	f240 2001 	movw	r0, #513	; 0x201
 8002d98:	f7ff fe4c 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	4621      	mov	r1, r4
 8002da0:	f240 2002 	movw	r0, #514	; 0x202
 8002da4:	f7ff fe46 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002da8:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x49;
 8002daa:	2349      	movs	r3, #73	; 0x49
 8002dac:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x64;
 8002dae:	2664      	movs	r6, #100	; 0x64
 8002db0:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002db2:	2208      	movs	r2, #8
 8002db4:	4621      	mov	r1, r4
 8002db6:	f240 2001 	movw	r0, #513	; 0x201
 8002dba:	f7ff fe3b 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	f240 2002 	movw	r0, #514	; 0x202
 8002dc6:	f7ff fe35 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002dca:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xEB;
 8002dcc:	23eb      	movs	r3, #235	; 0xeb
 8002dce:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x64;
 8002dd0:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	f240 2001 	movw	r0, #513	; 0x201
 8002dda:	f7ff fe2b 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002dde:	2208      	movs	r2, #8
 8002de0:	4621      	mov	r1, r4
 8002de2:	f240 2002 	movw	r0, #514	; 0x202
 8002de6:	f7ff fe25 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002dea:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x8A;
 8002dec:	238a      	movs	r3, #138	; 0x8a
 8002dee:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x64;
 8002df0:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002df2:	2208      	movs	r2, #8
 8002df4:	4621      	mov	r1, r4
 8002df6:	f240 2001 	movw	r0, #513	; 0x201
 8002dfa:	f7ff fe1b 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002dfe:	2208      	movs	r2, #8
 8002e00:	4621      	mov	r1, r4
 8002e02:	f240 2002 	movw	r0, #514	; 0x202
 8002e06:	f7ff fe15 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002e0a:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xF6;
 8002e0c:	23f6      	movs	r3, #246	; 0xf6
 8002e0e:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x64;
 8002e10:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002e12:	2208      	movs	r2, #8
 8002e14:	4621      	mov	r1, r4
 8002e16:	f240 2001 	movw	r0, #513	; 0x201
 8002e1a:	f7ff fe0b 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002e1e:	2208      	movs	r2, #8
 8002e20:	4621      	mov	r1, r4
 8002e22:	f240 2002 	movw	r0, #514	; 0x202
 8002e26:	f7ff fe05 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002e2a:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xA0;
 8002e2c:	23a0      	movs	r3, #160	; 0xa0
 8002e2e:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x64;
 8002e30:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002e32:	2208      	movs	r2, #8
 8002e34:	4621      	mov	r1, r4
 8002e36:	f240 2001 	movw	r0, #513	; 0x201
 8002e3a:	f7ff fdfb 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002e3e:	2208      	movs	r2, #8
 8002e40:	4621      	mov	r1, r4
 8002e42:	f240 2002 	movw	r0, #514	; 0x202
 8002e46:	f7ff fdf5 	bl	8002a34 <CAN_Send>
}
 8002e4a:	bd70      	pop	{r4, r5, r6, pc}
 8002e4c:	20000758 	.word	0x20000758

08002e50 <from_run_to_setup>:
void from_run_to_setup (state_global_data_t *data){
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	4605      	mov	r5, r0
	canSendMSGInit(canSendMSG);
 8002e54:	4c29      	ldr	r4, [pc, #164]	; (8002efc <from_run_to_setup+0xac>)
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff fea5 	bl	8002ba6 <canSendMSGInit>
	data->accelerator = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f885 34d0 	strb.w	r3, [r5, #1232]	; 0x4d0
	canSendMSG[0] = 0x06;
 8002e62:	2306      	movs	r3, #6
 8002e64:	7023      	strb	r3, [r4, #0]
	CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8002e66:	2208      	movs	r2, #8
 8002e68:	4621      	mov	r1, r4
 8002e6a:	2055      	movs	r0, #85	; 0x55
 8002e6c:	f7ff fde2 	bl	8002a34 <CAN_Send>
	canSendMSGInit(canSendMSG);
 8002e70:	4620      	mov	r0, r4
 8002e72:	f7ff fe98 	bl	8002ba6 <canSendMSGInit>
	canSendMSG[0] = 0x51;
 8002e76:	2351      	movs	r3, #81	; 0x51
 8002e78:	7023      	strb	r3, [r4, #0]
	canSendMSG[1] = 0x04;
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	7063      	strb	r3, [r4, #1]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002e7e:	2208      	movs	r2, #8
 8002e80:	4621      	mov	r1, r4
 8002e82:	f240 2001 	movw	r0, #513	; 0x201
 8002e86:	f7ff fdd5 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	f240 2002 	movw	r0, #514	; 0x202
 8002e92:	f7ff fdcf 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002e96:	253d      	movs	r5, #61	; 0x3d
 8002e98:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xD8;
 8002e9a:	23d8      	movs	r3, #216	; 0xd8
 8002e9c:	7063      	strb	r3, [r4, #1]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	f240 2001 	movw	r0, #513	; 0x201
 8002ea6:	f7ff fdc5 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002eaa:	2208      	movs	r2, #8
 8002eac:	4621      	mov	r1, r4
 8002eae:	f240 2002 	movw	r0, #514	; 0x202
 8002eb2:	f7ff fdbf 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002eb6:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xA8;
 8002eb8:	23a8      	movs	r3, #168	; 0xa8
 8002eba:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002ebc:	26ff      	movs	r6, #255	; 0xff
 8002ebe:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	f240 2001 	movw	r0, #513	; 0x201
 8002ec8:	f7ff fdb4 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002ecc:	2208      	movs	r2, #8
 8002ece:	4621      	mov	r1, r4
 8002ed0:	f240 2002 	movw	r0, #514	; 0x202
 8002ed4:	f7ff fdae 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002ed8:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x5F;
 8002eda:	235f      	movs	r3, #95	; 0x5f
 8002edc:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0xFF;
 8002ede:	70a6      	strb	r6, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	f240 2001 	movw	r0, #513	; 0x201
 8002ee8:	f7ff fda4 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002eec:	2208      	movs	r2, #8
 8002eee:	4621      	mov	r1, r4
 8002ef0:	f240 2002 	movw	r0, #514	; 0x202
 8002ef4:	f7ff fd9e 	bl	8002a34 <CAN_Send>
}
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	bf00      	nop
 8002efc:	20000758 	.word	0x20000758

08002f00 <to_run>:
void to_run (state_global_data_t *data){
 8002f00:	b538      	push	{r3, r4, r5, lr}
	__HAL_TIM_SetCounter(&htim7, 0);
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <to_run+0x74>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2200      	movs	r2, #0
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f10:	4819      	ldr	r0, [pc, #100]	; (8002f78 <to_run+0x78>)
 8002f12:	f7fe fda8 	bl	8001a66 <HAL_GPIO_WritePin>
	canSendMSGInit(canSendMSG);
 8002f16:	4c19      	ldr	r4, [pc, #100]	; (8002f7c <to_run+0x7c>)
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f7ff fe44 	bl	8002ba6 <canSendMSGInit>
	canSendMSG[0] = 0x05;
 8002f1e:	2305      	movs	r3, #5
 8002f20:	7023      	strb	r3, [r4, #0]
	CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8002f22:	2208      	movs	r2, #8
 8002f24:	4621      	mov	r1, r4
 8002f26:	2055      	movs	r0, #85	; 0x55
 8002f28:	f7ff fd84 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002f2c:	253d      	movs	r5, #61	; 0x3d
 8002f2e:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0xA8;
 8002f30:	23a8      	movs	r3, #168	; 0xa8
 8002f32:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x32;
 8002f34:	2332      	movs	r3, #50	; 0x32
 8002f36:	70a3      	strb	r3, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002f38:	2208      	movs	r2, #8
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	f240 2001 	movw	r0, #513	; 0x201
 8002f40:	f7ff fd78 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002f44:	2208      	movs	r2, #8
 8002f46:	4621      	mov	r1, r4
 8002f48:	f240 2002 	movw	r0, #514	; 0x202
 8002f4c:	f7ff fd72 	bl	8002a34 <CAN_Send>
	canSendMSG[0] = 0x3D;
 8002f50:	7025      	strb	r5, [r4, #0]
	canSendMSG[1] = 0x5F;
 8002f52:	235f      	movs	r3, #95	; 0x5f
 8002f54:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = 0x64;
 8002f56:	2364      	movs	r3, #100	; 0x64
 8002f58:	70a3      	strb	r3, [r4, #2]
	CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8002f5a:	2208      	movs	r2, #8
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	f240 2001 	movw	r0, #513	; 0x201
 8002f62:	f7ff fd67 	bl	8002a34 <CAN_Send>
	CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8002f66:	2208      	movs	r2, #8
 8002f68:	4621      	mov	r1, r4
 8002f6a:	f240 2002 	movw	r0, #514	; 0x202
 8002f6e:	f7ff fd61 	bl	8002a34 <CAN_Send>
}
 8002f72:	bd38      	pop	{r3, r4, r5, pc}
 8002f74:	20000718 	.word	0x20000718
 8002f78:	40020400 	.word	0x40020400
 8002f7c:	20000758 	.word	0x20000758

08002f80 <checkTimeStamp>:

void checkTimeStamp(state_global_data_t *data){
 8002f80:	b510      	push	{r4, lr}
 8002f82:	4604      	mov	r4, r0
	 *	   time of the msg, this happens when the timer has ended its period and it's
	 *	   started again from the beginning.
	 * After the check if a device is disabled it increments the variables errors and
	 * warningB1, these are reading bit for bit from the steering wheel so every bit
	 * corresponds to a device, that's why the increment is done in exponentiation of 2. */
	data->errors = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73c3      	strb	r3, [r0, #15]
	data->warningsB1 = 0;
 8002f88:	7403      	strb	r3, [r0, #16]

	//data->actualTime = __HAL_TIM_GetCounter(&htim10);
	data->actualTime = HAL_GetTick();
 8002f8a:	f7fe f801 	bl	8000f90 <HAL_GetTick>
 8002f8e:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514

	/* Steering Wheel Timer */
	if (data->steeringPresence == true){
 8002f92:	79e3      	ldrb	r3, [r4, #7]
 8002f94:	b153      	cbz	r3, 8002fac <checkTimeStamp+0x2c>
		if (data->actualTime > data->steeringTimeStamp){
 8002f96:	f8d4 34f4 	ldr.w	r3, [r4, #1268]	; 0x4f4
 8002f9a:	4298      	cmp	r0, r3
 8002f9c:	d91a      	bls.n	8002fd4 <checkTimeStamp+0x54>
			if(data->actualTime - data->steeringTimeStamp > LONG_DELTA){
 8002f9e:	1ac3      	subs	r3, r0, r3
 8002fa0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <checkTimeStamp+0x2c>
				data->steeringPresence = false;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	71e3      	strb	r3, [r4, #7]
			data->steeringPresence = false;
		}
	}

	/* Pedals Timer */
	if (data->pedalsPresence == true){
 8002fac:	7a23      	ldrb	r3, [r4, #8]
 8002fae:	b36b      	cbz	r3, 800300c <checkTimeStamp+0x8c>
		if (data->actualTime > data->pedalsTimeStamp){
 8002fb0:	f8d4 34f8 	ldr.w	r3, [r4, #1272]	; 0x4f8
 8002fb4:	4298      	cmp	r0, r3
 8002fb6:	d918      	bls.n	8002fea <checkTimeStamp+0x6a>
			if(data->actualTime - data->pedalsTimeStamp > SHORT_DELTA){
 8002fb8:	1ac3      	subs	r3, r0, r3
 8002fba:	f240 3252 	movw	r2, #850	; 0x352
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d92a      	bls.n	8003018 <checkTimeStamp+0x98>
				data->pedalsPresence = false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	7223      	strb	r3, [r4, #8]
				data->errors += 8;
 8002fc6:	7be3      	ldrb	r3, [r4, #15]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	73e3      	strb	r3, [r4, #15]
				data->warningsB1 += 192;
 8002fcc:	7c23      	ldrb	r3, [r4, #16]
 8002fce:	3b40      	subs	r3, #64	; 0x40
 8002fd0:	7423      	strb	r3, [r4, #16]
 8002fd2:	e021      	b.n	8003018 <checkTimeStamp+0x98>
		}else if(TIMER_PERIOD - (data->steeringTimeStamp - data->actualTime) > LONG_DELTA){
 8002fd4:	1ac3      	subs	r3, r0, r3
 8002fd6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002fda:	3308      	adds	r3, #8
 8002fdc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d9e3      	bls.n	8002fac <checkTimeStamp+0x2c>
			data->steeringPresence = false;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	71e3      	strb	r3, [r4, #7]
 8002fe8:	e7e0      	b.n	8002fac <checkTimeStamp+0x2c>
			}
		}else if(TIMER_PERIOD - (data->pedalsTimeStamp - data->actualTime) > SHORT_DELTA){
 8002fea:	1ac3      	subs	r3, r0, r3
 8002fec:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	f240 3252 	movw	r2, #850	; 0x352
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d90e      	bls.n	8003018 <checkTimeStamp+0x98>
			data->pedalsPresence = false;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	7223      	strb	r3, [r4, #8]
			data->errors += 8;
 8002ffe:	7be3      	ldrb	r3, [r4, #15]
 8003000:	3308      	adds	r3, #8
 8003002:	73e3      	strb	r3, [r4, #15]
			data->warningsB1 += 192;
 8003004:	7c23      	ldrb	r3, [r4, #16]
 8003006:	3b40      	subs	r3, #64	; 0x40
 8003008:	7423      	strb	r3, [r4, #16]
 800300a:	e005      	b.n	8003018 <checkTimeStamp+0x98>
		}
	}else{
		data->errors += 8;
 800300c:	7be3      	ldrb	r3, [r4, #15]
 800300e:	3308      	adds	r3, #8
 8003010:	73e3      	strb	r3, [r4, #15]
		data->warningsB1 += 192;
 8003012:	7c23      	ldrb	r3, [r4, #16]
 8003014:	3b40      	subs	r3, #64	; 0x40
 8003016:	7423      	strb	r3, [r4, #16]
	}


	/* Frontal Timer */
	if (data->frontalPresence == true){
 8003018:	7a63      	ldrb	r3, [r4, #9]
 800301a:	b313      	cbz	r3, 8003062 <checkTimeStamp+0xe2>
		if (data->actualTime > data->frontalTimeStamp){
 800301c:	f8d4 34fc 	ldr.w	r3, [r4, #1276]	; 0x4fc
 8003020:	4298      	cmp	r0, r3
 8003022:	d90d      	bls.n	8003040 <checkTimeStamp+0xc0>
			if(data->actualTime - data->frontalTimeStamp > SHORT_DELTA){
 8003024:	1ac3      	subs	r3, r0, r3
 8003026:	f240 3252 	movw	r2, #850	; 0x352
 800302a:	4293      	cmp	r3, r2
 800302c:	d91f      	bls.n	800306e <checkTimeStamp+0xee>
				data->frontalPresence = false;
 800302e:	2300      	movs	r3, #0
 8003030:	7263      	strb	r3, [r4, #9]
				data->errors += 32;
 8003032:	7be3      	ldrb	r3, [r4, #15]
 8003034:	3320      	adds	r3, #32
 8003036:	73e3      	strb	r3, [r4, #15]
				data->warningsB1 += 60;
 8003038:	7c23      	ldrb	r3, [r4, #16]
 800303a:	333c      	adds	r3, #60	; 0x3c
 800303c:	7423      	strb	r3, [r4, #16]
 800303e:	e016      	b.n	800306e <checkTimeStamp+0xee>
			}
		}else if(TIMER_PERIOD - (data->frontalTimeStamp - data->actualTime) > SHORT_DELTA){
 8003040:	1ac3      	subs	r3, r0, r3
 8003042:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003046:	3308      	adds	r3, #8
 8003048:	f240 3252 	movw	r2, #850	; 0x352
 800304c:	4293      	cmp	r3, r2
 800304e:	d90e      	bls.n	800306e <checkTimeStamp+0xee>
			data->frontalPresence = false;
 8003050:	2300      	movs	r3, #0
 8003052:	7263      	strb	r3, [r4, #9]
			data->errors += 32;
 8003054:	7be3      	ldrb	r3, [r4, #15]
 8003056:	3320      	adds	r3, #32
 8003058:	73e3      	strb	r3, [r4, #15]
			data->warningsB1 += 60;
 800305a:	7c23      	ldrb	r3, [r4, #16]
 800305c:	333c      	adds	r3, #60	; 0x3c
 800305e:	7423      	strb	r3, [r4, #16]
 8003060:	e005      	b.n	800306e <checkTimeStamp+0xee>
		}
	}else{
		data->errors += 32;
 8003062:	7be3      	ldrb	r3, [r4, #15]
 8003064:	3320      	adds	r3, #32
 8003066:	73e3      	strb	r3, [r4, #15]
		data->warningsB1 += 60;
 8003068:	7c23      	ldrb	r3, [r4, #16]
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	7423      	strb	r3, [r4, #16]
	}

	/* Central Timer */
	if (data->centralPresence == true){
 800306e:	7aa3      	ldrb	r3, [r4, #10]
 8003070:	b313      	cbz	r3, 80030b8 <checkTimeStamp+0x138>
		if (data->actualTime > data->centralTimeStamp){
 8003072:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8003076:	4298      	cmp	r0, r3
 8003078:	d90d      	bls.n	8003096 <checkTimeStamp+0x116>
			if(data->actualTime - data->centralTimeStamp > SHORT_DELTA){
 800307a:	1ac3      	subs	r3, r0, r3
 800307c:	f240 3252 	movw	r2, #850	; 0x352
 8003080:	4293      	cmp	r3, r2
 8003082:	d91f      	bls.n	80030c4 <checkTimeStamp+0x144>
				data->centralPresence = false;
 8003084:	2300      	movs	r3, #0
 8003086:	72a3      	strb	r3, [r4, #10]
				data->errors += 16;
 8003088:	7be3      	ldrb	r3, [r4, #15]
 800308a:	3310      	adds	r3, #16
 800308c:	73e3      	strb	r3, [r4, #15]
				data->warningsB1 += 3;
 800308e:	7c23      	ldrb	r3, [r4, #16]
 8003090:	3303      	adds	r3, #3
 8003092:	7423      	strb	r3, [r4, #16]
 8003094:	e016      	b.n	80030c4 <checkTimeStamp+0x144>
			}
		}else if(TIMER_PERIOD - (data->centralTimeStamp - data->actualTime) > SHORT_DELTA){
 8003096:	1ac3      	subs	r3, r0, r3
 8003098:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800309c:	3308      	adds	r3, #8
 800309e:	f240 3252 	movw	r2, #850	; 0x352
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d90e      	bls.n	80030c4 <checkTimeStamp+0x144>
			data->centralPresence = false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	72a3      	strb	r3, [r4, #10]
			data->errors += 16;
 80030aa:	7be3      	ldrb	r3, [r4, #15]
 80030ac:	3310      	adds	r3, #16
 80030ae:	73e3      	strb	r3, [r4, #15]
			data->warningsB1 += 3;
 80030b0:	7c23      	ldrb	r3, [r4, #16]
 80030b2:	3303      	adds	r3, #3
 80030b4:	7423      	strb	r3, [r4, #16]
 80030b6:	e005      	b.n	80030c4 <checkTimeStamp+0x144>
		}
	}else{
		data->errors += 16;
 80030b8:	7be3      	ldrb	r3, [r4, #15]
 80030ba:	3310      	adds	r3, #16
 80030bc:	73e3      	strb	r3, [r4, #15]
		data->warningsB1 += 3;
 80030be:	7c23      	ldrb	r3, [r4, #16]
 80030c0:	3303      	adds	r3, #3
 80030c2:	7423      	strb	r3, [r4, #16]
	}

	/* BmsLv Timer */
	if (data->bmsLvPresence == true){
 80030c4:	7ae3      	ldrb	r3, [r4, #11]
 80030c6:	b1e3      	cbz	r3, 8003102 <checkTimeStamp+0x182>
		if (data->actualTime > data->bmsLvTimeStamp){
 80030c8:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
 80030cc:	4298      	cmp	r0, r3
 80030ce:	d90a      	bls.n	80030e6 <checkTimeStamp+0x166>
			if(data->actualTime - data->bmsLvTimeStamp > LONG_DELTA){
 80030d0:	1ac3      	subs	r3, r0, r3
 80030d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d916      	bls.n	8003108 <checkTimeStamp+0x188>
				data->bmsLvPresence = false;
 80030da:	2300      	movs	r3, #0
 80030dc:	72e3      	strb	r3, [r4, #11]
				data->errors += 2;
 80030de:	7be3      	ldrb	r3, [r4, #15]
 80030e0:	3302      	adds	r3, #2
 80030e2:	73e3      	strb	r3, [r4, #15]
 80030e4:	e010      	b.n	8003108 <checkTimeStamp+0x188>
			}
		}else if(TIMER_PERIOD - (data->bmsLvTimeStamp - data->actualTime) > LONG_DELTA){
 80030e6:	1ac3      	subs	r3, r0, r3
 80030e8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80030ec:	3308      	adds	r3, #8
 80030ee:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d908      	bls.n	8003108 <checkTimeStamp+0x188>
			data->bmsLvPresence = false;
 80030f6:	2300      	movs	r3, #0
 80030f8:	72e3      	strb	r3, [r4, #11]
			data->errors += 2;
 80030fa:	7be3      	ldrb	r3, [r4, #15]
 80030fc:	3302      	adds	r3, #2
 80030fe:	73e3      	strb	r3, [r4, #15]
 8003100:	e002      	b.n	8003108 <checkTimeStamp+0x188>
		}
	}else{
		data->errors += 2;
 8003102:	7be3      	ldrb	r3, [r4, #15]
 8003104:	3302      	adds	r3, #2
 8003106:	73e3      	strb	r3, [r4, #15]
	}

	/* BmsHv Timer */
	if (data->bmsHvPresence == true){
 8003108:	7b23      	ldrb	r3, [r4, #12]
 800310a:	b1e3      	cbz	r3, 8003146 <checkTimeStamp+0x1c6>
		if (data->actualTime > data->bmsHvTimeStamp){
 800310c:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
 8003110:	4298      	cmp	r0, r3
 8003112:	d90a      	bls.n	800312a <checkTimeStamp+0x1aa>
			if(data->actualTime - data->bmsHvTimeStamp > LONG_DELTA){
 8003114:	1ac3      	subs	r3, r0, r3
 8003116:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800311a:	4293      	cmp	r3, r2
 800311c:	d916      	bls.n	800314c <checkTimeStamp+0x1cc>
				data->bmsHvPresence = false;
 800311e:	2300      	movs	r3, #0
 8003120:	7323      	strb	r3, [r4, #12]
				data->errors += 1;
 8003122:	7be3      	ldrb	r3, [r4, #15]
 8003124:	3301      	adds	r3, #1
 8003126:	73e3      	strb	r3, [r4, #15]
 8003128:	e010      	b.n	800314c <checkTimeStamp+0x1cc>
			}
		}else if(TIMER_PERIOD - (data->bmsHvTimeStamp - data->actualTime) > LONG_DELTA){
 800312a:	1ac3      	subs	r3, r0, r3
 800312c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003130:	3308      	adds	r3, #8
 8003132:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003136:	4293      	cmp	r3, r2
 8003138:	d908      	bls.n	800314c <checkTimeStamp+0x1cc>
			data->bmsHvPresence = false;
 800313a:	2300      	movs	r3, #0
 800313c:	7323      	strb	r3, [r4, #12]
			data->errors += 1;
 800313e:	7be3      	ldrb	r3, [r4, #15]
 8003140:	3301      	adds	r3, #1
 8003142:	73e3      	strb	r3, [r4, #15]
 8003144:	e002      	b.n	800314c <checkTimeStamp+0x1cc>
		}
	}else{
		data->errors += 1;
 8003146:	7be3      	ldrb	r3, [r4, #15]
 8003148:	3301      	adds	r3, #1
 800314a:	73e3      	strb	r3, [r4, #15]
	}

	/* TODO: Reintroduce Inverter Dx*/
	/* Inverter Dx Timer */
	if (data->invDxPresence == true){
 800314c:	7b63      	ldrb	r3, [r4, #13]
 800314e:	b1e3      	cbz	r3, 800318a <checkTimeStamp+0x20a>
		if (data->actualTime > data->invDxTimeStamp){
 8003150:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
 8003154:	4298      	cmp	r0, r3
 8003156:	d90a      	bls.n	800316e <checkTimeStamp+0x1ee>
			if(data->actualTime - data->invDxTimeStamp > SHORT_DELTA){
 8003158:	1ac3      	subs	r3, r0, r3
 800315a:	f240 3252 	movw	r2, #850	; 0x352
 800315e:	4293      	cmp	r3, r2
 8003160:	d916      	bls.n	8003190 <checkTimeStamp+0x210>
				data->invDxPresence = false;
 8003162:	2300      	movs	r3, #0
 8003164:	7363      	strb	r3, [r4, #13]
				data->errors += 128;
 8003166:	7be3      	ldrb	r3, [r4, #15]
 8003168:	3b80      	subs	r3, #128	; 0x80
 800316a:	73e3      	strb	r3, [r4, #15]
 800316c:	e010      	b.n	8003190 <checkTimeStamp+0x210>
			}
		}else if(TIMER_PERIOD - (data->invDxTimeStamp - data->actualTime) > SHORT_DELTA){
 800316e:	1ac3      	subs	r3, r0, r3
 8003170:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003174:	3308      	adds	r3, #8
 8003176:	f240 3252 	movw	r2, #850	; 0x352
 800317a:	4293      	cmp	r3, r2
 800317c:	d908      	bls.n	8003190 <checkTimeStamp+0x210>
			data->invDxPresence = false;
 800317e:	2300      	movs	r3, #0
 8003180:	7363      	strb	r3, [r4, #13]
			data->errors += 128;
 8003182:	7be3      	ldrb	r3, [r4, #15]
 8003184:	3b80      	subs	r3, #128	; 0x80
 8003186:	73e3      	strb	r3, [r4, #15]
 8003188:	e002      	b.n	8003190 <checkTimeStamp+0x210>
		}
	}else{
		data->errors += 128;
 800318a:	7be3      	ldrb	r3, [r4, #15]
 800318c:	3b80      	subs	r3, #128	; 0x80
 800318e:	73e3      	strb	r3, [r4, #15]
	}

	/* Inverter Sx Timer */
	if (data->invSxPresence == true){
 8003190:	7ba3      	ldrb	r3, [r4, #14]
 8003192:	b1e3      	cbz	r3, 80031ce <checkTimeStamp+0x24e>
		if (data->actualTime > data->invSxTimeStamp){
 8003194:	f8d4 3510 	ldr.w	r3, [r4, #1296]	; 0x510
 8003198:	4298      	cmp	r0, r3
 800319a:	d90a      	bls.n	80031b2 <checkTimeStamp+0x232>
			if(data->actualTime - data->invSxTimeStamp > SHORT_DELTA){
 800319c:	1ac0      	subs	r0, r0, r3
 800319e:	f240 3352 	movw	r3, #850	; 0x352
 80031a2:	4298      	cmp	r0, r3
 80031a4:	d916      	bls.n	80031d4 <checkTimeStamp+0x254>
				data->invSxPresence = false;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73a3      	strb	r3, [r4, #14]
				data->errors += 64;
 80031aa:	7be3      	ldrb	r3, [r4, #15]
 80031ac:	3340      	adds	r3, #64	; 0x40
 80031ae:	73e3      	strb	r3, [r4, #15]
 80031b0:	e010      	b.n	80031d4 <checkTimeStamp+0x254>
			}
		}else if(TIMER_PERIOD - (data->invSxTimeStamp - data->actualTime) > SHORT_DELTA){
 80031b2:	1ac0      	subs	r0, r0, r3
 80031b4:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80031b8:	3008      	adds	r0, #8
 80031ba:	f240 3352 	movw	r3, #850	; 0x352
 80031be:	4298      	cmp	r0, r3
 80031c0:	d908      	bls.n	80031d4 <checkTimeStamp+0x254>
			data->invSxPresence = false;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73a3      	strb	r3, [r4, #14]
			data->errors += 64;
 80031c6:	7be3      	ldrb	r3, [r4, #15]
 80031c8:	3340      	adds	r3, #64	; 0x40
 80031ca:	73e3      	strb	r3, [r4, #15]
 80031cc:	e002      	b.n	80031d4 <checkTimeStamp+0x254>
		}
	}else{
		data->errors += 64;
 80031ce:	7be3      	ldrb	r3, [r4, #15]
 80031d0:	3340      	adds	r3, #64	; 0x40
 80031d2:	73e3      	strb	r3, [r4, #15]
	/*if (data->errors != 0){
		char mander[10];
		sprintf(mander, "%d\n\r", data->errors);
		HAL_UART_Transmit(&huart2, (uint8_t*)mander, strlen(mander), 10);
	}*/
}
 80031d4:	bd10      	pop	{r4, pc}
	...

080031d8 <sendErrors>:

void sendErrors(state_global_data_t *data){
 80031d8:	b538      	push	{r3, r4, r5, lr}
 80031da:	4605      	mov	r5, r0
	/* This function is used to send errors and warnings to the steering wheel.
	 * Errors and Warnings are calculated every cycle but sent just on request. */
	canSendMSGInit(canSendMSG);
 80031dc:	4c07      	ldr	r4, [pc, #28]	; (80031fc <sendErrors+0x24>)
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff fce1 	bl	8002ba6 <canSendMSGInit>

	canSendMSG[0] = 0x01;
 80031e4:	2301      	movs	r3, #1
 80031e6:	7023      	strb	r3, [r4, #0]
	canSendMSG[1] = data->errors;
 80031e8:	7beb      	ldrb	r3, [r5, #15]
 80031ea:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = data->warningsB1;
 80031ec:	7c2b      	ldrb	r3, [r5, #16]
 80031ee:	70a3      	strb	r3, [r4, #2]
	CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 80031f0:	2208      	movs	r2, #8
 80031f2:	4621      	mov	r1, r4
 80031f4:	2055      	movs	r0, #85	; 0x55
 80031f6:	f7ff fc1d 	bl	8002a34 <CAN_Send>
}
 80031fa:	bd38      	pop	{r3, r4, r5, pc}
 80031fc:	20000758 	.word	0x20000758

08003200 <do_state_idle>:
state_t do_state_idle(state_global_data_t *data){
 8003200:	b538      	push	{r3, r4, r5, lr}
 8003202:	4604      	mov	r4, r0
	if (data->dataCounterUp != data->dataCounterDown){
 8003204:	f8b0 24cc 	ldrh.w	r2, [r0, #1228]	; 0x4cc
 8003208:	f8b0 34ce 	ldrh.w	r3, [r0, #1230]	; 0x4ce
 800320c:	429a      	cmp	r2, r3
 800320e:	d065      	beq.n	80032dc <do_state_idle+0xdc>
		switch(data->fifoData[data->dataCounterDown].idsave){
 8003210:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003214:	008a      	lsls	r2, r1, #2
 8003216:	4402      	add	r2, r0
 8003218:	69d2      	ldr	r2, [r2, #28]
 800321a:	2aaa      	cmp	r2, #170	; 0xaa
 800321c:	d069      	beq.n	80032f2 <do_state_idle+0xf2>
 800321e:	dc23      	bgt.n	8003268 <do_state_idle+0x68>
 8003220:	2a10      	cmp	r2, #16
 8003222:	d041      	beq.n	80032a8 <do_state_idle+0xa8>
 8003224:	2aa0      	cmp	r2, #160	; 0xa0
 8003226:	d14c      	bne.n	80032c2 <do_state_idle+0xc2>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800322c:	009a      	lsls	r2, r3, #2
 800322e:	4402      	add	r2, r0
 8003230:	f892 3020 	ldrb.w	r3, [r2, #32]
 8003234:	2b02      	cmp	r3, #2
 8003236:	d059      	beq.n	80032ec <do_state_idle+0xec>
 8003238:	2b03      	cmp	r3, #3
 800323a:	d142      	bne.n	80032c2 <do_state_idle+0xc2>
						sendErrors(data);
 800323c:	f7ff ffcc 	bl	80031d8 <sendErrors>
						if (data->errors == 0 || data->errors == 16 || data->errors == 32 || data->errors == 48){
 8003240:	7be3      	ldrb	r3, [r4, #15]
 8003242:	b12b      	cbz	r3, 8003250 <do_state_idle+0x50>
 8003244:	2b10      	cmp	r3, #16
 8003246:	d003      	beq.n	8003250 <do_state_idle+0x50>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d001      	beq.n	8003250 <do_state_idle+0x50>
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	d138      	bne.n	80032c2 <do_state_idle+0xc2>
							canSendMSGInit(canSendMSG);
 8003250:	4d48      	ldr	r5, [pc, #288]	; (8003374 <do_state_idle+0x174>)
 8003252:	4628      	mov	r0, r5
 8003254:	f7ff fca7 	bl	8002ba6 <canSendMSGInit>
							canSendMSG[0] = 0x0A;
 8003258:	230a      	movs	r3, #10
 800325a:	702b      	strb	r3, [r5, #0]
							CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 800325c:	2208      	movs	r2, #8
 800325e:	4629      	mov	r1, r5
 8003260:	2055      	movs	r0, #85	; 0x55
 8003262:	f7ff fbe7 	bl	8002a34 <CAN_Send>
 8003266:	e02c      	b.n	80032c2 <do_state_idle+0xc2>
		switch(data->fifoData[data->dataCounterDown].idsave){
 8003268:	f240 1181 	movw	r1, #385	; 0x181
 800326c:	428a      	cmp	r2, r1
 800326e:	d050      	beq.n	8003312 <do_state_idle+0x112>
 8003270:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8003274:	d125      	bne.n	80032c2 <do_state_idle+0xc2>
				if (data->fifoData[data->dataCounterDown].RxData[0] == 0xD8){
 8003276:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800327a:	008a      	lsls	r2, r1, #2
 800327c:	4611      	mov	r1, r2
 800327e:	4402      	add	r2, r0
 8003280:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003284:	2ad8      	cmp	r2, #216	; 0xd8
 8003286:	d11c      	bne.n	80032c2 <do_state_idle+0xc2>
					if (data->fifoData[data->dataCounterDown].RxData[2] == 0x0C){
 8003288:	460a      	mov	r2, r1
 800328a:	4402      	add	r2, r0
 800328c:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8003290:	2b0c      	cmp	r3, #12
 8003292:	d060      	beq.n	8003356 <do_state_idle+0x156>
						canSendMSG[0] = 0x0D;
 8003294:	4937      	ldr	r1, [pc, #220]	; (8003374 <do_state_idle+0x174>)
 8003296:	230d      	movs	r3, #13
 8003298:	700b      	strb	r3, [r1, #0]
						CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 800329a:	2208      	movs	r2, #8
 800329c:	2055      	movs	r0, #85	; 0x55
 800329e:	f7ff fbc9 	bl	8002a34 <CAN_Send>
						data->inverterDx = false;
 80032a2:	2300      	movs	r3, #0
 80032a4:	7123      	strb	r3, [r4, #4]
 80032a6:	e00c      	b.n	80032c2 <do_state_idle+0xc2>
				canSendMSGInit(canSendMSG);
 80032a8:	4d32      	ldr	r5, [pc, #200]	; (8003374 <do_state_idle+0x174>)
 80032aa:	4628      	mov	r0, r5
 80032ac:	f7ff fc7b 	bl	8002ba6 <canSendMSGInit>
				canSendMSG[0] = 0x10;
 80032b0:	2310      	movs	r3, #16
 80032b2:	702b      	strb	r3, [r5, #0]
				canSendMSG[1] = 0x01;
 80032b4:	2301      	movs	r3, #1
 80032b6:	706b      	strb	r3, [r5, #1]
				CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 80032b8:	2208      	movs	r2, #8
 80032ba:	4629      	mov	r1, r5
 80032bc:	2055      	movs	r0, #85	; 0x55
 80032be:	f7ff fbb9 	bl	8002a34 <CAN_Send>
		data->dataCounterDown += 1;
 80032c2:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
 80032c6:	3301      	adds	r3, #1
 80032c8:	b29a      	uxth	r2, r3
		data->dataCounterDown = data->dataCounterDown % NUM_DATA;
 80032ca:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <do_state_idle+0x178>)
 80032cc:	fba3 1302 	umull	r1, r3, r3, r2
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	2164      	movs	r1, #100	; 0x64
 80032d4:	fb01 2313 	mls	r3, r1, r3, r2
 80032d8:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
	if (data->steeringPresence == true && data->tractiveSystem == true){
 80032dc:	79e3      	ldrb	r3, [r4, #7]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d043      	beq.n	800336a <do_state_idle+0x16a>
 80032e2:	7823      	ldrb	r3, [r4, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d142      	bne.n	800336e <do_state_idle+0x16e>
	return STATE_IDLE;
 80032e8:	2001      	movs	r0, #1
 80032ea:	e03f      	b.n	800336c <do_state_idle+0x16c>
						sendErrors(data);
 80032ec:	f7ff ff74 	bl	80031d8 <sendErrors>
						break;
 80032f0:	e7e7      	b.n	80032c2 <do_state_idle+0xc2>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 80032f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	4402      	add	r2, r0
 80032fa:	f892 3020 	ldrb.w	r3, [r2, #32]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d004      	beq.n	800330c <do_state_idle+0x10c>
 8003302:	2b04      	cmp	r3, #4
 8003304:	d1dd      	bne.n	80032c2 <do_state_idle+0xc2>
						data->tractiveSystem = false;
 8003306:	2300      	movs	r3, #0
 8003308:	7003      	strb	r3, [r0, #0]
						break;
 800330a:	e7da      	b.n	80032c2 <do_state_idle+0xc2>
						data->tractiveSystem = true;
 800330c:	2301      	movs	r3, #1
 800330e:	7003      	strb	r3, [r0, #0]
						break;
 8003310:	e7d7      	b.n	80032c2 <do_state_idle+0xc2>
				if (data->fifoData[data->dataCounterDown].RxData[0] == 0xD8){
 8003312:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003316:	008a      	lsls	r2, r1, #2
 8003318:	4611      	mov	r1, r2
 800331a:	4402      	add	r2, r0
 800331c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003320:	2ad8      	cmp	r2, #216	; 0xd8
 8003322:	d1ce      	bne.n	80032c2 <do_state_idle+0xc2>
					if (data->fifoData[data->dataCounterDown].RxData[2] == 0x0C){
 8003324:	460a      	mov	r2, r1
 8003326:	4402      	add	r2, r0
 8003328:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d009      	beq.n	8003344 <do_state_idle+0x144>
						canSendMSG[0] = 0x0C;
 8003330:	4910      	ldr	r1, [pc, #64]	; (8003374 <do_state_idle+0x174>)
 8003332:	230c      	movs	r3, #12
 8003334:	700b      	strb	r3, [r1, #0]
						CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8003336:	2208      	movs	r2, #8
 8003338:	2055      	movs	r0, #85	; 0x55
 800333a:	f7ff fb7b 	bl	8002a34 <CAN_Send>
						data->inverterSx = false;
 800333e:	2300      	movs	r3, #0
 8003340:	70e3      	strb	r3, [r4, #3]
 8003342:	e7be      	b.n	80032c2 <do_state_idle+0xc2>
						canSendMSG[0] = 0x08;
 8003344:	490b      	ldr	r1, [pc, #44]	; (8003374 <do_state_idle+0x174>)
 8003346:	2208      	movs	r2, #8
 8003348:	700a      	strb	r2, [r1, #0]
						CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 800334a:	2055      	movs	r0, #85	; 0x55
 800334c:	f7ff fb72 	bl	8002a34 <CAN_Send>
						data->inverterSx = true;
 8003350:	2301      	movs	r3, #1
 8003352:	70e3      	strb	r3, [r4, #3]
 8003354:	e7b5      	b.n	80032c2 <do_state_idle+0xc2>
						canSendMSG[0] = 0x09;
 8003356:	4907      	ldr	r1, [pc, #28]	; (8003374 <do_state_idle+0x174>)
 8003358:	2309      	movs	r3, #9
 800335a:	700b      	strb	r3, [r1, #0]
						CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 800335c:	2208      	movs	r2, #8
 800335e:	2055      	movs	r0, #85	; 0x55
 8003360:	f7ff fb68 	bl	8002a34 <CAN_Send>
						data->inverterDx = true;
 8003364:	2301      	movs	r3, #1
 8003366:	7123      	strb	r3, [r4, #4]
 8003368:	e7ab      	b.n	80032c2 <do_state_idle+0xc2>
	return STATE_IDLE;
 800336a:	2001      	movs	r0, #1
}
 800336c:	bd38      	pop	{r3, r4, r5, pc}
		return STATE_SETUP;
 800336e:	2002      	movs	r0, #2
 8003370:	e7fc      	b.n	800336c <do_state_idle+0x16c>
 8003372:	bf00      	nop
 8003374:	20000758 	.word	0x20000758
 8003378:	51eb851f 	.word	0x51eb851f

0800337c <shutdown>:

void shutdown(state_global_data_t *data){
 800337c:	b510      	push	{r4, lr}
 800337e:	b08e      	sub	sp, #56	; 0x38
	/* This function is used to sand the turning off request to the BMS_HV.
	 * This is used just on driver request.
	 * The msg is sent three times to be sure that BMS_HV would received that. */
	canSendMSGInit(canSendMSG);
 8003380:	4c12      	ldr	r4, [pc, #72]	; (80033cc <shutdown+0x50>)
 8003382:	4620      	mov	r0, r4
 8003384:	f7ff fc0f 	bl	8002ba6 <canSendMSGInit>

	char mander[50];
	sprintf(mander, "ShutDown\n\r");
 8003388:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <shutdown+0x54>)
 800338a:	ab01      	add	r3, sp, #4
 800338c:	ca07      	ldmia	r2, {r0, r1, r2}
 800338e:	c303      	stmia	r3!, {r0, r1}
 8003390:	f823 2b02 	strh.w	r2, [r3], #2
 8003394:	0c12      	lsrs	r2, r2, #16
 8003396:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)mander, strlen(mander), 10);
 8003398:	a801      	add	r0, sp, #4
 800339a:	f7fc ff39 	bl	8000210 <strlen>
 800339e:	230a      	movs	r3, #10
 80033a0:	b282      	uxth	r2, r0
 80033a2:	a901      	add	r1, sp, #4
 80033a4:	480b      	ldr	r0, [pc, #44]	; (80033d4 <shutdown+0x58>)
 80033a6:	f7ff fa5b 	bl	8002860 <HAL_UART_Transmit>

	canSendMSG[0] = 0x0B;
 80033aa:	230b      	movs	r3, #11
 80033ac:	7023      	strb	r3, [r4, #0]
	canSendMSG[1] = 0x04;
 80033ae:	2304      	movs	r3, #4
 80033b0:	7063      	strb	r3, [r4, #1]
	for (int i = 0; i < 3; i++){
 80033b2:	2400      	movs	r4, #0
 80033b4:	e005      	b.n	80033c2 <shutdown+0x46>
		CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 80033b6:	2208      	movs	r2, #8
 80033b8:	4904      	ldr	r1, [pc, #16]	; (80033cc <shutdown+0x50>)
 80033ba:	2055      	movs	r0, #85	; 0x55
 80033bc:	f7ff fb3a 	bl	8002a34 <CAN_Send>
	for (int i = 0; i < 3; i++){
 80033c0:	3401      	adds	r4, #1
 80033c2:	2c02      	cmp	r4, #2
 80033c4:	ddf7      	ble.n	80033b6 <shutdown+0x3a>
	}
	//data->requestOfShutdown = 1;
}
 80033c6:	b00e      	add	sp, #56	; 0x38
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	bf00      	nop
 80033cc:	20000758 	.word	0x20000758
 80033d0:	08004d3c 	.word	0x08004d3c
 80033d4:	20000694 	.word	0x20000694

080033d8 <shutdownErrors>:

void shutdownErrors(state_global_data_t *data, int err){
 80033d8:	b530      	push	{r4, r5, lr}
 80033da:	b08f      	sub	sp, #60	; 0x3c
 80033dc:	460d      	mov	r5, r1
	/* This function is used to sand the turning off request to the BMS_HV.
	 * This is used just in case of an error occurred.
	 * The msg is sent three times to be sure that BMS_HV would received that. */
	canSendMSGInit(canSendMSG);
 80033de:	4c11      	ldr	r4, [pc, #68]	; (8003424 <shutdownErrors+0x4c>)
 80033e0:	4620      	mov	r0, r4
 80033e2:	f7ff fbe0 	bl	8002ba6 <canSendMSGInit>

	char mander[50];
	sprintf(mander, "ShutDown_Errors: %d\n\r", err);
 80033e6:	462a      	mov	r2, r5
 80033e8:	490f      	ldr	r1, [pc, #60]	; (8003428 <shutdownErrors+0x50>)
 80033ea:	a801      	add	r0, sp, #4
 80033ec:	f001 f852 	bl	8004494 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)mander, strlen(mander), 10);
 80033f0:	a801      	add	r0, sp, #4
 80033f2:	f7fc ff0d 	bl	8000210 <strlen>
 80033f6:	230a      	movs	r3, #10
 80033f8:	b282      	uxth	r2, r0
 80033fa:	a901      	add	r1, sp, #4
 80033fc:	480b      	ldr	r0, [pc, #44]	; (800342c <shutdownErrors+0x54>)
 80033fe:	f7ff fa2f 	bl	8002860 <HAL_UART_Transmit>

	canSendMSG[0] = 0x0B;
 8003402:	230b      	movs	r3, #11
 8003404:	7023      	strb	r3, [r4, #0]
	canSendMSG[1] = 0x08;
 8003406:	2308      	movs	r3, #8
 8003408:	7063      	strb	r3, [r4, #1]
	canSendMSG[2] = err;
 800340a:	70a5      	strb	r5, [r4, #2]
	for (int i = 0; i < 3; i++){
 800340c:	2400      	movs	r4, #0
 800340e:	e005      	b.n	800341c <shutdownErrors+0x44>
		CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8003410:	2208      	movs	r2, #8
 8003412:	4904      	ldr	r1, [pc, #16]	; (8003424 <shutdownErrors+0x4c>)
 8003414:	2055      	movs	r0, #85	; 0x55
 8003416:	f7ff fb0d 	bl	8002a34 <CAN_Send>
	for (int i = 0; i < 3; i++){
 800341a:	3401      	adds	r4, #1
 800341c:	2c02      	cmp	r4, #2
 800341e:	ddf7      	ble.n	8003410 <shutdownErrors+0x38>
	}
	//data->requestOfShutdown = 1;
}
 8003420:	b00f      	add	sp, #60	; 0x3c
 8003422:	bd30      	pop	{r4, r5, pc}
 8003424:	20000758 	.word	0x20000758
 8003428:	08004d48 	.word	0x08004d48
 800342c:	20000694 	.word	0x20000694

08003430 <HAL_CAN_RxFifo0FullCallback>:
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	b090      	sub	sp, #64	; 0x40
	idsave = CAN_Receive(RxData, MSG_LENGHT);
 8003434:	2108      	movs	r1, #8
 8003436:	a80e      	add	r0, sp, #56	; 0x38
 8003438:	f7ff fb22 	bl	8002a80 <CAN_Receive>
	data.fifoData[data.dataCounterUp].idsave = idsave;
 800343c:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800343e:	f8b3 64cc 	ldrh.w	r6, [r3, #1228]	; 0x4cc
 8003442:	4634      	mov	r4, r6
 8003444:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8003448:	008a      	lsls	r2, r1, #2
 800344a:	4413      	add	r3, r2
 800344c:	61d8      	str	r0, [r3, #28]
	for (int i = 0; i < MSG_LENGHT; i++){
 800344e:	2200      	movs	r2, #0
 8003450:	e00c      	b.n	800346c <HAL_CAN_RxFifo0FullCallback+0x3c>
		data.fifoData[data.dataCounterUp].RxData[i] = RxData[i];
 8003452:	ab10      	add	r3, sp, #64	; 0x40
 8003454:	4413      	add	r3, r2
 8003456:	f813 5c08 	ldrb.w	r5, [r3, #-8]
 800345a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	4b54      	ldr	r3, [pc, #336]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 8003462:	440b      	add	r3, r1
 8003464:	4413      	add	r3, r2
 8003466:	f883 5020 	strb.w	r5, [r3, #32]
	for (int i = 0; i < MSG_LENGHT; i++){
 800346a:	3201      	adds	r2, #1
 800346c:	2a07      	cmp	r2, #7
 800346e:	ddf0      	ble.n	8003452 <HAL_CAN_RxFifo0FullCallback+0x22>
	data.dataCounterUp += 1;
 8003470:	3601      	adds	r6, #1
 8003472:	b2b6      	uxth	r6, r6
	data.dataCounterUp = data.dataCounterUp % NUM_DATA;
 8003474:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <HAL_CAN_RxFifo0FullCallback+0x188>)
 8003476:	fba3 2306 	umull	r2, r3, r3, r6
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2264      	movs	r2, #100	; 0x64
 800347e:	fb02 6613 	mls	r6, r2, r3, r6
 8003482:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 8003484:	f8a3 64cc 	strh.w	r6, [r3, #1228]	; 0x4cc
	switch(idsave){
 8003488:	28c0      	cmp	r0, #192	; 0xc0
 800348a:	d06d      	beq.n	8003568 <HAL_CAN_RxFifo0FullCallback+0x138>
 800348c:	dd12      	ble.n	80034b4 <HAL_CAN_RxFifo0FullCallback+0x84>
 800348e:	28ff      	cmp	r0, #255	; 0xff
 8003490:	f000 8082 	beq.w	8003598 <HAL_CAN_RxFifo0FullCallback+0x168>
 8003494:	dd32      	ble.n	80034fc <HAL_CAN_RxFifo0FullCallback+0xcc>
 8003496:	f240 1381 	movw	r3, #385	; 0x181
 800349a:	4298      	cmp	r0, r3
 800349c:	d06c      	beq.n	8003578 <HAL_CAN_RxFifo0FullCallback+0x148>
 800349e:	f5b0 7fc1 	cmp.w	r0, #386	; 0x182
 80034a2:	d142      	bne.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
			data.invDxPresence = true;
 80034a4:	4c43      	ldr	r4, [pc, #268]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 80034a6:	2301      	movs	r3, #1
 80034a8:	7363      	strb	r3, [r4, #13]
			data.invDxTimeStamp = HAL_GetTick();
 80034aa:	f7fd fd71 	bl	8000f90 <HAL_GetTick>
 80034ae:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
			break;
 80034b2:	e03a      	b.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
	switch(idsave){
 80034b4:	28aa      	cmp	r0, #170	; 0xaa
 80034b6:	d067      	beq.n	8003588 <HAL_CAN_RxFifo0FullCallback+0x158>
 80034b8:	28b0      	cmp	r0, #176	; 0xb0
 80034ba:	d029      	beq.n	8003510 <HAL_CAN_RxFifo0FullCallback+0xe0>
 80034bc:	28a0      	cmp	r0, #160	; 0xa0
 80034be:	d134      	bne.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
			data.steeringPresence = true;
 80034c0:	4c3c      	ldr	r4, [pc, #240]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 80034c2:	2301      	movs	r3, #1
 80034c4:	71e3      	strb	r3, [r4, #7]
			data.steeringTimeStamp = HAL_GetTick();
 80034c6:	f7fd fd63 	bl	8000f90 <HAL_GetTick>
 80034ca:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
			if (RxData[0] == 0x09){
 80034ce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d129      	bne.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
				sprintf(mander, "Request Received\n\r");
 80034d6:	ac01      	add	r4, sp, #4
 80034d8:	4d38      	ldr	r5, [pc, #224]	; (80035bc <HAL_CAN_RxFifo0FullCallback+0x18c>)
 80034da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	f824 3b02 	strh.w	r3, [r4], #2
 80034e4:	0c1b      	lsrs	r3, r3, #16
 80034e6:	7023      	strb	r3, [r4, #0]
				HAL_UART_Transmit(&huart2, (uint8_t*)mander, strlen(mander), 10);
 80034e8:	a801      	add	r0, sp, #4
 80034ea:	f7fc fe91 	bl	8000210 <strlen>
 80034ee:	230a      	movs	r3, #10
 80034f0:	b282      	uxth	r2, r0
 80034f2:	a901      	add	r1, sp, #4
 80034f4:	4832      	ldr	r0, [pc, #200]	; (80035c0 <HAL_CAN_RxFifo0FullCallback+0x190>)
 80034f6:	f7ff f9b3 	bl	8002860 <HAL_UART_Transmit>
 80034fa:	e016      	b.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
	switch(idsave){
 80034fc:	28d0      	cmp	r0, #208	; 0xd0
 80034fe:	d114      	bne.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
			data.centralPresence = true;
 8003500:	4c2c      	ldr	r4, [pc, #176]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 8003502:	2301      	movs	r3, #1
 8003504:	72a3      	strb	r3, [r4, #10]
			data.centralTimeStamp = HAL_GetTick();
 8003506:	f7fd fd43 	bl	8000f90 <HAL_GetTick>
 800350a:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
			break;
 800350e:	e00c      	b.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
			if (RxData[0] == 0x01 && data.go == 1){
 8003510:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8003514:	2b01      	cmp	r3, #1
 8003516:	d011      	beq.n	800353c <HAL_CAN_RxFifo0FullCallback+0x10c>
			}else if (RxData[0] == 0x02 && data.go == 1){
 8003518:	2b02      	cmp	r3, #2
 800351a:	d019      	beq.n	8003550 <HAL_CAN_RxFifo0FullCallback+0x120>
			data.pedalsPresence = true;
 800351c:	4c25      	ldr	r4, [pc, #148]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800351e:	2301      	movs	r3, #1
 8003520:	7223      	strb	r3, [r4, #8]
			data.pedalsTimeStamp = HAL_GetTick();
 8003522:	f7fd fd35 	bl	8000f90 <HAL_GetTick>
 8003526:	f8c4 04f8 	str.w	r0, [r4, #1272]	; 0x4f8
	if (data.dataCounterUp == data.dataCounterDown){
 800352a:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800352c:	f8b3 24cc 	ldrh.w	r2, [r3, #1228]	; 0x4cc
 8003530:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 8003534:	429a      	cmp	r2, r3
 8003536:	d037      	beq.n	80035a8 <HAL_CAN_RxFifo0FullCallback+0x178>
}
 8003538:	b010      	add	sp, #64	; 0x40
 800353a:	bd70      	pop	{r4, r5, r6, pc}
			if (RxData[0] == 0x01 && data.go == 1){
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800353e:	7852      	ldrb	r2, [r2, #1]
 8003540:	2a00      	cmp	r2, #0
 8003542:	d0e9      	beq.n	8003518 <HAL_CAN_RxFifo0FullCallback+0xe8>
				data.accelerator = RxData[1];
 8003544:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800354a:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 800354e:	e7e5      	b.n	800351c <HAL_CAN_RxFifo0FullCallback+0xec>
			}else if (RxData[0] == 0x02 && data.go == 1){
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0e1      	beq.n	800351c <HAL_CAN_RxFifo0FullCallback+0xec>
				data.breakingPedal = RxData[1];
 8003558:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 800355c:	3300      	adds	r3, #0
 800355e:	bf18      	it	ne
 8003560:	2301      	movne	r3, #1
 8003562:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 8003564:	7093      	strb	r3, [r2, #2]
 8003566:	e7d9      	b.n	800351c <HAL_CAN_RxFifo0FullCallback+0xec>
			data.frontalPresence = true;
 8003568:	4c12      	ldr	r4, [pc, #72]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800356a:	2301      	movs	r3, #1
 800356c:	7263      	strb	r3, [r4, #9]
			data.frontalTimeStamp = HAL_GetTick();
 800356e:	f7fd fd0f 	bl	8000f90 <HAL_GetTick>
 8003572:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
			break;
 8003576:	e7d8      	b.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
			data.invSxPresence = true;
 8003578:	4c0e      	ldr	r4, [pc, #56]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800357a:	2301      	movs	r3, #1
 800357c:	73a3      	strb	r3, [r4, #14]
			data.invSxTimeStamp = HAL_GetTick();
 800357e:	f7fd fd07 	bl	8000f90 <HAL_GetTick>
 8003582:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
			break;
 8003586:	e7d0      	b.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
			data.bmsHvPresence = true;
 8003588:	4c0a      	ldr	r4, [pc, #40]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800358a:	2301      	movs	r3, #1
 800358c:	7323      	strb	r3, [r4, #12]
			data.bmsHvTimeStamp = HAL_GetTick();
 800358e:	f7fd fcff 	bl	8000f90 <HAL_GetTick>
 8003592:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
			break;
 8003596:	e7c8      	b.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
			data.bmsLvPresence = true;
 8003598:	4c06      	ldr	r4, [pc, #24]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 800359a:	2301      	movs	r3, #1
 800359c:	72e3      	strb	r3, [r4, #11]
			data.bmsLvTimeStamp = HAL_GetTick();
 800359e:	f7fd fcf7 	bl	8000f90 <HAL_GetTick>
 80035a2:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
			break;
 80035a6:	e7c0      	b.n	800352a <HAL_CAN_RxFifo0FullCallback+0xfa>
		shutdownErrors(&data, 0x23);
 80035a8:	2123      	movs	r1, #35	; 0x23
 80035aa:	4802      	ldr	r0, [pc, #8]	; (80035b4 <HAL_CAN_RxFifo0FullCallback+0x184>)
 80035ac:	f7ff ff14 	bl	80033d8 <shutdownErrors>
}
 80035b0:	e7c2      	b.n	8003538 <HAL_CAN_RxFifo0FullCallback+0x108>
 80035b2:	bf00      	nop
 80035b4:	2000013c 	.word	0x2000013c
 80035b8:	51eb851f 	.word	0x51eb851f
 80035bc:	08004d60 	.word	0x08004d60
 80035c0:	20000694 	.word	0x20000694

080035c4 <HAL_CAN_RxFifo1FullCallback>:
void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan){
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	b082      	sub	sp, #8
	idsave = CAN_Receive(RxData, MSG_LENGHT);
 80035c8:	2108      	movs	r1, #8
 80035ca:	4668      	mov	r0, sp
 80035cc:	f7ff fa58 	bl	8002a80 <CAN_Receive>
	data.fifoData[data.dataCounterUp].idsave = idsave;
 80035d0:	4b51      	ldr	r3, [pc, #324]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80035d2:	f8b3 64cc 	ldrh.w	r6, [r3, #1228]	; 0x4cc
 80035d6:	4634      	mov	r4, r6
 80035d8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80035dc:	008a      	lsls	r2, r1, #2
 80035de:	4413      	add	r3, r2
 80035e0:	61d8      	str	r0, [r3, #28]
	for (int i = 0; i < MSG_LENGHT; i++){
 80035e2:	2200      	movs	r2, #0
 80035e4:	e00c      	b.n	8003600 <HAL_CAN_RxFifo1FullCallback+0x3c>
		data.fifoData[data.dataCounterUp].RxData[i] = RxData[i];
 80035e6:	ab02      	add	r3, sp, #8
 80035e8:	4413      	add	r3, r2
 80035ea:	f813 5c08 	ldrb.w	r5, [r3, #-8]
 80035ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80035f2:	0099      	lsls	r1, r3, #2
 80035f4:	4b48      	ldr	r3, [pc, #288]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80035f6:	440b      	add	r3, r1
 80035f8:	4413      	add	r3, r2
 80035fa:	f883 5020 	strb.w	r5, [r3, #32]
	for (int i = 0; i < MSG_LENGHT; i++){
 80035fe:	3201      	adds	r2, #1
 8003600:	2a07      	cmp	r2, #7
 8003602:	ddf0      	ble.n	80035e6 <HAL_CAN_RxFifo1FullCallback+0x22>
	data.dataCounterUp += 1;
 8003604:	3601      	adds	r6, #1
 8003606:	b2b6      	uxth	r6, r6
	data.dataCounterUp = data.dataCounterUp % NUM_DATA;
 8003608:	4b44      	ldr	r3, [pc, #272]	; (800371c <HAL_CAN_RxFifo1FullCallback+0x158>)
 800360a:	fba3 2306 	umull	r2, r3, r3, r6
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2264      	movs	r2, #100	; 0x64
 8003612:	fb02 6613 	mls	r6, r2, r3, r6
 8003616:	4b40      	ldr	r3, [pc, #256]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003618:	f8a3 64cc 	strh.w	r6, [r3, #1228]	; 0x4cc
	switch(idsave){
 800361c:	28c0      	cmp	r0, #192	; 0xc0
 800361e:	d056      	beq.n	80036ce <HAL_CAN_RxFifo1FullCallback+0x10a>
 8003620:	dd11      	ble.n	8003646 <HAL_CAN_RxFifo1FullCallback+0x82>
 8003622:	28ff      	cmp	r0, #255	; 0xff
 8003624:	d06b      	beq.n	80036fe <HAL_CAN_RxFifo1FullCallback+0x13a>
 8003626:	dd24      	ble.n	8003672 <HAL_CAN_RxFifo1FullCallback+0xae>
 8003628:	f240 1381 	movw	r3, #385	; 0x181
 800362c:	4298      	cmp	r0, r3
 800362e:	d056      	beq.n	80036de <HAL_CAN_RxFifo1FullCallback+0x11a>
 8003630:	f5b0 7fc1 	cmp.w	r0, #386	; 0x182
 8003634:	d114      	bne.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			data.invDxPresence = true;
 8003636:	4c38      	ldr	r4, [pc, #224]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003638:	2301      	movs	r3, #1
 800363a:	7363      	strb	r3, [r4, #13]
			data.invDxTimeStamp = HAL_GetTick();
 800363c:	f7fd fca8 	bl	8000f90 <HAL_GetTick>
 8003640:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
			break;
 8003644:	e00c      	b.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
	switch(idsave){
 8003646:	28aa      	cmp	r0, #170	; 0xaa
 8003648:	d051      	beq.n	80036ee <HAL_CAN_RxFifo1FullCallback+0x12a>
 800364a:	28b0      	cmp	r0, #176	; 0xb0
 800364c:	d01b      	beq.n	8003686 <HAL_CAN_RxFifo1FullCallback+0xc2>
 800364e:	28a0      	cmp	r0, #160	; 0xa0
 8003650:	d106      	bne.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			data.steeringPresence = true;
 8003652:	4c31      	ldr	r4, [pc, #196]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003654:	2301      	movs	r3, #1
 8003656:	71e3      	strb	r3, [r4, #7]
			data.steeringTimeStamp = HAL_GetTick();
 8003658:	f7fd fc9a 	bl	8000f90 <HAL_GetTick>
 800365c:	f8c4 04f4 	str.w	r0, [r4, #1268]	; 0x4f4
	if (data.dataCounterUp == data.dataCounterDown){
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003662:	f8b3 24cc 	ldrh.w	r2, [r3, #1228]	; 0x4cc
 8003666:	f8b3 34ce 	ldrh.w	r3, [r3, #1230]	; 0x4ce
 800366a:	429a      	cmp	r2, r3
 800366c:	d04f      	beq.n	800370e <HAL_CAN_RxFifo1FullCallback+0x14a>
}
 800366e:	b002      	add	sp, #8
 8003670:	bd70      	pop	{r4, r5, r6, pc}
	switch(idsave){
 8003672:	28d0      	cmp	r0, #208	; 0xd0
 8003674:	d1f4      	bne.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			data.centralPresence = true;
 8003676:	4c28      	ldr	r4, [pc, #160]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003678:	2301      	movs	r3, #1
 800367a:	72a3      	strb	r3, [r4, #10]
			data.centralTimeStamp = HAL_GetTick();
 800367c:	f7fd fc88 	bl	8000f90 <HAL_GetTick>
 8003680:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
			break;
 8003684:	e7ec      	b.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			if (RxData[0] == 0x01 && data.go == 1){
 8003686:	f89d 3000 	ldrb.w	r3, [sp]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d009      	beq.n	80036a2 <HAL_CAN_RxFifo1FullCallback+0xde>
			}else if (RxData[0] == 0x02 && data.go == 1){
 800368e:	2b02      	cmp	r3, #2
 8003690:	d011      	beq.n	80036b6 <HAL_CAN_RxFifo1FullCallback+0xf2>
			data.pedalsPresence = true;
 8003692:	4c21      	ldr	r4, [pc, #132]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003694:	2301      	movs	r3, #1
 8003696:	7223      	strb	r3, [r4, #8]
			data.pedalsTimeStamp = HAL_GetTick();
 8003698:	f7fd fc7a 	bl	8000f90 <HAL_GetTick>
 800369c:	f8c4 04f8 	str.w	r0, [r4, #1272]	; 0x4f8
			break;
 80036a0:	e7de      	b.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			if (RxData[0] == 0x01 && data.go == 1){
 80036a2:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80036a4:	7852      	ldrb	r2, [r2, #1]
 80036a6:	2a00      	cmp	r2, #0
 80036a8:	d0f1      	beq.n	800368e <HAL_CAN_RxFifo1FullCallback+0xca>
				data.accelerator = RxData[1];
 80036aa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80036ae:	4b1a      	ldr	r3, [pc, #104]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80036b0:	f883 24d0 	strb.w	r2, [r3, #1232]	; 0x4d0
 80036b4:	e7ed      	b.n	8003692 <HAL_CAN_RxFifo1FullCallback+0xce>
			}else if (RxData[0] == 0x02 && data.go == 1){
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0e9      	beq.n	8003692 <HAL_CAN_RxFifo1FullCallback+0xce>
				data.breakingPedal = RxData[1];
 80036be:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80036c2:	3300      	adds	r3, #0
 80036c4:	bf18      	it	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	4a13      	ldr	r2, [pc, #76]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80036ca:	7093      	strb	r3, [r2, #2]
 80036cc:	e7e1      	b.n	8003692 <HAL_CAN_RxFifo1FullCallback+0xce>
			data.frontalPresence = true;
 80036ce:	4c12      	ldr	r4, [pc, #72]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80036d0:	2301      	movs	r3, #1
 80036d2:	7263      	strb	r3, [r4, #9]
			data.frontalTimeStamp = HAL_GetTick();
 80036d4:	f7fd fc5c 	bl	8000f90 <HAL_GetTick>
 80036d8:	f8c4 04fc 	str.w	r0, [r4, #1276]	; 0x4fc
			break;
 80036dc:	e7c0      	b.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			data.invSxPresence = true;
 80036de:	4c0e      	ldr	r4, [pc, #56]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80036e0:	2301      	movs	r3, #1
 80036e2:	73a3      	strb	r3, [r4, #14]
			data.invSxTimeStamp = HAL_GetTick();
 80036e4:	f7fd fc54 	bl	8000f90 <HAL_GetTick>
 80036e8:	f8c4 0510 	str.w	r0, [r4, #1296]	; 0x510
			break;
 80036ec:	e7b8      	b.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			data.bmsHvPresence = true;
 80036ee:	4c0a      	ldr	r4, [pc, #40]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 80036f0:	2301      	movs	r3, #1
 80036f2:	7323      	strb	r3, [r4, #12]
			data.bmsHvTimeStamp = HAL_GetTick();
 80036f4:	f7fd fc4c 	bl	8000f90 <HAL_GetTick>
 80036f8:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
			break;
 80036fc:	e7b0      	b.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
			data.bmsLvPresence = true;
 80036fe:	4c06      	ldr	r4, [pc, #24]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003700:	2301      	movs	r3, #1
 8003702:	72e3      	strb	r3, [r4, #11]
			data.bmsLvTimeStamp = HAL_GetTick();
 8003704:	f7fd fc44 	bl	8000f90 <HAL_GetTick>
 8003708:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
			break;
 800370c:	e7a8      	b.n	8003660 <HAL_CAN_RxFifo1FullCallback+0x9c>
		shutdownErrors(&data, 0x23);
 800370e:	2123      	movs	r1, #35	; 0x23
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <HAL_CAN_RxFifo1FullCallback+0x154>)
 8003712:	f7ff fe61 	bl	80033d8 <shutdownErrors>
}
 8003716:	e7aa      	b.n	800366e <HAL_CAN_RxFifo1FullCallback+0xaa>
 8003718:	2000013c 	.word	0x2000013c
 800371c:	51eb851f 	.word	0x51eb851f

08003720 <do_state_setup>:
state_t do_state_setup(state_global_data_t *data){
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	4605      	mov	r5, r0
	if (data->dataCounterUp != data->dataCounterDown){
 8003724:	f8b0 24cc 	ldrh.w	r2, [r0, #1228]	; 0x4cc
 8003728:	f8b0 34ce 	ldrh.w	r3, [r0, #1230]	; 0x4ce
 800372c:	429a      	cmp	r2, r3
 800372e:	d029      	beq.n	8003784 <do_state_setup+0x64>
		switch (data->fifoData[data->dataCounterDown].idsave){
 8003730:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003734:	008a      	lsls	r2, r1, #2
 8003736:	4402      	add	r2, r0
 8003738:	69d2      	ldr	r2, [r2, #28]
 800373a:	2ab0      	cmp	r2, #176	; 0xb0
 800373c:	f000 80c8 	beq.w	80038d0 <do_state_setup+0x1b0>
 8003740:	dc22      	bgt.n	8003788 <do_state_setup+0x68>
 8003742:	2aa0      	cmp	r2, #160	; 0xa0
 8003744:	d03a      	beq.n	80037bc <do_state_setup+0x9c>
 8003746:	2aaa      	cmp	r2, #170	; 0xaa
 8003748:	f000 80b1 	beq.w	80038ae <do_state_setup+0x18e>
 800374c:	2a10      	cmp	r2, #16
 800374e:	d10c      	bne.n	800376a <do_state_setup+0x4a>
				canSendMSGInit(canSendMSG);
 8003750:	4cc3      	ldr	r4, [pc, #780]	; (8003a60 <do_state_setup+0x340>)
 8003752:	4620      	mov	r0, r4
 8003754:	f7ff fa27 	bl	8002ba6 <canSendMSGInit>
				canSendMSG[0] = 0x10;
 8003758:	2310      	movs	r3, #16
 800375a:	7023      	strb	r3, [r4, #0]
				canSendMSG[1] = 0x02;
 800375c:	2302      	movs	r3, #2
 800375e:	7063      	strb	r3, [r4, #1]
				CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8003760:	2208      	movs	r2, #8
 8003762:	4621      	mov	r1, r4
 8003764:	2055      	movs	r0, #85	; 0x55
 8003766:	f7ff f965 	bl	8002a34 <CAN_Send>
		data->dataCounterDown += 1;
 800376a:	f8b5 34ce 	ldrh.w	r3, [r5, #1230]	; 0x4ce
 800376e:	3301      	adds	r3, #1
 8003770:	b29a      	uxth	r2, r3
		data->dataCounterDown = data->dataCounterDown % NUM_DATA;
 8003772:	4bbc      	ldr	r3, [pc, #752]	; (8003a64 <do_state_setup+0x344>)
 8003774:	fba3 1302 	umull	r1, r3, r3, r2
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	2164      	movs	r1, #100	; 0x64
 800377c:	fb01 2313 	mls	r3, r1, r3, r2
 8003780:	f8a5 34ce 	strh.w	r3, [r5, #1230]	; 0x4ce
state_t do_state_setup(state_global_data_t *data){
 8003784:	2400      	movs	r4, #0
 8003786:	e151      	b.n	8003a2c <do_state_setup+0x30c>
		switch (data->fifoData[data->dataCounterDown].idsave){
 8003788:	f240 1181 	movw	r1, #385	; 0x181
 800378c:	428a      	cmp	r2, r1
 800378e:	f000 80c3 	beq.w	8003918 <do_state_setup+0x1f8>
 8003792:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8003796:	f000 8103 	beq.w	80039a0 <do_state_setup+0x280>
 800379a:	2aff      	cmp	r2, #255	; 0xff
 800379c:	d1e5      	bne.n	800376a <do_state_setup+0x4a>
				if (data->fifoData[data->dataCounterDown].RxData[0] == 0x01){
 800379e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80037a2:	008a      	lsls	r2, r1, #2
 80037a4:	4611      	mov	r1, r2
 80037a6:	4402      	add	r2, r0
 80037a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80037ac:	2a01      	cmp	r2, #1
 80037ae:	d1dc      	bne.n	800376a <do_state_setup+0x4a>
					data->scs[LV] = data->fifoData[data->dataCounterDown].RxData[5];
 80037b0:	460a      	mov	r2, r1
 80037b2:	4402      	add	r2, r0
 80037b4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80037b8:	74c3      	strb	r3, [r0, #19]
 80037ba:	e7d6      	b.n	800376a <do_state_setup+0x4a>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 80037bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80037c0:	008a      	lsls	r2, r1, #2
 80037c2:	4402      	add	r2, r0
 80037c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80037c8:	3a02      	subs	r2, #2
 80037ca:	2a07      	cmp	r2, #7
 80037cc:	d8cd      	bhi.n	800376a <do_state_setup+0x4a>
 80037ce:	a101      	add	r1, pc, #4	; (adr r1, 80037d4 <do_state_setup+0xb4>)
 80037d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80037d4:	080037f5 	.word	0x080037f5
 80037d8:	0800376b 	.word	0x0800376b
 80037dc:	080037fb 	.word	0x080037fb
 80037e0:	08003801 	.word	0x08003801
 80037e4:	0800376b 	.word	0x0800376b
 80037e8:	0800376b 	.word	0x0800376b
 80037ec:	08003839 	.word	0x08003839
 80037f0:	08003873 	.word	0x08003873
						sendErrors(data);
 80037f4:	f7ff fcf0 	bl	80031d8 <sendErrors>
						break;
 80037f8:	e7b7      	b.n	800376a <do_state_setup+0x4a>
						shutdown(data);
 80037fa:	f7ff fdbf 	bl	800337c <shutdown>
						break;
 80037fe:	e7b4      	b.n	800376a <do_state_setup+0x4a>
						if (data->inverterSx == true && data->inverterDx == true && data->breakingPedal == true && data->requestOfShutdown == false){
 8003800:	78c2      	ldrb	r2, [r0, #3]
 8003802:	2a00      	cmp	r2, #0
 8003804:	d0b1      	beq.n	800376a <do_state_setup+0x4a>
 8003806:	7902      	ldrb	r2, [r0, #4]
 8003808:	2a00      	cmp	r2, #0
 800380a:	d0ae      	beq.n	800376a <do_state_setup+0x4a>
 800380c:	7882      	ldrb	r2, [r0, #2]
 800380e:	2a00      	cmp	r2, #0
 8003810:	d0ab      	beq.n	800376a <do_state_setup+0x4a>
 8003812:	7942      	ldrb	r2, [r0, #5]
 8003814:	2a00      	cmp	r2, #0
 8003816:	d1a8      	bne.n	800376a <do_state_setup+0x4a>
							data->go = true;
 8003818:	2201      	movs	r2, #1
 800381a:	7042      	strb	r2, [r0, #1]
							if (data->fifoData[data->dataCounterDown].RxData[1] == 0xEC){
 800381c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003820:	009a      	lsls	r2, r3, #2
 8003822:	4402      	add	r2, r0
 8003824:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8003828:	2bec      	cmp	r3, #236	; 0xec
 800382a:	d002      	beq.n	8003832 <do_state_setup+0x112>
								data->powerRequested = data->fifoData[data->dataCounterDown].RxData[1];
 800382c:	f880 34f0 	strb.w	r3, [r0, #1264]	; 0x4f0
 8003830:	e79b      	b.n	800376a <do_state_setup+0x4a>
								data->powerRequested = -20;
 8003832:	f880 34f0 	strb.w	r3, [r0, #1264]	; 0x4f0
 8003836:	e798      	b.n	800376a <do_state_setup+0x4a>
						if (data->invLeftTemp < 80){
 8003838:	f8b0 34d6 	ldrh.w	r3, [r0, #1238]	; 0x4d6
 800383c:	2b4f      	cmp	r3, #79	; 0x4f
 800383e:	d894      	bhi.n	800376a <do_state_setup+0x4a>
							canSendMSGInit(canSendMSG);
 8003840:	4c87      	ldr	r4, [pc, #540]	; (8003a60 <do_state_setup+0x340>)
 8003842:	4620      	mov	r0, r4
 8003844:	f7ff f9af 	bl	8002ba6 <canSendMSGInit>
							canSendMSG[0] = 0x51;
 8003848:	2351      	movs	r3, #81	; 0x51
 800384a:	7023      	strb	r3, [r4, #0]
							canSendMSG[1] = 0x08;
 800384c:	2608      	movs	r6, #8
 800384e:	7066      	strb	r6, [r4, #1]
							CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8003850:	4632      	mov	r2, r6
 8003852:	4621      	mov	r1, r4
 8003854:	f240 2001 	movw	r0, #513	; 0x201
 8003858:	f7ff f8ec 	bl	8002a34 <CAN_Send>
							canSendMSG[0] = 0x3D;
 800385c:	233d      	movs	r3, #61	; 0x3d
 800385e:	7023      	strb	r3, [r4, #0]
							canSendMSG[1] = 0xD8;
 8003860:	23d8      	movs	r3, #216	; 0xd8
 8003862:	7063      	strb	r3, [r4, #1]
							CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8003864:	4632      	mov	r2, r6
 8003866:	4621      	mov	r1, r4
 8003868:	f240 2001 	movw	r0, #513	; 0x201
 800386c:	f7ff f8e2 	bl	8002a34 <CAN_Send>
 8003870:	e77b      	b.n	800376a <do_state_setup+0x4a>
						if (data->invRightTemp < 80){
 8003872:	f8b0 34d8 	ldrh.w	r3, [r0, #1240]	; 0x4d8
 8003876:	2b4f      	cmp	r3, #79	; 0x4f
 8003878:	f63f af77 	bhi.w	800376a <do_state_setup+0x4a>
							canSendMSGInit(canSendMSG);
 800387c:	4c78      	ldr	r4, [pc, #480]	; (8003a60 <do_state_setup+0x340>)
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff f991 	bl	8002ba6 <canSendMSGInit>
							canSendMSG[0] = 0x51;
 8003884:	2351      	movs	r3, #81	; 0x51
 8003886:	7023      	strb	r3, [r4, #0]
							canSendMSG[1] = 0x08;
 8003888:	2608      	movs	r6, #8
 800388a:	7066      	strb	r6, [r4, #1]
							CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 800388c:	4632      	mov	r2, r6
 800388e:	4621      	mov	r1, r4
 8003890:	f240 2002 	movw	r0, #514	; 0x202
 8003894:	f7ff f8ce 	bl	8002a34 <CAN_Send>
							canSendMSG[0] = 0x3D;
 8003898:	233d      	movs	r3, #61	; 0x3d
 800389a:	7023      	strb	r3, [r4, #0]
							canSendMSG[1] = 0xD8;
 800389c:	23d8      	movs	r3, #216	; 0xd8
 800389e:	7063      	strb	r3, [r4, #1]
							CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 80038a0:	4632      	mov	r2, r6
 80038a2:	4621      	mov	r1, r4
 80038a4:	f240 2002 	movw	r0, #514	; 0x202
 80038a8:	f7ff f8c4 	bl	8002a34 <CAN_Send>
 80038ac:	e75d      	b.n	800376a <do_state_setup+0x4a>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 80038ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80038b2:	009a      	lsls	r2, r3, #2
 80038b4:	4402      	add	r2, r0
 80038b6:	f892 3020 	ldrb.w	r3, [r2, #32]
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d005      	beq.n	80038ca <do_state_setup+0x1aa>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	f47f af53 	bne.w	800376a <do_state_setup+0x4a>
						data->tractiveSystem = false;
 80038c4:	2300      	movs	r3, #0
 80038c6:	7003      	strb	r3, [r0, #0]
						break;
 80038c8:	e74f      	b.n	800376a <do_state_setup+0x4a>
						data->tractiveSystem = false;
 80038ca:	2300      	movs	r3, #0
 80038cc:	7003      	strb	r3, [r0, #0]
						break;
 80038ce:	e74c      	b.n	800376a <do_state_setup+0x4a>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 80038d0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80038d4:	008a      	lsls	r2, r1, #2
 80038d6:	4402      	add	r2, r0
 80038d8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80038dc:	2a01      	cmp	r2, #1
 80038de:	d013      	beq.n	8003908 <do_state_setup+0x1e8>
 80038e0:	2a02      	cmp	r2, #2
 80038e2:	f47f af42 	bne.w	800376a <do_state_setup+0x4a>
						data->breakingPedal = data->fifoData[data->dataCounterDown].RxData[1];
 80038e6:	005a      	lsls	r2, r3, #1
 80038e8:	18d0      	adds	r0, r2, r3
 80038ea:	0081      	lsls	r1, r0, #2
 80038ec:	4608      	mov	r0, r1
 80038ee:	4429      	add	r1, r5
 80038f0:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 80038f4:	3100      	adds	r1, #0
 80038f6:	bf18      	it	ne
 80038f8:	2101      	movne	r1, #1
 80038fa:	70a9      	strb	r1, [r5, #2]
						data->scs[BSE] = data->fifoData[data->dataCounterDown].RxData[6];
 80038fc:	4602      	mov	r2, r0
 80038fe:	442a      	add	r2, r5
 8003900:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8003904:	74ab      	strb	r3, [r5, #18]
						break;
 8003906:	e730      	b.n	800376a <do_state_setup+0x4a>
						data->scs[APPS] = data->fifoData[data->dataCounterDown].RxData[6];
 8003908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800390c:	009a      	lsls	r2, r3, #2
 800390e:	4402      	add	r2, r0
 8003910:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8003914:	7443      	strb	r3, [r0, #17]
						break;
 8003916:	e728      	b.n	800376a <do_state_setup+0x4a>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003918:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800391c:	008a      	lsls	r2, r1, #2
 800391e:	4402      	add	r2, r0
 8003920:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003924:	2a4a      	cmp	r2, #74	; 0x4a
 8003926:	d016      	beq.n	8003956 <do_state_setup+0x236>
 8003928:	2ad8      	cmp	r2, #216	; 0xd8
 800392a:	f47f af1e 	bne.w	800376a <do_state_setup+0x4a>
						if (data->fifoData[data->dataCounterDown].RxData[2] == 0x0C && data->requestOfShutdown == false){
 800392e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	4402      	add	r2, r0
 8003936:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d101      	bne.n	8003942 <do_state_setup+0x222>
 800393e:	7943      	ldrb	r3, [r0, #5]
 8003940:	b32b      	cbz	r3, 800398e <do_state_setup+0x26e>
							canSendMSG[0] = 0x0C;
 8003942:	4947      	ldr	r1, [pc, #284]	; (8003a60 <do_state_setup+0x340>)
 8003944:	230c      	movs	r3, #12
 8003946:	700b      	strb	r3, [r1, #0]
							CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8003948:	2208      	movs	r2, #8
 800394a:	2055      	movs	r0, #85	; 0x55
 800394c:	f7ff f872 	bl	8002a34 <CAN_Send>
							data->inverterSx = false;
 8003950:	2300      	movs	r3, #0
 8003952:	70eb      	strb	r3, [r5, #3]
 8003954:	e709      	b.n	800376a <do_state_setup+0x4a>
						data->invLeftTemp = (data->fifoData[data->dataCounterDown].RxData[2] * 256 + data->fifoData[data->dataCounterDown].RxData[1] - 15797) / 112.1182;
 8003956:	005a      	lsls	r2, r3, #1
 8003958:	18d0      	adds	r0, r2, r3
 800395a:	0081      	lsls	r1, r0, #2
 800395c:	4608      	mov	r0, r1
 800395e:	4429      	add	r1, r5
 8003960:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8003964:	4602      	mov	r2, r0
 8003966:	442a      	add	r2, r5
 8003968:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
 800396c:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 8003970:	f5a0 5076 	sub.w	r0, r0, #15744	; 0x3d80
 8003974:	3835      	subs	r0, #53	; 0x35
 8003976:	f7fc fdf5 	bl	8000564 <__aeabi_i2d>
 800397a:	a337      	add	r3, pc, #220	; (adr r3, 8003a58 <do_state_setup+0x338>)
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f7fc ff84 	bl	800088c <__aeabi_ddiv>
 8003984:	f7fd f91a 	bl	8000bbc <__aeabi_d2uiz>
 8003988:	f8a5 04d6 	strh.w	r0, [r5, #1238]	; 0x4d6
						break;
 800398c:	e6ed      	b.n	800376a <do_state_setup+0x4a>
							canSendMSG[0] = 0x08;
 800398e:	4934      	ldr	r1, [pc, #208]	; (8003a60 <do_state_setup+0x340>)
 8003990:	2208      	movs	r2, #8
 8003992:	700a      	strb	r2, [r1, #0]
							CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8003994:	2055      	movs	r0, #85	; 0x55
 8003996:	f7ff f84d 	bl	8002a34 <CAN_Send>
							data->inverterSx = true;
 800399a:	2301      	movs	r3, #1
 800399c:	70eb      	strb	r3, [r5, #3]
 800399e:	e6e4      	b.n	800376a <do_state_setup+0x4a>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 80039a0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80039a4:	008a      	lsls	r2, r1, #2
 80039a6:	4402      	add	r2, r0
 80039a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80039ac:	2a4a      	cmp	r2, #74	; 0x4a
 80039ae:	d016      	beq.n	80039de <do_state_setup+0x2be>
 80039b0:	2ad8      	cmp	r2, #216	; 0xd8
 80039b2:	f47f aeda 	bne.w	800376a <do_state_setup+0x4a>
						if (data->fifoData[data->dataCounterDown].RxData[2] == 0x0C && data->requestOfShutdown == false){
 80039b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	4402      	add	r2, r0
 80039be:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d101      	bne.n	80039ca <do_state_setup+0x2aa>
 80039c6:	7943      	ldrb	r3, [r0, #5]
 80039c8:	b32b      	cbz	r3, 8003a16 <do_state_setup+0x2f6>
							canSendMSG[0] = 0x0D;
 80039ca:	4925      	ldr	r1, [pc, #148]	; (8003a60 <do_state_setup+0x340>)
 80039cc:	230d      	movs	r3, #13
 80039ce:	700b      	strb	r3, [r1, #0]
							CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 80039d0:	2208      	movs	r2, #8
 80039d2:	2055      	movs	r0, #85	; 0x55
 80039d4:	f7ff f82e 	bl	8002a34 <CAN_Send>
							data->inverterDx = false;
 80039d8:	2300      	movs	r3, #0
 80039da:	712b      	strb	r3, [r5, #4]
 80039dc:	e6c5      	b.n	800376a <do_state_setup+0x4a>
						data->invRightTemp = (data->fifoData[data->dataCounterDown].RxData[2] * 256 + data->fifoData[data->dataCounterDown].RxData[1] - 15797) / 112.1182;
 80039de:	005a      	lsls	r2, r3, #1
 80039e0:	18d0      	adds	r0, r2, r3
 80039e2:	0081      	lsls	r1, r0, #2
 80039e4:	4608      	mov	r0, r1
 80039e6:	4429      	add	r1, r5
 80039e8:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 80039ec:	4602      	mov	r2, r0
 80039ee:	442a      	add	r2, r5
 80039f0:	f892 0021 	ldrb.w	r0, [r2, #33]	; 0x21
 80039f4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
 80039f8:	f5a0 5076 	sub.w	r0, r0, #15744	; 0x3d80
 80039fc:	3835      	subs	r0, #53	; 0x35
 80039fe:	f7fc fdb1 	bl	8000564 <__aeabi_i2d>
 8003a02:	a315      	add	r3, pc, #84	; (adr r3, 8003a58 <do_state_setup+0x338>)
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc ff40 	bl	800088c <__aeabi_ddiv>
 8003a0c:	f7fd f8d6 	bl	8000bbc <__aeabi_d2uiz>
 8003a10:	f8a5 04d8 	strh.w	r0, [r5, #1240]	; 0x4d8
						break;
 8003a14:	e6a9      	b.n	800376a <do_state_setup+0x4a>
							canSendMSG[0] = 0x09;
 8003a16:	4912      	ldr	r1, [pc, #72]	; (8003a60 <do_state_setup+0x340>)
 8003a18:	2309      	movs	r3, #9
 8003a1a:	700b      	strb	r3, [r1, #0]
							CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	2055      	movs	r0, #85	; 0x55
 8003a20:	f7ff f808 	bl	8002a34 <CAN_Send>
							data->inverterDx = true;
 8003a24:	2301      	movs	r3, #1
 8003a26:	712b      	strb	r3, [r5, #4]
 8003a28:	e69f      	b.n	800376a <do_state_setup+0x4a>
	for (int i = 0; i < NUM_SCS; i++){
 8003a2a:	3401      	adds	r4, #1
 8003a2c:	2c08      	cmp	r4, #8
 8003a2e:	dc08      	bgt.n	8003a42 <do_state_setup+0x322>
		if (data->scs[i] != 0){
 8003a30:	192b      	adds	r3, r5, r4
 8003a32:	7c5b      	ldrb	r3, [r3, #17]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0f8      	beq.n	8003a2a <do_state_setup+0x30a>
			shutdownErrors(data, ID_STEERING_WHEEL);
 8003a38:	21a0      	movs	r1, #160	; 0xa0
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	f7ff fccc 	bl	80033d8 <shutdownErrors>
 8003a40:	e7f3      	b.n	8003a2a <do_state_setup+0x30a>
	if (data->tractiveSystem == false){
 8003a42:	782b      	ldrb	r3, [r5, #0]
 8003a44:	b11b      	cbz	r3, 8003a4e <do_state_setup+0x32e>
	if (data->go == true){
 8003a46:	786b      	ldrb	r3, [r5, #1]
 8003a48:	b11b      	cbz	r3, 8003a52 <do_state_setup+0x332>
		return STATE_RUN;
 8003a4a:	2003      	movs	r0, #3
 8003a4c:	e000      	b.n	8003a50 <do_state_setup+0x330>
		return STATE_IDLE;
 8003a4e:	2001      	movs	r0, #1
}
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
	return STATE_SETUP;
 8003a52:	2002      	movs	r0, #2
 8003a54:	e7fc      	b.n	8003a50 <do_state_setup+0x330>
 8003a56:	bf00      	nop
 8003a58:	96bb98c8 	.word	0x96bb98c8
 8003a5c:	405c0790 	.word	0x405c0790
 8003a60:	20000758 	.word	0x20000758
 8003a64:	51eb851f 	.word	0x51eb851f

08003a68 <checkValues>:

void checkValues(state_global_data_t *data){
 8003a68:	b510      	push	{r4, lr}
 8003a6a:	4604      	mov	r4, r0
	/* This function is used to check data coming from inverter.
	 * The scs array is used to keep in memory the situation of the errors. */
	if ((data->motLeftTemp - 9393.9) / 55.1 > 115){
 8003a6c:	f8b0 04d2 	ldrh.w	r0, [r0, #1234]	; 0x4d2
 8003a70:	f7fc fd78 	bl	8000564 <__aeabi_i2d>
 8003a74:	a336      	add	r3, pc, #216	; (adr r3, 8003b50 <checkValues+0xe8>)
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	f7fc fc25 	bl	80002c8 <__aeabi_dsub>
 8003a7e:	a336      	add	r3, pc, #216	; (adr r3, 8003b58 <checkValues+0xf0>)
 8003a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a84:	f7fc ff02 	bl	800088c <__aeabi_ddiv>
 8003a88:	a335      	add	r3, pc, #212	; (adr r3, 8003b60 <checkValues+0xf8>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f7fd f863 	bl	8000b58 <__aeabi_dcmpgt>
 8003a92:	b108      	cbz	r0, 8003a98 <checkValues+0x30>
		data->scs[MOT_TEMP_SX] = 0x01;
 8003a94:	2301      	movs	r3, #1
 8003a96:	7523      	strb	r3, [r4, #20]
	}
	if ((data->motRightTemp - 9393.9) / 55.1 > 115){
 8003a98:	f8b4 04d4 	ldrh.w	r0, [r4, #1236]	; 0x4d4
 8003a9c:	f7fc fd62 	bl	8000564 <__aeabi_i2d>
 8003aa0:	a32b      	add	r3, pc, #172	; (adr r3, 8003b50 <checkValues+0xe8>)
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f7fc fc0f 	bl	80002c8 <__aeabi_dsub>
 8003aaa:	a32b      	add	r3, pc, #172	; (adr r3, 8003b58 <checkValues+0xf0>)
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f7fc feec 	bl	800088c <__aeabi_ddiv>
 8003ab4:	a32a      	add	r3, pc, #168	; (adr r3, 8003b60 <checkValues+0xf8>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f7fd f84d 	bl	8000b58 <__aeabi_dcmpgt>
 8003abe:	b108      	cbz	r0, 8003ac4 <checkValues+0x5c>
		data->scs[MOT_TEMP_DX] = 0x01;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	7563      	strb	r3, [r4, #21]
	}
	if ((data->invLeftTemp - 15797) / 112.12 > 80){
 8003ac4:	f8b4 04d6 	ldrh.w	r0, [r4, #1238]	; 0x4d6
 8003ac8:	f5a0 5076 	sub.w	r0, r0, #15744	; 0x3d80
 8003acc:	3835      	subs	r0, #53	; 0x35
 8003ace:	f7fc fd49 	bl	8000564 <__aeabi_i2d>
 8003ad2:	a31b      	add	r3, pc, #108	; (adr r3, 8003b40 <checkValues+0xd8>)
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f7fc fed8 	bl	800088c <__aeabi_ddiv>
 8003adc:	2200      	movs	r2, #0
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <checkValues+0xe0>)
 8003ae0:	f7fd f83a 	bl	8000b58 <__aeabi_dcmpgt>
 8003ae4:	b108      	cbz	r0, 8003aea <checkValues+0x82>
		data->scs[INV_TEMP_SX] = 0x01;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75a3      	strb	r3, [r4, #22]
	}
	if ((data->invRightTemp - 15797) / 112.12 > 80){
 8003aea:	f8b4 04d8 	ldrh.w	r0, [r4, #1240]	; 0x4d8
 8003aee:	f5a0 5076 	sub.w	r0, r0, #15744	; 0x3d80
 8003af2:	3835      	subs	r0, #53	; 0x35
 8003af4:	f7fc fd36 	bl	8000564 <__aeabi_i2d>
 8003af8:	a311      	add	r3, pc, #68	; (adr r3, 8003b40 <checkValues+0xd8>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	f7fc fec5 	bl	800088c <__aeabi_ddiv>
 8003b02:	2200      	movs	r2, #0
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <checkValues+0xe0>)
 8003b06:	f7fd f827 	bl	8000b58 <__aeabi_dcmpgt>
 8003b0a:	b108      	cbz	r0, 8003b10 <checkValues+0xa8>
		data->scs[INV_TEMP_DX] = 0x01;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	75e3      	strb	r3, [r4, #23]
	}
	if (data->invLeftCur * 200 / 560 > 235){
 8003b10:	f8b4 24de 	ldrh.w	r2, [r4, #1246]	; 0x4de
 8003b14:	23c8      	movs	r3, #200	; 0xc8
 8003b16:	fb03 f302 	mul.w	r3, r3, r2
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <checkValues+0xe4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	dd01      	ble.n	8003b24 <checkValues+0xbc>
		data->scs[INV_CUR_SX] = 0x01;
 8003b20:	2301      	movs	r3, #1
 8003b22:	7623      	strb	r3, [r4, #24]
	}
	if (data->invRightCur * 200 / 560 > 235){
 8003b24:	f8b4 24e0 	ldrh.w	r2, [r4, #1248]	; 0x4e0
 8003b28:	23c8      	movs	r3, #200	; 0xc8
 8003b2a:	fb03 f302 	mul.w	r3, r3, r2
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <checkValues+0xe4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	dd01      	ble.n	8003b38 <checkValues+0xd0>
		data->scs[INV_CUR_DX] = 0x01;
 8003b34:	2301      	movs	r3, #1
 8003b36:	7663      	strb	r3, [r4, #25]
	}
}
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	bf00      	nop
 8003b3c:	f3af 8000 	nop.w
 8003b40:	147ae148 	.word	0x147ae148
 8003b44:	405c07ae 	.word	0x405c07ae
 8003b48:	40540000 	.word	0x40540000
 8003b4c:	0002043f 	.word	0x0002043f
 8003b50:	33333333 	.word	0x33333333
 8003b54:	40c258f3 	.word	0x40c258f3
 8003b58:	cccccccd 	.word	0xcccccccd
 8003b5c:	404b8ccc 	.word	0x404b8ccc
 8003b60:	00000000 	.word	0x00000000
 8003b64:	405cc000 	.word	0x405cc000

08003b68 <transmission>:

void transmission(state_global_data_t *data){
 8003b68:	b5d0      	push	{r4, r6, r7, lr}
 8003b6a:	4604      	mov	r4, r0
	 * The condition is a recommendation coming from the code of rules, is to be
	 * sure that the driver isn't pressing breaking pedal and accelerator pedal
	 * both.
	 * Current requested are opposite because of the resolver positioned in
	 * opposite direction (right and left). */
	canSendMSGInit(canSendMSG);
 8003b6c:	483a      	ldr	r0, [pc, #232]	; (8003c58 <transmission+0xf0>)
 8003b6e:	f7ff f81a 	bl	8002ba6 <canSendMSGInit>
	uint8_t negFirstByte;
	uint8_t negSecondByte;
	int negativeCurrentToInverter;

	/* TODO: check rules */
	if((data->breakingPedal == 1 && data->accelerator > 25) || (data->requestOfShutdown == true)){
 8003b72:	78a3      	ldrb	r3, [r4, #2]
 8003b74:	b11b      	cbz	r3, 8003b7e <transmission+0x16>
 8003b76:	f894 34d0 	ldrb.w	r3, [r4, #1232]	; 0x4d0
 8003b7a:	2b19      	cmp	r3, #25
 8003b7c:	d801      	bhi.n	8003b82 <transmission+0x1a>
 8003b7e:	7963      	ldrb	r3, [r4, #5]
 8003b80:	b193      	cbz	r3, 8003ba8 <transmission+0x40>
		data->curRequested = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec

		canSendMSG[0] = 0x90;
 8003b88:	4c33      	ldr	r4, [pc, #204]	; (8003c58 <transmission+0xf0>)
 8003b8a:	2390      	movs	r3, #144	; 0x90
 8003b8c:	7023      	strb	r3, [r4, #0]
		CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8003b8e:	2208      	movs	r2, #8
 8003b90:	4621      	mov	r1, r4
 8003b92:	f240 2001 	movw	r0, #513	; 0x201
 8003b96:	f7fe ff4d 	bl	8002a34 <CAN_Send>
		CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	f240 2002 	movw	r0, #514	; 0x202
 8003ba2:	f7fe ff47 	bl	8002a34 <CAN_Send>
		canSendMSG[0] = 0x90;
		canSendMSG[1] = negFirstByte;
		canSendMSG[2] = negSecondByte;
		CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
	}
}
 8003ba6:	bdd0      	pop	{r4, r6, r7, pc}
		int currentToInverter = ((32767 / 424.2) * (120 / 0.8) * 1.414) * (data->accelerator / 100.0) * (data->powerRequested / 100.0);
 8003ba8:	f894 04d0 	ldrb.w	r0, [r4, #1232]	; 0x4d0
 8003bac:	f7fc fcda 	bl	8000564 <__aeabi_i2d>
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <transmission+0xf4>)
 8003bb4:	f7fc fe6a 	bl	800088c <__aeabi_ddiv>
 8003bb8:	a325      	add	r3, pc, #148	; (adr r3, 8003c50 <transmission+0xe8>)
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f7fc fd3b 	bl	8000638 <__aeabi_dmul>
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	460f      	mov	r7, r1
 8003bc6:	f994 04f0 	ldrsb.w	r0, [r4, #1264]	; 0x4f0
 8003bca:	f7fc fccb 	bl	8000564 <__aeabi_i2d>
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4b22      	ldr	r3, [pc, #136]	; (8003c5c <transmission+0xf4>)
 8003bd2:	f7fc fe5b 	bl	800088c <__aeabi_ddiv>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4630      	mov	r0, r6
 8003bdc:	4639      	mov	r1, r7
 8003bde:	f7fc fd2b 	bl	8000638 <__aeabi_dmul>
 8003be2:	f7fc ffc3 	bl	8000b6c <__aeabi_d2iz>
 8003be6:	4604      	mov	r4, r0
		firstByte = currentToInverter % 256;
 8003be8:	4242      	negs	r2, r0
 8003bea:	b2c3      	uxtb	r3, r0
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	bf58      	it	pl
 8003bf0:	4253      	negpl	r3, r2
 8003bf2:	b2db      	uxtb	r3, r3
		secondByte = currentToInverter / 256;
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	db22      	blt.n	8003c40 <transmission+0xd8>
 8003bfa:	f3c2 2207 	ubfx	r2, r2, #8, #8
		canSendMSG[0] = 0x90;
 8003bfe:	4916      	ldr	r1, [pc, #88]	; (8003c58 <transmission+0xf0>)
 8003c00:	2090      	movs	r0, #144	; 0x90
 8003c02:	7008      	strb	r0, [r1, #0]
		canSendMSG[1] = firstByte;
 8003c04:	704b      	strb	r3, [r1, #1]
		canSendMSG[2] = secondByte;
 8003c06:	708a      	strb	r2, [r1, #2]
		CAN_Send(ID_ASK_INV_SX, canSendMSG, MSG_LENGHT);
 8003c08:	2208      	movs	r2, #8
 8003c0a:	f240 2001 	movw	r0, #513	; 0x201
 8003c0e:	f7fe ff11 	bl	8002a34 <CAN_Send>
		negativeCurrentToInverter = -currentToInverter;
 8003c12:	4264      	negs	r4, r4
		negFirstByte = negativeCurrentToInverter % 256;
 8003c14:	4262      	negs	r2, r4
 8003c16:	b2e3      	uxtb	r3, r4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	bf58      	it	pl
 8003c1c:	4253      	negpl	r3, r2
 8003c1e:	b2db      	uxtb	r3, r3
		negSecondByte = negativeCurrentToInverter / 256;
 8003c20:	4622      	mov	r2, r4
 8003c22:	2c00      	cmp	r4, #0
 8003c24:	db0f      	blt.n	8003c46 <transmission+0xde>
 8003c26:	f3c2 2207 	ubfx	r2, r2, #8, #8
		canSendMSG[0] = 0x90;
 8003c2a:	490b      	ldr	r1, [pc, #44]	; (8003c58 <transmission+0xf0>)
 8003c2c:	2090      	movs	r0, #144	; 0x90
 8003c2e:	7008      	strb	r0, [r1, #0]
		canSendMSG[1] = negFirstByte;
 8003c30:	704b      	strb	r3, [r1, #1]
		canSendMSG[2] = negSecondByte;
 8003c32:	708a      	strb	r2, [r1, #2]
		CAN_Send(ID_ASK_INV_DX, canSendMSG, MSG_LENGHT);
 8003c34:	2208      	movs	r2, #8
 8003c36:	f240 2002 	movw	r0, #514	; 0x202
 8003c3a:	f7fe fefb 	bl	8002a34 <CAN_Send>
}
 8003c3e:	e7b2      	b.n	8003ba6 <transmission+0x3e>
		secondByte = currentToInverter / 256;
 8003c40:	f100 02ff 	add.w	r2, r0, #255	; 0xff
 8003c44:	e7d9      	b.n	8003bfa <transmission+0x92>
		negSecondByte = negativeCurrentToInverter / 256;
 8003c46:	f104 02ff 	add.w	r2, r4, #255	; 0xff
 8003c4a:	e7ec      	b.n	8003c26 <transmission+0xbe>
 8003c4c:	f3af 8000 	nop.w
 8003c50:	ffffffff 	.word	0xffffffff
 8003c54:	40cfffbf 	.word	0x40cfffbf
 8003c58:	20000758 	.word	0x20000758
 8003c5c:	40590000 	.word	0x40590000

08003c60 <do_state_run>:
state_t do_state_run (state_global_data_t *data){
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4604      	mov	r4, r0
	if (data->dataCounterDown != data->dataCounterUp){
 8003c64:	f8b0 34ce 	ldrh.w	r3, [r0, #1230]	; 0x4ce
 8003c68:	f8b0 24cc 	ldrh.w	r2, [r0, #1228]	; 0x4cc
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d027      	beq.n	8003cc0 <do_state_run+0x60>
		switch (data->fifoData[data->dataCounterDown].idsave){
 8003c70:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003c74:	008a      	lsls	r2, r1, #2
 8003c76:	4402      	add	r2, r0
 8003c78:	69d2      	ldr	r2, [r2, #28]
 8003c7a:	2ab0      	cmp	r2, #176	; 0xb0
 8003c7c:	d06a      	beq.n	8003d54 <do_state_run+0xf4>
 8003c7e:	dc30      	bgt.n	8003ce2 <do_state_run+0x82>
 8003c80:	2aa0      	cmp	r2, #160	; 0xa0
 8003c82:	d048      	beq.n	8003d16 <do_state_run+0xb6>
 8003c84:	2aaa      	cmp	r2, #170	; 0xaa
 8003c86:	d07f      	beq.n	8003d88 <do_state_run+0x128>
 8003c88:	2a10      	cmp	r2, #16
 8003c8a:	d10c      	bne.n	8003ca6 <do_state_run+0x46>
				canSendMSGInit(canSendMSG);
 8003c8c:	4d86      	ldr	r5, [pc, #536]	; (8003ea8 <do_state_run+0x248>)
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f7fe ff89 	bl	8002ba6 <canSendMSGInit>
				canSendMSG[0] = 0x10;
 8003c94:	2310      	movs	r3, #16
 8003c96:	702b      	strb	r3, [r5, #0]
				canSendMSG[1] = 0x03;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	706b      	strb	r3, [r5, #1]
				CAN_Send(ID_ECU, canSendMSG, MSG_LENGHT);
 8003c9c:	2208      	movs	r2, #8
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	2055      	movs	r0, #85	; 0x55
 8003ca2:	f7fe fec7 	bl	8002a34 <CAN_Send>
		data->dataCounterDown += 1;
 8003ca6:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
 8003caa:	3301      	adds	r3, #1
 8003cac:	b29a      	uxth	r2, r3
		data->dataCounterDown = data->dataCounterDown % NUM_DATA;
 8003cae:	4b7f      	ldr	r3, [pc, #508]	; (8003eac <do_state_run+0x24c>)
 8003cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	2164      	movs	r1, #100	; 0x64
 8003cb8:	fb01 2313 	mls	r3, r1, r3, r2
 8003cbc:	f8a4 34ce 	strh.w	r3, [r4, #1230]	; 0x4ce
	if (data->writeInCan){
 8003cc0:	79a3      	ldrb	r3, [r4, #6]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 80e5 	bne.w	8003e92 <do_state_run+0x232>
	checkValues(data);
 8003cc8:	4620      	mov	r0, r4
 8003cca:	f7ff fecd 	bl	8003a68 <checkValues>
	if (data->tractiveSystem == false){
 8003cce:	7823      	ldrb	r3, [r4, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80e4 	beq.w	8003e9e <do_state_run+0x23e>
	if (data->go == false){
 8003cd6:	7863      	ldrb	r3, [r4, #1]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 80e2 	bne.w	8003ea2 <do_state_run+0x242>
		return STATE_SETUP;
 8003cde:	2002      	movs	r0, #2
 8003ce0:	e0de      	b.n	8003ea0 <do_state_run+0x240>
		switch (data->fifoData[data->dataCounterDown].idsave){
 8003ce2:	f240 1181 	movw	r1, #385	; 0x181
 8003ce6:	428a      	cmp	r2, r1
 8003ce8:	f000 8081 	beq.w	8003dee <do_state_run+0x18e>
 8003cec:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8003cf0:	f000 80a6 	beq.w	8003e40 <do_state_run+0x1e0>
 8003cf4:	2aff      	cmp	r2, #255	; 0xff
 8003cf6:	d1d6      	bne.n	8003ca6 <do_state_run+0x46>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003cf8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003cfc:	008a      	lsls	r2, r1, #2
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4402      	add	r2, r0
 8003d02:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d06:	2a01      	cmp	r2, #1
 8003d08:	d1cd      	bne.n	8003ca6 <do_state_run+0x46>
						data->scs[LV] = data->fifoData[data->dataCounterDown].RxData[5];
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	4402      	add	r2, r0
 8003d0e:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8003d12:	74c3      	strb	r3, [r0, #19]
						break;
 8003d14:	e7c7      	b.n	8003ca6 <do_state_run+0x46>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003d16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d1a:	009a      	lsls	r2, r3, #2
 8003d1c:	4402      	add	r2, r0
 8003d1e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d004      	beq.n	8003d30 <do_state_run+0xd0>
 8003d26:	2b06      	cmp	r3, #6
 8003d28:	d1bd      	bne.n	8003ca6 <do_state_run+0x46>
						data->go = false;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	7043      	strb	r3, [r0, #1]
						break;
 8003d2e:	e7ba      	b.n	8003ca6 <do_state_run+0x46>
						sendErrors(data);
 8003d30:	f7ff fa52 	bl	80031d8 <sendErrors>
						if (data->fifoData[data->dataCounterDown].RxData[1] == 0xEC){
 8003d34:	f8b4 34ce 	ldrh.w	r3, [r4, #1230]	; 0x4ce
 8003d38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d3c:	009a      	lsls	r2, r3, #2
 8003d3e:	4422      	add	r2, r4
 8003d40:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8003d44:	2bec      	cmp	r3, #236	; 0xec
 8003d46:	d002      	beq.n	8003d4e <do_state_run+0xee>
							data->powerRequested = data->fifoData[data->dataCounterDown].RxData[1];
 8003d48:	f884 34f0 	strb.w	r3, [r4, #1264]	; 0x4f0
 8003d4c:	e7ab      	b.n	8003ca6 <do_state_run+0x46>
							data->powerRequested = -20;
 8003d4e:	f884 34f0 	strb.w	r3, [r4, #1264]	; 0x4f0
 8003d52:	e7a8      	b.n	8003ca6 <do_state_run+0x46>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003d54:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003d58:	008a      	lsls	r2, r1, #2
 8003d5a:	4402      	add	r2, r0
 8003d5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d60:	2a01      	cmp	r2, #1
 8003d62:	d009      	beq.n	8003d78 <do_state_run+0x118>
 8003d64:	2a02      	cmp	r2, #2
 8003d66:	d19e      	bne.n	8003ca6 <do_state_run+0x46>
						data->scs[BSE] = data->fifoData[data->dataCounterDown].RxData[6];
 8003d68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d6c:	009a      	lsls	r2, r3, #2
 8003d6e:	4402      	add	r2, r0
 8003d70:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8003d74:	7483      	strb	r3, [r0, #18]
						break;
 8003d76:	e796      	b.n	8003ca6 <do_state_run+0x46>
						data->scs[APPS] = data->fifoData[data->dataCounterDown].RxData[6];
 8003d78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d7c:	009a      	lsls	r2, r3, #2
 8003d7e:	4402      	add	r2, r0
 8003d80:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8003d84:	7443      	strb	r3, [r0, #17]
						break;
 8003d86:	e78e      	b.n	8003ca6 <do_state_run+0x46>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003d88:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003d8c:	008a      	lsls	r2, r1, #2
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4402      	add	r2, r0
 8003d92:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d96:	2a05      	cmp	r2, #5
 8003d98:	d015      	beq.n	8003dc6 <do_state_run+0x166>
 8003d9a:	2a08      	cmp	r2, #8
 8003d9c:	d023      	beq.n	8003de6 <do_state_run+0x186>
 8003d9e:	2a01      	cmp	r2, #1
 8003da0:	d181      	bne.n	8003ca6 <do_state_run+0x46>
						data->hvVol = ((data->fifoData[data->dataCounterDown].RxData[1] << 16) + (data->fifoData[data->dataCounterDown].RxData[2] << 8) + 0x00) / 10000;
 8003da2:	4608      	mov	r0, r1
 8003da4:	4421      	add	r1, r4
 8003da6:	f891 1021 	ldrb.w	r1, [r1, #33]	; 0x21
 8003daa:	4602      	mov	r2, r0
 8003dac:	4422      	add	r2, r4
 8003dae:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8003db8:	4a3d      	ldr	r2, [pc, #244]	; (8003eb0 <do_state_run+0x250>)
 8003dba:	fb82 2303 	smull	r2, r3, r2, r3
 8003dbe:	131b      	asrs	r3, r3, #12
 8003dc0:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
						break;
 8003dc4:	e76f      	b.n	8003ca6 <do_state_run+0x46>
						data->hvCur = (*(int16_t*) (data->fifoData[data->dataCounterDown].RxData+1))/10;
 8003dc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003dca:	009a      	lsls	r2, r3, #2
 8003dcc:	3218      	adds	r2, #24
 8003dce:	4402      	add	r2, r0
 8003dd0:	f9b2 3009 	ldrsh.w	r3, [r2, #9]
 8003dd4:	4a37      	ldr	r2, [pc, #220]	; (8003eb4 <do_state_run+0x254>)
 8003dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8003dda:	17db      	asrs	r3, r3, #31
 8003ddc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8003de0:	f8a0 34e8 	strh.w	r3, [r0, #1256]	; 0x4e8
						break;
 8003de4:	e75f      	b.n	8003ca6 <do_state_run+0x46>
						data->tractiveSystem = false;
 8003de6:	2300      	movs	r3, #0
 8003de8:	7003      	strb	r3, [r0, #0]
						data->go = false;
 8003dea:	7043      	strb	r3, [r0, #1]
						break;
 8003dec:	e75b      	b.n	8003ca6 <do_state_run+0x46>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003dee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003df2:	008a      	lsls	r2, r1, #2
 8003df4:	4611      	mov	r1, r2
 8003df6:	4402      	add	r2, r0
 8003df8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003dfc:	2a49      	cmp	r2, #73	; 0x49
 8003dfe:	d00f      	beq.n	8003e20 <do_state_run+0x1c0>
 8003e00:	2a4a      	cmp	r2, #74	; 0x4a
 8003e02:	f47f af50 	bne.w	8003ca6 <do_state_run+0x46>
						data->invLeftTemp = data->fifoData[data->dataCounterDown].RxData[2] * 256 + data->fifoData[data->dataCounterDown].RxData[1];
 8003e06:	4608      	mov	r0, r1
 8003e08:	4421      	add	r1, r4
 8003e0a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4422      	add	r2, r4
 8003e12:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8003e16:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003e1a:	f8a4 34d6 	strh.w	r3, [r4, #1238]	; 0x4d6
						break;
 8003e1e:	e742      	b.n	8003ca6 <do_state_run+0x46>
						data->motLeftTemp = data->fifoData[data->dataCounterDown].RxData[2] * 256 + data->fifoData[data->dataCounterDown].RxData[1];
 8003e20:	005a      	lsls	r2, r3, #1
 8003e22:	18d0      	adds	r0, r2, r3
 8003e24:	0081      	lsls	r1, r0, #2
 8003e26:	4608      	mov	r0, r1
 8003e28:	4421      	add	r1, r4
 8003e2a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4422      	add	r2, r4
 8003e32:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8003e36:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003e3a:	f8a4 34d2 	strh.w	r3, [r4, #1234]	; 0x4d2
						break;
 8003e3e:	e732      	b.n	8003ca6 <do_state_run+0x46>
				switch (data->fifoData[data->dataCounterDown].RxData[0]){
 8003e40:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003e44:	008a      	lsls	r2, r1, #2
 8003e46:	4611      	mov	r1, r2
 8003e48:	4402      	add	r2, r0
 8003e4a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003e4e:	2a49      	cmp	r2, #73	; 0x49
 8003e50:	d00f      	beq.n	8003e72 <do_state_run+0x212>
 8003e52:	2a4a      	cmp	r2, #74	; 0x4a
 8003e54:	f47f af27 	bne.w	8003ca6 <do_state_run+0x46>
						data->invRightTemp = data->fifoData[data->dataCounterDown].RxData[2] * 256 + data->fifoData[data->dataCounterDown].RxData[1];
 8003e58:	4608      	mov	r0, r1
 8003e5a:	4421      	add	r1, r4
 8003e5c:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8003e60:	4602      	mov	r2, r0
 8003e62:	4422      	add	r2, r4
 8003e64:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8003e68:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003e6c:	f8a4 34d8 	strh.w	r3, [r4, #1240]	; 0x4d8
						break;
 8003e70:	e719      	b.n	8003ca6 <do_state_run+0x46>
						data->motRightTemp = data->fifoData[data->dataCounterDown].RxData[2] * 256 + data->fifoData[data->dataCounterDown].RxData[1];
 8003e72:	005a      	lsls	r2, r3, #1
 8003e74:	18d0      	adds	r0, r2, r3
 8003e76:	0081      	lsls	r1, r0, #2
 8003e78:	4608      	mov	r0, r1
 8003e7a:	4421      	add	r1, r4
 8003e7c:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
 8003e80:	4602      	mov	r2, r0
 8003e82:	4422      	add	r2, r4
 8003e84:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 8003e88:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8003e8c:	f8a4 34d4 	strh.w	r3, [r4, #1236]	; 0x4d4
						break;
 8003e90:	e709      	b.n	8003ca6 <do_state_run+0x46>
		transmission(data);
 8003e92:	4620      	mov	r0, r4
 8003e94:	f7ff fe68 	bl	8003b68 <transmission>
		data->writeInCan = false;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	71a3      	strb	r3, [r4, #6]
 8003e9c:	e714      	b.n	8003cc8 <do_state_run+0x68>
		return STATE_IDLE;
 8003e9e:	2001      	movs	r0, #1
}
 8003ea0:	bd38      	pop	{r3, r4, r5, pc}
	return STATE_RUN;
 8003ea2:	2003      	movs	r0, #3
 8003ea4:	e7fc      	b.n	8003ea0 <do_state_run+0x240>
 8003ea6:	bf00      	nop
 8003ea8:	20000758 	.word	0x20000758
 8003eac:	51eb851f 	.word	0x51eb851f
 8003eb0:	68db8bad 	.word	0x68db8bad
 8003eb4:	66666667 	.word	0x66666667

08003eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eb8:	e7fe      	b.n	8003eb8 <Error_Handler>
	...

08003ebc <MX_USART2_UART_Init>:
{
 8003ebc:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8003ebe:	480a      	ldr	r0, [pc, #40]	; (8003ee8 <MX_USART2_UART_Init+0x2c>)
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <MX_USART2_UART_Init+0x30>)
 8003ec2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8003ec4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003ec8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ece:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ed0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ed6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003eda:	f7fe fc92 	bl	8002802 <HAL_UART_Init>
 8003ede:	b900      	cbnz	r0, 8003ee2 <MX_USART2_UART_Init+0x26>
}
 8003ee0:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003ee2:	f7ff ffe9 	bl	8003eb8 <Error_Handler>
 8003ee6:	bf00      	nop
 8003ee8:	20000694 	.word	0x20000694
 8003eec:	40004400 	.word	0x40004400

08003ef0 <MX_TIM6_Init>:
{
 8003ef0:	b500      	push	{lr}
 8003ef2:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	9301      	str	r3, [sp, #4]
  htim6.Instance = TIM6;
 8003efa:	480e      	ldr	r0, [pc, #56]	; (8003f34 <MX_TIM6_Init+0x44>)
 8003efc:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <MX_TIM6_Init+0x48>)
 8003efe:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 719;
 8003f00:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003f04:	6042      	str	r2, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f06:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 1999;
 8003f08:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003f0c:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003f10:	f7fe fa6e 	bl	80023f0 <HAL_TIM_Base_Init>
 8003f14:	b950      	cbnz	r0, 8003f2c <MX_TIM6_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f1a:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003f1c:	4669      	mov	r1, sp
 8003f1e:	4805      	ldr	r0, [pc, #20]	; (8003f34 <MX_TIM6_Init+0x44>)
 8003f20:	f7fe fa7f 	bl	8002422 <HAL_TIMEx_MasterConfigSynchronization>
 8003f24:	b920      	cbnz	r0, 8003f30 <MX_TIM6_Init+0x40>
}
 8003f26:	b003      	add	sp, #12
 8003f28:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003f2c:	f7ff ffc4 	bl	8003eb8 <Error_Handler>
    Error_Handler();
 8003f30:	f7ff ffc2 	bl	8003eb8 <Error_Handler>
 8003f34:	20000654 	.word	0x20000654
 8003f38:	40001000 	.word	0x40001000

08003f3c <MX_TIM7_Init>:
{
 8003f3c:	b500      	push	{lr}
 8003f3e:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	9301      	str	r3, [sp, #4]
  htim7.Instance = TIM7;
 8003f46:	480e      	ldr	r0, [pc, #56]	; (8003f80 <MX_TIM7_Init+0x44>)
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <MX_TIM7_Init+0x48>)
 8003f4a:	6002      	str	r2, [r0, #0]
  htim7.Init.Prescaler = 7199;
 8003f4c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003f50:	6042      	str	r2, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f52:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 19999;
 8003f54:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003f58:	60c2      	str	r2, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003f5c:	f7fe fa48 	bl	80023f0 <HAL_TIM_Base_Init>
 8003f60:	b950      	cbnz	r0, 8003f78 <MX_TIM7_Init+0x3c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f66:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003f68:	4669      	mov	r1, sp
 8003f6a:	4805      	ldr	r0, [pc, #20]	; (8003f80 <MX_TIM7_Init+0x44>)
 8003f6c:	f7fe fa59 	bl	8002422 <HAL_TIMEx_MasterConfigSynchronization>
 8003f70:	b920      	cbnz	r0, 8003f7c <MX_TIM7_Init+0x40>
}
 8003f72:	b003      	add	sp, #12
 8003f74:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003f78:	f7ff ff9e 	bl	8003eb8 <Error_Handler>
    Error_Handler();
 8003f7c:	f7ff ff9c 	bl	8003eb8 <Error_Handler>
 8003f80:	20000718 	.word	0x20000718
 8003f84:	40001400 	.word	0x40001400

08003f88 <MX_CAN1_Init>:
{
 8003f88:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 8003f8a:	480d      	ldr	r0, [pc, #52]	; (8003fc0 <MX_CAN1_Init+0x38>)
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <MX_CAN1_Init+0x3c>)
 8003f8e:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 2;
 8003f90:	2302      	movs	r3, #2
 8003f92:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003f98:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8003f9a:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8003f9e:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8003fa0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003fa4:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003fa6:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003fa8:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8003faa:	2201      	movs	r2, #1
 8003fac:	7682      	strb	r2, [r0, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003fae:	76c2      	strb	r2, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003fb0:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003fb2:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003fb4:	f7fd f806 	bl	8000fc4 <HAL_CAN_Init>
 8003fb8:	b900      	cbnz	r0, 8003fbc <MX_CAN1_Init+0x34>
}
 8003fba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003fbc:	f7ff ff7c 	bl	8003eb8 <Error_Handler>
 8003fc0:	200006d4 	.word	0x200006d4
 8003fc4:	40006400 	.word	0x40006400

08003fc8 <MX_TIM10_Init>:
{
 8003fc8:	b508      	push	{r3, lr}
  htim10.Instance = TIM10;
 8003fca:	4809      	ldr	r0, [pc, #36]	; (8003ff0 <MX_TIM10_Init+0x28>)
 8003fcc:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <MX_TIM10_Init+0x2c>)
 8003fce:	6003      	str	r3, [r0, #0]
  htim10.Init.Prescaler = 7199;
 8003fd0:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8003fd4:	6043      	str	r3, [r0, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6083      	str	r3, [r0, #8]
  htim10.Init.Period = 49999;
 8003fda:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003fde:	60c2      	str	r2, [r0, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe0:	6103      	str	r3, [r0, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fe2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003fe4:	f7fe fa04 	bl	80023f0 <HAL_TIM_Base_Init>
 8003fe8:	b900      	cbnz	r0, 8003fec <MX_TIM10_Init+0x24>
}
 8003fea:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003fec:	f7ff ff64 	bl	8003eb8 <Error_Handler>
 8003ff0:	2000009c 	.word	0x2000009c
 8003ff4:	40014400 	.word	0x40014400

08003ff8 <SystemClock_Config>:
{
 8003ff8:	b500      	push	{lr}
 8003ffa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ffc:	2234      	movs	r2, #52	; 0x34
 8003ffe:	2100      	movs	r1, #0
 8004000:	a807      	add	r0, sp, #28
 8004002:	f000 fa3f 	bl	8004484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004006:	2300      	movs	r3, #0
 8004008:	9302      	str	r3, [sp, #8]
 800400a:	9303      	str	r3, [sp, #12]
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	4a20      	ldr	r2, [pc, #128]	; (8004098 <SystemClock_Config+0xa0>)
 8004016:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004018:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800401c:	6411      	str	r1, [r2, #64]	; 0x40
 800401e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004020:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8004024:	9200      	str	r2, [sp, #0]
 8004026:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	4b1c      	ldr	r3, [pc, #112]	; (800409c <SystemClock_Config+0xa4>)
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800403e:	2301      	movs	r3, #1
 8004040:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004042:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004046:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004048:	2302      	movs	r3, #2
 800404a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800404c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004050:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004052:	2208      	movs	r2, #8
 8004054:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 288;
 8004056:	f44f 7190 	mov.w	r1, #288	; 0x120
 800405a:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800405c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800405e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004060:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004062:	a807      	add	r0, sp, #28
 8004064:	f7fd fe9a 	bl	8001d9c <HAL_RCC_OscConfig>
 8004068:	b988      	cbnz	r0, 800408e <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800406a:	230f      	movs	r3, #15
 800406c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800406e:	2302      	movs	r3, #2
 8004070:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004072:	2300      	movs	r3, #0
 8004074:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004076:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800407a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800407c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800407e:	2104      	movs	r1, #4
 8004080:	a802      	add	r0, sp, #8
 8004082:	f7fd fcf7 	bl	8001a74 <HAL_RCC_ClockConfig>
 8004086:	b920      	cbnz	r0, 8004092 <SystemClock_Config+0x9a>
}
 8004088:	b015      	add	sp, #84	; 0x54
 800408a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800408e:	f7ff ff13 	bl	8003eb8 <Error_Handler>
    Error_Handler();
 8004092:	f7ff ff11 	bl	8003eb8 <Error_Handler>
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800
 800409c:	40007000 	.word	0x40007000

080040a0 <main>:
{
 80040a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_Init();
 80040a4:	f7fc ff4e 	bl	8000f44 <HAL_Init>
  SystemClock_Config();
 80040a8:	f7ff ffa6 	bl	8003ff8 <SystemClock_Config>
  MX_GPIO_Init();
 80040ac:	f7fe fc48 	bl	8002940 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80040b0:	f7ff ff04 	bl	8003ebc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80040b4:	f7ff ff1c 	bl	8003ef0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80040b8:	f7ff ff40 	bl	8003f3c <MX_TIM7_Init>
  MX_CAN1_Init();
 80040bc:	f7ff ff64 	bl	8003f88 <MX_CAN1_Init>
  MX_TIM10_Init();
 80040c0:	f7ff ff82 	bl	8003fc8 <MX_TIM10_Init>
  MX_NVIC_Init();
 80040c4:	f7fe fc8c 	bl	80029e0 <MX_NVIC_Init>
  sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80040c8:	4925      	ldr	r1, [pc, #148]	; (8004160 <main+0xc0>)
 80040ca:	2500      	movs	r5, #0
 80040cc:	618d      	str	r5, [r1, #24]
  sFilter.FilterIdLow = 0;
 80040ce:	604d      	str	r5, [r1, #4]
  sFilter.FilterIdHigh = 0;
 80040d0:	600d      	str	r5, [r1, #0]
  sFilter.FilterMaskIdHigh = 0;
 80040d2:	608d      	str	r5, [r1, #8]
  sFilter.FilterMaskIdLow = 0;
 80040d4:	60cd      	str	r5, [r1, #12]
  sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80040d6:	610d      	str	r5, [r1, #16]
  sFilter.FilterBank = 0;
 80040d8:	614d      	str	r5, [r1, #20]
  sFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 80040da:	61cd      	str	r5, [r1, #28]
  sFilter.FilterActivation = ENABLE;
 80040dc:	2301      	movs	r3, #1
 80040de:	620b      	str	r3, [r1, #32]
  HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 80040e0:	4c20      	ldr	r4, [pc, #128]	; (8004164 <main+0xc4>)
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7fd f814 	bl	8001110 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 80040e8:	4620      	mov	r0, r4
 80040ea:	f7fd f8a7 	bl	800123c <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80040ee:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8004178 <main+0xd8>
 80040f2:	4640      	mov	r0, r8
 80040f4:	f7fe f846 	bl	8002184 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80040f8:	4f1b      	ldr	r7, [pc, #108]	; (8004168 <main+0xc8>)
 80040fa:	4638      	mov	r0, r7
 80040fc:	f7fe f842 	bl	8002184 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim10);
 8004100:	4e1a      	ldr	r6, [pc, #104]	; (800416c <main+0xcc>)
 8004102:	4630      	mov	r0, r6
 8004104:	f7fe f82c 	bl	8002160 <HAL_TIM_Base_Start>
  __HAL_TIM_SetCounter(&htim6, 0);
 8004108:	f8d8 3000 	ldr.w	r3, [r8]
 800410c:	625d      	str	r5, [r3, #36]	; 0x24
  __HAL_TIM_SetCounter(&htim7, 0);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	625d      	str	r5, [r3, #36]	; 0x24
  __HAL_TIM_SetCounter(&htim10, 0);
 8004112:	6833      	ldr	r3, [r6, #0]
 8004114:	625d      	str	r5, [r3, #36]	; 0x24
  HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 8004116:	2114      	movs	r1, #20
 8004118:	4620      	mov	r0, r4
 800411a:	f7fd fa0c 	bl	8001536 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 800411e:	2115      	movs	r1, #21
 8004120:	4620      	mov	r0, r4
 8004122:	f7fd fa08 	bl	8001536 <HAL_CAN_ActivateNotification>
	checkTimeStamp(&data);
 8004126:	4c12      	ldr	r4, [pc, #72]	; (8004170 <main+0xd0>)
 8004128:	4620      	mov	r0, r4
 800412a:	f7fe ff29 	bl	8002f80 <checkTimeStamp>
	STATO = run_state(STATO, &data);
 800412e:	4621      	mov	r1, r4
 8004130:	4628      	mov	r0, r5
 8004132:	f7fe fcd3 	bl	8002adc <run_state>
 8004136:	4605      	mov	r5, r0
	HAL_Delay(0.1);
 8004138:	2000      	movs	r0, #0
 800413a:	f7fc ff2f 	bl	8000f9c <HAL_Delay>
	if (HAL_GetTick() % 10 > 0 && data.writeInCan == false){
 800413e:	f7fc ff27 	bl	8000f90 <HAL_GetTick>
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <main+0xd4>)
 8004144:	fba3 2300 	umull	r2, r3, r3, r0
 8004148:	08db      	lsrs	r3, r3, #3
 800414a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800414e:	005a      	lsls	r2, r3, #1
 8004150:	4290      	cmp	r0, r2
 8004152:	d0e8      	beq.n	8004126 <main+0x86>
 8004154:	79a3      	ldrb	r3, [r4, #6]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e5      	bne.n	8004126 <main+0x86>
		data.writeInCan = true;
 800415a:	2201      	movs	r2, #1
 800415c:	71a2      	strb	r2, [r4, #6]
 800415e:	e7e2      	b.n	8004126 <main+0x86>
 8004160:	200000e0 	.word	0x200000e0
 8004164:	200006d4 	.word	0x200006d4
 8004168:	20000718 	.word	0x20000718
 800416c:	2000009c 	.word	0x2000009c
 8004170:	2000013c 	.word	0x2000013c
 8004174:	cccccccd 	.word	0xcccccccd
 8004178:	20000654 	.word	0x20000654

0800417c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800417c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417e:	2100      	movs	r1, #0
 8004180:	9100      	str	r1, [sp, #0]
 8004182:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_MspInit+0x34>)
 8004184:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004186:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418a:	645a      	str	r2, [r3, #68]	; 0x44
 800418c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004192:	9200      	str	r2, [sp, #0]
 8004194:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004196:	9101      	str	r1, [sp, #4]
 8004198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800419e:	641a      	str	r2, [r3, #64]	; 0x40
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041aa:	b002      	add	sp, #8
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80041b4:	b500      	push	{lr}
 80041b6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b8:	2300      	movs	r3, #0
 80041ba:	9303      	str	r3, [sp, #12]
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	9305      	str	r3, [sp, #20]
 80041c0:	9306      	str	r3, [sp, #24]
 80041c2:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN1)
 80041c4:	6802      	ldr	r2, [r0, #0]
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_CAN_MspInit+0x68>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d002      	beq.n	80041d2 <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80041cc:	b009      	add	sp, #36	; 0x24
 80041ce:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 80041d2:	2100      	movs	r1, #0
 80041d4:	9101      	str	r1, [sp, #4]
 80041d6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80041da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
 80041e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e4:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80041e8:	9201      	str	r2, [sp, #4]
 80041ea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ec:	9102      	str	r1, [sp, #8]
 80041ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f0:	f042 0201 	orr.w	r2, r2, #1
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	9302      	str	r3, [sp, #8]
 80041fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004204:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004206:	2302      	movs	r3, #2
 8004208:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420a:	2303      	movs	r3, #3
 800420c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800420e:	2309      	movs	r3, #9
 8004210:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004212:	a903      	add	r1, sp, #12
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <HAL_CAN_MspInit+0x6c>)
 8004216:	f7fd fb41 	bl	800189c <HAL_GPIO_Init>
}
 800421a:	e7d7      	b.n	80041cc <HAL_CAN_MspInit+0x18>
 800421c:	40006400 	.word	0x40006400
 8004220:	40020000 	.word	0x40020000

08004224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004224:	b500      	push	{lr}
 8004226:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM6)
 8004228:	6803      	ldr	r3, [r0, #0]
 800422a:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_TIM_Base_MspInit+0x7c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d008      	beq.n	8004242 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004230:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_TIM_Base_MspInit+0x80>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d012      	beq.n	800425c <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_TIM_Base_MspInit+0x84>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d01c      	beq.n	8004276 <HAL_TIM_Base_MspInit+0x52>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800423c:	b005      	add	sp, #20
 800423e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_TIM_Base_MspInit+0x88>)
 8004248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800424a:	f042 0210 	orr.w	r2, r2, #16
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	e7ef      	b.n	800423c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800425c:	2300      	movs	r3, #0
 800425e:	9302      	str	r3, [sp, #8]
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_TIM_Base_MspInit+0x88>)
 8004262:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004264:	f042 0220 	orr.w	r2, r2, #32
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	9302      	str	r3, [sp, #8]
 8004272:	9b02      	ldr	r3, [sp, #8]
 8004274:	e7e2      	b.n	800423c <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004276:	2100      	movs	r1, #0
 8004278:	9103      	str	r1, [sp, #12]
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <HAL_TIM_Base_MspInit+0x88>)
 800427c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004282:	645a      	str	r2, [r3, #68]	; 0x44
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	9303      	str	r3, [sp, #12]
 800428c:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800428e:	460a      	mov	r2, r1
 8004290:	2019      	movs	r0, #25
 8004292:	f7fd faab 	bl	80017ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004296:	2019      	movs	r0, #25
 8004298:	f7fd fadc 	bl	8001854 <HAL_NVIC_EnableIRQ>
}
 800429c:	e7ce      	b.n	800423c <HAL_TIM_Base_MspInit+0x18>
 800429e:	bf00      	nop
 80042a0:	40001000 	.word	0x40001000
 80042a4:	40001400 	.word	0x40001400
 80042a8:	40014400 	.word	0x40014400
 80042ac:	40023800 	.word	0x40023800

080042b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042b0:	b500      	push	{lr}
 80042b2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042b4:	2300      	movs	r3, #0
 80042b6:	9303      	str	r3, [sp, #12]
 80042b8:	9304      	str	r3, [sp, #16]
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	9306      	str	r3, [sp, #24]
 80042be:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80042c0:	6802      	ldr	r2, [r0, #0]
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <HAL_UART_MspInit+0x6c>)
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d002      	beq.n	80042ce <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042c8:	b009      	add	sp, #36	; 0x24
 80042ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80042ce:	2100      	movs	r1, #0
 80042d0:	9101      	str	r1, [sp, #4]
 80042d2:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80042d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
 80042de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80042e4:	9201      	str	r2, [sp, #4]
 80042e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042e8:	9102      	str	r1, [sp, #8]
 80042ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	9302      	str	r3, [sp, #8]
 80042fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042fc:	230c      	movs	r3, #12
 80042fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004304:	2301      	movs	r3, #1
 8004306:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004308:	2303      	movs	r3, #3
 800430a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800430c:	2307      	movs	r3, #7
 800430e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004310:	a903      	add	r1, sp, #12
 8004312:	4803      	ldr	r0, [pc, #12]	; (8004320 <HAL_UART_MspInit+0x70>)
 8004314:	f7fd fac2 	bl	800189c <HAL_GPIO_Init>
}
 8004318:	e7d6      	b.n	80042c8 <HAL_UART_MspInit+0x18>
 800431a:	bf00      	nop
 800431c:	40004400 	.word	0x40004400
 8004320:	40020000 	.word	0x40020000

08004324 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004324:	4770      	bx	lr

08004326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004326:	e7fe      	b.n	8004326 <HardFault_Handler>

08004328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004328:	e7fe      	b.n	8004328 <MemManage_Handler>

0800432a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800432a:	e7fe      	b.n	800432a <BusFault_Handler>

0800432c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800432c:	e7fe      	b.n	800432c <UsageFault_Handler>

0800432e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800432e:	4770      	bx	lr

08004330 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004330:	4770      	bx	lr

08004332 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004332:	4770      	bx	lr

08004334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004334:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004336:	f7fc fe1f 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800433a:	bd08      	pop	{r3, pc}

0800433c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800433c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800433e:	4802      	ldr	r0, [pc, #8]	; (8004348 <CAN1_RX0_IRQHandler+0xc>)
 8004340:	f7fd f916 	bl	8001570 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004344:	bd08      	pop	{r3, pc}
 8004346:	bf00      	nop
 8004348:	200006d4 	.word	0x200006d4

0800434c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800434c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800434e:	4802      	ldr	r0, [pc, #8]	; (8004358 <CAN1_RX1_IRQHandler+0xc>)
 8004350:	f7fd f90e 	bl	8001570 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004354:	bd08      	pop	{r3, pc}
 8004356:	bf00      	nop
 8004358:	200006d4 	.word	0x200006d4

0800435c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800435c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800435e:	4802      	ldr	r0, [pc, #8]	; (8004368 <CAN1_SCE_IRQHandler+0xc>)
 8004360:	f7fd f906 	bl	8001570 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8004364:	bd08      	pop	{r3, pc}
 8004366:	bf00      	nop
 8004368:	200006d4 	.word	0x200006d4

0800436c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800436c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800436e:	4802      	ldr	r0, [pc, #8]	; (8004378 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8004370:	f7fd ff1d 	bl	80021ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004374:	bd08      	pop	{r3, pc}
 8004376:	bf00      	nop
 8004378:	2000009c 	.word	0x2000009c

0800437c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800437c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800437e:	4802      	ldr	r0, [pc, #8]	; (8004388 <TIM6_DAC_IRQHandler+0xc>)
 8004380:	f7fd ff15 	bl	80021ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004384:	bd08      	pop	{r3, pc}
 8004386:	bf00      	nop
 8004388:	20000654 	.word	0x20000654

0800438c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800438c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800438e:	4802      	ldr	r0, [pc, #8]	; (8004398 <TIM7_IRQHandler+0xc>)
 8004390:	f7fd ff0d 	bl	80021ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004394:	bd08      	pop	{r3, pc}
 8004396:	bf00      	nop
 8004398:	20000718 	.word	0x20000718

0800439c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800439c:	490f      	ldr	r1, [pc, #60]	; (80043dc <SystemInit+0x40>)
 800439e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80043a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <SystemInit+0x44>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043b4:	2000      	movs	r0, #0
 80043b6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80043be:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043c2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80043c4:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <SystemInit+0x48>)
 80043c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043ce:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80043d0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043d6:	608b      	str	r3, [r1, #8]
#endif
}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	e000ed00 	.word	0xe000ed00
 80043e0:	40023800 	.word	0x40023800
 80043e4:	24003010 	.word	0x24003010

080043e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004420 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043ee:	e003      	b.n	80043f8 <LoopCopyDataInit>

080043f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043f6:	3104      	adds	r1, #4

080043f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043f8:	480b      	ldr	r0, [pc, #44]	; (8004428 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043fa:	4b0c      	ldr	r3, [pc, #48]	; (800442c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004400:	d3f6      	bcc.n	80043f0 <CopyDataInit>
  ldr  r2, =_sbss
 8004402:	4a0b      	ldr	r2, [pc, #44]	; (8004430 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004404:	e002      	b.n	800440c <LoopFillZerobss>

08004406 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004406:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004408:	f842 3b04 	str.w	r3, [r2], #4

0800440c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800440e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004410:	d3f9      	bcc.n	8004406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004412:	f7ff ffc3 	bl	800439c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004416:	f000 f811 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800441a:	f7ff fe41 	bl	80040a0 <main>
  bx  lr    
 800441e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004420:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004424:	08004db8 	.word	0x08004db8
  ldr  r0, =_sdata
 8004428:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800442c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004430:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004434:	20000764 	.word	0x20000764

08004438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004438:	e7fe      	b.n	8004438 <ADC_IRQHandler>
	...

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4e0d      	ldr	r6, [pc, #52]	; (8004474 <__libc_init_array+0x38>)
 8004440:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004442:	1ba4      	subs	r4, r4, r6
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	2500      	movs	r5, #0
 8004448:	42a5      	cmp	r5, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	4e0b      	ldr	r6, [pc, #44]	; (800447c <__libc_init_array+0x40>)
 800444e:	4c0c      	ldr	r4, [pc, #48]	; (8004480 <__libc_init_array+0x44>)
 8004450:	f000 fc34 	bl	8004cbc <_init>
 8004454:	1ba4      	subs	r4, r4, r6
 8004456:	10a4      	asrs	r4, r4, #2
 8004458:	2500      	movs	r5, #0
 800445a:	42a5      	cmp	r5, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004464:	4798      	blx	r3
 8004466:	3501      	adds	r5, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800446e:	4798      	blx	r3
 8004470:	3501      	adds	r5, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	08004db0 	.word	0x08004db0
 8004478:	08004db0 	.word	0x08004db0
 800447c:	08004db0 	.word	0x08004db0
 8004480:	08004db4 	.word	0x08004db4

08004484 <memset>:
 8004484:	4402      	add	r2, r0
 8004486:	4603      	mov	r3, r0
 8004488:	4293      	cmp	r3, r2
 800448a:	d100      	bne.n	800448e <memset+0xa>
 800448c:	4770      	bx	lr
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	e7f9      	b.n	8004488 <memset+0x4>

08004494 <siprintf>:
 8004494:	b40e      	push	{r1, r2, r3}
 8004496:	b500      	push	{lr}
 8004498:	b09c      	sub	sp, #112	; 0x70
 800449a:	ab1d      	add	r3, sp, #116	; 0x74
 800449c:	9002      	str	r0, [sp, #8]
 800449e:	9006      	str	r0, [sp, #24]
 80044a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044a4:	4809      	ldr	r0, [pc, #36]	; (80044cc <siprintf+0x38>)
 80044a6:	9107      	str	r1, [sp, #28]
 80044a8:	9104      	str	r1, [sp, #16]
 80044aa:	4909      	ldr	r1, [pc, #36]	; (80044d0 <siprintf+0x3c>)
 80044ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80044b0:	9105      	str	r1, [sp, #20]
 80044b2:	6800      	ldr	r0, [r0, #0]
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	a902      	add	r1, sp, #8
 80044b8:	f000 f866 	bl	8004588 <_svfiprintf_r>
 80044bc:	9b02      	ldr	r3, [sp, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	b01c      	add	sp, #112	; 0x70
 80044c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c8:	b003      	add	sp, #12
 80044ca:	4770      	bx	lr
 80044cc:	2000000c 	.word	0x2000000c
 80044d0:	ffff0208 	.word	0xffff0208

080044d4 <__ssputs_r>:
 80044d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	688e      	ldr	r6, [r1, #8]
 80044da:	429e      	cmp	r6, r3
 80044dc:	4682      	mov	sl, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	4690      	mov	r8, r2
 80044e2:	4699      	mov	r9, r3
 80044e4:	d837      	bhi.n	8004556 <__ssputs_r+0x82>
 80044e6:	898a      	ldrh	r2, [r1, #12]
 80044e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044ec:	d031      	beq.n	8004552 <__ssputs_r+0x7e>
 80044ee:	6825      	ldr	r5, [r4, #0]
 80044f0:	6909      	ldr	r1, [r1, #16]
 80044f2:	1a6f      	subs	r7, r5, r1
 80044f4:	6965      	ldr	r5, [r4, #20]
 80044f6:	2302      	movs	r3, #2
 80044f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8004500:	f109 0301 	add.w	r3, r9, #1
 8004504:	443b      	add	r3, r7
 8004506:	429d      	cmp	r5, r3
 8004508:	bf38      	it	cc
 800450a:	461d      	movcc	r5, r3
 800450c:	0553      	lsls	r3, r2, #21
 800450e:	d530      	bpl.n	8004572 <__ssputs_r+0x9e>
 8004510:	4629      	mov	r1, r5
 8004512:	f000 fb2b 	bl	8004b6c <_malloc_r>
 8004516:	4606      	mov	r6, r0
 8004518:	b950      	cbnz	r0, 8004530 <__ssputs_r+0x5c>
 800451a:	230c      	movs	r3, #12
 800451c:	f8ca 3000 	str.w	r3, [sl]
 8004520:	89a3      	ldrh	r3, [r4, #12]
 8004522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004526:	81a3      	strh	r3, [r4, #12]
 8004528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800452c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004530:	463a      	mov	r2, r7
 8004532:	6921      	ldr	r1, [r4, #16]
 8004534:	f000 faa8 	bl	8004a88 <memcpy>
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800453e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004542:	81a3      	strh	r3, [r4, #12]
 8004544:	6126      	str	r6, [r4, #16]
 8004546:	6165      	str	r5, [r4, #20]
 8004548:	443e      	add	r6, r7
 800454a:	1bed      	subs	r5, r5, r7
 800454c:	6026      	str	r6, [r4, #0]
 800454e:	60a5      	str	r5, [r4, #8]
 8004550:	464e      	mov	r6, r9
 8004552:	454e      	cmp	r6, r9
 8004554:	d900      	bls.n	8004558 <__ssputs_r+0x84>
 8004556:	464e      	mov	r6, r9
 8004558:	4632      	mov	r2, r6
 800455a:	4641      	mov	r1, r8
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	f000 fa9e 	bl	8004a9e <memmove>
 8004562:	68a3      	ldr	r3, [r4, #8]
 8004564:	1b9b      	subs	r3, r3, r6
 8004566:	60a3      	str	r3, [r4, #8]
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	441e      	add	r6, r3
 800456c:	6026      	str	r6, [r4, #0]
 800456e:	2000      	movs	r0, #0
 8004570:	e7dc      	b.n	800452c <__ssputs_r+0x58>
 8004572:	462a      	mov	r2, r5
 8004574:	f000 fb54 	bl	8004c20 <_realloc_r>
 8004578:	4606      	mov	r6, r0
 800457a:	2800      	cmp	r0, #0
 800457c:	d1e2      	bne.n	8004544 <__ssputs_r+0x70>
 800457e:	6921      	ldr	r1, [r4, #16]
 8004580:	4650      	mov	r0, sl
 8004582:	f000 faa5 	bl	8004ad0 <_free_r>
 8004586:	e7c8      	b.n	800451a <__ssputs_r+0x46>

08004588 <_svfiprintf_r>:
 8004588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800458c:	461d      	mov	r5, r3
 800458e:	898b      	ldrh	r3, [r1, #12]
 8004590:	061f      	lsls	r7, r3, #24
 8004592:	b09d      	sub	sp, #116	; 0x74
 8004594:	4680      	mov	r8, r0
 8004596:	460c      	mov	r4, r1
 8004598:	4616      	mov	r6, r2
 800459a:	d50f      	bpl.n	80045bc <_svfiprintf_r+0x34>
 800459c:	690b      	ldr	r3, [r1, #16]
 800459e:	b96b      	cbnz	r3, 80045bc <_svfiprintf_r+0x34>
 80045a0:	2140      	movs	r1, #64	; 0x40
 80045a2:	f000 fae3 	bl	8004b6c <_malloc_r>
 80045a6:	6020      	str	r0, [r4, #0]
 80045a8:	6120      	str	r0, [r4, #16]
 80045aa:	b928      	cbnz	r0, 80045b8 <_svfiprintf_r+0x30>
 80045ac:	230c      	movs	r3, #12
 80045ae:	f8c8 3000 	str.w	r3, [r8]
 80045b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045b6:	e0c8      	b.n	800474a <_svfiprintf_r+0x1c2>
 80045b8:	2340      	movs	r3, #64	; 0x40
 80045ba:	6163      	str	r3, [r4, #20]
 80045bc:	2300      	movs	r3, #0
 80045be:	9309      	str	r3, [sp, #36]	; 0x24
 80045c0:	2320      	movs	r3, #32
 80045c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045c6:	2330      	movs	r3, #48	; 0x30
 80045c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045cc:	9503      	str	r5, [sp, #12]
 80045ce:	f04f 0b01 	mov.w	fp, #1
 80045d2:	4637      	mov	r7, r6
 80045d4:	463d      	mov	r5, r7
 80045d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80045da:	b10b      	cbz	r3, 80045e0 <_svfiprintf_r+0x58>
 80045dc:	2b25      	cmp	r3, #37	; 0x25
 80045de:	d13e      	bne.n	800465e <_svfiprintf_r+0xd6>
 80045e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80045e4:	d00b      	beq.n	80045fe <_svfiprintf_r+0x76>
 80045e6:	4653      	mov	r3, sl
 80045e8:	4632      	mov	r2, r6
 80045ea:	4621      	mov	r1, r4
 80045ec:	4640      	mov	r0, r8
 80045ee:	f7ff ff71 	bl	80044d4 <__ssputs_r>
 80045f2:	3001      	adds	r0, #1
 80045f4:	f000 80a4 	beq.w	8004740 <_svfiprintf_r+0x1b8>
 80045f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fa:	4453      	add	r3, sl
 80045fc:	9309      	str	r3, [sp, #36]	; 0x24
 80045fe:	783b      	ldrb	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 809d 	beq.w	8004740 <_svfiprintf_r+0x1b8>
 8004606:	2300      	movs	r3, #0
 8004608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800460c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	9307      	str	r3, [sp, #28]
 8004614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004618:	931a      	str	r3, [sp, #104]	; 0x68
 800461a:	462f      	mov	r7, r5
 800461c:	2205      	movs	r2, #5
 800461e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004622:	4850      	ldr	r0, [pc, #320]	; (8004764 <_svfiprintf_r+0x1dc>)
 8004624:	f7fb fdfc 	bl	8000220 <memchr>
 8004628:	9b04      	ldr	r3, [sp, #16]
 800462a:	b9d0      	cbnz	r0, 8004662 <_svfiprintf_r+0xda>
 800462c:	06d9      	lsls	r1, r3, #27
 800462e:	bf44      	itt	mi
 8004630:	2220      	movmi	r2, #32
 8004632:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004636:	071a      	lsls	r2, r3, #28
 8004638:	bf44      	itt	mi
 800463a:	222b      	movmi	r2, #43	; 0x2b
 800463c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004640:	782a      	ldrb	r2, [r5, #0]
 8004642:	2a2a      	cmp	r2, #42	; 0x2a
 8004644:	d015      	beq.n	8004672 <_svfiprintf_r+0xea>
 8004646:	9a07      	ldr	r2, [sp, #28]
 8004648:	462f      	mov	r7, r5
 800464a:	2000      	movs	r0, #0
 800464c:	250a      	movs	r5, #10
 800464e:	4639      	mov	r1, r7
 8004650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004654:	3b30      	subs	r3, #48	; 0x30
 8004656:	2b09      	cmp	r3, #9
 8004658:	d94d      	bls.n	80046f6 <_svfiprintf_r+0x16e>
 800465a:	b1b8      	cbz	r0, 800468c <_svfiprintf_r+0x104>
 800465c:	e00f      	b.n	800467e <_svfiprintf_r+0xf6>
 800465e:	462f      	mov	r7, r5
 8004660:	e7b8      	b.n	80045d4 <_svfiprintf_r+0x4c>
 8004662:	4a40      	ldr	r2, [pc, #256]	; (8004764 <_svfiprintf_r+0x1dc>)
 8004664:	1a80      	subs	r0, r0, r2
 8004666:	fa0b f000 	lsl.w	r0, fp, r0
 800466a:	4318      	orrs	r0, r3
 800466c:	9004      	str	r0, [sp, #16]
 800466e:	463d      	mov	r5, r7
 8004670:	e7d3      	b.n	800461a <_svfiprintf_r+0x92>
 8004672:	9a03      	ldr	r2, [sp, #12]
 8004674:	1d11      	adds	r1, r2, #4
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	9103      	str	r1, [sp, #12]
 800467a:	2a00      	cmp	r2, #0
 800467c:	db01      	blt.n	8004682 <_svfiprintf_r+0xfa>
 800467e:	9207      	str	r2, [sp, #28]
 8004680:	e004      	b.n	800468c <_svfiprintf_r+0x104>
 8004682:	4252      	negs	r2, r2
 8004684:	f043 0302 	orr.w	r3, r3, #2
 8004688:	9207      	str	r2, [sp, #28]
 800468a:	9304      	str	r3, [sp, #16]
 800468c:	783b      	ldrb	r3, [r7, #0]
 800468e:	2b2e      	cmp	r3, #46	; 0x2e
 8004690:	d10c      	bne.n	80046ac <_svfiprintf_r+0x124>
 8004692:	787b      	ldrb	r3, [r7, #1]
 8004694:	2b2a      	cmp	r3, #42	; 0x2a
 8004696:	d133      	bne.n	8004700 <_svfiprintf_r+0x178>
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	9203      	str	r2, [sp, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bfb8      	it	lt
 80046a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046a8:	3702      	adds	r7, #2
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	4d2e      	ldr	r5, [pc, #184]	; (8004768 <_svfiprintf_r+0x1e0>)
 80046ae:	7839      	ldrb	r1, [r7, #0]
 80046b0:	2203      	movs	r2, #3
 80046b2:	4628      	mov	r0, r5
 80046b4:	f7fb fdb4 	bl	8000220 <memchr>
 80046b8:	b138      	cbz	r0, 80046ca <_svfiprintf_r+0x142>
 80046ba:	2340      	movs	r3, #64	; 0x40
 80046bc:	1b40      	subs	r0, r0, r5
 80046be:	fa03 f000 	lsl.w	r0, r3, r0
 80046c2:	9b04      	ldr	r3, [sp, #16]
 80046c4:	4303      	orrs	r3, r0
 80046c6:	3701      	adds	r7, #1
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	7839      	ldrb	r1, [r7, #0]
 80046cc:	4827      	ldr	r0, [pc, #156]	; (800476c <_svfiprintf_r+0x1e4>)
 80046ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046d2:	2206      	movs	r2, #6
 80046d4:	1c7e      	adds	r6, r7, #1
 80046d6:	f7fb fda3 	bl	8000220 <memchr>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d038      	beq.n	8004750 <_svfiprintf_r+0x1c8>
 80046de:	4b24      	ldr	r3, [pc, #144]	; (8004770 <_svfiprintf_r+0x1e8>)
 80046e0:	bb13      	cbnz	r3, 8004728 <_svfiprintf_r+0x1a0>
 80046e2:	9b03      	ldr	r3, [sp, #12]
 80046e4:	3307      	adds	r3, #7
 80046e6:	f023 0307 	bic.w	r3, r3, #7
 80046ea:	3308      	adds	r3, #8
 80046ec:	9303      	str	r3, [sp, #12]
 80046ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f0:	444b      	add	r3, r9
 80046f2:	9309      	str	r3, [sp, #36]	; 0x24
 80046f4:	e76d      	b.n	80045d2 <_svfiprintf_r+0x4a>
 80046f6:	fb05 3202 	mla	r2, r5, r2, r3
 80046fa:	2001      	movs	r0, #1
 80046fc:	460f      	mov	r7, r1
 80046fe:	e7a6      	b.n	800464e <_svfiprintf_r+0xc6>
 8004700:	2300      	movs	r3, #0
 8004702:	3701      	adds	r7, #1
 8004704:	9305      	str	r3, [sp, #20]
 8004706:	4619      	mov	r1, r3
 8004708:	250a      	movs	r5, #10
 800470a:	4638      	mov	r0, r7
 800470c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004710:	3a30      	subs	r2, #48	; 0x30
 8004712:	2a09      	cmp	r2, #9
 8004714:	d903      	bls.n	800471e <_svfiprintf_r+0x196>
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0c8      	beq.n	80046ac <_svfiprintf_r+0x124>
 800471a:	9105      	str	r1, [sp, #20]
 800471c:	e7c6      	b.n	80046ac <_svfiprintf_r+0x124>
 800471e:	fb05 2101 	mla	r1, r5, r1, r2
 8004722:	2301      	movs	r3, #1
 8004724:	4607      	mov	r7, r0
 8004726:	e7f0      	b.n	800470a <_svfiprintf_r+0x182>
 8004728:	ab03      	add	r3, sp, #12
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	4622      	mov	r2, r4
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <_svfiprintf_r+0x1ec>)
 8004730:	a904      	add	r1, sp, #16
 8004732:	4640      	mov	r0, r8
 8004734:	f3af 8000 	nop.w
 8004738:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800473c:	4681      	mov	r9, r0
 800473e:	d1d6      	bne.n	80046ee <_svfiprintf_r+0x166>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	065b      	lsls	r3, r3, #25
 8004744:	f53f af35 	bmi.w	80045b2 <_svfiprintf_r+0x2a>
 8004748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800474a:	b01d      	add	sp, #116	; 0x74
 800474c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004750:	ab03      	add	r3, sp, #12
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	4622      	mov	r2, r4
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <_svfiprintf_r+0x1ec>)
 8004758:	a904      	add	r1, sp, #16
 800475a:	4640      	mov	r0, r8
 800475c:	f000 f882 	bl	8004864 <_printf_i>
 8004760:	e7ea      	b.n	8004738 <_svfiprintf_r+0x1b0>
 8004762:	bf00      	nop
 8004764:	08004d74 	.word	0x08004d74
 8004768:	08004d7a 	.word	0x08004d7a
 800476c:	08004d7e 	.word	0x08004d7e
 8004770:	00000000 	.word	0x00000000
 8004774:	080044d5 	.word	0x080044d5

08004778 <_printf_common>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	4691      	mov	r9, r2
 800477e:	461f      	mov	r7, r3
 8004780:	688a      	ldr	r2, [r1, #8]
 8004782:	690b      	ldr	r3, [r1, #16]
 8004784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004788:	4293      	cmp	r3, r2
 800478a:	bfb8      	it	lt
 800478c:	4613      	movlt	r3, r2
 800478e:	f8c9 3000 	str.w	r3, [r9]
 8004792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004796:	4606      	mov	r6, r0
 8004798:	460c      	mov	r4, r1
 800479a:	b112      	cbz	r2, 80047a2 <_printf_common+0x2a>
 800479c:	3301      	adds	r3, #1
 800479e:	f8c9 3000 	str.w	r3, [r9]
 80047a2:	6823      	ldr	r3, [r4, #0]
 80047a4:	0699      	lsls	r1, r3, #26
 80047a6:	bf42      	ittt	mi
 80047a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047ac:	3302      	addmi	r3, #2
 80047ae:	f8c9 3000 	strmi.w	r3, [r9]
 80047b2:	6825      	ldr	r5, [r4, #0]
 80047b4:	f015 0506 	ands.w	r5, r5, #6
 80047b8:	d107      	bne.n	80047ca <_printf_common+0x52>
 80047ba:	f104 0a19 	add.w	sl, r4, #25
 80047be:	68e3      	ldr	r3, [r4, #12]
 80047c0:	f8d9 2000 	ldr.w	r2, [r9]
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	42ab      	cmp	r3, r5
 80047c8:	dc28      	bgt.n	800481c <_printf_common+0xa4>
 80047ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047ce:	6822      	ldr	r2, [r4, #0]
 80047d0:	3300      	adds	r3, #0
 80047d2:	bf18      	it	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	0692      	lsls	r2, r2, #26
 80047d8:	d42d      	bmi.n	8004836 <_printf_common+0xbe>
 80047da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047de:	4639      	mov	r1, r7
 80047e0:	4630      	mov	r0, r6
 80047e2:	47c0      	blx	r8
 80047e4:	3001      	adds	r0, #1
 80047e6:	d020      	beq.n	800482a <_printf_common+0xb2>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	68e5      	ldr	r5, [r4, #12]
 80047ec:	f8d9 2000 	ldr.w	r2, [r9]
 80047f0:	f003 0306 	and.w	r3, r3, #6
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	bf08      	it	eq
 80047f8:	1aad      	subeq	r5, r5, r2
 80047fa:	68a3      	ldr	r3, [r4, #8]
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	bf0c      	ite	eq
 8004800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004804:	2500      	movne	r5, #0
 8004806:	4293      	cmp	r3, r2
 8004808:	bfc4      	itt	gt
 800480a:	1a9b      	subgt	r3, r3, r2
 800480c:	18ed      	addgt	r5, r5, r3
 800480e:	f04f 0900 	mov.w	r9, #0
 8004812:	341a      	adds	r4, #26
 8004814:	454d      	cmp	r5, r9
 8004816:	d11a      	bne.n	800484e <_printf_common+0xd6>
 8004818:	2000      	movs	r0, #0
 800481a:	e008      	b.n	800482e <_printf_common+0xb6>
 800481c:	2301      	movs	r3, #1
 800481e:	4652      	mov	r2, sl
 8004820:	4639      	mov	r1, r7
 8004822:	4630      	mov	r0, r6
 8004824:	47c0      	blx	r8
 8004826:	3001      	adds	r0, #1
 8004828:	d103      	bne.n	8004832 <_printf_common+0xba>
 800482a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800482e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004832:	3501      	adds	r5, #1
 8004834:	e7c3      	b.n	80047be <_printf_common+0x46>
 8004836:	18e1      	adds	r1, r4, r3
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	2030      	movs	r0, #48	; 0x30
 800483c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004840:	4422      	add	r2, r4
 8004842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800484a:	3302      	adds	r3, #2
 800484c:	e7c5      	b.n	80047da <_printf_common+0x62>
 800484e:	2301      	movs	r3, #1
 8004850:	4622      	mov	r2, r4
 8004852:	4639      	mov	r1, r7
 8004854:	4630      	mov	r0, r6
 8004856:	47c0      	blx	r8
 8004858:	3001      	adds	r0, #1
 800485a:	d0e6      	beq.n	800482a <_printf_common+0xb2>
 800485c:	f109 0901 	add.w	r9, r9, #1
 8004860:	e7d8      	b.n	8004814 <_printf_common+0x9c>
	...

08004864 <_printf_i>:
 8004864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800486c:	460c      	mov	r4, r1
 800486e:	7e09      	ldrb	r1, [r1, #24]
 8004870:	b085      	sub	sp, #20
 8004872:	296e      	cmp	r1, #110	; 0x6e
 8004874:	4617      	mov	r7, r2
 8004876:	4606      	mov	r6, r0
 8004878:	4698      	mov	r8, r3
 800487a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800487c:	f000 80b3 	beq.w	80049e6 <_printf_i+0x182>
 8004880:	d822      	bhi.n	80048c8 <_printf_i+0x64>
 8004882:	2963      	cmp	r1, #99	; 0x63
 8004884:	d036      	beq.n	80048f4 <_printf_i+0x90>
 8004886:	d80a      	bhi.n	800489e <_printf_i+0x3a>
 8004888:	2900      	cmp	r1, #0
 800488a:	f000 80b9 	beq.w	8004a00 <_printf_i+0x19c>
 800488e:	2958      	cmp	r1, #88	; 0x58
 8004890:	f000 8083 	beq.w	800499a <_printf_i+0x136>
 8004894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800489c:	e032      	b.n	8004904 <_printf_i+0xa0>
 800489e:	2964      	cmp	r1, #100	; 0x64
 80048a0:	d001      	beq.n	80048a6 <_printf_i+0x42>
 80048a2:	2969      	cmp	r1, #105	; 0x69
 80048a4:	d1f6      	bne.n	8004894 <_printf_i+0x30>
 80048a6:	6820      	ldr	r0, [r4, #0]
 80048a8:	6813      	ldr	r3, [r2, #0]
 80048aa:	0605      	lsls	r5, r0, #24
 80048ac:	f103 0104 	add.w	r1, r3, #4
 80048b0:	d52a      	bpl.n	8004908 <_printf_i+0xa4>
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6011      	str	r1, [r2, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	da03      	bge.n	80048c2 <_printf_i+0x5e>
 80048ba:	222d      	movs	r2, #45	; 0x2d
 80048bc:	425b      	negs	r3, r3
 80048be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048c2:	486f      	ldr	r0, [pc, #444]	; (8004a80 <_printf_i+0x21c>)
 80048c4:	220a      	movs	r2, #10
 80048c6:	e039      	b.n	800493c <_printf_i+0xd8>
 80048c8:	2973      	cmp	r1, #115	; 0x73
 80048ca:	f000 809d 	beq.w	8004a08 <_printf_i+0x1a4>
 80048ce:	d808      	bhi.n	80048e2 <_printf_i+0x7e>
 80048d0:	296f      	cmp	r1, #111	; 0x6f
 80048d2:	d020      	beq.n	8004916 <_printf_i+0xb2>
 80048d4:	2970      	cmp	r1, #112	; 0x70
 80048d6:	d1dd      	bne.n	8004894 <_printf_i+0x30>
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	f043 0320 	orr.w	r3, r3, #32
 80048de:	6023      	str	r3, [r4, #0]
 80048e0:	e003      	b.n	80048ea <_printf_i+0x86>
 80048e2:	2975      	cmp	r1, #117	; 0x75
 80048e4:	d017      	beq.n	8004916 <_printf_i+0xb2>
 80048e6:	2978      	cmp	r1, #120	; 0x78
 80048e8:	d1d4      	bne.n	8004894 <_printf_i+0x30>
 80048ea:	2378      	movs	r3, #120	; 0x78
 80048ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048f0:	4864      	ldr	r0, [pc, #400]	; (8004a84 <_printf_i+0x220>)
 80048f2:	e055      	b.n	80049a0 <_printf_i+0x13c>
 80048f4:	6813      	ldr	r3, [r2, #0]
 80048f6:	1d19      	adds	r1, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6011      	str	r1, [r2, #0]
 80048fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004904:	2301      	movs	r3, #1
 8004906:	e08c      	b.n	8004a22 <_printf_i+0x1be>
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004910:	bf18      	it	ne
 8004912:	b21b      	sxthne	r3, r3
 8004914:	e7cf      	b.n	80048b6 <_printf_i+0x52>
 8004916:	6813      	ldr	r3, [r2, #0]
 8004918:	6825      	ldr	r5, [r4, #0]
 800491a:	1d18      	adds	r0, r3, #4
 800491c:	6010      	str	r0, [r2, #0]
 800491e:	0628      	lsls	r0, r5, #24
 8004920:	d501      	bpl.n	8004926 <_printf_i+0xc2>
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	e002      	b.n	800492c <_printf_i+0xc8>
 8004926:	0668      	lsls	r0, r5, #25
 8004928:	d5fb      	bpl.n	8004922 <_printf_i+0xbe>
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	4854      	ldr	r0, [pc, #336]	; (8004a80 <_printf_i+0x21c>)
 800492e:	296f      	cmp	r1, #111	; 0x6f
 8004930:	bf14      	ite	ne
 8004932:	220a      	movne	r2, #10
 8004934:	2208      	moveq	r2, #8
 8004936:	2100      	movs	r1, #0
 8004938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800493c:	6865      	ldr	r5, [r4, #4]
 800493e:	60a5      	str	r5, [r4, #8]
 8004940:	2d00      	cmp	r5, #0
 8004942:	f2c0 8095 	blt.w	8004a70 <_printf_i+0x20c>
 8004946:	6821      	ldr	r1, [r4, #0]
 8004948:	f021 0104 	bic.w	r1, r1, #4
 800494c:	6021      	str	r1, [r4, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d13d      	bne.n	80049ce <_printf_i+0x16a>
 8004952:	2d00      	cmp	r5, #0
 8004954:	f040 808e 	bne.w	8004a74 <_printf_i+0x210>
 8004958:	4665      	mov	r5, ip
 800495a:	2a08      	cmp	r2, #8
 800495c:	d10b      	bne.n	8004976 <_printf_i+0x112>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	07db      	lsls	r3, r3, #31
 8004962:	d508      	bpl.n	8004976 <_printf_i+0x112>
 8004964:	6923      	ldr	r3, [r4, #16]
 8004966:	6862      	ldr	r2, [r4, #4]
 8004968:	429a      	cmp	r2, r3
 800496a:	bfde      	ittt	le
 800496c:	2330      	movle	r3, #48	; 0x30
 800496e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004972:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004976:	ebac 0305 	sub.w	r3, ip, r5
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	f8cd 8000 	str.w	r8, [sp]
 8004980:	463b      	mov	r3, r7
 8004982:	aa03      	add	r2, sp, #12
 8004984:	4621      	mov	r1, r4
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff fef6 	bl	8004778 <_printf_common>
 800498c:	3001      	adds	r0, #1
 800498e:	d14d      	bne.n	8004a2c <_printf_i+0x1c8>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004994:	b005      	add	sp, #20
 8004996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800499a:	4839      	ldr	r0, [pc, #228]	; (8004a80 <_printf_i+0x21c>)
 800499c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	6821      	ldr	r1, [r4, #0]
 80049a4:	1d1d      	adds	r5, r3, #4
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6015      	str	r5, [r2, #0]
 80049aa:	060a      	lsls	r2, r1, #24
 80049ac:	d50b      	bpl.n	80049c6 <_printf_i+0x162>
 80049ae:	07ca      	lsls	r2, r1, #31
 80049b0:	bf44      	itt	mi
 80049b2:	f041 0120 	orrmi.w	r1, r1, #32
 80049b6:	6021      	strmi	r1, [r4, #0]
 80049b8:	b91b      	cbnz	r3, 80049c2 <_printf_i+0x15e>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	f022 0220 	bic.w	r2, r2, #32
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	e7b7      	b.n	8004936 <_printf_i+0xd2>
 80049c6:	064d      	lsls	r5, r1, #25
 80049c8:	bf48      	it	mi
 80049ca:	b29b      	uxthmi	r3, r3
 80049cc:	e7ef      	b.n	80049ae <_printf_i+0x14a>
 80049ce:	4665      	mov	r5, ip
 80049d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80049d4:	fb02 3311 	mls	r3, r2, r1, r3
 80049d8:	5cc3      	ldrb	r3, [r0, r3]
 80049da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049de:	460b      	mov	r3, r1
 80049e0:	2900      	cmp	r1, #0
 80049e2:	d1f5      	bne.n	80049d0 <_printf_i+0x16c>
 80049e4:	e7b9      	b.n	800495a <_printf_i+0xf6>
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	6825      	ldr	r5, [r4, #0]
 80049ea:	6961      	ldr	r1, [r4, #20]
 80049ec:	1d18      	adds	r0, r3, #4
 80049ee:	6010      	str	r0, [r2, #0]
 80049f0:	0628      	lsls	r0, r5, #24
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	d501      	bpl.n	80049fa <_printf_i+0x196>
 80049f6:	6019      	str	r1, [r3, #0]
 80049f8:	e002      	b.n	8004a00 <_printf_i+0x19c>
 80049fa:	066a      	lsls	r2, r5, #25
 80049fc:	d5fb      	bpl.n	80049f6 <_printf_i+0x192>
 80049fe:	8019      	strh	r1, [r3, #0]
 8004a00:	2300      	movs	r3, #0
 8004a02:	6123      	str	r3, [r4, #16]
 8004a04:	4665      	mov	r5, ip
 8004a06:	e7b9      	b.n	800497c <_printf_i+0x118>
 8004a08:	6813      	ldr	r3, [r2, #0]
 8004a0a:	1d19      	adds	r1, r3, #4
 8004a0c:	6011      	str	r1, [r2, #0]
 8004a0e:	681d      	ldr	r5, [r3, #0]
 8004a10:	6862      	ldr	r2, [r4, #4]
 8004a12:	2100      	movs	r1, #0
 8004a14:	4628      	mov	r0, r5
 8004a16:	f7fb fc03 	bl	8000220 <memchr>
 8004a1a:	b108      	cbz	r0, 8004a20 <_printf_i+0x1bc>
 8004a1c:	1b40      	subs	r0, r0, r5
 8004a1e:	6060      	str	r0, [r4, #4]
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	6123      	str	r3, [r4, #16]
 8004a24:	2300      	movs	r3, #0
 8004a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a2a:	e7a7      	b.n	800497c <_printf_i+0x118>
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	462a      	mov	r2, r5
 8004a30:	4639      	mov	r1, r7
 8004a32:	4630      	mov	r0, r6
 8004a34:	47c0      	blx	r8
 8004a36:	3001      	adds	r0, #1
 8004a38:	d0aa      	beq.n	8004990 <_printf_i+0x12c>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	079b      	lsls	r3, r3, #30
 8004a3e:	d413      	bmi.n	8004a68 <_printf_i+0x204>
 8004a40:	68e0      	ldr	r0, [r4, #12]
 8004a42:	9b03      	ldr	r3, [sp, #12]
 8004a44:	4298      	cmp	r0, r3
 8004a46:	bfb8      	it	lt
 8004a48:	4618      	movlt	r0, r3
 8004a4a:	e7a3      	b.n	8004994 <_printf_i+0x130>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	464a      	mov	r2, r9
 8004a50:	4639      	mov	r1, r7
 8004a52:	4630      	mov	r0, r6
 8004a54:	47c0      	blx	r8
 8004a56:	3001      	adds	r0, #1
 8004a58:	d09a      	beq.n	8004990 <_printf_i+0x12c>
 8004a5a:	3501      	adds	r5, #1
 8004a5c:	68e3      	ldr	r3, [r4, #12]
 8004a5e:	9a03      	ldr	r2, [sp, #12]
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	42ab      	cmp	r3, r5
 8004a64:	dcf2      	bgt.n	8004a4c <_printf_i+0x1e8>
 8004a66:	e7eb      	b.n	8004a40 <_printf_i+0x1dc>
 8004a68:	2500      	movs	r5, #0
 8004a6a:	f104 0919 	add.w	r9, r4, #25
 8004a6e:	e7f5      	b.n	8004a5c <_printf_i+0x1f8>
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1ac      	bne.n	80049ce <_printf_i+0x16a>
 8004a74:	7803      	ldrb	r3, [r0, #0]
 8004a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7e:	e76c      	b.n	800495a <_printf_i+0xf6>
 8004a80:	08004d85 	.word	0x08004d85
 8004a84:	08004d96 	.word	0x08004d96

08004a88 <memcpy>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	1e43      	subs	r3, r0, #1
 8004a8c:	440a      	add	r2, r1
 8004a8e:	4291      	cmp	r1, r2
 8004a90:	d100      	bne.n	8004a94 <memcpy+0xc>
 8004a92:	bd10      	pop	{r4, pc}
 8004a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a9c:	e7f7      	b.n	8004a8e <memcpy+0x6>

08004a9e <memmove>:
 8004a9e:	4288      	cmp	r0, r1
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	eb01 0302 	add.w	r3, r1, r2
 8004aa6:	d807      	bhi.n	8004ab8 <memmove+0x1a>
 8004aa8:	1e42      	subs	r2, r0, #1
 8004aaa:	4299      	cmp	r1, r3
 8004aac:	d00a      	beq.n	8004ac4 <memmove+0x26>
 8004aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ab2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ab6:	e7f8      	b.n	8004aaa <memmove+0xc>
 8004ab8:	4283      	cmp	r3, r0
 8004aba:	d9f5      	bls.n	8004aa8 <memmove+0xa>
 8004abc:	1881      	adds	r1, r0, r2
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	42d3      	cmn	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <memmove+0x28>
 8004ac4:	bd10      	pop	{r4, pc}
 8004ac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004aca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ace:	e7f7      	b.n	8004ac0 <memmove+0x22>

08004ad0 <_free_r>:
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	d045      	beq.n	8004b64 <_free_r+0x94>
 8004ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004adc:	1f0c      	subs	r4, r1, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	bfb8      	it	lt
 8004ae2:	18e4      	addlt	r4, r4, r3
 8004ae4:	f000 f8d2 	bl	8004c8c <__malloc_lock>
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <_free_r+0x98>)
 8004aea:	6813      	ldr	r3, [r2, #0]
 8004aec:	4610      	mov	r0, r2
 8004aee:	b933      	cbnz	r3, 8004afe <_free_r+0x2e>
 8004af0:	6063      	str	r3, [r4, #4]
 8004af2:	6014      	str	r4, [r2, #0]
 8004af4:	4628      	mov	r0, r5
 8004af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004afa:	f000 b8c8 	b.w	8004c8e <__malloc_unlock>
 8004afe:	42a3      	cmp	r3, r4
 8004b00:	d90c      	bls.n	8004b1c <_free_r+0x4c>
 8004b02:	6821      	ldr	r1, [r4, #0]
 8004b04:	1862      	adds	r2, r4, r1
 8004b06:	4293      	cmp	r3, r2
 8004b08:	bf04      	itt	eq
 8004b0a:	681a      	ldreq	r2, [r3, #0]
 8004b0c:	685b      	ldreq	r3, [r3, #4]
 8004b0e:	6063      	str	r3, [r4, #4]
 8004b10:	bf04      	itt	eq
 8004b12:	1852      	addeq	r2, r2, r1
 8004b14:	6022      	streq	r2, [r4, #0]
 8004b16:	6004      	str	r4, [r0, #0]
 8004b18:	e7ec      	b.n	8004af4 <_free_r+0x24>
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	b10a      	cbz	r2, 8004b24 <_free_r+0x54>
 8004b20:	42a2      	cmp	r2, r4
 8004b22:	d9fa      	bls.n	8004b1a <_free_r+0x4a>
 8004b24:	6819      	ldr	r1, [r3, #0]
 8004b26:	1858      	adds	r0, r3, r1
 8004b28:	42a0      	cmp	r0, r4
 8004b2a:	d10b      	bne.n	8004b44 <_free_r+0x74>
 8004b2c:	6820      	ldr	r0, [r4, #0]
 8004b2e:	4401      	add	r1, r0
 8004b30:	1858      	adds	r0, r3, r1
 8004b32:	4282      	cmp	r2, r0
 8004b34:	6019      	str	r1, [r3, #0]
 8004b36:	d1dd      	bne.n	8004af4 <_free_r+0x24>
 8004b38:	6810      	ldr	r0, [r2, #0]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	4401      	add	r1, r0
 8004b40:	6019      	str	r1, [r3, #0]
 8004b42:	e7d7      	b.n	8004af4 <_free_r+0x24>
 8004b44:	d902      	bls.n	8004b4c <_free_r+0x7c>
 8004b46:	230c      	movs	r3, #12
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	e7d3      	b.n	8004af4 <_free_r+0x24>
 8004b4c:	6820      	ldr	r0, [r4, #0]
 8004b4e:	1821      	adds	r1, r4, r0
 8004b50:	428a      	cmp	r2, r1
 8004b52:	bf04      	itt	eq
 8004b54:	6811      	ldreq	r1, [r2, #0]
 8004b56:	6852      	ldreq	r2, [r2, #4]
 8004b58:	6062      	str	r2, [r4, #4]
 8004b5a:	bf04      	itt	eq
 8004b5c:	1809      	addeq	r1, r1, r0
 8004b5e:	6021      	streq	r1, [r4, #0]
 8004b60:	605c      	str	r4, [r3, #4]
 8004b62:	e7c7      	b.n	8004af4 <_free_r+0x24>
 8004b64:	bd38      	pop	{r3, r4, r5, pc}
 8004b66:	bf00      	nop
 8004b68:	2000008c 	.word	0x2000008c

08004b6c <_malloc_r>:
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	1ccd      	adds	r5, r1, #3
 8004b70:	f025 0503 	bic.w	r5, r5, #3
 8004b74:	3508      	adds	r5, #8
 8004b76:	2d0c      	cmp	r5, #12
 8004b78:	bf38      	it	cc
 8004b7a:	250c      	movcc	r5, #12
 8004b7c:	2d00      	cmp	r5, #0
 8004b7e:	4606      	mov	r6, r0
 8004b80:	db01      	blt.n	8004b86 <_malloc_r+0x1a>
 8004b82:	42a9      	cmp	r1, r5
 8004b84:	d903      	bls.n	8004b8e <_malloc_r+0x22>
 8004b86:	230c      	movs	r3, #12
 8004b88:	6033      	str	r3, [r6, #0]
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
 8004b8e:	f000 f87d 	bl	8004c8c <__malloc_lock>
 8004b92:	4a21      	ldr	r2, [pc, #132]	; (8004c18 <_malloc_r+0xac>)
 8004b94:	6814      	ldr	r4, [r2, #0]
 8004b96:	4621      	mov	r1, r4
 8004b98:	b991      	cbnz	r1, 8004bc0 <_malloc_r+0x54>
 8004b9a:	4c20      	ldr	r4, [pc, #128]	; (8004c1c <_malloc_r+0xb0>)
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	b91b      	cbnz	r3, 8004ba8 <_malloc_r+0x3c>
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	f000 f863 	bl	8004c6c <_sbrk_r>
 8004ba6:	6020      	str	r0, [r4, #0]
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4630      	mov	r0, r6
 8004bac:	f000 f85e 	bl	8004c6c <_sbrk_r>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	d124      	bne.n	8004bfe <_malloc_r+0x92>
 8004bb4:	230c      	movs	r3, #12
 8004bb6:	6033      	str	r3, [r6, #0]
 8004bb8:	4630      	mov	r0, r6
 8004bba:	f000 f868 	bl	8004c8e <__malloc_unlock>
 8004bbe:	e7e4      	b.n	8004b8a <_malloc_r+0x1e>
 8004bc0:	680b      	ldr	r3, [r1, #0]
 8004bc2:	1b5b      	subs	r3, r3, r5
 8004bc4:	d418      	bmi.n	8004bf8 <_malloc_r+0x8c>
 8004bc6:	2b0b      	cmp	r3, #11
 8004bc8:	d90f      	bls.n	8004bea <_malloc_r+0x7e>
 8004bca:	600b      	str	r3, [r1, #0]
 8004bcc:	50cd      	str	r5, [r1, r3]
 8004bce:	18cc      	adds	r4, r1, r3
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f000 f85c 	bl	8004c8e <__malloc_unlock>
 8004bd6:	f104 000b 	add.w	r0, r4, #11
 8004bda:	1d23      	adds	r3, r4, #4
 8004bdc:	f020 0007 	bic.w	r0, r0, #7
 8004be0:	1ac3      	subs	r3, r0, r3
 8004be2:	d0d3      	beq.n	8004b8c <_malloc_r+0x20>
 8004be4:	425a      	negs	r2, r3
 8004be6:	50e2      	str	r2, [r4, r3]
 8004be8:	e7d0      	b.n	8004b8c <_malloc_r+0x20>
 8004bea:	428c      	cmp	r4, r1
 8004bec:	684b      	ldr	r3, [r1, #4]
 8004bee:	bf16      	itet	ne
 8004bf0:	6063      	strne	r3, [r4, #4]
 8004bf2:	6013      	streq	r3, [r2, #0]
 8004bf4:	460c      	movne	r4, r1
 8004bf6:	e7eb      	b.n	8004bd0 <_malloc_r+0x64>
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	6849      	ldr	r1, [r1, #4]
 8004bfc:	e7cc      	b.n	8004b98 <_malloc_r+0x2c>
 8004bfe:	1cc4      	adds	r4, r0, #3
 8004c00:	f024 0403 	bic.w	r4, r4, #3
 8004c04:	42a0      	cmp	r0, r4
 8004c06:	d005      	beq.n	8004c14 <_malloc_r+0xa8>
 8004c08:	1a21      	subs	r1, r4, r0
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	f000 f82e 	bl	8004c6c <_sbrk_r>
 8004c10:	3001      	adds	r0, #1
 8004c12:	d0cf      	beq.n	8004bb4 <_malloc_r+0x48>
 8004c14:	6025      	str	r5, [r4, #0]
 8004c16:	e7db      	b.n	8004bd0 <_malloc_r+0x64>
 8004c18:	2000008c 	.word	0x2000008c
 8004c1c:	20000090 	.word	0x20000090

08004c20 <_realloc_r>:
 8004c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c22:	4607      	mov	r7, r0
 8004c24:	4614      	mov	r4, r2
 8004c26:	460e      	mov	r6, r1
 8004c28:	b921      	cbnz	r1, 8004c34 <_realloc_r+0x14>
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004c30:	f7ff bf9c 	b.w	8004b6c <_malloc_r>
 8004c34:	b922      	cbnz	r2, 8004c40 <_realloc_r+0x20>
 8004c36:	f7ff ff4b 	bl	8004ad0 <_free_r>
 8004c3a:	4625      	mov	r5, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c40:	f000 f826 	bl	8004c90 <_malloc_usable_size_r>
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	d20f      	bcs.n	8004c68 <_realloc_r+0x48>
 8004c48:	4621      	mov	r1, r4
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	f7ff ff8e 	bl	8004b6c <_malloc_r>
 8004c50:	4605      	mov	r5, r0
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d0f2      	beq.n	8004c3c <_realloc_r+0x1c>
 8004c56:	4631      	mov	r1, r6
 8004c58:	4622      	mov	r2, r4
 8004c5a:	f7ff ff15 	bl	8004a88 <memcpy>
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4638      	mov	r0, r7
 8004c62:	f7ff ff35 	bl	8004ad0 <_free_r>
 8004c66:	e7e9      	b.n	8004c3c <_realloc_r+0x1c>
 8004c68:	4635      	mov	r5, r6
 8004c6a:	e7e7      	b.n	8004c3c <_realloc_r+0x1c>

08004c6c <_sbrk_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4c06      	ldr	r4, [pc, #24]	; (8004c88 <_sbrk_r+0x1c>)
 8004c70:	2300      	movs	r3, #0
 8004c72:	4605      	mov	r5, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	6023      	str	r3, [r4, #0]
 8004c78:	f000 f812 	bl	8004ca0 <_sbrk>
 8004c7c:	1c43      	adds	r3, r0, #1
 8004c7e:	d102      	bne.n	8004c86 <_sbrk_r+0x1a>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	b103      	cbz	r3, 8004c86 <_sbrk_r+0x1a>
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	bd38      	pop	{r3, r4, r5, pc}
 8004c88:	20000760 	.word	0x20000760

08004c8c <__malloc_lock>:
 8004c8c:	4770      	bx	lr

08004c8e <__malloc_unlock>:
 8004c8e:	4770      	bx	lr

08004c90 <_malloc_usable_size_r>:
 8004c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c94:	1f18      	subs	r0, r3, #4
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfbc      	itt	lt
 8004c9a:	580b      	ldrlt	r3, [r1, r0]
 8004c9c:	18c0      	addlt	r0, r0, r3
 8004c9e:	4770      	bx	lr

08004ca0 <_sbrk>:
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <_sbrk+0x14>)
 8004ca2:	6819      	ldr	r1, [r3, #0]
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	b909      	cbnz	r1, 8004cac <_sbrk+0xc>
 8004ca8:	4903      	ldr	r1, [pc, #12]	; (8004cb8 <_sbrk+0x18>)
 8004caa:	6019      	str	r1, [r3, #0]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	4402      	add	r2, r0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	4770      	bx	lr
 8004cb4:	20000094 	.word	0x20000094
 8004cb8:	20000768 	.word	0x20000768

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
