
ACU_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000522c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005554  08005554  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800555c  0800555c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a2c  20000070  080055d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a9c  080055d4  00022a9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a7b  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002300  00000000  00000000  00031b19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  00033e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  00034cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c4b  00000000  00000000  00035a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b42d  00000000  00000000  0005d69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f7ea2  00000000  00000000  00068ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016096a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  001609e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005414 	.word	0x08005414

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005414 	.word	0x08005414

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 ff97 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f806 	bl	800060c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f004 f91a 	bl	8004838 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 ffb1 	bl	8001592 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000648:	f000 ff79 	bl	800153e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004
 8000690:	2000009c 	.word	0x2000009c

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	2000009c 	.word	0x2000009c

080006ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b4:	f7ff ffee 	bl	8000694 <HAL_GetTick>
 80006b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006c4:	d005      	beq.n	80006d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_Delay+0x40>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d2:	bf00      	nop
 80006d4:	f7ff ffde 	bl	8000694 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8f7      	bhi.n	80006d4 <HAL_Delay+0x28>
  {
  }
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e0ed      	b.n	80008de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d102      	bne.n	8000714 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f004 f8b6 	bl	8004880 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 0202 	bic.w	r2, r2, #2
 8000722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000724:	f7ff ffb6 	bl	8000694 <HAL_GetTick>
 8000728:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800072a:	e012      	b.n	8000752 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800072c:	f7ff ffb2 	bl	8000694 <HAL_GetTick>
 8000730:	4602      	mov	r2, r0
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	2b0a      	cmp	r3, #10
 8000738:	d90b      	bls.n	8000752 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2205      	movs	r2, #5
 800074a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e0c5      	b.n	80008de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1e5      	bne.n	800072c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000770:	f7ff ff90 	bl	8000694 <HAL_GetTick>
 8000774:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000776:	e012      	b.n	800079e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000778:	f7ff ff8c 	bl	8000694 <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d90b      	bls.n	800079e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2205      	movs	r2, #5
 8000796:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e09f      	b.n	80008de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0e5      	beq.n	8000778 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7e1b      	ldrb	r3, [r3, #24]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d108      	bne.n	80007c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e007      	b.n	80007d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7e5b      	ldrb	r3, [r3, #25]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d108      	bne.n	80007f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	e007      	b.n	8000800 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7e9b      	ldrb	r3, [r3, #26]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d108      	bne.n	800081a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f042 0220 	orr.w	r2, r2, #32
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	e007      	b.n	800082a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f022 0220 	bic.w	r2, r2, #32
 8000828:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7edb      	ldrb	r3, [r3, #27]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d108      	bne.n	8000844 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f022 0210 	bic.w	r2, r2, #16
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e007      	b.n	8000854 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0210 	orr.w	r2, r2, #16
 8000852:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7f1b      	ldrb	r3, [r3, #28]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d108      	bne.n	800086e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f042 0208 	orr.w	r2, r2, #8
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	e007      	b.n	800087e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f022 0208 	bic.w	r2, r2, #8
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	7f5b      	ldrb	r3, [r3, #29]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d108      	bne.n	8000898 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f042 0204 	orr.w	r2, r2, #4
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	e007      	b.n	80008a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0204 	bic.w	r2, r2, #4
 80008a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	431a      	orrs	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	ea42 0103 	orr.w	r1, r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000900:	7cfb      	ldrb	r3, [r7, #19]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d003      	beq.n	800090e <HAL_CAN_ConfigFilter+0x26>
 8000906:	7cfb      	ldrb	r3, [r7, #19]
 8000908:	2b02      	cmp	r3, #2
 800090a:	f040 80c7 	bne.w	8000a9c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a69      	ldr	r2, [pc, #420]	; (8000ab8 <HAL_CAN_ConfigFilter+0x1d0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d001      	beq.n	800091c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8000918:	4b68      	ldr	r3, [pc, #416]	; (8000abc <HAL_CAN_ConfigFilter+0x1d4>)
 800091a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000922:	f043 0201 	orr.w	r2, r3, #1
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	4a63      	ldr	r2, [pc, #396]	; (8000abc <HAL_CAN_ConfigFilter+0x1d4>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d111      	bne.n	8000958 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800093a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	431a      	orrs	r2, r3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	2201      	movs	r2, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	43db      	mvns	r3, r3
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d123      	bne.n	80009ca <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	43db      	mvns	r3, r3
 800098c:	401a      	ands	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3248      	adds	r2, #72	; 0x48
 80009aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c0:	6979      	ldr	r1, [r7, #20]
 80009c2:	3348      	adds	r3, #72	; 0x48
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d122      	bne.n	8000a18 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	431a      	orrs	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3248      	adds	r2, #72	; 0x48
 80009f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a0e:	6979      	ldr	r1, [r7, #20]
 8000a10:	3348      	adds	r3, #72	; 0x48
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	440b      	add	r3, r1
 8000a16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a32:	e007      	b.n	8000a44 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d109      	bne.n	8000a60 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a5e:	e007      	b.n	8000a70 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d107      	bne.n	8000a88 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a8e:	f023 0201 	bic.w	r2, r3, #1
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e006      	b.n	8000aaa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
  }
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40003400 	.word	0x40003400
 8000abc:	40006400 	.word	0x40006400

08000ac0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d12e      	bne.n	8000b32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f022 0201 	bic.w	r2, r2, #1
 8000aea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000aec:	f7ff fdd2 	bl	8000694 <HAL_GetTick>
 8000af0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000af2:	e012      	b.n	8000b1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af4:	f7ff fdce 	bl	8000694 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d90b      	bls.n	8000b1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2205      	movs	r2, #5
 8000b12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e012      	b.n	8000b40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1e5      	bne.n	8000af4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e006      	b.n	8000b40 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
  }
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b66:	7ffb      	ldrb	r3, [r7, #31]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d003      	beq.n	8000b74 <HAL_CAN_AddTxMessage+0x2c>
 8000b6c:	7ffb      	ldrb	r3, [r7, #31]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	f040 80b8 	bne.w	8000ce4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10a      	bne.n	8000b94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80a0 	beq.w	8000cd4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	0e1b      	lsrs	r3, r3, #24
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d907      	bls.n	8000bb4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e09e      	b.n	8000cf2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10d      	bne.n	8000be2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bd0:	68f9      	ldr	r1, [r7, #12]
 8000bd2:	6809      	ldr	r1, [r1, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3318      	adds	r3, #24
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	440b      	add	r3, r1
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	e00f      	b.n	8000c02 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000bf6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	440b      	add	r3, r1
 8000c00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6819      	ldr	r1, [r3, #0]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3318      	adds	r3, #24
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	440b      	add	r3, r1
 8000c12:	3304      	adds	r3, #4
 8000c14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	7d1b      	ldrb	r3, [r3, #20]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d111      	bne.n	8000c42 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3318      	adds	r3, #24
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	4413      	add	r3, r2
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	6811      	ldr	r1, [r2, #0]
 8000c32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3318      	adds	r3, #24
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	440b      	add	r3, r1
 8000c3e:	3304      	adds	r3, #4
 8000c40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3307      	adds	r3, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	061a      	lsls	r2, r3, #24
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3306      	adds	r3, #6
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	041b      	lsls	r3, r3, #16
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3305      	adds	r3, #5
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	3204      	adds	r2, #4
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	4610      	mov	r0, r2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	6811      	ldr	r1, [r2, #0]
 8000c6a:	ea43 0200 	orr.w	r2, r3, r0
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	440b      	add	r3, r1
 8000c74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	061a      	lsls	r2, r3, #24
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3302      	adds	r3, #2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	4313      	orrs	r3, r2
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	6811      	ldr	r1, [r2, #0]
 8000ca0:	ea43 0200 	orr.w	r2, r3, r0
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	440b      	add	r3, r1
 8000caa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e00e      	b.n	8000cf2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e006      	b.n	8000cf2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
  }
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b087      	sub	sp, #28
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	60f8      	str	r0, [r7, #12]
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d12:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d003      	beq.n	8000d22 <HAL_CAN_GetRxMessage+0x24>
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	f040 80f4 	bne.w	8000f0a <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10e      	bne.n	8000d46 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d116      	bne.n	8000d64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e0e8      	b.n	8000f18 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d107      	bne.n	8000d64 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e0d9      	b.n	8000f18 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	331b      	adds	r3, #27
 8000d6c:	011b      	lsls	r3, r3, #4
 8000d6e:	4413      	add	r3, r2
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0204 	and.w	r2, r3, #4
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10c      	bne.n	8000d9c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	331b      	adds	r3, #27
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	4413      	add	r3, r2
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	0d5b      	lsrs	r3, r3, #21
 8000d92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e00b      	b.n	8000db4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	331b      	adds	r3, #27
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	4413      	add	r3, r2
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	08db      	lsrs	r3, r3, #3
 8000dac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	331b      	adds	r3, #27
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	4413      	add	r3, r2
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	085b      	lsrs	r3, r3, #1
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	331b      	adds	r3, #27
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 020f 	and.w	r2, r3, #15
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	331b      	adds	r3, #27
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	3304      	adds	r3, #4
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	331b      	adds	r3, #27
 8000e04:	011b      	lsls	r3, r3, #4
 8000e06:	4413      	add	r3, r2
 8000e08:	3304      	adds	r3, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0c1b      	lsrs	r3, r3, #16
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	4413      	add	r3, r2
 8000e1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	4413      	add	r3, r2
 8000e34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	0a1a      	lsrs	r2, r3, #8
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	4413      	add	r3, r2
 8000e4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	0c1a      	lsrs	r2, r3, #16
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	4413      	add	r3, r2
 8000e68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	0e1a      	lsrs	r2, r3, #24
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	3303      	adds	r3, #3
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	4413      	add	r3, r2
 8000e82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	4413      	add	r3, r2
 8000e9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0a1a      	lsrs	r2, r3, #8
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	3305      	adds	r3, #5
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	011b      	lsls	r3, r3, #4
 8000eb2:	4413      	add	r3, r2
 8000eb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	0c1a      	lsrs	r2, r3, #16
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	3306      	adds	r3, #6
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	0e1a      	lsrs	r2, r3, #24
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3307      	adds	r3, #7
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0220 	orr.w	r2, r2, #32
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	e007      	b.n	8000f06 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f042 0220 	orr.w	r2, r2, #32
 8000f04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e006      	b.n	8000f18 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
  }
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	371c      	adds	r7, #28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f38:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f3a:	7afb      	ldrb	r3, [r7, #11]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d002      	beq.n	8000f46 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000f40:	7afb      	ldrb	r3, [r7, #11]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d10f      	bne.n	8000f66 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d106      	bne.n	8000f5a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e005      	b.n	8000f66 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f84:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d002      	beq.n	8000f92 <HAL_CAN_ActivateNotification+0x1e>
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d109      	bne.n	8000fa6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	6959      	ldr	r1, [r3, #20]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e006      	b.n	8000fb4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
  }
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b00      	cmp	r3, #0
 8001004:	d07c      	beq.n	8001100 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d023      	beq.n	8001058 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f003 fae0 	bl	80045e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8001028:	e016      	b.n	8001058 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	d004      	beq.n	800103e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
 800103c:	e00c      	b.n	8001058 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d004      	beq.n	8001052 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
 8001050:	e002      	b.n	8001058 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 f965 	bl	8001322 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	2b00      	cmp	r3, #0
 8001060:	d024      	beq.n	80010ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f003 fb02 	bl	8004680 <HAL_CAN_TxMailbox1CompleteCallback>
 800107c:	e016      	b.n	80010ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
 8001090:	e00c      	b.n	80010ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001098:	2b00      	cmp	r3, #0
 800109a:	d004      	beq.n	80010a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	e002      	b.n	80010ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 f945 	bl	8001336 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d024      	beq.n	8001100 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f003 fb28 	bl	8004720 <HAL_CAN_TxMailbox2CompleteCallback>
 80010d0:	e016      	b.n	8001100 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
 80010e4:	e00c      	b.n	8001100 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d004      	beq.n	80010fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	627b      	str	r3, [r7, #36]	; 0x24
 80010f8:	e002      	b.n	8001100 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f925 	bl	800134a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00c      	beq.n	8001124 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0310 	and.w	r3, r3, #16
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2210      	movs	r2, #16
 8001122:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	f003 0304 	and.w	r3, r3, #4
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00b      	beq.n	8001146 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0308 	and.w	r3, r3, #8
 8001134:	2b00      	cmp	r3, #0
 8001136:	d006      	beq.n	8001146 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2208      	movs	r2, #8
 800113e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f003 fa21 	bl	8004588 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d009      	beq.n	8001164 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f003 f9d6 	bl	8004510 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00c      	beq.n	8001188 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	d007      	beq.n	8001188 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2210      	movs	r2, #16
 8001186:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2208      	movs	r2, #8
 80011a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f003 fa07 	bl	80045b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d009      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f003 f9c8 	bl	8004558 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00b      	beq.n	80011ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2210      	movs	r2, #16
 80011e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f8ba 	bl	800135e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00b      	beq.n	800120c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2208      	movs	r2, #8
 8001204:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f8b3 	bl	8001372 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d075      	beq.n	8001302 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	d06c      	beq.n	80012fa <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d008      	beq.n	800123c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125e:	2b00      	cmp	r3, #0
 8001260:	d008      	beq.n	8001274 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03d      	beq.n	80012fa <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001284:	2b00      	cmp	r3, #0
 8001286:	d038      	beq.n	80012fa <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800128e:	2b30      	cmp	r3, #48	; 0x30
 8001290:	d017      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x302>
 8001292:	2b30      	cmp	r3, #48	; 0x30
 8001294:	d804      	bhi.n	80012a0 <HAL_CAN_IRQHandler+0x2e0>
 8001296:	2b10      	cmp	r3, #16
 8001298:	d009      	beq.n	80012ae <HAL_CAN_IRQHandler+0x2ee>
 800129a:	2b20      	cmp	r3, #32
 800129c:	d00c      	beq.n	80012b8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800129e:	e024      	b.n	80012ea <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80012a0:	2b50      	cmp	r3, #80	; 0x50
 80012a2:	d018      	beq.n	80012d6 <HAL_CAN_IRQHandler+0x316>
 80012a4:	2b60      	cmp	r3, #96	; 0x60
 80012a6:	d01b      	beq.n	80012e0 <HAL_CAN_IRQHandler+0x320>
 80012a8:	2b40      	cmp	r3, #64	; 0x40
 80012aa:	d00f      	beq.n	80012cc <HAL_CAN_IRQHandler+0x30c>
            break;
 80012ac:	e01d      	b.n	80012ea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012b6:	e018      	b.n	80012ea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80012b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ba:	f043 0310 	orr.w	r3, r3, #16
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012c0:	e013      	b.n	80012ea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	f043 0320 	orr.w	r3, r3, #32
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012ca:	e00e      	b.n	80012ea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012d4:	e009      	b.n	80012ea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012de:	e004      	b.n	80012ea <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80012e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80012f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2204      	movs	r2, #4
 8001300:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f003 fa53 	bl	80047c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x40>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	05fa0000 	.word	0x05fa0000

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ff29 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b580      	push	{r7, lr}
 8001540:	b086      	sub	sp, #24
 8001542:	af00      	add	r7, sp, #0
 8001544:	4603      	mov	r3, r0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001550:	f7ff ff3e 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	68b9      	ldr	r1, [r7, #8]
 800155a:	6978      	ldr	r0, [r7, #20]
 800155c:	f7ff ff8e 	bl	800147c <NVIC_EncodePriority>
 8001560:	4602      	mov	r2, r0
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff5d 	bl	8001428 <__NVIC_SetPriority>
}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff31 	bl	80013ec <__NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff ffa2 	bl	80014e4 <SysTick_Config>
 80015a0:	4603      	mov	r3, r0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	e175      	b.n	80018b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015cc:	2201      	movs	r2, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	f040 8164 	bne.w	80018b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x4e>
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b12      	cmp	r3, #18
 80015f8:	d123      	bne.n	8001642 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	220f      	movs	r2, #15
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	08da      	lsrs	r2, r3, #3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3208      	adds	r2, #8
 800163c:	69b9      	ldr	r1, [r7, #24]
 800163e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 0203 	and.w	r2, r3, #3
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d00b      	beq.n	8001696 <HAL_GPIO_Init+0xea>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d007      	beq.n	8001696 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168a:	2b11      	cmp	r3, #17
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b12      	cmp	r3, #18
 8001694:	d130      	bne.n	80016f8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	2203      	movs	r2, #3
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016cc:	2201      	movs	r2, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 0201 	and.w	r2, r3, #1
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 80be 	beq.w	80018b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	4b65      	ldr	r3, [pc, #404]	; (80018cc <HAL_GPIO_Init+0x320>)
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	4a64      	ldr	r2, [pc, #400]	; (80018cc <HAL_GPIO_Init+0x320>)
 800173c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001740:	6453      	str	r3, [r2, #68]	; 0x44
 8001742:	4b62      	ldr	r3, [pc, #392]	; (80018cc <HAL_GPIO_Init+0x320>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800174e:	4a60      	ldr	r2, [pc, #384]	; (80018d0 <HAL_GPIO_Init+0x324>)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	220f      	movs	r2, #15
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <HAL_GPIO_Init+0x328>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d037      	beq.n	80017ea <HAL_GPIO_Init+0x23e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a56      	ldr	r2, [pc, #344]	; (80018d8 <HAL_GPIO_Init+0x32c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d031      	beq.n	80017e6 <HAL_GPIO_Init+0x23a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a55      	ldr	r2, [pc, #340]	; (80018dc <HAL_GPIO_Init+0x330>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d02b      	beq.n	80017e2 <HAL_GPIO_Init+0x236>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <HAL_GPIO_Init+0x334>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d025      	beq.n	80017de <HAL_GPIO_Init+0x232>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a53      	ldr	r2, [pc, #332]	; (80018e4 <HAL_GPIO_Init+0x338>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01f      	beq.n	80017da <HAL_GPIO_Init+0x22e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <HAL_GPIO_Init+0x33c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d019      	beq.n	80017d6 <HAL_GPIO_Init+0x22a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a51      	ldr	r2, [pc, #324]	; (80018ec <HAL_GPIO_Init+0x340>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0x226>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a50      	ldr	r2, [pc, #320]	; (80018f0 <HAL_GPIO_Init+0x344>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d00d      	beq.n	80017ce <HAL_GPIO_Init+0x222>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4f      	ldr	r2, [pc, #316]	; (80018f4 <HAL_GPIO_Init+0x348>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d007      	beq.n	80017ca <HAL_GPIO_Init+0x21e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4e      	ldr	r2, [pc, #312]	; (80018f8 <HAL_GPIO_Init+0x34c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d101      	bne.n	80017c6 <HAL_GPIO_Init+0x21a>
 80017c2:	2309      	movs	r3, #9
 80017c4:	e012      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017c6:	230a      	movs	r3, #10
 80017c8:	e010      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017ca:	2308      	movs	r3, #8
 80017cc:	e00e      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017ce:	2307      	movs	r3, #7
 80017d0:	e00c      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017d2:	2306      	movs	r3, #6
 80017d4:	e00a      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017d6:	2305      	movs	r3, #5
 80017d8:	e008      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017da:	2304      	movs	r3, #4
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017de:	2303      	movs	r3, #3
 80017e0:	e004      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_Init+0x240>
 80017ea:	2300      	movs	r3, #0
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	f002 0203 	and.w	r2, r2, #3
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	4093      	lsls	r3, r2
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017fc:	4934      	ldr	r1, [pc, #208]	; (80018d0 <HAL_GPIO_Init+0x324>)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	089b      	lsrs	r3, r3, #2
 8001802:	3302      	adds	r3, #2
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <HAL_GPIO_Init+0x350>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4313      	orrs	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800182e:	4a33      	ldr	r2, [pc, #204]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001834:	4b31      	ldr	r3, [pc, #196]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001858:	4a28      	ldr	r2, [pc, #160]	; (80018fc <HAL_GPIO_Init+0x350>)
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a1e      	ldr	r2, [pc, #120]	; (80018fc <HAL_GPIO_Init+0x350>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_GPIO_Init+0x350>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_GPIO_Init+0x350>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3301      	adds	r3, #1
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	f67f ae86 	bls.w	80015cc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018c0:	bf00      	nop
 80018c2:	3724      	adds	r7, #36	; 0x24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40013800 	.word	0x40013800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020400 	.word	0x40020400
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40021400 	.word	0x40021400
 80018ec:	40021800 	.word	0x40021800
 80018f0:	40021c00 	.word	0x40021c00
 80018f4:	40022000 	.word	0x40022000
 80018f8:	40022400 	.word	0x40022400
 80018fc:	40013c00 	.word	0x40013c00

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800191c:	e003      	b.n	8001926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	041a      	lsls	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	887b      	ldrh	r3, [r7, #2]
 8001944:	401a      	ands	r2, r3
 8001946:	887b      	ldrh	r3, [r7, #2]
 8001948:	429a      	cmp	r2, r3
 800194a:	d104      	bne.n	8001956 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001954:	e002      	b.n	800195c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001956:	887a      	ldrh	r2, [r7, #2]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	619a      	str	r2, [r3, #24]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	; 0x40
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_PWREx_EnableOverDrive+0x98>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001994:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001996:	f7fe fe7d 	bl	8000694 <HAL_GetTick>
 800199a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800199c:	e009      	b.n	80019b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800199e:	f7fe fe79 	bl	8000694 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ac:	d901      	bls.n	80019b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e022      	b.n	80019f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019be:	d1ee      	bne.n	800199e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019cc:	f7fe fe62 	bl	8000694 <HAL_GetTick>
 80019d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019d2:	e009      	b.n	80019e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019d4:	f7fe fe5e 	bl	8000694 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019e2:	d901      	bls.n	80019e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e007      	b.n	80019f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019f4:	d1ee      	bne.n	80019d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e25e      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a2c:	4b96      	ldr	r3, [pc, #600]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d00c      	beq.n	8001a52 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a38:	4b93      	ldr	r3, [pc, #588]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 030c 	and.w	r3, r3, #12
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d112      	bne.n	8001a6a <HAL_RCC_OscConfig+0x62>
 8001a44:	4b90      	ldr	r3, [pc, #576]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a50:	d10b      	bne.n	8001a6a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a52:	4b8d      	ldr	r3, [pc, #564]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d06c      	beq.n	8001b38 <HAL_RCC_OscConfig+0x130>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d168      	bne.n	8001b38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e238      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x7a>
 8001a74:	4b84      	ldr	r3, [pc, #528]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a83      	ldr	r2, [pc, #524]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	e02e      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x9c>
 8001a8a:	4b7f      	ldr	r3, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7e      	ldr	r2, [pc, #504]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	4b7c      	ldr	r3, [pc, #496]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a7b      	ldr	r2, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e01d      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aac:	d10c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xc0>
 8001aae:	4b76      	ldr	r3, [pc, #472]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a75      	ldr	r2, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a72      	ldr	r2, [pc, #456]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e00b      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd8>
 8001ac8:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6e      	ldr	r2, [pc, #440]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6b      	ldr	r2, [pc, #428]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d013      	beq.n	8001b10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7fe fdd4 	bl	8000694 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af0:	f7fe fdd0 	bl	8000694 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b64      	cmp	r3, #100	; 0x64
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e1ec      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0xe8>
 8001b0e:	e014      	b.n	8001b3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7fe fdc0 	bl	8000694 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b18:	f7fe fdbc 	bl	8000694 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e1d8      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	4b57      	ldr	r3, [pc, #348]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x110>
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d069      	beq.n	8001c1a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00b      	beq.n	8001b6a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b52:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x190>
 8001b5e:	4b4a      	ldr	r3, [pc, #296]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d116      	bne.n	8001b98 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x17a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d001      	beq.n	8001b82 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1ac      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	493d      	ldr	r1, [pc, #244]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	e040      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba0:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a38      	ldr	r2, [pc, #224]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7fe fd72 	bl	8000694 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7fe fd6e 	bl	8000694 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e18a      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4929      	ldr	r1, [pc, #164]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
 8001be6:	e018      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7fe fd4e 	bl	8000694 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7fe fd4a 	bl	8000694 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e166      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d038      	beq.n	8001c98 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d019      	beq.n	8001c62 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3a:	f7fe fd2b 	bl	8000694 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c42:	f7fe fd27 	bl	8000694 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e143      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x23a>
 8001c60:	e01a      	b.n	8001c98 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_RCC_OscConfig+0x280>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6e:	f7fe fd11 	bl	8000694 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c74:	e00a      	b.n	8001c8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c76:	f7fe fd0d 	bl	8000694 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d903      	bls.n	8001c8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e129      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
 8001c88:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8c:	4b95      	ldr	r3, [pc, #596]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1ee      	bne.n	8001c76 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f000 80a4 	beq.w	8001dee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b8f      	ldr	r3, [pc, #572]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10d      	bne.n	8001cce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	4b8c      	ldr	r3, [pc, #560]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a8b      	ldr	r2, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b89      	ldr	r3, [pc, #548]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cce:	4b86      	ldr	r3, [pc, #536]	; (8001ee8 <HAL_RCC_OscConfig+0x4e0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d118      	bne.n	8001d0c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001cda:	4b83      	ldr	r3, [pc, #524]	; (8001ee8 <HAL_RCC_OscConfig+0x4e0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a82      	ldr	r2, [pc, #520]	; (8001ee8 <HAL_RCC_OscConfig+0x4e0>)
 8001ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe fcd5 	bl	8000694 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001cee:	f7fe fcd1 	bl	8000694 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b64      	cmp	r3, #100	; 0x64
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0ed      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d00:	4b79      	ldr	r3, [pc, #484]	; (8001ee8 <HAL_RCC_OscConfig+0x4e0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d106      	bne.n	8001d22 <HAL_RCC_OscConfig+0x31a>
 8001d14:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d18:	4a72      	ldr	r2, [pc, #456]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d20:	e02d      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x33c>
 8001d2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2e:	4a6d      	ldr	r2, [pc, #436]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6713      	str	r3, [r2, #112]	; 0x70
 8001d36:	4b6b      	ldr	r3, [pc, #428]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d3c:	f023 0304 	bic.w	r3, r3, #4
 8001d40:	6713      	str	r3, [r2, #112]	; 0x70
 8001d42:	e01c      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d10c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x35e>
 8001d4c:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	4a64      	ldr	r2, [pc, #400]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d52:	f043 0304 	orr.w	r3, r3, #4
 8001d56:	6713      	str	r3, [r2, #112]	; 0x70
 8001d58:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	4a61      	ldr	r2, [pc, #388]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	; 0x70
 8001d64:	e00b      	b.n	8001d7e <HAL_RCC_OscConfig+0x376>
 8001d66:	4b5f      	ldr	r3, [pc, #380]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d6c:	f023 0301 	bic.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
 8001d72:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d015      	beq.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d86:	f7fe fc85 	bl	8000694 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7fe fc81 	bl	8000694 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e09b      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCC_OscConfig+0x386>
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7fe fc6f 	bl	8000694 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7fe fc6b 	bl	8000694 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e085      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1ee      	bne.n	8001dba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ddc:	7dfb      	ldrb	r3, [r7, #23]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d105      	bne.n	8001dee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a3f      	ldr	r2, [pc, #252]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d071      	beq.n	8001eda <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df6:	4b3b      	ldr	r3, [pc, #236]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d069      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d14b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a35      	ldr	r2, [pc, #212]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7fe fc3d 	bl	8000694 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1e:	f7fe fc39 	bl	8000694 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e055      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f0      	bne.n	8001e1e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	019b      	lsls	r3, r3, #6
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	3b01      	subs	r3, #1
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	071b      	lsls	r3, r3, #28
 8001e68:	491e      	ldr	r1, [pc, #120]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fc0b 	bl	8000694 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e82:	f7fe fc07 	bl	8000694 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e023      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x47a>
 8001ea0:	e01b      	b.n	8001eda <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe fbf1 	bl	8000694 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe fbed 	bl	8000694 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e009      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_OscConfig+0x4dc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4ae>
 8001ed4:	e001      	b.n	8001eda <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0ce      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b69      	ldr	r3, [pc, #420]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b66      	ldr	r3, [pc, #408]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 020f 	bic.w	r2, r3, #15
 8001f1a:	4964      	ldr	r1, [pc, #400]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b62      	ldr	r3, [pc, #392]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b6      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b52      	ldr	r3, [pc, #328]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	4a51      	ldr	r2, [pc, #324]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b4f      	ldr	r3, [pc, #316]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494c      	ldr	r1, [pc, #304]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d040      	beq.n	8002010 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d115      	bne.n	8001fce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07d      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e071      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e069      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f023 0203 	bic.w	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4935      	ldr	r1, [pc, #212]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe0:	f7fe fb58 	bl	8000694 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe8:	f7fe fb54 	bl	8000694 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e051      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d1eb      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 030f 	and.w	r3, r3, #15
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d210      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 020f 	bic.w	r2, r3, #15
 8002026:	4921      	ldr	r1, [pc, #132]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e030      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4915      	ldr	r1, [pc, #84]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490d      	ldr	r1, [pc, #52]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f81d 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	fa21 f303 	lsr.w	r3, r1, r3
 8002096:	4a08      	ldr	r2, [pc, #32]	; (80020b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800209a:	2000      	movs	r0, #0
 800209c:	f7fe fab6 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023c00 	.word	0x40023c00
 80020b0:	40023800 	.word	0x40023800
 80020b4:	08005508 	.word	0x08005508
 80020b8:	20000008 	.word	0x20000008

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d2:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d007      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x32>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d008      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x38>
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 808d 	bne.w	8002202 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020e8:	4b4b      	ldr	r3, [pc, #300]	; (8002218 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020ea:	60bb      	str	r3, [r7, #8]
       break;
 80020ec:	e08c      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ee:	4b4b      	ldr	r3, [pc, #300]	; (800221c <HAL_RCC_GetSysClockFreq+0x160>)
 80020f0:	60bb      	str	r3, [r7, #8]
      break;
 80020f2:	e089      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f4:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020fe:	4b45      	ldr	r3, [pc, #276]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d023      	beq.n	8002152 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	099b      	lsrs	r3, r3, #6
 8002110:	f04f 0400 	mov.w	r4, #0
 8002114:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	ea03 0501 	and.w	r5, r3, r1
 8002120:	ea04 0602 	and.w	r6, r4, r2
 8002124:	4a3d      	ldr	r2, [pc, #244]	; (800221c <HAL_RCC_GetSysClockFreq+0x160>)
 8002126:	fb02 f106 	mul.w	r1, r2, r6
 800212a:	2200      	movs	r2, #0
 800212c:	fb02 f205 	mul.w	r2, r2, r5
 8002130:	440a      	add	r2, r1
 8002132:	493a      	ldr	r1, [pc, #232]	; (800221c <HAL_RCC_GetSysClockFreq+0x160>)
 8002134:	fba5 0101 	umull	r0, r1, r5, r1
 8002138:	1853      	adds	r3, r2, r1
 800213a:	4619      	mov	r1, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f04f 0400 	mov.w	r4, #0
 8002142:	461a      	mov	r2, r3
 8002144:	4623      	mov	r3, r4
 8002146:	f7fe f8d3 	bl	80002f0 <__aeabi_uldivmod>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e049      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	ea03 0501 	and.w	r5, r3, r1
 8002168:	ea04 0602 	and.w	r6, r4, r2
 800216c:	4629      	mov	r1, r5
 800216e:	4632      	mov	r2, r6
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	f04f 0400 	mov.w	r4, #0
 8002178:	0154      	lsls	r4, r2, #5
 800217a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800217e:	014b      	lsls	r3, r1, #5
 8002180:	4619      	mov	r1, r3
 8002182:	4622      	mov	r2, r4
 8002184:	1b49      	subs	r1, r1, r5
 8002186:	eb62 0206 	sbc.w	r2, r2, r6
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f04f 0400 	mov.w	r4, #0
 8002192:	0194      	lsls	r4, r2, #6
 8002194:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002198:	018b      	lsls	r3, r1, #6
 800219a:	1a5b      	subs	r3, r3, r1
 800219c:	eb64 0402 	sbc.w	r4, r4, r2
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	00e2      	lsls	r2, r4, #3
 80021aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021ae:	00d9      	lsls	r1, r3, #3
 80021b0:	460b      	mov	r3, r1
 80021b2:	4614      	mov	r4, r2
 80021b4:	195b      	adds	r3, r3, r5
 80021b6:	eb44 0406 	adc.w	r4, r4, r6
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	02a2      	lsls	r2, r4, #10
 80021c4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021c8:	0299      	lsls	r1, r3, #10
 80021ca:	460b      	mov	r3, r1
 80021cc:	4614      	mov	r4, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	4621      	mov	r1, r4
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	f7fe f888 	bl	80002f0 <__aeabi_uldivmod>
 80021e0:	4603      	mov	r3, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	3301      	adds	r3, #1
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	60bb      	str	r3, [r7, #8]
      break;
 8002200:	e002      	b.n	8002208 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002204:	60bb      	str	r3, [r7, #8]
      break;
 8002206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002208:	68bb      	ldr	r3, [r7, #8]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	00f42400 	.word	0x00f42400
 800221c:	017d7840 	.word	0x017d7840

08002220 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_RCC_GetHCLKFreq+0x14>)
 8002226:	681b      	ldr	r3, [r3, #0]
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008

08002238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800223c:	f7ff fff0 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002240:	4601      	mov	r1, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	0a9b      	lsrs	r3, r3, #10
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4a03      	ldr	r2, [pc, #12]	; (800225c <HAL_RCC_GetPCLK1Freq+0x24>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40023800 	.word	0x40023800
 800225c:	08005518 	.word	0x08005518

08002260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002264:	f7ff ffdc 	bl	8002220 <HAL_RCC_GetHCLKFreq>
 8002268:	4601      	mov	r1, r0
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	0b5b      	lsrs	r3, r3, #13
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	4a03      	ldr	r2, [pc, #12]	; (8002284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002276:	5cd3      	ldrb	r3, [r2, r3]
 8002278:	fa21 f303 	lsr.w	r3, r1, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40023800 	.word	0x40023800
 8002284:	08005518 	.word	0x08005518

08002288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d012      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022b0:	4b69      	ldr	r3, [pc, #420]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a68      	ldr	r2, [pc, #416]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022ba:	6093      	str	r3, [r2, #8]
 80022bc:	4b66      	ldr	r3, [pc, #408]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c4:	4964      	ldr	r1, [pc, #400]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d017      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	4959      	ldr	r1, [pc, #356]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002300:	d101      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d017      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800231e:	4b4e      	ldr	r3, [pc, #312]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002324:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	494a      	ldr	r1, [pc, #296]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 808b 	beq.w	8002482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	4a39      	ldr	r2, [pc, #228]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	6413      	str	r3, [r2, #64]	; 0x40
 8002378:	4b37      	ldr	r3, [pc, #220]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a34      	ldr	r2, [pc, #208]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002390:	f7fe f980 	bl	8000694 <HAL_GetTick>
 8002394:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe f97c 	bl	8000694 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e38d      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023aa:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023b6:	4b28      	ldr	r3, [pc, #160]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d035      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d02e      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023d4:	4b20      	ldr	r3, [pc, #128]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023de:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023ea:	4b1b      	ldr	r3, [pc, #108]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	d114      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe f944 	bl	8000694 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	e00a      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002410:	f7fe f940 	bl	8000694 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e34f      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ee      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800243e:	d111      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800244e:	400b      	ands	r3, r1
 8002450:	4901      	ldr	r1, [pc, #4]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
 8002456:	e00b      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000
 8002460:	0ffffcff 	.word	0x0ffffcff
 8002464:	4bb3      	ldr	r3, [pc, #716]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4ab2      	ldr	r2, [pc, #712]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800246a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800246e:	6093      	str	r3, [r2, #8]
 8002470:	4bb0      	ldr	r3, [pc, #704]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002472:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	49ad      	ldr	r1, [pc, #692]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247e:	4313      	orrs	r3, r2
 8002480:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0310 	and.w	r3, r3, #16
 800248a:	2b00      	cmp	r3, #0
 800248c:	d010      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800248e:	4ba9      	ldr	r3, [pc, #676]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002494:	4aa7      	ldr	r2, [pc, #668]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800249e:	4ba5      	ldr	r3, [pc, #660]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	49a2      	ldr	r1, [pc, #648]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024bc:	4b9d      	ldr	r3, [pc, #628]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ca:	499a      	ldr	r1, [pc, #616]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024de:	4b95      	ldr	r3, [pc, #596]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024ec:	4991      	ldr	r1, [pc, #580]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002500:	4b8c      	ldr	r3, [pc, #560]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250e:	4989      	ldr	r1, [pc, #548]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002522:	4b84      	ldr	r3, [pc, #528]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4980      	ldr	r1, [pc, #512]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002544:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	f023 0203 	bic.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4978      	ldr	r1, [pc, #480]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002566:	4b73      	ldr	r3, [pc, #460]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	f023 020c 	bic.w	r2, r3, #12
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	496f      	ldr	r1, [pc, #444]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002588:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	4967      	ldr	r1, [pc, #412]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025aa:	4b62      	ldr	r3, [pc, #392]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b8:	495e      	ldr	r1, [pc, #376]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025cc:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	4956      	ldr	r1, [pc, #344]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025ee:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	494d      	ldr	r1, [pc, #308]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002610:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261e:	4945      	ldr	r1, [pc, #276]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002632:	4b40      	ldr	r3, [pc, #256]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002640:	493c      	ldr	r1, [pc, #240]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002662:	4934      	ldr	r1, [pc, #208]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d011      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002676:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002684:	492b      	ldr	r1, [pc, #172]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002694:	d101      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002696:	2301      	movs	r3, #1
 8002698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026a6:	2301      	movs	r3, #1
 80026a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026b6:	4b1f      	ldr	r3, [pc, #124]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	491b      	ldr	r1, [pc, #108]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00b      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e8:	4912      	ldr	r1, [pc, #72]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00b      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800270c:	4909      	ldr	r1, [pc, #36]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00f      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002722:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002730:	e002      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	4985      	ldr	r1, [pc, #532]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800273a:	4313      	orrs	r3, r2
 800273c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800274c:	4b80      	ldr	r3, [pc, #512]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800274e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002752:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800275c:	497c      	ldr	r1, [pc, #496]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d005      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002772:	f040 80d6 	bne.w	8002922 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002776:	4b76      	ldr	r3, [pc, #472]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a75      	ldr	r2, [pc, #468]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800277c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002782:	f7fd ff87 	bl	8000694 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800278a:	f7fd ff83 	bl	8000694 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e194      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800279c:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d021      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d11d      	bne.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c2:	0c1b      	lsrs	r3, r3, #16
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ca:	4b61      	ldr	r3, [pc, #388]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d0:	0e1b      	lsrs	r3, r3, #24
 80027d2:	f003 030f 	and.w	r3, r3, #15
 80027d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	019a      	lsls	r2, r3, #6
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	061b      	lsls	r3, r3, #24
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	071b      	lsls	r3, r3, #28
 80027f0:	4957      	ldr	r1, [pc, #348]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002816:	2b00      	cmp	r3, #0
 8002818:	d02e      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002822:	d129      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002824:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002832:	4b47      	ldr	r3, [pc, #284]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002838:	0f1b      	lsrs	r3, r3, #28
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	019a      	lsls	r2, r3, #6
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	431a      	orrs	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	071b      	lsls	r3, r3, #28
 8002858:	493d      	ldr	r1, [pc, #244]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002860:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002866:	f023 021f 	bic.w	r2, r3, #31
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	3b01      	subs	r3, #1
 8002870:	4937      	ldr	r1, [pc, #220]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01d      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002884:	4b32      	ldr	r3, [pc, #200]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800288a:	0e1b      	lsrs	r3, r3, #24
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002898:	0f1b      	lsrs	r3, r3, #28
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	019a      	lsls	r2, r3, #6
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	041b      	lsls	r3, r3, #16
 80028ac:	431a      	orrs	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	061b      	lsls	r3, r3, #24
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	071b      	lsls	r3, r3, #28
 80028b8:	4925      	ldr	r1, [pc, #148]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d011      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	019a      	lsls	r2, r3, #6
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	061b      	lsls	r3, r3, #24
 80028e0:	431a      	orrs	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	071b      	lsls	r3, r3, #28
 80028e8:	4919      	ldr	r1, [pc, #100]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fd feca 	bl	8000694 <HAL_GetTick>
 8002900:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002904:	f7fd fec6 	bl	8000694 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0d7      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002916:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	2b01      	cmp	r3, #1
 8002926:	f040 80cd 	bne.w	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002936:	f7fd fead 	bl	8000694 <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800293e:	f7fd fea9 	bl	8000694 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b64      	cmp	r3, #100	; 0x64
 800294a:	d903      	bls.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e0ba      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002950:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002954:	4b5e      	ldr	r3, [pc, #376]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800295c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002960:	d0ed      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800297e:	2b00      	cmp	r3, #0
 8002980:	d02e      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12a      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800298a:	4b51      	ldr	r3, [pc, #324]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002998:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	0f1b      	lsrs	r3, r3, #28
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	019a      	lsls	r2, r3, #6
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	061b      	lsls	r3, r3, #24
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	4944      	ldr	r1, [pc, #272]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	3b01      	subs	r3, #1
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	493d      	ldr	r1, [pc, #244]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d022      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f4:	d11d      	bne.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029f6:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	0e1b      	lsrs	r3, r3, #24
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	0f1b      	lsrs	r3, r3, #28
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	019a      	lsls	r2, r3, #6
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	041b      	lsls	r3, r3, #16
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	061b      	lsls	r3, r3, #24
 8002a24:	431a      	orrs	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	071b      	lsls	r3, r3, #28
 8002a2a:	4929      	ldr	r1, [pc, #164]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d028      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a44:	0e1b      	lsrs	r3, r3, #24
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	019a      	lsls	r2, r3, #6
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	431a      	orrs	r2, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	071b      	lsls	r3, r3, #28
 8002a72:	4917      	ldr	r1, [pc, #92]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	4911      	ldr	r1, [pc, #68]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a90:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a9c:	f7fd fdfa 	bl	8000694 <HAL_GetTick>
 8002aa0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aa4:	f7fd fdf6 	bl	8000694 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e007      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac2:	d1ef      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3720      	adds	r7, #32
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800

08002ad4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e01d      	b.n	8002b22 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d106      	bne.n	8002b00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f001 ff04 	bl	8004908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f000 fa0a 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d122      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d11b      	bne.n	8002b86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 0202 	mvn.w	r2, #2
 8002b56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f9bf 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002b72:	e005      	b.n	8002b80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f9b1 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f9c2 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d122      	bne.n	8002bda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d11b      	bne.n	8002bda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f06f 0204 	mvn.w	r2, #4
 8002baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f995 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002bc6:	e005      	b.n	8002bd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f987 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f998 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d122      	bne.n	8002c2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d11b      	bne.n	8002c2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f06f 0208 	mvn.w	r2, #8
 8002bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2204      	movs	r2, #4
 8002c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f96b 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002c1a:	e005      	b.n	8002c28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f95d 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f96e 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d122      	bne.n	8002c82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b10      	cmp	r3, #16
 8002c48:	d11b      	bne.n	8002c82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f06f 0210 	mvn.w	r2, #16
 8002c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2208      	movs	r2, #8
 8002c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f941 	bl	8002ef0 <HAL_TIM_IC_CaptureCallback>
 8002c6e:	e005      	b.n	8002c7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f933 	bl	8002edc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f944 	bl	8002f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d10e      	bne.n	8002cae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f06f 0201 	mvn.w	r2, #1
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f001 fbe1 	bl	8004470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d10e      	bne.n	8002cda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b80      	cmp	r3, #128	; 0x80
 8002cc8:	d107      	bne.n	8002cda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fac9 	bl	800326c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fabc 	bl	8003280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d10e      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d107      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8f2 	bl	8002f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d10e      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0220 	mvn.w	r2, #32
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa7c 	bl	8003258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_ConfigClockSource+0x18>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0a6      	b.n	8002ece <HAL_TIM_ConfigClockSource+0x166>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4b4f      	ldr	r3, [pc, #316]	; (8002ed8 <HAL_TIM_ConfigClockSource+0x170>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d067      	beq.n	8002e88 <HAL_TIM_ConfigClockSource+0x120>
 8002db8:	2b40      	cmp	r3, #64	; 0x40
 8002dba:	d80b      	bhi.n	8002dd4 <HAL_TIM_ConfigClockSource+0x6c>
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d073      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0x140>
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d802      	bhi.n	8002dca <HAL_TIM_ConfigClockSource+0x62>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d06f      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002dc8:	e078      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d06c      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0x140>
 8002dce:	2b30      	cmp	r3, #48	; 0x30
 8002dd0:	d06a      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002dd2:	e073      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d00d      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0x8c>
 8002dd8:	2b70      	cmp	r3, #112	; 0x70
 8002dda:	d804      	bhi.n	8002de6 <HAL_TIM_ConfigClockSource+0x7e>
 8002ddc:	2b50      	cmp	r3, #80	; 0x50
 8002dde:	d033      	beq.n	8002e48 <HAL_TIM_ConfigClockSource+0xe0>
 8002de0:	2b60      	cmp	r3, #96	; 0x60
 8002de2:	d041      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002de4:	e06a      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dea:	d066      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x152>
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df0:	d017      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002df2:	e063      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f000 f9ac 	bl	8003160 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	609a      	str	r2, [r3, #8]
      break;
 8002e20:	e04c      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6899      	ldr	r1, [r3, #8]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f000 f995 	bl	8003160 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e44:	609a      	str	r2, [r3, #8]
      break;
 8002e46:	e039      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	461a      	mov	r2, r3
 8002e56:	f000 f909 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2150      	movs	r1, #80	; 0x50
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f962 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002e66:	e029      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	461a      	mov	r2, r3
 8002e76:	f000 f928 	bl	80030ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2160      	movs	r1, #96	; 0x60
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 f952 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002e86:	e019      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	461a      	mov	r2, r3
 8002e96:	f000 f8e9 	bl	800306c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2140      	movs	r1, #64	; 0x40
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 f942 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002ea6:	e009      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	f000 f939 	bl	800312a <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e000      	b.n	8002ebc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002eba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	fffeff88 	.word	0xfffeff88

08002edc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a40      	ldr	r2, [pc, #256]	; (8003040 <TIM_Base_SetConfig+0x114>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d00f      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a3d      	ldr	r2, [pc, #244]	; (8003044 <TIM_Base_SetConfig+0x118>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a3c      	ldr	r2, [pc, #240]	; (8003048 <TIM_Base_SetConfig+0x11c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3b      	ldr	r2, [pc, #236]	; (800304c <TIM_Base_SetConfig+0x120>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <TIM_Base_SetConfig+0x124>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2f      	ldr	r2, [pc, #188]	; (8003040 <TIM_Base_SetConfig+0x114>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d027      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <TIM_Base_SetConfig+0x118>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d023      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2b      	ldr	r2, [pc, #172]	; (8003048 <TIM_Base_SetConfig+0x11c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2a      	ldr	r2, [pc, #168]	; (800304c <TIM_Base_SetConfig+0x120>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a29      	ldr	r2, [pc, #164]	; (8003050 <TIM_Base_SetConfig+0x124>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d017      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a28      	ldr	r2, [pc, #160]	; (8003054 <TIM_Base_SetConfig+0x128>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <TIM_Base_SetConfig+0x12c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00f      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a26      	ldr	r2, [pc, #152]	; (800305c <TIM_Base_SetConfig+0x130>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <TIM_Base_SetConfig+0x134>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a24      	ldr	r2, [pc, #144]	; (8003064 <TIM_Base_SetConfig+0x138>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	; (8003068 <TIM_Base_SetConfig+0x13c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d108      	bne.n	8002ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <TIM_Base_SetConfig+0x114>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0xf8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <TIM_Base_SetConfig+0x124>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	615a      	str	r2, [r3, #20]
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40010000 	.word	0x40010000
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800
 800304c:	40000c00 	.word	0x40000c00
 8003050:	40010400 	.word	0x40010400
 8003054:	40014000 	.word	0x40014000
 8003058:	40014400 	.word	0x40014400
 800305c:	40014800 	.word	0x40014800
 8003060:	40001800 	.word	0x40001800
 8003064:	40001c00 	.word	0x40001c00
 8003068:	40002000 	.word	0x40002000

0800306c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f023 0201 	bic.w	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f023 030a 	bic.w	r3, r3, #10
 80030a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b087      	sub	sp, #28
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f023 0210 	bic.w	r2, r3, #16
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	031b      	lsls	r3, r3, #12
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003106:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800312a:	b480      	push	{r7}
 800312c:	b085      	sub	sp, #20
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003140:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	f043 0307 	orr.w	r3, r3, #7
 800314c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	609a      	str	r2, [r3, #8]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003160:	b480      	push	{r7}
 8003162:	b087      	sub	sp, #28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	021a      	lsls	r2, r3, #8
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	431a      	orrs	r2, r3
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	4313      	orrs	r3, r2
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	609a      	str	r2, [r3, #8]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e045      	b.n	8003244 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1c      	ldr	r2, [pc, #112]	; (8003250 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d004      	beq.n	80031ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003216:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	4313      	orrs	r3, r2
 8003220:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	40010000 	.word	0x40010000
 8003254:	40010400 	.word	0x40010400

08003258 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e040      	b.n	8003328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f001 fb44 	bl	8004944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8be 	bl	8003454 <UART_SetConfig>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e022      	b.n	8003328 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fb56 	bl	800399c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800330e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fbdd 	bl	8003ae0 <UART_CheckIdleState>
 8003326:	4603      	mov	r3, r0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08a      	sub	sp, #40	; 0x28
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003344:	2b20      	cmp	r3, #32
 8003346:	d17f      	bne.n	8003448 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_UART_Transmit+0x24>
 800334e:	88fb      	ldrh	r3, [r7, #6]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e078      	b.n	800344a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_UART_Transmit+0x36>
 8003362:	2302      	movs	r3, #2
 8003364:	e071      	b.n	800344a <HAL_UART_Transmit+0x11a>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2221      	movs	r2, #33	; 0x21
 8003378:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800337a:	f7fd f98b 	bl	8000694 <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	88fa      	ldrh	r2, [r7, #6]
 8003384:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d108      	bne.n	80033ac <HAL_UART_Transmit+0x7c>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e003      	b.n	80033b4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033b4:	e02c      	b.n	8003410 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fbbc 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e03c      	b.n	800344a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10b      	bne.n	80033ee <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	3302      	adds	r3, #2
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	e007      	b.n	80033fe <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	781a      	ldrb	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	3301      	adds	r3, #1
 80033fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1cc      	bne.n	80033b6 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fb89 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e009      	b.n	800344a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003444:	2300      	movs	r3, #0
 8003446:	e000      	b.n	800344a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003448:	2302      	movs	r3, #2
  }
}
 800344a:	4618      	mov	r0, r3
 800344c:	3720      	adds	r7, #32
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4bb1      	ldr	r3, [pc, #708]	; (8003748 <UART_SetConfig+0x2f4>)
 8003484:	4013      	ands	r3, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	430b      	orrs	r3, r1
 800348e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	699b      	ldr	r3, [r3, #24]
 80034aa:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a9f      	ldr	r2, [pc, #636]	; (800374c <UART_SetConfig+0x2f8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d121      	bne.n	8003518 <UART_SetConfig+0xc4>
 80034d4:	4b9e      	ldr	r3, [pc, #632]	; (8003750 <UART_SetConfig+0x2fc>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d816      	bhi.n	8003510 <UART_SetConfig+0xbc>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0x94>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003505 	.word	0x08003505
 80034f0:	080034ff 	.word	0x080034ff
 80034f4:	0800350b 	.word	0x0800350b
 80034f8:	2301      	movs	r3, #1
 80034fa:	77fb      	strb	r3, [r7, #31]
 80034fc:	e151      	b.n	80037a2 <UART_SetConfig+0x34e>
 80034fe:	2302      	movs	r3, #2
 8003500:	77fb      	strb	r3, [r7, #31]
 8003502:	e14e      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003504:	2304      	movs	r3, #4
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e14b      	b.n	80037a2 <UART_SetConfig+0x34e>
 800350a:	2308      	movs	r3, #8
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e148      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003510:	2310      	movs	r3, #16
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	bf00      	nop
 8003516:	e144      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a8d      	ldr	r2, [pc, #564]	; (8003754 <UART_SetConfig+0x300>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d134      	bne.n	800358c <UART_SetConfig+0x138>
 8003522:	4b8b      	ldr	r3, [pc, #556]	; (8003750 <UART_SetConfig+0x2fc>)
 8003524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b0c      	cmp	r3, #12
 800352e:	d829      	bhi.n	8003584 <UART_SetConfig+0x130>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <UART_SetConfig+0xe4>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800356d 	.word	0x0800356d
 800353c:	08003585 	.word	0x08003585
 8003540:	08003585 	.word	0x08003585
 8003544:	08003585 	.word	0x08003585
 8003548:	08003579 	.word	0x08003579
 800354c:	08003585 	.word	0x08003585
 8003550:	08003585 	.word	0x08003585
 8003554:	08003585 	.word	0x08003585
 8003558:	08003573 	.word	0x08003573
 800355c:	08003585 	.word	0x08003585
 8003560:	08003585 	.word	0x08003585
 8003564:	08003585 	.word	0x08003585
 8003568:	0800357f 	.word	0x0800357f
 800356c:	2300      	movs	r3, #0
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e117      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003572:	2302      	movs	r3, #2
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e114      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003578:	2304      	movs	r3, #4
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e111      	b.n	80037a2 <UART_SetConfig+0x34e>
 800357e:	2308      	movs	r3, #8
 8003580:	77fb      	strb	r3, [r7, #31]
 8003582:	e10e      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003584:	2310      	movs	r3, #16
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	bf00      	nop
 800358a:	e10a      	b.n	80037a2 <UART_SetConfig+0x34e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a71      	ldr	r2, [pc, #452]	; (8003758 <UART_SetConfig+0x304>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d120      	bne.n	80035d8 <UART_SetConfig+0x184>
 8003596:	4b6e      	ldr	r3, [pc, #440]	; (8003750 <UART_SetConfig+0x2fc>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035a0:	2b10      	cmp	r3, #16
 80035a2:	d00f      	beq.n	80035c4 <UART_SetConfig+0x170>
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d802      	bhi.n	80035ae <UART_SetConfig+0x15a>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <UART_SetConfig+0x164>
 80035ac:	e010      	b.n	80035d0 <UART_SetConfig+0x17c>
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d005      	beq.n	80035be <UART_SetConfig+0x16a>
 80035b2:	2b30      	cmp	r3, #48	; 0x30
 80035b4:	d009      	beq.n	80035ca <UART_SetConfig+0x176>
 80035b6:	e00b      	b.n	80035d0 <UART_SetConfig+0x17c>
 80035b8:	2300      	movs	r3, #0
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e0f1      	b.n	80037a2 <UART_SetConfig+0x34e>
 80035be:	2302      	movs	r3, #2
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e0ee      	b.n	80037a2 <UART_SetConfig+0x34e>
 80035c4:	2304      	movs	r3, #4
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e0eb      	b.n	80037a2 <UART_SetConfig+0x34e>
 80035ca:	2308      	movs	r3, #8
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e0e8      	b.n	80037a2 <UART_SetConfig+0x34e>
 80035d0:	2310      	movs	r3, #16
 80035d2:	77fb      	strb	r3, [r7, #31]
 80035d4:	bf00      	nop
 80035d6:	e0e4      	b.n	80037a2 <UART_SetConfig+0x34e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5f      	ldr	r2, [pc, #380]	; (800375c <UART_SetConfig+0x308>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d120      	bne.n	8003624 <UART_SetConfig+0x1d0>
 80035e2:	4b5b      	ldr	r3, [pc, #364]	; (8003750 <UART_SetConfig+0x2fc>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d00f      	beq.n	8003610 <UART_SetConfig+0x1bc>
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d802      	bhi.n	80035fa <UART_SetConfig+0x1a6>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <UART_SetConfig+0x1b0>
 80035f8:	e010      	b.n	800361c <UART_SetConfig+0x1c8>
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d005      	beq.n	800360a <UART_SetConfig+0x1b6>
 80035fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003600:	d009      	beq.n	8003616 <UART_SetConfig+0x1c2>
 8003602:	e00b      	b.n	800361c <UART_SetConfig+0x1c8>
 8003604:	2300      	movs	r3, #0
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	e0cb      	b.n	80037a2 <UART_SetConfig+0x34e>
 800360a:	2302      	movs	r3, #2
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	e0c8      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003610:	2304      	movs	r3, #4
 8003612:	77fb      	strb	r3, [r7, #31]
 8003614:	e0c5      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003616:	2308      	movs	r3, #8
 8003618:	77fb      	strb	r3, [r7, #31]
 800361a:	e0c2      	b.n	80037a2 <UART_SetConfig+0x34e>
 800361c:	2310      	movs	r3, #16
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	bf00      	nop
 8003622:	e0be      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a4d      	ldr	r2, [pc, #308]	; (8003760 <UART_SetConfig+0x30c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d124      	bne.n	8003678 <UART_SetConfig+0x224>
 800362e:	4b48      	ldr	r3, [pc, #288]	; (8003750 <UART_SetConfig+0x2fc>)
 8003630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800363c:	d012      	beq.n	8003664 <UART_SetConfig+0x210>
 800363e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003642:	d802      	bhi.n	800364a <UART_SetConfig+0x1f6>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <UART_SetConfig+0x204>
 8003648:	e012      	b.n	8003670 <UART_SetConfig+0x21c>
 800364a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800364e:	d006      	beq.n	800365e <UART_SetConfig+0x20a>
 8003650:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003654:	d009      	beq.n	800366a <UART_SetConfig+0x216>
 8003656:	e00b      	b.n	8003670 <UART_SetConfig+0x21c>
 8003658:	2300      	movs	r3, #0
 800365a:	77fb      	strb	r3, [r7, #31]
 800365c:	e0a1      	b.n	80037a2 <UART_SetConfig+0x34e>
 800365e:	2302      	movs	r3, #2
 8003660:	77fb      	strb	r3, [r7, #31]
 8003662:	e09e      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003664:	2304      	movs	r3, #4
 8003666:	77fb      	strb	r3, [r7, #31]
 8003668:	e09b      	b.n	80037a2 <UART_SetConfig+0x34e>
 800366a:	2308      	movs	r3, #8
 800366c:	77fb      	strb	r3, [r7, #31]
 800366e:	e098      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003670:	2310      	movs	r3, #16
 8003672:	77fb      	strb	r3, [r7, #31]
 8003674:	bf00      	nop
 8003676:	e094      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a39      	ldr	r2, [pc, #228]	; (8003764 <UART_SetConfig+0x310>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d124      	bne.n	80036cc <UART_SetConfig+0x278>
 8003682:	4b33      	ldr	r3, [pc, #204]	; (8003750 <UART_SetConfig+0x2fc>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003690:	d012      	beq.n	80036b8 <UART_SetConfig+0x264>
 8003692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003696:	d802      	bhi.n	800369e <UART_SetConfig+0x24a>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <UART_SetConfig+0x258>
 800369c:	e012      	b.n	80036c4 <UART_SetConfig+0x270>
 800369e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a2:	d006      	beq.n	80036b2 <UART_SetConfig+0x25e>
 80036a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036a8:	d009      	beq.n	80036be <UART_SetConfig+0x26a>
 80036aa:	e00b      	b.n	80036c4 <UART_SetConfig+0x270>
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e077      	b.n	80037a2 <UART_SetConfig+0x34e>
 80036b2:	2302      	movs	r3, #2
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e074      	b.n	80037a2 <UART_SetConfig+0x34e>
 80036b8:	2304      	movs	r3, #4
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e071      	b.n	80037a2 <UART_SetConfig+0x34e>
 80036be:	2308      	movs	r3, #8
 80036c0:	77fb      	strb	r3, [r7, #31]
 80036c2:	e06e      	b.n	80037a2 <UART_SetConfig+0x34e>
 80036c4:	2310      	movs	r3, #16
 80036c6:	77fb      	strb	r3, [r7, #31]
 80036c8:	bf00      	nop
 80036ca:	e06a      	b.n	80037a2 <UART_SetConfig+0x34e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a25      	ldr	r2, [pc, #148]	; (8003768 <UART_SetConfig+0x314>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d124      	bne.n	8003720 <UART_SetConfig+0x2cc>
 80036d6:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <UART_SetConfig+0x2fc>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e4:	d012      	beq.n	800370c <UART_SetConfig+0x2b8>
 80036e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036ea:	d802      	bhi.n	80036f2 <UART_SetConfig+0x29e>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d007      	beq.n	8003700 <UART_SetConfig+0x2ac>
 80036f0:	e012      	b.n	8003718 <UART_SetConfig+0x2c4>
 80036f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f6:	d006      	beq.n	8003706 <UART_SetConfig+0x2b2>
 80036f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80036fc:	d009      	beq.n	8003712 <UART_SetConfig+0x2be>
 80036fe:	e00b      	b.n	8003718 <UART_SetConfig+0x2c4>
 8003700:	2300      	movs	r3, #0
 8003702:	77fb      	strb	r3, [r7, #31]
 8003704:	e04d      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003706:	2302      	movs	r3, #2
 8003708:	77fb      	strb	r3, [r7, #31]
 800370a:	e04a      	b.n	80037a2 <UART_SetConfig+0x34e>
 800370c:	2304      	movs	r3, #4
 800370e:	77fb      	strb	r3, [r7, #31]
 8003710:	e047      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003712:	2308      	movs	r3, #8
 8003714:	77fb      	strb	r3, [r7, #31]
 8003716:	e044      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003718:	2310      	movs	r3, #16
 800371a:	77fb      	strb	r3, [r7, #31]
 800371c:	bf00      	nop
 800371e:	e040      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a11      	ldr	r2, [pc, #68]	; (800376c <UART_SetConfig+0x318>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d139      	bne.n	800379e <UART_SetConfig+0x34a>
 800372a:	4b09      	ldr	r3, [pc, #36]	; (8003750 <UART_SetConfig+0x2fc>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003738:	d027      	beq.n	800378a <UART_SetConfig+0x336>
 800373a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800373e:	d817      	bhi.n	8003770 <UART_SetConfig+0x31c>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01c      	beq.n	800377e <UART_SetConfig+0x32a>
 8003744:	e027      	b.n	8003796 <UART_SetConfig+0x342>
 8003746:	bf00      	nop
 8003748:	efff69f3 	.word	0xefff69f3
 800374c:	40011000 	.word	0x40011000
 8003750:	40023800 	.word	0x40023800
 8003754:	40004400 	.word	0x40004400
 8003758:	40004800 	.word	0x40004800
 800375c:	40004c00 	.word	0x40004c00
 8003760:	40005000 	.word	0x40005000
 8003764:	40011400 	.word	0x40011400
 8003768:	40007800 	.word	0x40007800
 800376c:	40007c00 	.word	0x40007c00
 8003770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003774:	d006      	beq.n	8003784 <UART_SetConfig+0x330>
 8003776:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800377a:	d009      	beq.n	8003790 <UART_SetConfig+0x33c>
 800377c:	e00b      	b.n	8003796 <UART_SetConfig+0x342>
 800377e:	2300      	movs	r3, #0
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e00e      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003784:	2302      	movs	r3, #2
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e00b      	b.n	80037a2 <UART_SetConfig+0x34e>
 800378a:	2304      	movs	r3, #4
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e008      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003790:	2308      	movs	r3, #8
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e005      	b.n	80037a2 <UART_SetConfig+0x34e>
 8003796:	2310      	movs	r3, #16
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	bf00      	nop
 800379c:	e001      	b.n	80037a2 <UART_SetConfig+0x34e>
 800379e:	2310      	movs	r3, #16
 80037a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d17c      	bne.n	80038a6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80037ac:	7ffb      	ldrb	r3, [r7, #31]
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d859      	bhi.n	8003866 <UART_SetConfig+0x412>
 80037b2:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <UART_SetConfig+0x364>)
 80037b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037fb 	.word	0x080037fb
 80037c0:	08003819 	.word	0x08003819
 80037c4:	08003867 	.word	0x08003867
 80037c8:	08003831 	.word	0x08003831
 80037cc:	08003867 	.word	0x08003867
 80037d0:	08003867 	.word	0x08003867
 80037d4:	08003867 	.word	0x08003867
 80037d8:	0800384f 	.word	0x0800384f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80037dc:	f7fe fd2c 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80037e0:	4603      	mov	r3, r0
 80037e2:	005a      	lsls	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	441a      	add	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	61bb      	str	r3, [r7, #24]
        break;
 80037f8:	e038      	b.n	800386c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80037fa:	f7fe fd31 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 80037fe:	4603      	mov	r3, r0
 8003800:	005a      	lsls	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	085b      	lsrs	r3, r3, #1
 8003808:	441a      	add	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	b29b      	uxth	r3, r3
 8003814:	61bb      	str	r3, [r7, #24]
        break;
 8003816:	e029      	b.n	800386c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	085a      	lsrs	r2, r3, #1
 800381e:	4b5d      	ldr	r3, [pc, #372]	; (8003994 <UART_SetConfig+0x540>)
 8003820:	4413      	add	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6852      	ldr	r2, [r2, #4]
 8003826:	fbb3 f3f2 	udiv	r3, r3, r2
 800382a:	b29b      	uxth	r3, r3
 800382c:	61bb      	str	r3, [r7, #24]
        break;
 800382e:	e01d      	b.n	800386c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003830:	f7fe fc44 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8003834:	4603      	mov	r3, r0
 8003836:	005a      	lsls	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	085b      	lsrs	r3, r3, #1
 800383e:	441a      	add	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	b29b      	uxth	r3, r3
 800384a:	61bb      	str	r3, [r7, #24]
        break;
 800384c:	e00e      	b.n	800386c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003860:	b29b      	uxth	r3, r3
 8003862:	61bb      	str	r3, [r7, #24]
        break;
 8003864:	e002      	b.n	800386c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75fb      	strb	r3, [r7, #23]
        break;
 800386a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b0f      	cmp	r3, #15
 8003870:	d916      	bls.n	80038a0 <UART_SetConfig+0x44c>
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003878:	d212      	bcs.n	80038a0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	b29b      	uxth	r3, r3
 800387e:	f023 030f 	bic.w	r3, r3, #15
 8003882:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	b29a      	uxth	r2, r3
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	4313      	orrs	r3, r2
 8003894:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	89fa      	ldrh	r2, [r7, #14]
 800389c:	60da      	str	r2, [r3, #12]
 800389e:	e06e      	b.n	800397e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75fb      	strb	r3, [r7, #23]
 80038a4:	e06b      	b.n	800397e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80038a6:	7ffb      	ldrb	r3, [r7, #31]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d857      	bhi.n	800395c <UART_SetConfig+0x508>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <UART_SetConfig+0x460>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038d9 	.word	0x080038d9
 80038b8:	080038f5 	.word	0x080038f5
 80038bc:	08003911 	.word	0x08003911
 80038c0:	0800395d 	.word	0x0800395d
 80038c4:	08003929 	.word	0x08003929
 80038c8:	0800395d 	.word	0x0800395d
 80038cc:	0800395d 	.word	0x0800395d
 80038d0:	0800395d 	.word	0x0800395d
 80038d4:	08003945 	.word	0x08003945
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80038d8:	f7fe fcae 	bl	8002238 <HAL_RCC_GetPCLK1Freq>
 80038dc:	4602      	mov	r2, r0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	441a      	add	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	61bb      	str	r3, [r7, #24]
        break;
 80038f2:	e036      	b.n	8003962 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80038f4:	f7fe fcb4 	bl	8002260 <HAL_RCC_GetPCLK2Freq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	fbb2 f3f3 	udiv	r3, r2, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	61bb      	str	r3, [r7, #24]
        break;
 800390e:	e028      	b.n	8003962 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	085a      	lsrs	r2, r3, #1
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <UART_SetConfig+0x544>)
 8003918:	4413      	add	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6852      	ldr	r2, [r2, #4]
 800391e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	61bb      	str	r3, [r7, #24]
        break;
 8003926:	e01c      	b.n	8003962 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003928:	f7fe fbc8 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800392c:	4602      	mov	r2, r0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	441a      	add	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	fbb2 f3f3 	udiv	r3, r2, r3
 800393e:	b29b      	uxth	r3, r3
 8003940:	61bb      	str	r3, [r7, #24]
        break;
 8003942:	e00e      	b.n	8003962 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	085b      	lsrs	r3, r3, #1
 800394a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	b29b      	uxth	r3, r3
 8003958:	61bb      	str	r3, [r7, #24]
        break;
 800395a:	e002      	b.n	8003962 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	75fb      	strb	r3, [r7, #23]
        break;
 8003960:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d908      	bls.n	800397a <UART_SetConfig+0x526>
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396e:	d204      	bcs.n	800397a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	e001      	b.n	800397e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	01e84800 	.word	0x01e84800
 8003998:	00f42400 	.word	0x00f42400

0800399c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00a      	beq.n	80039c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00a      	beq.n	80039e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00a      	beq.n	8003a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00a      	beq.n	8003a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00a      	beq.n	8003a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00a      	beq.n	8003a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a9a:	d10a      	bne.n	8003ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003aee:	f7fc fdd1 	bl	8000694 <HAL_GetTick>
 8003af2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0308 	and.w	r3, r3, #8
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d10e      	bne.n	8003b20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f814 	bl	8003b3e <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e00a      	b.n	8003b36 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	e02a      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b56:	d026      	beq.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7fc fd9c 	bl	8000694 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11b      	bne.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e00f      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d0c5      	beq.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <can_init>:
//extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan1;
extern UART_HandleTypeDef huart3;
canStruct can1,can3;
char txt[100];
void can_init(){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
	if(CAN_initialization(&can1)){
 8003bd4:	4804      	ldr	r0, [pc, #16]	; (8003be8 <can_init+0x18>)
 8003bd6:	f000 f877 	bl	8003cc8 <CAN_initialization>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <can_init+0x14>
		report_error_can1();
 8003be0:	f000 f8f6 	bl	8003dd0 <report_error_can1>
	}
	/*
	if(CAN_initialization(&can3)){
		report_error_can3();
	}*/
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	2000151c 	.word	0x2000151c

08003bec <CAN_Send_IT>:
	}
	return 1;
}


uint8_t CAN_Send_IT(canStruct* can){
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08c      	sub	sp, #48	; 0x30
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]

	uint32_t mailbox = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
	//CAN_TxMailBox_TypeDef mailbox;
	//mailbox.TIR = 0; //set to mailbox 0

	for(int i = 0; i < 8; i++){
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfc:	e00d      	b.n	8003c1a <CAN_Send_IT+0x2e>
		can->dataTxBck[i] = can->dataTx[i];
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	7819      	ldrb	r1, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3314      	adds	r3, #20
 8003c10:	460a      	mov	r2, r1
 8003c12:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++){
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	3301      	adds	r3, #1
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	2b07      	cmp	r3, #7
 8003c1e:	ddee      	ble.n	8003bfe <CAN_Send_IT+0x12>
	}
	can->idBck = can->id;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69da      	ldr	r2, [r3, #28]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	621a      	str	r2, [r3, #32]

	uint8_t flag = 0; //error
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = can->id;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE = CAN_ID_STD;
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
	TxHeader.DLC = can->size;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	61fb      	str	r3, [r7, #28]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f887 3020 	strb.w	r3, [r7, #32]

	if(HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx, &mailbox) == HAL_OK){
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1d1a      	adds	r2, r3, #4
 8003c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c54:	f107 010c 	add.w	r1, r7, #12
 8003c58:	f7fc ff76 	bl	8000b48 <HAL_CAN_AddTxMessage>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d102      	bne.n	8003c68 <CAN_Send_IT+0x7c>
		flag = 1; //ok
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	return flag;
 8003c68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3730      	adds	r7, #48	; 0x30
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <CAN_Send_Bck>:

uint8_t CAN_Send_Bck(canStruct* can){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

	uint8_t flag = 0; //error
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = can->idBck;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE = CAN_ID_STD;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
	TxHeader.DLC = can->size;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61fb      	str	r3, [r7, #28]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 3020 	strb.w	r3, [r7, #32]

	if(HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTxBck,(uint32_t*)CAN_TX_MAILBOX0) == HAL_OK){
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f103 0214 	add.w	r2, r3, #20
 8003ca6:	f107 010c 	add.w	r1, r7, #12
 8003caa:	2301      	movs	r3, #1
 8003cac:	f7fc ff4c 	bl	8000b48 <HAL_CAN_AddTxMessage>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <CAN_Send_Bck+0x48>
		flag = 1; //ok
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return flag;
 8003cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <CAN_initialization>:

uint8_t CAN_initialization(canStruct *can){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]



	//CAN filter initialization
	can->canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
	can->canFilter.FilterIdLow = 0;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
	can->canFilter.FilterIdHigh = 0;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	629a      	str	r2, [r3, #40]	; 0x28
	can->canFilter.FilterMaskIdHigh = 0;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
	can->canFilter.FilterMaskIdLow = 0;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34
	can->canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
	can->canFilter.FilterBank = 0;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	63da      	str	r2, [r3, #60]	; 0x3c
	can->canFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44
	can->canFilter.FilterActivation = ENABLE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	649a      	str	r2, [r3, #72]	; 0x48

	//CAN filter configuration
	can->configFilter_status = HAL_CAN_ConfigFilter(can->hcan, &can->canFilter);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3328      	adds	r3, #40	; 0x28
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4610      	mov	r0, r2
 8003d12:	f7fc fde9 	bl	80008e8 <HAL_CAN_ConfigFilter>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50


	can->activateNotif_status = HAL_CAN_ActivateNotification(can->hcan, can->rx0_interrupt);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	f241 4314 	movw	r3, #5140	; 0x1414
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d30:	4619      	mov	r1, r3
 8003d32:	f7fd f91f 	bl	8000f74 <HAL_CAN_ActivateNotification>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	can->activateNotif_status = HAL_CAN_ActivateNotification(can->hcan, can->tx_interrupt);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	f241 4315 	movw	r3, #5141	; 0x1415
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d50:	4619      	mov	r1, r3
 8003d52:	f7fd f90f 	bl	8000f74 <HAL_CAN_ActivateNotification>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	can->fifo.rxHead = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	can->fifo.rxTail = 0;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	can->fifo.txHeadHigh = 0;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	can->fifo.txHeadNormal = 0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	can->fifo.txTailHigh = 0;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	can->fifo.txTailNormal = 0;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

	//CAN start
	can->canStart_status = HAL_CAN_Start(can->hcan);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc fe93 	bl	8000ac0 <HAL_CAN_Start>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52



	if(can->configFilter_status == HAL_OK && can->activateNotif_status == HAL_OK && can->canStart_status == HAL_OK) return 0; // no errors occurred
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10b      	bne.n	8003dc6 <CAN_initialization+0xfe>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d106      	bne.n	8003dc6 <CAN_initialization+0xfe>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <CAN_initialization+0xfe>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <CAN_initialization+0x100>
	else return 1;
 8003dc6:	2301      	movs	r3, #1

}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <report_error_can1>:



void report_error_can1(){
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(USER_LED_3_GPIO_Port, USER_LED_3_Pin);
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <fifoTxDataCAN_normal_pop>:
		can->fifo.rxHead = (can->fifo.rxHead + 1) % fifoLengthN;
		return 1;
	}
}

uint8_t fifoTxDataCAN_normal_pop(canStruct * can){
 8003de0:	b490      	push	{r4, r7}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	if(can->fifo.txHeadNormal ==can->fifo.txTailNormal){
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d101      	bne.n	8003dfc <fifoTxDataCAN_normal_pop+0x1c>
		return 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e03e      	b.n	8003e7a <fifoTxDataCAN_normal_pop+0x9a>
	}else{
		can->id = can->fifo.txNormal[can->fifo.txTailNormal].id;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003e02:	4619      	mov	r1, r3
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	440b      	add	r3, r1
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	f203 530c 	addw	r3, r3, #1292	; 0x50c
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	61da      	str	r2, [r3, #28]
		for(uint8_t i = 0; i < 8; i++){
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
 8003e1e:	e016      	b.n	8003e4e <fifoTxDataCAN_normal_pop+0x6e>
			can->dataTx[i] = can->fifo.txNormal[can->fifo.txTailNormal].data[i];
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003e26:	461c      	mov	r4, r3
 8003e28:	7bf9      	ldrb	r1, [r7, #15]
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	4623      	mov	r3, r4
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4423      	add	r3, r4
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4403      	add	r3, r0
 8003e38:	440b      	add	r3, r1
 8003e3a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003e3e:	7819      	ldrb	r1, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	460a      	mov	r2, r1
 8003e46:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	d9e5      	bls.n	8003e20 <fifoTxDataCAN_normal_pop+0x40>
		}
		can->fifo.txTailNormal = (can->fifo.txTailNormal + 1) % fifoLengthN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <fifoTxDataCAN_normal_pop+0xa4>)
 8003e5e:	fb82 1203 	smull	r1, r2, r2, r3
 8003e62:	1151      	asrs	r1, r2, #5
 8003e64:	17da      	asrs	r2, r3, #31
 8003e66:	1a8a      	subs	r2, r1, r2
 8003e68:	2164      	movs	r1, #100	; 0x64
 8003e6a:	fb01 f202 	mul.w	r2, r1, r2
 8003e6e:	1a9a      	subs	r2, r3, r2
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
		return 1;
 8003e78:	2301      	movs	r3, #1
	}
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc90      	pop	{r4, r7}
 8003e82:	4770      	bx	lr
 8003e84:	51eb851f 	.word	0x51eb851f

08003e88 <fifoTxDataCAN_high_pop>:
uint8_t fifoTxDataCAN_high_pop(canStruct * can){
 8003e88:	b490      	push	{r4, r7}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	if(can->fifo.txHeadHigh ==can->fifo.txTailHigh){
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d101      	bne.n	8003ea4 <fifoTxDataCAN_high_pop+0x1c>
		return 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e03f      	b.n	8003f24 <fifoTxDataCAN_high_pop+0x9c>
	}else{
		can->id = can->fifo.txHigh[can->fifo.txTailHigh].id;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003eaa:	4619      	mov	r1, r3
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	440b      	add	r3, r1
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f603 13bc 	addw	r3, r3, #2492	; 0x9bc
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	61da      	str	r2, [r3, #28]
		for(uint8_t i = 0; i < 8; i++){
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	e016      	b.n	8003ef6 <fifoTxDataCAN_high_pop+0x6e>
			can->dataTx[i] = can->fifo.txHigh[can->fifo.txTailHigh].data[i];
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ece:	461c      	mov	r4, r3
 8003ed0:	7bf9      	ldrb	r1, [r7, #15]
 8003ed2:	7bfa      	ldrb	r2, [r7, #15]
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4423      	add	r3, r4
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4403      	add	r3, r0
 8003ee0:	440b      	add	r3, r1
 8003ee2:	f503 631c 	add.w	r3, r3, #2496	; 0x9c0
 8003ee6:	7819      	ldrb	r1, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4413      	add	r3, r2
 8003eec:	460a      	mov	r2, r1
 8003eee:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	73fb      	strb	r3, [r7, #15]
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d9e5      	bls.n	8003ec8 <fifoTxDataCAN_high_pop+0x40>
		}
		can->fifo.txTailHigh = (can->fifo.txTailHigh + 1) % fifoLengthH;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <fifoTxDataCAN_high_pop+0xa8>)
 8003f06:	fb83 1302 	smull	r1, r3, r3, r2
 8003f0a:	1099      	asrs	r1, r3, #2
 8003f0c:	17d3      	asrs	r3, r2, #31
 8003f0e:	1ac9      	subs	r1, r1, r3
 8003f10:	460b      	mov	r3, r1
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	1ad1      	subs	r1, r2, r3
 8003f1a:	b2ca      	uxtb	r2, r1
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		return 1;
 8003f22:	2301      	movs	r3, #1
	}
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc90      	pop	{r4, r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	66666667 	.word	0x66666667

08003f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f34:	b5b0      	push	{r4, r5, r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f38:	f7fc fb5a 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f3c:	f000 f8b4 	bl	80040a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f40:	f000 fa22 	bl	8004388 <MX_GPIO_Init>
  MX_CAN1_Init();
 8003f44:	f000 f96c 	bl	8004220 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8003f48:	f000 f9ee 	bl	8004328 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003f4c:	f000 f99e 	bl	800428c <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003f50:	f000 f93a 	bl	80041c8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  can1.rx0_interrupt = CAN1_RX0_IRQn;
 8003f54:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <main+0x150>)
 8003f56:	f241 4314 	movw	r3, #5140	; 0x1414
 8003f5a:	4413      	add	r3, r2
 8003f5c:	2214      	movs	r2, #20
 8003f5e:	701a      	strb	r2, [r3, #0]
  can1.tx_interrupt = CAN1_TX_IRQn;
 8003f60:	4a48      	ldr	r2, [pc, #288]	; (8004084 <main+0x150>)
 8003f62:	f241 4315 	movw	r3, #5141	; 0x1415
 8003f66:	4413      	add	r3, r2
 8003f68:	2213      	movs	r2, #19
 8003f6a:	701a      	strb	r2, [r3, #0]
  can1.hcan = &hcan1;
 8003f6c:	4b45      	ldr	r3, [pc, #276]	; (8004084 <main+0x150>)
 8003f6e:	4a46      	ldr	r2, [pc, #280]	; (8004088 <main+0x154>)
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

  can_init();
 8003f72:	f7ff fe2d 	bl	8003bd0 <can_init>

  sprintf(txt,"----------START---------\r\n");
 8003f76:	4a45      	ldr	r2, [pc, #276]	; (800408c <main+0x158>)
 8003f78:	4b45      	ldr	r3, [pc, #276]	; (8004090 <main+0x15c>)
 8003f7a:	4615      	mov	r5, r2
 8003f7c:	461c      	mov	r4, r3
 8003f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f80:	6028      	str	r0, [r5, #0]
 8003f82:	6069      	str	r1, [r5, #4]
 8003f84:	60aa      	str	r2, [r5, #8]
 8003f86:	60eb      	str	r3, [r5, #12]
 8003f88:	cc03      	ldmia	r4!, {r0, r1}
 8003f8a:	6128      	str	r0, [r5, #16]
 8003f8c:	6169      	str	r1, [r5, #20]
 8003f8e:	8823      	ldrh	r3, [r4, #0]
 8003f90:	78a2      	ldrb	r2, [r4, #2]
 8003f92:	832b      	strh	r3, [r5, #24]
 8003f94:	4613      	mov	r3, r2
 8003f96:	76ab      	strb	r3, [r5, #26]
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 8003f98:	483c      	ldr	r0, [pc, #240]	; (800408c <main+0x158>)
 8003f9a:	f7fc f951 	bl	8000240 <strlen>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	230a      	movs	r3, #10
 8003fa4:	4939      	ldr	r1, [pc, #228]	; (800408c <main+0x158>)
 8003fa6:	483b      	ldr	r0, [pc, #236]	; (8004094 <main+0x160>)
 8003fa8:	f7ff f9c2 	bl	8003330 <HAL_UART_Transmit>
  sprintf(txt,"Config Status: %d\r\n", can1.configFilter_status);
 8003fac:	4b35      	ldr	r3, [pc, #212]	; (8004084 <main+0x150>)
 8003fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4938      	ldr	r1, [pc, #224]	; (8004098 <main+0x164>)
 8003fb6:	4835      	ldr	r0, [pc, #212]	; (800408c <main+0x158>)
 8003fb8:	f000 fe26 	bl	8004c08 <siprintf>
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 8003fbc:	4833      	ldr	r0, [pc, #204]	; (800408c <main+0x158>)
 8003fbe:	f7fc f93f 	bl	8000240 <strlen>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	230a      	movs	r3, #10
 8003fc8:	4930      	ldr	r1, [pc, #192]	; (800408c <main+0x158>)
 8003fca:	4832      	ldr	r0, [pc, #200]	; (8004094 <main+0x160>)
 8003fcc:	f7ff f9b0 	bl	8003330 <HAL_UART_Transmit>
  sprintf(txt,"CAN Notification %d\r\n", can1.activateNotif_status);
 8003fd0:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <main+0x150>)
 8003fd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	4930      	ldr	r1, [pc, #192]	; (800409c <main+0x168>)
 8003fda:	482c      	ldr	r0, [pc, #176]	; (800408c <main+0x158>)
 8003fdc:	f000 fe14 	bl	8004c08 <siprintf>
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 8003fe0:	482a      	ldr	r0, [pc, #168]	; (800408c <main+0x158>)
 8003fe2:	f7fc f92d 	bl	8000240 <strlen>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	230a      	movs	r3, #10
 8003fec:	4927      	ldr	r1, [pc, #156]	; (800408c <main+0x158>)
 8003fee:	4829      	ldr	r0, [pc, #164]	; (8004094 <main+0x160>)
 8003ff0:	f7ff f99e 	bl	8003330 <HAL_UART_Transmit>
  sprintf(txt,"CAN start status: %d\r\n", can1.canStart_status);
 8003ff4:	4b23      	ldr	r3, [pc, #140]	; (8004084 <main+0x150>)
 8003ff6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4928      	ldr	r1, [pc, #160]	; (80040a0 <main+0x16c>)
 8003ffe:	4823      	ldr	r0, [pc, #140]	; (800408c <main+0x158>)
 8004000:	f000 fe02 	bl	8004c08 <siprintf>
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 8004004:	4821      	ldr	r0, [pc, #132]	; (800408c <main+0x158>)
 8004006:	f7fc f91b 	bl	8000240 <strlen>
 800400a:	4603      	mov	r3, r0
 800400c:	b29a      	uxth	r2, r3
 800400e:	230a      	movs	r3, #10
 8004010:	491e      	ldr	r1, [pc, #120]	; (800408c <main+0x158>)
 8004012:	4820      	ldr	r0, [pc, #128]	; (8004094 <main+0x160>)
 8004014:	f7ff f98c 	bl	8003330 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  can1.dataTx[0]=0;
 8004018:	4b1a      	ldr	r3, [pc, #104]	; (8004084 <main+0x150>)
 800401a:	2200      	movs	r2, #0
 800401c:	711a      	strb	r2, [r3, #4]
	  can1.dataTx[1]=2;
 800401e:	4b19      	ldr	r3, [pc, #100]	; (8004084 <main+0x150>)
 8004020:	2202      	movs	r2, #2
 8004022:	715a      	strb	r2, [r3, #5]
	  can1.dataTx[2]=3;
 8004024:	4b17      	ldr	r3, [pc, #92]	; (8004084 <main+0x150>)
 8004026:	2203      	movs	r2, #3
 8004028:	719a      	strb	r2, [r3, #6]
	  can1.dataTx[3]=4;
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <main+0x150>)
 800402c:	2204      	movs	r2, #4
 800402e:	71da      	strb	r2, [r3, #7]
	  can1.dataTx[4]=5;
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <main+0x150>)
 8004032:	2205      	movs	r2, #5
 8004034:	721a      	strb	r2, [r3, #8]
	  can1.dataTx[5]=i_debug / 256 / 256;
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <main+0x170>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	da03      	bge.n	8004046 <main+0x112>
 800403e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004042:	441a      	add	r2, r3
 8004044:	4613      	mov	r3, r2
 8004046:	141b      	asrs	r3, r3, #16
 8004048:	b2da      	uxtb	r2, r3
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <main+0x150>)
 800404c:	725a      	strb	r2, [r3, #9]
	  can1.dataTx[6]=i_debug / 256;
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <main+0x170>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	da00      	bge.n	8004058 <main+0x124>
 8004056:	33ff      	adds	r3, #255	; 0xff
 8004058:	121b      	asrs	r3, r3, #8
 800405a:	b2da      	uxtb	r2, r3
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <main+0x150>)
 800405e:	729a      	strb	r2, [r3, #10]
	  can1.dataTx[7]=i_debug % 256;
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <main+0x170>)
 8004062:	781a      	ldrb	r2, [r3, #0]
 8004064:	4b07      	ldr	r3, [pc, #28]	; (8004084 <main+0x150>)
 8004066:	72da      	strb	r2, [r3, #11]
	  can1.size = 8;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <main+0x150>)
 800406a:	2208      	movs	r2, #8
 800406c:	601a      	str	r2, [r3, #0]
	  i_debug++;/*
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <main+0x170>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	b2da      	uxtb	r2, r3
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <main+0x170>)
 8004078:	701a      	strb	r2, [r3, #0]
		  CAN_Send(&can1, normalPriority);
	  }
	  can1.id = 200;
	  CAN_Send(&can1, highPriority);*/

	  HAL_Delay(500);
 800407a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800407e:	f7fc fb15 	bl	80006ac <HAL_Delay>
	  can1.dataTx[0]=0;
 8004082:	e7c9      	b.n	8004018 <main+0xe4>
 8004084:	2000151c 	.word	0x2000151c
 8004088:	20002a70 	.word	0x20002a70
 800408c:	200000a0 	.word	0x200000a0
 8004090:	0800542c 	.word	0x0800542c
 8004094:	20002938 	.word	0x20002938
 8004098:	08005448 	.word	0x08005448
 800409c:	0800545c 	.word	0x0800545c
 80040a0:	08005474 	.word	0x08005474
 80040a4:	20002a2c 	.word	0x20002a2c

080040a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b0b8      	sub	sp, #224	; 0xe0
 80040ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80040b2:	2234      	movs	r2, #52	; 0x34
 80040b4:	2100      	movs	r1, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fd9e 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040cc:	f107 0308 	add.w	r3, r7, #8
 80040d0:	2290      	movs	r2, #144	; 0x90
 80040d2:	2100      	movs	r1, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fd8f 	bl	8004bf8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040da:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <SystemClock_Config+0x118>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	4a38      	ldr	r2, [pc, #224]	; (80041c0 <SystemClock_Config+0x118>)
 80040e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e4:	6413      	str	r3, [r2, #64]	; 0x40
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <SystemClock_Config+0x118>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	607b      	str	r3, [r7, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f2:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <SystemClock_Config+0x11c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a33      	ldr	r2, [pc, #204]	; (80041c4 <SystemClock_Config+0x11c>)
 80040f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <SystemClock_Config+0x11c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800410a:	2302      	movs	r3, #2
 800410c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004110:	2301      	movs	r3, #1
 8004112:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004116:	2310      	movs	r3, #16
 8004118:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800411c:	2302      	movs	r3, #2
 800411e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004122:	2300      	movs	r3, #0
 8004124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004128:	2308      	movs	r3, #8
 800412a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800412e:	23d8      	movs	r3, #216	; 0xd8
 8004130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004134:	2302      	movs	r3, #2
 8004136:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800413a:	2302      	movs	r3, #2
 800413c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004140:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd fc5f 	bl	8001a08 <HAL_RCC_OscConfig>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004150:	f000 fb60 	bl	8004814 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004154:	f7fd fc08 	bl	8001968 <HAL_PWREx_EnableOverDrive>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800415e:	f000 fb59 	bl	8004814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004162:	230f      	movs	r3, #15
 8004164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004168:	2302      	movs	r3, #2
 800416a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004174:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800417c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004184:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004188:	2107      	movs	r1, #7
 800418a:	4618      	mov	r0, r3
 800418c:	f7fd feae 	bl	8001eec <HAL_RCC_ClockConfig>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8004196:	f000 fb3d 	bl	8004814 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800419a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800419e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80041a0:	2300      	movs	r3, #0
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041a4:	f107 0308 	add.w	r3, r7, #8
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fe f86d 	bl	8002288 <HAL_RCCEx_PeriphCLKConfig>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80041b4:	f000 fb2e 	bl	8004814 <Error_Handler>
  }
}
 80041b8:	bf00      	nop
 80041ba:	37e0      	adds	r7, #224	; 0xe0
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40007000 	.word	0x40007000

080041c8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	2016      	movs	r0, #22
 80041d2:	f7fd f9b4 	bl	800153e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80041d6:	2016      	movs	r0, #22
 80041d8:	f7fd f9cd 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	2100      	movs	r1, #0
 80041e0:	2015      	movs	r0, #21
 80041e2:	f7fd f9ac 	bl	800153e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80041e6:	2015      	movs	r0, #21
 80041e8:	f7fd f9c5 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80041ec:	2200      	movs	r2, #0
 80041ee:	2100      	movs	r1, #0
 80041f0:	2014      	movs	r0, #20
 80041f2:	f7fd f9a4 	bl	800153e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80041f6:	2014      	movs	r0, #20
 80041f8:	f7fd f9bd 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80041fc:	2200      	movs	r2, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	2013      	movs	r0, #19
 8004202:	f7fd f99c 	bl	800153e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004206:	2013      	movs	r0, #19
 8004208:	f7fd f9b5 	bl	8001576 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800420c:	2200      	movs	r2, #0
 800420e:	2100      	movs	r1, #0
 8004210:	201c      	movs	r0, #28
 8004212:	f7fd f994 	bl	800153e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004216:	201c      	movs	r0, #28
 8004218:	f7fd f9ad 	bl	8001576 <HAL_NVIC_EnableIRQ>
}
 800421c:	bf00      	nop
 800421e:	bd80      	pop	{r7, pc}

08004220 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <MX_CAN1_Init+0x64>)
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <MX_CAN1_Init+0x68>)
 8004228:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <MX_CAN1_Init+0x64>)
 800422c:	2203      	movs	r2, #3
 800422e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004230:	4b14      	ldr	r3, [pc, #80]	; (8004284 <MX_CAN1_Init+0x64>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <MX_CAN1_Init+0x64>)
 8004238:	2200      	movs	r2, #0
 800423a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <MX_CAN1_Init+0x64>)
 800423e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004242:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004244:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <MX_CAN1_Init+0x64>)
 8004246:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800424a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <MX_CAN1_Init+0x64>)
 800424e:	2200      	movs	r2, #0
 8004250:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004252:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <MX_CAN1_Init+0x64>)
 8004254:	2200      	movs	r2, #0
 8004256:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8004258:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <MX_CAN1_Init+0x64>)
 800425a:	2201      	movs	r2, #1
 800425c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <MX_CAN1_Init+0x64>)
 8004260:	2201      	movs	r2, #1
 8004262:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004264:	4b07      	ldr	r3, [pc, #28]	; (8004284 <MX_CAN1_Init+0x64>)
 8004266:	2200      	movs	r2, #0
 8004268:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <MX_CAN1_Init+0x64>)
 800426c:	2200      	movs	r2, #0
 800426e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004270:	4804      	ldr	r0, [pc, #16]	; (8004284 <MX_CAN1_Init+0x64>)
 8004272:	f7fc fa3d 	bl	80006f0 <HAL_CAN_Init>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800427c:	f000 faca 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004280:	bf00      	nop
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20002a70 	.word	0x20002a70
 8004288:	40006400 	.word	0x40006400

0800428c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004292:	f107 0310 	add.w	r3, r7, #16
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	605a      	str	r2, [r3, #4]
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a0:	1d3b      	adds	r3, r7, #4
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042aa:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <MX_TIM2_Init+0x98>)
 80042ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 54;
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <MX_TIM2_Init+0x98>)
 80042b4:	2236      	movs	r2, #54	; 0x36
 80042b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b8:	4b1a      	ldr	r3, [pc, #104]	; (8004324 <MX_TIM2_Init+0x98>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80042be:	4b19      	ldr	r3, [pc, #100]	; (8004324 <MX_TIM2_Init+0x98>)
 80042c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c6:	4b17      	ldr	r3, [pc, #92]	; (8004324 <MX_TIM2_Init+0x98>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042cc:	4b15      	ldr	r3, [pc, #84]	; (8004324 <MX_TIM2_Init+0x98>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042d2:	4814      	ldr	r0, [pc, #80]	; (8004324 <MX_TIM2_Init+0x98>)
 80042d4:	f7fe fbfe 	bl	8002ad4 <HAL_TIM_Base_Init>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80042de:	f000 fa99 	bl	8004814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042e8:	f107 0310 	add.w	r3, r7, #16
 80042ec:	4619      	mov	r1, r3
 80042ee:	480d      	ldr	r0, [pc, #52]	; (8004324 <MX_TIM2_Init+0x98>)
 80042f0:	f7fe fd3a 	bl	8002d68 <HAL_TIM_ConfigClockSource>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80042fa:	f000 fa8b 	bl	8004814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004302:	2300      	movs	r3, #0
 8004304:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	4619      	mov	r1, r3
 800430a:	4806      	ldr	r0, [pc, #24]	; (8004324 <MX_TIM2_Init+0x98>)
 800430c:	f7fe ff48 	bl	80031a0 <HAL_TIMEx_MasterConfigSynchronization>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004316:	f000 fa7d 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800431a:	bf00      	nop
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20002a30 	.word	0x20002a30

08004328 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800432c:	4b13      	ldr	r3, [pc, #76]	; (800437c <MX_USART3_UART_Init+0x54>)
 800432e:	4a14      	ldr	r2, [pc, #80]	; (8004380 <MX_USART3_UART_Init+0x58>)
 8004330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2250000;
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <MX_USART3_UART_Init+0x54>)
 8004334:	4a13      	ldr	r2, [pc, #76]	; (8004384 <MX_USART3_UART_Init+0x5c>)
 8004336:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <MX_USART3_UART_Init+0x54>)
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <MX_USART3_UART_Init+0x54>)
 8004340:	2200      	movs	r2, #0
 8004342:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <MX_USART3_UART_Init+0x54>)
 8004346:	2200      	movs	r2, #0
 8004348:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <MX_USART3_UART_Init+0x54>)
 800434c:	220c      	movs	r2, #12
 800434e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <MX_USART3_UART_Init+0x54>)
 8004352:	2200      	movs	r2, #0
 8004354:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <MX_USART3_UART_Init+0x54>)
 8004358:	2200      	movs	r2, #0
 800435a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <MX_USART3_UART_Init+0x54>)
 800435e:	2200      	movs	r2, #0
 8004360:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <MX_USART3_UART_Init+0x54>)
 8004364:	2200      	movs	r2, #0
 8004366:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004368:	4804      	ldr	r0, [pc, #16]	; (800437c <MX_USART3_UART_Init+0x54>)
 800436a:	f7fe ff93 	bl	8003294 <HAL_UART_Init>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8004374:	f000 fa4e 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20002938 	.word	0x20002938
 8004380:	40004800 	.word	0x40004800
 8004384:	00225510 	.word	0x00225510

08004388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	; 0x28
 800438c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800438e:	f107 0314 	add.w	r3, r7, #20
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]
 8004398:	609a      	str	r2, [r3, #8]
 800439a:	60da      	str	r2, [r3, #12]
 800439c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800439e:	4b31      	ldr	r3, [pc, #196]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	4a30      	ldr	r2, [pc, #192]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a8:	6313      	str	r3, [r2, #48]	; 0x30
 80043aa:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b6:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	6313      	str	r3, [r2, #48]	; 0x30
 80043c2:	4b28      	ldr	r3, [pc, #160]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ce:	4b25      	ldr	r3, [pc, #148]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a24      	ldr	r2, [pc, #144]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043d4:	f043 0308 	orr.w	r3, r3, #8
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b22      	ldr	r3, [pc, #136]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e6:	4b1f      	ldr	r3, [pc, #124]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043ec:	f043 0301 	orr.w	r3, r3, #1
 80043f0:	6313      	str	r3, [r2, #48]	; 0x30
 80043f2:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <MX_GPIO_Init+0xdc>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fe:	4b19      	ldr	r3, [pc, #100]	; (8004464 <MX_GPIO_Init+0xdc>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a18      	ldr	r2, [pc, #96]	; (8004464 <MX_GPIO_Init+0xdc>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <MX_GPIO_Init+0xdc>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8004416:	2200      	movs	r2, #0
 8004418:	f244 0181 	movw	r1, #16513	; 0x4081
 800441c:	4812      	ldr	r0, [pc, #72]	; (8004468 <MX_GPIO_Init+0xe0>)
 800441e:	f7fd fa6f 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8004422:	f244 0381 	movw	r3, #16513	; 0x4081
 8004426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004428:	2301      	movs	r3, #1
 800442a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004434:	f107 0314 	add.w	r3, r7, #20
 8004438:	4619      	mov	r1, r3
 800443a:	480b      	ldr	r0, [pc, #44]	; (8004468 <MX_GPIO_Init+0xe0>)
 800443c:	f7fd f8b6 	bl	80015ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800444e:	f107 0314 	add.w	r3, r7, #20
 8004452:	4619      	mov	r1, r3
 8004454:	4805      	ldr	r0, [pc, #20]	; (800446c <MX_GPIO_Init+0xe4>)
 8004456:	f7fd f8a9 	bl	80015ac <HAL_GPIO_Init>

}
 800445a:	bf00      	nop
 800445c:	3728      	adds	r7, #40	; 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800
 8004468:	40020400 	.word	0x40020400
 800446c:	40020800 	.word	0x40020800

08004470 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d137      	bne.n	80044f0 <HAL_TIM_PeriodElapsedCallback+0x80>
		count_ms += 10;
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	330a      	adds	r3, #10
 8004486:	b29a      	uxth	r2, r3
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800448a:	801a      	strh	r2, [r3, #0]
		if(count_ms == 10){
 800448c:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	2b0a      	cmp	r3, #10
 8004492:	d12d      	bne.n	80044f0 <HAL_TIM_PeriodElapsedCallback+0x80>
			count_ms = 0;
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004496:	2200      	movs	r2, #0
 8004498:	801a      	strh	r2, [r3, #0]
			count_dec++;
 800449a:	4b1a      	ldr	r3, [pc, #104]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	3301      	adds	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	4b18      	ldr	r3, [pc, #96]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80044a4:	801a      	strh	r2, [r3, #0]
			count_inverter++;
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044a8:	881b      	ldrh	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044b0:	801a      	strh	r2, [r3, #0]
			if(count_inverter == 10){
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	2b0a      	cmp	r3, #10
 80044b8:	d006      	beq.n	80044c8 <HAL_TIM_PeriodElapsedCallback+0x58>
				//TODO: implementare funzione
			}else if(count_inverter == 11){
 80044ba:	4b13      	ldr	r3, [pc, #76]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	2b0b      	cmp	r3, #11
 80044c0:	d102      	bne.n	80044c8 <HAL_TIM_PeriodElapsedCallback+0x58>
				count_inverter = 10;
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80044c4:	220a      	movs	r2, #10
 80044c6:	801a      	strh	r2, [r3, #0]
			}
			if(count_dec == 10){
 80044c8:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	2b0a      	cmp	r3, #10
 80044ce:	d10f      	bne.n	80044f0 <HAL_TIM_PeriodElapsedCallback+0x80>
				count_dec = 0;
 80044d0:	4b0c      	ldr	r3, [pc, #48]	; (8004504 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	801a      	strh	r2, [r3, #0]
				count_sec++;
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	4b0b      	ldr	r3, [pc, #44]	; (800450c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80044e0:	801a      	strh	r2, [r3, #0]
				if(count_sec == 100){
 80044e2:	4b0a      	ldr	r3, [pc, #40]	; (800450c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	2b64      	cmp	r3, #100	; 0x64
 80044e8:	d102      	bne.n	80044f0 <HAL_TIM_PeriodElapsedCallback+0x80>
					count_sec = 0;
 80044ea:	4b08      	ldr	r3, [pc, #32]	; (800450c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20002a30 	.word	0x20002a30
 8004500:	20002934 	.word	0x20002934
 8004504:	20002936 	.word	0x20002936
 8004508:	2000008e 	.word	0x2000008e
 800450c:	2000008c 	.word	0x2000008c

08004510 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	; 0x28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(USER_LED_2_GPIO_Port, USER_LED_2_Pin);
 8004518:	2180      	movs	r1, #128	; 0x80
 800451a:	480c      	ldr	r0, [pc, #48]	; (800454c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800451c:	f7fd fa09 	bl	8001932 <HAL_GPIO_TogglePin>
	if (hcan == &hcan1){
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a0b      	ldr	r2, [pc, #44]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10d      	bne.n	8004544 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 8004528:	2100      	movs	r1, #0
 800452a:	4809      	ldr	r0, [pc, #36]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800452c:	f7fc fcfa 	bl	8000f24 <HAL_CAN_GetRxFifoFillLevel>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
			CAN_RxHeaderTypeDef header;
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &header, can1.dataRx);
 8004536:	f107 020c 	add.w	r2, r7, #12
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800453c:	2100      	movs	r1, #0
 800453e:	4804      	ldr	r0, [pc, #16]	; (8004550 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8004540:	f7fc fbdd 	bl	8000cfe <HAL_CAN_GetRxMessage>
			HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);
			sprintf(txt, "received %ld %d\r\n", header.StdId, can1.dataRx[0]);
			HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
		}
	}
}
 8004544:	bf00      	nop
 8004546:	3728      	adds	r7, #40	; 0x28
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40020400 	.word	0x40020400
 8004550:	20002a70 	.word	0x20002a70
 8004554:	20001528 	.word	0x20001528

08004558 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	if (hcan == &hcan1){
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a06      	ldr	r2, [pc, #24]	; (800457c <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d105      	bne.n	8004574 <HAL_CAN_RxFifo1MsgPendingCallback+0x1c>
		HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO1\r\n", strlen("rx on FIFO1\r\n"), 10);
 8004568:	230a      	movs	r3, #10
 800456a:	220d      	movs	r2, #13
 800456c:	4904      	ldr	r1, [pc, #16]	; (8004580 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 800456e:	4805      	ldr	r0, [pc, #20]	; (8004584 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8004570:	f7fe fede 	bl	8003330 <HAL_UART_Transmit>
	}
}
 8004574:	bf00      	nop
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20002a70 	.word	0x20002a70
 8004580:	0800548c 	.word	0x0800548c
 8004584:	20002938 	.word	0x20002938

08004588 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	if (hcan == &hcan1){
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a06      	ldr	r2, [pc, #24]	; (80045ac <HAL_CAN_RxFifo0FullCallback+0x24>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d105      	bne.n	80045a4 <HAL_CAN_RxFifo0FullCallback+0x1c>
		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO0 FULL\r\n", strlen("FIFO0 FULL\r\n"), 10);
 8004598:	230a      	movs	r3, #10
 800459a:	220c      	movs	r2, #12
 800459c:	4904      	ldr	r1, [pc, #16]	; (80045b0 <HAL_CAN_RxFifo0FullCallback+0x28>)
 800459e:	4805      	ldr	r0, [pc, #20]	; (80045b4 <HAL_CAN_RxFifo0FullCallback+0x2c>)
 80045a0:	f7fe fec6 	bl	8003330 <HAL_UART_Transmit>
	}
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20002a70 	.word	0x20002a70
 80045b0:	0800549c 	.word	0x0800549c
 80045b4:	20002938 	.word	0x20002938

080045b8 <HAL_CAN_RxFifo1FullCallback>:
void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	if (hcan == &hcan1){
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a06      	ldr	r2, [pc, #24]	; (80045dc <HAL_CAN_RxFifo1FullCallback+0x24>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d105      	bne.n	80045d4 <HAL_CAN_RxFifo1FullCallback+0x1c>
		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO1 FULL\r\n", strlen("FIFO1 FULL\r\n"), 10);
 80045c8:	230a      	movs	r3, #10
 80045ca:	220c      	movs	r2, #12
 80045cc:	4904      	ldr	r1, [pc, #16]	; (80045e0 <HAL_CAN_RxFifo1FullCallback+0x28>)
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <HAL_CAN_RxFifo1FullCallback+0x2c>)
 80045d0:	f7fe feae 	bl	8003330 <HAL_UART_Transmit>
	}
}
 80045d4:	bf00      	nop
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20002a70 	.word	0x20002a70
 80045e0:	080054ac 	.word	0x080054ac
 80045e4:	20002938 	.word	0x20002938

080045e8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	sprintf(txt,"mb0: %d\r\n", (int)can1.idBck);
 80045f0:	4b1c      	ldr	r3, [pc, #112]	; (8004664 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	461a      	mov	r2, r3
 80045f6:	491c      	ldr	r1, [pc, #112]	; (8004668 <HAL_CAN_TxMailbox0CompleteCallback+0x80>)
 80045f8:	481c      	ldr	r0, [pc, #112]	; (800466c <HAL_CAN_TxMailbox0CompleteCallback+0x84>)
 80045fa:	f000 fb05 	bl	8004c08 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 80045fe:	481b      	ldr	r0, [pc, #108]	; (800466c <HAL_CAN_TxMailbox0CompleteCallback+0x84>)
 8004600:	f7fb fe1e 	bl	8000240 <strlen>
 8004604:	4603      	mov	r3, r0
 8004606:	b29a      	uxth	r2, r3
 8004608:	230a      	movs	r3, #10
 800460a:	4918      	ldr	r1, [pc, #96]	; (800466c <HAL_CAN_TxMailbox0CompleteCallback+0x84>)
 800460c:	4818      	ldr	r0, [pc, #96]	; (8004670 <HAL_CAN_TxMailbox0CompleteCallback+0x88>)
 800460e:	f7fe fe8f 	bl	8003330 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(USER_LED_1_GPIO_Port, USER_LED_1_Pin);
 8004612:	2101      	movs	r1, #1
 8004614:	4817      	ldr	r0, [pc, #92]	; (8004674 <HAL_CAN_TxMailbox0CompleteCallback+0x8c>)
 8004616:	f7fd f98c 	bl	8001932 <HAL_GPIO_TogglePin>
	if(hcan == &hcan1){
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a16      	ldr	r2, [pc, #88]	; (8004678 <HAL_CAN_TxMailbox0CompleteCallback+0x90>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d11b      	bne.n	800465a <HAL_CAN_TxMailbox0CompleteCallback+0x72>
		if(fifoTxDataCAN_high_pop(&can1)){
 8004622:	4810      	ldr	r0, [pc, #64]	; (8004664 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8004624:	f7ff fc30 	bl	8003e88 <fifoTxDataCAN_high_pop>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <HAL_CAN_TxMailbox0CompleteCallback+0x60>
			if(CAN_Send_IT(&can1) == 0){
 800462e:	480d      	ldr	r0, [pc, #52]	; (8004664 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8004630:	f7ff fadc 	bl	8003bec <CAN_Send_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00f      	beq.n	800465a <HAL_CAN_TxMailbox0CompleteCallback+0x72>
				//TODO: implementare errore
			}else{
				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 800463a:	230a      	movs	r3, #10
 800463c:	2206      	movs	r2, #6
 800463e:	490f      	ldr	r1, [pc, #60]	; (800467c <HAL_CAN_TxMailbox0CompleteCallback+0x94>)
 8004640:	480b      	ldr	r0, [pc, #44]	; (8004670 <HAL_CAN_TxMailbox0CompleteCallback+0x88>)
 8004642:	f7fe fe75 	bl	8003330 <HAL_UART_Transmit>
		}else{
			//TODO: riattivare interrupt
			HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
		}*/
	//}
}
 8004646:	e008      	b.n	800465a <HAL_CAN_TxMailbox0CompleteCallback+0x72>
		}else if(fifoTxDataCAN_normal_pop(&can1)){
 8004648:	4806      	ldr	r0, [pc, #24]	; (8004664 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 800464a:	f7ff fbc9 	bl	8003de0 <fifoTxDataCAN_normal_pop>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_CAN_TxMailbox0CompleteCallback+0x72>
			if(CAN_Send_IT(&can1) == 0){
 8004654:	4803      	ldr	r0, [pc, #12]	; (8004664 <HAL_CAN_TxMailbox0CompleteCallback+0x7c>)
 8004656:	f7ff fac9 	bl	8003bec <CAN_Send_IT>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	2000151c 	.word	0x2000151c
 8004668:	080054bc 	.word	0x080054bc
 800466c:	200000a0 	.word	0x200000a0
 8004670:	20002938 	.word	0x20002938
 8004674:	40020400 	.word	0x40020400
 8004678:	20002a70 	.word	0x20002a70
 800467c:	080054c8 	.word	0x080054c8

08004680 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	sprintf(txt,"mb1: %d %d\r\n" ,can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
 8004688:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 800468a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800468e:	461a      	mov	r2, r3
 8004690:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 8004692:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004696:	491c      	ldr	r1, [pc, #112]	; (8004708 <HAL_CAN_TxMailbox1CompleteCallback+0x88>)
 8004698:	481c      	ldr	r0, [pc, #112]	; (800470c <HAL_CAN_TxMailbox1CompleteCallback+0x8c>)
 800469a:	f000 fab5 	bl	8004c08 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 800469e:	481b      	ldr	r0, [pc, #108]	; (800470c <HAL_CAN_TxMailbox1CompleteCallback+0x8c>)
 80046a0:	f7fb fdce 	bl	8000240 <strlen>
 80046a4:	4603      	mov	r3, r0
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	230a      	movs	r3, #10
 80046aa:	4918      	ldr	r1, [pc, #96]	; (800470c <HAL_CAN_TxMailbox1CompleteCallback+0x8c>)
 80046ac:	4818      	ldr	r0, [pc, #96]	; (8004710 <HAL_CAN_TxMailbox1CompleteCallback+0x90>)
 80046ae:	f7fe fe3f 	bl	8003330 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(USER_LED_1_GPIO_Port, USER_LED_1_Pin);
 80046b2:	2101      	movs	r1, #1
 80046b4:	4817      	ldr	r0, [pc, #92]	; (8004714 <HAL_CAN_TxMailbox1CompleteCallback+0x94>)
 80046b6:	f7fd f93c 	bl	8001932 <HAL_GPIO_TogglePin>
	if(hcan == &hcan1){
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <HAL_CAN_TxMailbox1CompleteCallback+0x98>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d11b      	bne.n	80046fa <HAL_CAN_TxMailbox1CompleteCallback+0x7a>
		if(fifoTxDataCAN_high_pop(&can1)){
 80046c2:	4810      	ldr	r0, [pc, #64]	; (8004704 <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 80046c4:	f7ff fbe0 	bl	8003e88 <fifoTxDataCAN_high_pop>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00c      	beq.n	80046e8 <HAL_CAN_TxMailbox1CompleteCallback+0x68>
			if(CAN_Send_IT(&can1) == 0){
 80046ce:	480d      	ldr	r0, [pc, #52]	; (8004704 <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 80046d0:	f7ff fa8c 	bl	8003bec <CAN_Send_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00f      	beq.n	80046fa <HAL_CAN_TxMailbox1CompleteCallback+0x7a>
				//TODO: implementare errore
			}else{
				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 80046da:	230a      	movs	r3, #10
 80046dc:	2206      	movs	r2, #6
 80046de:	490f      	ldr	r1, [pc, #60]	; (800471c <HAL_CAN_TxMailbox1CompleteCallback+0x9c>)
 80046e0:	480b      	ldr	r0, [pc, #44]	; (8004710 <HAL_CAN_TxMailbox1CompleteCallback+0x90>)
 80046e2:	f7fe fe25 	bl	8003330 <HAL_UART_Transmit>
			}
		}else{
			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
		}
	}
}
 80046e6:	e008      	b.n	80046fa <HAL_CAN_TxMailbox1CompleteCallback+0x7a>
		}else if(fifoTxDataCAN_normal_pop(&can1)){
 80046e8:	4806      	ldr	r0, [pc, #24]	; (8004704 <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 80046ea:	f7ff fb79 	bl	8003de0 <fifoTxDataCAN_normal_pop>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <HAL_CAN_TxMailbox1CompleteCallback+0x7a>
			if(CAN_Send_IT(&can1) == 0){
 80046f4:	4803      	ldr	r0, [pc, #12]	; (8004704 <HAL_CAN_TxMailbox1CompleteCallback+0x84>)
 80046f6:	f7ff fa79 	bl	8003bec <CAN_Send_IT>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2000151c 	.word	0x2000151c
 8004708:	080054d0 	.word	0x080054d0
 800470c:	200000a0 	.word	0x200000a0
 8004710:	20002938 	.word	0x20002938
 8004714:	40020400 	.word	0x40020400
 8004718:	20002a70 	.word	0x20002a70
 800471c:	080054c8 	.word	0x080054c8

08004720 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	sprintf(txt,"mb2: %d %d\r\n", can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
 8004728:	4b1e      	ldr	r3, [pc, #120]	; (80047a4 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 800472a:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 800472e:	461a      	mov	r2, r3
 8004730:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 8004732:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004736:	491c      	ldr	r1, [pc, #112]	; (80047a8 <HAL_CAN_TxMailbox2CompleteCallback+0x88>)
 8004738:	481c      	ldr	r0, [pc, #112]	; (80047ac <HAL_CAN_TxMailbox2CompleteCallback+0x8c>)
 800473a:	f000 fa65 	bl	8004c08 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 800473e:	481b      	ldr	r0, [pc, #108]	; (80047ac <HAL_CAN_TxMailbox2CompleteCallback+0x8c>)
 8004740:	f7fb fd7e 	bl	8000240 <strlen>
 8004744:	4603      	mov	r3, r0
 8004746:	b29a      	uxth	r2, r3
 8004748:	230a      	movs	r3, #10
 800474a:	4918      	ldr	r1, [pc, #96]	; (80047ac <HAL_CAN_TxMailbox2CompleteCallback+0x8c>)
 800474c:	4818      	ldr	r0, [pc, #96]	; (80047b0 <HAL_CAN_TxMailbox2CompleteCallback+0x90>)
 800474e:	f7fe fdef 	bl	8003330 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(USER_LED_1_GPIO_Port, USER_LED_1_Pin);
 8004752:	2101      	movs	r1, #1
 8004754:	4817      	ldr	r0, [pc, #92]	; (80047b4 <HAL_CAN_TxMailbox2CompleteCallback+0x94>)
 8004756:	f7fd f8ec 	bl	8001932 <HAL_GPIO_TogglePin>
	if(hcan == &hcan1){
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <HAL_CAN_TxMailbox2CompleteCallback+0x98>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d11b      	bne.n	800479a <HAL_CAN_TxMailbox2CompleteCallback+0x7a>
		if(fifoTxDataCAN_high_pop(&can1)){
 8004762:	4810      	ldr	r0, [pc, #64]	; (80047a4 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 8004764:	f7ff fb90 	bl	8003e88 <fifoTxDataCAN_high_pop>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00c      	beq.n	8004788 <HAL_CAN_TxMailbox2CompleteCallback+0x68>
			if(CAN_Send_IT(&can1) == 0){
 800476e:	480d      	ldr	r0, [pc, #52]	; (80047a4 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 8004770:	f7ff fa3c 	bl	8003bec <CAN_Send_IT>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00f      	beq.n	800479a <HAL_CAN_TxMailbox2CompleteCallback+0x7a>
				//TODO: implementare errore
			}else{
				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 800477a:	230a      	movs	r3, #10
 800477c:	2206      	movs	r2, #6
 800477e:	490f      	ldr	r1, [pc, #60]	; (80047bc <HAL_CAN_TxMailbox2CompleteCallback+0x9c>)
 8004780:	480b      	ldr	r0, [pc, #44]	; (80047b0 <HAL_CAN_TxMailbox2CompleteCallback+0x90>)
 8004782:	f7fe fdd5 	bl	8003330 <HAL_UART_Transmit>
			}
		}else{
			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
		}
	}
}
 8004786:	e008      	b.n	800479a <HAL_CAN_TxMailbox2CompleteCallback+0x7a>
		}else if(fifoTxDataCAN_normal_pop(&can1)){
 8004788:	4806      	ldr	r0, [pc, #24]	; (80047a4 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 800478a:	f7ff fb29 	bl	8003de0 <fifoTxDataCAN_normal_pop>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_CAN_TxMailbox2CompleteCallback+0x7a>
			if(CAN_Send_IT(&can1) == 0){
 8004794:	4803      	ldr	r0, [pc, #12]	; (80047a4 <HAL_CAN_TxMailbox2CompleteCallback+0x84>)
 8004796:	f7ff fa29 	bl	8003bec <CAN_Send_IT>
}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	2000151c 	.word	0x2000151c
 80047a8:	080054e0 	.word	0x080054e0
 80047ac:	200000a0 	.word	0x200000a0
 80047b0:	20002938 	.word	0x20002938
 80047b4:	40020400 	.word	0x40020400
 80047b8:	20002a70 	.word	0x20002a70
 80047bc:	080054c8 	.word	0x080054c8

080047c0 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	sprintf(txt,"--- Errore ---: %d\r\n",(int)hcan->ErrorCode);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	461a      	mov	r2, r3
 80047ce:	490c      	ldr	r1, [pc, #48]	; (8004800 <HAL_CAN_ErrorCallback+0x40>)
 80047d0:	480c      	ldr	r0, [pc, #48]	; (8004804 <HAL_CAN_ErrorCallback+0x44>)
 80047d2:	f000 fa19 	bl	8004c08 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 80047d6:	480b      	ldr	r0, [pc, #44]	; (8004804 <HAL_CAN_ErrorCallback+0x44>)
 80047d8:	f7fb fd32 	bl	8000240 <strlen>
 80047dc:	4603      	mov	r3, r0
 80047de:	b29a      	uxth	r2, r3
 80047e0:	230a      	movs	r3, #10
 80047e2:	4908      	ldr	r1, [pc, #32]	; (8004804 <HAL_CAN_ErrorCallback+0x44>)
 80047e4:	4808      	ldr	r0, [pc, #32]	; (8004808 <HAL_CAN_ErrorCallback+0x48>)
 80047e6:	f7fe fda3 	bl	8003330 <HAL_UART_Transmit>
	if(hcan == &hcan1){
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a07      	ldr	r2, [pc, #28]	; (800480c <HAL_CAN_ErrorCallback+0x4c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d102      	bne.n	80047f8 <HAL_CAN_ErrorCallback+0x38>
		CAN_Send_Bck(&can1);
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <HAL_CAN_ErrorCallback+0x50>)
 80047f4:	f7ff fa3e 	bl	8003c74 <CAN_Send_Bck>
	}
}
 80047f8:	bf00      	nop
 80047fa:	3708      	adds	r7, #8
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	080054f0 	.word	0x080054f0
 8004804:	200000a0 	.word	0x200000a0
 8004808:	20002938 	.word	0x20002938
 800480c:	20002a70 	.word	0x20002a70
 8004810:	2000151c 	.word	0x2000151c

08004814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

  /* User can add his own implementation to report the HAL error return state */

	//HAL_GPIO_TogglePin(USER_LED_1_GPIO_Port, USER_LED_1_Pin);
	HAL_GPIO_TogglePin(USER_LED_2_GPIO_Port, USER_LED_2_Pin);
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	4806      	ldr	r0, [pc, #24]	; (8004834 <Error_Handler+0x20>)
 800481c:	f7fd f889 	bl	8001932 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(USER_LED_3_GPIO_Port, USER_LED_3_Pin);
 8004820:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004824:	4803      	ldr	r0, [pc, #12]	; (8004834 <Error_Handler+0x20>)
 8004826:	f7fd f884 	bl	8001932 <HAL_GPIO_TogglePin>

	HAL_Delay(100);
 800482a:	2064      	movs	r0, #100	; 0x64
 800482c:	f7fb ff3e 	bl	80006ac <HAL_Delay>

  /* USER CODE END Error_Handler_Debug */
}
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40020400 	.word	0x40020400

08004838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_MspInit+0x44>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_MspInit+0x44>)
 8004844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004848:	6413      	str	r3, [r2, #64]	; 0x40
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <HAL_MspInit+0x44>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_MspInit+0x44>)
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	4a08      	ldr	r2, [pc, #32]	; (800487c <HAL_MspInit+0x44>)
 800485c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004860:	6453      	str	r3, [r2, #68]	; 0x44
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_MspInit+0x44>)
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800

08004880 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_CAN_MspInit+0x7c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d128      	bne.n	80048f4 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <HAL_CAN_MspInit+0x80>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a16      	ldr	r2, [pc, #88]	; (8004900 <HAL_CAN_MspInit+0x80>)
 80048a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b14      	ldr	r3, [pc, #80]	; (8004900 <HAL_CAN_MspInit+0x80>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_CAN_MspInit+0x80>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4a10      	ldr	r2, [pc, #64]	; (8004900 <HAL_CAN_MspInit+0x80>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6313      	str	r3, [r2, #48]	; 0x30
 80048c6:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_CAN_MspInit+0x80>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80048d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80048d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d8:	2302      	movs	r3, #2
 80048da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e0:	2303      	movs	r3, #3
 80048e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80048e4:	2309      	movs	r3, #9
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e8:	f107 0314 	add.w	r3, r7, #20
 80048ec:	4619      	mov	r1, r3
 80048ee:	4805      	ldr	r0, [pc, #20]	; (8004904 <HAL_CAN_MspInit+0x84>)
 80048f0:	f7fc fe5c 	bl	80015ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80048f4:	bf00      	nop
 80048f6:	3728      	adds	r7, #40	; 0x28
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40006400 	.word	0x40006400
 8004900:	40023800 	.word	0x40023800
 8004904:	40020000 	.word	0x40020000

08004908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004918:	d10b      	bne.n	8004932 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800491a:	4b09      	ldr	r3, [pc, #36]	; (8004940 <HAL_TIM_Base_MspInit+0x38>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	4a08      	ldr	r2, [pc, #32]	; (8004940 <HAL_TIM_Base_MspInit+0x38>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6413      	str	r3, [r2, #64]	; 0x40
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_TIM_Base_MspInit+0x38>)
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800

08004944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	; 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	605a      	str	r2, [r3, #4]
 8004956:	609a      	str	r2, [r3, #8]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a17      	ldr	r2, [pc, #92]	; (80049c0 <HAL_UART_MspInit+0x7c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d128      	bne.n	80049b8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004966:	4b17      	ldr	r3, [pc, #92]	; (80049c4 <HAL_UART_MspInit+0x80>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a16      	ldr	r2, [pc, #88]	; (80049c4 <HAL_UART_MspInit+0x80>)
 800496c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <HAL_UART_MspInit+0x80>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <HAL_UART_MspInit+0x80>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	4a10      	ldr	r2, [pc, #64]	; (80049c4 <HAL_UART_MspInit+0x80>)
 8004984:	f043 0308 	orr.w	r3, r3, #8
 8004988:	6313      	str	r3, [r2, #48]	; 0x30
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_UART_MspInit+0x80>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800499a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800499c:	2302      	movs	r3, #2
 800499e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a4:	2303      	movs	r3, #3
 80049a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049a8:	2307      	movs	r3, #7
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ac:	f107 0314 	add.w	r3, r7, #20
 80049b0:	4619      	mov	r1, r3
 80049b2:	4805      	ldr	r0, [pc, #20]	; (80049c8 <HAL_UART_MspInit+0x84>)
 80049b4:	f7fc fdfa 	bl	80015ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80049b8:	bf00      	nop
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40004800 	.word	0x40004800
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40020c00 	.word	0x40020c00

080049cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049da:	b480      	push	{r7}
 80049dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049de:	e7fe      	b.n	80049de <HardFault_Handler+0x4>

080049e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <MemManage_Handler+0x4>

080049e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049ea:	e7fe      	b.n	80049ea <BusFault_Handler+0x4>

080049ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049f0:	e7fe      	b.n	80049f0 <UsageFault_Handler+0x4>

080049f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049f2:	b480      	push	{r7}
 80049f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a20:	f7fb fe24 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a2c:	4802      	ldr	r0, [pc, #8]	; (8004a38 <CAN1_TX_IRQHandler+0x10>)
 8004a2e:	f7fc fac7 	bl	8000fc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20002a70 	.word	0x20002a70

08004a3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a40:	4802      	ldr	r0, [pc, #8]	; (8004a4c <CAN1_RX0_IRQHandler+0x10>)
 8004a42:	f7fc fabd 	bl	8000fc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20002a70 	.word	0x20002a70

08004a50 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a54:	4802      	ldr	r0, [pc, #8]	; (8004a60 <CAN1_RX1_IRQHandler+0x10>)
 8004a56:	f7fc fab3 	bl	8000fc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20002a70 	.word	0x20002a70

08004a64 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004a68:	4802      	ldr	r0, [pc, #8]	; (8004a74 <CAN1_SCE_IRQHandler+0x10>)
 8004a6a:	f7fc faa9 	bl	8000fc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20002a70 	.word	0x20002a70

08004a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a7c:	4802      	ldr	r0, [pc, #8]	; (8004a88 <TIM2_IRQHandler+0x10>)
 8004a7e:	f7fe f854 	bl	8002b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	20002a30 	.word	0x20002a30

08004a8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <_sbrk+0x50>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d102      	bne.n	8004aa2 <_sbrk+0x16>
		heap_end = &end;
 8004a9c:	4b0f      	ldr	r3, [pc, #60]	; (8004adc <_sbrk+0x50>)
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <_sbrk+0x54>)
 8004aa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <_sbrk+0x50>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <_sbrk+0x50>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4413      	add	r3, r2
 8004ab0:	466a      	mov	r2, sp
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d907      	bls.n	8004ac6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004ab6:	f000 f875 	bl	8004ba4 <__errno>
 8004aba:	4602      	mov	r2, r0
 8004abc:	230c      	movs	r3, #12
 8004abe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ac4:	e006      	b.n	8004ad4 <_sbrk+0x48>
	}

	heap_end += incr;
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <_sbrk+0x50>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4413      	add	r3, r2
 8004ace:	4a03      	ldr	r2, [pc, #12]	; (8004adc <_sbrk+0x50>)
 8004ad0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20000090 	.word	0x20000090
 8004ae0:	20002aa0 	.word	0x20002aa0

08004ae4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <SystemInit+0x5c>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	4a14      	ldr	r2, [pc, #80]	; (8004b40 <SystemInit+0x5c>)
 8004af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004af8:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <SystemInit+0x60>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <SystemInit+0x60>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b04:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <SystemInit+0x60>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <SystemInit+0x60>)
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	490d      	ldr	r1, [pc, #52]	; (8004b44 <SystemInit+0x60>)
 8004b10:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <SystemInit+0x64>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <SystemInit+0x60>)
 8004b18:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <SystemInit+0x68>)
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b1c:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <SystemInit+0x60>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a08      	ldr	r2, [pc, #32]	; (8004b44 <SystemInit+0x60>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <SystemInit+0x60>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b2e:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <SystemInit+0x5c>)
 8004b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b34:	609a      	str	r2, [r3, #8]
#endif
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	e000ed00 	.word	0xe000ed00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	fef6ffff 	.word	0xfef6ffff
 8004b4c:	24003010 	.word	0x24003010

08004b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004b54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004b56:	e003      	b.n	8004b60 <LoopCopyDataInit>

08004b58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004b58:	4b0c      	ldr	r3, [pc, #48]	; (8004b8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004b5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004b5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004b5e:	3104      	adds	r1, #4

08004b60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004b60:	480b      	ldr	r0, [pc, #44]	; (8004b90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004b64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004b66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004b68:	d3f6      	bcc.n	8004b58 <CopyDataInit>
  ldr  r2, =_sbss
 8004b6a:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004b6c:	e002      	b.n	8004b74 <LoopFillZerobss>

08004b6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004b6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004b70:	f842 3b04 	str.w	r3, [r2], #4

08004b74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004b74:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004b76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004b78:	d3f9      	bcc.n	8004b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b7a:	f7ff ffb3 	bl	8004ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b7e:	f000 f817 	bl	8004bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b82:	f7ff f9d7 	bl	8003f34 <main>
  bx  lr    
 8004b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004b88:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004b8c:	08005564 	.word	0x08005564
  ldr  r0, =_sdata
 8004b90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004b94:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004b98:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004b9c:	20002a9c 	.word	0x20002a9c

08004ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ba0:	e7fe      	b.n	8004ba0 <ADC_IRQHandler>
	...

08004ba4 <__errno>:
 8004ba4:	4b01      	ldr	r3, [pc, #4]	; (8004bac <__errno+0x8>)
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	2000000c 	.word	0x2000000c

08004bb0 <__libc_init_array>:
 8004bb0:	b570      	push	{r4, r5, r6, lr}
 8004bb2:	4e0d      	ldr	r6, [pc, #52]	; (8004be8 <__libc_init_array+0x38>)
 8004bb4:	4c0d      	ldr	r4, [pc, #52]	; (8004bec <__libc_init_array+0x3c>)
 8004bb6:	1ba4      	subs	r4, r4, r6
 8004bb8:	10a4      	asrs	r4, r4, #2
 8004bba:	2500      	movs	r5, #0
 8004bbc:	42a5      	cmp	r5, r4
 8004bbe:	d109      	bne.n	8004bd4 <__libc_init_array+0x24>
 8004bc0:	4e0b      	ldr	r6, [pc, #44]	; (8004bf0 <__libc_init_array+0x40>)
 8004bc2:	4c0c      	ldr	r4, [pc, #48]	; (8004bf4 <__libc_init_array+0x44>)
 8004bc4:	f000 fc26 	bl	8005414 <_init>
 8004bc8:	1ba4      	subs	r4, r4, r6
 8004bca:	10a4      	asrs	r4, r4, #2
 8004bcc:	2500      	movs	r5, #0
 8004bce:	42a5      	cmp	r5, r4
 8004bd0:	d105      	bne.n	8004bde <__libc_init_array+0x2e>
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bd8:	4798      	blx	r3
 8004bda:	3501      	adds	r5, #1
 8004bdc:	e7ee      	b.n	8004bbc <__libc_init_array+0xc>
 8004bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004be2:	4798      	blx	r3
 8004be4:	3501      	adds	r5, #1
 8004be6:	e7f2      	b.n	8004bce <__libc_init_array+0x1e>
 8004be8:	0800555c 	.word	0x0800555c
 8004bec:	0800555c 	.word	0x0800555c
 8004bf0:	0800555c 	.word	0x0800555c
 8004bf4:	08005560 	.word	0x08005560

08004bf8 <memset>:
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <siprintf>:
 8004c08:	b40e      	push	{r1, r2, r3}
 8004c0a:	b500      	push	{lr}
 8004c0c:	b09c      	sub	sp, #112	; 0x70
 8004c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c10:	9002      	str	r0, [sp, #8]
 8004c12:	9006      	str	r0, [sp, #24]
 8004c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c18:	4809      	ldr	r0, [pc, #36]	; (8004c40 <siprintf+0x38>)
 8004c1a:	9107      	str	r1, [sp, #28]
 8004c1c:	9104      	str	r1, [sp, #16]
 8004c1e:	4909      	ldr	r1, [pc, #36]	; (8004c44 <siprintf+0x3c>)
 8004c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c24:	9105      	str	r1, [sp, #20]
 8004c26:	6800      	ldr	r0, [r0, #0]
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	a902      	add	r1, sp, #8
 8004c2c:	f000 f866 	bl	8004cfc <_svfiprintf_r>
 8004c30:	9b02      	ldr	r3, [sp, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	b01c      	add	sp, #112	; 0x70
 8004c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c3c:	b003      	add	sp, #12
 8004c3e:	4770      	bx	lr
 8004c40:	2000000c 	.word	0x2000000c
 8004c44:	ffff0208 	.word	0xffff0208

08004c48 <__ssputs_r>:
 8004c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c4c:	688e      	ldr	r6, [r1, #8]
 8004c4e:	429e      	cmp	r6, r3
 8004c50:	4682      	mov	sl, r0
 8004c52:	460c      	mov	r4, r1
 8004c54:	4690      	mov	r8, r2
 8004c56:	4699      	mov	r9, r3
 8004c58:	d837      	bhi.n	8004cca <__ssputs_r+0x82>
 8004c5a:	898a      	ldrh	r2, [r1, #12]
 8004c5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c60:	d031      	beq.n	8004cc6 <__ssputs_r+0x7e>
 8004c62:	6825      	ldr	r5, [r4, #0]
 8004c64:	6909      	ldr	r1, [r1, #16]
 8004c66:	1a6f      	subs	r7, r5, r1
 8004c68:	6965      	ldr	r5, [r4, #20]
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c70:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c74:	f109 0301 	add.w	r3, r9, #1
 8004c78:	443b      	add	r3, r7
 8004c7a:	429d      	cmp	r5, r3
 8004c7c:	bf38      	it	cc
 8004c7e:	461d      	movcc	r5, r3
 8004c80:	0553      	lsls	r3, r2, #21
 8004c82:	d530      	bpl.n	8004ce6 <__ssputs_r+0x9e>
 8004c84:	4629      	mov	r1, r5
 8004c86:	f000 fb2b 	bl	80052e0 <_malloc_r>
 8004c8a:	4606      	mov	r6, r0
 8004c8c:	b950      	cbnz	r0, 8004ca4 <__ssputs_r+0x5c>
 8004c8e:	230c      	movs	r3, #12
 8004c90:	f8ca 3000 	str.w	r3, [sl]
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	6921      	ldr	r1, [r4, #16]
 8004ca8:	f000 faa8 	bl	80051fc <memcpy>
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cb6:	81a3      	strh	r3, [r4, #12]
 8004cb8:	6126      	str	r6, [r4, #16]
 8004cba:	6165      	str	r5, [r4, #20]
 8004cbc:	443e      	add	r6, r7
 8004cbe:	1bed      	subs	r5, r5, r7
 8004cc0:	6026      	str	r6, [r4, #0]
 8004cc2:	60a5      	str	r5, [r4, #8]
 8004cc4:	464e      	mov	r6, r9
 8004cc6:	454e      	cmp	r6, r9
 8004cc8:	d900      	bls.n	8004ccc <__ssputs_r+0x84>
 8004cca:	464e      	mov	r6, r9
 8004ccc:	4632      	mov	r2, r6
 8004cce:	4641      	mov	r1, r8
 8004cd0:	6820      	ldr	r0, [r4, #0]
 8004cd2:	f000 fa9e 	bl	8005212 <memmove>
 8004cd6:	68a3      	ldr	r3, [r4, #8]
 8004cd8:	1b9b      	subs	r3, r3, r6
 8004cda:	60a3      	str	r3, [r4, #8]
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	441e      	add	r6, r3
 8004ce0:	6026      	str	r6, [r4, #0]
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e7dc      	b.n	8004ca0 <__ssputs_r+0x58>
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	f000 fb54 	bl	8005394 <_realloc_r>
 8004cec:	4606      	mov	r6, r0
 8004cee:	2800      	cmp	r0, #0
 8004cf0:	d1e2      	bne.n	8004cb8 <__ssputs_r+0x70>
 8004cf2:	6921      	ldr	r1, [r4, #16]
 8004cf4:	4650      	mov	r0, sl
 8004cf6:	f000 faa5 	bl	8005244 <_free_r>
 8004cfa:	e7c8      	b.n	8004c8e <__ssputs_r+0x46>

08004cfc <_svfiprintf_r>:
 8004cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	461d      	mov	r5, r3
 8004d02:	898b      	ldrh	r3, [r1, #12]
 8004d04:	061f      	lsls	r7, r3, #24
 8004d06:	b09d      	sub	sp, #116	; 0x74
 8004d08:	4680      	mov	r8, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	4616      	mov	r6, r2
 8004d0e:	d50f      	bpl.n	8004d30 <_svfiprintf_r+0x34>
 8004d10:	690b      	ldr	r3, [r1, #16]
 8004d12:	b96b      	cbnz	r3, 8004d30 <_svfiprintf_r+0x34>
 8004d14:	2140      	movs	r1, #64	; 0x40
 8004d16:	f000 fae3 	bl	80052e0 <_malloc_r>
 8004d1a:	6020      	str	r0, [r4, #0]
 8004d1c:	6120      	str	r0, [r4, #16]
 8004d1e:	b928      	cbnz	r0, 8004d2c <_svfiprintf_r+0x30>
 8004d20:	230c      	movs	r3, #12
 8004d22:	f8c8 3000 	str.w	r3, [r8]
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d2a:	e0c8      	b.n	8004ebe <_svfiprintf_r+0x1c2>
 8004d2c:	2340      	movs	r3, #64	; 0x40
 8004d2e:	6163      	str	r3, [r4, #20]
 8004d30:	2300      	movs	r3, #0
 8004d32:	9309      	str	r3, [sp, #36]	; 0x24
 8004d34:	2320      	movs	r3, #32
 8004d36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d3a:	2330      	movs	r3, #48	; 0x30
 8004d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d40:	9503      	str	r5, [sp, #12]
 8004d42:	f04f 0b01 	mov.w	fp, #1
 8004d46:	4637      	mov	r7, r6
 8004d48:	463d      	mov	r5, r7
 8004d4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004d4e:	b10b      	cbz	r3, 8004d54 <_svfiprintf_r+0x58>
 8004d50:	2b25      	cmp	r3, #37	; 0x25
 8004d52:	d13e      	bne.n	8004dd2 <_svfiprintf_r+0xd6>
 8004d54:	ebb7 0a06 	subs.w	sl, r7, r6
 8004d58:	d00b      	beq.n	8004d72 <_svfiprintf_r+0x76>
 8004d5a:	4653      	mov	r3, sl
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4621      	mov	r1, r4
 8004d60:	4640      	mov	r0, r8
 8004d62:	f7ff ff71 	bl	8004c48 <__ssputs_r>
 8004d66:	3001      	adds	r0, #1
 8004d68:	f000 80a4 	beq.w	8004eb4 <_svfiprintf_r+0x1b8>
 8004d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6e:	4453      	add	r3, sl
 8004d70:	9309      	str	r3, [sp, #36]	; 0x24
 8004d72:	783b      	ldrb	r3, [r7, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 809d 	beq.w	8004eb4 <_svfiprintf_r+0x1b8>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d84:	9304      	str	r3, [sp, #16]
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004d8e:	462f      	mov	r7, r5
 8004d90:	2205      	movs	r2, #5
 8004d92:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004d96:	4850      	ldr	r0, [pc, #320]	; (8004ed8 <_svfiprintf_r+0x1dc>)
 8004d98:	f7fb fa5a 	bl	8000250 <memchr>
 8004d9c:	9b04      	ldr	r3, [sp, #16]
 8004d9e:	b9d0      	cbnz	r0, 8004dd6 <_svfiprintf_r+0xda>
 8004da0:	06d9      	lsls	r1, r3, #27
 8004da2:	bf44      	itt	mi
 8004da4:	2220      	movmi	r2, #32
 8004da6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004daa:	071a      	lsls	r2, r3, #28
 8004dac:	bf44      	itt	mi
 8004dae:	222b      	movmi	r2, #43	; 0x2b
 8004db0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004db4:	782a      	ldrb	r2, [r5, #0]
 8004db6:	2a2a      	cmp	r2, #42	; 0x2a
 8004db8:	d015      	beq.n	8004de6 <_svfiprintf_r+0xea>
 8004dba:	9a07      	ldr	r2, [sp, #28]
 8004dbc:	462f      	mov	r7, r5
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	250a      	movs	r5, #10
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dc8:	3b30      	subs	r3, #48	; 0x30
 8004dca:	2b09      	cmp	r3, #9
 8004dcc:	d94d      	bls.n	8004e6a <_svfiprintf_r+0x16e>
 8004dce:	b1b8      	cbz	r0, 8004e00 <_svfiprintf_r+0x104>
 8004dd0:	e00f      	b.n	8004df2 <_svfiprintf_r+0xf6>
 8004dd2:	462f      	mov	r7, r5
 8004dd4:	e7b8      	b.n	8004d48 <_svfiprintf_r+0x4c>
 8004dd6:	4a40      	ldr	r2, [pc, #256]	; (8004ed8 <_svfiprintf_r+0x1dc>)
 8004dd8:	1a80      	subs	r0, r0, r2
 8004dda:	fa0b f000 	lsl.w	r0, fp, r0
 8004dde:	4318      	orrs	r0, r3
 8004de0:	9004      	str	r0, [sp, #16]
 8004de2:	463d      	mov	r5, r7
 8004de4:	e7d3      	b.n	8004d8e <_svfiprintf_r+0x92>
 8004de6:	9a03      	ldr	r2, [sp, #12]
 8004de8:	1d11      	adds	r1, r2, #4
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	9103      	str	r1, [sp, #12]
 8004dee:	2a00      	cmp	r2, #0
 8004df0:	db01      	blt.n	8004df6 <_svfiprintf_r+0xfa>
 8004df2:	9207      	str	r2, [sp, #28]
 8004df4:	e004      	b.n	8004e00 <_svfiprintf_r+0x104>
 8004df6:	4252      	negs	r2, r2
 8004df8:	f043 0302 	orr.w	r3, r3, #2
 8004dfc:	9207      	str	r2, [sp, #28]
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	783b      	ldrb	r3, [r7, #0]
 8004e02:	2b2e      	cmp	r3, #46	; 0x2e
 8004e04:	d10c      	bne.n	8004e20 <_svfiprintf_r+0x124>
 8004e06:	787b      	ldrb	r3, [r7, #1]
 8004e08:	2b2a      	cmp	r3, #42	; 0x2a
 8004e0a:	d133      	bne.n	8004e74 <_svfiprintf_r+0x178>
 8004e0c:	9b03      	ldr	r3, [sp, #12]
 8004e0e:	1d1a      	adds	r2, r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	9203      	str	r2, [sp, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bfb8      	it	lt
 8004e18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004e1c:	3702      	adds	r7, #2
 8004e1e:	9305      	str	r3, [sp, #20]
 8004e20:	4d2e      	ldr	r5, [pc, #184]	; (8004edc <_svfiprintf_r+0x1e0>)
 8004e22:	7839      	ldrb	r1, [r7, #0]
 8004e24:	2203      	movs	r2, #3
 8004e26:	4628      	mov	r0, r5
 8004e28:	f7fb fa12 	bl	8000250 <memchr>
 8004e2c:	b138      	cbz	r0, 8004e3e <_svfiprintf_r+0x142>
 8004e2e:	2340      	movs	r3, #64	; 0x40
 8004e30:	1b40      	subs	r0, r0, r5
 8004e32:	fa03 f000 	lsl.w	r0, r3, r0
 8004e36:	9b04      	ldr	r3, [sp, #16]
 8004e38:	4303      	orrs	r3, r0
 8004e3a:	3701      	adds	r7, #1
 8004e3c:	9304      	str	r3, [sp, #16]
 8004e3e:	7839      	ldrb	r1, [r7, #0]
 8004e40:	4827      	ldr	r0, [pc, #156]	; (8004ee0 <_svfiprintf_r+0x1e4>)
 8004e42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e46:	2206      	movs	r2, #6
 8004e48:	1c7e      	adds	r6, r7, #1
 8004e4a:	f7fb fa01 	bl	8000250 <memchr>
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	d038      	beq.n	8004ec4 <_svfiprintf_r+0x1c8>
 8004e52:	4b24      	ldr	r3, [pc, #144]	; (8004ee4 <_svfiprintf_r+0x1e8>)
 8004e54:	bb13      	cbnz	r3, 8004e9c <_svfiprintf_r+0x1a0>
 8004e56:	9b03      	ldr	r3, [sp, #12]
 8004e58:	3307      	adds	r3, #7
 8004e5a:	f023 0307 	bic.w	r3, r3, #7
 8004e5e:	3308      	adds	r3, #8
 8004e60:	9303      	str	r3, [sp, #12]
 8004e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e64:	444b      	add	r3, r9
 8004e66:	9309      	str	r3, [sp, #36]	; 0x24
 8004e68:	e76d      	b.n	8004d46 <_svfiprintf_r+0x4a>
 8004e6a:	fb05 3202 	mla	r2, r5, r2, r3
 8004e6e:	2001      	movs	r0, #1
 8004e70:	460f      	mov	r7, r1
 8004e72:	e7a6      	b.n	8004dc2 <_svfiprintf_r+0xc6>
 8004e74:	2300      	movs	r3, #0
 8004e76:	3701      	adds	r7, #1
 8004e78:	9305      	str	r3, [sp, #20]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	250a      	movs	r5, #10
 8004e7e:	4638      	mov	r0, r7
 8004e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e84:	3a30      	subs	r2, #48	; 0x30
 8004e86:	2a09      	cmp	r2, #9
 8004e88:	d903      	bls.n	8004e92 <_svfiprintf_r+0x196>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0c8      	beq.n	8004e20 <_svfiprintf_r+0x124>
 8004e8e:	9105      	str	r1, [sp, #20]
 8004e90:	e7c6      	b.n	8004e20 <_svfiprintf_r+0x124>
 8004e92:	fb05 2101 	mla	r1, r5, r1, r2
 8004e96:	2301      	movs	r3, #1
 8004e98:	4607      	mov	r7, r0
 8004e9a:	e7f0      	b.n	8004e7e <_svfiprintf_r+0x182>
 8004e9c:	ab03      	add	r3, sp, #12
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <_svfiprintf_r+0x1ec>)
 8004ea4:	a904      	add	r1, sp, #16
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	f3af 8000 	nop.w
 8004eac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004eb0:	4681      	mov	r9, r0
 8004eb2:	d1d6      	bne.n	8004e62 <_svfiprintf_r+0x166>
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	065b      	lsls	r3, r3, #25
 8004eb8:	f53f af35 	bmi.w	8004d26 <_svfiprintf_r+0x2a>
 8004ebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ebe:	b01d      	add	sp, #116	; 0x74
 8004ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ec4:	ab03      	add	r3, sp, #12
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4622      	mov	r2, r4
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <_svfiprintf_r+0x1ec>)
 8004ecc:	a904      	add	r1, sp, #16
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f000 f882 	bl	8004fd8 <_printf_i>
 8004ed4:	e7ea      	b.n	8004eac <_svfiprintf_r+0x1b0>
 8004ed6:	bf00      	nop
 8004ed8:	08005520 	.word	0x08005520
 8004edc:	08005526 	.word	0x08005526
 8004ee0:	0800552a 	.word	0x0800552a
 8004ee4:	00000000 	.word	0x00000000
 8004ee8:	08004c49 	.word	0x08004c49

08004eec <_printf_common>:
 8004eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef0:	4691      	mov	r9, r2
 8004ef2:	461f      	mov	r7, r3
 8004ef4:	688a      	ldr	r2, [r1, #8]
 8004ef6:	690b      	ldr	r3, [r1, #16]
 8004ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004efc:	4293      	cmp	r3, r2
 8004efe:	bfb8      	it	lt
 8004f00:	4613      	movlt	r3, r2
 8004f02:	f8c9 3000 	str.w	r3, [r9]
 8004f06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f0a:	4606      	mov	r6, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	b112      	cbz	r2, 8004f16 <_printf_common+0x2a>
 8004f10:	3301      	adds	r3, #1
 8004f12:	f8c9 3000 	str.w	r3, [r9]
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	0699      	lsls	r1, r3, #26
 8004f1a:	bf42      	ittt	mi
 8004f1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f20:	3302      	addmi	r3, #2
 8004f22:	f8c9 3000 	strmi.w	r3, [r9]
 8004f26:	6825      	ldr	r5, [r4, #0]
 8004f28:	f015 0506 	ands.w	r5, r5, #6
 8004f2c:	d107      	bne.n	8004f3e <_printf_common+0x52>
 8004f2e:	f104 0a19 	add.w	sl, r4, #25
 8004f32:	68e3      	ldr	r3, [r4, #12]
 8004f34:	f8d9 2000 	ldr.w	r2, [r9]
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	42ab      	cmp	r3, r5
 8004f3c:	dc28      	bgt.n	8004f90 <_printf_common+0xa4>
 8004f3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f42:	6822      	ldr	r2, [r4, #0]
 8004f44:	3300      	adds	r3, #0
 8004f46:	bf18      	it	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	0692      	lsls	r2, r2, #26
 8004f4c:	d42d      	bmi.n	8004faa <_printf_common+0xbe>
 8004f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f52:	4639      	mov	r1, r7
 8004f54:	4630      	mov	r0, r6
 8004f56:	47c0      	blx	r8
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d020      	beq.n	8004f9e <_printf_common+0xb2>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	68e5      	ldr	r5, [r4, #12]
 8004f60:	f8d9 2000 	ldr.w	r2, [r9]
 8004f64:	f003 0306 	and.w	r3, r3, #6
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	bf08      	it	eq
 8004f6c:	1aad      	subeq	r5, r5, r2
 8004f6e:	68a3      	ldr	r3, [r4, #8]
 8004f70:	6922      	ldr	r2, [r4, #16]
 8004f72:	bf0c      	ite	eq
 8004f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f78:	2500      	movne	r5, #0
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	bfc4      	itt	gt
 8004f7e:	1a9b      	subgt	r3, r3, r2
 8004f80:	18ed      	addgt	r5, r5, r3
 8004f82:	f04f 0900 	mov.w	r9, #0
 8004f86:	341a      	adds	r4, #26
 8004f88:	454d      	cmp	r5, r9
 8004f8a:	d11a      	bne.n	8004fc2 <_printf_common+0xd6>
 8004f8c:	2000      	movs	r0, #0
 8004f8e:	e008      	b.n	8004fa2 <_printf_common+0xb6>
 8004f90:	2301      	movs	r3, #1
 8004f92:	4652      	mov	r2, sl
 8004f94:	4639      	mov	r1, r7
 8004f96:	4630      	mov	r0, r6
 8004f98:	47c0      	blx	r8
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d103      	bne.n	8004fa6 <_printf_common+0xba>
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa6:	3501      	adds	r5, #1
 8004fa8:	e7c3      	b.n	8004f32 <_printf_common+0x46>
 8004faa:	18e1      	adds	r1, r4, r3
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	2030      	movs	r0, #48	; 0x30
 8004fb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fb4:	4422      	add	r2, r4
 8004fb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	e7c5      	b.n	8004f4e <_printf_common+0x62>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	4630      	mov	r0, r6
 8004fca:	47c0      	blx	r8
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d0e6      	beq.n	8004f9e <_printf_common+0xb2>
 8004fd0:	f109 0901 	add.w	r9, r9, #1
 8004fd4:	e7d8      	b.n	8004f88 <_printf_common+0x9c>
	...

08004fd8 <_printf_i>:
 8004fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	7e09      	ldrb	r1, [r1, #24]
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	296e      	cmp	r1, #110	; 0x6e
 8004fe8:	4617      	mov	r7, r2
 8004fea:	4606      	mov	r6, r0
 8004fec:	4698      	mov	r8, r3
 8004fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ff0:	f000 80b3 	beq.w	800515a <_printf_i+0x182>
 8004ff4:	d822      	bhi.n	800503c <_printf_i+0x64>
 8004ff6:	2963      	cmp	r1, #99	; 0x63
 8004ff8:	d036      	beq.n	8005068 <_printf_i+0x90>
 8004ffa:	d80a      	bhi.n	8005012 <_printf_i+0x3a>
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	f000 80b9 	beq.w	8005174 <_printf_i+0x19c>
 8005002:	2958      	cmp	r1, #88	; 0x58
 8005004:	f000 8083 	beq.w	800510e <_printf_i+0x136>
 8005008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800500c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005010:	e032      	b.n	8005078 <_printf_i+0xa0>
 8005012:	2964      	cmp	r1, #100	; 0x64
 8005014:	d001      	beq.n	800501a <_printf_i+0x42>
 8005016:	2969      	cmp	r1, #105	; 0x69
 8005018:	d1f6      	bne.n	8005008 <_printf_i+0x30>
 800501a:	6820      	ldr	r0, [r4, #0]
 800501c:	6813      	ldr	r3, [r2, #0]
 800501e:	0605      	lsls	r5, r0, #24
 8005020:	f103 0104 	add.w	r1, r3, #4
 8005024:	d52a      	bpl.n	800507c <_printf_i+0xa4>
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6011      	str	r1, [r2, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	da03      	bge.n	8005036 <_printf_i+0x5e>
 800502e:	222d      	movs	r2, #45	; 0x2d
 8005030:	425b      	negs	r3, r3
 8005032:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005036:	486f      	ldr	r0, [pc, #444]	; (80051f4 <_printf_i+0x21c>)
 8005038:	220a      	movs	r2, #10
 800503a:	e039      	b.n	80050b0 <_printf_i+0xd8>
 800503c:	2973      	cmp	r1, #115	; 0x73
 800503e:	f000 809d 	beq.w	800517c <_printf_i+0x1a4>
 8005042:	d808      	bhi.n	8005056 <_printf_i+0x7e>
 8005044:	296f      	cmp	r1, #111	; 0x6f
 8005046:	d020      	beq.n	800508a <_printf_i+0xb2>
 8005048:	2970      	cmp	r1, #112	; 0x70
 800504a:	d1dd      	bne.n	8005008 <_printf_i+0x30>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	e003      	b.n	800505e <_printf_i+0x86>
 8005056:	2975      	cmp	r1, #117	; 0x75
 8005058:	d017      	beq.n	800508a <_printf_i+0xb2>
 800505a:	2978      	cmp	r1, #120	; 0x78
 800505c:	d1d4      	bne.n	8005008 <_printf_i+0x30>
 800505e:	2378      	movs	r3, #120	; 0x78
 8005060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005064:	4864      	ldr	r0, [pc, #400]	; (80051f8 <_printf_i+0x220>)
 8005066:	e055      	b.n	8005114 <_printf_i+0x13c>
 8005068:	6813      	ldr	r3, [r2, #0]
 800506a:	1d19      	adds	r1, r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6011      	str	r1, [r2, #0]
 8005070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005078:	2301      	movs	r3, #1
 800507a:	e08c      	b.n	8005196 <_printf_i+0x1be>
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6011      	str	r1, [r2, #0]
 8005080:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005084:	bf18      	it	ne
 8005086:	b21b      	sxthne	r3, r3
 8005088:	e7cf      	b.n	800502a <_printf_i+0x52>
 800508a:	6813      	ldr	r3, [r2, #0]
 800508c:	6825      	ldr	r5, [r4, #0]
 800508e:	1d18      	adds	r0, r3, #4
 8005090:	6010      	str	r0, [r2, #0]
 8005092:	0628      	lsls	r0, r5, #24
 8005094:	d501      	bpl.n	800509a <_printf_i+0xc2>
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	e002      	b.n	80050a0 <_printf_i+0xc8>
 800509a:	0668      	lsls	r0, r5, #25
 800509c:	d5fb      	bpl.n	8005096 <_printf_i+0xbe>
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	4854      	ldr	r0, [pc, #336]	; (80051f4 <_printf_i+0x21c>)
 80050a2:	296f      	cmp	r1, #111	; 0x6f
 80050a4:	bf14      	ite	ne
 80050a6:	220a      	movne	r2, #10
 80050a8:	2208      	moveq	r2, #8
 80050aa:	2100      	movs	r1, #0
 80050ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050b0:	6865      	ldr	r5, [r4, #4]
 80050b2:	60a5      	str	r5, [r4, #8]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	f2c0 8095 	blt.w	80051e4 <_printf_i+0x20c>
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	f021 0104 	bic.w	r1, r1, #4
 80050c0:	6021      	str	r1, [r4, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d13d      	bne.n	8005142 <_printf_i+0x16a>
 80050c6:	2d00      	cmp	r5, #0
 80050c8:	f040 808e 	bne.w	80051e8 <_printf_i+0x210>
 80050cc:	4665      	mov	r5, ip
 80050ce:	2a08      	cmp	r2, #8
 80050d0:	d10b      	bne.n	80050ea <_printf_i+0x112>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	07db      	lsls	r3, r3, #31
 80050d6:	d508      	bpl.n	80050ea <_printf_i+0x112>
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	bfde      	ittt	le
 80050e0:	2330      	movle	r3, #48	; 0x30
 80050e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050ea:	ebac 0305 	sub.w	r3, ip, r5
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	f8cd 8000 	str.w	r8, [sp]
 80050f4:	463b      	mov	r3, r7
 80050f6:	aa03      	add	r2, sp, #12
 80050f8:	4621      	mov	r1, r4
 80050fa:	4630      	mov	r0, r6
 80050fc:	f7ff fef6 	bl	8004eec <_printf_common>
 8005100:	3001      	adds	r0, #1
 8005102:	d14d      	bne.n	80051a0 <_printf_i+0x1c8>
 8005104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005108:	b005      	add	sp, #20
 800510a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800510e:	4839      	ldr	r0, [pc, #228]	; (80051f4 <_printf_i+0x21c>)
 8005110:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	6821      	ldr	r1, [r4, #0]
 8005118:	1d1d      	adds	r5, r3, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6015      	str	r5, [r2, #0]
 800511e:	060a      	lsls	r2, r1, #24
 8005120:	d50b      	bpl.n	800513a <_printf_i+0x162>
 8005122:	07ca      	lsls	r2, r1, #31
 8005124:	bf44      	itt	mi
 8005126:	f041 0120 	orrmi.w	r1, r1, #32
 800512a:	6021      	strmi	r1, [r4, #0]
 800512c:	b91b      	cbnz	r3, 8005136 <_printf_i+0x15e>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	f022 0220 	bic.w	r2, r2, #32
 8005134:	6022      	str	r2, [r4, #0]
 8005136:	2210      	movs	r2, #16
 8005138:	e7b7      	b.n	80050aa <_printf_i+0xd2>
 800513a:	064d      	lsls	r5, r1, #25
 800513c:	bf48      	it	mi
 800513e:	b29b      	uxthmi	r3, r3
 8005140:	e7ef      	b.n	8005122 <_printf_i+0x14a>
 8005142:	4665      	mov	r5, ip
 8005144:	fbb3 f1f2 	udiv	r1, r3, r2
 8005148:	fb02 3311 	mls	r3, r2, r1, r3
 800514c:	5cc3      	ldrb	r3, [r0, r3]
 800514e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005152:	460b      	mov	r3, r1
 8005154:	2900      	cmp	r1, #0
 8005156:	d1f5      	bne.n	8005144 <_printf_i+0x16c>
 8005158:	e7b9      	b.n	80050ce <_printf_i+0xf6>
 800515a:	6813      	ldr	r3, [r2, #0]
 800515c:	6825      	ldr	r5, [r4, #0]
 800515e:	6961      	ldr	r1, [r4, #20]
 8005160:	1d18      	adds	r0, r3, #4
 8005162:	6010      	str	r0, [r2, #0]
 8005164:	0628      	lsls	r0, r5, #24
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	d501      	bpl.n	800516e <_printf_i+0x196>
 800516a:	6019      	str	r1, [r3, #0]
 800516c:	e002      	b.n	8005174 <_printf_i+0x19c>
 800516e:	066a      	lsls	r2, r5, #25
 8005170:	d5fb      	bpl.n	800516a <_printf_i+0x192>
 8005172:	8019      	strh	r1, [r3, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	4665      	mov	r5, ip
 800517a:	e7b9      	b.n	80050f0 <_printf_i+0x118>
 800517c:	6813      	ldr	r3, [r2, #0]
 800517e:	1d19      	adds	r1, r3, #4
 8005180:	6011      	str	r1, [r2, #0]
 8005182:	681d      	ldr	r5, [r3, #0]
 8005184:	6862      	ldr	r2, [r4, #4]
 8005186:	2100      	movs	r1, #0
 8005188:	4628      	mov	r0, r5
 800518a:	f7fb f861 	bl	8000250 <memchr>
 800518e:	b108      	cbz	r0, 8005194 <_printf_i+0x1bc>
 8005190:	1b40      	subs	r0, r0, r5
 8005192:	6060      	str	r0, [r4, #4]
 8005194:	6863      	ldr	r3, [r4, #4]
 8005196:	6123      	str	r3, [r4, #16]
 8005198:	2300      	movs	r3, #0
 800519a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800519e:	e7a7      	b.n	80050f0 <_printf_i+0x118>
 80051a0:	6923      	ldr	r3, [r4, #16]
 80051a2:	462a      	mov	r2, r5
 80051a4:	4639      	mov	r1, r7
 80051a6:	4630      	mov	r0, r6
 80051a8:	47c0      	blx	r8
 80051aa:	3001      	adds	r0, #1
 80051ac:	d0aa      	beq.n	8005104 <_printf_i+0x12c>
 80051ae:	6823      	ldr	r3, [r4, #0]
 80051b0:	079b      	lsls	r3, r3, #30
 80051b2:	d413      	bmi.n	80051dc <_printf_i+0x204>
 80051b4:	68e0      	ldr	r0, [r4, #12]
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	4298      	cmp	r0, r3
 80051ba:	bfb8      	it	lt
 80051bc:	4618      	movlt	r0, r3
 80051be:	e7a3      	b.n	8005108 <_printf_i+0x130>
 80051c0:	2301      	movs	r3, #1
 80051c2:	464a      	mov	r2, r9
 80051c4:	4639      	mov	r1, r7
 80051c6:	4630      	mov	r0, r6
 80051c8:	47c0      	blx	r8
 80051ca:	3001      	adds	r0, #1
 80051cc:	d09a      	beq.n	8005104 <_printf_i+0x12c>
 80051ce:	3501      	adds	r5, #1
 80051d0:	68e3      	ldr	r3, [r4, #12]
 80051d2:	9a03      	ldr	r2, [sp, #12]
 80051d4:	1a9b      	subs	r3, r3, r2
 80051d6:	42ab      	cmp	r3, r5
 80051d8:	dcf2      	bgt.n	80051c0 <_printf_i+0x1e8>
 80051da:	e7eb      	b.n	80051b4 <_printf_i+0x1dc>
 80051dc:	2500      	movs	r5, #0
 80051de:	f104 0919 	add.w	r9, r4, #25
 80051e2:	e7f5      	b.n	80051d0 <_printf_i+0x1f8>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ac      	bne.n	8005142 <_printf_i+0x16a>
 80051e8:	7803      	ldrb	r3, [r0, #0]
 80051ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f2:	e76c      	b.n	80050ce <_printf_i+0xf6>
 80051f4:	08005531 	.word	0x08005531
 80051f8:	08005542 	.word	0x08005542

080051fc <memcpy>:
 80051fc:	b510      	push	{r4, lr}
 80051fe:	1e43      	subs	r3, r0, #1
 8005200:	440a      	add	r2, r1
 8005202:	4291      	cmp	r1, r2
 8005204:	d100      	bne.n	8005208 <memcpy+0xc>
 8005206:	bd10      	pop	{r4, pc}
 8005208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800520c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005210:	e7f7      	b.n	8005202 <memcpy+0x6>

08005212 <memmove>:
 8005212:	4288      	cmp	r0, r1
 8005214:	b510      	push	{r4, lr}
 8005216:	eb01 0302 	add.w	r3, r1, r2
 800521a:	d807      	bhi.n	800522c <memmove+0x1a>
 800521c:	1e42      	subs	r2, r0, #1
 800521e:	4299      	cmp	r1, r3
 8005220:	d00a      	beq.n	8005238 <memmove+0x26>
 8005222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005226:	f802 4f01 	strb.w	r4, [r2, #1]!
 800522a:	e7f8      	b.n	800521e <memmove+0xc>
 800522c:	4283      	cmp	r3, r0
 800522e:	d9f5      	bls.n	800521c <memmove+0xa>
 8005230:	1881      	adds	r1, r0, r2
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	42d3      	cmn	r3, r2
 8005236:	d100      	bne.n	800523a <memmove+0x28>
 8005238:	bd10      	pop	{r4, pc}
 800523a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800523e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005242:	e7f7      	b.n	8005234 <memmove+0x22>

08005244 <_free_r>:
 8005244:	b538      	push	{r3, r4, r5, lr}
 8005246:	4605      	mov	r5, r0
 8005248:	2900      	cmp	r1, #0
 800524a:	d045      	beq.n	80052d8 <_free_r+0x94>
 800524c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005250:	1f0c      	subs	r4, r1, #4
 8005252:	2b00      	cmp	r3, #0
 8005254:	bfb8      	it	lt
 8005256:	18e4      	addlt	r4, r4, r3
 8005258:	f000 f8d2 	bl	8005400 <__malloc_lock>
 800525c:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <_free_r+0x98>)
 800525e:	6813      	ldr	r3, [r2, #0]
 8005260:	4610      	mov	r0, r2
 8005262:	b933      	cbnz	r3, 8005272 <_free_r+0x2e>
 8005264:	6063      	str	r3, [r4, #4]
 8005266:	6014      	str	r4, [r2, #0]
 8005268:	4628      	mov	r0, r5
 800526a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800526e:	f000 b8c8 	b.w	8005402 <__malloc_unlock>
 8005272:	42a3      	cmp	r3, r4
 8005274:	d90c      	bls.n	8005290 <_free_r+0x4c>
 8005276:	6821      	ldr	r1, [r4, #0]
 8005278:	1862      	adds	r2, r4, r1
 800527a:	4293      	cmp	r3, r2
 800527c:	bf04      	itt	eq
 800527e:	681a      	ldreq	r2, [r3, #0]
 8005280:	685b      	ldreq	r3, [r3, #4]
 8005282:	6063      	str	r3, [r4, #4]
 8005284:	bf04      	itt	eq
 8005286:	1852      	addeq	r2, r2, r1
 8005288:	6022      	streq	r2, [r4, #0]
 800528a:	6004      	str	r4, [r0, #0]
 800528c:	e7ec      	b.n	8005268 <_free_r+0x24>
 800528e:	4613      	mov	r3, r2
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	b10a      	cbz	r2, 8005298 <_free_r+0x54>
 8005294:	42a2      	cmp	r2, r4
 8005296:	d9fa      	bls.n	800528e <_free_r+0x4a>
 8005298:	6819      	ldr	r1, [r3, #0]
 800529a:	1858      	adds	r0, r3, r1
 800529c:	42a0      	cmp	r0, r4
 800529e:	d10b      	bne.n	80052b8 <_free_r+0x74>
 80052a0:	6820      	ldr	r0, [r4, #0]
 80052a2:	4401      	add	r1, r0
 80052a4:	1858      	adds	r0, r3, r1
 80052a6:	4282      	cmp	r2, r0
 80052a8:	6019      	str	r1, [r3, #0]
 80052aa:	d1dd      	bne.n	8005268 <_free_r+0x24>
 80052ac:	6810      	ldr	r0, [r2, #0]
 80052ae:	6852      	ldr	r2, [r2, #4]
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	4401      	add	r1, r0
 80052b4:	6019      	str	r1, [r3, #0]
 80052b6:	e7d7      	b.n	8005268 <_free_r+0x24>
 80052b8:	d902      	bls.n	80052c0 <_free_r+0x7c>
 80052ba:	230c      	movs	r3, #12
 80052bc:	602b      	str	r3, [r5, #0]
 80052be:	e7d3      	b.n	8005268 <_free_r+0x24>
 80052c0:	6820      	ldr	r0, [r4, #0]
 80052c2:	1821      	adds	r1, r4, r0
 80052c4:	428a      	cmp	r2, r1
 80052c6:	bf04      	itt	eq
 80052c8:	6811      	ldreq	r1, [r2, #0]
 80052ca:	6852      	ldreq	r2, [r2, #4]
 80052cc:	6062      	str	r2, [r4, #4]
 80052ce:	bf04      	itt	eq
 80052d0:	1809      	addeq	r1, r1, r0
 80052d2:	6021      	streq	r1, [r4, #0]
 80052d4:	605c      	str	r4, [r3, #4]
 80052d6:	e7c7      	b.n	8005268 <_free_r+0x24>
 80052d8:	bd38      	pop	{r3, r4, r5, pc}
 80052da:	bf00      	nop
 80052dc:	20000094 	.word	0x20000094

080052e0 <_malloc_r>:
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	1ccd      	adds	r5, r1, #3
 80052e4:	f025 0503 	bic.w	r5, r5, #3
 80052e8:	3508      	adds	r5, #8
 80052ea:	2d0c      	cmp	r5, #12
 80052ec:	bf38      	it	cc
 80052ee:	250c      	movcc	r5, #12
 80052f0:	2d00      	cmp	r5, #0
 80052f2:	4606      	mov	r6, r0
 80052f4:	db01      	blt.n	80052fa <_malloc_r+0x1a>
 80052f6:	42a9      	cmp	r1, r5
 80052f8:	d903      	bls.n	8005302 <_malloc_r+0x22>
 80052fa:	230c      	movs	r3, #12
 80052fc:	6033      	str	r3, [r6, #0]
 80052fe:	2000      	movs	r0, #0
 8005300:	bd70      	pop	{r4, r5, r6, pc}
 8005302:	f000 f87d 	bl	8005400 <__malloc_lock>
 8005306:	4a21      	ldr	r2, [pc, #132]	; (800538c <_malloc_r+0xac>)
 8005308:	6814      	ldr	r4, [r2, #0]
 800530a:	4621      	mov	r1, r4
 800530c:	b991      	cbnz	r1, 8005334 <_malloc_r+0x54>
 800530e:	4c20      	ldr	r4, [pc, #128]	; (8005390 <_malloc_r+0xb0>)
 8005310:	6823      	ldr	r3, [r4, #0]
 8005312:	b91b      	cbnz	r3, 800531c <_malloc_r+0x3c>
 8005314:	4630      	mov	r0, r6
 8005316:	f000 f863 	bl	80053e0 <_sbrk_r>
 800531a:	6020      	str	r0, [r4, #0]
 800531c:	4629      	mov	r1, r5
 800531e:	4630      	mov	r0, r6
 8005320:	f000 f85e 	bl	80053e0 <_sbrk_r>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d124      	bne.n	8005372 <_malloc_r+0x92>
 8005328:	230c      	movs	r3, #12
 800532a:	6033      	str	r3, [r6, #0]
 800532c:	4630      	mov	r0, r6
 800532e:	f000 f868 	bl	8005402 <__malloc_unlock>
 8005332:	e7e4      	b.n	80052fe <_malloc_r+0x1e>
 8005334:	680b      	ldr	r3, [r1, #0]
 8005336:	1b5b      	subs	r3, r3, r5
 8005338:	d418      	bmi.n	800536c <_malloc_r+0x8c>
 800533a:	2b0b      	cmp	r3, #11
 800533c:	d90f      	bls.n	800535e <_malloc_r+0x7e>
 800533e:	600b      	str	r3, [r1, #0]
 8005340:	50cd      	str	r5, [r1, r3]
 8005342:	18cc      	adds	r4, r1, r3
 8005344:	4630      	mov	r0, r6
 8005346:	f000 f85c 	bl	8005402 <__malloc_unlock>
 800534a:	f104 000b 	add.w	r0, r4, #11
 800534e:	1d23      	adds	r3, r4, #4
 8005350:	f020 0007 	bic.w	r0, r0, #7
 8005354:	1ac3      	subs	r3, r0, r3
 8005356:	d0d3      	beq.n	8005300 <_malloc_r+0x20>
 8005358:	425a      	negs	r2, r3
 800535a:	50e2      	str	r2, [r4, r3]
 800535c:	e7d0      	b.n	8005300 <_malloc_r+0x20>
 800535e:	428c      	cmp	r4, r1
 8005360:	684b      	ldr	r3, [r1, #4]
 8005362:	bf16      	itet	ne
 8005364:	6063      	strne	r3, [r4, #4]
 8005366:	6013      	streq	r3, [r2, #0]
 8005368:	460c      	movne	r4, r1
 800536a:	e7eb      	b.n	8005344 <_malloc_r+0x64>
 800536c:	460c      	mov	r4, r1
 800536e:	6849      	ldr	r1, [r1, #4]
 8005370:	e7cc      	b.n	800530c <_malloc_r+0x2c>
 8005372:	1cc4      	adds	r4, r0, #3
 8005374:	f024 0403 	bic.w	r4, r4, #3
 8005378:	42a0      	cmp	r0, r4
 800537a:	d005      	beq.n	8005388 <_malloc_r+0xa8>
 800537c:	1a21      	subs	r1, r4, r0
 800537e:	4630      	mov	r0, r6
 8005380:	f000 f82e 	bl	80053e0 <_sbrk_r>
 8005384:	3001      	adds	r0, #1
 8005386:	d0cf      	beq.n	8005328 <_malloc_r+0x48>
 8005388:	6025      	str	r5, [r4, #0]
 800538a:	e7db      	b.n	8005344 <_malloc_r+0x64>
 800538c:	20000094 	.word	0x20000094
 8005390:	20000098 	.word	0x20000098

08005394 <_realloc_r>:
 8005394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005396:	4607      	mov	r7, r0
 8005398:	4614      	mov	r4, r2
 800539a:	460e      	mov	r6, r1
 800539c:	b921      	cbnz	r1, 80053a8 <_realloc_r+0x14>
 800539e:	4611      	mov	r1, r2
 80053a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053a4:	f7ff bf9c 	b.w	80052e0 <_malloc_r>
 80053a8:	b922      	cbnz	r2, 80053b4 <_realloc_r+0x20>
 80053aa:	f7ff ff4b 	bl	8005244 <_free_r>
 80053ae:	4625      	mov	r5, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053b4:	f000 f826 	bl	8005404 <_malloc_usable_size_r>
 80053b8:	42a0      	cmp	r0, r4
 80053ba:	d20f      	bcs.n	80053dc <_realloc_r+0x48>
 80053bc:	4621      	mov	r1, r4
 80053be:	4638      	mov	r0, r7
 80053c0:	f7ff ff8e 	bl	80052e0 <_malloc_r>
 80053c4:	4605      	mov	r5, r0
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d0f2      	beq.n	80053b0 <_realloc_r+0x1c>
 80053ca:	4631      	mov	r1, r6
 80053cc:	4622      	mov	r2, r4
 80053ce:	f7ff ff15 	bl	80051fc <memcpy>
 80053d2:	4631      	mov	r1, r6
 80053d4:	4638      	mov	r0, r7
 80053d6:	f7ff ff35 	bl	8005244 <_free_r>
 80053da:	e7e9      	b.n	80053b0 <_realloc_r+0x1c>
 80053dc:	4635      	mov	r5, r6
 80053de:	e7e7      	b.n	80053b0 <_realloc_r+0x1c>

080053e0 <_sbrk_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4c06      	ldr	r4, [pc, #24]	; (80053fc <_sbrk_r+0x1c>)
 80053e4:	2300      	movs	r3, #0
 80053e6:	4605      	mov	r5, r0
 80053e8:	4608      	mov	r0, r1
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	f7ff fb4e 	bl	8004a8c <_sbrk>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_sbrk_r+0x1a>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_sbrk_r+0x1a>
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20002a98 	.word	0x20002a98

08005400 <__malloc_lock>:
 8005400:	4770      	bx	lr

08005402 <__malloc_unlock>:
 8005402:	4770      	bx	lr

08005404 <_malloc_usable_size_r>:
 8005404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005408:	1f18      	subs	r0, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	bfbc      	itt	lt
 800540e:	580b      	ldrlt	r3, [r1, r0]
 8005410:	18c0      	addlt	r0, r0, r3
 8005412:	4770      	bx	lr

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
