
ACU_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004718  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a68  08004a68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a70  08004a70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029e0  20000070  08004ae8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002a50  08004ae8  00022a50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb24  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c9f  00000000  00000000  0002cbc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002e868  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000870  00000000  00000000  0002f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000269ed  00000000  00000000  0002fa30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000829e  00000000  00000000  0005641d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef180  00000000  00000000  0005e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d83b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002888  00000000  00000000  0014d8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004900 	.word	0x08004900

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004900 	.word	0x08004900

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fea7 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f806 	bl	800060c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f003 fbb8 	bl	8003d74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fec1 	bl	80013b2 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000648:	f000 fe89 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004
 8000690:	20000098 	.word	0x20000098

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000098 	.word	0x20000098

080006ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b4:	f7ff ffee 	bl	8000694 <HAL_GetTick>
 80006b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80006c4:	d005      	beq.n	80006d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_Delay+0x40>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d2:	bf00      	nop
 80006d4:	f7ff ffde 	bl	8000694 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d8f7      	bhi.n	80006d4 <HAL_Delay+0x28>
  {
  }
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80006fe:	2301      	movs	r3, #1
 8000700:	e0ed      	b.n	80008de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	2b00      	cmp	r3, #0
 800070c:	d102      	bne.n	8000714 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f003 fb54 	bl	8003dbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f022 0202 	bic.w	r2, r2, #2
 8000722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000724:	f7ff ffb6 	bl	8000694 <HAL_GetTick>
 8000728:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800072a:	e012      	b.n	8000752 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800072c:	f7ff ffb2 	bl	8000694 <HAL_GetTick>
 8000730:	4602      	mov	r2, r0
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	2b0a      	cmp	r3, #10
 8000738:	d90b      	bls.n	8000752 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2205      	movs	r2, #5
 800074a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e0c5      	b.n	80008de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 0302 	and.w	r3, r3, #2
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1e5      	bne.n	800072c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000770:	f7ff ff90 	bl	8000694 <HAL_GetTick>
 8000774:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000776:	e012      	b.n	800079e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000778:	f7ff ff8c 	bl	8000694 <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d90b      	bls.n	800079e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2205      	movs	r2, #5
 8000796:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e09f      	b.n	80008de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d0e5      	beq.n	8000778 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7e1b      	ldrb	r3, [r3, #24]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d108      	bne.n	80007c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	e007      	b.n	80007d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7e5b      	ldrb	r3, [r3, #25]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d108      	bne.n	80007f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	e007      	b.n	8000800 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7e9b      	ldrb	r3, [r3, #26]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d108      	bne.n	800081a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f042 0220 	orr.w	r2, r2, #32
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	e007      	b.n	800082a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f022 0220 	bic.w	r2, r2, #32
 8000828:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7edb      	ldrb	r3, [r3, #27]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d108      	bne.n	8000844 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f022 0210 	bic.w	r2, r2, #16
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	e007      	b.n	8000854 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f042 0210 	orr.w	r2, r2, #16
 8000852:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7f1b      	ldrb	r3, [r3, #28]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d108      	bne.n	800086e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f042 0208 	orr.w	r2, r2, #8
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	e007      	b.n	800087e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f022 0208 	bic.w	r2, r2, #8
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	7f5b      	ldrb	r3, [r3, #29]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d108      	bne.n	8000898 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f042 0204 	orr.w	r2, r2, #4
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	e007      	b.n	80008a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f022 0204 	bic.w	r2, r2, #4
 80008a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	431a      	orrs	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	431a      	orrs	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	695b      	ldr	r3, [r3, #20]
 80008bc:	ea42 0103 	orr.w	r1, r2, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b087      	sub	sp, #28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000900:	7cfb      	ldrb	r3, [r7, #19]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d003      	beq.n	800090e <HAL_CAN_ConfigFilter+0x26>
 8000906:	7cfb      	ldrb	r3, [r7, #19]
 8000908:	2b02      	cmp	r3, #2
 800090a:	f040 80c7 	bne.w	8000a9c <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a69      	ldr	r2, [pc, #420]	; (8000ab8 <HAL_CAN_ConfigFilter+0x1d0>)
 8000914:	4293      	cmp	r3, r2
 8000916:	d001      	beq.n	800091c <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8000918:	4b68      	ldr	r3, [pc, #416]	; (8000abc <HAL_CAN_ConfigFilter+0x1d4>)
 800091a:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000922:	f043 0201 	orr.w	r2, r3, #1
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	4a63      	ldr	r2, [pc, #396]	; (8000abc <HAL_CAN_ConfigFilter+0x1d4>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d111      	bne.n	8000958 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800093a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	431a      	orrs	r2, r3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	f003 031f 	and.w	r3, r3, #31
 8000960:	2201      	movs	r2, #1
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	43db      	mvns	r3, r3
 8000972:	401a      	ands	r2, r3
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d123      	bne.n	80009ca <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	43db      	mvns	r3, r3
 800098c:	401a      	ands	r2, r3
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a0:	683a      	ldr	r2, [r7, #0]
 80009a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	3248      	adds	r2, #72	; 0x48
 80009aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c0:	6979      	ldr	r1, [r7, #20]
 80009c2:	3348      	adds	r3, #72	; 0x48
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d122      	bne.n	8000a18 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	431a      	orrs	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3248      	adds	r2, #72	; 0x48
 80009f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a0e:	6979      	ldr	r1, [r7, #20]
 8000a10:	3348      	adds	r3, #72	; 0x48
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	440b      	add	r3, r1
 8000a16:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	401a      	ands	r2, r3
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a32:	e007      	b.n	8000a44 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d109      	bne.n	8000a60 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	401a      	ands	r2, r3
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a5e:	e007      	b.n	8000a70 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d107      	bne.n	8000a88 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a8e:	f023 0201 	bic.w	r2, r3, #1
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e006      	b.n	8000aaa <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
  }
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	371c      	adds	r7, #28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40003400 	.word	0x40003400
 8000abc:	40006400 	.word	0x40006400

08000ac0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d12e      	bne.n	8000b32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f022 0201 	bic.w	r2, r2, #1
 8000aea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000aec:	f7ff fdd2 	bl	8000694 <HAL_GetTick>
 8000af0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000af2:	e012      	b.n	8000b1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af4:	f7ff fdce 	bl	8000694 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d90b      	bls.n	8000b1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2205      	movs	r2, #5
 8000b12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e012      	b.n	8000b40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1e5      	bne.n	8000af4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e006      	b.n	8000b40 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
  }
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b089      	sub	sp, #36	; 0x24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b66:	7ffb      	ldrb	r3, [r7, #31]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d003      	beq.n	8000b74 <HAL_CAN_AddTxMessage+0x2c>
 8000b6c:	7ffb      	ldrb	r3, [r7, #31]
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	f040 80b8 	bne.w	8000ce4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10a      	bne.n	8000b94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d105      	bne.n	8000b94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 80a0 	beq.w	8000cd4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	0e1b      	lsrs	r3, r3, #24
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d907      	bls.n	8000bb4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e09e      	b.n	8000cf2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	409a      	lsls	r2, r3
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d10d      	bne.n	8000be2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000bd0:	68f9      	ldr	r1, [r7, #12]
 8000bd2:	6809      	ldr	r1, [r1, #0]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3318      	adds	r3, #24
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	440b      	add	r3, r1
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	e00f      	b.n	8000c02 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bf2:	68f9      	ldr	r1, [r7, #12]
 8000bf4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000bf6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	3318      	adds	r3, #24
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	440b      	add	r3, r1
 8000c00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6819      	ldr	r1, [r3, #0]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	691a      	ldr	r2, [r3, #16]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3318      	adds	r3, #24
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	440b      	add	r3, r1
 8000c12:	3304      	adds	r3, #4
 8000c14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	7d1b      	ldrb	r3, [r3, #20]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d111      	bne.n	8000c42 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	3318      	adds	r3, #24
 8000c26:	011b      	lsls	r3, r3, #4
 8000c28:	4413      	add	r3, r2
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	6811      	ldr	r1, [r2, #0]
 8000c32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	3318      	adds	r3, #24
 8000c3a:	011b      	lsls	r3, r3, #4
 8000c3c:	440b      	add	r3, r1
 8000c3e:	3304      	adds	r3, #4
 8000c40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3307      	adds	r3, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	061a      	lsls	r2, r3, #24
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3306      	adds	r3, #6
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	041b      	lsls	r3, r3, #16
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3305      	adds	r3, #5
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	3204      	adds	r2, #4
 8000c62:	7812      	ldrb	r2, [r2, #0]
 8000c64:	4610      	mov	r0, r2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	6811      	ldr	r1, [r2, #0]
 8000c6a:	ea43 0200 	orr.w	r2, r3, r0
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	440b      	add	r3, r1
 8000c74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000c78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3303      	adds	r3, #3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	061a      	lsls	r2, r3, #24
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	3302      	adds	r3, #2
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	021b      	lsls	r3, r3, #8
 8000c94:	4313      	orrs	r3, r2
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	6811      	ldr	r1, [r2, #0]
 8000ca0:	ea43 0200 	orr.w	r2, r3, r0
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	440b      	add	r3, r1
 8000caa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000cae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	3318      	adds	r3, #24
 8000cb8:	011b      	lsls	r3, r3, #4
 8000cba:	4413      	add	r3, r2
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	6811      	ldr	r1, [r2, #0]
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	440b      	add	r3, r1
 8000cce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	e00e      	b.n	8000cf2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e006      	b.n	8000cf2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
  }
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b085      	sub	sp, #20
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d12:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d14:	7afb      	ldrb	r3, [r7, #11]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d002      	beq.n	8000d20 <HAL_CAN_IsTxMessagePending+0x22>
 8000d1a:	7afb      	ldrb	r3, [r7, #11]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d10b      	bne.n	8000d38 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	069b      	lsls	r3, r3, #26
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	069b      	lsls	r3, r3, #26
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d001      	beq.n	8000d38 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000d34:	2301      	movs	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000d38:	68fb      	ldr	r3, [r7, #12]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3714      	adds	r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d46:	b480      	push	{r7}
 8000d48:	b085      	sub	sp, #20
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
 8000d4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d002      	beq.n	8000d64 <HAL_CAN_ActivateNotification+0x1e>
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d109      	bne.n	8000d78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6959      	ldr	r1, [r3, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	683a      	ldr	r2, [r7, #0]
 8000d70:	430a      	orrs	r2, r1
 8000d72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e006      	b.n	8000d86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
  }
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b08a      	sub	sp, #40	; 0x28
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dce:	6a3b      	ldr	r3, [r7, #32]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d07c      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d023      	beq.n	8000e2a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2201      	movs	r2, #1
 8000de8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f002 feed 	bl	8003bd4 <HAL_CAN_TxMailbox0CompleteCallback>
 8000dfa:	e016      	b.n	8000e2a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	f003 0304 	and.w	r3, r3, #4
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d004      	beq.n	8000e10 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0e:	e00c      	b.n	8000e2a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d004      	beq.n	8000e24 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
 8000e22:	e002      	b.n	8000e2a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 f965 	bl	80010f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d024      	beq.n	8000e7e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f002 ff2f 	bl	8003cac <HAL_CAN_TxMailbox1CompleteCallback>
 8000e4e:	e016      	b.n	8000e7e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d004      	beq.n	8000e64 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
 8000e62:	e00c      	b.n	8000e7e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d004      	beq.n	8000e78 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
 8000e76:	e002      	b.n	8000e7e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f945 	bl	8001108 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d024      	beq.n	8000ed2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f002 ff17 	bl	8003cd0 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ea2:	e016      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d004      	beq.n	8000eb8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb6:	e00c      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d004      	beq.n	8000ecc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e002      	b.n	8000ed2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 f925 	bl	800111c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d00c      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d007      	beq.n	8000ef6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00b      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2208      	movs	r2, #8
 8000f10:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f916 	bl	8001144 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d009      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f8fd 	bl	8001130 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f36:	6a3b      	ldr	r3, [r7, #32]
 8000f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00c      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	f003 0310 	and.w	r3, r3, #16
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2210      	movs	r2, #16
 8000f58:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f5a:	6a3b      	ldr	r3, [r7, #32]
 8000f5c:	f003 0320 	and.w	r3, r3, #32
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d006      	beq.n	8000f7c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2208      	movs	r2, #8
 8000f74:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f8f8 	bl	800116c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d009      	beq.n	8000f9a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	691b      	ldr	r3, [r3, #16]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f8df 	bl	8001158 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f9a:	6a3b      	ldr	r3, [r7, #32]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00b      	beq.n	8000fbc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f8e2 	bl	8001180 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000fbc:	6a3b      	ldr	r3, [r7, #32]
 8000fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d006      	beq.n	8000fde <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2208      	movs	r2, #8
 8000fd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 f8db 	bl	8001194 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d075      	beq.n	80010d4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0304 	and.w	r3, r3, #4
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d06c      	beq.n	80010cc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800100e:	6a3b      	ldr	r3, [r7, #32]
 8001010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001014:	2b00      	cmp	r3, #0
 8001016:	d008      	beq.n	800102a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d008      	beq.n	8001046 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104c:	2b00      	cmp	r3, #0
 800104e:	d03d      	beq.n	80010cc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001056:	2b00      	cmp	r3, #0
 8001058:	d038      	beq.n	80010cc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001060:	2b30      	cmp	r3, #48	; 0x30
 8001062:	d017      	beq.n	8001094 <HAL_CAN_IRQHandler+0x302>
 8001064:	2b30      	cmp	r3, #48	; 0x30
 8001066:	d804      	bhi.n	8001072 <HAL_CAN_IRQHandler+0x2e0>
 8001068:	2b10      	cmp	r3, #16
 800106a:	d009      	beq.n	8001080 <HAL_CAN_IRQHandler+0x2ee>
 800106c:	2b20      	cmp	r3, #32
 800106e:	d00c      	beq.n	800108a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001070:	e024      	b.n	80010bc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001072:	2b50      	cmp	r3, #80	; 0x50
 8001074:	d018      	beq.n	80010a8 <HAL_CAN_IRQHandler+0x316>
 8001076:	2b60      	cmp	r3, #96	; 0x60
 8001078:	d01b      	beq.n	80010b2 <HAL_CAN_IRQHandler+0x320>
 800107a:	2b40      	cmp	r3, #64	; 0x40
 800107c:	d00f      	beq.n	800109e <HAL_CAN_IRQHandler+0x30c>
            break;
 800107e:	e01d      	b.n	80010bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001088:	e018      	b.n	80010bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001092:	e013      	b.n	80010bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001096:	f043 0320 	orr.w	r3, r3, #32
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800109c:	e00e      	b.n	80010bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010a6:	e009      	b.n	80010bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010b0:	e004      	b.n	80010bc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	699a      	ldr	r2, [r3, #24]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2204      	movs	r2, #4
 80010d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	431a      	orrs	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f002 fe04 	bl	8003cf4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <__NVIC_SetPriorityGrouping+0x40>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x40>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	05fa0000 	.word	0x05fa0000

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	2b00      	cmp	r3, #0
 800121c:	db0b      	blt.n	8001236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	f003 021f 	and.w	r2, r3, #31
 8001224:	4907      	ldr	r1, [pc, #28]	; (8001244 <__NVIC_EnableIRQ+0x38>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff29 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff3e 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff8e 	bl	800129c <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5d 	bl	8001248 <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff31 	bl	800120c <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	; 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	e175      	b.n	80016d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	f040 8164 	bne.w	80016d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x4e>
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b12      	cmp	r3, #18
 8001418:	d123      	bne.n	8001462 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	08da      	lsrs	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3208      	adds	r2, #8
 8001422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	220f      	movs	r2, #15
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	691a      	ldr	r2, [r3, #16]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	08da      	lsrs	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3208      	adds	r2, #8
 800145c:	69b9      	ldr	r1, [r7, #24]
 800145e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0203 	and.w	r2, r3, #3
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d00b      	beq.n	80014b6 <HAL_GPIO_Init+0xea>
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014aa:	2b11      	cmp	r3, #17
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d130      	bne.n	8001518 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 0201 	and.w	r2, r3, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80be 	beq.w	80016d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <HAL_GPIO_Init+0x320>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a64      	ldr	r2, [pc, #400]	; (80016ec <HAL_GPIO_Init+0x320>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b62      	ldr	r3, [pc, #392]	; (80016ec <HAL_GPIO_Init+0x320>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800156e:	4a60      	ldr	r2, [pc, #384]	; (80016f0 <HAL_GPIO_Init+0x324>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a57      	ldr	r2, [pc, #348]	; (80016f4 <HAL_GPIO_Init+0x328>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d037      	beq.n	800160a <HAL_GPIO_Init+0x23e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a56      	ldr	r2, [pc, #344]	; (80016f8 <HAL_GPIO_Init+0x32c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d031      	beq.n	8001606 <HAL_GPIO_Init+0x23a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a55      	ldr	r2, [pc, #340]	; (80016fc <HAL_GPIO_Init+0x330>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d02b      	beq.n	8001602 <HAL_GPIO_Init+0x236>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a54      	ldr	r2, [pc, #336]	; (8001700 <HAL_GPIO_Init+0x334>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x232>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a53      	ldr	r2, [pc, #332]	; (8001704 <HAL_GPIO_Init+0x338>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x22e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_GPIO_Init+0x33c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x22a>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x340>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x226>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a50      	ldr	r2, [pc, #320]	; (8001710 <HAL_GPIO_Init+0x344>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x222>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4f      	ldr	r2, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x348>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x21e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_GPIO_Init+0x34c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x21a>
 80015e2:	2309      	movs	r3, #9
 80015e4:	e012      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015e6:	230a      	movs	r3, #10
 80015e8:	e010      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015ea:	2308      	movs	r3, #8
 80015ec:	e00e      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015ee:	2307      	movs	r3, #7
 80015f0:	e00c      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015f2:	2306      	movs	r3, #6
 80015f4:	e00a      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015f6:	2305      	movs	r3, #5
 80015f8:	e008      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015fa:	2304      	movs	r3, #4
 80015fc:	e006      	b.n	800160c <HAL_GPIO_Init+0x240>
 80015fe:	2303      	movs	r3, #3
 8001600:	e004      	b.n	800160c <HAL_GPIO_Init+0x240>
 8001602:	2302      	movs	r3, #2
 8001604:	e002      	b.n	800160c <HAL_GPIO_Init+0x240>
 8001606:	2301      	movs	r3, #1
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x240>
 800160a:	2300      	movs	r3, #0
 800160c:	69fa      	ldr	r2, [r7, #28]
 800160e:	f002 0203 	and.w	r2, r2, #3
 8001612:	0092      	lsls	r2, r2, #2
 8001614:	4093      	lsls	r3, r2
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800161c:	4934      	ldr	r1, [pc, #208]	; (80016f0 <HAL_GPIO_Init+0x324>)
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	089b      	lsrs	r3, r3, #2
 8001622:	3302      	adds	r3, #2
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <HAL_GPIO_Init+0x350>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <HAL_GPIO_Init+0x350>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_GPIO_Init+0x350>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001678:	4a28      	ldr	r2, [pc, #160]	; (800171c <HAL_GPIO_Init+0x350>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800167e:	4b27      	ldr	r3, [pc, #156]	; (800171c <HAL_GPIO_Init+0x350>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_GPIO_Init+0x350>)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_GPIO_Init+0x350>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_GPIO_Init+0x350>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3301      	adds	r3, #1
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b0f      	cmp	r3, #15
 80016dc:	f67f ae86 	bls.w	80013ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80016e0:	bf00      	nop
 80016e2:	3724      	adds	r7, #36	; 0x24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40013800 	.word	0x40013800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40020800 	.word	0x40020800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40021000 	.word	0x40021000
 8001708:	40021400 	.word	0x40021400
 800170c:	40021800 	.word	0x40021800
 8001710:	40021c00 	.word	0x40021c00
 8001714:	40022000 	.word	0x40022000
 8001718:	40022400 	.word	0x40022400
 800171c:	40013c00 	.word	0x40013c00

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800173c:	e003      	b.n	8001746 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	041a      	lsls	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	619a      	str	r2, [r3, #24]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	460b      	mov	r3, r1
 800175c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	401a      	ands	r2, r3
 8001766:	887b      	ldrh	r3, [r7, #2]
 8001768:	429a      	cmp	r2, r3
 800176a:	d104      	bne.n	8001776 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	041a      	lsls	r2, r3, #16
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001774:	e002      	b.n	800177c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_PWREx_EnableOverDrive+0x98>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a22      	ldr	r2, [pc, #136]	; (8001820 <HAL_PWREx_EnableOverDrive+0x98>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <HAL_PWREx_EnableOverDrive+0x98>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a1d      	ldr	r2, [pc, #116]	; (8001824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b6:	f7fe ff6d 	bl	8000694 <HAL_GetTick>
 80017ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017bc:	e009      	b.n	80017d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017be:	f7fe ff69 	bl	8000694 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017cc:	d901      	bls.n	80017d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e022      	b.n	8001818 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017de:	d1ee      	bne.n	80017be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ec:	f7fe ff52 	bl	8000694 <HAL_GetTick>
 80017f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017f2:	e009      	b.n	8001808 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f4:	f7fe ff4e 	bl	8000694 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001802:	d901      	bls.n	8001808 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e007      	b.n	8001818 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_PWREx_EnableOverDrive+0x9c>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001814:	d1ee      	bne.n	80017f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000

08001828 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e25e      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8087 	beq.w	800195a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800184c:	4b96      	ldr	r3, [pc, #600]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d00c      	beq.n	8001872 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001858:	4b93      	ldr	r3, [pc, #588]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d112      	bne.n	800188a <HAL_RCC_OscConfig+0x62>
 8001864:	4b90      	ldr	r3, [pc, #576]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001870:	d10b      	bne.n	800188a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001872:	4b8d      	ldr	r3, [pc, #564]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d06c      	beq.n	8001958 <HAL_RCC_OscConfig+0x130>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d168      	bne.n	8001958 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e238      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x7a>
 8001894:	4b84      	ldr	r3, [pc, #528]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a83      	ldr	r2, [pc, #524]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800189a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	e02e      	b.n	8001900 <HAL_RCC_OscConfig+0xd8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x9c>
 80018aa:	4b7f      	ldr	r3, [pc, #508]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7e      	ldr	r2, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a7b      	ldr	r2, [pc, #492]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e01d      	b.n	8001900 <HAL_RCC_OscConfig+0xd8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0xc0>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a72      	ldr	r2, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0xd8>
 80018e8:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a6e      	ldr	r2, [pc, #440]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a6b      	ldr	r2, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d013      	beq.n	8001930 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7fe fec4 	bl	8000694 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001910:	f7fe fec0 	bl	8000694 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1ec      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	4b61      	ldr	r3, [pc, #388]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0xe8>
 800192e:	e014      	b.n	800195a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7fe feb0 	bl	8000694 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001938:	f7fe feac 	bl	8000694 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b64      	cmp	r3, #100	; 0x64
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e1d8      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	4b57      	ldr	r3, [pc, #348]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x110>
 8001956:	e000      	b.n	800195a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001958:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d069      	beq.n	8001a3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001966:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00b      	beq.n	800198a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001972:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b08      	cmp	r3, #8
 800197c:	d11c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x190>
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d116      	bne.n	80019b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_OscConfig+0x17a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d001      	beq.n	80019a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e1ac      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	493d      	ldr	r1, [pc, #244]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	e040      	b.n	8001a3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d023      	beq.n	8001a08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c0:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7fe fe62 	bl	8000694 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d4:	f7fe fe5e 	bl	8000694 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e18a      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	4929      	ldr	r1, [pc, #164]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]
 8001a06:	e018      	b.n	8001a3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a08:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	f023 0301 	bic.w	r3, r3, #1
 8001a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7fe fe3e 	bl	8000694 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7fe fe3a 	bl	8000694 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e166      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d038      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d019      	beq.n	8001a82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7fe fe1b 	bl	8000694 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a62:	f7fe fe17 	bl	8000694 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e143      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x23a>
 8001a80:	e01a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a86:	4a08      	ldr	r2, [pc, #32]	; (8001aa8 <HAL_RCC_OscConfig+0x280>)
 8001a88:	f023 0301 	bic.w	r3, r3, #1
 8001a8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8e:	f7fe fe01 	bl	8000694 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00a      	b.n	8001aac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7fe fdfd 	bl	8000694 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d903      	bls.n	8001aac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e129      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
 8001aa8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 80a4 	beq.w	8001c0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac6:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10d      	bne.n	8001aee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b8c      	ldr	r3, [pc, #560]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a8b      	ldr	r2, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aee:	4b86      	ldr	r3, [pc, #536]	; (8001d08 <HAL_RCC_OscConfig+0x4e0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001afa:	4b83      	ldr	r3, [pc, #524]	; (8001d08 <HAL_RCC_OscConfig+0x4e0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a82      	ldr	r2, [pc, #520]	; (8001d08 <HAL_RCC_OscConfig+0x4e0>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7fe fdc5 	bl	8000694 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7fe fdc1 	bl	8000694 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b64      	cmp	r3, #100	; 0x64
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e0ed      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b20:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <HAL_RCC_OscConfig+0x4e0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x31a>
 8001b34:	4b73      	ldr	r3, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a72      	ldr	r2, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	e02d      	b.n	8001b9e <HAL_RCC_OscConfig+0x376>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x33c>
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a6d      	ldr	r2, [pc, #436]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a6a      	ldr	r2, [pc, #424]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	e01c      	b.n	8001b9e <HAL_RCC_OscConfig+0x376>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b05      	cmp	r3, #5
 8001b6a:	d10c      	bne.n	8001b86 <HAL_RCC_OscConfig+0x35e>
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a64      	ldr	r2, [pc, #400]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a61      	ldr	r2, [pc, #388]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_OscConfig+0x376>
 8001b86:	4b5f      	ldr	r3, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	4b5c      	ldr	r3, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a5b      	ldr	r2, [pc, #364]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d015      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7fe fd75 	bl	8000694 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe fd71 	bl	8000694 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e09b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	4b4f      	ldr	r3, [pc, #316]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0ee      	beq.n	8001bae <HAL_RCC_OscConfig+0x386>
 8001bd0:	e014      	b.n	8001bfc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7fe fd5f 	bl	8000694 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd8:	e00a      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bda:	f7fe fd5b 	bl	8000694 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e085      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf0:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1ee      	bne.n	8001bda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d105      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c02:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a3f      	ldr	r2, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d071      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d069      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d14b      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a35      	ldr	r2, [pc, #212]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe fd2d 	bl	8000694 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe fd29 	bl	8000694 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e055      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	019b      	lsls	r3, r3, #6
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	061b      	lsls	r3, r3, #24
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	071b      	lsls	r3, r3, #28
 8001c88:	491e      	ldr	r1, [pc, #120]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7fe fcfb 	bl	8000694 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7fe fcf7 	bl	8000694 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e023      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x47a>
 8001cc0:	e01b      	b.n	8001cfa <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001cc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7fe fce1 	bl	8000694 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7fe fcdd 	bl	8000694 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e009      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x4dc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1f0      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x4ae>
 8001cf4:	e001      	b.n	8001cfa <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e0ce      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d24:	4b69      	ldr	r3, [pc, #420]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d910      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b66      	ldr	r3, [pc, #408]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 020f 	bic.w	r2, r3, #15
 8001d3a:	4964      	ldr	r1, [pc, #400]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b6      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d6c:	4b58      	ldr	r3, [pc, #352]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a57      	ldr	r2, [pc, #348]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0308 	and.w	r3, r3, #8
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d005      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d84:	4b52      	ldr	r3, [pc, #328]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	4a51      	ldr	r2, [pc, #324]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b4f      	ldr	r3, [pc, #316]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	494c      	ldr	r1, [pc, #304]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d040      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d115      	bne.n	8001dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07d      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d109      	bne.n	8001dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e071      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dde:	4b3c      	ldr	r3, [pc, #240]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e069      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dee:	4b38      	ldr	r3, [pc, #224]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f023 0203 	bic.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4935      	ldr	r1, [pc, #212]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e00:	f7fe fc48 	bl	8000694 <HAL_GetTick>
 8001e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	e00a      	b.n	8001e1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e08:	f7fe fc44 	bl	8000694 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e051      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 020c 	and.w	r2, r3, #12
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1eb      	bne.n	8001e08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d210      	bcs.n	8001e60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 020f 	bic.w	r2, r3, #15
 8001e46:	4921      	ldr	r1, [pc, #132]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e030      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	4915      	ldr	r1, [pc, #84]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e9e:	f000 f81d 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001eb6:	4a08      	ldr	r2, [pc, #32]	; (8001ed8 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7fe fba6 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023c00 	.word	0x40023c00
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	08004a1c 	.word	0x08004a1c
 8001ed8:	20000008 	.word	0x20000008

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d007      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x32>
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d008      	beq.n	8001f14 <HAL_RCC_GetSysClockFreq+0x38>
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 808d 	bne.w	8002022 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f08:	4b4b      	ldr	r3, [pc, #300]	; (8002038 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f0a:	60bb      	str	r3, [r7, #8]
       break;
 8001f0c:	e08c      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f0e:	4b4b      	ldr	r3, [pc, #300]	; (800203c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f10:	60bb      	str	r3, [r7, #8]
      break;
 8001f12:	e089      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f14:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f1e:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d023      	beq.n	8001f72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f2a:	4b42      	ldr	r3, [pc, #264]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	099b      	lsrs	r3, r3, #6
 8001f30:	f04f 0400 	mov.w	r4, #0
 8001f34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	ea03 0501 	and.w	r5, r3, r1
 8001f40:	ea04 0602 	and.w	r6, r4, r2
 8001f44:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f46:	fb02 f106 	mul.w	r1, r2, r6
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	fb02 f205 	mul.w	r2, r2, r5
 8001f50:	440a      	add	r2, r1
 8001f52:	493a      	ldr	r1, [pc, #232]	; (800203c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f54:	fba5 0101 	umull	r0, r1, r5, r1
 8001f58:	1853      	adds	r3, r2, r1
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f04f 0400 	mov.w	r4, #0
 8001f62:	461a      	mov	r2, r3
 8001f64:	4623      	mov	r3, r4
 8001f66:	f7fe f9c3 	bl	80002f0 <__aeabi_uldivmod>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460c      	mov	r4, r1
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	e049      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	ea03 0501 	and.w	r5, r3, r1
 8001f88:	ea04 0602 	and.w	r6, r4, r2
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4632      	mov	r2, r6
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	1b49      	subs	r1, r1, r5
 8001fa6:	eb62 0206 	sbc.w	r2, r2, r6
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0194      	lsls	r4, r2, #6
 8001fb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fb8:	018b      	lsls	r3, r1, #6
 8001fba:	1a5b      	subs	r3, r3, r1
 8001fbc:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	00e2      	lsls	r2, r4, #3
 8001fca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001fce:	00d9      	lsls	r1, r3, #3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4614      	mov	r4, r2
 8001fd4:	195b      	adds	r3, r3, r5
 8001fd6:	eb44 0406 	adc.w	r4, r4, r6
 8001fda:	f04f 0100 	mov.w	r1, #0
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	02a2      	lsls	r2, r4, #10
 8001fe4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001fe8:	0299      	lsls	r1, r3, #10
 8001fea:	460b      	mov	r3, r1
 8001fec:	4614      	mov	r4, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f04f 0400 	mov.w	r4, #0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	f7fe f978 	bl	80002f0 <__aeabi_uldivmod>
 8002000:	4603      	mov	r3, r0
 8002002:	460c      	mov	r4, r1
 8002004:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_GetSysClockFreq+0x158>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	0c1b      	lsrs	r3, r3, #16
 800200c:	f003 0303 	and.w	r3, r3, #3
 8002010:	3301      	adds	r3, #1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	60bb      	str	r3, [r7, #8]
      break;
 8002020:	e002      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002024:	60bb      	str	r3, [r7, #8]
      break;
 8002026:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002028:	68bb      	ldr	r3, [r7, #8]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	00f42400 	.word	0x00f42400
 800203c:	017d7840 	.word	0x017d7840

08002040 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_RCC_GetHCLKFreq+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000008 	.word	0x20000008

08002058 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800205c:	f7ff fff0 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002060:	4601      	mov	r1, r0
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	0a9b      	lsrs	r3, r3, #10
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_RCC_GetPCLK1Freq+0x24>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002074:	4618      	mov	r0, r3
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40023800 	.word	0x40023800
 800207c:	08004a2c 	.word	0x08004a2c

08002080 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002084:	f7ff ffdc 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002088:	4601      	mov	r1, r0
 800208a:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	0b5b      	lsrs	r3, r3, #13
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002096:	5cd3      	ldrb	r3, [r2, r3]
 8002098:	fa21 f303 	lsr.w	r3, r1, r3
}
 800209c:	4618      	mov	r0, r3
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40023800 	.word	0x40023800
 80020a4:	08004a2c 	.word	0x08004a2c

080020a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020d0:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	4964      	ldr	r1, [pc, #400]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020f2:	2301      	movs	r3, #1
 80020f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d017      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002102:	4b5d      	ldr	r3, [pc, #372]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002108:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	4959      	ldr	r1, [pc, #356]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002120:	d101      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800212e:	2301      	movs	r3, #1
 8002130:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d017      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800213e:	4b4e      	ldr	r3, [pc, #312]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	494a      	ldr	r1, [pc, #296]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800217a:	2301      	movs	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 808b 	beq.w	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	4a39      	ldr	r2, [pc, #228]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6413      	str	r3, [r2, #64]	; 0x40
 8002198:	4b37      	ldr	r3, [pc, #220]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021a4:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a34      	ldr	r2, [pc, #208]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b0:	f7fe fa70 	bl	8000694 <HAL_GetTick>
 80021b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7fe fa6c 	bl	8000694 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e38d      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021ca:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d035      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d02e      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	4a1d      	ldr	r2, [pc, #116]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220e:	4a1a      	ldr	r2, [pc, #104]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002216:	4a18      	ldr	r2, [pc, #96]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d114      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fa34 	bl	8000694 <HAL_GetTick>
 800222c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002230:	f7fe fa30 	bl	8000694 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e34f      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ee      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800225e:	d111      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800226e:	400b      	ands	r3, r1
 8002270:	4901      	ldr	r1, [pc, #4]	; (8002278 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
 8002276:	e00b      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002278:	40023800 	.word	0x40023800
 800227c:	40007000 	.word	0x40007000
 8002280:	0ffffcff 	.word	0x0ffffcff
 8002284:	4bb3      	ldr	r3, [pc, #716]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	4ab2      	ldr	r2, [pc, #712]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800228a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800228e:	6093      	str	r3, [r2, #8]
 8002290:	4bb0      	ldr	r3, [pc, #704]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002292:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229c:	49ad      	ldr	r1, [pc, #692]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d010      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ae:	4ba9      	ldr	r3, [pc, #676]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022b4:	4aa7      	ldr	r2, [pc, #668]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022be:	4ba5      	ldr	r3, [pc, #660]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	49a2      	ldr	r1, [pc, #648]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022dc:	4b9d      	ldr	r3, [pc, #628]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ea:	499a      	ldr	r1, [pc, #616]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022fe:	4b95      	ldr	r3, [pc, #596]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800230c:	4991      	ldr	r1, [pc, #580]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002320:	4b8c      	ldr	r3, [pc, #560]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800232e:	4989      	ldr	r1, [pc, #548]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002342:	4b84      	ldr	r3, [pc, #528]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	4980      	ldr	r1, [pc, #512]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002364:	4b7b      	ldr	r3, [pc, #492]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	f023 0203 	bic.w	r2, r3, #3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4978      	ldr	r1, [pc, #480]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002386:	4b73      	ldr	r3, [pc, #460]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f023 020c 	bic.w	r2, r3, #12
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002394:	496f      	ldr	r1, [pc, #444]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00a      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	4967      	ldr	r1, [pc, #412]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ca:	4b62      	ldr	r3, [pc, #392]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	495e      	ldr	r1, [pc, #376]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	4956      	ldr	r1, [pc, #344]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800240e:	4b51      	ldr	r3, [pc, #324]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	494d      	ldr	r1, [pc, #308]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002430:	4b48      	ldr	r3, [pc, #288]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	4945      	ldr	r1, [pc, #276]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002452:	4b40      	ldr	r3, [pc, #256]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	493c      	ldr	r1, [pc, #240]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002474:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002482:	4934      	ldr	r1, [pc, #208]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d011      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a4:	492b      	ldr	r1, [pc, #172]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b4:	d101      	bne.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e4:	491b      	ldr	r1, [pc, #108]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00b      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002508:	4912      	ldr	r1, [pc, #72]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00b      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800251c:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002546:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	e002      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	4985      	ldr	r1, [pc, #532]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800256c:	4b80      	ldr	r3, [pc, #512]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800256e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002572:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800257c:	497c      	ldr	r1, [pc, #496]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d005      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002592:	f040 80d6 	bne.w	8002742 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800259c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a2:	f7fe f877 	bl	8000694 <HAL_GetTick>
 80025a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025a8:	e008      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025aa:	f7fe f873 	bl	8000694 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	; 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e194      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025bc:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f0      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d021      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11d      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025dc:	4b64      	ldr	r3, [pc, #400]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e2:	0c1b      	lsrs	r3, r3, #16
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025ea:	4b61      	ldr	r3, [pc, #388]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f0:	0e1b      	lsrs	r3, r3, #24
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	019a      	lsls	r2, r3, #6
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	431a      	orrs	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	061b      	lsls	r3, r3, #24
 8002608:	431a      	orrs	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	071b      	lsls	r3, r3, #28
 8002610:	4957      	ldr	r1, [pc, #348]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800262c:	d00a      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002636:	2b00      	cmp	r3, #0
 8002638:	d02e      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002642:	d129      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002644:	4b4a      	ldr	r3, [pc, #296]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264a:	0c1b      	lsrs	r3, r3, #16
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002658:	0f1b      	lsrs	r3, r3, #28
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	019a      	lsls	r2, r3, #6
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	061b      	lsls	r3, r3, #24
 8002672:	431a      	orrs	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	071b      	lsls	r3, r3, #28
 8002678:	493d      	ldr	r1, [pc, #244]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002680:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002686:	f023 021f 	bic.w	r2, r3, #31
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	3b01      	subs	r3, #1
 8002690:	4937      	ldr	r1, [pc, #220]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d01d      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026a4:	4b32      	ldr	r3, [pc, #200]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026aa:	0e1b      	lsrs	r3, r3, #24
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b8:	0f1b      	lsrs	r3, r3, #28
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	019a      	lsls	r2, r3, #6
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	041b      	lsls	r3, r3, #16
 80026cc:	431a      	orrs	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	071b      	lsls	r3, r3, #28
 80026d8:	4925      	ldr	r1, [pc, #148]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d011      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	019a      	lsls	r2, r3, #6
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	071b      	lsls	r3, r3, #28
 8002708:	4919      	ldr	r1, [pc, #100]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a16      	ldr	r2, [pc, #88]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800271a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271c:	f7fd ffba 	bl	8000694 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002724:	f7fd ffb6 	bl	8000694 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e0d7      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b01      	cmp	r3, #1
 8002746:	f040 80cd 	bne.w	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a08      	ldr	r2, [pc, #32]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002754:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002756:	f7fd ff9d 	bl	8000694 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800275e:	f7fd ff99 	bl	8000694 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	d903      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0ba      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002770:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002774:	4b5e      	ldr	r3, [pc, #376]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800277c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002780:	d0ed      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d02e      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d12a      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027b8:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	0f1b      	lsrs	r3, r3, #28
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	019a      	lsls	r2, r3, #6
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	431a      	orrs	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	4944      	ldr	r1, [pc, #272]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027e6:	4b42      	ldr	r3, [pc, #264]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	021b      	lsls	r3, r3, #8
 80027f8:	493d      	ldr	r1, [pc, #244]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d022      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002814:	d11d      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	0e1b      	lsrs	r3, r3, #24
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	0f1b      	lsrs	r3, r3, #28
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	019a      	lsls	r2, r3, #6
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	431a      	orrs	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	061b      	lsls	r3, r3, #24
 8002844:	431a      	orrs	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	071b      	lsls	r3, r3, #28
 800284a:	4929      	ldr	r1, [pc, #164]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d028      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800285e:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	0e1b      	lsrs	r3, r3, #24
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800286c:	4b20      	ldr	r3, [pc, #128]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	0c1b      	lsrs	r3, r3, #16
 8002874:	f003 0303 	and.w	r3, r3, #3
 8002878:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	019a      	lsls	r2, r3, #6
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	041b      	lsls	r3, r3, #16
 8002884:	431a      	orrs	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	061b      	lsls	r3, r3, #24
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	071b      	lsls	r3, r3, #28
 8002892:	4917      	ldr	r1, [pc, #92]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	4911      	ldr	r1, [pc, #68]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	f7fd feea 	bl	8000694 <HAL_GetTick>
 80028c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028c4:	f7fd fee6 	bl	8000694 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e007      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e2:	d1ef      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3720      	adds	r7, #32
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e040      	b.n	8002988 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290a:	2b00      	cmp	r3, #0
 800290c:	d106      	bne.n	800291c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f001 fa94 	bl	8003e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8be 	bl	8002ab4 <UART_SetConfig>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e022      	b.n	8002988 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fb56 	bl	8002ffc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800295e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800296e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fbdd 	bl	8003140 <UART_CheckIdleState>
 8002986:	4603      	mov	r3, r0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a4:	2b20      	cmp	r3, #32
 80029a6:	d17f      	bne.n	8002aa8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_UART_Transmit+0x24>
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e078      	b.n	8002aaa <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Transmit+0x36>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e071      	b.n	8002aaa <HAL_UART_Transmit+0x11a>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2221      	movs	r2, #33	; 0x21
 80029d8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029da:	f7fd fe5b 	bl	8000694 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	88fa      	ldrh	r2, [r7, #6]
 80029e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029f8:	d108      	bne.n	8002a0c <HAL_UART_Transmit+0x7c>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d104      	bne.n	8002a0c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	e003      	b.n	8002a14 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a14:	e02c      	b.n	8002a70 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fbbc 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e03c      	b.n	8002aaa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	3302      	adds	r3, #2
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	e007      	b.n	8002a5e <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1cc      	bne.n	8002a16 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2200      	movs	r2, #0
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fb89 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e009      	b.n	8002aaa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3720      	adds	r7, #32
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4bb1      	ldr	r3, [pc, #708]	; (8002da8 <UART_SetConfig+0x2f4>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	6939      	ldr	r1, [r7, #16]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a9f      	ldr	r2, [pc, #636]	; (8002dac <UART_SetConfig+0x2f8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d121      	bne.n	8002b78 <UART_SetConfig+0xc4>
 8002b34:	4b9e      	ldr	r3, [pc, #632]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d816      	bhi.n	8002b70 <UART_SetConfig+0xbc>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <UART_SetConfig+0x94>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b59 	.word	0x08002b59
 8002b4c:	08002b65 	.word	0x08002b65
 8002b50:	08002b5f 	.word	0x08002b5f
 8002b54:	08002b6b 	.word	0x08002b6b
 8002b58:	2301      	movs	r3, #1
 8002b5a:	77fb      	strb	r3, [r7, #31]
 8002b5c:	e151      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	77fb      	strb	r3, [r7, #31]
 8002b62:	e14e      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002b64:	2304      	movs	r3, #4
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e14b      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e148      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002b70:	2310      	movs	r3, #16
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	bf00      	nop
 8002b76:	e144      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a8d      	ldr	r2, [pc, #564]	; (8002db4 <UART_SetConfig+0x300>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d134      	bne.n	8002bec <UART_SetConfig+0x138>
 8002b82:	4b8b      	ldr	r3, [pc, #556]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f003 030c 	and.w	r3, r3, #12
 8002b8c:	2b0c      	cmp	r3, #12
 8002b8e:	d829      	bhi.n	8002be4 <UART_SetConfig+0x130>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <UART_SetConfig+0xe4>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002bcd 	.word	0x08002bcd
 8002b9c:	08002be5 	.word	0x08002be5
 8002ba0:	08002be5 	.word	0x08002be5
 8002ba4:	08002be5 	.word	0x08002be5
 8002ba8:	08002bd9 	.word	0x08002bd9
 8002bac:	08002be5 	.word	0x08002be5
 8002bb0:	08002be5 	.word	0x08002be5
 8002bb4:	08002be5 	.word	0x08002be5
 8002bb8:	08002bd3 	.word	0x08002bd3
 8002bbc:	08002be5 	.word	0x08002be5
 8002bc0:	08002be5 	.word	0x08002be5
 8002bc4:	08002be5 	.word	0x08002be5
 8002bc8:	08002bdf 	.word	0x08002bdf
 8002bcc:	2300      	movs	r3, #0
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e117      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	77fb      	strb	r3, [r7, #31]
 8002bd6:	e114      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002bd8:	2304      	movs	r3, #4
 8002bda:	77fb      	strb	r3, [r7, #31]
 8002bdc:	e111      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002bde:	2308      	movs	r3, #8
 8002be0:	77fb      	strb	r3, [r7, #31]
 8002be2:	e10e      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002be4:	2310      	movs	r3, #16
 8002be6:	77fb      	strb	r3, [r7, #31]
 8002be8:	bf00      	nop
 8002bea:	e10a      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a71      	ldr	r2, [pc, #452]	; (8002db8 <UART_SetConfig+0x304>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d120      	bne.n	8002c38 <UART_SetConfig+0x184>
 8002bf6:	4b6e      	ldr	r3, [pc, #440]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d00f      	beq.n	8002c24 <UART_SetConfig+0x170>
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d802      	bhi.n	8002c0e <UART_SetConfig+0x15a>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <UART_SetConfig+0x164>
 8002c0c:	e010      	b.n	8002c30 <UART_SetConfig+0x17c>
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d005      	beq.n	8002c1e <UART_SetConfig+0x16a>
 8002c12:	2b30      	cmp	r3, #48	; 0x30
 8002c14:	d009      	beq.n	8002c2a <UART_SetConfig+0x176>
 8002c16:	e00b      	b.n	8002c30 <UART_SetConfig+0x17c>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e0f1      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e0ee      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c24:	2304      	movs	r3, #4
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e0eb      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	77fb      	strb	r3, [r7, #31]
 8002c2e:	e0e8      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c30:	2310      	movs	r3, #16
 8002c32:	77fb      	strb	r3, [r7, #31]
 8002c34:	bf00      	nop
 8002c36:	e0e4      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a5f      	ldr	r2, [pc, #380]	; (8002dbc <UART_SetConfig+0x308>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d120      	bne.n	8002c84 <UART_SetConfig+0x1d0>
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d00f      	beq.n	8002c70 <UART_SetConfig+0x1bc>
 8002c50:	2b40      	cmp	r3, #64	; 0x40
 8002c52:	d802      	bhi.n	8002c5a <UART_SetConfig+0x1a6>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <UART_SetConfig+0x1b0>
 8002c58:	e010      	b.n	8002c7c <UART_SetConfig+0x1c8>
 8002c5a:	2b80      	cmp	r3, #128	; 0x80
 8002c5c:	d005      	beq.n	8002c6a <UART_SetConfig+0x1b6>
 8002c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c60:	d009      	beq.n	8002c76 <UART_SetConfig+0x1c2>
 8002c62:	e00b      	b.n	8002c7c <UART_SetConfig+0x1c8>
 8002c64:	2300      	movs	r3, #0
 8002c66:	77fb      	strb	r3, [r7, #31]
 8002c68:	e0cb      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	77fb      	strb	r3, [r7, #31]
 8002c6e:	e0c8      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c70:	2304      	movs	r3, #4
 8002c72:	77fb      	strb	r3, [r7, #31]
 8002c74:	e0c5      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c76:	2308      	movs	r3, #8
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	e0c2      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	bf00      	nop
 8002c82:	e0be      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <UART_SetConfig+0x30c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d124      	bne.n	8002cd8 <UART_SetConfig+0x224>
 8002c8e:	4b48      	ldr	r3, [pc, #288]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9c:	d012      	beq.n	8002cc4 <UART_SetConfig+0x210>
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d802      	bhi.n	8002caa <UART_SetConfig+0x1f6>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <UART_SetConfig+0x204>
 8002ca8:	e012      	b.n	8002cd0 <UART_SetConfig+0x21c>
 8002caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cae:	d006      	beq.n	8002cbe <UART_SetConfig+0x20a>
 8002cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb4:	d009      	beq.n	8002cca <UART_SetConfig+0x216>
 8002cb6:	e00b      	b.n	8002cd0 <UART_SetConfig+0x21c>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e0a1      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	77fb      	strb	r3, [r7, #31]
 8002cc2:	e09e      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002cc4:	2304      	movs	r3, #4
 8002cc6:	77fb      	strb	r3, [r7, #31]
 8002cc8:	e09b      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002cca:	2308      	movs	r3, #8
 8002ccc:	77fb      	strb	r3, [r7, #31]
 8002cce:	e098      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	77fb      	strb	r3, [r7, #31]
 8002cd4:	bf00      	nop
 8002cd6:	e094      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <UART_SetConfig+0x310>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d124      	bne.n	8002d2c <UART_SetConfig+0x278>
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf0:	d012      	beq.n	8002d18 <UART_SetConfig+0x264>
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d802      	bhi.n	8002cfe <UART_SetConfig+0x24a>
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <UART_SetConfig+0x258>
 8002cfc:	e012      	b.n	8002d24 <UART_SetConfig+0x270>
 8002cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d02:	d006      	beq.n	8002d12 <UART_SetConfig+0x25e>
 8002d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d08:	d009      	beq.n	8002d1e <UART_SetConfig+0x26a>
 8002d0a:	e00b      	b.n	8002d24 <UART_SetConfig+0x270>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e077      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d12:	2302      	movs	r3, #2
 8002d14:	77fb      	strb	r3, [r7, #31]
 8002d16:	e074      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e071      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e06e      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d24:	2310      	movs	r3, #16
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	bf00      	nop
 8002d2a:	e06a      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a25      	ldr	r2, [pc, #148]	; (8002dc8 <UART_SetConfig+0x314>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d124      	bne.n	8002d80 <UART_SetConfig+0x2cc>
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d44:	d012      	beq.n	8002d6c <UART_SetConfig+0x2b8>
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d4a:	d802      	bhi.n	8002d52 <UART_SetConfig+0x29e>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <UART_SetConfig+0x2ac>
 8002d50:	e012      	b.n	8002d78 <UART_SetConfig+0x2c4>
 8002d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d56:	d006      	beq.n	8002d66 <UART_SetConfig+0x2b2>
 8002d58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d5c:	d009      	beq.n	8002d72 <UART_SetConfig+0x2be>
 8002d5e:	e00b      	b.n	8002d78 <UART_SetConfig+0x2c4>
 8002d60:	2300      	movs	r3, #0
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e04d      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d66:	2302      	movs	r3, #2
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e04a      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e047      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d72:	2308      	movs	r3, #8
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e044      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	bf00      	nop
 8002d7e:	e040      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a11      	ldr	r2, [pc, #68]	; (8002dcc <UART_SetConfig+0x318>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d139      	bne.n	8002dfe <UART_SetConfig+0x34a>
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <UART_SetConfig+0x2fc>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d98:	d027      	beq.n	8002dea <UART_SetConfig+0x336>
 8002d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d9e:	d817      	bhi.n	8002dd0 <UART_SetConfig+0x31c>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01c      	beq.n	8002dde <UART_SetConfig+0x32a>
 8002da4:	e027      	b.n	8002df6 <UART_SetConfig+0x342>
 8002da6:	bf00      	nop
 8002da8:	efff69f3 	.word	0xefff69f3
 8002dac:	40011000 	.word	0x40011000
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40004400 	.word	0x40004400
 8002db8:	40004800 	.word	0x40004800
 8002dbc:	40004c00 	.word	0x40004c00
 8002dc0:	40005000 	.word	0x40005000
 8002dc4:	40011400 	.word	0x40011400
 8002dc8:	40007800 	.word	0x40007800
 8002dcc:	40007c00 	.word	0x40007c00
 8002dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd4:	d006      	beq.n	8002de4 <UART_SetConfig+0x330>
 8002dd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dda:	d009      	beq.n	8002df0 <UART_SetConfig+0x33c>
 8002ddc:	e00b      	b.n	8002df6 <UART_SetConfig+0x342>
 8002dde:	2300      	movs	r3, #0
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e00e      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002de4:	2302      	movs	r3, #2
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e00b      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002dea:	2304      	movs	r3, #4
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e008      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002df0:	2308      	movs	r3, #8
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e005      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002df6:	2310      	movs	r3, #16
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	bf00      	nop
 8002dfc:	e001      	b.n	8002e02 <UART_SetConfig+0x34e>
 8002dfe:	2310      	movs	r3, #16
 8002e00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0a:	d17c      	bne.n	8002f06 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002e0c:	7ffb      	ldrb	r3, [r7, #31]
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d859      	bhi.n	8002ec6 <UART_SetConfig+0x412>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <UART_SetConfig+0x364>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e3d 	.word	0x08002e3d
 8002e1c:	08002e5b 	.word	0x08002e5b
 8002e20:	08002e79 	.word	0x08002e79
 8002e24:	08002ec7 	.word	0x08002ec7
 8002e28:	08002e91 	.word	0x08002e91
 8002e2c:	08002ec7 	.word	0x08002ec7
 8002e30:	08002ec7 	.word	0x08002ec7
 8002e34:	08002ec7 	.word	0x08002ec7
 8002e38:	08002eaf 	.word	0x08002eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e3c:	f7ff f90c 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 8002e40:	4603      	mov	r3, r0
 8002e42:	005a      	lsls	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	085b      	lsrs	r3, r3, #1
 8002e4a:	441a      	add	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	61bb      	str	r3, [r7, #24]
        break;
 8002e58:	e038      	b.n	8002ecc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002e5a:	f7ff f911 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	005a      	lsls	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	085b      	lsrs	r3, r3, #1
 8002e68:	441a      	add	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	61bb      	str	r3, [r7, #24]
        break;
 8002e76:	e029      	b.n	8002ecc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	085a      	lsrs	r2, r3, #1
 8002e7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ff4 <UART_SetConfig+0x540>)
 8002e80:	4413      	add	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6852      	ldr	r2, [r2, #4]
 8002e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	61bb      	str	r3, [r7, #24]
        break;
 8002e8e:	e01d      	b.n	8002ecc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002e90:	f7ff f824 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002e94:	4603      	mov	r3, r0
 8002e96:	005a      	lsls	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	61bb      	str	r3, [r7, #24]
        break;
 8002eac:	e00e      	b.n	8002ecc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	085b      	lsrs	r3, r3, #1
 8002eb4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	61bb      	str	r3, [r7, #24]
        break;
 8002ec4:	e002      	b.n	8002ecc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	75fb      	strb	r3, [r7, #23]
        break;
 8002eca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b0f      	cmp	r3, #15
 8002ed0:	d916      	bls.n	8002f00 <UART_SetConfig+0x44c>
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d212      	bcs.n	8002f00 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	f023 030f 	bic.w	r3, r3, #15
 8002ee2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	89fa      	ldrh	r2, [r7, #14]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	e06e      	b.n	8002fde <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	75fb      	strb	r3, [r7, #23]
 8002f04:	e06b      	b.n	8002fde <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d857      	bhi.n	8002fbc <UART_SetConfig+0x508>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <UART_SetConfig+0x460>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f55 	.word	0x08002f55
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002fbd 	.word	0x08002fbd
 8002f24:	08002f89 	.word	0x08002f89
 8002f28:	08002fbd 	.word	0x08002fbd
 8002f2c:	08002fbd 	.word	0x08002fbd
 8002f30:	08002fbd 	.word	0x08002fbd
 8002f34:	08002fa5 	.word	0x08002fa5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f38:	f7ff f88e 	bl	8002058 <HAL_RCC_GetPCLK1Freq>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	085b      	lsrs	r3, r3, #1
 8002f44:	441a      	add	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	61bb      	str	r3, [r7, #24]
        break;
 8002f52:	e036      	b.n	8002fc2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f54:	f7ff f894 	bl	8002080 <HAL_RCC_GetPCLK2Freq>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	441a      	add	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	61bb      	str	r3, [r7, #24]
        break;
 8002f6e:	e028      	b.n	8002fc2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	085a      	lsrs	r2, r3, #1
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <UART_SetConfig+0x544>)
 8002f78:	4413      	add	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6852      	ldr	r2, [r2, #4]
 8002f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	61bb      	str	r3, [r7, #24]
        break;
 8002f86:	e01c      	b.n	8002fc2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f88:	f7fe ffa8 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	441a      	add	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	61bb      	str	r3, [r7, #24]
        break;
 8002fa2:	e00e      	b.n	8002fc2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	61bb      	str	r3, [r7, #24]
        break;
 8002fba:	e002      	b.n	8002fc2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	75fb      	strb	r3, [r7, #23]
        break;
 8002fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b0f      	cmp	r3, #15
 8002fc6:	d908      	bls.n	8002fda <UART_SetConfig+0x526>
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fce:	d204      	bcs.n	8002fda <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	e001      	b.n	8002fde <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3720      	adds	r7, #32
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	01e84800 	.word	0x01e84800
 8002ff8:	00f42400 	.word	0x00f42400

08002ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01a      	beq.n	8003112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030fa:	d10a      	bne.n	8003112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af02      	add	r7, sp, #8
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800314e:	f7fd faa1 	bl	8000694 <HAL_GetTick>
 8003152:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d10e      	bne.n	8003180 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003162:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f814 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e00a      	b.n	8003196 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ae:	e02a      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b6:	d026      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fd fa6c 	bl	8000694 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <UART_WaitOnFlagUntilTimeout+0x30>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11b      	bne.n	8003206 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e00f      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69da      	ldr	r2, [r3, #28]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	bf0c      	ite	eq
 8003216:	2301      	moveq	r3, #1
 8003218:	2300      	movne	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	461a      	mov	r2, r3
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	429a      	cmp	r2, r3
 8003222:	d0c5      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <can_init>:
extern CAN_HandleTypeDef hcan3;
extern UART_HandleTypeDef huart3;
canStruct can1,can3;
fifoCanDataType fifoCAN1, fifoCAN3;

void can_init(){
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
	/*if(CAN_initialization(&can1)){
		report_error_can1();
	}*/
	if(CAN_initialization(&can3)){
 8003234:	480d      	ldr	r0, [pc, #52]	; (800326c <can_init+0x3c>)
 8003236:	f000 f8f0 	bl	800341a <CAN_initialization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <can_init+0x14>
		report_error_can3();
 8003240:	f000 f95d 	bl	80034fe <report_error_can3>
	fifoCAN1.txHeadHigh = 0;
	fifoCAN1.txTailNormal = 0;
	fifoCAN1.txTailHigh = 0;
*/

	fifoCAN3.rxHead = 0;
 8003244:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <can_init+0x40>)
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
	fifoCAN3.rxTail = 0;
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <can_init+0x40>)
 800324c:	2200      	movs	r2, #0
 800324e:	705a      	strb	r2, [r3, #1]
	fifoCAN3.txHeadNormal = 0;
 8003250:	4b07      	ldr	r3, [pc, #28]	; (8003270 <can_init+0x40>)
 8003252:	2200      	movs	r2, #0
 8003254:	709a      	strb	r2, [r3, #2]
	fifoCAN3.txHeadHigh = 0;
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <can_init+0x40>)
 8003258:	2200      	movs	r2, #0
 800325a:	711a      	strb	r2, [r3, #4]
	fifoCAN3.txTailNormal = 0;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <can_init+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	70da      	strb	r2, [r3, #3]
	fifoCAN3.txTailHigh = 0;
 8003262:	4b03      	ldr	r3, [pc, #12]	; (8003270 <can_init+0x40>)
 8003264:	2200      	movs	r2, #0
 8003266:	715a      	strb	r2, [r3, #5]
}
 8003268:	bf00      	nop
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20000a7c 	.word	0x20000a7c
 8003270:	2000009c 	.word	0x2000009c

08003274 <CAN_Send>:

uint8_t CAN_Send(canStruct* can, uint32_t id, fifoPriority _fifoPriority){
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	71fb      	strb	r3, [r7, #7]
	if (HAL_CAN_IsTxMessagePending(can->hcan, CAN_TX_MAILBOX0) == 0){
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f7fd fd38 	bl	8000cfe <HAL_CAN_IsTxMessagePending>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d114      	bne.n	80032be <CAN_Send+0x4a>
		HAL_UART_Transmit(&huart3,(uint8_t*)("Invio diretto\r\n"), strlen("Invio diretto\r\n"), 10);
 8003294:	230a      	movs	r3, #10
 8003296:	220f      	movs	r2, #15
 8003298:	4926      	ldr	r1, [pc, #152]	; (8003334 <CAN_Send+0xc0>)
 800329a:	4827      	ldr	r0, [pc, #156]	; (8003338 <CAN_Send+0xc4>)
 800329c:	f7ff fb78 	bl	8002990 <HAL_UART_Transmit>
		if(CAN_Send_IT(can, id) == 0){
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f850 	bl	8003348 <CAN_Send_IT>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d13c      	bne.n	8003328 <CAN_Send+0xb4>
			//TODO: implementare errore
			HAL_UART_Transmit(&huart3,(uint8_t*)("Cagato fuori dal vaso\r\n"), strlen("Cagato fuori dal vaso\r\n"), 10);
 80032ae:	230a      	movs	r3, #10
 80032b0:	2217      	movs	r2, #23
 80032b2:	4922      	ldr	r1, [pc, #136]	; (800333c <CAN_Send+0xc8>)
 80032b4:	4820      	ldr	r0, [pc, #128]	; (8003338 <CAN_Send+0xc4>)
 80032b6:	f7ff fb6b 	bl	8002990 <HAL_UART_Transmit>
			return 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e035      	b.n	800332a <CAN_Send+0xb6>
		}
	}else{
		HAL_UART_Transmit(&huart3,(uint8_t*)("Metto in coda\r\n"), strlen("Metto in coda\r\n"), 10);
 80032be:	230a      	movs	r3, #10
 80032c0:	220f      	movs	r2, #15
 80032c2:	491f      	ldr	r1, [pc, #124]	; (8003340 <CAN_Send+0xcc>)
 80032c4:	481c      	ldr	r0, [pc, #112]	; (8003338 <CAN_Send+0xc4>)
 80032c6:	f7ff fb63 	bl	8002990 <HAL_UART_Transmit>
		fifoDataType fifodata;
		for(int i = 0; i < 8; i++){
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e00d      	b.n	80032ec <CAN_Send+0x78>
			fifodata.data[i] = can->dataTx[i];
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	3304      	adds	r3, #4
 80032d8:	7819      	ldrb	r1, [r3, #0]
 80032da:	f107 0214 	add.w	r2, r7, #20
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	4413      	add	r3, r2
 80032e2:	460a      	mov	r2, r1
 80032e4:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 8; i++){
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b07      	cmp	r3, #7
 80032f0:	ddee      	ble.n	80032d0 <CAN_Send+0x5c>
		}
		fifodata.id = id;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	613b      	str	r3, [r7, #16]
		if(_fifoPriority == normalPriority){
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <CAN_Send+0x9e>
				if(fifoTxDataCAN1_normal_push(&fifoCAN1, &fifodata) == 0){
					//TODO: implementare errore
					return 0;
				}
			}else{*/
				if(fifoTxDataCAN3_normal_push(&fifoCAN3, &fifodata) == 0){
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4619      	mov	r1, r3
 8003302:	4810      	ldr	r0, [pc, #64]	; (8003344 <CAN_Send+0xd0>)
 8003304:	f000 f9a2 	bl	800364c <fifoTxDataCAN3_normal_push>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10c      	bne.n	8003328 <CAN_Send+0xb4>
					//TODO: implementare errore
					return 0;
 800330e:	2300      	movs	r3, #0
 8003310:	e00b      	b.n	800332a <CAN_Send+0xb6>
				if(fifoTxDataCAN1_high_push(&fifoCAN1, &fifodata) == 0){
					//TODO: implementare errore
					return 0;
				}
			}else{*/
				if(fifoTxDataCAN3_high_push(&fifoCAN3, &fifodata) == 0){
 8003312:	f107 0310 	add.w	r3, r7, #16
 8003316:	4619      	mov	r1, r3
 8003318:	480a      	ldr	r0, [pc, #40]	; (8003344 <CAN_Send+0xd0>)
 800331a:	f000 f9f1 	bl	8003700 <fifoTxDataCAN3_high_push>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <CAN_Send+0xb4>
					//TODO: implementare errore
					return 0;
 8003324:	2300      	movs	r3, #0
 8003326:	e000      	b.n	800332a <CAN_Send+0xb6>
				}
			//}
		}

	}
	return 1;
 8003328:	2301      	movs	r3, #1
}
 800332a:	4618      	mov	r0, r3
 800332c:	3720      	adds	r7, #32
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	08004918 	.word	0x08004918
 8003338:	20002928 	.word	0x20002928
 800333c:	08004928 	.word	0x08004928
 8003340:	08004940 	.word	0x08004940
 8003344:	2000009c 	.word	0x2000009c

08003348 <CAN_Send_IT>:


uint8_t CAN_Send_IT(canStruct* can, uint32_t id){
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

	//uint32_t mailbox = 0;
	//CAN_TxMailBox_TypeDef mailbox;
	//mailbox.TIR = 0; //set to mailbox 0

	for(int i = 0; i < 7; i++){
 8003352:	2300      	movs	r3, #0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
 8003356:	e00d      	b.n	8003374 <CAN_Send_IT+0x2c>
		can->dataTxBck[i] = can->dataTx[i];
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	7819      	ldrb	r1, [r3, #0]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	4413      	add	r3, r2
 8003368:	3314      	adds	r3, #20
 800336a:	460a      	mov	r2, r1
 800336c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 7; i++){
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	3301      	adds	r3, #1
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	2b06      	cmp	r3, #6
 8003378:	ddee      	ble.n	8003358 <CAN_Send_IT+0x10>
	}
	can->idBck = id;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	61da      	str	r2, [r3, #28]

	uint8_t flag = 0; //error
 8003380:	2300      	movs	r3, #0
 8003382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = id;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = can->size;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	773b      	strb	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx,(uint32_t*)CAN_TX_MAILBOX0) == HAL_OK){
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a18      	ldr	r0, [r3, #32]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	1d1a      	adds	r2, r3, #4
 80033a4:	f107 0108 	add.w	r1, r7, #8
 80033a8:	2301      	movs	r3, #1
 80033aa:	f7fd fbcd 	bl	8000b48 <HAL_CAN_AddTxMessage>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <CAN_Send_IT+0x72>
		flag = 1; //ok
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}

	return flag;
 80033ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3728      	adds	r7, #40	; 0x28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <CAN_Send_Bck>:

uint8_t CAN_Send_Bck(canStruct* can){
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08a      	sub	sp, #40	; 0x28
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]

	uint8_t flag = 0; //error
 80033ce:	2300      	movs	r3, #0
 80033d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = can->idBck;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE = CAN_ID_STD;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
	TxHeader.DLC = can->size;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61fb      	str	r3, [r7, #28]
	TxHeader.TransmitGlobalTime = DISABLE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	f887 3020 	strb.w	r3, [r7, #32]

	if(HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTxBck,(uint32_t*)CAN_TX_MAILBOX0) == HAL_OK){
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a18      	ldr	r0, [r3, #32]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f103 0214 	add.w	r2, r3, #20
 80033f8:	f107 010c 	add.w	r1, r7, #12
 80033fc:	2301      	movs	r3, #1
 80033fe:	f7fd fba3 	bl	8000b48 <HAL_CAN_AddTxMessage>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d102      	bne.n	800340e <CAN_Send_Bck+0x48>
		flag = 1; //ok
 8003408:	2301      	movs	r3, #1
 800340a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return flag;
 800340e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003412:	4618      	mov	r0, r3
 8003414:	3728      	adds	r7, #40	; 0x28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <CAN_initialization>:

uint8_t CAN_initialization(canStruct *can){
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]



	//CAN filter initialization
	can->canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	63da      	str	r2, [r3, #60]	; 0x3c
	can->canFilter.FilterIdLow = 0;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	629a      	str	r2, [r3, #40]	; 0x28
	can->canFilter.FilterIdHigh = 0;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
	can->canFilter.FilterMaskIdHigh = 0;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	62da      	str	r2, [r3, #44]	; 0x2c
	can->canFilter.FilterMaskIdLow = 0;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
	can->canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	635a      	str	r2, [r3, #52]	; 0x34
	can->canFilter.FilterBank = 0;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	639a      	str	r2, [r3, #56]	; 0x38
	can->canFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
	can->canFilter.FilterActivation = ENABLE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	645a      	str	r2, [r3, #68]	; 0x44

	//CAN filter configuration
	can->configFilter_status = HAL_CAN_ConfigFilter(can->hcan, &can->canFilter);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3324      	adds	r3, #36	; 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	4610      	mov	r0, r2
 8003464:	f7fd fa40 	bl	80008e8 <HAL_CAN_ConfigFilter>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c


	can->activateNotif_status = HAL_CAN_ActivateNotification(can->hcan, can->rx0_interrupt);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1a      	ldr	r2, [r3, #32]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f993 3a30 	ldrsb.w	r3, [r3, #2608]	; 0xa30
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f7fd fc61 	bl	8000d46 <HAL_CAN_ActivateNotification>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

	can->fifo.rxHead = 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	can->fifo.rxTail = 0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	can->fifo.txHeadHigh = 0;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	can->fifo.txHeadNormal = 0;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	can->fifo.txTailHigh = 0;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	can->fifo.txTailNormal = 0;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	//CAN start
	can->canStart_status = HAL_CAN_Start(can->hcan);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fafc 	bl	8000ac0 <HAL_CAN_Start>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e



	if(can->configFilter_status == HAL_OK && can->activateNotif_status == HAL_OK && can->canStart_status == HAL_OK) return 0; // no errors occurred
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <CAN_initialization+0xda>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <CAN_initialization+0xda>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <CAN_initialization+0xda>
 80034f0:	2300      	movs	r3, #0
 80034f2:	e000      	b.n	80034f6 <CAN_initialization+0xdc>
	else return 1;
 80034f4:	2301      	movs	r3, #1

}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <report_error_can3>:


void report_error_can1(){
	//HAL_GPIO_TogglePin(USER_LED_3_GPIO_Port, USER_LED_3_Pin);
}
void report_error_can3(){
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <fifoTxDataCAN3_normal_pop>:
		_fifoCAN->txHeadHigh = (_fifoCAN->txHeadHigh + 1) % fifoLengthH;
		return 1;
	}
}

uint8_t fifoTxDataCAN3_normal_pop(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 800350c:	b490      	push	{r4, r7}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	if(_fifoCAN->txHeadNormal ==_fifoCAN->txTailNormal){
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	789a      	ldrb	r2, [r3, #2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	78db      	ldrb	r3, [r3, #3]
 800351e:	429a      	cmp	r2, r3
 8003520:	d101      	bne.n	8003526 <fifoTxDataCAN3_normal_pop+0x1a>
		return 0;
 8003522:	2300      	movs	r3, #0
 8003524:	e03a      	b.n	800359c <fifoTxDataCAN3_normal_pop+0x90>
	}else{
		_txData->id = _fifoCAN->txNormal[_fifoCAN->txTailNormal].id;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	78db      	ldrb	r3, [r3, #3]
 800352a:	4619      	mov	r1, r3
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	460b      	mov	r3, r1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	440b      	add	r3, r1
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
 8003546:	e015      	b.n	8003574 <fifoTxDataCAN3_normal_pop+0x68>
			_txData->data[i] = _fifoCAN->txNormal[_fifoCAN->txTailNormal].data[i];
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	78db      	ldrb	r3, [r3, #3]
 800354c:	461c      	mov	r4, r3
 800354e:	7bf9      	ldrb	r1, [r7, #15]
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4623      	mov	r3, r4
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4423      	add	r3, r4
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	440b      	add	r3, r1
 8003560:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8003564:	7819      	ldrb	r1, [r3, #0]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	4413      	add	r3, r2
 800356a:	460a      	mov	r2, r1
 800356c:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	3301      	adds	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b07      	cmp	r3, #7
 8003578:	d9e6      	bls.n	8003548 <fifoTxDataCAN3_normal_pop+0x3c>
		}
		_fifoCAN->txTailNormal = (_fifoCAN->txTailNormal + 1) % fifoLengthN;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	78db      	ldrb	r3, [r3, #3]
 800357e:	3301      	adds	r3, #1
 8003580:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <fifoTxDataCAN3_normal_pop+0x9c>)
 8003582:	fb82 1203 	smull	r1, r2, r2, r3
 8003586:	1151      	asrs	r1, r2, #5
 8003588:	17da      	asrs	r2, r3, #31
 800358a:	1a8a      	subs	r2, r1, r2
 800358c:	2164      	movs	r1, #100	; 0x64
 800358e:	fb01 f202 	mul.w	r2, r1, r2
 8003592:	1a9a      	subs	r2, r3, r2
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	70da      	strb	r2, [r3, #3]
		return 1;
 800359a:	2301      	movs	r3, #1
	}
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc90      	pop	{r4, r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	51eb851f 	.word	0x51eb851f

080035ac <fifoTxDataCAN3_high_pop>:
uint8_t fifoTxDataCAN3_high_pop(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 80035ac:	b490      	push	{r4, r7}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
	if(_fifoCAN->txHeadHigh ==_fifoCAN->txTailHigh){
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	791a      	ldrb	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	795b      	ldrb	r3, [r3, #5]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d101      	bne.n	80035c6 <fifoTxDataCAN3_high_pop+0x1a>
		return 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e03b      	b.n	800363e <fifoTxDataCAN3_high_pop+0x92>
	}else{
		_txData->id = _fifoCAN->txHigh[_fifoCAN->txTailHigh].id;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	795b      	ldrb	r3, [r3, #5]
 80035ca:	4619      	mov	r1, r3
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	460b      	mov	r3, r1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	440b      	add	r3, r1
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 80035e2:	2300      	movs	r3, #0
 80035e4:	73fb      	strb	r3, [r7, #15]
 80035e6:	e015      	b.n	8003614 <fifoTxDataCAN3_high_pop+0x68>
			_txData->data[i] = _fifoCAN->txHigh[_fifoCAN->txTailHigh].data[i];
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	795b      	ldrb	r3, [r3, #5]
 80035ec:	461c      	mov	r4, r3
 80035ee:	7bf9      	ldrb	r1, [r7, #15]
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4623      	mov	r3, r4
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4423      	add	r3, r4
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4403      	add	r3, r0
 80035fe:	440b      	add	r3, r1
 8003600:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8003604:	7819      	ldrb	r1, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	4413      	add	r3, r2
 800360a:	460a      	mov	r2, r1
 800360c:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	3301      	adds	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b07      	cmp	r3, #7
 8003618:	d9e6      	bls.n	80035e8 <fifoTxDataCAN3_high_pop+0x3c>
		}
		_fifoCAN->txTailHigh = (_fifoCAN->txTailHigh + 1) % fifoLengthH;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	795b      	ldrb	r3, [r3, #5]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <fifoTxDataCAN3_high_pop+0x9c>)
 8003622:	fb83 1302 	smull	r1, r3, r3, r2
 8003626:	1099      	asrs	r1, r3, #2
 8003628:	17d3      	asrs	r3, r2, #31
 800362a:	1ac9      	subs	r1, r1, r3
 800362c:	460b      	mov	r3, r1
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	1ad1      	subs	r1, r2, r3
 8003636:	b2ca      	uxtb	r2, r1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	715a      	strb	r2, [r3, #5]
		return 1;
 800363c:	2301      	movs	r3, #1
	}
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bc90      	pop	{r4, r7}
 8003646:	4770      	bx	lr
 8003648:	66666667 	.word	0x66666667

0800364c <fifoTxDataCAN3_normal_push>:
uint8_t fifoTxDataCAN3_normal_push(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 800364c:	b490      	push	{r4, r7}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
	if((_fifoCAN->txHeadNormal + 1) % fifoLengthN == _fifoCAN->txTailNormal){
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	789b      	ldrb	r3, [r3, #2]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <fifoTxDataCAN3_normal_push+0xb0>)
 800365e:	fb83 1302 	smull	r1, r3, r3, r2
 8003662:	1159      	asrs	r1, r3, #5
 8003664:	17d3      	asrs	r3, r2, #31
 8003666:	1acb      	subs	r3, r1, r3
 8003668:	2164      	movs	r1, #100	; 0x64
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	78d2      	ldrb	r2, [r2, #3]
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <fifoTxDataCAN3_normal_push+0x30>
		return 0;
 8003678:	2300      	movs	r3, #0
 800367a:	e03a      	b.n	80036f2 <fifoTxDataCAN3_normal_push+0xa6>
	}else{
		_fifoCAN->txNormal[_fifoCAN->txHeadNormal].id = _txData->id;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	789b      	ldrb	r3, [r3, #2]
 8003680:	4618      	mov	r0, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4603      	mov	r3, r0
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4403      	add	r3, r0
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8003696:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
 800369c:	e015      	b.n	80036ca <fifoTxDataCAN3_normal_push+0x7e>
			_fifoCAN->txNormal[_fifoCAN->txHeadNormal].data[i] = _txData->data[i];
 800369e:	7bfb      	ldrb	r3, [r7, #15]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	7892      	ldrb	r2, [r2, #2]
 80036a4:	4610      	mov	r0, r2
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6839      	ldr	r1, [r7, #0]
 80036aa:	440b      	add	r3, r1
 80036ac:	791c      	ldrb	r4, [r3, #4]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4603      	mov	r3, r0
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4403      	add	r3, r0
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	4413      	add	r3, r2
 80036bc:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 80036c0:	4622      	mov	r2, r4
 80036c2:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	3301      	adds	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b07      	cmp	r3, #7
 80036ce:	d9e6      	bls.n	800369e <fifoTxDataCAN3_normal_push+0x52>
		}
		_fifoCAN->txHeadNormal = (_fifoCAN->txHeadNormal + 1) % fifoLengthN;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	789b      	ldrb	r3, [r3, #2]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <fifoTxDataCAN3_normal_push+0xb0>)
 80036d8:	fb82 1203 	smull	r1, r2, r2, r3
 80036dc:	1151      	asrs	r1, r2, #5
 80036de:	17da      	asrs	r2, r3, #31
 80036e0:	1a8a      	subs	r2, r1, r2
 80036e2:	2164      	movs	r1, #100	; 0x64
 80036e4:	fb01 f202 	mul.w	r2, r1, r2
 80036e8:	1a9a      	subs	r2, r3, r2
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	709a      	strb	r2, [r3, #2]
		return 1;
 80036f0:	2301      	movs	r3, #1
	}
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc90      	pop	{r4, r7}
 80036fa:	4770      	bx	lr
 80036fc:	51eb851f 	.word	0x51eb851f

08003700 <fifoTxDataCAN3_high_push>:
uint8_t fifoTxDataCAN3_high_push(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 8003700:	b490      	push	{r4, r7}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
	if((_fifoCAN->txHeadHigh + 1) % fifoLengthH == _fifoCAN->txTailHigh){
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	791b      	ldrb	r3, [r3, #4]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <fifoTxDataCAN3_high_push+0xb4>)
 8003712:	fb83 2301 	smull	r2, r3, r3, r1
 8003716:	109a      	asrs	r2, r3, #2
 8003718:	17cb      	asrs	r3, r1, #31
 800371a:	1ad2      	subs	r2, r2, r3
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	1aca      	subs	r2, r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	795b      	ldrb	r3, [r3, #5]
 800372a:	429a      	cmp	r2, r3
 800372c:	d101      	bne.n	8003732 <fifoTxDataCAN3_high_push+0x32>
		return 0;
 800372e:	2300      	movs	r3, #0
 8003730:	e03b      	b.n	80037aa <fifoTxDataCAN3_high_push+0xaa>
	}else{
		_fifoCAN->txHigh[_fifoCAN->txHeadHigh].id = _txData->id;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	791b      	ldrb	r3, [r3, #4]
 8003736:	4618      	mov	r0, r3
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4603      	mov	r3, r0
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	4403      	add	r3, r0
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	f603 1368 	addw	r3, r3, #2408	; 0x968
 800374c:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	e015      	b.n	8003780 <fifoTxDataCAN3_high_push+0x80>
			_fifoCAN->txHigh[_fifoCAN->txHeadHigh].data[i] = _txData->data[i];
 8003754:	7bfb      	ldrb	r3, [r7, #15]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	7912      	ldrb	r2, [r2, #4]
 800375a:	4610      	mov	r0, r2
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	6839      	ldr	r1, [r7, #0]
 8003760:	440b      	add	r3, r1
 8003762:	791c      	ldrb	r4, [r3, #4]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4603      	mov	r3, r0
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4403      	add	r3, r0
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	4413      	add	r3, r2
 8003772:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8003776:	4622      	mov	r2, r4
 8003778:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 800377a:	7bfb      	ldrb	r3, [r7, #15]
 800377c:	3301      	adds	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b07      	cmp	r3, #7
 8003784:	d9e6      	bls.n	8003754 <fifoTxDataCAN3_high_push+0x54>
		}
		_fifoCAN->txHeadHigh = (_fifoCAN->txHeadHigh + 1) % fifoLengthH;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	791b      	ldrb	r3, [r3, #4]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <fifoTxDataCAN3_high_push+0xb4>)
 800378e:	fb83 1302 	smull	r1, r3, r3, r2
 8003792:	1099      	asrs	r1, r3, #2
 8003794:	17d3      	asrs	r3, r2, #31
 8003796:	1ac9      	subs	r1, r1, r3
 8003798:	460b      	mov	r3, r1
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	1ad1      	subs	r1, r2, r3
 80037a2:	b2ca      	uxtb	r2, r1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	711a      	strb	r2, [r3, #4]
		return 1;
 80037a8:	2301      	movs	r3, #1
	}
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc90      	pop	{r4, r7}
 80037b2:	4770      	bx	lr
 80037b4:	66666667 	.word	0x66666667

080037b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037b8:	b5b0      	push	{r4, r5, r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037bc:	f7fc ff18 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037c0:	f000 f8a2 	bl	8003908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037c4:	f000 f9ba 	bl	8003b3c <MX_GPIO_Init>
  MX_CAN1_Init();
 80037c8:	f000 f952 	bl	8003a70 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80037cc:	f000 f986 	bl	8003adc <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80037d0:	f000 f92a 	bl	8003a28 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  can1.rx0_interrupt = CAN1_RX0_IRQn;
 80037d4:	4b42      	ldr	r3, [pc, #264]	; (80038e0 <main+0x128>)
 80037d6:	2214      	movs	r2, #20
 80037d8:	f883 2a30 	strb.w	r2, [r3, #2608]	; 0xa30
  can1.hcan = &hcan1;
 80037dc:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <main+0x128>)
 80037de:	4a41      	ldr	r2, [pc, #260]	; (80038e4 <main+0x12c>)
 80037e0:	621a      	str	r2, [r3, #32]

  can_init();
 80037e2:	f7ff fd25 	bl	8003230 <can_init>

  sprintf(txt,"----------START---------\r\n");
 80037e6:	4a40      	ldr	r2, [pc, #256]	; (80038e8 <main+0x130>)
 80037e8:	4b40      	ldr	r3, [pc, #256]	; (80038ec <main+0x134>)
 80037ea:	4615      	mov	r5, r2
 80037ec:	461c      	mov	r4, r3
 80037ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f0:	6028      	str	r0, [r5, #0]
 80037f2:	6069      	str	r1, [r5, #4]
 80037f4:	60aa      	str	r2, [r5, #8]
 80037f6:	60eb      	str	r3, [r5, #12]
 80037f8:	cc03      	ldmia	r4!, {r0, r1}
 80037fa:	6128      	str	r0, [r5, #16]
 80037fc:	6169      	str	r1, [r5, #20]
 80037fe:	8823      	ldrh	r3, [r4, #0]
 8003800:	78a2      	ldrb	r2, [r4, #2]
 8003802:	832b      	strh	r3, [r5, #24]
 8003804:	4613      	mov	r3, r2
 8003806:	76ab      	strb	r3, [r5, #26]
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 8003808:	4837      	ldr	r0, [pc, #220]	; (80038e8 <main+0x130>)
 800380a:	f7fc fd19 	bl	8000240 <strlen>
 800380e:	4603      	mov	r3, r0
 8003810:	b29a      	uxth	r2, r3
 8003812:	230a      	movs	r3, #10
 8003814:	4934      	ldr	r1, [pc, #208]	; (80038e8 <main+0x130>)
 8003816:	4836      	ldr	r0, [pc, #216]	; (80038f0 <main+0x138>)
 8003818:	f7ff f8ba 	bl	8002990 <HAL_UART_Transmit>
  sprintf(txt,"Config Status: %d\r\n", can1.configFilter_status);
 800381c:	4b30      	ldr	r3, [pc, #192]	; (80038e0 <main+0x128>)
 800381e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003822:	461a      	mov	r2, r3
 8003824:	4933      	ldr	r1, [pc, #204]	; (80038f4 <main+0x13c>)
 8003826:	4830      	ldr	r0, [pc, #192]	; (80038e8 <main+0x130>)
 8003828:	f000 fc64 	bl	80040f4 <siprintf>
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 800382c:	482e      	ldr	r0, [pc, #184]	; (80038e8 <main+0x130>)
 800382e:	f7fc fd07 	bl	8000240 <strlen>
 8003832:	4603      	mov	r3, r0
 8003834:	b29a      	uxth	r2, r3
 8003836:	230a      	movs	r3, #10
 8003838:	492b      	ldr	r1, [pc, #172]	; (80038e8 <main+0x130>)
 800383a:	482d      	ldr	r0, [pc, #180]	; (80038f0 <main+0x138>)
 800383c:	f7ff f8a8 	bl	8002990 <HAL_UART_Transmit>
  sprintf(txt,"CAN Notification %d\r\n", can1.activateNotif_status);
 8003840:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <main+0x128>)
 8003842:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8003846:	461a      	mov	r2, r3
 8003848:	492b      	ldr	r1, [pc, #172]	; (80038f8 <main+0x140>)
 800384a:	4827      	ldr	r0, [pc, #156]	; (80038e8 <main+0x130>)
 800384c:	f000 fc52 	bl	80040f4 <siprintf>
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 8003850:	4825      	ldr	r0, [pc, #148]	; (80038e8 <main+0x130>)
 8003852:	f7fc fcf5 	bl	8000240 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	b29a      	uxth	r2, r3
 800385a:	230a      	movs	r3, #10
 800385c:	4922      	ldr	r1, [pc, #136]	; (80038e8 <main+0x130>)
 800385e:	4824      	ldr	r0, [pc, #144]	; (80038f0 <main+0x138>)
 8003860:	f7ff f896 	bl	8002990 <HAL_UART_Transmit>
  sprintf(txt,"CAN start status: %d\r\n", can1.canStart_status);
 8003864:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <main+0x128>)
 8003866:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800386a:	461a      	mov	r2, r3
 800386c:	4923      	ldr	r1, [pc, #140]	; (80038fc <main+0x144>)
 800386e:	481e      	ldr	r0, [pc, #120]	; (80038e8 <main+0x130>)
 8003870:	f000 fc40 	bl	80040f4 <siprintf>
  HAL_UART_Transmit(&huart3,(uint8_t*)txt, strlen(txt), 10);
 8003874:	481c      	ldr	r0, [pc, #112]	; (80038e8 <main+0x130>)
 8003876:	f7fc fce3 	bl	8000240 <strlen>
 800387a:	4603      	mov	r3, r0
 800387c:	b29a      	uxth	r2, r3
 800387e:	230a      	movs	r3, #10
 8003880:	4919      	ldr	r1, [pc, #100]	; (80038e8 <main+0x130>)
 8003882:	481b      	ldr	r0, [pc, #108]	; (80038f0 <main+0x138>)
 8003884:	f7ff f884 	bl	8002990 <HAL_UART_Transmit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  can3.dataTx[0]=i_debug;
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <main+0x148>)
 800388a:	781a      	ldrb	r2, [r3, #0]
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <main+0x14c>)
 800388e:	711a      	strb	r2, [r3, #4]
	  i_debug++;
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <main+0x148>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	b2da      	uxtb	r2, r3
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <main+0x148>)
 800389a:	701a      	strb	r2, [r3, #0]
	  can3.dataTx[1]=2;
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <main+0x14c>)
 800389e:	2202      	movs	r2, #2
 80038a0:	715a      	strb	r2, [r3, #5]
	  can3.dataTx[2]=3;
 80038a2:	4b18      	ldr	r3, [pc, #96]	; (8003904 <main+0x14c>)
 80038a4:	2203      	movs	r2, #3
 80038a6:	719a      	strb	r2, [r3, #6]
	  can3.dataTx[3]=4;
 80038a8:	4b16      	ldr	r3, [pc, #88]	; (8003904 <main+0x14c>)
 80038aa:	2204      	movs	r2, #4
 80038ac:	71da      	strb	r2, [r3, #7]
	  can3.dataTx[4]=5;
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <main+0x14c>)
 80038b0:	2205      	movs	r2, #5
 80038b2:	721a      	strb	r2, [r3, #8]
	  can3.dataTx[5]=6;
 80038b4:	4b13      	ldr	r3, [pc, #76]	; (8003904 <main+0x14c>)
 80038b6:	2206      	movs	r2, #6
 80038b8:	725a      	strb	r2, [r3, #9]
	  can3.dataTx[6]=7;
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <main+0x14c>)
 80038bc:	2207      	movs	r2, #7
 80038be:	729a      	strb	r2, [r3, #10]
	  can3.dataTx[7]=8;
 80038c0:	4b10      	ldr	r3, [pc, #64]	; (8003904 <main+0x14c>)
 80038c2:	2208      	movs	r2, #8
 80038c4:	72da      	strb	r2, [r3, #11]
	  can3.size = 8;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <main+0x14c>)
 80038c8:	2208      	movs	r2, #8
 80038ca:	601a      	str	r2, [r3, #0]

	  CAN_Send(&can3, 130, normalPriority);
 80038cc:	2200      	movs	r2, #0
 80038ce:	2182      	movs	r1, #130	; 0x82
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <main+0x14c>)
 80038d2:	f7ff fccf 	bl	8003274 <CAN_Send>

	  HAL_Delay(500);
 80038d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038da:	f7fc fee7 	bl	80006ac <HAL_Delay>
	  can3.dataTx[0]=i_debug;
 80038de:	e7d3      	b.n	8003888 <main+0xd0>
 80038e0:	200014b0 	.word	0x200014b0
 80038e4:	20002a24 	.word	0x20002a24
 80038e8:	200028c4 	.word	0x200028c4
 80038ec:	08004950 	.word	0x08004950
 80038f0:	20002928 	.word	0x20002928
 80038f4:	0800496c 	.word	0x0800496c
 80038f8:	08004980 	.word	0x08004980
 80038fc:	08004998 	.word	0x08004998
 8003900:	20002a1e 	.word	0x20002a1e
 8003904:	20000a7c 	.word	0x20000a7c

08003908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b0b8      	sub	sp, #224	; 0xe0
 800390c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800390e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003912:	2234      	movs	r2, #52	; 0x34
 8003914:	2100      	movs	r1, #0
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fbe4 	bl	80040e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800391c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800392c:	f107 0308 	add.w	r3, r7, #8
 8003930:	2290      	movs	r2, #144	; 0x90
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fbd5 	bl	80040e4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800393a:	4b39      	ldr	r3, [pc, #228]	; (8003a20 <SystemClock_Config+0x118>)
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	4a38      	ldr	r2, [pc, #224]	; (8003a20 <SystemClock_Config+0x118>)
 8003940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003944:	6413      	str	r3, [r2, #64]	; 0x40
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <SystemClock_Config+0x118>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394e:	607b      	str	r3, [r7, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <SystemClock_Config+0x11c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a33      	ldr	r2, [pc, #204]	; (8003a24 <SystemClock_Config+0x11c>)
 8003958:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <SystemClock_Config+0x11c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800396a:	2301      	movs	r3, #1
 800396c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003970:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003978:	2302      	movs	r3, #2
 800397a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800397e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003986:	2319      	movs	r3, #25
 8003988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 432;
 800398c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003994:	2302      	movs	r3, #2
 8003996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800399a:	2302      	movs	r3, #2
 800399c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd ff3f 	bl	8001828 <HAL_RCC_OscConfig>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80039b0:	f000 f9ca 	bl	8003d48 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80039b4:	f7fd fee8 	bl	8001788 <HAL_PWREx_EnableOverDrive>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80039be:	f000 f9c3 	bl	8003d48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039c2:	230f      	movs	r3, #15
 80039c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039c8:	2302      	movs	r3, #2
 80039ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80039e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039e8:	2107      	movs	r1, #7
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe f98e 	bl	8001d0c <HAL_RCC_ClockConfig>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80039f6:	f000 f9a7 	bl	8003d48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039fe:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a00:	2300      	movs	r3, #0
 8003a02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fe fb4d 	bl	80020a8 <HAL_RCCEx_PeriphCLKConfig>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003a14:	f000 f998 	bl	8003d48 <Error_Handler>
  }
}
 8003a18:	bf00      	nop
 8003a1a:	37e0      	adds	r7, #224	; 0xe0
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40007000 	.word	0x40007000

08003a28 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2100      	movs	r1, #0
 8003a30:	2016      	movs	r0, #22
 8003a32:	f7fd fc94 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003a36:	2016      	movs	r0, #22
 8003a38:	f7fd fcad 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2100      	movs	r1, #0
 8003a40:	2015      	movs	r0, #21
 8003a42:	f7fd fc8c 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003a46:	2015      	movs	r0, #21
 8003a48:	f7fd fca5 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2100      	movs	r1, #0
 8003a50:	2014      	movs	r0, #20
 8003a52:	f7fd fc84 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003a56:	2014      	movs	r0, #20
 8003a58:	f7fd fc9d 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2013      	movs	r0, #19
 8003a62:	f7fd fc7c 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003a66:	2013      	movs	r0, #19
 8003a68:	f7fd fc95 	bl	8001396 <HAL_NVIC_EnableIRQ>
}
 8003a6c:	bf00      	nop
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003a76:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <MX_CAN1_Init+0x68>)
 8003a78:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003a80:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003a86:	4b13      	ldr	r3, [pc, #76]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003a8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003a92:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003a96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a9a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003a9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003aaa:	2201      	movs	r2, #1
 8003aac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003ac0:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <MX_CAN1_Init+0x64>)
 8003ac2:	f7fc fe15 	bl	80006f0 <HAL_CAN_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003acc:	f000 f93c 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20002a24 	.word	0x20002a24
 8003ad8:	40006400 	.word	0x40006400

08003adc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ae0:	4b14      	ldr	r3, [pc, #80]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003ae2:	4a15      	ldr	r2, [pc, #84]	; (8003b38 <MX_USART3_UART_Init+0x5c>)
 8003ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003aee:	4b11      	ldr	r3, [pc, #68]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b00:	4b0c      	ldr	r3, [pc, #48]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003b02:	220c      	movs	r2, #12
 8003b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b12:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b1e:	4805      	ldr	r0, [pc, #20]	; (8003b34 <MX_USART3_UART_Init+0x58>)
 8003b20:	f7fe fee8 	bl	80028f4 <HAL_UART_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003b2a:	f000 f90d 	bl	8003d48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20002928 	.word	0x20002928
 8003b38:	40004800 	.word	0x40004800

08003b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b42:	f107 030c 	add.w	r3, r7, #12
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b15      	ldr	r3, [pc, #84]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	4a11      	ldr	r2, [pc, #68]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <MX_GPIO_Init+0x90>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	603b      	str	r3, [r7, #0]
 8003b98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8003ba0:	480b      	ldr	r0, [pc, #44]	; (8003bd0 <MX_GPIO_Init+0x94>)
 8003ba2:	f7fd fdbd 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8003ba6:	f244 0381 	movw	r3, #16513	; 0x4081
 8003baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb8:	f107 030c 	add.w	r3, r7, #12
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4804      	ldr	r0, [pc, #16]	; (8003bd0 <MX_GPIO_Init+0x94>)
 8003bc0:	f7fd fc04 	bl	80013cc <HAL_GPIO_Init>

}
 8003bc4:	bf00      	nop
 8003bc6:	3720      	adds	r7, #32
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40020400 	.word	0x40020400

08003bd4 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b088      	sub	sp, #32
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
			}
		}else{
			//TODO: riattivare interrupt
		}
	}else{*/
	HAL_UART_Transmit(&huart3,(uint8_t*)("Messaggio trasmesso\r\n"), strlen("Messaggio trasmesso\r\n"), 10);
 8003bdc:	230a      	movs	r3, #10
 8003bde:	2215      	movs	r2, #21
 8003be0:	492c      	ldr	r1, [pc, #176]	; (8003c94 <HAL_CAN_TxMailbox0CompleteCallback+0xc0>)
 8003be2:	482d      	ldr	r0, [pc, #180]	; (8003c98 <HAL_CAN_TxMailbox0CompleteCallback+0xc4>)
 8003be4:	f7fe fed4 	bl	8002990 <HAL_UART_Transmit>
		//HAL_GPIO_TogglePin(USER_LED_4_GPIO_Port, USER_LED_4_Pin);
		fifoDataType fifodata;
		if(fifoTxDataCAN3_high_pop(&fifoCAN3, &fifodata)){
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	4619      	mov	r1, r3
 8003bee:	482b      	ldr	r0, [pc, #172]	; (8003c9c <HAL_CAN_TxMailbox0CompleteCallback+0xc8>)
 8003bf0:	f7ff fcdc 	bl	80035ac <fifoTxDataCAN3_high_pop>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d019      	beq.n	8003c2e <HAL_CAN_TxMailbox0CompleteCallback+0x5a>
			for(int i = 0; i < 8; i++){
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e00d      	b.n	8003c1c <HAL_CAN_TxMailbox0CompleteCallback+0x48>
				can3.dataTx[i] = fifodata.data[i];
 8003c00:	f107 0210 	add.w	r2, r7, #16
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	4413      	add	r3, r2
 8003c08:	7819      	ldrb	r1, [r3, #0]
 8003c0a:	4a25      	ldr	r2, [pc, #148]	; (8003ca0 <HAL_CAN_TxMailbox0CompleteCallback+0xcc>)
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	4413      	add	r3, r2
 8003c10:	3304      	adds	r3, #4
 8003c12:	460a      	mov	r2, r1
 8003c14:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++){
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	2b07      	cmp	r3, #7
 8003c20:	ddee      	ble.n	8003c00 <HAL_CAN_TxMailbox0CompleteCallback+0x2c>
			}
			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4619      	mov	r1, r3
 8003c26:	481e      	ldr	r0, [pc, #120]	; (8003ca0 <HAL_CAN_TxMailbox0CompleteCallback+0xcc>)
 8003c28:	f7ff fb8e 	bl	8003348 <CAN_Send_IT>
		}else{
			//TODO: riattivare interrupt
			HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
		}
	//}
}
 8003c2c:	e02e      	b.n	8003c8c <HAL_CAN_TxMailbox0CompleteCallback+0xb8>
		}else if(fifoTxDataCAN3_normal_pop(&fifoCAN3, &fifodata)){
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	4619      	mov	r1, r3
 8003c34:	4819      	ldr	r0, [pc, #100]	; (8003c9c <HAL_CAN_TxMailbox0CompleteCallback+0xc8>)
 8003c36:	f7ff fc69 	bl	800350c <fifoTxDataCAN3_normal_pop>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01f      	beq.n	8003c80 <HAL_CAN_TxMailbox0CompleteCallback+0xac>
			HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n"), 10);
 8003c40:	230a      	movs	r3, #10
 8003c42:	2213      	movs	r2, #19
 8003c44:	4917      	ldr	r1, [pc, #92]	; (8003ca4 <HAL_CAN_TxMailbox0CompleteCallback+0xd0>)
 8003c46:	4814      	ldr	r0, [pc, #80]	; (8003c98 <HAL_CAN_TxMailbox0CompleteCallback+0xc4>)
 8003c48:	f7fe fea2 	bl	8002990 <HAL_UART_Transmit>
			for(int i = 0; i < 8; i++){
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	e00d      	b.n	8003c6e <HAL_CAN_TxMailbox0CompleteCallback+0x9a>
				can3.dataTx[i] = fifodata.data[i];
 8003c52:	f107 0210 	add.w	r2, r7, #16
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	4413      	add	r3, r2
 8003c5a:	7819      	ldrb	r1, [r3, #0]
 8003c5c:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_CAN_TxMailbox0CompleteCallback+0xcc>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	4413      	add	r3, r2
 8003c62:	3304      	adds	r3, #4
 8003c64:	460a      	mov	r2, r1
 8003c66:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++){
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2b07      	cmp	r3, #7
 8003c72:	ddee      	ble.n	8003c52 <HAL_CAN_TxMailbox0CompleteCallback+0x7e>
			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4619      	mov	r1, r3
 8003c78:	4809      	ldr	r0, [pc, #36]	; (8003ca0 <HAL_CAN_TxMailbox0CompleteCallback+0xcc>)
 8003c7a:	f7ff fb65 	bl	8003348 <CAN_Send_IT>
}
 8003c7e:	e005      	b.n	8003c8c <HAL_CAN_TxMailbox0CompleteCallback+0xb8>
			HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 8003c80:	230a      	movs	r3, #10
 8003c82:	220c      	movs	r2, #12
 8003c84:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <HAL_CAN_TxMailbox0CompleteCallback+0xd4>)
 8003c86:	4804      	ldr	r0, [pc, #16]	; (8003c98 <HAL_CAN_TxMailbox0CompleteCallback+0xc4>)
 8003c88:	f7fe fe82 	bl	8002990 <HAL_UART_Transmit>
}
 8003c8c:	bf00      	nop
 8003c8e:	3720      	adds	r7, #32
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	080049b0 	.word	0x080049b0
 8003c98:	20002928 	.word	0x20002928
 8003c9c:	2000009c 	.word	0x2000009c
 8003ca0:	20000a7c 	.word	0x20000a7c
 8003ca4:	080049c8 	.word	0x080049c8
 8003ca8:	080049dc 	.word	0x080049dc

08003cac <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)("Mailbox 1\r\n"), strlen("Mailbox 1\r\n"), 10);
 8003cb4:	230a      	movs	r3, #10
 8003cb6:	220b      	movs	r2, #11
 8003cb8:	4903      	ldr	r1, [pc, #12]	; (8003cc8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8003cba:	4804      	ldr	r0, [pc, #16]	; (8003ccc <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8003cbc:	f7fe fe68 	bl	8002990 <HAL_UART_Transmit>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	080049ec 	.word	0x080049ec
 8003ccc:	20002928 	.word	0x20002928

08003cd0 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)("Mailbox 2\r\n"), strlen("Mailbox 2\r\n"), 10);
 8003cd8:	230a      	movs	r3, #10
 8003cda:	220b      	movs	r2, #11
 8003cdc:	4903      	ldr	r1, [pc, #12]	; (8003cec <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8003cde:	4804      	ldr	r0, [pc, #16]	; (8003cf0 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8003ce0:	f7fe fe56 	bl	8002990 <HAL_UART_Transmit>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	080049f8 	.word	0x080049f8
 8003cf0:	20002928 	.word	0x20002928

08003cf4 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	sprintf(txt,"--- Errore ---: %d\r\n",(int)hcan->ErrorCode);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	461a      	mov	r2, r3
 8003d02:	490c      	ldr	r1, [pc, #48]	; (8003d34 <HAL_CAN_ErrorCallback+0x40>)
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <HAL_CAN_ErrorCallback+0x44>)
 8003d06:	f000 f9f5 	bl	80040f4 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 8003d0a:	480b      	ldr	r0, [pc, #44]	; (8003d38 <HAL_CAN_ErrorCallback+0x44>)
 8003d0c:	f7fc fa98 	bl	8000240 <strlen>
 8003d10:	4603      	mov	r3, r0
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	230a      	movs	r3, #10
 8003d16:	4908      	ldr	r1, [pc, #32]	; (8003d38 <HAL_CAN_ErrorCallback+0x44>)
 8003d18:	4808      	ldr	r0, [pc, #32]	; (8003d3c <HAL_CAN_ErrorCallback+0x48>)
 8003d1a:	f7fe fe39 	bl	8002990 <HAL_UART_Transmit>
	if(hcan == &hcan1){
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a07      	ldr	r2, [pc, #28]	; (8003d40 <HAL_CAN_ErrorCallback+0x4c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d102      	bne.n	8003d2c <HAL_CAN_ErrorCallback+0x38>
		CAN_Send_Bck(&can1);
 8003d26:	4807      	ldr	r0, [pc, #28]	; (8003d44 <HAL_CAN_ErrorCallback+0x50>)
 8003d28:	f7ff fb4d 	bl	80033c6 <CAN_Send_Bck>
	}
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	08004a04 	.word	0x08004a04
 8003d38:	200028c4 	.word	0x200028c4
 8003d3c:	20002928 	.word	0x20002928
 8003d40:	20002a24 	.word	0x20002a24
 8003d44:	200014b0 	.word	0x200014b0

08003d48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	HAL_GPIO_TogglePin(USER_LED_1_GPIO_Port, USER_LED_1_Pin);
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4808      	ldr	r0, [pc, #32]	; (8003d70 <Error_Handler+0x28>)
 8003d50:	f7fd fcff 	bl	8001752 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(USER_LED_2_GPIO_Port, USER_LED_2_Pin);
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	4806      	ldr	r0, [pc, #24]	; (8003d70 <Error_Handler+0x28>)
 8003d58:	f7fd fcfb 	bl	8001752 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(USER_LED_3_GPIO_Port, USER_LED_3_Pin);
 8003d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d60:	4803      	ldr	r0, [pc, #12]	; (8003d70 <Error_Handler+0x28>)
 8003d62:	f7fd fcf6 	bl	8001752 <HAL_GPIO_TogglePin>

	HAL_Delay(100);
 8003d66:	2064      	movs	r0, #100	; 0x64
 8003d68:	f7fc fca0 	bl	80006ac <HAL_Delay>

  /* USER CODE END Error_Handler_Debug */
}
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40020400 	.word	0x40020400

08003d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_MspInit+0x44>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <HAL_MspInit+0x44>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_MspInit+0x44>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	607b      	str	r3, [r7, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_MspInit+0x44>)
 8003d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <HAL_MspInit+0x44>)
 8003d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_MspInit+0x44>)
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800

08003dbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a17      	ldr	r2, [pc, #92]	; (8003e38 <HAL_CAN_MspInit+0x7c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d128      	bne.n	8003e30 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <HAL_CAN_MspInit+0x80>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_CAN_MspInit+0x80>)
 8003de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003de8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_CAN_MspInit+0x80>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_CAN_MspInit+0x80>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_CAN_MspInit+0x80>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6313      	str	r3, [r2, #48]	; 0x30
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_CAN_MspInit+0x80>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003e0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e14:	2302      	movs	r3, #2
 8003e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003e20:	2309      	movs	r3, #9
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e24:	f107 0314 	add.w	r3, r7, #20
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4805      	ldr	r0, [pc, #20]	; (8003e40 <HAL_CAN_MspInit+0x84>)
 8003e2c:	f7fd face 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003e30:	bf00      	nop
 8003e32:	3728      	adds	r7, #40	; 0x28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40006400 	.word	0x40006400
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40020000 	.word	0x40020000

08003e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <HAL_UART_MspInit+0x7c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d128      	bne.n	8003eb8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4805      	ldr	r0, [pc, #20]	; (8003ec8 <HAL_UART_MspInit+0x84>)
 8003eb4:	f7fd fa8a 	bl	80013cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003eb8:	bf00      	nop
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40004800 	.word	0x40004800
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020400 	.word	0x40020400

08003ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <HardFault_Handler+0x4>

08003ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <MemManage_Handler+0x4>

08003ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <BusFault_Handler+0x4>

08003eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <UsageFault_Handler+0x4>

08003ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ef6:	bf00      	nop
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f20:	f7fc fba4 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f24:	bf00      	nop
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f2c:	4802      	ldr	r0, [pc, #8]	; (8003f38 <CAN1_TX_IRQHandler+0x10>)
 8003f2e:	f7fc ff30 	bl	8000d92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20002a24 	.word	0x20002a24

08003f3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f40:	4802      	ldr	r0, [pc, #8]	; (8003f4c <CAN1_RX0_IRQHandler+0x10>)
 8003f42:	f7fc ff26 	bl	8000d92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20002a24 	.word	0x20002a24

08003f50 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f54:	4802      	ldr	r0, [pc, #8]	; (8003f60 <CAN1_RX1_IRQHandler+0x10>)
 8003f56:	f7fc ff1c 	bl	8000d92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20002a24 	.word	0x20002a24

08003f64 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003f68:	4802      	ldr	r0, [pc, #8]	; (8003f74 <CAN1_SCE_IRQHandler+0x10>)
 8003f6a:	f7fc ff12 	bl	8000d92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20002a24 	.word	0x20002a24

08003f78 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <_sbrk+0x50>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <_sbrk+0x16>
		heap_end = &end;
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <_sbrk+0x50>)
 8003f8a:	4a10      	ldr	r2, [pc, #64]	; (8003fcc <_sbrk+0x54>)
 8003f8c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	; (8003fc8 <_sbrk+0x50>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <_sbrk+0x50>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	466a      	mov	r2, sp
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d907      	bls.n	8003fb2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003fa2:	f000 f875 	bl	8004090 <__errno>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	230c      	movs	r3, #12
 8003faa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fb0:	e006      	b.n	8003fc0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <_sbrk+0x50>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	4a03      	ldr	r2, [pc, #12]	; (8003fc8 <_sbrk+0x50>)
 8003fbc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	2000008c 	.word	0x2000008c
 8003fcc:	20002a50 	.word	0x20002a50

08003fd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003fd4:	4b15      	ldr	r3, [pc, #84]	; (800402c <SystemInit+0x5c>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	4a14      	ldr	r2, [pc, #80]	; (800402c <SystemInit+0x5c>)
 8003fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003fe4:	4b12      	ldr	r3, [pc, #72]	; (8004030 <SystemInit+0x60>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a11      	ldr	r2, [pc, #68]	; (8004030 <SystemInit+0x60>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ff0:	4b0f      	ldr	r3, [pc, #60]	; (8004030 <SystemInit+0x60>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	; (8004030 <SystemInit+0x60>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	490d      	ldr	r1, [pc, #52]	; (8004030 <SystemInit+0x60>)
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <SystemInit+0x64>)
 8003ffe:	4013      	ands	r3, r2
 8004000:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004002:	4b0b      	ldr	r3, [pc, #44]	; (8004030 <SystemInit+0x60>)
 8004004:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <SystemInit+0x68>)
 8004006:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <SystemInit+0x60>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a08      	ldr	r2, [pc, #32]	; (8004030 <SystemInit+0x60>)
 800400e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004012:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <SystemInit+0x60>)
 8004016:	2200      	movs	r2, #0
 8004018:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800401a:	4b04      	ldr	r3, [pc, #16]	; (800402c <SystemInit+0x5c>)
 800401c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004020:	609a      	str	r2, [r3, #8]
#endif
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	e000ed00 	.word	0xe000ed00
 8004030:	40023800 	.word	0x40023800
 8004034:	fef6ffff 	.word	0xfef6ffff
 8004038:	24003010 	.word	0x24003010

0800403c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800403c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004074 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004040:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004042:	e003      	b.n	800404c <LoopCopyDataInit>

08004044 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004046:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004048:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800404a:	3104      	adds	r1, #4

0800404c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800404c:	480b      	ldr	r0, [pc, #44]	; (800407c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004050:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004052:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004054:	d3f6      	bcc.n	8004044 <CopyDataInit>
  ldr  r2, =_sbss
 8004056:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004058:	e002      	b.n	8004060 <LoopFillZerobss>

0800405a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800405a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800405c:	f842 3b04 	str.w	r3, [r2], #4

08004060 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004062:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004064:	d3f9      	bcc.n	800405a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004066:	f7ff ffb3 	bl	8003fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800406a:	f000 f817 	bl	800409c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800406e:	f7ff fba3 	bl	80037b8 <main>
  bx  lr    
 8004072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004074:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004078:	08004a78 	.word	0x08004a78
  ldr  r0, =_sdata
 800407c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004080:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004084:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004088:	20002a50 	.word	0x20002a50

0800408c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800408c:	e7fe      	b.n	800408c <ADC_IRQHandler>
	...

08004090 <__errno>:
 8004090:	4b01      	ldr	r3, [pc, #4]	; (8004098 <__errno+0x8>)
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	2000000c 	.word	0x2000000c

0800409c <__libc_init_array>:
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4e0d      	ldr	r6, [pc, #52]	; (80040d4 <__libc_init_array+0x38>)
 80040a0:	4c0d      	ldr	r4, [pc, #52]	; (80040d8 <__libc_init_array+0x3c>)
 80040a2:	1ba4      	subs	r4, r4, r6
 80040a4:	10a4      	asrs	r4, r4, #2
 80040a6:	2500      	movs	r5, #0
 80040a8:	42a5      	cmp	r5, r4
 80040aa:	d109      	bne.n	80040c0 <__libc_init_array+0x24>
 80040ac:	4e0b      	ldr	r6, [pc, #44]	; (80040dc <__libc_init_array+0x40>)
 80040ae:	4c0c      	ldr	r4, [pc, #48]	; (80040e0 <__libc_init_array+0x44>)
 80040b0:	f000 fc26 	bl	8004900 <_init>
 80040b4:	1ba4      	subs	r4, r4, r6
 80040b6:	10a4      	asrs	r4, r4, #2
 80040b8:	2500      	movs	r5, #0
 80040ba:	42a5      	cmp	r5, r4
 80040bc:	d105      	bne.n	80040ca <__libc_init_array+0x2e>
 80040be:	bd70      	pop	{r4, r5, r6, pc}
 80040c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040c4:	4798      	blx	r3
 80040c6:	3501      	adds	r5, #1
 80040c8:	e7ee      	b.n	80040a8 <__libc_init_array+0xc>
 80040ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040ce:	4798      	blx	r3
 80040d0:	3501      	adds	r5, #1
 80040d2:	e7f2      	b.n	80040ba <__libc_init_array+0x1e>
 80040d4:	08004a70 	.word	0x08004a70
 80040d8:	08004a70 	.word	0x08004a70
 80040dc:	08004a70 	.word	0x08004a70
 80040e0:	08004a74 	.word	0x08004a74

080040e4 <memset>:
 80040e4:	4402      	add	r2, r0
 80040e6:	4603      	mov	r3, r0
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d100      	bne.n	80040ee <memset+0xa>
 80040ec:	4770      	bx	lr
 80040ee:	f803 1b01 	strb.w	r1, [r3], #1
 80040f2:	e7f9      	b.n	80040e8 <memset+0x4>

080040f4 <siprintf>:
 80040f4:	b40e      	push	{r1, r2, r3}
 80040f6:	b500      	push	{lr}
 80040f8:	b09c      	sub	sp, #112	; 0x70
 80040fa:	ab1d      	add	r3, sp, #116	; 0x74
 80040fc:	9002      	str	r0, [sp, #8]
 80040fe:	9006      	str	r0, [sp, #24]
 8004100:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004104:	4809      	ldr	r0, [pc, #36]	; (800412c <siprintf+0x38>)
 8004106:	9107      	str	r1, [sp, #28]
 8004108:	9104      	str	r1, [sp, #16]
 800410a:	4909      	ldr	r1, [pc, #36]	; (8004130 <siprintf+0x3c>)
 800410c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004110:	9105      	str	r1, [sp, #20]
 8004112:	6800      	ldr	r0, [r0, #0]
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	a902      	add	r1, sp, #8
 8004118:	f000 f866 	bl	80041e8 <_svfiprintf_r>
 800411c:	9b02      	ldr	r3, [sp, #8]
 800411e:	2200      	movs	r2, #0
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	b01c      	add	sp, #112	; 0x70
 8004124:	f85d eb04 	ldr.w	lr, [sp], #4
 8004128:	b003      	add	sp, #12
 800412a:	4770      	bx	lr
 800412c:	2000000c 	.word	0x2000000c
 8004130:	ffff0208 	.word	0xffff0208

08004134 <__ssputs_r>:
 8004134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	688e      	ldr	r6, [r1, #8]
 800413a:	429e      	cmp	r6, r3
 800413c:	4682      	mov	sl, r0
 800413e:	460c      	mov	r4, r1
 8004140:	4690      	mov	r8, r2
 8004142:	4699      	mov	r9, r3
 8004144:	d837      	bhi.n	80041b6 <__ssputs_r+0x82>
 8004146:	898a      	ldrh	r2, [r1, #12]
 8004148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800414c:	d031      	beq.n	80041b2 <__ssputs_r+0x7e>
 800414e:	6825      	ldr	r5, [r4, #0]
 8004150:	6909      	ldr	r1, [r1, #16]
 8004152:	1a6f      	subs	r7, r5, r1
 8004154:	6965      	ldr	r5, [r4, #20]
 8004156:	2302      	movs	r3, #2
 8004158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800415c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004160:	f109 0301 	add.w	r3, r9, #1
 8004164:	443b      	add	r3, r7
 8004166:	429d      	cmp	r5, r3
 8004168:	bf38      	it	cc
 800416a:	461d      	movcc	r5, r3
 800416c:	0553      	lsls	r3, r2, #21
 800416e:	d530      	bpl.n	80041d2 <__ssputs_r+0x9e>
 8004170:	4629      	mov	r1, r5
 8004172:	f000 fb2b 	bl	80047cc <_malloc_r>
 8004176:	4606      	mov	r6, r0
 8004178:	b950      	cbnz	r0, 8004190 <__ssputs_r+0x5c>
 800417a:	230c      	movs	r3, #12
 800417c:	f8ca 3000 	str.w	r3, [sl]
 8004180:	89a3      	ldrh	r3, [r4, #12]
 8004182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800418c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004190:	463a      	mov	r2, r7
 8004192:	6921      	ldr	r1, [r4, #16]
 8004194:	f000 faa8 	bl	80046e8 <memcpy>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800419e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	6126      	str	r6, [r4, #16]
 80041a6:	6165      	str	r5, [r4, #20]
 80041a8:	443e      	add	r6, r7
 80041aa:	1bed      	subs	r5, r5, r7
 80041ac:	6026      	str	r6, [r4, #0]
 80041ae:	60a5      	str	r5, [r4, #8]
 80041b0:	464e      	mov	r6, r9
 80041b2:	454e      	cmp	r6, r9
 80041b4:	d900      	bls.n	80041b8 <__ssputs_r+0x84>
 80041b6:	464e      	mov	r6, r9
 80041b8:	4632      	mov	r2, r6
 80041ba:	4641      	mov	r1, r8
 80041bc:	6820      	ldr	r0, [r4, #0]
 80041be:	f000 fa9e 	bl	80046fe <memmove>
 80041c2:	68a3      	ldr	r3, [r4, #8]
 80041c4:	1b9b      	subs	r3, r3, r6
 80041c6:	60a3      	str	r3, [r4, #8]
 80041c8:	6823      	ldr	r3, [r4, #0]
 80041ca:	441e      	add	r6, r3
 80041cc:	6026      	str	r6, [r4, #0]
 80041ce:	2000      	movs	r0, #0
 80041d0:	e7dc      	b.n	800418c <__ssputs_r+0x58>
 80041d2:	462a      	mov	r2, r5
 80041d4:	f000 fb54 	bl	8004880 <_realloc_r>
 80041d8:	4606      	mov	r6, r0
 80041da:	2800      	cmp	r0, #0
 80041dc:	d1e2      	bne.n	80041a4 <__ssputs_r+0x70>
 80041de:	6921      	ldr	r1, [r4, #16]
 80041e0:	4650      	mov	r0, sl
 80041e2:	f000 faa5 	bl	8004730 <_free_r>
 80041e6:	e7c8      	b.n	800417a <__ssputs_r+0x46>

080041e8 <_svfiprintf_r>:
 80041e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ec:	461d      	mov	r5, r3
 80041ee:	898b      	ldrh	r3, [r1, #12]
 80041f0:	061f      	lsls	r7, r3, #24
 80041f2:	b09d      	sub	sp, #116	; 0x74
 80041f4:	4680      	mov	r8, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	4616      	mov	r6, r2
 80041fa:	d50f      	bpl.n	800421c <_svfiprintf_r+0x34>
 80041fc:	690b      	ldr	r3, [r1, #16]
 80041fe:	b96b      	cbnz	r3, 800421c <_svfiprintf_r+0x34>
 8004200:	2140      	movs	r1, #64	; 0x40
 8004202:	f000 fae3 	bl	80047cc <_malloc_r>
 8004206:	6020      	str	r0, [r4, #0]
 8004208:	6120      	str	r0, [r4, #16]
 800420a:	b928      	cbnz	r0, 8004218 <_svfiprintf_r+0x30>
 800420c:	230c      	movs	r3, #12
 800420e:	f8c8 3000 	str.w	r3, [r8]
 8004212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004216:	e0c8      	b.n	80043aa <_svfiprintf_r+0x1c2>
 8004218:	2340      	movs	r3, #64	; 0x40
 800421a:	6163      	str	r3, [r4, #20]
 800421c:	2300      	movs	r3, #0
 800421e:	9309      	str	r3, [sp, #36]	; 0x24
 8004220:	2320      	movs	r3, #32
 8004222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004226:	2330      	movs	r3, #48	; 0x30
 8004228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800422c:	9503      	str	r5, [sp, #12]
 800422e:	f04f 0b01 	mov.w	fp, #1
 8004232:	4637      	mov	r7, r6
 8004234:	463d      	mov	r5, r7
 8004236:	f815 3b01 	ldrb.w	r3, [r5], #1
 800423a:	b10b      	cbz	r3, 8004240 <_svfiprintf_r+0x58>
 800423c:	2b25      	cmp	r3, #37	; 0x25
 800423e:	d13e      	bne.n	80042be <_svfiprintf_r+0xd6>
 8004240:	ebb7 0a06 	subs.w	sl, r7, r6
 8004244:	d00b      	beq.n	800425e <_svfiprintf_r+0x76>
 8004246:	4653      	mov	r3, sl
 8004248:	4632      	mov	r2, r6
 800424a:	4621      	mov	r1, r4
 800424c:	4640      	mov	r0, r8
 800424e:	f7ff ff71 	bl	8004134 <__ssputs_r>
 8004252:	3001      	adds	r0, #1
 8004254:	f000 80a4 	beq.w	80043a0 <_svfiprintf_r+0x1b8>
 8004258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800425a:	4453      	add	r3, sl
 800425c:	9309      	str	r3, [sp, #36]	; 0x24
 800425e:	783b      	ldrb	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 809d 	beq.w	80043a0 <_svfiprintf_r+0x1b8>
 8004266:	2300      	movs	r3, #0
 8004268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800426c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004270:	9304      	str	r3, [sp, #16]
 8004272:	9307      	str	r3, [sp, #28]
 8004274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004278:	931a      	str	r3, [sp, #104]	; 0x68
 800427a:	462f      	mov	r7, r5
 800427c:	2205      	movs	r2, #5
 800427e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004282:	4850      	ldr	r0, [pc, #320]	; (80043c4 <_svfiprintf_r+0x1dc>)
 8004284:	f7fb ffe4 	bl	8000250 <memchr>
 8004288:	9b04      	ldr	r3, [sp, #16]
 800428a:	b9d0      	cbnz	r0, 80042c2 <_svfiprintf_r+0xda>
 800428c:	06d9      	lsls	r1, r3, #27
 800428e:	bf44      	itt	mi
 8004290:	2220      	movmi	r2, #32
 8004292:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004296:	071a      	lsls	r2, r3, #28
 8004298:	bf44      	itt	mi
 800429a:	222b      	movmi	r2, #43	; 0x2b
 800429c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042a0:	782a      	ldrb	r2, [r5, #0]
 80042a2:	2a2a      	cmp	r2, #42	; 0x2a
 80042a4:	d015      	beq.n	80042d2 <_svfiprintf_r+0xea>
 80042a6:	9a07      	ldr	r2, [sp, #28]
 80042a8:	462f      	mov	r7, r5
 80042aa:	2000      	movs	r0, #0
 80042ac:	250a      	movs	r5, #10
 80042ae:	4639      	mov	r1, r7
 80042b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042b4:	3b30      	subs	r3, #48	; 0x30
 80042b6:	2b09      	cmp	r3, #9
 80042b8:	d94d      	bls.n	8004356 <_svfiprintf_r+0x16e>
 80042ba:	b1b8      	cbz	r0, 80042ec <_svfiprintf_r+0x104>
 80042bc:	e00f      	b.n	80042de <_svfiprintf_r+0xf6>
 80042be:	462f      	mov	r7, r5
 80042c0:	e7b8      	b.n	8004234 <_svfiprintf_r+0x4c>
 80042c2:	4a40      	ldr	r2, [pc, #256]	; (80043c4 <_svfiprintf_r+0x1dc>)
 80042c4:	1a80      	subs	r0, r0, r2
 80042c6:	fa0b f000 	lsl.w	r0, fp, r0
 80042ca:	4318      	orrs	r0, r3
 80042cc:	9004      	str	r0, [sp, #16]
 80042ce:	463d      	mov	r5, r7
 80042d0:	e7d3      	b.n	800427a <_svfiprintf_r+0x92>
 80042d2:	9a03      	ldr	r2, [sp, #12]
 80042d4:	1d11      	adds	r1, r2, #4
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	9103      	str	r1, [sp, #12]
 80042da:	2a00      	cmp	r2, #0
 80042dc:	db01      	blt.n	80042e2 <_svfiprintf_r+0xfa>
 80042de:	9207      	str	r2, [sp, #28]
 80042e0:	e004      	b.n	80042ec <_svfiprintf_r+0x104>
 80042e2:	4252      	negs	r2, r2
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	9207      	str	r2, [sp, #28]
 80042ea:	9304      	str	r3, [sp, #16]
 80042ec:	783b      	ldrb	r3, [r7, #0]
 80042ee:	2b2e      	cmp	r3, #46	; 0x2e
 80042f0:	d10c      	bne.n	800430c <_svfiprintf_r+0x124>
 80042f2:	787b      	ldrb	r3, [r7, #1]
 80042f4:	2b2a      	cmp	r3, #42	; 0x2a
 80042f6:	d133      	bne.n	8004360 <_svfiprintf_r+0x178>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9203      	str	r2, [sp, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfb8      	it	lt
 8004304:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004308:	3702      	adds	r7, #2
 800430a:	9305      	str	r3, [sp, #20]
 800430c:	4d2e      	ldr	r5, [pc, #184]	; (80043c8 <_svfiprintf_r+0x1e0>)
 800430e:	7839      	ldrb	r1, [r7, #0]
 8004310:	2203      	movs	r2, #3
 8004312:	4628      	mov	r0, r5
 8004314:	f7fb ff9c 	bl	8000250 <memchr>
 8004318:	b138      	cbz	r0, 800432a <_svfiprintf_r+0x142>
 800431a:	2340      	movs	r3, #64	; 0x40
 800431c:	1b40      	subs	r0, r0, r5
 800431e:	fa03 f000 	lsl.w	r0, r3, r0
 8004322:	9b04      	ldr	r3, [sp, #16]
 8004324:	4303      	orrs	r3, r0
 8004326:	3701      	adds	r7, #1
 8004328:	9304      	str	r3, [sp, #16]
 800432a:	7839      	ldrb	r1, [r7, #0]
 800432c:	4827      	ldr	r0, [pc, #156]	; (80043cc <_svfiprintf_r+0x1e4>)
 800432e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004332:	2206      	movs	r2, #6
 8004334:	1c7e      	adds	r6, r7, #1
 8004336:	f7fb ff8b 	bl	8000250 <memchr>
 800433a:	2800      	cmp	r0, #0
 800433c:	d038      	beq.n	80043b0 <_svfiprintf_r+0x1c8>
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <_svfiprintf_r+0x1e8>)
 8004340:	bb13      	cbnz	r3, 8004388 <_svfiprintf_r+0x1a0>
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	3307      	adds	r3, #7
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	3308      	adds	r3, #8
 800434c:	9303      	str	r3, [sp, #12]
 800434e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004350:	444b      	add	r3, r9
 8004352:	9309      	str	r3, [sp, #36]	; 0x24
 8004354:	e76d      	b.n	8004232 <_svfiprintf_r+0x4a>
 8004356:	fb05 3202 	mla	r2, r5, r2, r3
 800435a:	2001      	movs	r0, #1
 800435c:	460f      	mov	r7, r1
 800435e:	e7a6      	b.n	80042ae <_svfiprintf_r+0xc6>
 8004360:	2300      	movs	r3, #0
 8004362:	3701      	adds	r7, #1
 8004364:	9305      	str	r3, [sp, #20]
 8004366:	4619      	mov	r1, r3
 8004368:	250a      	movs	r5, #10
 800436a:	4638      	mov	r0, r7
 800436c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004370:	3a30      	subs	r2, #48	; 0x30
 8004372:	2a09      	cmp	r2, #9
 8004374:	d903      	bls.n	800437e <_svfiprintf_r+0x196>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0c8      	beq.n	800430c <_svfiprintf_r+0x124>
 800437a:	9105      	str	r1, [sp, #20]
 800437c:	e7c6      	b.n	800430c <_svfiprintf_r+0x124>
 800437e:	fb05 2101 	mla	r1, r5, r1, r2
 8004382:	2301      	movs	r3, #1
 8004384:	4607      	mov	r7, r0
 8004386:	e7f0      	b.n	800436a <_svfiprintf_r+0x182>
 8004388:	ab03      	add	r3, sp, #12
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4622      	mov	r2, r4
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <_svfiprintf_r+0x1ec>)
 8004390:	a904      	add	r1, sp, #16
 8004392:	4640      	mov	r0, r8
 8004394:	f3af 8000 	nop.w
 8004398:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800439c:	4681      	mov	r9, r0
 800439e:	d1d6      	bne.n	800434e <_svfiprintf_r+0x166>
 80043a0:	89a3      	ldrh	r3, [r4, #12]
 80043a2:	065b      	lsls	r3, r3, #25
 80043a4:	f53f af35 	bmi.w	8004212 <_svfiprintf_r+0x2a>
 80043a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043aa:	b01d      	add	sp, #116	; 0x74
 80043ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b0:	ab03      	add	r3, sp, #12
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4622      	mov	r2, r4
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <_svfiprintf_r+0x1ec>)
 80043b8:	a904      	add	r1, sp, #16
 80043ba:	4640      	mov	r0, r8
 80043bc:	f000 f882 	bl	80044c4 <_printf_i>
 80043c0:	e7ea      	b.n	8004398 <_svfiprintf_r+0x1b0>
 80043c2:	bf00      	nop
 80043c4:	08004a34 	.word	0x08004a34
 80043c8:	08004a3a 	.word	0x08004a3a
 80043cc:	08004a3e 	.word	0x08004a3e
 80043d0:	00000000 	.word	0x00000000
 80043d4:	08004135 	.word	0x08004135

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4691      	mov	r9, r2
 80043de:	461f      	mov	r7, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	f8c9 3000 	str.w	r3, [r9]
 80043f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f6:	4606      	mov	r6, r0
 80043f8:	460c      	mov	r4, r1
 80043fa:	b112      	cbz	r2, 8004402 <_printf_common+0x2a>
 80043fc:	3301      	adds	r3, #1
 80043fe:	f8c9 3000 	str.w	r3, [r9]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0699      	lsls	r1, r3, #26
 8004406:	bf42      	ittt	mi
 8004408:	f8d9 3000 	ldrmi.w	r3, [r9]
 800440c:	3302      	addmi	r3, #2
 800440e:	f8c9 3000 	strmi.w	r3, [r9]
 8004412:	6825      	ldr	r5, [r4, #0]
 8004414:	f015 0506 	ands.w	r5, r5, #6
 8004418:	d107      	bne.n	800442a <_printf_common+0x52>
 800441a:	f104 0a19 	add.w	sl, r4, #25
 800441e:	68e3      	ldr	r3, [r4, #12]
 8004420:	f8d9 2000 	ldr.w	r2, [r9]
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	42ab      	cmp	r3, r5
 8004428:	dc28      	bgt.n	800447c <_printf_common+0xa4>
 800442a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	3300      	adds	r3, #0
 8004432:	bf18      	it	ne
 8004434:	2301      	movne	r3, #1
 8004436:	0692      	lsls	r2, r2, #26
 8004438:	d42d      	bmi.n	8004496 <_printf_common+0xbe>
 800443a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800443e:	4639      	mov	r1, r7
 8004440:	4630      	mov	r0, r6
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d020      	beq.n	800448a <_printf_common+0xb2>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	68e5      	ldr	r5, [r4, #12]
 800444c:	f8d9 2000 	ldr.w	r2, [r9]
 8004450:	f003 0306 	and.w	r3, r3, #6
 8004454:	2b04      	cmp	r3, #4
 8004456:	bf08      	it	eq
 8004458:	1aad      	subeq	r5, r5, r2
 800445a:	68a3      	ldr	r3, [r4, #8]
 800445c:	6922      	ldr	r2, [r4, #16]
 800445e:	bf0c      	ite	eq
 8004460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004464:	2500      	movne	r5, #0
 8004466:	4293      	cmp	r3, r2
 8004468:	bfc4      	itt	gt
 800446a:	1a9b      	subgt	r3, r3, r2
 800446c:	18ed      	addgt	r5, r5, r3
 800446e:	f04f 0900 	mov.w	r9, #0
 8004472:	341a      	adds	r4, #26
 8004474:	454d      	cmp	r5, r9
 8004476:	d11a      	bne.n	80044ae <_printf_common+0xd6>
 8004478:	2000      	movs	r0, #0
 800447a:	e008      	b.n	800448e <_printf_common+0xb6>
 800447c:	2301      	movs	r3, #1
 800447e:	4652      	mov	r2, sl
 8004480:	4639      	mov	r1, r7
 8004482:	4630      	mov	r0, r6
 8004484:	47c0      	blx	r8
 8004486:	3001      	adds	r0, #1
 8004488:	d103      	bne.n	8004492 <_printf_common+0xba>
 800448a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800448e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004492:	3501      	adds	r5, #1
 8004494:	e7c3      	b.n	800441e <_printf_common+0x46>
 8004496:	18e1      	adds	r1, r4, r3
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	2030      	movs	r0, #48	; 0x30
 800449c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a0:	4422      	add	r2, r4
 80044a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044aa:	3302      	adds	r3, #2
 80044ac:	e7c5      	b.n	800443a <_printf_common+0x62>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4622      	mov	r2, r4
 80044b2:	4639      	mov	r1, r7
 80044b4:	4630      	mov	r0, r6
 80044b6:	47c0      	blx	r8
 80044b8:	3001      	adds	r0, #1
 80044ba:	d0e6      	beq.n	800448a <_printf_common+0xb2>
 80044bc:	f109 0901 	add.w	r9, r9, #1
 80044c0:	e7d8      	b.n	8004474 <_printf_common+0x9c>
	...

080044c4 <_printf_i>:
 80044c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044cc:	460c      	mov	r4, r1
 80044ce:	7e09      	ldrb	r1, [r1, #24]
 80044d0:	b085      	sub	sp, #20
 80044d2:	296e      	cmp	r1, #110	; 0x6e
 80044d4:	4617      	mov	r7, r2
 80044d6:	4606      	mov	r6, r0
 80044d8:	4698      	mov	r8, r3
 80044da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044dc:	f000 80b3 	beq.w	8004646 <_printf_i+0x182>
 80044e0:	d822      	bhi.n	8004528 <_printf_i+0x64>
 80044e2:	2963      	cmp	r1, #99	; 0x63
 80044e4:	d036      	beq.n	8004554 <_printf_i+0x90>
 80044e6:	d80a      	bhi.n	80044fe <_printf_i+0x3a>
 80044e8:	2900      	cmp	r1, #0
 80044ea:	f000 80b9 	beq.w	8004660 <_printf_i+0x19c>
 80044ee:	2958      	cmp	r1, #88	; 0x58
 80044f0:	f000 8083 	beq.w	80045fa <_printf_i+0x136>
 80044f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044fc:	e032      	b.n	8004564 <_printf_i+0xa0>
 80044fe:	2964      	cmp	r1, #100	; 0x64
 8004500:	d001      	beq.n	8004506 <_printf_i+0x42>
 8004502:	2969      	cmp	r1, #105	; 0x69
 8004504:	d1f6      	bne.n	80044f4 <_printf_i+0x30>
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	6813      	ldr	r3, [r2, #0]
 800450a:	0605      	lsls	r5, r0, #24
 800450c:	f103 0104 	add.w	r1, r3, #4
 8004510:	d52a      	bpl.n	8004568 <_printf_i+0xa4>
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	da03      	bge.n	8004522 <_printf_i+0x5e>
 800451a:	222d      	movs	r2, #45	; 0x2d
 800451c:	425b      	negs	r3, r3
 800451e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004522:	486f      	ldr	r0, [pc, #444]	; (80046e0 <_printf_i+0x21c>)
 8004524:	220a      	movs	r2, #10
 8004526:	e039      	b.n	800459c <_printf_i+0xd8>
 8004528:	2973      	cmp	r1, #115	; 0x73
 800452a:	f000 809d 	beq.w	8004668 <_printf_i+0x1a4>
 800452e:	d808      	bhi.n	8004542 <_printf_i+0x7e>
 8004530:	296f      	cmp	r1, #111	; 0x6f
 8004532:	d020      	beq.n	8004576 <_printf_i+0xb2>
 8004534:	2970      	cmp	r1, #112	; 0x70
 8004536:	d1dd      	bne.n	80044f4 <_printf_i+0x30>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f043 0320 	orr.w	r3, r3, #32
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	e003      	b.n	800454a <_printf_i+0x86>
 8004542:	2975      	cmp	r1, #117	; 0x75
 8004544:	d017      	beq.n	8004576 <_printf_i+0xb2>
 8004546:	2978      	cmp	r1, #120	; 0x78
 8004548:	d1d4      	bne.n	80044f4 <_printf_i+0x30>
 800454a:	2378      	movs	r3, #120	; 0x78
 800454c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004550:	4864      	ldr	r0, [pc, #400]	; (80046e4 <_printf_i+0x220>)
 8004552:	e055      	b.n	8004600 <_printf_i+0x13c>
 8004554:	6813      	ldr	r3, [r2, #0]
 8004556:	1d19      	adds	r1, r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6011      	str	r1, [r2, #0]
 800455c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004564:	2301      	movs	r3, #1
 8004566:	e08c      	b.n	8004682 <_printf_i+0x1be>
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6011      	str	r1, [r2, #0]
 800456c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004570:	bf18      	it	ne
 8004572:	b21b      	sxthne	r3, r3
 8004574:	e7cf      	b.n	8004516 <_printf_i+0x52>
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	6825      	ldr	r5, [r4, #0]
 800457a:	1d18      	adds	r0, r3, #4
 800457c:	6010      	str	r0, [r2, #0]
 800457e:	0628      	lsls	r0, r5, #24
 8004580:	d501      	bpl.n	8004586 <_printf_i+0xc2>
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	e002      	b.n	800458c <_printf_i+0xc8>
 8004586:	0668      	lsls	r0, r5, #25
 8004588:	d5fb      	bpl.n	8004582 <_printf_i+0xbe>
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	4854      	ldr	r0, [pc, #336]	; (80046e0 <_printf_i+0x21c>)
 800458e:	296f      	cmp	r1, #111	; 0x6f
 8004590:	bf14      	ite	ne
 8004592:	220a      	movne	r2, #10
 8004594:	2208      	moveq	r2, #8
 8004596:	2100      	movs	r1, #0
 8004598:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459c:	6865      	ldr	r5, [r4, #4]
 800459e:	60a5      	str	r5, [r4, #8]
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	f2c0 8095 	blt.w	80046d0 <_printf_i+0x20c>
 80045a6:	6821      	ldr	r1, [r4, #0]
 80045a8:	f021 0104 	bic.w	r1, r1, #4
 80045ac:	6021      	str	r1, [r4, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d13d      	bne.n	800462e <_printf_i+0x16a>
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	f040 808e 	bne.w	80046d4 <_printf_i+0x210>
 80045b8:	4665      	mov	r5, ip
 80045ba:	2a08      	cmp	r2, #8
 80045bc:	d10b      	bne.n	80045d6 <_printf_i+0x112>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	07db      	lsls	r3, r3, #31
 80045c2:	d508      	bpl.n	80045d6 <_printf_i+0x112>
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	bfde      	ittt	le
 80045cc:	2330      	movle	r3, #48	; 0x30
 80045ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045d2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80045d6:	ebac 0305 	sub.w	r3, ip, r5
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	f8cd 8000 	str.w	r8, [sp]
 80045e0:	463b      	mov	r3, r7
 80045e2:	aa03      	add	r2, sp, #12
 80045e4:	4621      	mov	r1, r4
 80045e6:	4630      	mov	r0, r6
 80045e8:	f7ff fef6 	bl	80043d8 <_printf_common>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d14d      	bne.n	800468c <_printf_i+0x1c8>
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045f4:	b005      	add	sp, #20
 80045f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045fa:	4839      	ldr	r0, [pc, #228]	; (80046e0 <_printf_i+0x21c>)
 80045fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	1d1d      	adds	r5, r3, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6015      	str	r5, [r2, #0]
 800460a:	060a      	lsls	r2, r1, #24
 800460c:	d50b      	bpl.n	8004626 <_printf_i+0x162>
 800460e:	07ca      	lsls	r2, r1, #31
 8004610:	bf44      	itt	mi
 8004612:	f041 0120 	orrmi.w	r1, r1, #32
 8004616:	6021      	strmi	r1, [r4, #0]
 8004618:	b91b      	cbnz	r3, 8004622 <_printf_i+0x15e>
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	f022 0220 	bic.w	r2, r2, #32
 8004620:	6022      	str	r2, [r4, #0]
 8004622:	2210      	movs	r2, #16
 8004624:	e7b7      	b.n	8004596 <_printf_i+0xd2>
 8004626:	064d      	lsls	r5, r1, #25
 8004628:	bf48      	it	mi
 800462a:	b29b      	uxthmi	r3, r3
 800462c:	e7ef      	b.n	800460e <_printf_i+0x14a>
 800462e:	4665      	mov	r5, ip
 8004630:	fbb3 f1f2 	udiv	r1, r3, r2
 8004634:	fb02 3311 	mls	r3, r2, r1, r3
 8004638:	5cc3      	ldrb	r3, [r0, r3]
 800463a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800463e:	460b      	mov	r3, r1
 8004640:	2900      	cmp	r1, #0
 8004642:	d1f5      	bne.n	8004630 <_printf_i+0x16c>
 8004644:	e7b9      	b.n	80045ba <_printf_i+0xf6>
 8004646:	6813      	ldr	r3, [r2, #0]
 8004648:	6825      	ldr	r5, [r4, #0]
 800464a:	6961      	ldr	r1, [r4, #20]
 800464c:	1d18      	adds	r0, r3, #4
 800464e:	6010      	str	r0, [r2, #0]
 8004650:	0628      	lsls	r0, r5, #24
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	d501      	bpl.n	800465a <_printf_i+0x196>
 8004656:	6019      	str	r1, [r3, #0]
 8004658:	e002      	b.n	8004660 <_printf_i+0x19c>
 800465a:	066a      	lsls	r2, r5, #25
 800465c:	d5fb      	bpl.n	8004656 <_printf_i+0x192>
 800465e:	8019      	strh	r1, [r3, #0]
 8004660:	2300      	movs	r3, #0
 8004662:	6123      	str	r3, [r4, #16]
 8004664:	4665      	mov	r5, ip
 8004666:	e7b9      	b.n	80045dc <_printf_i+0x118>
 8004668:	6813      	ldr	r3, [r2, #0]
 800466a:	1d19      	adds	r1, r3, #4
 800466c:	6011      	str	r1, [r2, #0]
 800466e:	681d      	ldr	r5, [r3, #0]
 8004670:	6862      	ldr	r2, [r4, #4]
 8004672:	2100      	movs	r1, #0
 8004674:	4628      	mov	r0, r5
 8004676:	f7fb fdeb 	bl	8000250 <memchr>
 800467a:	b108      	cbz	r0, 8004680 <_printf_i+0x1bc>
 800467c:	1b40      	subs	r0, r0, r5
 800467e:	6060      	str	r0, [r4, #4]
 8004680:	6863      	ldr	r3, [r4, #4]
 8004682:	6123      	str	r3, [r4, #16]
 8004684:	2300      	movs	r3, #0
 8004686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800468a:	e7a7      	b.n	80045dc <_printf_i+0x118>
 800468c:	6923      	ldr	r3, [r4, #16]
 800468e:	462a      	mov	r2, r5
 8004690:	4639      	mov	r1, r7
 8004692:	4630      	mov	r0, r6
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d0aa      	beq.n	80045f0 <_printf_i+0x12c>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	079b      	lsls	r3, r3, #30
 800469e:	d413      	bmi.n	80046c8 <_printf_i+0x204>
 80046a0:	68e0      	ldr	r0, [r4, #12]
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	4298      	cmp	r0, r3
 80046a6:	bfb8      	it	lt
 80046a8:	4618      	movlt	r0, r3
 80046aa:	e7a3      	b.n	80045f4 <_printf_i+0x130>
 80046ac:	2301      	movs	r3, #1
 80046ae:	464a      	mov	r2, r9
 80046b0:	4639      	mov	r1, r7
 80046b2:	4630      	mov	r0, r6
 80046b4:	47c0      	blx	r8
 80046b6:	3001      	adds	r0, #1
 80046b8:	d09a      	beq.n	80045f0 <_printf_i+0x12c>
 80046ba:	3501      	adds	r5, #1
 80046bc:	68e3      	ldr	r3, [r4, #12]
 80046be:	9a03      	ldr	r2, [sp, #12]
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	42ab      	cmp	r3, r5
 80046c4:	dcf2      	bgt.n	80046ac <_printf_i+0x1e8>
 80046c6:	e7eb      	b.n	80046a0 <_printf_i+0x1dc>
 80046c8:	2500      	movs	r5, #0
 80046ca:	f104 0919 	add.w	r9, r4, #25
 80046ce:	e7f5      	b.n	80046bc <_printf_i+0x1f8>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ac      	bne.n	800462e <_printf_i+0x16a>
 80046d4:	7803      	ldrb	r3, [r0, #0]
 80046d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046de:	e76c      	b.n	80045ba <_printf_i+0xf6>
 80046e0:	08004a45 	.word	0x08004a45
 80046e4:	08004a56 	.word	0x08004a56

080046e8 <memcpy>:
 80046e8:	b510      	push	{r4, lr}
 80046ea:	1e43      	subs	r3, r0, #1
 80046ec:	440a      	add	r2, r1
 80046ee:	4291      	cmp	r1, r2
 80046f0:	d100      	bne.n	80046f4 <memcpy+0xc>
 80046f2:	bd10      	pop	{r4, pc}
 80046f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fc:	e7f7      	b.n	80046ee <memcpy+0x6>

080046fe <memmove>:
 80046fe:	4288      	cmp	r0, r1
 8004700:	b510      	push	{r4, lr}
 8004702:	eb01 0302 	add.w	r3, r1, r2
 8004706:	d807      	bhi.n	8004718 <memmove+0x1a>
 8004708:	1e42      	subs	r2, r0, #1
 800470a:	4299      	cmp	r1, r3
 800470c:	d00a      	beq.n	8004724 <memmove+0x26>
 800470e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004712:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004716:	e7f8      	b.n	800470a <memmove+0xc>
 8004718:	4283      	cmp	r3, r0
 800471a:	d9f5      	bls.n	8004708 <memmove+0xa>
 800471c:	1881      	adds	r1, r0, r2
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	42d3      	cmn	r3, r2
 8004722:	d100      	bne.n	8004726 <memmove+0x28>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800472a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800472e:	e7f7      	b.n	8004720 <memmove+0x22>

08004730 <_free_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4605      	mov	r5, r0
 8004734:	2900      	cmp	r1, #0
 8004736:	d045      	beq.n	80047c4 <_free_r+0x94>
 8004738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473c:	1f0c      	subs	r4, r1, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfb8      	it	lt
 8004742:	18e4      	addlt	r4, r4, r3
 8004744:	f000 f8d2 	bl	80048ec <__malloc_lock>
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <_free_r+0x98>)
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	4610      	mov	r0, r2
 800474e:	b933      	cbnz	r3, 800475e <_free_r+0x2e>
 8004750:	6063      	str	r3, [r4, #4]
 8004752:	6014      	str	r4, [r2, #0]
 8004754:	4628      	mov	r0, r5
 8004756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800475a:	f000 b8c8 	b.w	80048ee <__malloc_unlock>
 800475e:	42a3      	cmp	r3, r4
 8004760:	d90c      	bls.n	800477c <_free_r+0x4c>
 8004762:	6821      	ldr	r1, [r4, #0]
 8004764:	1862      	adds	r2, r4, r1
 8004766:	4293      	cmp	r3, r2
 8004768:	bf04      	itt	eq
 800476a:	681a      	ldreq	r2, [r3, #0]
 800476c:	685b      	ldreq	r3, [r3, #4]
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	bf04      	itt	eq
 8004772:	1852      	addeq	r2, r2, r1
 8004774:	6022      	streq	r2, [r4, #0]
 8004776:	6004      	str	r4, [r0, #0]
 8004778:	e7ec      	b.n	8004754 <_free_r+0x24>
 800477a:	4613      	mov	r3, r2
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	b10a      	cbz	r2, 8004784 <_free_r+0x54>
 8004780:	42a2      	cmp	r2, r4
 8004782:	d9fa      	bls.n	800477a <_free_r+0x4a>
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	1858      	adds	r0, r3, r1
 8004788:	42a0      	cmp	r0, r4
 800478a:	d10b      	bne.n	80047a4 <_free_r+0x74>
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	4401      	add	r1, r0
 8004790:	1858      	adds	r0, r3, r1
 8004792:	4282      	cmp	r2, r0
 8004794:	6019      	str	r1, [r3, #0]
 8004796:	d1dd      	bne.n	8004754 <_free_r+0x24>
 8004798:	6810      	ldr	r0, [r2, #0]
 800479a:	6852      	ldr	r2, [r2, #4]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	4401      	add	r1, r0
 80047a0:	6019      	str	r1, [r3, #0]
 80047a2:	e7d7      	b.n	8004754 <_free_r+0x24>
 80047a4:	d902      	bls.n	80047ac <_free_r+0x7c>
 80047a6:	230c      	movs	r3, #12
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	e7d3      	b.n	8004754 <_free_r+0x24>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	1821      	adds	r1, r4, r0
 80047b0:	428a      	cmp	r2, r1
 80047b2:	bf04      	itt	eq
 80047b4:	6811      	ldreq	r1, [r2, #0]
 80047b6:	6852      	ldreq	r2, [r2, #4]
 80047b8:	6062      	str	r2, [r4, #4]
 80047ba:	bf04      	itt	eq
 80047bc:	1809      	addeq	r1, r1, r0
 80047be:	6021      	streq	r1, [r4, #0]
 80047c0:	605c      	str	r4, [r3, #4]
 80047c2:	e7c7      	b.n	8004754 <_free_r+0x24>
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
 80047c6:	bf00      	nop
 80047c8:	20000090 	.word	0x20000090

080047cc <_malloc_r>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	1ccd      	adds	r5, r1, #3
 80047d0:	f025 0503 	bic.w	r5, r5, #3
 80047d4:	3508      	adds	r5, #8
 80047d6:	2d0c      	cmp	r5, #12
 80047d8:	bf38      	it	cc
 80047da:	250c      	movcc	r5, #12
 80047dc:	2d00      	cmp	r5, #0
 80047de:	4606      	mov	r6, r0
 80047e0:	db01      	blt.n	80047e6 <_malloc_r+0x1a>
 80047e2:	42a9      	cmp	r1, r5
 80047e4:	d903      	bls.n	80047ee <_malloc_r+0x22>
 80047e6:	230c      	movs	r3, #12
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	2000      	movs	r0, #0
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	f000 f87d 	bl	80048ec <__malloc_lock>
 80047f2:	4a21      	ldr	r2, [pc, #132]	; (8004878 <_malloc_r+0xac>)
 80047f4:	6814      	ldr	r4, [r2, #0]
 80047f6:	4621      	mov	r1, r4
 80047f8:	b991      	cbnz	r1, 8004820 <_malloc_r+0x54>
 80047fa:	4c20      	ldr	r4, [pc, #128]	; (800487c <_malloc_r+0xb0>)
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	b91b      	cbnz	r3, 8004808 <_malloc_r+0x3c>
 8004800:	4630      	mov	r0, r6
 8004802:	f000 f863 	bl	80048cc <_sbrk_r>
 8004806:	6020      	str	r0, [r4, #0]
 8004808:	4629      	mov	r1, r5
 800480a:	4630      	mov	r0, r6
 800480c:	f000 f85e 	bl	80048cc <_sbrk_r>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d124      	bne.n	800485e <_malloc_r+0x92>
 8004814:	230c      	movs	r3, #12
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	4630      	mov	r0, r6
 800481a:	f000 f868 	bl	80048ee <__malloc_unlock>
 800481e:	e7e4      	b.n	80047ea <_malloc_r+0x1e>
 8004820:	680b      	ldr	r3, [r1, #0]
 8004822:	1b5b      	subs	r3, r3, r5
 8004824:	d418      	bmi.n	8004858 <_malloc_r+0x8c>
 8004826:	2b0b      	cmp	r3, #11
 8004828:	d90f      	bls.n	800484a <_malloc_r+0x7e>
 800482a:	600b      	str	r3, [r1, #0]
 800482c:	50cd      	str	r5, [r1, r3]
 800482e:	18cc      	adds	r4, r1, r3
 8004830:	4630      	mov	r0, r6
 8004832:	f000 f85c 	bl	80048ee <__malloc_unlock>
 8004836:	f104 000b 	add.w	r0, r4, #11
 800483a:	1d23      	adds	r3, r4, #4
 800483c:	f020 0007 	bic.w	r0, r0, #7
 8004840:	1ac3      	subs	r3, r0, r3
 8004842:	d0d3      	beq.n	80047ec <_malloc_r+0x20>
 8004844:	425a      	negs	r2, r3
 8004846:	50e2      	str	r2, [r4, r3]
 8004848:	e7d0      	b.n	80047ec <_malloc_r+0x20>
 800484a:	428c      	cmp	r4, r1
 800484c:	684b      	ldr	r3, [r1, #4]
 800484e:	bf16      	itet	ne
 8004850:	6063      	strne	r3, [r4, #4]
 8004852:	6013      	streq	r3, [r2, #0]
 8004854:	460c      	movne	r4, r1
 8004856:	e7eb      	b.n	8004830 <_malloc_r+0x64>
 8004858:	460c      	mov	r4, r1
 800485a:	6849      	ldr	r1, [r1, #4]
 800485c:	e7cc      	b.n	80047f8 <_malloc_r+0x2c>
 800485e:	1cc4      	adds	r4, r0, #3
 8004860:	f024 0403 	bic.w	r4, r4, #3
 8004864:	42a0      	cmp	r0, r4
 8004866:	d005      	beq.n	8004874 <_malloc_r+0xa8>
 8004868:	1a21      	subs	r1, r4, r0
 800486a:	4630      	mov	r0, r6
 800486c:	f000 f82e 	bl	80048cc <_sbrk_r>
 8004870:	3001      	adds	r0, #1
 8004872:	d0cf      	beq.n	8004814 <_malloc_r+0x48>
 8004874:	6025      	str	r5, [r4, #0]
 8004876:	e7db      	b.n	8004830 <_malloc_r+0x64>
 8004878:	20000090 	.word	0x20000090
 800487c:	20000094 	.word	0x20000094

08004880 <_realloc_r>:
 8004880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004882:	4607      	mov	r7, r0
 8004884:	4614      	mov	r4, r2
 8004886:	460e      	mov	r6, r1
 8004888:	b921      	cbnz	r1, 8004894 <_realloc_r+0x14>
 800488a:	4611      	mov	r1, r2
 800488c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004890:	f7ff bf9c 	b.w	80047cc <_malloc_r>
 8004894:	b922      	cbnz	r2, 80048a0 <_realloc_r+0x20>
 8004896:	f7ff ff4b 	bl	8004730 <_free_r>
 800489a:	4625      	mov	r5, r4
 800489c:	4628      	mov	r0, r5
 800489e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a0:	f000 f826 	bl	80048f0 <_malloc_usable_size_r>
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d20f      	bcs.n	80048c8 <_realloc_r+0x48>
 80048a8:	4621      	mov	r1, r4
 80048aa:	4638      	mov	r0, r7
 80048ac:	f7ff ff8e 	bl	80047cc <_malloc_r>
 80048b0:	4605      	mov	r5, r0
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d0f2      	beq.n	800489c <_realloc_r+0x1c>
 80048b6:	4631      	mov	r1, r6
 80048b8:	4622      	mov	r2, r4
 80048ba:	f7ff ff15 	bl	80046e8 <memcpy>
 80048be:	4631      	mov	r1, r6
 80048c0:	4638      	mov	r0, r7
 80048c2:	f7ff ff35 	bl	8004730 <_free_r>
 80048c6:	e7e9      	b.n	800489c <_realloc_r+0x1c>
 80048c8:	4635      	mov	r5, r6
 80048ca:	e7e7      	b.n	800489c <_realloc_r+0x1c>

080048cc <_sbrk_r>:
 80048cc:	b538      	push	{r3, r4, r5, lr}
 80048ce:	4c06      	ldr	r4, [pc, #24]	; (80048e8 <_sbrk_r+0x1c>)
 80048d0:	2300      	movs	r3, #0
 80048d2:	4605      	mov	r5, r0
 80048d4:	4608      	mov	r0, r1
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	f7ff fb4e 	bl	8003f78 <_sbrk>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_sbrk_r+0x1a>
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_sbrk_r+0x1a>
 80048e4:	602b      	str	r3, [r5, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	20002a4c 	.word	0x20002a4c

080048ec <__malloc_lock>:
 80048ec:	4770      	bx	lr

080048ee <__malloc_unlock>:
 80048ee:	4770      	bx	lr

080048f0 <_malloc_usable_size_r>:
 80048f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048f4:	1f18      	subs	r0, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	bfbc      	itt	lt
 80048fa:	580b      	ldrlt	r3, [r1, r0]
 80048fc:	18c0      	addlt	r0, r0, r3
 80048fe:	4770      	bx	lr

08004900 <_init>:
 8004900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004902:	bf00      	nop
 8004904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004906:	bc08      	pop	{r3}
 8004908:	469e      	mov	lr, r3
 800490a:	4770      	bx	lr

0800490c <_fini>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr
