ARM GAS  /tmp/ccCvJW9m.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"state.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.calib,"ax",%progbits
  17              		.align	1
  18              		.global	calib
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	calib:
  25              	.LFB144:
  26              		.file 1 "Src/state.c"
   1:Src/state.c   **** #include "state.h"
   2:Src/state.c   **** #include "can.h"
   3:Src/state.c   **** #include "global_variables.h"
   4:Src/state.c   **** #include "stm32f7xx_hal.h"
   5:Src/state.c   **** #include "string.h"
   6:Src/state.c   **** #include "stdio.h"
   7:Src/state.c   **** 
   8:Src/state.c   **** // Default state
   9:Src/state.c   **** // Init variables
  10:Src/state.c   **** /*******************************************************************
  11:Src/state.c   ****  *                         START INIT STATE
  12:Src/state.c   ****  *******************************************************************/
  13:Src/state.c   **** void init(){
  14:Src/state.c   **** 	if(debug_msg_arrived == 1){
  15:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
  16:Src/state.c   **** 		debug_operations();
  17:Src/state.c   **** 	}
  18:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
  19:Src/state.c   **** 		switch (can1.rx_id){
  20:Src/state.c   **** 		case ID_imu_acceleration:
  21:Src/state.c   **** 		case ID_imu_angular_rate:
  22:Src/state.c   **** 			imu_operations();
  23:Src/state.c   **** 			break;
  24:Src/state.c   **** 		
  25:Src/state.c   **** 		default:
  26:Src/state.c   **** 			break;
  27:Src/state.c   **** 		}
  28:Src/state.c   **** 	}
  29:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can3)){
  30:Src/state.c   **** 
  31:Src/state.c   **** 	}
  32:Src/state.c   **** 	current_state = STATE_IDLE;
ARM GAS  /tmp/ccCvJW9m.s 			page 2


  33:Src/state.c   **** }
  34:Src/state.c   **** /*******************************************************************
  35:Src/state.c   ****  *                         END INIT STATE
  36:Src/state.c   ****  *******************************************************************/
  37:Src/state.c   **** /*******************************************************************
  38:Src/state.c   ****  *                        START IDLE STATE
  39:Src/state.c   ****  *******************************************************************/
  40:Src/state.c   **** void idle(){
  41:Src/state.c   **** 	if(debug_msg_arrived == 1){
  42:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
  43:Src/state.c   **** 		debug_operations();
  44:Src/state.c   **** 	}
  45:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
  46:Src/state.c   **** 		switch(can1.rx_id){
  47:Src/state.c   **** 			case ID_ASK_STATE:
  48:Src/state.c   **** 				can1.dataTx[0] = (uint8_t)current_state;
  49:Src/state.c   **** 				can1.dataTx[1] = 0;
  50:Src/state.c   **** 				can1.dataTx[2] = 0;
  51:Src/state.c   **** 				can1.dataTx[3] = 0;
  52:Src/state.c   **** 				can1.dataTx[4] = 0;
  53:Src/state.c   **** 				can1.dataTx[5] = 0;
  54:Src/state.c   **** 				can1.dataTx[6] = 0;
  55:Src/state.c   **** 				can1.dataTx[7] = 0;
  56:Src/state.c   **** 				can1.tx_id = ID_ACU_1;
  57:Src/state.c   **** 				CAN_Send(&can1, normalPriority);
  58:Src/state.c   **** 				break;
  59:Src/state.c   **** 			case ID_ASK_INV_DX:
  60:Src/state.c   **** 				break;
  61:Src/state.c   **** 			case ID_ASK_INV_SX:
  62:Src/state.c   **** 				break;
  63:Src/state.c   **** 			case ID_BMS_HV:
  64:Src/state.c   **** 				break;
  65:Src/state.c   **** 			case ID_BMS_LV:
  66:Src/state.c   **** 				break;
  67:Src/state.c   **** 			case ID_STEERING_WEEL_1:
  68:Src/state.c   **** 				if(can1.dataRx[0] == 2){ //----- change the current state -----//
  69:Src/state.c   **** 					current_state = can1.dataRx[1];
  70:Src/state.c   **** 				}else if(can1.dataRx[0] == 3){ //----- change state to setup -----//
  71:Src/state.c   **** 					current_state = STATE_SETUP;
  72:Src/state.c   **** 				}
  73:Src/state.c   **** 				break;
  74:Src/state.c   **** 			case ID_ATC_POT:
  75:Src/state.c   **** 				atc_pot_operations();
  76:Src/state.c   **** 				break;
  77:Src/state.c   **** 			default:
  78:Src/state.c   **** 				break;
  79:Src/state.c   **** 		}
  80:Src/state.c   **** 	}
  81:Src/state.c   **** 
  82:Src/state.c   **** }
  83:Src/state.c   **** /*******************************************************************
  84:Src/state.c   ****  *                         END IDLE STATE
  85:Src/state.c   ****  *******************************************************************/
  86:Src/state.c   **** /*******************************************************************
  87:Src/state.c   ****  *                        START CALIB STATE
  88:Src/state.c   ****  *******************************************************************/
  89:Src/state.c   **** void calib(){
ARM GAS  /tmp/ccCvJW9m.s 			page 3


  27              		.loc 1 89 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE144:
  36              		.section	.text.debug_operations,"ax",%progbits
  37              		.align	1
  38              		.global	debug_operations
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu fpv5-d16
  44              	debug_operations:
  45              	.LFB147:
  90:Src/state.c   **** 
  91:Src/state.c   **** }
  92:Src/state.c   **** /*******************************************************************
  93:Src/state.c   ****  *                         END CALIB STATE
  94:Src/state.c   ****  *******************************************************************/
  95:Src/state.c   **** /*******************************************************************
  96:Src/state.c   ****  *                        START SETUP STATE
  97:Src/state.c   ****  *******************************************************************/
  98:Src/state.c   **** void setup(){
  99:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
 100:Src/state.c   **** 		switch(can1.rx_id){
 101:Src/state.c   **** 			case ID_STEERING_WEEL_1:
 102:Src/state.c   **** 				if(can1.dataRx[0] == 4){ //----- change state to idle -----//
 103:Src/state.c   **** 					current_state = STATE_IDLE;
 104:Src/state.c   **** 				}else if(can1.dataRx[0] == 5){ //----- change state to run -----//
 105:Src/state.c   **** 					current_state = STATE_RUN;
 106:Src/state.c   **** 					can1.tx_id = ID_ACU_2;
 107:Src/state.c   **** 					can1.dataRx[0] = 5;
 108:Src/state.c   **** 					can1.tx_size = 1;
 109:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 110:Src/state.c   **** 				}
 111:Src/state.c   **** 			case ID_ATC_POT:
 112:Src/state.c   **** 				atc_pot_operations();
 113:Src/state.c   **** 				break;
 114:Src/state.c   **** 			default:
 115:Src/state.c   **** 				break;
 116:Src/state.c   **** 		}
 117:Src/state.c   **** 	}
 118:Src/state.c   **** }
 119:Src/state.c   **** /*******************************************************************
 120:Src/state.c   ****  *                         END SETUP STATE
 121:Src/state.c   ****  *******************************************************************/
 122:Src/state.c   **** /*******************************************************************
 123:Src/state.c   ****  *                         START RUN STATE
 124:Src/state.c   ****  *******************************************************************/
 125:Src/state.c   **** void run(){
 126:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
 127:Src/state.c   **** 		switch(can1.rx_id){
 128:Src/state.c   **** 			case ID_STEERING_WEEL_1:
 129:Src/state.c   **** 				if(can1.dataRx[0] == 6){ //----- change state to setup -----//
ARM GAS  /tmp/ccCvJW9m.s 			page 4


 130:Src/state.c   **** 					current_state = STATE_SETUP;
 131:Src/state.c   **** 				}
 132:Src/state.c   **** 				break;
 133:Src/state.c   **** 			case ID_ATC_POT:
 134:Src/state.c   **** 				atc_pot_operations();
 135:Src/state.c   **** 				break;
 136:Src/state.c   **** 			default:
 137:Src/state.c   **** 				break;
 138:Src/state.c   **** 		}
 139:Src/state.c   **** 	}
 140:Src/state.c   **** }
 141:Src/state.c   **** /*******************************************************************
 142:Src/state.c   ****  *                         END RUN STATE
 143:Src/state.c   ****  *******************************************************************/
 144:Src/state.c   **** 
 145:Src/state.c   **** void debug_operations(){
  46              		.loc 1 145 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		.loc 1 145 0
  51 0000 30B5     		push	{r4, r5, lr}
  52              	.LCFI0:
  53              		.cfi_def_cfa_offset 12
  54              		.cfi_offset 4, -12
  55              		.cfi_offset 5, -8
  56              		.cfi_offset 14, -4
  57 0002 85B0     		sub	sp, sp, #20
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 32
 146:Src/state.c   **** 	if(strcmp(debug_rx,"help") == 0){
  60              		.loc 1 146 0
  61 0004 7449     		ldr	r1, .L25
  62 0006 7548     		ldr	r0, .L25+4
  63 0008 FFF7FEFF 		bl	strcmp
  64              	.LVL0:
  65 000c 48B3     		cbz	r0, .L15
 147:Src/state.c   **** 		sprintf(debug_tx,
 148:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
 149:Src/state.c   **** 				"Avaiable msg are:\r\n"
 150:Src/state.c   **** 				"\t-- status -> print ECU status\r\n"
 151:Src/state.c   **** 				"\t-- time -> print activity time\r\n"
 152:Src/state.c   **** 				"\t-- codev  -> print code version\r\n");
 153:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 154:Src/state.c   **** 	}else if(strcmp(debug_rx,"codev") == 0){
  66              		.loc 1 154 0
  67 000e 7449     		ldr	r1, .L25+8
  68 0010 7248     		ldr	r0, .L25+4
  69 0012 FFF7FEFF 		bl	strcmp
  70              	.LVL1:
  71 0016 0028     		cmp	r0, #0
  72 0018 33D0     		beq	.L16
 155:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)code_version, strlen(code_version), 100);
 156:Src/state.c   **** 	}else if(strcmp(debug_rx,"time") == 0){
  73              		.loc 1 156 0
  74 001a 7249     		ldr	r1, .L25+12
  75 001c 6F48     		ldr	r0, .L25+4
ARM GAS  /tmp/ccCvJW9m.s 			page 5


  76 001e FFF7FEFF 		bl	strcmp
  77              	.LVL2:
  78 0022 0028     		cmp	r0, #0
  79 0024 38D0     		beq	.L17
 157:Src/state.c   **** 		sprintf(debug_tx,"\r\nTime: %d hours : %d min : %d sec : %d dec\r\n",count_hour,count_min, count_
 158:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 159:Src/state.c   **** 	}else if(strcmp(debug_rx,"status") == 0){
  80              		.loc 1 159 0
  81 0026 7049     		ldr	r1, .L25+16
  82 0028 6C48     		ldr	r0, .L25+4
  83 002a FFF7FEFF 		bl	strcmp
  84              	.LVL3:
  85 002e 0028     		cmp	r0, #0
  86 0030 4BD0     		beq	.L18
 160:Src/state.c   **** 		sprintf(debug_tx,
 161:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 162:Src/state.c   **** 				"\t 0 = OK\r\n"
 163:Src/state.c   **** 				"\t 1 = ERROR\r\n"
 164:Src/state.c   **** 				"\t 2 = BUSY\r\n"
 165:Src/state.c   **** 				"\t 3 = TIMEOUT\r\n\n"
 166:Src/state.c   **** 				"CAN1 status:\r\n"
 167:Src/state.c   **** 				"\tCAN1 config status: %d \r\n"
 168:Src/state.c   **** 				"\tCAN1 notification status: %d\r\n"
 169:Src/state.c   **** 				"\tCAN1 start status: %d\r\n"
 170:Src/state.c   **** 				,can1.configFilter_status,can1.activateNotif_status,can1.canStart_status);
 171:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 172:Src/state.c   **** 		sprintf(debug_tx,
 173:Src/state.c   **** 				"CAN3 status:\r\n"
 174:Src/state.c   **** 				"\tCAN3 config status: %d \r\n"
 175:Src/state.c   **** 				"\tCAN3 notification status: %d\r\n"
 176:Src/state.c   **** 				"\tCAN3 start status: %d\r\n"
 177:Src/state.c   **** 				,can3.configFilter_status,can3.activateNotif_status,can3.canStart_status);
 178:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 179:Src/state.c   **** 		if(current_state == STATE_INIT){
 180:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_INIT\r\n", strlen("\r\nCurrent sta
 181:Src/state.c   **** 		}else if(current_state == STATE_IDLE){
 182:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_IDLE\r\n", strlen("\r\nCurrent sta
 183:Src/state.c   **** 		}else if(current_state == STATE_CALIB){
 184:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_CALIB\r\n", strlen("\r\nCurrent st
 185:Src/state.c   **** 		}else if(current_state == STATE_SETUP){
 186:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_SETUP\r\n", strlen("\r\nCurrent st
 187:Src/state.c   **** 		}else if(current_state == STATE_RUN){
 188:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_RUN\r\n", strlen("\r\nCurrent stat
 189:Src/state.c   **** 		}
 190:Src/state.c   **** 		sprintf(debug_tx,
 191:Src/state.c   **** 				"\r\n"
 192:Src/state.c   **** 				"Device connected : (0 = no, 1 = yes)\r\n"
 193:Src/state.c   **** 				"\t IMU -> %d\r\n"
 194:Src/state.c   **** 				"\t ITS0 -> %d\r\n"
 195:Src/state.c   **** 				"\t ITS1 -> %d\r\n"
 196:Src/state.c   **** 				"\t ITS2 -> %d\r\n"
 197:Src/state.c   **** 				"\t ITS3 -> %d\r\n"
 198:Src/state.c   **** 				,imu_connected, its0_connected, its1_connected, its2_connected, its3_connected);
 199:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 200:Src/state.c   **** 	}else if(strcmp(debug_rx,"gay") == 0){
  87              		.loc 1 200 0
  88 0032 6E49     		ldr	r1, .L25+20
ARM GAS  /tmp/ccCvJW9m.s 			page 6


  89 0034 6948     		ldr	r0, .L25+4
  90 0036 FFF7FEFF 		bl	strcmp
  91              	.LVL4:
  92 003a 0028     		cmp	r0, #0
  93 003c 00F0BB80 		beq	.L19
 201:Src/state.c   **** 		sprintf(debug_tx,
 202:Src/state.c   **** 				"\r\n"
 203:Src/state.c   **** 				"          $\r\n"
 204:Src/state.c   **** 				"        $   $\r\n"
 205:Src/state.c   **** 				"       $     $\r\n"
 206:Src/state.c   **** 				"       $$$$$$$\r\n"
 207:Src/state.c   **** 				"       $$$$$$$\r\n"
 208:Src/state.c   **** 				"       $$$$$$$\r\n"
 209:Src/state.c   **** 				"       $$$$$$$\r\n"
 210:Src/state.c   **** 				"       $$$$$$$\r\n"
 211:Src/state.c   **** 				"       $$$$$$$\r\n"
 212:Src/state.c   **** 				"       $$$$$$$\r\n"
 213:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n"
 214:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 215:Src/state.c   **** 				"$$$$$$$$$$$$$$$$$$$$\r\n"
 216:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 217:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n");
 218:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 219:Src/state.c   **** 	}else{
 220:Src/state.c   **** 		sprintf(debug_tx,"\r\nERROR : msg %s doesn't exist\r\n",debug_rx);
  94              		.loc 1 220 0
  95 0040 6B4C     		ldr	r4, .L25+24
  96 0042 664A     		ldr	r2, .L25+4
  97 0044 6B49     		ldr	r1, .L25+28
  98 0046 2046     		mov	r0, r4
  99 0048 FFF7FEFF 		bl	sprintf
 100              	.LVL5:
 221:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 101              		.loc 1 221 0
 102 004c 2046     		mov	r0, r4
 103 004e FFF7FEFF 		bl	strlen
 104              	.LVL6:
 105 0052 6423     		movs	r3, #100
 106 0054 82B2     		uxth	r2, r0
 107 0056 2146     		mov	r1, r4
 108 0058 6748     		ldr	r0, .L25+32
 109 005a FFF7FEFF 		bl	HAL_UART_Transmit
 110              	.LVL7:
 111              	.L2:
 222:Src/state.c   **** 	}
 223:Src/state.c   **** }
 112              		.loc 1 223 0
 113 005e 05B0     		add	sp, sp, #20
 114              	.LCFI2:
 115              		.cfi_remember_state
 116              		.cfi_def_cfa_offset 12
 117              		@ sp needed
 118 0060 30BD     		pop	{r4, r5, pc}
 119              	.L15:
 120              	.LCFI3:
 121              		.cfi_restore_state
 147:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
ARM GAS  /tmp/ccCvJW9m.s 			page 7


 122              		.loc 1 147 0
 123 0062 634C     		ldr	r4, .L25+24
 124 0064 9922     		movs	r2, #153
 125 0066 6549     		ldr	r1, .L25+36
 126 0068 2046     		mov	r0, r4
 127 006a FFF7FEFF 		bl	memcpy
 128              	.LVL8:
 153:Src/state.c   **** 	}else if(strcmp(debug_rx,"codev") == 0){
 129              		.loc 1 153 0
 130 006e 2046     		mov	r0, r4
 131 0070 FFF7FEFF 		bl	strlen
 132              	.LVL9:
 133 0074 6423     		movs	r3, #100
 134 0076 82B2     		uxth	r2, r0
 135 0078 2146     		mov	r1, r4
 136 007a 5F48     		ldr	r0, .L25+32
 137 007c FFF7FEFF 		bl	HAL_UART_Transmit
 138              	.LVL10:
 139 0080 EDE7     		b	.L2
 140              	.L16:
 155:Src/state.c   **** 	}else if(strcmp(debug_rx,"time") == 0){
 141              		.loc 1 155 0
 142 0082 5F4C     		ldr	r4, .L25+40
 143 0084 2046     		mov	r0, r4
 144 0086 FFF7FEFF 		bl	strlen
 145              	.LVL11:
 146 008a 6423     		movs	r3, #100
 147 008c 82B2     		uxth	r2, r0
 148 008e 2146     		mov	r1, r4
 149 0090 5948     		ldr	r0, .L25+32
 150 0092 FFF7FEFF 		bl	HAL_UART_Transmit
 151              	.LVL12:
 152 0096 E2E7     		b	.L2
 153              	.L17:
 157:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 154              		.loc 1 157 0
 155 0098 5A4B     		ldr	r3, .L25+44
 156 009a 1B88     		ldrh	r3, [r3]
 157 009c 5A4A     		ldr	r2, .L25+48
 158 009e 1288     		ldrh	r2, [r2]
 159 00a0 534C     		ldr	r4, .L25+24
 160 00a2 5A49     		ldr	r1, .L25+52
 161 00a4 0988     		ldrh	r1, [r1]
 162 00a6 0191     		str	r1, [sp, #4]
 163 00a8 5949     		ldr	r1, .L25+56
 164 00aa 0988     		ldrh	r1, [r1]
 165 00ac 0091     		str	r1, [sp]
 166 00ae 5949     		ldr	r1, .L25+60
 167 00b0 2046     		mov	r0, r4
 168 00b2 FFF7FEFF 		bl	sprintf
 169              	.LVL13:
 158:Src/state.c   **** 	}else if(strcmp(debug_rx,"status") == 0){
 170              		.loc 1 158 0
 171 00b6 2046     		mov	r0, r4
 172 00b8 FFF7FEFF 		bl	strlen
 173              	.LVL14:
 174 00bc 6423     		movs	r3, #100
ARM GAS  /tmp/ccCvJW9m.s 			page 8


 175 00be 82B2     		uxth	r2, r0
 176 00c0 2146     		mov	r1, r4
 177 00c2 4D48     		ldr	r0, .L25+32
 178 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 179              	.LVL15:
 180 00c8 C9E7     		b	.L2
 181              	.L18:
 170:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 182              		.loc 1 170 0
 183 00ca 5349     		ldr	r1, .L25+64
 184 00cc 91F85C20 		ldrb	r2, [r1, #92]	@ zero_extendqisi2
 185 00d0 91F85D30 		ldrb	r3, [r1, #93]	@ zero_extendqisi2
 186 00d4 91F85E10 		ldrb	r1, [r1, #94]	@ zero_extendqisi2
 160:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 187              		.loc 1 160 0
 188 00d8 454C     		ldr	r4, .L25+24
 189 00da 0091     		str	r1, [sp]
 190 00dc 4F49     		ldr	r1, .L25+68
 191 00de 2046     		mov	r0, r4
 192 00e0 FFF7FEFF 		bl	sprintf
 193              	.LVL16:
 171:Src/state.c   **** 		sprintf(debug_tx,
 194              		.loc 1 171 0
 195 00e4 2046     		mov	r0, r4
 196 00e6 FFF7FEFF 		bl	strlen
 197              	.LVL17:
 198 00ea 434D     		ldr	r5, .L25+32
 199 00ec 6423     		movs	r3, #100
 200 00ee 82B2     		uxth	r2, r0
 201 00f0 2146     		mov	r1, r4
 202 00f2 2846     		mov	r0, r5
 203 00f4 FFF7FEFF 		bl	HAL_UART_Transmit
 204              	.LVL18:
 177:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 205              		.loc 1 177 0
 206 00f8 4949     		ldr	r1, .L25+72
 207 00fa 91F85C20 		ldrb	r2, [r1, #92]	@ zero_extendqisi2
 208 00fe 91F85D30 		ldrb	r3, [r1, #93]	@ zero_extendqisi2
 209 0102 91F85E10 		ldrb	r1, [r1, #94]	@ zero_extendqisi2
 172:Src/state.c   **** 				"CAN3 status:\r\n"
 210              		.loc 1 172 0
 211 0106 0091     		str	r1, [sp]
 212 0108 4649     		ldr	r1, .L25+76
 213 010a 2046     		mov	r0, r4
 214 010c FFF7FEFF 		bl	sprintf
 215              	.LVL19:
 178:Src/state.c   **** 		if(current_state == STATE_INIT){
 216              		.loc 1 178 0
 217 0110 2046     		mov	r0, r4
 218 0112 FFF7FEFF 		bl	strlen
 219              	.LVL20:
 220 0116 6423     		movs	r3, #100
 221 0118 82B2     		uxth	r2, r0
 222 011a 2146     		mov	r1, r4
 223 011c 2846     		mov	r0, r5
 224 011e FFF7FEFF 		bl	HAL_UART_Transmit
 225              	.LVL21:
ARM GAS  /tmp/ccCvJW9m.s 			page 9


 179:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_INIT\r\n", strlen("\r\nCurrent sta
 226              		.loc 1 179 0
 227 0122 414B     		ldr	r3, .L25+80
 228 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 229 0126 1BB3     		cbz	r3, .L20
 181:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_IDLE\r\n", strlen("\r\nCurrent sta
 230              		.loc 1 181 0
 231 0128 012B     		cmp	r3, #1
 232 012a 28D0     		beq	.L21
 183:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_CALIB\r\n", strlen("\r\nCurrent st
 233              		.loc 1 183 0
 234 012c 022B     		cmp	r3, #2
 235 012e 2DD0     		beq	.L22
 185:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_SETUP\r\n", strlen("\r\nCurrent st
 236              		.loc 1 185 0
 237 0130 032B     		cmp	r3, #3
 238 0132 32D0     		beq	.L23
 187:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_RUN\r\n", strlen("\r\nCurrent stat
 239              		.loc 1 187 0
 240 0134 042B     		cmp	r3, #4
 241 0136 37D0     		beq	.L24
 242              	.L9:
 190:Src/state.c   **** 				"\r\n"
 243              		.loc 1 190 0
 244 0138 3C4B     		ldr	r3, .L25+84
 245 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 246 013c 3C4A     		ldr	r2, .L25+88
 247 013e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 248 0140 2B4C     		ldr	r4, .L25+24
 249 0142 3C49     		ldr	r1, .L25+92
 250 0144 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 251 0146 0291     		str	r1, [sp, #8]
 252 0148 3B49     		ldr	r1, .L25+96
 253 014a 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 254 014c 0191     		str	r1, [sp, #4]
 255 014e 3B49     		ldr	r1, .L25+100
 256 0150 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 257 0152 0091     		str	r1, [sp]
 258 0154 3A49     		ldr	r1, .L25+104
 259 0156 2046     		mov	r0, r4
 260 0158 FFF7FEFF 		bl	sprintf
 261              	.LVL22:
 199:Src/state.c   **** 	}else if(strcmp(debug_rx,"gay") == 0){
 262              		.loc 1 199 0
 263 015c 2046     		mov	r0, r4
 264 015e FFF7FEFF 		bl	strlen
 265              	.LVL23:
 266 0162 6423     		movs	r3, #100
 267 0164 82B2     		uxth	r2, r0
 268 0166 2146     		mov	r1, r4
 269 0168 2348     		ldr	r0, .L25+32
 270 016a FFF7FEFF 		bl	HAL_UART_Transmit
 271              	.LVL24:
 272 016e 76E7     		b	.L2
 273              	.L20:
 180:Src/state.c   **** 		}else if(current_state == STATE_IDLE){
 274              		.loc 1 180 0
ARM GAS  /tmp/ccCvJW9m.s 			page 10


 275 0170 6423     		movs	r3, #100
 276 0172 1D22     		movs	r2, #29
 277 0174 3349     		ldr	r1, .L25+108
 278 0176 2846     		mov	r0, r5
 279 0178 FFF7FEFF 		bl	HAL_UART_Transmit
 280              	.LVL25:
 281 017c DCE7     		b	.L9
 282              	.L21:
 182:Src/state.c   **** 		}else if(current_state == STATE_CALIB){
 283              		.loc 1 182 0
 284 017e 6423     		movs	r3, #100
 285 0180 1D22     		movs	r2, #29
 286 0182 3149     		ldr	r1, .L25+112
 287 0184 1C48     		ldr	r0, .L25+32
 288 0186 FFF7FEFF 		bl	HAL_UART_Transmit
 289              	.LVL26:
 290 018a D5E7     		b	.L9
 291              	.L22:
 184:Src/state.c   **** 		}else if(current_state == STATE_SETUP){
 292              		.loc 1 184 0
 293 018c 6423     		movs	r3, #100
 294 018e 1E22     		movs	r2, #30
 295 0190 2E49     		ldr	r1, .L25+116
 296 0192 1948     		ldr	r0, .L25+32
 297 0194 FFF7FEFF 		bl	HAL_UART_Transmit
 298              	.LVL27:
 299 0198 CEE7     		b	.L9
 300              	.L23:
 186:Src/state.c   **** 		}else if(current_state == STATE_RUN){
 301              		.loc 1 186 0
 302 019a 6423     		movs	r3, #100
 303 019c 1E22     		movs	r2, #30
 304 019e 2C49     		ldr	r1, .L25+120
 305 01a0 1548     		ldr	r0, .L25+32
 306 01a2 FFF7FEFF 		bl	HAL_UART_Transmit
 307              	.LVL28:
 308 01a6 C7E7     		b	.L9
 309              	.L24:
 188:Src/state.c   **** 		}
 310              		.loc 1 188 0
 311 01a8 6423     		movs	r3, #100
 312 01aa 1C22     		movs	r2, #28
 313 01ac 2949     		ldr	r1, .L25+124
 314 01ae 1248     		ldr	r0, .L25+32
 315 01b0 FFF7FEFF 		bl	HAL_UART_Transmit
 316              	.LVL29:
 317 01b4 C0E7     		b	.L9
 318              	.L19:
 201:Src/state.c   **** 				"\r\n"
 319              		.loc 1 201 0
 320 01b6 0E4C     		ldr	r4, .L25+24
 321 01b8 40F20B12 		movw	r2, #267
 322 01bc 2649     		ldr	r1, .L25+128
 323 01be 2046     		mov	r0, r4
 324 01c0 FFF7FEFF 		bl	memcpy
 325              	.LVL30:
 218:Src/state.c   **** 	}else{
ARM GAS  /tmp/ccCvJW9m.s 			page 11


 326              		.loc 1 218 0
 327 01c4 2046     		mov	r0, r4
 328 01c6 FFF7FEFF 		bl	strlen
 329              	.LVL31:
 330 01ca 6423     		movs	r3, #100
 331 01cc 82B2     		uxth	r2, r0
 332 01ce 2146     		mov	r1, r4
 333 01d0 0948     		ldr	r0, .L25+32
 334 01d2 FFF7FEFF 		bl	HAL_UART_Transmit
 335              	.LVL32:
 336 01d6 42E7     		b	.L2
 337              	.L26:
 338              		.align	2
 339              	.L25:
 340 01d8 00000000 		.word	.LC0
 341 01dc 00000000 		.word	debug_rx
 342 01e0 A4000000 		.word	.LC2
 343 01e4 AC000000 		.word	.LC3
 344 01e8 E4000000 		.word	.LC5
 345 01ec 04030000 		.word	.LC14
 346 01f0 00000000 		.word	debug_tx
 347 01f4 14040000 		.word	.LC16
 348 01f8 00000000 		.word	huart3
 349 01fc 08000000 		.word	.LC1
 350 0200 00000000 		.word	code_version
 351 0204 00000000 		.word	count_min
 352 0208 00000000 		.word	count_hour
 353 020c 00000000 		.word	count_dec
 354 0210 00000000 		.word	count_sec
 355 0214 B4000000 		.word	.LC4
 356 0218 00000000 		.word	can1
 357 021c EC000000 		.word	.LC6
 358 0220 00000000 		.word	can3
 359 0224 94010000 		.word	.LC7
 360 0228 00000000 		.word	current_state
 361 022c 00000000 		.word	its0_connected
 362 0230 00000000 		.word	imu_connected
 363 0234 00000000 		.word	its3_connected
 364 0238 00000000 		.word	its2_connected
 365 023c 00000000 		.word	its1_connected
 366 0240 94020000 		.word	.LC13
 367 0244 F4010000 		.word	.LC8
 368 0248 14020000 		.word	.LC9
 369 024c 34020000 		.word	.LC10
 370 0250 54020000 		.word	.LC11
 371 0254 74020000 		.word	.LC12
 372 0258 08030000 		.word	.LC15
 373              		.cfi_endproc
 374              	.LFE147:
 376              		.section	.text.imu_operations,"ax",%progbits
 377              		.align	1
 378              		.global	imu_operations
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu fpv5-d16
 384              	imu_operations:
ARM GAS  /tmp/ccCvJW9m.s 			page 12


 385              	.LFB148:
 224:Src/state.c   **** 
 225:Src/state.c   **** void imu_operations(){
 386              		.loc 1 225 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390 0000 08B5     		push	{r3, lr}
 391              	.LCFI4:
 392              		.cfi_def_cfa_offset 8
 393              		.cfi_offset 3, -8
 394              		.cfi_offset 14, -4
 226:Src/state.c   **** 	imu_connected = 1; //imu connected true
 395              		.loc 1 226 0
 396 0002 0122     		movs	r2, #1
 397 0004 094B     		ldr	r3, .L31
 398 0006 1A70     		strb	r2, [r3]
 227:Src/state.c   **** 	if(count_imu == 10 || count_imu == 11){
 399              		.loc 1 227 0
 400 0008 094B     		ldr	r3, .L31+4
 401 000a 1B88     		ldrh	r3, [r3]
 402 000c 0A3B     		subs	r3, r3, #10
 403 000e 9BB2     		uxth	r3, r3
 404 0010 9342     		cmp	r3, r2
 405 0012 03D9     		bls	.L30
 406              	.L28:
 228:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"IMU presente\r\n", strlen("IMU presente\r\n"), 10);
 229:Src/state.c   **** 	}
 230:Src/state.c   **** 	count_imu = 0;
 407              		.loc 1 230 0
 408 0014 0022     		movs	r2, #0
 409 0016 064B     		ldr	r3, .L31+4
 410 0018 1A80     		strh	r2, [r3]	@ movhi
 411 001a 08BD     		pop	{r3, pc}
 412              	.L30:
 228:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"IMU presente\r\n", strlen("IMU presente\r\n"), 10);
 413              		.loc 1 228 0
 414 001c 0A23     		movs	r3, #10
 415 001e 0E22     		movs	r2, #14
 416 0020 0449     		ldr	r1, .L31+8
 417 0022 0548     		ldr	r0, .L31+12
 418 0024 FFF7FEFF 		bl	HAL_UART_Transmit
 419              	.LVL33:
 420 0028 F4E7     		b	.L28
 421              	.L32:
 422 002a 00BF     		.align	2
 423              	.L31:
 424 002c 00000000 		.word	imu_connected
 425 0030 00000000 		.word	count_imu
 426 0034 00000000 		.word	.LC17
 427 0038 00000000 		.word	huart3
 428              		.cfi_endproc
 429              	.LFE148:
 431              		.section	.text.init,"ax",%progbits
 432              		.align	1
 433              		.global	init
 434              		.syntax unified
ARM GAS  /tmp/ccCvJW9m.s 			page 13


 435              		.thumb
 436              		.thumb_func
 437              		.fpu fpv5-d16
 439              	init:
 440              	.LFB142:
  13:Src/state.c   **** 	if(debug_msg_arrived == 1){
 441              		.loc 1 13 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445 0000 08B5     		push	{r3, lr}
 446              	.LCFI5:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 3, -8
 449              		.cfi_offset 14, -4
  14:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
 450              		.loc 1 14 0
 451 0002 0F4B     		ldr	r3, .L40
 452 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 453 0006 012B     		cmp	r3, #1
 454 0008 10D0     		beq	.L38
 455              	.L34:
  18:Src/state.c   **** 		switch (can1.rx_id){
 456              		.loc 1 18 0
 457 000a 0E48     		ldr	r0, .L40+4
 458 000c FFF7FEFF 		bl	fifoRxDataCAN_pop
 459              	.LVL34:
 460 0010 28B1     		cbz	r0, .L35
  19:Src/state.c   **** 		case ID_imu_acceleration:
 461              		.loc 1 19 0
 462 0012 0C4B     		ldr	r3, .L40+4
 463 0014 5B6A     		ldr	r3, [r3, #36]
 464 0016 A3F2EC43 		subw	r3, r3, #1260
 465 001a 012B     		cmp	r3, #1
 466 001c 0CD9     		bls	.L39
 467              	.L35:
  29:Src/state.c   **** 
 468              		.loc 1 29 0
 469 001e 0A48     		ldr	r0, .L40+8
 470 0020 FFF7FEFF 		bl	fifoRxDataCAN_pop
 471              	.LVL35:
  32:Src/state.c   **** }
 472              		.loc 1 32 0
 473 0024 0122     		movs	r2, #1
 474 0026 094B     		ldr	r3, .L40+12
 475 0028 1A70     		strb	r2, [r3]
 476 002a 08BD     		pop	{r3, pc}
 477              	.L38:
  15:Src/state.c   **** 		debug_operations();
 478              		.loc 1 15 0
 479 002c 0022     		movs	r2, #0
 480 002e 044B     		ldr	r3, .L40
 481 0030 1A70     		strb	r2, [r3]
  16:Src/state.c   **** 	}
 482              		.loc 1 16 0
 483 0032 FFF7FEFF 		bl	debug_operations
 484              	.LVL36:
ARM GAS  /tmp/ccCvJW9m.s 			page 14


 485 0036 E8E7     		b	.L34
 486              	.L39:
  22:Src/state.c   **** 			break;
 487              		.loc 1 22 0
 488 0038 FFF7FEFF 		bl	imu_operations
 489              	.LVL37:
  23:Src/state.c   **** 		
 490              		.loc 1 23 0
 491 003c EFE7     		b	.L35
 492              	.L41:
 493 003e 00BF     		.align	2
 494              	.L40:
 495 0040 00000000 		.word	debug_msg_arrived
 496 0044 00000000 		.word	can1
 497 0048 00000000 		.word	can3
 498 004c 00000000 		.word	current_state
 499              		.cfi_endproc
 500              	.LFE142:
 502              		.section	.text.atc_pot_operations,"ax",%progbits
 503              		.align	1
 504              		.global	atc_pot_operations
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 508              		.fpu fpv5-d16
 510              	atc_pot_operations:
 511              	.LFB149:
 231:Src/state.c   **** }
 232:Src/state.c   **** void atc_pot_operations(){
 512              		.loc 1 232 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 233:Src/state.c   **** 	atc_connected = 1;
 517              		.loc 1 233 0
 518 0000 0122     		movs	r2, #1
 519 0002 034B     		ldr	r3, .L43
 520 0004 1A70     		strb	r2, [r3]
 234:Src/state.c   **** 	count_atc = 0;
 521              		.loc 1 234 0
 522 0006 0022     		movs	r2, #0
 523 0008 024B     		ldr	r3, .L43+4
 524 000a 1A80     		strh	r2, [r3]	@ movhi
 525 000c 7047     		bx	lr
 526              	.L44:
 527 000e 00BF     		.align	2
 528              	.L43:
 529 0010 00000000 		.word	atc_connected
 530 0014 00000000 		.word	count_atc
 531              		.cfi_endproc
 532              	.LFE149:
 534              		.section	.text.idle,"ax",%progbits
 535              		.align	1
 536              		.global	idle
 537              		.syntax unified
 538              		.thumb
ARM GAS  /tmp/ccCvJW9m.s 			page 15


 539              		.thumb_func
 540              		.fpu fpv5-d16
 542              	idle:
 543              	.LFB143:
  40:Src/state.c   **** 	if(debug_msg_arrived == 1){
 544              		.loc 1 40 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 08B5     		push	{r3, lr}
 549              	.LCFI6:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 3, -8
 552              		.cfi_offset 14, -4
  41:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
 553              		.loc 1 41 0
 554 0002 1D4B     		ldr	r3, .L56
 555 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 556 0006 012B     		cmp	r3, #1
 557 0008 0CD0     		beq	.L53
 558              	.L46:
  45:Src/state.c   **** 		switch(can1.rx_id){
 559              		.loc 1 45 0
 560 000a 1C48     		ldr	r0, .L56+4
 561 000c FFF7FEFF 		bl	fifoRxDataCAN_pop
 562              	.LVL38:
 563 0010 38B1     		cbz	r0, .L45
  46:Src/state.c   **** 			case ID_ASK_STATE:
 564              		.loc 1 46 0
 565 0012 1A4B     		ldr	r3, .L56+4
 566 0014 5B6A     		ldr	r3, [r3, #36]
 567 0016 342B     		cmp	r3, #52
 568 0018 2BD0     		beq	.L48
 569 001a A02B     		cmp	r3, #160
 570 001c 1AD0     		beq	.L49
 571 001e 102B     		cmp	r3, #16
 572 0020 06D0     		beq	.L54
 573              	.L45:
 574 0022 08BD     		pop	{r3, pc}
 575              	.L53:
  42:Src/state.c   **** 		debug_operations();
 576              		.loc 1 42 0
 577 0024 0022     		movs	r2, #0
 578 0026 144B     		ldr	r3, .L56
 579 0028 1A70     		strb	r2, [r3]
  43:Src/state.c   **** 	}
 580              		.loc 1 43 0
 581 002a FFF7FEFF 		bl	debug_operations
 582              	.LVL39:
 583 002e ECE7     		b	.L46
 584              	.L54:
  48:Src/state.c   **** 				can1.dataTx[1] = 0;
 585              		.loc 1 48 0
 586 0030 134B     		ldr	r3, .L56+8
 587 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 588 0034 1148     		ldr	r0, .L56+4
 589 0036 0372     		strb	r3, [r0, #8]
ARM GAS  /tmp/ccCvJW9m.s 			page 16


  49:Src/state.c   **** 				can1.dataTx[2] = 0;
 590              		.loc 1 49 0
 591 0038 0021     		movs	r1, #0
 592 003a 4172     		strb	r1, [r0, #9]
  50:Src/state.c   **** 				can1.dataTx[3] = 0;
 593              		.loc 1 50 0
 594 003c 8172     		strb	r1, [r0, #10]
  51:Src/state.c   **** 				can1.dataTx[4] = 0;
 595              		.loc 1 51 0
 596 003e C172     		strb	r1, [r0, #11]
  52:Src/state.c   **** 				can1.dataTx[5] = 0;
 597              		.loc 1 52 0
 598 0040 0173     		strb	r1, [r0, #12]
  53:Src/state.c   **** 				can1.dataTx[6] = 0;
 599              		.loc 1 53 0
 600 0042 4173     		strb	r1, [r0, #13]
  54:Src/state.c   **** 				can1.dataTx[7] = 0;
 601              		.loc 1 54 0
 602 0044 8173     		strb	r1, [r0, #14]
  55:Src/state.c   **** 				can1.tx_id = ID_ACU_1;
 603              		.loc 1 55 0
 604 0046 C173     		strb	r1, [r0, #15]
  56:Src/state.c   **** 				CAN_Send(&can1, normalPriority);
 605              		.loc 1 56 0
 606 0048 4FF48073 		mov	r3, #256
 607 004c 0362     		str	r3, [r0, #32]
  57:Src/state.c   **** 				break;
 608              		.loc 1 57 0
 609 004e FFF7FEFF 		bl	CAN_Send
 610              	.LVL40:
  58:Src/state.c   **** 			case ID_ASK_INV_DX:
 611              		.loc 1 58 0
 612 0052 08BD     		pop	{r3, pc}
 613              	.L49:
  68:Src/state.c   **** 					current_state = can1.dataRx[1];
 614              		.loc 1 68 0
 615 0054 094B     		ldr	r3, .L56+4
 616 0056 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 617 0058 022B     		cmp	r3, #2
 618 005a 05D0     		beq	.L55
  70:Src/state.c   **** 					current_state = STATE_SETUP;
 619              		.loc 1 70 0
 620 005c 032B     		cmp	r3, #3
 621 005e E0D1     		bne	.L45
  71:Src/state.c   **** 				}
 622              		.loc 1 71 0
 623 0060 0322     		movs	r2, #3
 624 0062 074B     		ldr	r3, .L56+8
 625 0064 1A70     		strb	r2, [r3]
 626 0066 08BD     		pop	{r3, pc}
 627              	.L55:
  69:Src/state.c   **** 				}else if(can1.dataRx[0] == 3){ //----- change state to setup -----//
 628              		.loc 1 69 0
 629 0068 044B     		ldr	r3, .L56+4
 630 006a 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
 631 006c 044B     		ldr	r3, .L56+8
 632 006e 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccCvJW9m.s 			page 17


 633 0070 08BD     		pop	{r3, pc}
 634              	.L48:
  75:Src/state.c   **** 				break;
 635              		.loc 1 75 0
 636 0072 FFF7FEFF 		bl	atc_pot_operations
 637              	.LVL41:
  82:Src/state.c   **** /*******************************************************************
 638              		.loc 1 82 0
 639 0076 D4E7     		b	.L45
 640              	.L57:
 641              		.align	2
 642              	.L56:
 643 0078 00000000 		.word	debug_msg_arrived
 644 007c 00000000 		.word	can1
 645 0080 00000000 		.word	current_state
 646              		.cfi_endproc
 647              	.LFE143:
 649              		.section	.text.setup,"ax",%progbits
 650              		.align	1
 651              		.global	setup
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv5-d16
 657              	setup:
 658              	.LFB145:
  98:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
 659              		.loc 1 98 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 0
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663 0000 08B5     		push	{r3, lr}
 664              	.LCFI7:
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 3, -8
 667              		.cfi_offset 14, -4
  99:Src/state.c   **** 		switch(can1.rx_id){
 668              		.loc 1 99 0
 669 0002 1248     		ldr	r0, .L66
 670 0004 FFF7FEFF 		bl	fifoRxDataCAN_pop
 671              	.LVL42:
 672 0008 68B1     		cbz	r0, .L58
 100:Src/state.c   **** 			case ID_STEERING_WEEL_1:
 673              		.loc 1 100 0
 674 000a 104B     		ldr	r3, .L66
 675 000c 5B6A     		ldr	r3, [r3, #36]
 676 000e 342B     		cmp	r3, #52
 677 0010 07D0     		beq	.L60
 678 0012 A02B     		cmp	r3, #160
 679 0014 07D1     		bne	.L58
 102:Src/state.c   **** 					current_state = STATE_IDLE;
 680              		.loc 1 102 0
 681 0016 0D4B     		ldr	r3, .L66
 682 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 683 001a 042B     		cmp	r3, #4
 684 001c 04D0     		beq	.L64
 104:Src/state.c   **** 					current_state = STATE_RUN;
ARM GAS  /tmp/ccCvJW9m.s 			page 18


 685              		.loc 1 104 0
 686 001e 052B     		cmp	r3, #5
 687 0020 06D0     		beq	.L65
 688              	.L60:
 112:Src/state.c   **** 				break;
 689              		.loc 1 112 0
 690 0022 FFF7FEFF 		bl	atc_pot_operations
 691              	.LVL43:
 692              	.L58:
 693 0026 08BD     		pop	{r3, pc}
 694              	.L64:
 103:Src/state.c   **** 				}else if(can1.dataRx[0] == 5){ //----- change state to run -----//
 695              		.loc 1 103 0
 696 0028 0122     		movs	r2, #1
 697 002a 094B     		ldr	r3, .L66+4
 698 002c 1A70     		strb	r2, [r3]
 699 002e F8E7     		b	.L60
 700              	.L65:
 105:Src/state.c   **** 					can1.tx_id = ID_ACU_2;
 701              		.loc 1 105 0
 702 0030 0422     		movs	r2, #4
 703 0032 074B     		ldr	r3, .L66+4
 704 0034 1A70     		strb	r2, [r3]
 106:Src/state.c   **** 					can1.dataRx[0] = 5;
 705              		.loc 1 106 0
 706 0036 0548     		ldr	r0, .L66
 707 0038 5523     		movs	r3, #85
 708 003a 0362     		str	r3, [r0, #32]
 107:Src/state.c   **** 					can1.tx_size = 1;
 709              		.loc 1 107 0
 710 003c 0523     		movs	r3, #5
 711 003e 0374     		strb	r3, [r0, #16]
 108:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 712              		.loc 1 108 0
 713 0040 0123     		movs	r3, #1
 714 0042 0360     		str	r3, [r0]
 109:Src/state.c   **** 				}
 715              		.loc 1 109 0
 716 0044 0021     		movs	r1, #0
 717 0046 FFF7FEFF 		bl	CAN_Send
 718              	.LVL44:
 719 004a EAE7     		b	.L60
 720              	.L67:
 721              		.align	2
 722              	.L66:
 723 004c 00000000 		.word	can1
 724 0050 00000000 		.word	current_state
 725              		.cfi_endproc
 726              	.LFE145:
 728              		.section	.text.run,"ax",%progbits
 729              		.align	1
 730              		.global	run
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv5-d16
 736              	run:
ARM GAS  /tmp/ccCvJW9m.s 			page 19


 737              	.LFB146:
 125:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
 738              		.loc 1 125 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742 0000 08B5     		push	{r3, lr}
 743              	.LCFI8:
 744              		.cfi_def_cfa_offset 8
 745              		.cfi_offset 3, -8
 746              		.cfi_offset 14, -4
 126:Src/state.c   **** 		switch(can1.rx_id){
 747              		.loc 1 126 0
 748 0002 0A48     		ldr	r0, .L73
 749 0004 FFF7FEFF 		bl	fifoRxDataCAN_pop
 750              	.LVL45:
 751 0008 78B1     		cbz	r0, .L68
 127:Src/state.c   **** 			case ID_STEERING_WEEL_1:
 752              		.loc 1 127 0
 753 000a 084B     		ldr	r3, .L73
 754 000c 5B6A     		ldr	r3, [r3, #36]
 755 000e 342B     		cmp	r3, #52
 756 0010 09D0     		beq	.L70
 757 0012 A02B     		cmp	r3, #160
 758 0014 09D1     		bne	.L68
 129:Src/state.c   **** 					current_state = STATE_SETUP;
 759              		.loc 1 129 0
 760 0016 054B     		ldr	r3, .L73
 761 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 762 001a 062B     		cmp	r3, #6
 763 001c 05D1     		bne	.L68
 130:Src/state.c   **** 				}
 764              		.loc 1 130 0
 765 001e 0322     		movs	r2, #3
 766 0020 034B     		ldr	r3, .L73+4
 767 0022 1A70     		strb	r2, [r3]
 768 0024 08BD     		pop	{r3, pc}
 769              	.L70:
 134:Src/state.c   **** 				break;
 770              		.loc 1 134 0
 771 0026 FFF7FEFF 		bl	atc_pot_operations
 772              	.LVL46:
 773              	.L68:
 774 002a 08BD     		pop	{r3, pc}
 775              	.L74:
 776              		.align	2
 777              	.L73:
 778 002c 00000000 		.word	can1
 779 0030 00000000 		.word	current_state
 780              		.cfi_endproc
 781              	.LFE146:
 783              		.comm	current_state,1,1
 784              		.section	.rodata.debug_operations.str1.4,"aMS",%progbits,1
 785              		.align	2
 786              	.LC0:
 787 0000 68656C70 		.ascii	"help\000"
 787      00
ARM GAS  /tmp/ccCvJW9m.s 			page 20


 788 0005 000000   		.space	3
 789              	.LC1:
 790 0008 0D0A2A2A 		.ascii	"\015\012***********ECU HELP***********\015\012Avaia"
 790      2A2A2A2A 
 790      2A2A2A2A 
 790      2A454355 
 790      2048454C 
 791 002f 626C6520 		.ascii	"ble msg are:\015\012\011-- status -> print ECU stat"
 791      6D736720 
 791      6172653A 
 791      0D0A092D 
 791      2D207374 
 792 0059 75730D0A 		.ascii	"us\015\012\011-- time -> print activity time\015\012"
 792      092D2D20 
 792      74696D65 
 792      202D3E20 
 792      7072696E 
 793 007e 092D2D20 		.ascii	"\011-- codev  -> print code version\015\012\000"
 793      636F6465 
 793      7620202D 
 793      3E207072 
 793      696E7420 
 794 00a1 000000   		.space	3
 795              	.LC2:
 796 00a4 636F6465 		.ascii	"codev\000"
 796      7600
 797 00aa 0000     		.space	2
 798              	.LC3:
 799 00ac 74696D65 		.ascii	"time\000"
 799      00
 800 00b1 000000   		.space	3
 801              	.LC4:
 802 00b4 0D0A5469 		.ascii	"\015\012Time: %d hours : %d min : %d sec : %d dec\015"
 802      6D653A20 
 802      25642068 
 802      6F757273 
 802      203A2025 
 803 00e0 0A00     		.ascii	"\012\000"
 804 00e2 0000     		.space	2
 805              	.LC5:
 806 00e4 73746174 		.ascii	"status\000"
 806      757300
 807 00eb 00       		.space	1
 808              	.LC6:
 809 00ec 0D0A0A74 		.ascii	"\015\012\012type of status:\015\012\011 0 = OK\015\012"
 809      79706520 
 809      6F662073 
 809      74617475 
 809      733A0D0A 
 810 010a 09203120 		.ascii	"\011 1 = ERROR\015\012\011 2 = BUSY\015\012\011 3 ="
 810      3D204552 
 810      524F520D 
 810      0A092032 
 810      203D2042 
 811 0128 2054494D 		.ascii	" TIMEOUT\015\012\012CAN1 status:\015\012\011CAN1 co"
 811      454F5554 
 811      0D0A0A43 
ARM GAS  /tmp/ccCvJW9m.s 			page 21


 811      414E3120 
 811      73746174 
 812 0149 6E666967 		.ascii	"nfig status: %d \015\012\011CAN1 notification statu"
 812      20737461 
 812      7475733A 
 812      20256420 
 812      0D0A0943 
 813 0173 733A2025 		.ascii	"s: %d\015\012\011CAN1 start status: %d\015\012\000"
 813      640D0A09 
 813      43414E31 
 813      20737461 
 813      72742073 
 814 0193 00       		.space	1
 815              	.LC7:
 816 0194 43414E33 		.ascii	"CAN3 status:\015\012\011CAN3 config status: %d \015"
 816      20737461 
 816      7475733A 
 816      0D0A0943 
 816      414E3320 
 817 01bb 0A094341 		.ascii	"\012\011CAN3 notification status: %d\015\012\011CAN"
 817      4E33206E 
 817      6F746966 
 817      69636174 
 817      696F6E20 
 818 01df 33207374 		.ascii	"3 start status: %d\015\012\000"
 818      61727420 
 818      73746174 
 818      75733A20 
 818      25640D0A 
 819              	.LC8:
 820 01f4 0D0A4375 		.ascii	"\015\012Current state: STATE_INIT\015\012\000"
 820      7272656E 
 820      74207374 
 820      6174653A 
 820      20535441 
 821 0212 0000     		.space	2
 822              	.LC9:
 823 0214 0D0A4375 		.ascii	"\015\012Current state: STATE_IDLE\015\012\000"
 823      7272656E 
 823      74207374 
 823      6174653A 
 823      20535441 
 824 0232 0000     		.space	2
 825              	.LC10:
 826 0234 0D0A4375 		.ascii	"\015\012Current state: STATE_CALIB\015\012\000"
 826      7272656E 
 826      74207374 
 826      6174653A 
 826      20535441 
 827 0253 00       		.space	1
 828              	.LC11:
 829 0254 0D0A4375 		.ascii	"\015\012Current state: STATE_SETUP\015\012\000"
 829      7272656E 
 829      74207374 
 829      6174653A 
 829      20535441 
 830 0273 00       		.space	1
ARM GAS  /tmp/ccCvJW9m.s 			page 22


 831              	.LC12:
 832 0274 0D0A4375 		.ascii	"\015\012Current state: STATE_RUN\015\012\000"
 832      7272656E 
 832      74207374 
 832      6174653A 
 832      20535441 
 833 0291 000000   		.space	3
 834              	.LC13:
 835 0294 0D0A4465 		.ascii	"\015\012Device connected : (0 = no, 1 = yes)\015\012"
 835      76696365 
 835      20636F6E 
 835      6E656374 
 835      6564203A 
 836 02bc 0920494D 		.ascii	"\011 IMU -> %d\015\012\011 ITS0 -> %d\015\012\011 I"
 836      55202D3E 
 836      2025640D 
 836      0A092049 
 836      54533020 
 837 02da 54533120 		.ascii	"TS1 -> %d\015\012\011 ITS2 -> %d\015\012\011 ITS3 -"
 837      2D3E2025 
 837      640D0A09 
 837      20495453 
 837      32202D3E 
 838 02fb 3E202564 		.ascii	"> %d\015\012\000"
 838      0D0A00
 839 0302 0000     		.space	2
 840              	.LC14:
 841 0304 67617900 		.ascii	"gay\000"
 842              	.LC15:
 843 0308 0D0A2020 		.ascii	"\015\012          $\015\012        $   $\015\012   "
 843      20202020 
 843      20202020 
 843      240D0A20 
 843      20202020 
 844 0329 20202020 		.ascii	"    $     $\015\012       $$$$$$$\015\012       $$$"
 844      24202020 
 844      2020240D 
 844      0A202020 
 844      20202020 
 845 0350 24242424 		.ascii	"$$$$\015\012       $$$$$$$\015\012       $$$$$$$\015"
 845      0D0A2020 
 845      20202020 
 845      20242424 
 845      24242424 
 846 0375 0A202020 		.ascii	"\012       $$$$$$$\015\012       $$$$$$$\015\012   "
 846      20202020 
 846      24242424 
 846      2424240D 
 846      0A202020 
 847 0399 20202020 		.ascii	"    $$$$$$$\015\012  $$$$$$     $$$$$$\015\012 $$$$"
 847      24242424 
 847      2424240D 
 847      0A202024 
 847      24242424 
 848 03c0 24242424 		.ascii	"$$$$   $$$$$$$$\015\012$$$$$$$$$$$$$$$$$$$$\015\012"
 848      20202024 
 848      24242424 
ARM GAS  /tmp/ccCvJW9m.s 			page 23


 848      2424240D 
 848      0A242424 
 849 03e7 20242424 		.ascii	" $$$$$$$$   $$$$$$$$\015\012  $$$$$$     $$$$$$\015"
 849      24242424 
 849      24202020 
 849      24242424 
 849      24242424 
 850 0411 0A00     		.ascii	"\012\000"
 851 0413 00       		.space	1
 852              	.LC16:
 853 0414 0D0A4552 		.ascii	"\015\012ERROR : msg %s doesn't exist\015\012\000"
 853      524F5220 
 853      3A206D73 
 853      67202573 
 853      20646F65 
 854              		.section	.rodata.imu_operations.str1.4,"aMS",%progbits,1
 855              		.align	2
 856              	.LC17:
 857 0000 494D5520 		.ascii	"IMU presente\015\012\000"
 857      70726573 
 857      656E7465 
 857      0D0A00
 858              		.text
 859              	.Letext0:
 860              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 861              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 862              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 863              		.file 5 "Inc/state.h"
 864              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 865              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 866              		.file 8 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 867              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 868              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 869              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 870              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 871              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 872              		.file 14 "Inc/can.h"
 873              		.file 15 "Middlewares/Third_Party/FatFs/src/integer.h"
 874              		.file 16 "/usr/include/newlib/sys/lock.h"
 875              		.file 17 "/usr/include/newlib/sys/_types.h"
 876              		.file 18 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 877              		.file 19 "/usr/include/newlib/sys/reent.h"
 878              		.file 20 "/usr/include/newlib/stdlib.h"
 879              		.file 21 "Middlewares/Third_Party/FatFs/src/ff.h"
 880              		.file 22 "Middlewares/Third_Party/FatFs/src/diskio.h"
 881              		.file 23 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 882              		.file 24 "Inc/sd_diskio.h"
 883              		.file 25 "Inc/fatfs.h"
 884              		.file 26 "Inc/pedals.h"
 885              		.file 27 "Inc/global_variables.h"
 886              		.file 28 "/usr/include/newlib/string.h"
 887              		.file 29 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccCvJW9m.s 			page 24


DEFINED SYMBOLS
                            *ABS*:0000000000000000 state.c
     /tmp/ccCvJW9m.s:17     .text.calib:0000000000000000 $t
     /tmp/ccCvJW9m.s:24     .text.calib:0000000000000000 calib
     /tmp/ccCvJW9m.s:37     .text.debug_operations:0000000000000000 $t
     /tmp/ccCvJW9m.s:44     .text.debug_operations:0000000000000000 debug_operations
     /tmp/ccCvJW9m.s:340    .text.debug_operations:00000000000001d8 $d
                            *COM*:0000000000000001 current_state
     /tmp/ccCvJW9m.s:377    .text.imu_operations:0000000000000000 $t
     /tmp/ccCvJW9m.s:384    .text.imu_operations:0000000000000000 imu_operations
     /tmp/ccCvJW9m.s:424    .text.imu_operations:000000000000002c $d
     /tmp/ccCvJW9m.s:432    .text.init:0000000000000000 $t
     /tmp/ccCvJW9m.s:439    .text.init:0000000000000000 init
     /tmp/ccCvJW9m.s:495    .text.init:0000000000000040 $d
     /tmp/ccCvJW9m.s:503    .text.atc_pot_operations:0000000000000000 $t
     /tmp/ccCvJW9m.s:510    .text.atc_pot_operations:0000000000000000 atc_pot_operations
     /tmp/ccCvJW9m.s:529    .text.atc_pot_operations:0000000000000010 $d
     /tmp/ccCvJW9m.s:535    .text.idle:0000000000000000 $t
     /tmp/ccCvJW9m.s:542    .text.idle:0000000000000000 idle
     /tmp/ccCvJW9m.s:643    .text.idle:0000000000000078 $d
     /tmp/ccCvJW9m.s:650    .text.setup:0000000000000000 $t
     /tmp/ccCvJW9m.s:657    .text.setup:0000000000000000 setup
     /tmp/ccCvJW9m.s:723    .text.setup:000000000000004c $d
     /tmp/ccCvJW9m.s:729    .text.run:0000000000000000 $t
     /tmp/ccCvJW9m.s:736    .text.run:0000000000000000 run
     /tmp/ccCvJW9m.s:778    .text.run:000000000000002c $d
     /tmp/ccCvJW9m.s:785    .rodata.debug_operations.str1.4:0000000000000000 $d
     /tmp/ccCvJW9m.s:855    .rodata.imu_operations.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
strcmp
sprintf
strlen
HAL_UART_Transmit
memcpy
debug_rx
debug_tx
huart3
code_version
count_min
count_hour
count_dec
count_sec
can1
can3
its0_connected
imu_connected
its3_connected
its2_connected
its1_connected
count_imu
fifoRxDataCAN_pop
debug_msg_arrived
atc_connected
count_atc
CAN_Send
ARM GAS  /tmp/ccCvJW9m.s 			page 25


