ARM GAS  /tmp/ccCPBTWO.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"state.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.set_bit_uint8,"ax",%progbits
  17              		.align	1
  18              		.global	set_bit_uint8
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	set_bit_uint8:
  26              	.LVL0:
  27              	.LFB144:
  28              		.file 1 "Src/state.c"
   1:Src/state.c   **** #include "state.h"
   2:Src/state.c   **** #include "can.h"
   3:Src/state.c   **** #include "global_variables.h"
   4:Src/state.c   **** #include "stdio.h"
   5:Src/state.c   **** #include "stm32f7xx_hal.h"
   6:Src/state.c   **** #include "string.h"
   7:Src/state.c   **** /*******************************************************************
   8:Src/state.c   ****  *                         USER FUNCTIONS
   9:Src/state.c   ****  *******************************************************************/ 
  10:Src/state.c   **** void set_bit_uint8(uint8_t* _var, uint8_t _nBit, uint8_t _bool){
  29              		.loc 1 10 64 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  11:Src/state.c   **** 	if(_bool == 0 || _bool == 1){
  34              		.loc 1 11 2 view .LVU1
  35              		.loc 1 11 4 is_stmt 0 view .LVU2
  36 0000 012A     		cmp	r2, #1
  37 0002 00D9     		bls	.L7
  38 0004 7047     		bx	lr
  39              	.L7:
  10:Src/state.c   **** 	if(_bool == 0 || _bool == 1){
  40              		.loc 1 10 64 view .LVU3
  41 0006 10B4     		push	{r4}
  42              	.LCFI0:
  43              		.cfi_def_cfa_offset 4
  44              		.cfi_offset 4, -4
  12:Src/state.c   **** 		(*_var) = ((*_var) & ( 0b11111111 ^ (0b00000001 << _nBit))) | (0b00000000 | (_bool << _nBit));
  45              		.loc 1 12 3 is_stmt 1 view .LVU4
ARM GAS  /tmp/ccCPBTWO.s 			page 2


  46              		.loc 1 12 15 is_stmt 0 view .LVU5
  47 0008 90F90040 		ldrsb	r4, [r0]
  48              		.loc 1 12 51 view .LVU6
  49 000c 0123     		movs	r3, #1
  50 000e 8B40     		lsls	r3, r3, r1
  51              		.loc 1 12 37 view .LVU7
  52 0010 DB43     		mvns	r3, r3
  53 0012 5BB2     		sxtb	r3, r3
  54              		.loc 1 12 22 view .LVU8
  55 0014 2340     		ands	r3, r3, r4
  56              		.loc 1 12 77 view .LVU9
  57 0016 8A40     		lsls	r2, r2, r1
  58              	.LVL1:
  59              		.loc 1 12 63 view .LVU10
  60 0018 1A43     		orrs	r2, r2, r3
  61              		.loc 1 12 11 view .LVU11
  62 001a 0270     		strb	r2, [r0]
  13:Src/state.c   **** 	}
  14:Src/state.c   **** }
  63              		.loc 1 14 1 view .LVU12
  64 001c 5DF8044B 		ldr	r4, [sp], #4
  65              	.LCFI1:
  66              		.cfi_restore 4
  67              		.cfi_def_cfa_offset 0
  68 0020 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE144:
  72              		.section	.text.init,"ax",%progbits
  73              		.align	1
  74              		.global	init
  75              		.syntax unified
  76              		.thumb
  77              		.thumb_func
  78              		.fpu fpv5-d16
  80              	init:
  81              	.LFB145:
  15:Src/state.c   **** /*******************************************************************
  16:Src/state.c   ****  *                         STATE VARIABLES
  17:Src/state.c   ****  *******************************************************************/ 
  18:Src/state.c   **** /*** GLOBAL ***/
  19:Src/state.c   **** int setup_init = 0;
  20:Src/state.c   **** int critical_errors = 0;
  21:Src/state.c   **** 
  22:Src/state.c   **** /*** FOR INIT STATE ***/
  23:Src/state.c   **** int init_step = 0;
  24:Src/state.c   **** uint32_t init_step_start_time = 0;
  25:Src/state.c   **** uint32_t init_precharge_start_time = 0;
  26:Src/state.c   **** uint32_t init_inv_resp = 0;
  27:Src/state.c   **** 
  28:Src/state.c   **** uint8_t inv_init_response = 0; // bit 0 = inv R -> 0 = no / 1 = YES ---- bit 1 = inv L -> 0 = no / 
  29:Src/state.c   **** // Default state
  30:Src/state.c   **** // Init variables
  31:Src/state.c   **** /*******************************************************************
  32:Src/state.c   ****  *                         START INIT STATE
  33:Src/state.c   ****  *******************************************************************/
  34:Src/state.c   **** void init()
  35:Src/state.c   **** {
ARM GAS  /tmp/ccCPBTWO.s 			page 3


  82              		.loc 1 35 1 is_stmt 1 view -0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  87              	.LCFI2:
  88              		.cfi_def_cfa_offset 40
  89              		.cfi_offset 3, -40
  90              		.cfi_offset 4, -36
  91              		.cfi_offset 5, -32
  92              		.cfi_offset 6, -28
  93              		.cfi_offset 7, -24
  94              		.cfi_offset 8, -20
  95              		.cfi_offset 9, -16
  96              		.cfi_offset 10, -12
  97              		.cfi_offset 11, -8
  98              		.cfi_offset 14, -4
  36:Src/state.c   **** 	if(init_step == 0){
  99              		.loc 1 36 2 view .LVU14
 100              		.loc 1 36 15 is_stmt 0 view .LVU15
 101 0004 574B     		ldr	r3, .L22
 102 0006 1B68     		ldr	r3, [r3]
 103              		.loc 1 36 4 view .LVU16
 104 0008 53B1     		cbz	r3, .L17
  37:Src/state.c   **** 		init_step = 1;
  38:Src/state.c   **** 		/* Send inverter L disable */
  39:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_SX;
  40:Src/state.c   **** 		can3.dataTx[0] = 0x51;
  41:Src/state.c   **** 		can3.dataTx[1] = 0x04;
  42:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  43:Src/state.c   **** 		can3.tx_size = 3;
  44:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  45:Src/state.c   **** 
  46:Src/state.c   **** 		/* Send inverter R disable */
  47:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_DX;
  48:Src/state.c   **** 		can3.dataTx[0] = 0x51;
  49:Src/state.c   **** 		can3.dataTx[1] = 0x04;
  50:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  51:Src/state.c   **** 		can3.tx_size = 3;
  52:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  53:Src/state.c   **** 
  54:Src/state.c   **** 		/* Send req to inverter L presence */
  55:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_SX;
  56:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
  57:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
  58:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  59:Src/state.c   **** 		can3.tx_size = 3;
  60:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  61:Src/state.c   **** 
  62:Src/state.c   **** 		/* Send req to inverter R presence */
  63:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_DX;
  64:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
  65:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
  66:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  67:Src/state.c   **** 		can3.tx_size = 3;
  68:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  69:Src/state.c   **** 
ARM GAS  /tmp/ccCPBTWO.s 			page 4


  70:Src/state.c   **** 		init_step_start_time = count_ms_abs; // save the curret time
  71:Src/state.c   **** 
  72:Src/state.c   **** 	}else if(init_step == 1){
 105              		.loc 1 72 8 is_stmt 1 view .LVU17
 106              		.loc 1 72 10 is_stmt 0 view .LVU18
 107 000a 012B     		cmp	r3, #1
 108 000c 51D0     		beq	.L18
  73:Src/state.c   **** 		if (fifoRxDataCAN_pop(&can1)){
  74:Src/state.c   **** 			switch (can1.rx_id)
  75:Src/state.c   **** 			{
  76:Src/state.c   **** 			case ID_ASK_INV_DX:
  77:Src/state.c   **** 				if(can1.dataRx[0] == 0xE2 && can1.dataRx[1] == 0x01 && can1.dataRx[2] == 0x00 && can1.dataRx[3]
  78:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 0, 1); //set bit 0 to 1
  79:Src/state.c   **** 				}
  80:Src/state.c   **** 				break;
  81:Src/state.c   **** 			case ID_ASK_INV_SX:
  82:Src/state.c   **** 				if(can1.dataRx[0] == 0xE2 && can1.dataRx[1] == 0x01 && can1.dataRx[2] == 0x00 && can1.dataRx[3]
  83:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 1, 1); //set bit 1 to 1
  84:Src/state.c   **** 				}
  85:Src/state.c   **** 			default:
  86:Src/state.c   **** 				break;
  87:Src/state.c   **** 			}
  88:Src/state.c   **** 		}
  89:Src/state.c   **** 		if(inv_init_response == 3){ // means that each inv has responded
  90:Src/state.c   **** 			init_step = 2;
  91:Src/state.c   **** 		}else{
  92:Src/state.c   **** 			if(count_ms_abs - init_step_start_time > 1000 ){ //if is passed more than 1 second -> go ahead
  93:Src/state.c   **** 				/* Send Error to steer */ 
  94:Src/state.c   **** 
  95:Src/state.c   **** 				//TODO: send errors
  96:Src/state.c   **** 
  97:Src/state.c   **** 				init_step = 3;
  98:Src/state.c   **** 			}
  99:Src/state.c   **** 		}
 100:Src/state.c   **** 	}else if(init_step == 2){
 109              		.loc 1 100 8 is_stmt 1 view .LVU19
 110              		.loc 1 100 10 is_stmt 0 view .LVU20
 111 000e 022B     		cmp	r3, #2
 112 0010 00F08780 		beq	.L19
 101:Src/state.c   **** 		/* Send periodical status inv L */
 102:Src/state.c   **** 		can1.tx_id = ID_ASK_INV_SX;
 103:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 104:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 105:Src/state.c   **** 		can1.dataTx[2] = 0xFA; // each 250ms
 106:Src/state.c   **** 		can1.tx_size = 3;
 107:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 108:Src/state.c   **** 
 109:Src/state.c   **** 		/* Send periodical status inv R */
 110:Src/state.c   **** 		can1.tx_id = ID_ASK_INV_DX;
 111:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 112:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 113:Src/state.c   **** 		can1.dataTx[2] = 0xFA; // each 250ms
 114:Src/state.c   **** 		can1.tx_size = 3;
 115:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 116:Src/state.c   **** 
 117:Src/state.c   **** 		init_step = 3;
 118:Src/state.c   **** 	}else if(init_step == 3){
ARM GAS  /tmp/ccCPBTWO.s 			page 5


 113              		.loc 1 118 8 is_stmt 1 view .LVU21
 114              		.loc 1 118 10 is_stmt 0 view .LVU22
 115 0014 032B     		cmp	r3, #3
 116 0016 4AD1     		bne	.L8
 119:Src/state.c   **** 		current_state = STATE_IDLE; // Change state to STATE_IDLE
 117              		.loc 1 119 3 is_stmt 1 view .LVU23
 118              		.loc 1 119 17 is_stmt 0 view .LVU24
 119 0018 534B     		ldr	r3, .L22+4
 120 001a 0122     		movs	r2, #1
 121 001c 1A70     		strb	r2, [r3]
 120:Src/state.c   **** 		/* Send msg to steer of changing state */
 121:Src/state.c   **** 	}
 122:Src/state.c   **** }
 122              		.loc 1 122 1 view .LVU25
 123 001e 46E0     		b	.L8
 124              	.L17:
  37:Src/state.c   **** 		/* Send inverter L disable */
 125              		.loc 1 37 3 is_stmt 1 view .LVU26
  37:Src/state.c   **** 		/* Send inverter L disable */
 126              		.loc 1 37 13 is_stmt 0 view .LVU27
 127 0020 504B     		ldr	r3, .L22
 128 0022 0122     		movs	r2, #1
 129 0024 1A60     		str	r2, [r3]
  39:Src/state.c   **** 		can3.dataTx[0] = 0x51;
 130              		.loc 1 39 3 is_stmt 1 view .LVU28
  39:Src/state.c   **** 		can3.dataTx[0] = 0x51;
 131              		.loc 1 39 14 is_stmt 0 view .LVU29
 132 0026 514C     		ldr	r4, .L22+8
 133 0028 40F20128 		movw	r8, #513
 134 002c C4F82C80 		str	r8, [r4, #44]
  40:Src/state.c   **** 		can3.dataTx[1] = 0x04;
 135              		.loc 1 40 3 is_stmt 1 view .LVU30
  40:Src/state.c   **** 		can3.dataTx[1] = 0x04;
 136              		.loc 1 40 18 is_stmt 0 view .LVU31
 137 0030 4FF0510B 		mov	fp, #81
 138 0034 84F80CB0 		strb	fp, [r4, #12]
  41:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 139              		.loc 1 41 3 is_stmt 1 view .LVU32
  41:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 140              		.loc 1 41 18 is_stmt 0 view .LVU33
 141 0038 4FF00409 		mov	r9, #4
 142 003c 84F80D90 		strb	r9, [r4, #13]
  42:Src/state.c   **** 		can3.tx_size = 3;
 143              		.loc 1 42 3 is_stmt 1 view .LVU34
  42:Src/state.c   **** 		can3.tx_size = 3;
 144              		.loc 1 42 18 is_stmt 0 view .LVU35
 145 0040 0025     		movs	r5, #0
 146 0042 A573     		strb	r5, [r4, #14]
  43:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 147              		.loc 1 43 3 is_stmt 1 view .LVU36
  43:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 148              		.loc 1 43 16 is_stmt 0 view .LVU37
 149 0044 0327     		movs	r7, #3
 150 0046 2760     		str	r7, [r4]
  44:Src/state.c   **** 
 151              		.loc 1 44 3 is_stmt 1 view .LVU38
 152 0048 494E     		ldr	r6, .L22+12
ARM GAS  /tmp/ccCPBTWO.s 			page 6


 153 004a 2946     		mov	r1, r5
 154 004c 3046     		mov	r0, r6
 155 004e FFF7FEFF 		bl	CAN_Send
 156              	.LVL2:
  47:Src/state.c   **** 		can3.dataTx[0] = 0x51;
 157              		.loc 1 47 3 view .LVU39
  47:Src/state.c   **** 		can3.dataTx[0] = 0x51;
 158              		.loc 1 47 14 is_stmt 0 view .LVU40
 159 0052 40F2022A 		movw	r10, #514
 160 0056 C4F82CA0 		str	r10, [r4, #44]
  48:Src/state.c   **** 		can3.dataTx[1] = 0x04;
 161              		.loc 1 48 3 is_stmt 1 view .LVU41
  48:Src/state.c   **** 		can3.dataTx[1] = 0x04;
 162              		.loc 1 48 18 is_stmt 0 view .LVU42
 163 005a 84F80CB0 		strb	fp, [r4, #12]
  49:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 164              		.loc 1 49 3 is_stmt 1 view .LVU43
  49:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 165              		.loc 1 49 18 is_stmt 0 view .LVU44
 166 005e 84F80D90 		strb	r9, [r4, #13]
  50:Src/state.c   **** 		can3.tx_size = 3;
 167              		.loc 1 50 3 is_stmt 1 view .LVU45
  50:Src/state.c   **** 		can3.tx_size = 3;
 168              		.loc 1 50 18 is_stmt 0 view .LVU46
 169 0062 A573     		strb	r5, [r4, #14]
  51:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 170              		.loc 1 51 3 is_stmt 1 view .LVU47
  51:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 171              		.loc 1 51 16 is_stmt 0 view .LVU48
 172 0064 2760     		str	r7, [r4]
  52:Src/state.c   **** 
 173              		.loc 1 52 3 is_stmt 1 view .LVU49
 174 0066 2946     		mov	r1, r5
 175 0068 3046     		mov	r0, r6
 176 006a FFF7FEFF 		bl	CAN_Send
 177              	.LVL3:
  55:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
 178              		.loc 1 55 3 view .LVU50
  55:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
 179              		.loc 1 55 14 is_stmt 0 view .LVU51
 180 006e C4F82C80 		str	r8, [r4, #44]
  56:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
 181              		.loc 1 56 3 is_stmt 1 view .LVU52
  56:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
 182              		.loc 1 56 18 is_stmt 0 view .LVU53
 183 0072 4FF03D09 		mov	r9, #61
 184 0076 84F80C90 		strb	r9, [r4, #12]
  57:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 185              		.loc 1 57 3 is_stmt 1 view .LVU54
  57:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 186              		.loc 1 57 18 is_stmt 0 view .LVU55
 187 007a 4FF0E208 		mov	r8, #226
 188 007e 84F80D80 		strb	r8, [r4, #13]
  58:Src/state.c   **** 		can3.tx_size = 3;
 189              		.loc 1 58 3 is_stmt 1 view .LVU56
  58:Src/state.c   **** 		can3.tx_size = 3;
 190              		.loc 1 58 18 is_stmt 0 view .LVU57
ARM GAS  /tmp/ccCPBTWO.s 			page 7


 191 0082 A573     		strb	r5, [r4, #14]
  59:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 192              		.loc 1 59 3 is_stmt 1 view .LVU58
  59:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 193              		.loc 1 59 16 is_stmt 0 view .LVU59
 194 0084 2760     		str	r7, [r4]
  60:Src/state.c   **** 
 195              		.loc 1 60 3 is_stmt 1 view .LVU60
 196 0086 2946     		mov	r1, r5
 197 0088 3046     		mov	r0, r6
 198 008a FFF7FEFF 		bl	CAN_Send
 199              	.LVL4:
  63:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
 200              		.loc 1 63 3 view .LVU61
  63:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
 201              		.loc 1 63 14 is_stmt 0 view .LVU62
 202 008e C4F82CA0 		str	r10, [r4, #44]
  64:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
 203              		.loc 1 64 3 is_stmt 1 view .LVU63
  64:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
 204              		.loc 1 64 18 is_stmt 0 view .LVU64
 205 0092 84F80C90 		strb	r9, [r4, #12]
  65:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 206              		.loc 1 65 3 is_stmt 1 view .LVU65
  65:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 207              		.loc 1 65 18 is_stmt 0 view .LVU66
 208 0096 84F80D80 		strb	r8, [r4, #13]
  66:Src/state.c   **** 		can3.tx_size = 3;
 209              		.loc 1 66 3 is_stmt 1 view .LVU67
  66:Src/state.c   **** 		can3.tx_size = 3;
 210              		.loc 1 66 18 is_stmt 0 view .LVU68
 211 009a A573     		strb	r5, [r4, #14]
  67:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 212              		.loc 1 67 3 is_stmt 1 view .LVU69
  67:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 213              		.loc 1 67 16 is_stmt 0 view .LVU70
 214 009c 2760     		str	r7, [r4]
  68:Src/state.c   **** 
 215              		.loc 1 68 3 is_stmt 1 view .LVU71
 216 009e 2946     		mov	r1, r5
 217 00a0 3046     		mov	r0, r6
 218 00a2 FFF7FEFF 		bl	CAN_Send
 219              	.LVL5:
  70:Src/state.c   **** 
 220              		.loc 1 70 3 view .LVU72
  70:Src/state.c   **** 
 221              		.loc 1 70 24 is_stmt 0 view .LVU73
 222 00a6 334B     		ldr	r3, .L22+16
 223 00a8 1A68     		ldr	r2, [r3]
 224 00aa 334B     		ldr	r3, .L22+20
 225 00ac 1A60     		str	r2, [r3]
 226              	.L8:
 227              		.loc 1 122 1 view .LVU74
 228 00ae BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 229              	.L18:
  73:Src/state.c   **** 			switch (can1.rx_id)
 230              		.loc 1 73 3 is_stmt 1 view .LVU75
ARM GAS  /tmp/ccCPBTWO.s 			page 8


  73:Src/state.c   **** 			switch (can1.rx_id)
 231              		.loc 1 73 7 is_stmt 0 view .LVU76
 232 00b2 2F48     		ldr	r0, .L22+12
 233 00b4 FFF7FEFF 		bl	fifoRxDataCAN_pop
 234              	.LVL6:
  73:Src/state.c   **** 			switch (can1.rx_id)
 235              		.loc 1 73 6 view .LVU77
 236 00b8 70B1     		cbz	r0, .L12
  74:Src/state.c   **** 			{
 237              		.loc 1 74 4 is_stmt 1 view .LVU78
  74:Src/state.c   **** 			{
 238              		.loc 1 74 16 is_stmt 0 view .LVU79
 239 00ba 2D4B     		ldr	r3, .L22+12
 240 00bc 1B6B     		ldr	r3, [r3, #48]
  74:Src/state.c   **** 			{
 241              		.loc 1 74 4 view .LVU80
 242 00be 40F20122 		movw	r2, #513
 243 00c2 9342     		cmp	r3, r2
 244 00c4 1ED0     		beq	.L13
 245 00c6 40F20222 		movw	r2, #514
 246 00ca 9342     		cmp	r3, r2
 247 00cc 04D1     		bne	.L12
  77:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 0, 1); //set bit 0 to 1
 248              		.loc 1 77 5 is_stmt 1 view .LVU81
  77:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 0, 1); //set bit 0 to 1
 249              		.loc 1 77 83 is_stmt 0 view .LVU82
 250 00ce 284B     		ldr	r3, .L22+12
 251 00d0 5B69     		ldr	r3, [r3, #20]
  77:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 0, 1); //set bit 0 to 1
 252              		.loc 1 77 7 view .LVU83
 253 00d2 B3F5F17F 		cmp	r3, #482
 254 00d6 0FD0     		beq	.L20
 255              	.L12:
  89:Src/state.c   **** 			init_step = 2;
 256              		.loc 1 89 3 is_stmt 1 view .LVU84
  89:Src/state.c   **** 			init_step = 2;
 257              		.loc 1 89 24 is_stmt 0 view .LVU85
 258 00d8 284B     		ldr	r3, .L22+24
 259 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  89:Src/state.c   **** 			init_step = 2;
 260              		.loc 1 89 5 view .LVU86
 261 00dc 032B     		cmp	r3, #3
 262 00de 1CD0     		beq	.L21
  92:Src/state.c   **** 				/* Send Error to steer */ 
 263              		.loc 1 92 4 is_stmt 1 view .LVU87
  92:Src/state.c   **** 				/* Send Error to steer */ 
 264              		.loc 1 92 20 is_stmt 0 view .LVU88
 265 00e0 244B     		ldr	r3, .L22+16
 266 00e2 1B68     		ldr	r3, [r3]
 267 00e4 244A     		ldr	r2, .L22+20
 268 00e6 1268     		ldr	r2, [r2]
 269 00e8 9B1A     		subs	r3, r3, r2
  92:Src/state.c   **** 				/* Send Error to steer */ 
 270              		.loc 1 92 6 view .LVU89
 271 00ea B3F57A7F 		cmp	r3, #1000
 272 00ee DED9     		bls	.L8
  97:Src/state.c   **** 			}
ARM GAS  /tmp/ccCPBTWO.s 			page 9


 273              		.loc 1 97 5 is_stmt 1 view .LVU90
  97:Src/state.c   **** 			}
 274              		.loc 1 97 15 is_stmt 0 view .LVU91
 275 00f0 1C4B     		ldr	r3, .L22
 276 00f2 0322     		movs	r2, #3
 277 00f4 1A60     		str	r2, [r3]
 278 00f6 DAE7     		b	.L8
 279              	.L20:
  78:Src/state.c   **** 				}
 280              		.loc 1 78 6 is_stmt 1 view .LVU92
 281 00f8 0122     		movs	r2, #1
 282 00fa 0021     		movs	r1, #0
 283 00fc 1F48     		ldr	r0, .L22+24
 284 00fe FFF7FEFF 		bl	set_bit_uint8
 285              	.LVL7:
 286 0102 E9E7     		b	.L12
 287              	.L13:
  82:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 1, 1); //set bit 1 to 1
 288              		.loc 1 82 5 view .LVU93
  82:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 1, 1); //set bit 1 to 1
 289              		.loc 1 82 83 is_stmt 0 view .LVU94
 290 0104 1A4B     		ldr	r3, .L22+12
 291 0106 5B69     		ldr	r3, [r3, #20]
  82:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 1, 1); //set bit 1 to 1
 292              		.loc 1 82 7 view .LVU95
 293 0108 B3F5F17F 		cmp	r3, #482
 294 010c E4D1     		bne	.L12
  83:Src/state.c   **** 				}
 295              		.loc 1 83 6 is_stmt 1 view .LVU96
 296 010e 0122     		movs	r2, #1
 297 0110 1146     		mov	r1, r2
 298 0112 1A48     		ldr	r0, .L22+24
 299 0114 FFF7FEFF 		bl	set_bit_uint8
 300              	.LVL8:
 301 0118 DEE7     		b	.L12
 302              	.L21:
  90:Src/state.c   **** 		}else{
 303              		.loc 1 90 4 view .LVU97
  90:Src/state.c   **** 		}else{
 304              		.loc 1 90 14 is_stmt 0 view .LVU98
 305 011a 124B     		ldr	r3, .L22
 306 011c 0222     		movs	r2, #2
 307 011e 1A60     		str	r2, [r3]
 308 0120 C5E7     		b	.L8
 309              	.L19:
 102:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 310              		.loc 1 102 3 is_stmt 1 view .LVU99
 102:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 311              		.loc 1 102 14 is_stmt 0 view .LVU100
 312 0122 134C     		ldr	r4, .L22+12
 313 0124 40F20123 		movw	r3, #513
 314 0128 E362     		str	r3, [r4, #44]
 103:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 315              		.loc 1 103 3 is_stmt 1 view .LVU101
 103:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 316              		.loc 1 103 18 is_stmt 0 view .LVU102
 317 012a 4FF03D08 		mov	r8, #61
ARM GAS  /tmp/ccCPBTWO.s 			page 10


 318 012e 84F80C80 		strb	r8, [r4, #12]
 104:Src/state.c   **** 		can1.dataTx[2] = 0xFA; // each 250ms
 319              		.loc 1 104 3 is_stmt 1 view .LVU103
 104:Src/state.c   **** 		can1.dataTx[2] = 0xFA; // each 250ms
 320              		.loc 1 104 18 is_stmt 0 view .LVU104
 321 0132 4027     		movs	r7, #64
 322 0134 6773     		strb	r7, [r4, #13]
 105:Src/state.c   **** 		can1.tx_size = 3;
 323              		.loc 1 105 3 is_stmt 1 view .LVU105
 105:Src/state.c   **** 		can1.tx_size = 3;
 324              		.loc 1 105 18 is_stmt 0 view .LVU106
 325 0136 FA26     		movs	r6, #250
 326 0138 A673     		strb	r6, [r4, #14]
 106:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 327              		.loc 1 106 3 is_stmt 1 view .LVU107
 106:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 328              		.loc 1 106 16 is_stmt 0 view .LVU108
 329 013a 0325     		movs	r5, #3
 330 013c 2560     		str	r5, [r4]
 107:Src/state.c   **** 
 331              		.loc 1 107 3 is_stmt 1 view .LVU109
 332 013e 0021     		movs	r1, #0
 333 0140 2046     		mov	r0, r4
 334 0142 FFF7FEFF 		bl	CAN_Send
 335              	.LVL9:
 110:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 336              		.loc 1 110 3 view .LVU110
 110:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 337              		.loc 1 110 14 is_stmt 0 view .LVU111
 338 0146 40F20223 		movw	r3, #514
 339 014a E362     		str	r3, [r4, #44]
 111:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 340              		.loc 1 111 3 is_stmt 1 view .LVU112
 111:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 341              		.loc 1 111 18 is_stmt 0 view .LVU113
 342 014c 84F80C80 		strb	r8, [r4, #12]
 112:Src/state.c   **** 		can1.dataTx[2] = 0xFA; // each 250ms
 343              		.loc 1 112 3 is_stmt 1 view .LVU114
 112:Src/state.c   **** 		can1.dataTx[2] = 0xFA; // each 250ms
 344              		.loc 1 112 18 is_stmt 0 view .LVU115
 345 0150 6773     		strb	r7, [r4, #13]
 113:Src/state.c   **** 		can1.tx_size = 3;
 346              		.loc 1 113 3 is_stmt 1 view .LVU116
 113:Src/state.c   **** 		can1.tx_size = 3;
 347              		.loc 1 113 18 is_stmt 0 view .LVU117
 348 0152 A673     		strb	r6, [r4, #14]
 114:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 349              		.loc 1 114 3 is_stmt 1 view .LVU118
 114:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 350              		.loc 1 114 16 is_stmt 0 view .LVU119
 351 0154 2560     		str	r5, [r4]
 115:Src/state.c   **** 
 352              		.loc 1 115 3 is_stmt 1 view .LVU120
 353 0156 0021     		movs	r1, #0
 354 0158 2046     		mov	r0, r4
 355 015a FFF7FEFF 		bl	CAN_Send
 356              	.LVL10:
ARM GAS  /tmp/ccCPBTWO.s 			page 11


 117:Src/state.c   **** 	}else if(init_step == 3){
 357              		.loc 1 117 3 view .LVU121
 117:Src/state.c   **** 	}else if(init_step == 3){
 358              		.loc 1 117 13 is_stmt 0 view .LVU122
 359 015e 014B     		ldr	r3, .L22
 360 0160 1D60     		str	r5, [r3]
 361 0162 A4E7     		b	.L8
 362              	.L23:
 363              		.align	2
 364              	.L22:
 365 0164 00000000 		.word	.LANCHOR0
 366 0168 00000000 		.word	current_state
 367 016c 00000000 		.word	can3
 368 0170 00000000 		.word	can1
 369 0174 00000000 		.word	count_ms_abs
 370 0178 00000000 		.word	.LANCHOR1
 371 017c 00000000 		.word	.LANCHOR2
 372              		.cfi_endproc
 373              	.LFE145:
 375              		.section	.text.setup,"ax",%progbits
 376              		.align	1
 377              		.global	setup
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv5-d16
 383              	setup:
 384              	.LFB147:
 123:Src/state.c   **** /*******************************************************************
 124:Src/state.c   ****  *                         END INIT STATE
 125:Src/state.c   ****  *******************************************************************/
 126:Src/state.c   **** /*******************************************************************
 127:Src/state.c   ****  *                        START IDLE STATE
 128:Src/state.c   ****  *******************************************************************/
 129:Src/state.c   **** void idle()
 130:Src/state.c   **** {
 131:Src/state.c   **** 	/*if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin) == GPIO_PIN_SET){
 132:Src/state.c   **** 		sprintf(txt,"%d\r\n%d\r\n%d\r\n%d\r\n",accel.pot1_val,accel.pot2_val,brake.pot1_val,brake.pot2_va
 133:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)txt,strlen(txt),10);
 134:Src/state.c   **** 		res_open = f_open(&pot_values_f, (TCHAR const*)&filename_pot, FA_OPEN_ALWAYS | FA_WRITE );
 135:Src/state.c   **** 		f_write(&pot_values_f,(TCHAR const*)&txt,strlen(txt), &byteswritten);
 136:Src/state.c   **** 		f_close(&pot_values_f);
 137:Src/state.c   **** 		HAL_Delay(1000);
 138:Src/state.c   **** 	}*/
 139:Src/state.c   **** 	if (debug_msg_arrived == 1)
 140:Src/state.c   **** 	{
 141:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
 142:Src/state.c   **** 		debug_operations();
 143:Src/state.c   **** 	}
 144:Src/state.c   **** 	if (fifoRxDataCAN_pop(&can1)) // Check if there are messages on CAN1 fifo
 145:Src/state.c   **** 	{
 146:Src/state.c   **** 		switch (can1.rx_id)
 147:Src/state.c   **** 		{
 148:Src/state.c   **** 		case ID_ASK_STATE:
 149:Src/state.c   **** 			can1.dataTx[0] = (uint8_t)current_state;
 150:Src/state.c   **** 			can1.tx_size = 1;
 151:Src/state.c   **** 			can1.tx_id = ID_ACU_1;
ARM GAS  /tmp/ccCPBTWO.s 			page 12


 152:Src/state.c   **** 			CAN_Send(&can1, normalPriority);
 153:Src/state.c   **** 			break;
 154:Src/state.c   **** 		case ID_ASK_INV_DX:
 155:Src/state.c   **** 			break;
 156:Src/state.c   **** 		case ID_ASK_INV_SX:
 157:Src/state.c   **** 			break;
 158:Src/state.c   **** 		case ID_BMS_HV:
 159:Src/state.c   **** 			if (can1.dataRx[0] == 0x03)
 160:Src/state.c   **** 			{
 161:Src/state.c   **** 				// Turn ON tractive system
 162:Src/state.c   **** 				if(critical_errors == 0){
 163:Src/state.c   **** 
 164:Src/state.c   **** 				}
 165:Src/state.c   **** 			}
 166:Src/state.c   **** 			else if (can1.dataRx[0] == 0x04)
 167:Src/state.c   **** 			{
 168:Src/state.c   **** 				// Turn OFF tractive system
 169:Src/state.c   **** 			}
 170:Src/state.c   **** 			break;
 171:Src/state.c   **** 		case ID_BMS_LV:
 172:Src/state.c   **** 			break;
 173:Src/state.c   **** 		case ID_STEERING_WEEL_1:
 174:Src/state.c   **** 			switch (can1.dataRx[0])
 175:Src/state.c   **** 			{
 176:Src/state.c   **** 			case REQUEST_TS_ON:
 177:Src/state.c   **** 				//If req Tractive System ON msg arrives -> go to setup state
 178:Src/state.c   **** 				current_state = STATE_SETUP;
 179:Src/state.c   **** 				break;
 180:Src/state.c   **** 			default:
 181:Src/state.c   **** 				break;
 182:Src/state.c   **** 			}
 183:Src/state.c   **** 			break;
 184:Src/state.c   **** 		case ID_ATC_POT:
 185:Src/state.c   **** 			atc_pot_operations();
 186:Src/state.c   **** 			break;
 187:Src/state.c   **** 		default:
 188:Src/state.c   **** 			break;
 189:Src/state.c   **** 		}
 190:Src/state.c   **** 	}
 191:Src/state.c   **** }
 192:Src/state.c   **** /*******************************************************************
 193:Src/state.c   ****  *                         END IDLE STATE
 194:Src/state.c   ****  *******************************************************************/
 195:Src/state.c   **** /*******************************************************************
 196:Src/state.c   ****  *                        START SETUP STATE
 197:Src/state.c   ****  *******************************************************************/
 198:Src/state.c   **** void setup()
 199:Src/state.c   **** {
 385              		.loc 1 199 1 is_stmt 1 view -0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
 388              		@ frame_needed = 0, uses_anonymous_args = 0
 200:Src/state.c   **** 	if(setup_init == 0){
 389              		.loc 1 200 2 view .LVU124
 390              		.loc 1 200 16 is_stmt 0 view .LVU125
 391 0000 434B     		ldr	r3, .L41
 392 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccCPBTWO.s 			page 13


 393              		.loc 1 200 4 view .LVU126
 394 0004 73B9     		cbnz	r3, .L25
 201:Src/state.c   **** 		setup_init = 1; //set that setup procedure is started
 395              		.loc 1 201 3 is_stmt 1 view .LVU127
 396              		.loc 1 201 14 is_stmt 0 view .LVU128
 397 0006 424B     		ldr	r3, .L41
 398 0008 0122     		movs	r2, #1
 399 000a 1A60     		str	r2, [r3]
 202:Src/state.c   **** 		if((atc_connected == 1) && (critical_errors = 0)){
 400              		.loc 1 202 3 is_stmt 1 view .LVU129
 401              		.loc 1 202 21 is_stmt 0 view .LVU130
 402 000c 414B     		ldr	r3, .L41+4
 403 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 404              		.loc 1 202 5 view .LVU131
 405 0010 9342     		cmp	r3, r2
 406 0012 03D0     		beq	.L36
 407              	.L26:
 203:Src/state.c   **** 			//If Analog to CAN device is connected, brake is pressed and there aren't critical erros -> 
 204:Src/state.c   **** 				//-> send pre-charge request to HV
 205:Src/state.c   **** 			can1.tx_id = ID_REQ_PRCH;
 206:Src/state.c   **** 			can1.dataTx[0] = 1;
 207:Src/state.c   **** 			can1.tx_size = 1;
 208:Src/state.c   **** 			CAN_Send(&can1, normalPriority);
 209:Src/state.c   **** 			init_precharge_start_time = count_ms_abs; //take the time when the pre-charge is sent
 210:Src/state.c   **** 		}else{
 211:Src/state.c   **** 			//Can't turn on TS caused by some errors
 212:Src/state.c   **** 			current_state = STATE_IDLE; //return to idle state
 408              		.loc 1 212 4 is_stmt 1 view .LVU132
 409              		.loc 1 212 18 is_stmt 0 view .LVU133
 410 0014 404B     		ldr	r3, .L41+8
 411 0016 0122     		movs	r2, #1
 412 0018 1A70     		strb	r2, [r3]
 413 001a 7047     		bx	lr
 414              	.L36:
 202:Src/state.c   **** 		if((atc_connected == 1) && (critical_errors = 0)){
 415              		.loc 1 202 47 discriminator 1 view .LVU134
 416 001c 3F4B     		ldr	r3, .L41+12
 417 001e 0022     		movs	r2, #0
 418 0020 1A60     		str	r2, [r3]
 419 0022 F7E7     		b	.L26
 420              	.L25:
 199:Src/state.c   **** 	if(setup_init == 0){
 421              		.loc 1 199 1 view .LVU135
 422 0024 70B5     		push	{r4, r5, r6, lr}
 423              	.LCFI3:
 424              		.cfi_def_cfa_offset 16
 425              		.cfi_offset 4, -16
 426              		.cfi_offset 5, -12
 427              		.cfi_offset 6, -8
 428              		.cfi_offset 14, -4
 213:Src/state.c   **** 			// TODO: report error to steer
 214:Src/state.c   **** 		}
 215:Src/state.c   **** 	}else if(setup_init == 1){
 429              		.loc 1 215 8 is_stmt 1 view .LVU136
 430              		.loc 1 215 10 is_stmt 0 view .LVU137
 431 0026 012B     		cmp	r3, #1
 432 0028 04D0     		beq	.L37
ARM GAS  /tmp/ccCPBTWO.s 			page 14


 216:Src/state.c   **** 		if(count_ms_abs - init_precharge_start_time > 5000){
 217:Src/state.c   **** 			// report error
 218:Src/state.c   **** 			current_state = STATE_IDLE;
 219:Src/state.c   **** 		}else if (fifoRxDataCAN_pop(&can1)){
 220:Src/state.c   **** 			switch(can1.rx_id){
 221:Src/state.c   **** 				case ID_BMS_HV:
 222:Src/state.c   **** 					if(can1.dataRx[0] == 1){ //Pre-cherge ended sucessfully
 223:Src/state.c   **** 						setup_init = 2;
 224:Src/state.c   **** 					}else{ //Pre-charge failed
 225:Src/state.c   **** 						current_state = STATE_IDLE;
 226:Src/state.c   **** 						//TODO: send error to steer
 227:Src/state.c   **** 					}
 228:Src/state.c   **** 			}
 229:Src/state.c   **** 		}
 230:Src/state.c   **** 	}else if(setup_init == 2){
 433              		.loc 1 230 8 is_stmt 1 view .LVU138
 434              		.loc 1 230 10 is_stmt 0 view .LVU139
 435 002a 022B     		cmp	r3, #2
 436 002c 24D0     		beq	.L38
 231:Src/state.c   **** 		//send command inverter enable
 232:Src/state.c   **** 		can1.tx_id = ID_REQ_INV_DX;
 233:Src/state.c   **** 		can1.dataTx[0] = 0x51;
 234:Src/state.c   **** 		can1.dataTx[1] = 0x00;
 235:Src/state.c   **** 		can1.dataTx[2] = 0x00;
 236:Src/state.c   **** 		can1.tx_size = 3;
 237:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 238:Src/state.c   **** 
 239:Src/state.c   **** 		//send request inverter enable
 240:Src/state.c   **** 		can1.tx_id = ID_ASK_INV_DX;
 241:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 242:Src/state.c   **** 		can1.dataTx[1] = 0xE8;
 243:Src/state.c   **** 		can1.dataTx[2] = 0x00;
 244:Src/state.c   **** 		can1.tx_size = 3;
 245:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 246:Src/state.c   **** 
 247:Src/state.c   **** 		setup_init = 3;
 248:Src/state.c   **** 
 249:Src/state.c   **** 		init_inv_resp = count_ms_abs;
 250:Src/state.c   **** 	}else if(setup_init == 3){
 437              		.loc 1 250 8 is_stmt 1 view .LVU140
 438              		.loc 1 250 10 is_stmt 0 view .LVU141
 439 002e 032B     		cmp	r3, #3
 440 0030 45D0     		beq	.L39
 441              	.L24:
 251:Src/state.c   **** 		if(count_ms_abs - init_inv_resp > 10000){
 252:Src/state.c   **** 			// report error
 253:Src/state.c   **** 			//send pre-charge OFF req
 254:Src/state.c   **** 			can1.tx_id = ID_REQ_PRCH;
 255:Src/state.c   **** 			can1.dataTx[0] = 0x00;
 256:Src/state.c   **** 			can1.tx_size = 1;
 257:Src/state.c   **** 			CAN_Send(&can1, highPriority);
 258:Src/state.c   **** 			current_state = STATE_IDLE;
 259:Src/state.c   **** 		}else if (fifoRxDataCAN_pop(&can1)){
 260:Src/state.c   **** 			switch(can1.rx_id){
 261:Src/state.c   **** 				case ID_REQ_INV_DX:
 262:Src/state.c   **** 					if(can1.dataRx[0] == 0xE0 && can1.dataRx[1] == 0x01 && can1.dataRx[2] == 0x00 && can1.dataRx[3
 263:Src/state.c   **** 						setup_init = 4;
ARM GAS  /tmp/ccCPBTWO.s 			page 15


 264:Src/state.c   **** 					}
 265:Src/state.c   **** 			}			
 266:Src/state.c   **** 		}
 267:Src/state.c   **** 	}else if(setup_init == 4){
 268:Src/state.c   **** 		// In this state all is ready for run //
 269:Src/state.c   **** 		// Waiting for run signal from steer //
 270:Src/state.c   **** 		
 271:Src/state.c   **** 	}
 272:Src/state.c   **** 	/*if (fifoRxDataCAN_pop(&can1))
 273:Src/state.c   **** 	{
 274:Src/state.c   **** 		switch (can1.rx_id)
 275:Src/state.c   **** 		{
 276:Src/state.c   **** 		case ID_STEERING_WEEL_1:
 277:Src/state.c   **** 			switch (can1.dataRx[0])
 278:Src/state.c   **** 			{
 279:Src/state.c   **** 			//----- change state to run -----//
 280:Src/state.c   **** 			case 5:
 281:Src/state.c   **** 				// If inverter are ON and Brake is Pressed
 282:Src/state.c   **** 				current_state = STATE_RUN;
 283:Src/state.c   **** 				can1.tx_id = ID_ACU_2;
 284:Src/state.c   **** 				can1.dataRx[0] = 5;
 285:Src/state.c   **** 				can1.tx_size = 1;
 286:Src/state.c   **** 				CAN_Send(&can1, normalPriority);
 287:Src/state.c   **** 				break;
 288:Src/state.c   **** 			// Turn On inverter Dx
 289:Src/state.c   **** 			case 8:
 290:Src/state.c   **** 				// If Inverter Temp < 80
 291:Src/state.c   **** 				break;
 292:Src/state.c   **** 			// Turn On inverter Sx
 293:Src/state.c   **** 			case 9:
 294:Src/state.c   **** 				// if Iverter Temp < 80
 295:Src/state.c   **** 				break;
 296:Src/state.c   **** 			default:
 297:Src/state.c   **** 				break;
 298:Src/state.c   **** 			}
 299:Src/state.c   **** 			break;
 300:Src/state.c   **** 		case ID_BMS_HV:
 301:Src/state.c   **** 			switch (can1.dataRx[0])
 302:Src/state.c   **** 			{
 303:Src/state.c   **** 			case 4:
 304:Src/state.c   **** 				// Shutdown Confirmed
 305:Src/state.c   **** 				break;
 306:Src/state.c   **** 			case 8:
 307:Src/state.c   **** 				// Shutdown from Error
 308:Src/state.c   **** 				break;
 309:Src/state.c   **** 			}
 310:Src/state.c   **** 			break;
 311:Src/state.c   **** 		case ID_ATC_POT:
 312:Src/state.c   **** 			atc_pot_operations();
 313:Src/state.c   **** 			break;
 314:Src/state.c   **** 		case ID_REQ_INV_DX:
 315:Src/state.c   **** 			switch (can1.dataRx[0])
 316:Src/state.c   **** 			{
 317:Src/state.c   **** 			case 0x4A:
 318:Src/state.c   **** 				// Update Inverter Dx Temp = (can1.RxData[2] * 256 + can1.RxData[1] - 15797) / 112.1182
 319:Src/state.c   **** 				break;
 320:Src/state.c   **** 			case 0xD8:
ARM GAS  /tmp/ccCPBTWO.s 			page 16


 321:Src/state.c   **** 				if (can1.dataRx[2] == 0x0C  && request of shutdown == false)
 322:Src/state.c   **** 				{
 323:Src/state.c   **** 					can1.dataTx[0] = 0x09;
 324:Src/state.c   **** 					can1.dataTx[1] = 0;
 325:Src/state.c   **** 					can1.dataTx[2] = 0;
 326:Src/state.c   **** 					can1.dataTx[3] = 0;
 327:Src/state.c   **** 					can1.dataTx[4] = 0;
 328:Src/state.c   **** 					can1.dataTx[5] = 0;
 329:Src/state.c   **** 					can1.dataTx[6] = 0;
 330:Src/state.c   **** 					can1.dataTx[7] = 0;
 331:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 332:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 333:Src/state.c   **** 					// Inverter Dx true
 334:Src/state.c   **** 				}
 335:Src/state.c   **** 				else
 336:Src/state.c   **** 				{
 337:Src/state.c   **** 					can1.dataTx[0] = 0xD0;
 338:Src/state.c   **** 					can1.dataTx[1] = 0;
 339:Src/state.c   **** 					can1.dataTx[2] = 0;
 340:Src/state.c   **** 					can1.dataTx[3] = 0;
 341:Src/state.c   **** 					can1.dataTx[4] = 0;
 342:Src/state.c   **** 					can1.dataTx[5] = 0;
 343:Src/state.c   **** 					can1.dataTx[6] = 0;
 344:Src/state.c   **** 					can1.dataTx[7] = 0;
 345:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 346:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 347:Src/state.c   **** 					// Inverter Dx false
 348:Src/state.c   **** 				}
 349:Src/state.c   **** 				break;
 350:Src/state.c   **** 			}
 351:Src/state.c   **** 			break;
 352:Src/state.c   **** 		case ID_REQ_INV_SX:
 353:Src/state.c   **** 			switch (can1.dataRx[0])
 354:Src/state.c   **** 			{
 355:Src/state.c   **** 			case 0x4A:
 356:Src/state.c   **** 				// Update Inverter Sx Temp = (can1.RxData[2] * 256 + can1.RxData[1] - 15797) / 112.1182
 357:Src/state.c   **** 				break;
 358:Src/state.c   **** 			case 0xD8:
 359:Src/state.c   **** 				if (can1.dataRx[2] == 0x0C  && request of shutdown == false)
 360:Src/state.c   **** 				{
 361:Src/state.c   **** 					can1.dataTx[0] = 0x08;
 362:Src/state.c   **** 					can1.dataTx[1] = 0;
 363:Src/state.c   **** 					can1.dataTx[2] = 0;
 364:Src/state.c   **** 					can1.dataTx[3] = 0;
 365:Src/state.c   **** 					can1.dataTx[4] = 0;
 366:Src/state.c   **** 					can1.dataTx[5] = 0;
 367:Src/state.c   **** 					can1.dataTx[6] = 0;
 368:Src/state.c   **** 					can1.dataTx[7] = 0;
 369:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 370:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 371:Src/state.c   **** 					// Inverter Sx true
 372:Src/state.c   **** 				}
 373:Src/state.c   **** 				else
 374:Src/state.c   **** 				{
 375:Src/state.c   **** 					can1.dataTx[0] = 0x0C;
 376:Src/state.c   **** 					can1.dataTx[1] = 0;
 377:Src/state.c   **** 					can1.dataTx[2] = 0;
ARM GAS  /tmp/ccCPBTWO.s 			page 17


 378:Src/state.c   **** 					can1.dataTx[3] = 0;
 379:Src/state.c   **** 					can1.dataTx[4] = 0;
 380:Src/state.c   **** 					can1.dataTx[5] = 0;
 381:Src/state.c   **** 					can1.dataTx[6] = 0;
 382:Src/state.c   **** 					can1.dataTx[7] = 0;
 383:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 384:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 385:Src/state.c   **** 					// Inverter Sx false
 386:Src/state.c   **** 				}
 387:Src/state.c   **** 				break;
 388:Src/state.c   **** 			}
 389:Src/state.c   **** 			break;
 390:Src/state.c   **** 		default:
 391:Src/state.c   **** 			break;
 392:Src/state.c   **** 		}
 393:Src/state.c   **** 	}*/
 394:Src/state.c   **** }
 442              		.loc 1 394 1 view .LVU142
 443 0032 70BD     		pop	{r4, r5, r6, pc}
 444              	.L37:
 216:Src/state.c   **** 			// report error
 445              		.loc 1 216 3 is_stmt 1 view .LVU143
 216:Src/state.c   **** 			// report error
 446              		.loc 1 216 19 is_stmt 0 view .LVU144
 447 0034 3A4B     		ldr	r3, .L41+16
 448 0036 1B68     		ldr	r3, [r3]
 449 0038 3A4A     		ldr	r2, .L41+20
 450 003a 1268     		ldr	r2, [r2]
 451 003c 9B1A     		subs	r3, r3, r2
 216:Src/state.c   **** 			// report error
 452              		.loc 1 216 5 view .LVU145
 453 003e 41F28832 		movw	r2, #5000
 454 0042 9342     		cmp	r3, r2
 455 0044 03D9     		bls	.L29
 218:Src/state.c   **** 		}else if (fifoRxDataCAN_pop(&can1)){
 456              		.loc 1 218 4 is_stmt 1 view .LVU146
 218:Src/state.c   **** 		}else if (fifoRxDataCAN_pop(&can1)){
 457              		.loc 1 218 18 is_stmt 0 view .LVU147
 458 0046 344B     		ldr	r3, .L41+8
 459 0048 0122     		movs	r2, #1
 460 004a 1A70     		strb	r2, [r3]
 461 004c F1E7     		b	.L24
 462              	.L29:
 219:Src/state.c   **** 			switch(can1.rx_id){
 463              		.loc 1 219 9 is_stmt 1 view .LVU148
 219:Src/state.c   **** 			switch(can1.rx_id){
 464              		.loc 1 219 13 is_stmt 0 view .LVU149
 465 004e 3648     		ldr	r0, .L41+24
 466 0050 FFF7FEFF 		bl	fifoRxDataCAN_pop
 467              	.LVL11:
 219:Src/state.c   **** 			switch(can1.rx_id){
 468              		.loc 1 219 12 view .LVU150
 469 0054 0028     		cmp	r0, #0
 470 0056 ECD0     		beq	.L24
 220:Src/state.c   **** 				case ID_BMS_HV:
 471              		.loc 1 220 4 is_stmt 1 view .LVU151
 220:Src/state.c   **** 				case ID_BMS_HV:
ARM GAS  /tmp/ccCPBTWO.s 			page 18


 472              		.loc 1 220 15 is_stmt 0 view .LVU152
 473 0058 334B     		ldr	r3, .L41+24
 474 005a 1B6B     		ldr	r3, [r3, #48]
 220:Src/state.c   **** 				case ID_BMS_HV:
 475              		.loc 1 220 4 view .LVU153
 476 005c AA2B     		cmp	r3, #170
 477 005e E8D1     		bne	.L24
 222:Src/state.c   **** 						setup_init = 2;
 478              		.loc 1 222 6 is_stmt 1 view .LVU154
 222:Src/state.c   **** 						setup_init = 2;
 479              		.loc 1 222 20 is_stmt 0 view .LVU155
 480 0060 314B     		ldr	r3, .L41+24
 481 0062 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 222:Src/state.c   **** 						setup_init = 2;
 482              		.loc 1 222 8 view .LVU156
 483 0064 012B     		cmp	r3, #1
 484 0066 03D0     		beq	.L40
 225:Src/state.c   **** 						//TODO: send error to steer
 485              		.loc 1 225 7 is_stmt 1 view .LVU157
 225:Src/state.c   **** 						//TODO: send error to steer
 486              		.loc 1 225 21 is_stmt 0 view .LVU158
 487 0068 2B4B     		ldr	r3, .L41+8
 488 006a 0122     		movs	r2, #1
 489 006c 1A70     		strb	r2, [r3]
 490 006e E0E7     		b	.L24
 491              	.L40:
 223:Src/state.c   **** 					}else{ //Pre-charge failed
 492              		.loc 1 223 7 is_stmt 1 view .LVU159
 223:Src/state.c   **** 					}else{ //Pre-charge failed
 493              		.loc 1 223 18 is_stmt 0 view .LVU160
 494 0070 274B     		ldr	r3, .L41
 495 0072 0222     		movs	r2, #2
 496 0074 1A60     		str	r2, [r3]
 497 0076 DCE7     		b	.L24
 498              	.L38:
 232:Src/state.c   **** 		can1.dataTx[0] = 0x51;
 499              		.loc 1 232 3 is_stmt 1 view .LVU161
 232:Src/state.c   **** 		can1.dataTx[0] = 0x51;
 500              		.loc 1 232 14 is_stmt 0 view .LVU162
 501 0078 2B4C     		ldr	r4, .L41+24
 502 007a 4FF4C173 		mov	r3, #386
 503 007e E362     		str	r3, [r4, #44]
 233:Src/state.c   **** 		can1.dataTx[1] = 0x00;
 504              		.loc 1 233 3 is_stmt 1 view .LVU163
 233:Src/state.c   **** 		can1.dataTx[1] = 0x00;
 505              		.loc 1 233 18 is_stmt 0 view .LVU164
 506 0080 5123     		movs	r3, #81
 507 0082 2373     		strb	r3, [r4, #12]
 234:Src/state.c   **** 		can1.dataTx[2] = 0x00;
 508              		.loc 1 234 3 is_stmt 1 view .LVU165
 234:Src/state.c   **** 		can1.dataTx[2] = 0x00;
 509              		.loc 1 234 18 is_stmt 0 view .LVU166
 510 0084 0025     		movs	r5, #0
 511 0086 6573     		strb	r5, [r4, #13]
 235:Src/state.c   **** 		can1.tx_size = 3;
 512              		.loc 1 235 3 is_stmt 1 view .LVU167
 235:Src/state.c   **** 		can1.tx_size = 3;
ARM GAS  /tmp/ccCPBTWO.s 			page 19


 513              		.loc 1 235 18 is_stmt 0 view .LVU168
 514 0088 A573     		strb	r5, [r4, #14]
 236:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 515              		.loc 1 236 3 is_stmt 1 view .LVU169
 236:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 516              		.loc 1 236 16 is_stmt 0 view .LVU170
 517 008a 0326     		movs	r6, #3
 518 008c 2660     		str	r6, [r4]
 237:Src/state.c   **** 
 519              		.loc 1 237 3 is_stmt 1 view .LVU171
 520 008e 2946     		mov	r1, r5
 521 0090 2046     		mov	r0, r4
 522 0092 FFF7FEFF 		bl	CAN_Send
 523              	.LVL12:
 240:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 524              		.loc 1 240 3 view .LVU172
 240:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 525              		.loc 1 240 14 is_stmt 0 view .LVU173
 526 0096 40F20223 		movw	r3, #514
 527 009a E362     		str	r3, [r4, #44]
 241:Src/state.c   **** 		can1.dataTx[1] = 0xE8;
 528              		.loc 1 241 3 is_stmt 1 view .LVU174
 241:Src/state.c   **** 		can1.dataTx[1] = 0xE8;
 529              		.loc 1 241 18 is_stmt 0 view .LVU175
 530 009c 3D23     		movs	r3, #61
 531 009e 2373     		strb	r3, [r4, #12]
 242:Src/state.c   **** 		can1.dataTx[2] = 0x00;
 532              		.loc 1 242 3 is_stmt 1 view .LVU176
 242:Src/state.c   **** 		can1.dataTx[2] = 0x00;
 533              		.loc 1 242 18 is_stmt 0 view .LVU177
 534 00a0 E823     		movs	r3, #232
 535 00a2 6373     		strb	r3, [r4, #13]
 243:Src/state.c   **** 		can1.tx_size = 3;
 536              		.loc 1 243 3 is_stmt 1 view .LVU178
 243:Src/state.c   **** 		can1.tx_size = 3;
 537              		.loc 1 243 18 is_stmt 0 view .LVU179
 538 00a4 A573     		strb	r5, [r4, #14]
 244:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 539              		.loc 1 244 3 is_stmt 1 view .LVU180
 244:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 540              		.loc 1 244 16 is_stmt 0 view .LVU181
 541 00a6 2660     		str	r6, [r4]
 245:Src/state.c   **** 
 542              		.loc 1 245 3 is_stmt 1 view .LVU182
 543 00a8 2946     		mov	r1, r5
 544 00aa 2046     		mov	r0, r4
 545 00ac FFF7FEFF 		bl	CAN_Send
 546              	.LVL13:
 247:Src/state.c   **** 
 547              		.loc 1 247 3 view .LVU183
 247:Src/state.c   **** 
 548              		.loc 1 247 14 is_stmt 0 view .LVU184
 549 00b0 174B     		ldr	r3, .L41
 550 00b2 1E60     		str	r6, [r3]
 249:Src/state.c   **** 	}else if(setup_init == 3){
 551              		.loc 1 249 3 is_stmt 1 view .LVU185
 249:Src/state.c   **** 	}else if(setup_init == 3){
ARM GAS  /tmp/ccCPBTWO.s 			page 20


 552              		.loc 1 249 17 is_stmt 0 view .LVU186
 553 00b4 1A4B     		ldr	r3, .L41+16
 554 00b6 1A68     		ldr	r2, [r3]
 555 00b8 1C4B     		ldr	r3, .L41+28
 556 00ba 1A60     		str	r2, [r3]
 557 00bc B9E7     		b	.L24
 558              	.L39:
 251:Src/state.c   **** 			// report error
 559              		.loc 1 251 3 is_stmt 1 view .LVU187
 251:Src/state.c   **** 			// report error
 560              		.loc 1 251 19 is_stmt 0 view .LVU188
 561 00be 184B     		ldr	r3, .L41+16
 562 00c0 1B68     		ldr	r3, [r3]
 563 00c2 1A4A     		ldr	r2, .L41+28
 564 00c4 1268     		ldr	r2, [r2]
 565 00c6 9B1A     		subs	r3, r3, r2
 251:Src/state.c   **** 			// report error
 566              		.loc 1 251 5 view .LVU189
 567 00c8 42F21072 		movw	r2, #10000
 568 00cc 9342     		cmp	r3, r2
 569 00ce 0CD9     		bls	.L32
 254:Src/state.c   **** 			can1.dataTx[0] = 0x00;
 570              		.loc 1 254 4 is_stmt 1 view .LVU190
 254:Src/state.c   **** 			can1.dataTx[0] = 0x00;
 571              		.loc 1 254 15 is_stmt 0 view .LVU191
 572 00d0 1548     		ldr	r0, .L41+24
 573 00d2 B423     		movs	r3, #180
 574 00d4 C362     		str	r3, [r0, #44]
 255:Src/state.c   **** 			can1.tx_size = 1;
 575              		.loc 1 255 4 is_stmt 1 view .LVU192
 255:Src/state.c   **** 			can1.tx_size = 1;
 576              		.loc 1 255 19 is_stmt 0 view .LVU193
 577 00d6 0023     		movs	r3, #0
 578 00d8 0373     		strb	r3, [r0, #12]
 256:Src/state.c   **** 			CAN_Send(&can1, highPriority);
 579              		.loc 1 256 4 is_stmt 1 view .LVU194
 256:Src/state.c   **** 			CAN_Send(&can1, highPriority);
 580              		.loc 1 256 17 is_stmt 0 view .LVU195
 581 00da 0124     		movs	r4, #1
 582 00dc 0460     		str	r4, [r0]
 257:Src/state.c   **** 			current_state = STATE_IDLE;
 583              		.loc 1 257 4 is_stmt 1 view .LVU196
 584 00de 2146     		mov	r1, r4
 585 00e0 FFF7FEFF 		bl	CAN_Send
 586              	.LVL14:
 258:Src/state.c   **** 		}else if (fifoRxDataCAN_pop(&can1)){
 587              		.loc 1 258 4 view .LVU197
 258:Src/state.c   **** 		}else if (fifoRxDataCAN_pop(&can1)){
 588              		.loc 1 258 18 is_stmt 0 view .LVU198
 589 00e4 0C4B     		ldr	r3, .L41+8
 590 00e6 1C70     		strb	r4, [r3]
 591 00e8 A3E7     		b	.L24
 592              	.L32:
 259:Src/state.c   **** 			switch(can1.rx_id){
 593              		.loc 1 259 9 is_stmt 1 view .LVU199
 259:Src/state.c   **** 			switch(can1.rx_id){
 594              		.loc 1 259 13 is_stmt 0 view .LVU200
ARM GAS  /tmp/ccCPBTWO.s 			page 21


 595 00ea 0F48     		ldr	r0, .L41+24
 596 00ec FFF7FEFF 		bl	fifoRxDataCAN_pop
 597              	.LVL15:
 259:Src/state.c   **** 			switch(can1.rx_id){
 598              		.loc 1 259 12 view .LVU201
 599 00f0 0028     		cmp	r0, #0
 600 00f2 9ED0     		beq	.L24
 260:Src/state.c   **** 				case ID_REQ_INV_DX:
 601              		.loc 1 260 4 is_stmt 1 view .LVU202
 260:Src/state.c   **** 				case ID_REQ_INV_DX:
 602              		.loc 1 260 15 is_stmt 0 view .LVU203
 603 00f4 0C4B     		ldr	r3, .L41+24
 604 00f6 1B6B     		ldr	r3, [r3, #48]
 260:Src/state.c   **** 				case ID_REQ_INV_DX:
 605              		.loc 1 260 4 view .LVU204
 606 00f8 B3F5C17F 		cmp	r3, #386
 607 00fc 99D1     		bne	.L24
 262:Src/state.c   **** 						setup_init = 4;
 608              		.loc 1 262 6 is_stmt 1 view .LVU205
 262:Src/state.c   **** 						setup_init = 4;
 609              		.loc 1 262 84 is_stmt 0 view .LVU206
 610 00fe 0A4B     		ldr	r3, .L41+24
 611 0100 5B69     		ldr	r3, [r3, #20]
 262:Src/state.c   **** 						setup_init = 4;
 612              		.loc 1 262 8 view .LVU207
 613 0102 B3F5F07F 		cmp	r3, #480
 614 0106 94D1     		bne	.L24
 263:Src/state.c   **** 					}
 615              		.loc 1 263 7 is_stmt 1 view .LVU208
 263:Src/state.c   **** 					}
 616              		.loc 1 263 18 is_stmt 0 view .LVU209
 617 0108 014B     		ldr	r3, .L41
 618 010a 0422     		movs	r2, #4
 619 010c 1A60     		str	r2, [r3]
 271:Src/state.c   **** 	/*if (fifoRxDataCAN_pop(&can1))
 620              		.loc 1 271 2 is_stmt 1 view .LVU210
 621              		.loc 1 394 1 is_stmt 0 view .LVU211
 622 010e 90E7     		b	.L24
 623              	.L42:
 624              		.align	2
 625              	.L41:
 626 0110 00000000 		.word	.LANCHOR3
 627 0114 00000000 		.word	atc_connected
 628 0118 00000000 		.word	current_state
 629 011c 00000000 		.word	.LANCHOR4
 630 0120 00000000 		.word	count_ms_abs
 631 0124 00000000 		.word	.LANCHOR5
 632 0128 00000000 		.word	can1
 633 012c 00000000 		.word	.LANCHOR6
 634              		.cfi_endproc
 635              	.LFE147:
 637              		.section	.rodata.debug_operations.str1.4,"aMS",%progbits,1
 638              		.align	2
 639              	.LC0:
 640 0000 68656C70 		.ascii	"help\000"
 640      00
 641 0005 000000   		.align	2
ARM GAS  /tmp/ccCPBTWO.s 			page 22


 642              	.LC1:
 643 0008 0D0A2A2A 		.ascii	"\015\012***********ECU HELP***********\015\012Avaia"
 643      2A2A2A2A 
 643      2A2A2A2A 
 643      2A454355 
 643      2048454C 
 644 002f 626C6520 		.ascii	"ble msg are:\015\012\011-- status -> print ECU stat"
 644      6D736720 
 644      6172653A 
 644      0D0A092D 
 644      2D207374 
 645 0059 75730D0A 		.ascii	"us\015\012\011-- can sniffer -> enter in can sniffe"
 645      092D2D20 
 645      63616E20 
 645      736E6966 
 645      66657220 
 646 0083 72206D6F 		.ascii	"r mode (q for quit)\015\012\011-- sd status -> prin"
 646      64652028 
 646      7120666F 
 646      72207175 
 646      6974290D 
 647 00ad 74205344 		.ascii	"t SD status and the name of file inside\015\012\011"
 647      20737461 
 647      74757320 
 647      616E6420 
 647      74686520 
 648 00d7 2D2D2073 		.ascii	"-- sd file -> print files inside the SD\015\012\011"
 648      64206669 
 648      6C65202D 
 648      3E207072 
 648      696E7420 
 649 0101 2D2D2074 		.ascii	"-- time -> print activity time\015\012\011-- codev "
 649      696D6520 
 649      2D3E2070 
 649      72696E74 
 649      20616374 
 650 012b 202D3E20 		.ascii	" -> print code version\015\012\000"
 650      7072696E 
 650      7420636F 
 650      64652076 
 650      65727369 
 651              		.align	2
 652              	.LC2:
 653 0144 636F6465 		.ascii	"codev\000"
 653      7600
 654 014a 0000     		.align	2
 655              	.LC3:
 656 014c 74696D65 		.ascii	"time\000"
 656      00
 657 0151 000000   		.align	2
 658              	.LC4:
 659 0154 0D0A5469 		.ascii	"\015\012Time: %d hours : %d min : %d sec : %d dec\015"
 659      6D653A20 
 659      25642068 
 659      6F757273 
 659      203A2025 
 660 0180 0A00     		.ascii	"\012\000"
ARM GAS  /tmp/ccCPBTWO.s 			page 23


 661 0182 0000     		.align	2
 662              	.LC5:
 663 0184 73746174 		.ascii	"status\000"
 663      757300
 664 018b 00       		.align	2
 665              	.LC6:
 666 018c 0D0A0A74 		.ascii	"\015\012\012type of status:\015\012\011 0 = OK\015\012"
 666      79706520 
 666      6F662073 
 666      74617475 
 666      733A0D0A 
 667 01aa 09203120 		.ascii	"\011 1 = ERROR\015\012\011 2 = BUSY\015\012\011 3 ="
 667      3D204552 
 667      524F520D 
 667      0A092032 
 667      203D2042 
 668 01c8 2054494D 		.ascii	" TIMEOUT\015\012\012CAN1 status:\015\012\011CAN1 co"
 668      454F5554 
 668      0D0A0A43 
 668      414E3120 
 668      73746174 
 669 01e9 6E666967 		.ascii	"nfig status: %d \015\012\011CAN1 notification statu"
 669      20737461 
 669      7475733A 
 669      20256420 
 669      0D0A0943 
 670 0213 733A2025 		.ascii	"s: %d\015\012\011CAN1 start status: %d\015\012\000"
 670      640D0A09 
 670      43414E31 
 670      20737461 
 670      72742073 
 671 0233 00       		.align	2
 672              	.LC7:
 673 0234 43414E33 		.ascii	"CAN3 status:\015\012\011CAN3 config status: %d \015"
 673      20737461 
 673      7475733A 
 673      0D0A0943 
 673      414E3320 
 674 025b 0A094341 		.ascii	"\012\011CAN3 notification status: %d\015\012\011CAN"
 674      4E33206E 
 674      6F746966 
 674      69636174 
 674      696F6E20 
 675 027f 33207374 		.ascii	"3 start status: %d\015\012\000"
 675      61727420 
 675      73746174 
 675      75733A20 
 675      25640D0A 
 676              		.align	2
 677              	.LC8:
 678 0294 0D0A4375 		.ascii	"\015\012Current state: STATE_INIT\015\012\000"
 678      7272656E 
 678      74207374 
 678      6174653A 
 678      20535441 
 679 02b2 0000     		.align	2
 680              	.LC9:
ARM GAS  /tmp/ccCPBTWO.s 			page 24


 681 02b4 0D0A4375 		.ascii	"\015\012Current state: STATE_IDLE\015\012\000"
 681      7272656E 
 681      74207374 
 681      6174653A 
 681      20535441 
 682 02d2 0000     		.align	2
 683              	.LC10:
 684 02d4 0D0A4375 		.ascii	"\015\012Current state: STATE_SETUP\015\012\000"
 684      7272656E 
 684      74207374 
 684      6174653A 
 684      20535441 
 685 02f3 00       		.align	2
 686              	.LC11:
 687 02f4 0D0A4375 		.ascii	"\015\012Current state: STATE_RUN\015\012\000"
 687      7272656E 
 687      74207374 
 687      6174653A 
 687      20535441 
 688 0311 000000   		.align	2
 689              	.LC12:
 690 0314 0D0A4465 		.ascii	"\015\012Device connected : (0 = no, 1 = yes (for ea"
 690      76696365 
 690      20636F6E 
 690      6E656374 
 690      6564203A 
 691 0341 63682062 		.ascii	"ch bit))\015\012\011 IMU -> %d\015\012\011 ITS -> %"
 691      69742929 
 691      0D0A0920 
 691      494D5520 
 691      2D3E2025 
 692 0362 640D0A00 		.ascii	"d\015\012\000"
 693 0366 0000     		.align	2
 694              	.LC13:
 695 0368 63616E20 		.ascii	"can sniffer\000"
 695      736E6966 
 695      66657200 
 696              		.align	2
 697              	.LC14:
 698 0374 0D0A456E 		.ascii	"\015\012Enter in can sniffer mode\015\012\000"
 698      74657220 
 698      696E2063 
 698      616E2073 
 698      6E696666 
 699 0392 0000     		.align	2
 700              	.LC15:
 701 0394 7100     		.ascii	"q\000"
 702 0396 0000     		.align	2
 703              	.LC16:
 704 0398 0D0A4578 		.ascii	"\015\012Exit from can sniffer mode\015\012\000"
 704      69742066 
 704      726F6D20 
 704      63616E20 
 704      736E6966 
 705 03b7 00       		.align	2
 706              	.LC17:
 707 03b8 73642073 		.ascii	"sd status\000"
ARM GAS  /tmp/ccCPBTWO.s 			page 25


 707      74617475 
 707      7300
 708 03c2 0000     		.align	2
 709              	.LC18:
 710 03c4 0D0A5364 		.ascii	"\015\012Sd mounted \000"
 710      206D6F75 
 710      6E746564 
 710      2000
 711 03d2 0000     		.align	2
 712              	.LC19:
 713 03d4 53642073 		.ascii	"Sd successfully opened and created file: %s\015\012"
 713      75636365 
 713      73736675 
 713      6C6C7920 
 713      6F70656E 
 714 0401 00       		.ascii	"\000"
 715 0402 0000     		.align	2
 716              	.LC20:
 717 0404 5364206F 		.ascii	"Sd open FAILED\015\012\000"
 717      70656E20 
 717      4641494C 
 717      45440D0A 
 717      00
 718 0415 000000   		.align	2
 719              	.LC21:
 720 0418 0D0A5364 		.ascii	"\015\012Sd NOT mounted \000"
 720      204E4F54 
 720      206D6F75 
 720      6E746564 
 720      2000
 721 042a 0000     		.align	2
 722              	.LC22:
 723 042c 73642066 		.ascii	"sd file\000"
 723      696C6500 
 724              		.align	2
 725              	.LC23:
 726 0434 0D0A4669 		.ascii	"\015\012Files inside sd are:\015\012%s\000"
 726      6C657320 
 726      696E7369 
 726      64652073 
 726      64206172 
 727 044f 00       		.align	2
 728              	.LC24:
 729 0450 67617900 		.ascii	"gay\000"
 730              		.align	2
 731              	.LC25:
 732 0454 0D0A2020 		.ascii	"\015\012          $\015\012        $   $\015\012   "
 732      20202020 
 732      20202020 
 732      240D0A20 
 732      20202020 
 733 0475 20202020 		.ascii	"    $     $\015\012       $$$$$$$\015\012       $$$"
 733      24202020 
 733      2020240D 
 733      0A202020 
 733      20202020 
 734 049c 24242424 		.ascii	"$$$$\015\012       $$$$$$$\015\012       $$$$$$$\015"
ARM GAS  /tmp/ccCPBTWO.s 			page 26


 734      0D0A2020 
 734      20202020 
 734      20242424 
 734      24242424 
 735 04c1 0A202024 		.ascii	"\012  $$$$$$     $$$$$$\015\012 $$$$$$$$   $$$$$$$$"
 735      24242424 
 735      24202020 
 735      20202424 
 735      24242424 
 736 04eb 0D0A2424 		.ascii	"\015\012$$$$$$$$$$$$$$$$$$$$\015\012 $$$$$$$$   $$$"
 736      24242424 
 736      24242424 
 736      24242424 
 736      24242424 
 737 0512 24242424 		.ascii	"$$$$$\015\012  $$$$$$     $$$$$$\015\012\000"
 737      240D0A20 
 737      20242424 
 737      24242420 
 737      20202020 
 738 052f 00       		.align	2
 739              	.LC26:
 740 0530 0D0A4552 		.ascii	"\015\012ERROR : msg %s doesn't exist\015\012\000"
 740      524F5220 
 740      3A206D73 
 740      67202573 
 740      20646F65 
 741              		.section	.text.debug_operations,"ax",%progbits
 742              		.align	1
 743              		.global	debug_operations
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu fpv5-d16
 749              	debug_operations:
 750              	.LFB149:
 395:Src/state.c   **** /*******************************************************************
 396:Src/state.c   ****  *                         END SETUP STATE
 397:Src/state.c   ****  *******************************************************************/
 398:Src/state.c   **** /*******************************************************************
 399:Src/state.c   ****  *                         START RUN STATE
 400:Src/state.c   ****  *******************************************************************/
 401:Src/state.c   **** void run()
 402:Src/state.c   **** {
 403:Src/state.c   **** 	if (fifoRxDataCAN_pop(&can1))
 404:Src/state.c   **** 	{
 405:Src/state.c   **** 		switch (can1.rx_id)
 406:Src/state.c   **** 		{
 407:Src/state.c   **** 		case ID_STEERING_WEEL_1:
 408:Src/state.c   **** 			if (can1.dataRx[0] == 6)
 409:Src/state.c   **** 			{ //----- change state to setup -----//
 410:Src/state.c   **** 				current_state = STATE_SETUP;
 411:Src/state.c   **** 			}
 412:Src/state.c   **** 			break;
 413:Src/state.c   **** 		case ID_ATC_POT:
 414:Src/state.c   **** 			atc_pot_operations();
 415:Src/state.c   **** 			break;
 416:Src/state.c   **** 		default:
ARM GAS  /tmp/ccCPBTWO.s 			page 27


 417:Src/state.c   **** 			break;
 418:Src/state.c   **** 		}
 419:Src/state.c   **** 	}
 420:Src/state.c   **** }
 421:Src/state.c   **** /*******************************************************************
 422:Src/state.c   ****  *                         END RUN STATE
 423:Src/state.c   ****  *******************************************************************/
 424:Src/state.c   **** 
 425:Src/state.c   **** void debug_operations()
 426:Src/state.c   **** {
 751              		.loc 1 426 1 is_stmt 1 view -0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755 0000 30B5     		push	{r4, r5, lr}
 756              	.LCFI4:
 757              		.cfi_def_cfa_offset 12
 758              		.cfi_offset 4, -12
 759              		.cfi_offset 5, -8
 760              		.cfi_offset 14, -4
 761 0002 83B0     		sub	sp, sp, #12
 762              	.LCFI5:
 763              		.cfi_def_cfa_offset 24
 427:Src/state.c   **** 	if (strcmp(debug_rx, "help") == 0)
 764              		.loc 1 427 2 view .LVU213
 765              		.loc 1 427 6 is_stmt 0 view .LVU214
 766 0004 B249     		ldr	r1, .L74
 767 0006 B348     		ldr	r0, .L74+4
 768 0008 FFF7FEFF 		bl	strcmp
 769              	.LVL16:
 770              		.loc 1 427 5 view .LVU215
 771 000c 0028     		cmp	r0, #0
 772 000e 32D0     		beq	.L61
 428:Src/state.c   **** 	{
 429:Src/state.c   **** 		sprintf(debug_tx,
 430:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
 431:Src/state.c   **** 				"Avaiable msg are:\r\n"
 432:Src/state.c   **** 				"\t-- status -> print ECU status\r\n"
 433:Src/state.c   **** 				"\t-- can sniffer -> enter in can sniffer mode (q for quit)\r\n"
 434:Src/state.c   **** 				"\t-- sd status -> print SD status and the name of file inside\r\n"
 435:Src/state.c   **** 				"\t-- sd file -> print files inside the SD\r\n"
 436:Src/state.c   **** 				"\t-- time -> print activity time\r\n"
 437:Src/state.c   **** 				"\t-- codev  -> print code version\r\n");
 438:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 439:Src/state.c   **** 	}
 440:Src/state.c   **** 	else if (strcmp(debug_rx, "codev") == 0)
 773              		.loc 1 440 7 is_stmt 1 view .LVU216
 774              		.loc 1 440 11 is_stmt 0 view .LVU217
 775 0010 B149     		ldr	r1, .L74+8
 776 0012 B048     		ldr	r0, .L74+4
 777 0014 FFF7FEFF 		bl	strcmp
 778              	.LVL17:
 779              		.loc 1 440 10 view .LVU218
 780 0018 0028     		cmp	r0, #0
 781 001a 3ED0     		beq	.L62
 441:Src/state.c   **** 	{
 442:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)code_version, strlen(code_version),
ARM GAS  /tmp/ccCPBTWO.s 			page 28


 443:Src/state.c   **** 						  100);
 444:Src/state.c   **** 	}
 445:Src/state.c   **** 	else if (strcmp(debug_rx, "time") == 0)
 782              		.loc 1 445 7 is_stmt 1 view .LVU219
 783              		.loc 1 445 11 is_stmt 0 view .LVU220
 784 001c AF49     		ldr	r1, .L74+12
 785 001e AD48     		ldr	r0, .L74+4
 786 0020 FFF7FEFF 		bl	strcmp
 787              	.LVL18:
 788              		.loc 1 445 10 view .LVU221
 789 0024 0028     		cmp	r0, #0
 790 0026 43D0     		beq	.L63
 446:Src/state.c   **** 	{
 447:Src/state.c   **** 		sprintf(debug_tx, "\r\nTime: %d hours : %d min : %d sec : %d dec\r\n",
 448:Src/state.c   **** 				count_hour, count_min, count_sec, count_dec);
 449:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 450:Src/state.c   **** 	}
 451:Src/state.c   **** 	else if (strcmp(debug_rx, "status") == 0)
 791              		.loc 1 451 7 is_stmt 1 view .LVU222
 792              		.loc 1 451 11 is_stmt 0 view .LVU223
 793 0028 AD49     		ldr	r1, .L74+16
 794 002a AA48     		ldr	r0, .L74+4
 795 002c FFF7FEFF 		bl	strcmp
 796              	.LVL19:
 797              		.loc 1 451 10 view .LVU224
 798 0030 0028     		cmp	r0, #0
 799 0032 56D0     		beq	.L64
 452:Src/state.c   **** 	{
 453:Src/state.c   **** 		sprintf(debug_tx,
 454:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 455:Src/state.c   **** 				"\t 0 = OK\r\n"
 456:Src/state.c   **** 				"\t 1 = ERROR\r\n"
 457:Src/state.c   **** 				"\t 2 = BUSY\r\n"
 458:Src/state.c   **** 				"\t 3 = TIMEOUT\r\n\n"
 459:Src/state.c   **** 				"CAN1 status:\r\n"
 460:Src/state.c   **** 				"\tCAN1 config status: %d \r\n"
 461:Src/state.c   **** 				"\tCAN1 notification status: %d\r\n"
 462:Src/state.c   **** 				"\tCAN1 start status: %d\r\n",
 463:Src/state.c   **** 				can1.configFilter_status, can1.activateNotif_status,
 464:Src/state.c   **** 				can1.canStart_status);
 465:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 466:Src/state.c   **** 		sprintf(debug_tx,
 467:Src/state.c   **** 				"CAN3 status:\r\n"
 468:Src/state.c   **** 				"\tCAN3 config status: %d \r\n"
 469:Src/state.c   **** 				"\tCAN3 notification status: %d\r\n"
 470:Src/state.c   **** 				"\tCAN3 start status: %d\r\n",
 471:Src/state.c   **** 				can3.configFilter_status, can3.activateNotif_status,
 472:Src/state.c   **** 				can3.canStart_status);
 473:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 474:Src/state.c   **** 		if (current_state == STATE_INIT)
 475:Src/state.c   **** 		{
 476:Src/state.c   **** 			HAL_UART_Transmit(&huart3,
 477:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_INIT\r\n",
 478:Src/state.c   **** 							  strlen("\r\nCurrent state: STATE_INIT\r\n"), 100);
 479:Src/state.c   **** 		}
 480:Src/state.c   **** 		else if (current_state == STATE_IDLE)
 481:Src/state.c   **** 		{
ARM GAS  /tmp/ccCPBTWO.s 			page 29


 482:Src/state.c   **** 			HAL_UART_Transmit(&huart3,
 483:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_IDLE\r\n",
 484:Src/state.c   **** 							  strlen("\r\nCurrent state: STATE_IDLE\r\n"), 100);
 485:Src/state.c   **** 		}
 486:Src/state.c   **** 		else if (current_state == STATE_SETUP)
 487:Src/state.c   **** 		{
 488:Src/state.c   **** 			HAL_UART_Transmit(
 489:Src/state.c   **** 				&huart3, (uint8_t *)"\r\nCurrent state: STATE_SETUP\r\n",
 490:Src/state.c   **** 				strlen("\r\nCurrent state: STATE_SETUP\r\n"), 100);
 491:Src/state.c   **** 		}
 492:Src/state.c   **** 		else if (current_state == STATE_RUN)
 493:Src/state.c   **** 		{
 494:Src/state.c   **** 			HAL_UART_Transmit(&huart3,
 495:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_RUN\r\n",
 496:Src/state.c   **** 							  strlen("\r\nCurrent state: STATE_RUN\r\n"), 100);
 497:Src/state.c   **** 		}
 498:Src/state.c   **** 		sprintf(debug_tx,
 499:Src/state.c   **** 				"\r\n"
 500:Src/state.c   **** 				"Device connected : (0 = no, 1 = yes (for each bit))\r\n"
 501:Src/state.c   **** 				"\t IMU -> %d\r\n"
 502:Src/state.c   **** 				"\t ITS -> %d\r\n",
 503:Src/state.c   **** 				imu_connected, its_connected);
 504:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 505:Src/state.c   **** 	}else if(strcmp(debug_rx, "can sniffer") == 0){
 800              		.loc 1 505 8 is_stmt 1 view .LVU225
 801              		.loc 1 505 11 is_stmt 0 view .LVU226
 802 0034 AB49     		ldr	r1, .L74+20
 803 0036 A748     		ldr	r0, .L74+4
 804 0038 FFF7FEFF 		bl	strcmp
 805              	.LVL20:
 806              		.loc 1 505 10 view .LVU227
 807 003c 0028     		cmp	r0, #0
 808 003e 00F0B480 		beq	.L65
 506:Src/state.c   **** 		canSnifferMode = 1;
 507:Src/state.c   **** 		sprintf(debug_tx,"\r\nEnter in can sniffer mode\r\n");
 508:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 509:Src/state.c   **** 	}else if(strcmp(debug_rx, "q") == 0){
 809              		.loc 1 509 8 is_stmt 1 view .LVU228
 810              		.loc 1 509 11 is_stmt 0 view .LVU229
 811 0042 A949     		ldr	r1, .L74+24
 812 0044 A348     		ldr	r0, .L74+4
 813 0046 FFF7FEFF 		bl	strcmp
 814              	.LVL21:
 815              		.loc 1 509 10 view .LVU230
 816 004a 0028     		cmp	r0, #0
 817 004c 00F0C780 		beq	.L66
 510:Src/state.c   **** 		canSnifferMode = 0;
 511:Src/state.c   **** 		sprintf(debug_tx,"\r\nExit from can sniffer mode\r\n");
 512:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 513:Src/state.c   **** 	}else if (strcmp(debug_rx, "sd status") == 0){
 818              		.loc 1 513 8 is_stmt 1 view .LVU231
 819              		.loc 1 513 12 is_stmt 0 view .LVU232
 820 0050 A649     		ldr	r1, .L74+28
 821 0052 A048     		ldr	r0, .L74+4
 822 0054 FFF7FEFF 		bl	strcmp
 823              	.LVL22:
 824              		.loc 1 513 11 view .LVU233
ARM GAS  /tmp/ccCPBTWO.s 			page 30


 825 0058 0028     		cmp	r0, #0
 826 005a 40F0FD80 		bne	.L55
 514:Src/state.c   **** 		if(mount_ok == 1){
 827              		.loc 1 514 3 is_stmt 1 view .LVU234
 828              		.loc 1 514 15 is_stmt 0 view .LVU235
 829 005e A44B     		ldr	r3, .L74+32
 830 0060 1B68     		ldr	r3, [r3]
 831              		.loc 1 514 5 view .LVU236
 832 0062 012B     		cmp	r3, #1
 833 0064 00F0D780 		beq	.L67
 515:Src/state.c   **** 			HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nSd mounted ", strlen("\r\nSd mounted "), 100);
 516:Src/state.c   **** 			if(successfull_opening == 1){
 517:Src/state.c   **** 				sprintf(debug_tx,"Sd successfully opened and created file: %s\r\n",filename_log);
 518:Src/state.c   **** 				HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 519:Src/state.c   **** 			}else{
 520:Src/state.c   **** 				HAL_UART_Transmit(&huart3, (uint8_t *)"Sd open FAILED\r\n", strlen("Sd open FAILED\r\n"), 100);
 521:Src/state.c   **** 			}
 522:Src/state.c   **** 		}else{
 523:Src/state.c   **** 			HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nSd NOT mounted ", strlen("\r\nSd NOT mounted "), 100)
 834              		.loc 1 523 4 is_stmt 1 view .LVU237
 835 0068 6423     		movs	r3, #100
 836 006a 1122     		movs	r2, #17
 837 006c A149     		ldr	r1, .L74+36
 838 006e A248     		ldr	r0, .L74+40
 839 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 840              	.LVL23:
 841 0074 0FE0     		b	.L43
 842              	.L61:
 429:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
 843              		.loc 1 429 3 view .LVU238
 844 0076 A14C     		ldr	r4, .L74+44
 845 0078 4FF49E72 		mov	r2, #316
 846 007c A049     		ldr	r1, .L74+48
 847 007e 2046     		mov	r0, r4
 848 0080 FFF7FEFF 		bl	memcpy
 849              	.LVL24:
 438:Src/state.c   **** 	}
 850              		.loc 1 438 3 view .LVU239
 438:Src/state.c   **** 	}
 851              		.loc 1 438 51 is_stmt 0 view .LVU240
 852 0084 2046     		mov	r0, r4
 853 0086 FFF7FEFF 		bl	strlen
 854              	.LVL25:
 438:Src/state.c   **** 	}
 855              		.loc 1 438 3 view .LVU241
 856 008a 6423     		movs	r3, #100
 857 008c 82B2     		uxth	r2, r0
 858 008e 2146     		mov	r1, r4
 859 0090 9948     		ldr	r0, .L74+40
 860 0092 FFF7FEFF 		bl	HAL_UART_Transmit
 861              	.LVL26:
 862              	.L43:
 524:Src/state.c   **** 		}
 525:Src/state.c   **** 	}
 526:Src/state.c   **** 	else if(strcmp(debug_rx, "sd file") == 0){
 527:Src/state.c   **** 		sprintf(debug_tx,"\r\nFiles inside sd are:\r\n%s",log_names);
 528:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 1000);
ARM GAS  /tmp/ccCPBTWO.s 			page 31


 529:Src/state.c   **** 	}
 530:Src/state.c   **** 	else if (strcmp(debug_rx, "gay") == 0)
 531:Src/state.c   **** 	{
 532:Src/state.c   **** 		sprintf(debug_tx,
 533:Src/state.c   **** 				"\r\n"
 534:Src/state.c   **** 				"          $\r\n"
 535:Src/state.c   **** 				"        $   $\r\n"
 536:Src/state.c   **** 				"       $     $\r\n"
 537:Src/state.c   **** 				"       $$$$$$$\r\n"
 538:Src/state.c   **** 				"       $$$$$$$\r\n"
 539:Src/state.c   **** 				"       $$$$$$$\r\n"
 540:Src/state.c   **** 				"       $$$$$$$\r\n"
 541:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n"
 542:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 543:Src/state.c   **** 				"$$$$$$$$$$$$$$$$$$$$\r\n"
 544:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 545:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n");
 546:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 547:Src/state.c   **** 	}
 548:Src/state.c   **** 	else
 549:Src/state.c   **** 	{
 550:Src/state.c   **** 		sprintf(debug_tx, "\r\nERROR : msg %s doesn't exist\r\n", debug_rx);
 551:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 552:Src/state.c   **** 	}
 553:Src/state.c   **** }
 863              		.loc 1 553 1 view .LVU242
 864 0096 03B0     		add	sp, sp, #12
 865              	.LCFI6:
 866              		.cfi_remember_state
 867              		.cfi_def_cfa_offset 12
 868              		@ sp needed
 869 0098 30BD     		pop	{r4, r5, pc}
 870              	.L62:
 871              	.LCFI7:
 872              		.cfi_restore_state
 442:Src/state.c   **** 						  100);
 873              		.loc 1 442 3 is_stmt 1 view .LVU243
 442:Src/state.c   **** 						  100);
 874              		.loc 1 442 55 is_stmt 0 view .LVU244
 875 009a 9A4C     		ldr	r4, .L74+52
 876 009c 2046     		mov	r0, r4
 877 009e FFF7FEFF 		bl	strlen
 878              	.LVL27:
 442:Src/state.c   **** 						  100);
 879              		.loc 1 442 3 view .LVU245
 880 00a2 6423     		movs	r3, #100
 881 00a4 82B2     		uxth	r2, r0
 882 00a6 2146     		mov	r1, r4
 883 00a8 9348     		ldr	r0, .L74+40
 884 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 885              	.LVL28:
 886 00ae F2E7     		b	.L43
 887              	.L63:
 447:Src/state.c   **** 				count_hour, count_min, count_sec, count_dec);
 888              		.loc 1 447 3 is_stmt 1 view .LVU246
 889 00b0 954B     		ldr	r3, .L74+56
 890 00b2 1A88     		ldrh	r2, [r3]
ARM GAS  /tmp/ccCPBTWO.s 			page 32


 891 00b4 954B     		ldr	r3, .L74+60
 892 00b6 1B88     		ldrh	r3, [r3]
 893 00b8 9549     		ldr	r1, .L74+64
 894 00ba 0988     		ldrh	r1, [r1]
 895 00bc 9548     		ldr	r0, .L74+68
 896 00be 0088     		ldrh	r0, [r0]
 897 00c0 8E4C     		ldr	r4, .L74+44
 898 00c2 0190     		str	r0, [sp, #4]
 899 00c4 0091     		str	r1, [sp]
 900 00c6 9449     		ldr	r1, .L74+72
 901 00c8 2046     		mov	r0, r4
 902 00ca FFF7FEFF 		bl	sprintf
 903              	.LVL29:
 449:Src/state.c   **** 	}
 904              		.loc 1 449 3 view .LVU247
 449:Src/state.c   **** 	}
 905              		.loc 1 449 51 is_stmt 0 view .LVU248
 906 00ce 2046     		mov	r0, r4
 907 00d0 FFF7FEFF 		bl	strlen
 908              	.LVL30:
 449:Src/state.c   **** 	}
 909              		.loc 1 449 3 view .LVU249
 910 00d4 6423     		movs	r3, #100
 911 00d6 82B2     		uxth	r2, r0
 912 00d8 2146     		mov	r1, r4
 913 00da 8748     		ldr	r0, .L74+40
 914 00dc FFF7FEFF 		bl	HAL_UART_Transmit
 915              	.LVL31:
 916 00e0 D9E7     		b	.L43
 917              	.L64:
 453:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 918              		.loc 1 453 3 is_stmt 1 view .LVU250
 463:Src/state.c   **** 				can1.canStart_status);
 919              		.loc 1 463 9 is_stmt 0 view .LVU251
 920 00e2 8E4A     		ldr	r2, .L74+76
 464:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 921              		.loc 1 464 9 view .LVU252
 922 00e4 92F86E30 		ldrb	r3, [r2, #110]	@ zero_extendqisi2
 453:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 923              		.loc 1 453 3 view .LVU253
 924 00e8 844C     		ldr	r4, .L74+44
 925 00ea 0093     		str	r3, [sp]
 926 00ec 92F86D30 		ldrb	r3, [r2, #109]	@ zero_extendqisi2
 927 00f0 92F86C20 		ldrb	r2, [r2, #108]	@ zero_extendqisi2
 928 00f4 8A49     		ldr	r1, .L74+80
 929 00f6 2046     		mov	r0, r4
 930 00f8 FFF7FEFF 		bl	sprintf
 931              	.LVL32:
 465:Src/state.c   **** 		sprintf(debug_tx,
 932              		.loc 1 465 3 is_stmt 1 view .LVU254
 465:Src/state.c   **** 		sprintf(debug_tx,
 933              		.loc 1 465 51 is_stmt 0 view .LVU255
 934 00fc 2046     		mov	r0, r4
 935 00fe FFF7FEFF 		bl	strlen
 936              	.LVL33:
 465:Src/state.c   **** 		sprintf(debug_tx,
 937              		.loc 1 465 3 view .LVU256
ARM GAS  /tmp/ccCPBTWO.s 			page 33


 938 0102 7D4D     		ldr	r5, .L74+40
 939 0104 6423     		movs	r3, #100
 940 0106 82B2     		uxth	r2, r0
 941 0108 2146     		mov	r1, r4
 942 010a 2846     		mov	r0, r5
 943 010c FFF7FEFF 		bl	HAL_UART_Transmit
 944              	.LVL34:
 466:Src/state.c   **** 				"CAN3 status:\r\n"
 945              		.loc 1 466 3 is_stmt 1 view .LVU257
 471:Src/state.c   **** 				can3.canStart_status);
 946              		.loc 1 471 9 is_stmt 0 view .LVU258
 947 0110 844A     		ldr	r2, .L74+84
 472:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 948              		.loc 1 472 9 view .LVU259
 949 0112 92F86E30 		ldrb	r3, [r2, #110]	@ zero_extendqisi2
 466:Src/state.c   **** 				"CAN3 status:\r\n"
 950              		.loc 1 466 3 view .LVU260
 951 0116 0093     		str	r3, [sp]
 952 0118 92F86D30 		ldrb	r3, [r2, #109]	@ zero_extendqisi2
 953 011c 92F86C20 		ldrb	r2, [r2, #108]	@ zero_extendqisi2
 954 0120 8149     		ldr	r1, .L74+88
 955 0122 2046     		mov	r0, r4
 956 0124 FFF7FEFF 		bl	sprintf
 957              	.LVL35:
 473:Src/state.c   **** 		if (current_state == STATE_INIT)
 958              		.loc 1 473 3 is_stmt 1 view .LVU261
 473:Src/state.c   **** 		if (current_state == STATE_INIT)
 959              		.loc 1 473 51 is_stmt 0 view .LVU262
 960 0128 2046     		mov	r0, r4
 961 012a FFF7FEFF 		bl	strlen
 962              	.LVL36:
 473:Src/state.c   **** 		if (current_state == STATE_INIT)
 963              		.loc 1 473 3 view .LVU263
 964 012e 6423     		movs	r3, #100
 965 0130 82B2     		uxth	r2, r0
 966 0132 2146     		mov	r1, r4
 967 0134 2846     		mov	r0, r5
 968 0136 FFF7FEFF 		bl	HAL_UART_Transmit
 969              	.LVL37:
 474:Src/state.c   **** 		{
 970              		.loc 1 474 3 is_stmt 1 view .LVU264
 474:Src/state.c   **** 		{
 971              		.loc 1 474 21 is_stmt 0 view .LVU265
 972 013a 7C4B     		ldr	r3, .L74+92
 973 013c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 474:Src/state.c   **** 		{
 974              		.loc 1 474 6 view .LVU266
 975 013e C3B1     		cbz	r3, .L68
 480:Src/state.c   **** 		{
 976              		.loc 1 480 8 is_stmt 1 view .LVU267
 480:Src/state.c   **** 		{
 977              		.loc 1 480 11 is_stmt 0 view .LVU268
 978 0140 012B     		cmp	r3, #1
 979 0142 1DD0     		beq	.L69
 486:Src/state.c   **** 		{
 980              		.loc 1 486 8 is_stmt 1 view .LVU269
 486:Src/state.c   **** 		{
ARM GAS  /tmp/ccCPBTWO.s 			page 34


 981              		.loc 1 486 11 is_stmt 0 view .LVU270
 982 0144 022B     		cmp	r3, #2
 983 0146 22D0     		beq	.L70
 492:Src/state.c   **** 		{
 984              		.loc 1 492 8 is_stmt 1 view .LVU271
 492:Src/state.c   **** 		{
 985              		.loc 1 492 11 is_stmt 0 view .LVU272
 986 0148 032B     		cmp	r3, #3
 987 014a 27D0     		beq	.L71
 988              	.L50:
 498:Src/state.c   **** 				"\r\n"
 989              		.loc 1 498 3 is_stmt 1 view .LVU273
 990 014c 6B4C     		ldr	r4, .L74+44
 991 014e 784B     		ldr	r3, .L74+96
 992 0150 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 993 0152 784A     		ldr	r2, .L74+100
 994 0154 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 995 0156 7849     		ldr	r1, .L74+104
 996 0158 2046     		mov	r0, r4
 997 015a FFF7FEFF 		bl	sprintf
 998              	.LVL38:
 504:Src/state.c   **** 	}else if(strcmp(debug_rx, "can sniffer") == 0){
 999              		.loc 1 504 3 view .LVU274
 504:Src/state.c   **** 	}else if(strcmp(debug_rx, "can sniffer") == 0){
 1000              		.loc 1 504 51 is_stmt 0 view .LVU275
 1001 015e 2046     		mov	r0, r4
 1002 0160 FFF7FEFF 		bl	strlen
 1003              	.LVL39:
 504:Src/state.c   **** 	}else if(strcmp(debug_rx, "can sniffer") == 0){
 1004              		.loc 1 504 3 view .LVU276
 1005 0164 6423     		movs	r3, #100
 1006 0166 82B2     		uxth	r2, r0
 1007 0168 2146     		mov	r1, r4
 1008 016a 6348     		ldr	r0, .L74+40
 1009 016c FFF7FEFF 		bl	HAL_UART_Transmit
 1010              	.LVL40:
 1011 0170 91E7     		b	.L43
 1012              	.L68:
 476:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_INIT\r\n",
 1013              		.loc 1 476 4 is_stmt 1 view .LVU277
 1014 0172 6423     		movs	r3, #100
 1015 0174 1D22     		movs	r2, #29
 1016 0176 7149     		ldr	r1, .L74+108
 1017 0178 2846     		mov	r0, r5
 1018 017a FFF7FEFF 		bl	HAL_UART_Transmit
 1019              	.LVL41:
 1020 017e E5E7     		b	.L50
 1021              	.L69:
 482:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_IDLE\r\n",
 1022              		.loc 1 482 4 view .LVU278
 1023 0180 6423     		movs	r3, #100
 1024 0182 1D22     		movs	r2, #29
 1025 0184 6E49     		ldr	r1, .L74+112
 1026 0186 5C48     		ldr	r0, .L74+40
 1027 0188 FFF7FEFF 		bl	HAL_UART_Transmit
 1028              	.LVL42:
 1029 018c DEE7     		b	.L50
ARM GAS  /tmp/ccCPBTWO.s 			page 35


 1030              	.L70:
 488:Src/state.c   **** 				&huart3, (uint8_t *)"\r\nCurrent state: STATE_SETUP\r\n",
 1031              		.loc 1 488 4 view .LVU279
 1032 018e 6423     		movs	r3, #100
 1033 0190 1E22     		movs	r2, #30
 1034 0192 6C49     		ldr	r1, .L74+116
 1035 0194 5848     		ldr	r0, .L74+40
 1036 0196 FFF7FEFF 		bl	HAL_UART_Transmit
 1037              	.LVL43:
 1038 019a D7E7     		b	.L50
 1039              	.L71:
 494:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_RUN\r\n",
 1040              		.loc 1 494 4 view .LVU280
 1041 019c 6423     		movs	r3, #100
 1042 019e 1C22     		movs	r2, #28
 1043 01a0 6949     		ldr	r1, .L74+120
 1044 01a2 5548     		ldr	r0, .L74+40
 1045 01a4 FFF7FEFF 		bl	HAL_UART_Transmit
 1046              	.LVL44:
 1047 01a8 D0E7     		b	.L50
 1048              	.L65:
 506:Src/state.c   **** 		sprintf(debug_tx,"\r\nEnter in can sniffer mode\r\n");
 1049              		.loc 1 506 3 view .LVU281
 506:Src/state.c   **** 		sprintf(debug_tx,"\r\nEnter in can sniffer mode\r\n");
 1050              		.loc 1 506 18 is_stmt 0 view .LVU282
 1051 01aa 684B     		ldr	r3, .L74+124
 1052 01ac 0122     		movs	r2, #1
 1053 01ae 1A70     		strb	r2, [r3]
 507:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 1054              		.loc 1 507 3 is_stmt 1 view .LVU283
 1055 01b0 524D     		ldr	r5, .L74+44
 1056 01b2 674C     		ldr	r4, .L74+128
 1057 01b4 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1058 01b6 2860     		str	r0, [r5]	@ unaligned
 1059 01b8 6960     		str	r1, [r5, #4]	@ unaligned
 1060 01ba AA60     		str	r2, [r5, #8]	@ unaligned
 1061 01bc EB60     		str	r3, [r5, #12]	@ unaligned
 1062 01be 07CC     		ldmia	r4!, {r0, r1, r2}
 1063 01c0 2861     		str	r0, [r5, #16]	@ unaligned
 1064 01c2 6961     		str	r1, [r5, #20]	@ unaligned
 1065 01c4 AA61     		str	r2, [r5, #24]	@ unaligned
 1066 01c6 2388     		ldrh	r3, [r4]	@ unaligned
 1067 01c8 AB83     		strh	r3, [r5, #28]	@ unaligned
 508:Src/state.c   **** 	}else if(strcmp(debug_rx, "q") == 0){
 1068              		.loc 1 508 3 view .LVU284
 508:Src/state.c   **** 	}else if(strcmp(debug_rx, "q") == 0){
 1069              		.loc 1 508 51 is_stmt 0 view .LVU285
 1070 01ca 2846     		mov	r0, r5
 1071 01cc FFF7FEFF 		bl	strlen
 1072              	.LVL45:
 508:Src/state.c   **** 	}else if(strcmp(debug_rx, "q") == 0){
 1073              		.loc 1 508 3 view .LVU286
 1074 01d0 6423     		movs	r3, #100
 1075 01d2 82B2     		uxth	r2, r0
 1076 01d4 2946     		mov	r1, r5
 1077 01d6 4848     		ldr	r0, .L74+40
 1078 01d8 FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccCPBTWO.s 			page 36


 1079              	.LVL46:
 1080 01dc 5BE7     		b	.L43
 1081              	.L66:
 510:Src/state.c   **** 		sprintf(debug_tx,"\r\nExit from can sniffer mode\r\n");
 1082              		.loc 1 510 3 is_stmt 1 view .LVU287
 510:Src/state.c   **** 		sprintf(debug_tx,"\r\nExit from can sniffer mode\r\n");
 1083              		.loc 1 510 18 is_stmt 0 view .LVU288
 1084 01de 5B4B     		ldr	r3, .L74+124
 1085 01e0 0022     		movs	r2, #0
 1086 01e2 1A70     		strb	r2, [r3]
 511:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 1087              		.loc 1 511 3 is_stmt 1 view .LVU289
 1088 01e4 454D     		ldr	r5, .L74+44
 1089 01e6 5B4C     		ldr	r4, .L74+132
 1090 01e8 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 1091 01ea 2860     		str	r0, [r5]	@ unaligned
 1092 01ec 6960     		str	r1, [r5, #4]	@ unaligned
 1093 01ee AA60     		str	r2, [r5, #8]	@ unaligned
 1094 01f0 EB60     		str	r3, [r5, #12]	@ unaligned
 1095 01f2 07CC     		ldmia	r4!, {r0, r1, r2}
 1096 01f4 2861     		str	r0, [r5, #16]	@ unaligned
 1097 01f6 6961     		str	r1, [r5, #20]	@ unaligned
 1098 01f8 AA61     		str	r2, [r5, #24]	@ unaligned
 1099 01fa 2288     		ldrh	r2, [r4]	@ unaligned
 1100 01fc A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1101 01fe AA83     		strh	r2, [r5, #28]	@ unaligned
 1102 0200 AB77     		strb	r3, [r5, #30]
 512:Src/state.c   **** 	}else if (strcmp(debug_rx, "sd status") == 0){
 1103              		.loc 1 512 3 view .LVU290
 512:Src/state.c   **** 	}else if (strcmp(debug_rx, "sd status") == 0){
 1104              		.loc 1 512 51 is_stmt 0 view .LVU291
 1105 0202 2846     		mov	r0, r5
 1106 0204 FFF7FEFF 		bl	strlen
 1107              	.LVL47:
 512:Src/state.c   **** 	}else if (strcmp(debug_rx, "sd status") == 0){
 1108              		.loc 1 512 3 view .LVU292
 1109 0208 6423     		movs	r3, #100
 1110 020a 82B2     		uxth	r2, r0
 1111 020c 2946     		mov	r1, r5
 1112 020e 3A48     		ldr	r0, .L74+40
 1113 0210 FFF7FEFF 		bl	HAL_UART_Transmit
 1114              	.LVL48:
 1115 0214 3FE7     		b	.L43
 1116              	.L67:
 515:Src/state.c   **** 			if(successfull_opening == 1){
 1117              		.loc 1 515 4 is_stmt 1 view .LVU293
 1118 0216 6423     		movs	r3, #100
 1119 0218 0D22     		movs	r2, #13
 1120 021a 4F49     		ldr	r1, .L74+136
 1121 021c 3648     		ldr	r0, .L74+40
 1122 021e FFF7FEFF 		bl	HAL_UART_Transmit
 1123              	.LVL49:
 516:Src/state.c   **** 				sprintf(debug_tx,"Sd successfully opened and created file: %s\r\n",filename_log);
 1124              		.loc 1 516 4 view .LVU294
 516:Src/state.c   **** 				sprintf(debug_tx,"Sd successfully opened and created file: %s\r\n",filename_log);
 1125              		.loc 1 516 27 is_stmt 0 view .LVU295
 1126 0222 4E4B     		ldr	r3, .L74+140
ARM GAS  /tmp/ccCPBTWO.s 			page 37


 1127 0224 1B68     		ldr	r3, [r3]
 516:Src/state.c   **** 				sprintf(debug_tx,"Sd successfully opened and created file: %s\r\n",filename_log);
 1128              		.loc 1 516 6 view .LVU296
 1129 0226 012B     		cmp	r3, #1
 1130 0228 06D0     		beq	.L72
 520:Src/state.c   **** 			}
 1131              		.loc 1 520 5 is_stmt 1 view .LVU297
 1132 022a 6423     		movs	r3, #100
 1133 022c 1022     		movs	r2, #16
 1134 022e 4C49     		ldr	r1, .L74+144
 1135 0230 3148     		ldr	r0, .L74+40
 1136 0232 FFF7FEFF 		bl	HAL_UART_Transmit
 1137              	.LVL50:
 1138 0236 2EE7     		b	.L43
 1139              	.L72:
 517:Src/state.c   **** 				HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 1140              		.loc 1 517 5 view .LVU298
 1141 0238 304C     		ldr	r4, .L74+44
 1142 023a 4A4A     		ldr	r2, .L74+148
 1143 023c 4A49     		ldr	r1, .L74+152
 1144 023e 2046     		mov	r0, r4
 1145 0240 FFF7FEFF 		bl	sprintf
 1146              	.LVL51:
 518:Src/state.c   **** 			}else{
 1147              		.loc 1 518 5 view .LVU299
 518:Src/state.c   **** 			}else{
 1148              		.loc 1 518 53 is_stmt 0 view .LVU300
 1149 0244 2046     		mov	r0, r4
 1150 0246 FFF7FEFF 		bl	strlen
 1151              	.LVL52:
 518:Src/state.c   **** 			}else{
 1152              		.loc 1 518 5 view .LVU301
 1153 024a 6423     		movs	r3, #100
 1154 024c 82B2     		uxth	r2, r0
 1155 024e 2146     		mov	r1, r4
 1156 0250 2948     		ldr	r0, .L74+40
 1157 0252 FFF7FEFF 		bl	HAL_UART_Transmit
 1158              	.LVL53:
 1159 0256 1EE7     		b	.L43
 1160              	.L55:
 526:Src/state.c   **** 		sprintf(debug_tx,"\r\nFiles inside sd are:\r\n%s",log_names);
 1161              		.loc 1 526 7 is_stmt 1 view .LVU302
 526:Src/state.c   **** 		sprintf(debug_tx,"\r\nFiles inside sd are:\r\n%s",log_names);
 1162              		.loc 1 526 10 is_stmt 0 view .LVU303
 1163 0258 4449     		ldr	r1, .L74+156
 1164 025a 1E48     		ldr	r0, .L74+4
 1165 025c FFF7FEFF 		bl	strcmp
 1166              	.LVL54:
 526:Src/state.c   **** 		sprintf(debug_tx,"\r\nFiles inside sd are:\r\n%s",log_names);
 1167              		.loc 1 526 9 view .LVU304
 1168 0260 A0B1     		cbz	r0, .L73
 530:Src/state.c   **** 	{
 1169              		.loc 1 530 7 is_stmt 1 view .LVU305
 530:Src/state.c   **** 	{
 1170              		.loc 1 530 11 is_stmt 0 view .LVU306
 1171 0262 4349     		ldr	r1, .L74+160
 1172 0264 1B48     		ldr	r0, .L74+4
ARM GAS  /tmp/ccCPBTWO.s 			page 38


 1173 0266 FFF7FEFF 		bl	strcmp
 1174              	.LVL55:
 530:Src/state.c   **** 	{
 1175              		.loc 1 530 10 view .LVU307
 1176 026a 00BB     		cbnz	r0, .L59
 532:Src/state.c   **** 				"\r\n"
 1177              		.loc 1 532 3 is_stmt 1 view .LVU308
 1178 026c 234C     		ldr	r4, .L74+44
 1179 026e DB22     		movs	r2, #219
 1180 0270 4049     		ldr	r1, .L74+164
 1181 0272 2046     		mov	r0, r4
 1182 0274 FFF7FEFF 		bl	memcpy
 1183              	.LVL56:
 546:Src/state.c   **** 	}
 1184              		.loc 1 546 3 view .LVU309
 546:Src/state.c   **** 	}
 1185              		.loc 1 546 51 is_stmt 0 view .LVU310
 1186 0278 2046     		mov	r0, r4
 1187 027a FFF7FEFF 		bl	strlen
 1188              	.LVL57:
 546:Src/state.c   **** 	}
 1189              		.loc 1 546 3 view .LVU311
 1190 027e 6423     		movs	r3, #100
 1191 0280 82B2     		uxth	r2, r0
 1192 0282 2146     		mov	r1, r4
 1193 0284 1C48     		ldr	r0, .L74+40
 1194 0286 FFF7FEFF 		bl	HAL_UART_Transmit
 1195              	.LVL58:
 1196 028a 04E7     		b	.L43
 1197              	.L73:
 527:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 1000);
 1198              		.loc 1 527 3 is_stmt 1 view .LVU312
 1199 028c 1B4C     		ldr	r4, .L74+44
 1200 028e 3A4A     		ldr	r2, .L74+168
 1201 0290 3A49     		ldr	r1, .L74+172
 1202 0292 2046     		mov	r0, r4
 1203 0294 FFF7FEFF 		bl	sprintf
 1204              	.LVL59:
 528:Src/state.c   **** 	}
 1205              		.loc 1 528 3 view .LVU313
 528:Src/state.c   **** 	}
 1206              		.loc 1 528 51 is_stmt 0 view .LVU314
 1207 0298 2046     		mov	r0, r4
 1208 029a FFF7FEFF 		bl	strlen
 1209              	.LVL60:
 528:Src/state.c   **** 	}
 1210              		.loc 1 528 3 view .LVU315
 1211 029e 4FF47A73 		mov	r3, #1000
 1212 02a2 82B2     		uxth	r2, r0
 1213 02a4 2146     		mov	r1, r4
 1214 02a6 1448     		ldr	r0, .L74+40
 1215 02a8 FFF7FEFF 		bl	HAL_UART_Transmit
 1216              	.LVL61:
 1217 02ac F3E6     		b	.L43
 1218              	.L59:
 550:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 1219              		.loc 1 550 3 is_stmt 1 view .LVU316
ARM GAS  /tmp/ccCPBTWO.s 			page 39


 1220 02ae 134C     		ldr	r4, .L74+44
 1221 02b0 084A     		ldr	r2, .L74+4
 1222 02b2 3349     		ldr	r1, .L74+176
 1223 02b4 2046     		mov	r0, r4
 1224 02b6 FFF7FEFF 		bl	sprintf
 1225              	.LVL62:
 551:Src/state.c   **** 	}
 1226              		.loc 1 551 3 view .LVU317
 551:Src/state.c   **** 	}
 1227              		.loc 1 551 51 is_stmt 0 view .LVU318
 1228 02ba 2046     		mov	r0, r4
 1229 02bc FFF7FEFF 		bl	strlen
 1230              	.LVL63:
 551:Src/state.c   **** 	}
 1231              		.loc 1 551 3 view .LVU319
 1232 02c0 6423     		movs	r3, #100
 1233 02c2 82B2     		uxth	r2, r0
 1234 02c4 2146     		mov	r1, r4
 1235 02c6 0C48     		ldr	r0, .L74+40
 1236 02c8 FFF7FEFF 		bl	HAL_UART_Transmit
 1237              	.LVL64:
 1238              		.loc 1 553 1 view .LVU320
 1239 02cc E3E6     		b	.L43
 1240              	.L75:
 1241 02ce 00BF     		.align	2
 1242              	.L74:
 1243 02d0 00000000 		.word	.LC0
 1244 02d4 00000000 		.word	debug_rx
 1245 02d8 44010000 		.word	.LC2
 1246 02dc 4C010000 		.word	.LC3
 1247 02e0 84010000 		.word	.LC5
 1248 02e4 68030000 		.word	.LC13
 1249 02e8 94030000 		.word	.LC15
 1250 02ec B8030000 		.word	.LC17
 1251 02f0 00000000 		.word	mount_ok
 1252 02f4 18040000 		.word	.LC21
 1253 02f8 00000000 		.word	huart3
 1254 02fc 00000000 		.word	debug_tx
 1255 0300 08000000 		.word	.LC1
 1256 0304 00000000 		.word	code_version
 1257 0308 00000000 		.word	count_hour
 1258 030c 00000000 		.word	count_min
 1259 0310 00000000 		.word	count_sec
 1260 0314 00000000 		.word	count_dec
 1261 0318 54010000 		.word	.LC4
 1262 031c 00000000 		.word	can1
 1263 0320 8C010000 		.word	.LC6
 1264 0324 00000000 		.word	can3
 1265 0328 34020000 		.word	.LC7
 1266 032c 00000000 		.word	current_state
 1267 0330 00000000 		.word	its_connected
 1268 0334 00000000 		.word	imu_connected
 1269 0338 14030000 		.word	.LC12
 1270 033c 94020000 		.word	.LC8
 1271 0340 B4020000 		.word	.LC9
 1272 0344 D4020000 		.word	.LC10
 1273 0348 F4020000 		.word	.LC11
ARM GAS  /tmp/ccCPBTWO.s 			page 40


 1274 034c 00000000 		.word	canSnifferMode
 1275 0350 74030000 		.word	.LC14
 1276 0354 98030000 		.word	.LC16
 1277 0358 C4030000 		.word	.LC18
 1278 035c 00000000 		.word	successfull_opening
 1279 0360 04040000 		.word	.LC20
 1280 0364 00000000 		.word	filename_log
 1281 0368 D4030000 		.word	.LC19
 1282 036c 2C040000 		.word	.LC22
 1283 0370 50040000 		.word	.LC24
 1284 0374 54040000 		.word	.LC25
 1285 0378 00000000 		.word	log_names
 1286 037c 34040000 		.word	.LC23
 1287 0380 30050000 		.word	.LC26
 1288              		.cfi_endproc
 1289              	.LFE149:
 1291              		.section	.rodata.imu_operations.str1.4,"aMS",%progbits,1
 1292              		.align	2
 1293              	.LC27:
 1294 0000 494D5520 		.ascii	"IMU presente\015\012\000"
 1294      70726573 
 1294      656E7465 
 1294      0D0A00
 1295              		.section	.text.imu_operations,"ax",%progbits
 1296              		.align	1
 1297              		.global	imu_operations
 1298              		.syntax unified
 1299              		.thumb
 1300              		.thumb_func
 1301              		.fpu fpv5-d16
 1303              	imu_operations:
 1304              	.LFB150:
 554:Src/state.c   **** 
 555:Src/state.c   **** void imu_operations()
 556:Src/state.c   **** {
 1305              		.loc 1 556 1 is_stmt 1 view -0
 1306              		.cfi_startproc
 1307              		@ args = 0, pretend = 0, frame = 0
 1308              		@ frame_needed = 0, uses_anonymous_args = 0
 1309 0000 08B5     		push	{r3, lr}
 1310              	.LCFI8:
 1311              		.cfi_def_cfa_offset 8
 1312              		.cfi_offset 3, -8
 1313              		.cfi_offset 14, -4
 557:Src/state.c   **** 	imu_connected = 1; // imu connected true
 1314              		.loc 1 557 2 view .LVU322
 1315              		.loc 1 557 16 is_stmt 0 view .LVU323
 1316 0002 0A4B     		ldr	r3, .L80
 1317 0004 0122     		movs	r2, #1
 1318 0006 1A70     		strb	r2, [r3]
 558:Src/state.c   **** 	if (count_imu == 10 || count_imu == 11)
 1319              		.loc 1 558 2 is_stmt 1 view .LVU324
 1320              		.loc 1 558 22 is_stmt 0 view .LVU325
 1321 0008 094B     		ldr	r3, .L80+4
 1322 000a 1B88     		ldrh	r3, [r3]
 1323 000c 0A3B     		subs	r3, r3, #10
 1324 000e 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccCPBTWO.s 			page 41


 1325              		.loc 1 558 5 view .LVU326
 1326 0010 9342     		cmp	r3, r2
 1327 0012 03D9     		bls	.L79
 1328              	.L77:
 559:Src/state.c   **** 	{
 560:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"IMU presente\r\n",
 561:Src/state.c   **** 						  strlen("IMU presente\r\n"), 10);
 562:Src/state.c   **** 	}
 563:Src/state.c   **** 	count_imu = 0;
 1329              		.loc 1 563 2 is_stmt 1 view .LVU327
 1330              		.loc 1 563 12 is_stmt 0 view .LVU328
 1331 0014 064B     		ldr	r3, .L80+4
 1332 0016 0022     		movs	r2, #0
 1333 0018 1A80     		strh	r2, [r3]	@ movhi
 564:Src/state.c   **** }
 1334              		.loc 1 564 1 view .LVU329
 1335 001a 08BD     		pop	{r3, pc}
 1336              	.L79:
 560:Src/state.c   **** 						  strlen("IMU presente\r\n"), 10);
 1337              		.loc 1 560 3 is_stmt 1 view .LVU330
 1338 001c 0A23     		movs	r3, #10
 1339 001e 0E22     		movs	r2, #14
 1340 0020 0449     		ldr	r1, .L80+8
 1341 0022 0548     		ldr	r0, .L80+12
 1342 0024 FFF7FEFF 		bl	HAL_UART_Transmit
 1343              	.LVL65:
 1344 0028 F4E7     		b	.L77
 1345              	.L81:
 1346 002a 00BF     		.align	2
 1347              	.L80:
 1348 002c 00000000 		.word	imu_connected
 1349 0030 00000000 		.word	count_imu
 1350 0034 00000000 		.word	.LC27
 1351 0038 00000000 		.word	huart3
 1352              		.cfi_endproc
 1353              	.LFE150:
 1355              		.section	.text.atc_pot_operations,"ax",%progbits
 1356              		.align	1
 1357              		.global	atc_pot_operations
 1358              		.syntax unified
 1359              		.thumb
 1360              		.thumb_func
 1361              		.fpu fpv5-d16
 1363              	atc_pot_operations:
 1364              	.LFB151:
 565:Src/state.c   **** void atc_pot_operations()
 566:Src/state.c   **** {
 1365              		.loc 1 566 1 view -0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369              		@ link register save eliminated.
 567:Src/state.c   **** 	atc_connected = 1;
 1370              		.loc 1 567 2 view .LVU332
 1371              		.loc 1 567 16 is_stmt 0 view .LVU333
 1372 0000 034B     		ldr	r3, .L83
 1373 0002 0122     		movs	r2, #1
ARM GAS  /tmp/ccCPBTWO.s 			page 42


 1374 0004 1A70     		strb	r2, [r3]
 568:Src/state.c   **** 	count_atc = 0;
 1375              		.loc 1 568 2 is_stmt 1 view .LVU334
 1376              		.loc 1 568 12 is_stmt 0 view .LVU335
 1377 0006 034B     		ldr	r3, .L83+4
 1378 0008 0022     		movs	r2, #0
 1379 000a 1A80     		strh	r2, [r3]	@ movhi
 569:Src/state.c   **** }
 1380              		.loc 1 569 1 view .LVU336
 1381 000c 7047     		bx	lr
 1382              	.L84:
 1383 000e 00BF     		.align	2
 1384              	.L83:
 1385 0010 00000000 		.word	atc_connected
 1386 0014 00000000 		.word	count_atc
 1387              		.cfi_endproc
 1388              	.LFE151:
 1390              		.section	.text.idle,"ax",%progbits
 1391              		.align	1
 1392              		.global	idle
 1393              		.syntax unified
 1394              		.thumb
 1395              		.thumb_func
 1396              		.fpu fpv5-d16
 1398              	idle:
 1399              	.LFB146:
 130:Src/state.c   **** 	/*if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin) == GPIO_PIN_SET){
 1400              		.loc 1 130 1 is_stmt 1 view -0
 1401              		.cfi_startproc
 1402              		@ args = 0, pretend = 0, frame = 0
 1403              		@ frame_needed = 0, uses_anonymous_args = 0
 1404 0000 08B5     		push	{r3, lr}
 1405              	.LCFI9:
 1406              		.cfi_def_cfa_offset 8
 1407              		.cfi_offset 3, -8
 1408              		.cfi_offset 14, -4
 139:Src/state.c   **** 	{
 1409              		.loc 1 139 2 view .LVU338
 139:Src/state.c   **** 	{
 1410              		.loc 1 139 24 is_stmt 0 view .LVU339
 1411 0002 174B     		ldr	r3, .L93
 1412 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 139:Src/state.c   **** 	{
 1413              		.loc 1 139 5 view .LVU340
 1414 0006 012B     		cmp	r3, #1
 1415 0008 0FD0     		beq	.L92
 1416              	.L86:
 144:Src/state.c   **** 	{
 1417              		.loc 1 144 2 is_stmt 1 view .LVU341
 144:Src/state.c   **** 	{
 1418              		.loc 1 144 6 is_stmt 0 view .LVU342
 1419 000a 1648     		ldr	r0, .L93+4
 1420 000c FFF7FEFF 		bl	fifoRxDataCAN_pop
 1421              	.LVL66:
 144:Src/state.c   **** 	{
 1422              		.loc 1 144 5 view .LVU343
 1423 0010 E8B1     		cbz	r0, .L85
ARM GAS  /tmp/ccCPBTWO.s 			page 43


 146:Src/state.c   **** 		{
 1424              		.loc 1 146 3 is_stmt 1 view .LVU344
 146:Src/state.c   **** 		{
 1425              		.loc 1 146 15 is_stmt 0 view .LVU345
 1426 0012 144B     		ldr	r3, .L93+4
 1427 0014 1B6B     		ldr	r3, [r3, #48]
 146:Src/state.c   **** 		{
 1428              		.loc 1 146 3 view .LVU346
 1429 0016 A02B     		cmp	r3, #160
 1430 0018 1AD0     		beq	.L88
 1431 001a 18D8     		bhi	.L85
 1432 001c 102B     		cmp	r3, #16
 1433 001e 0AD0     		beq	.L89
 1434 0020 342B     		cmp	r3, #52
 1435 0022 14D1     		bne	.L85
 185:Src/state.c   **** 			break;
 1436              		.loc 1 185 4 is_stmt 1 view .LVU347
 1437 0024 FFF7FEFF 		bl	atc_pot_operations
 1438              	.LVL67:
 186:Src/state.c   **** 		default:
 1439              		.loc 1 186 4 view .LVU348
 191:Src/state.c   **** /*******************************************************************
 1440              		.loc 1 191 1 is_stmt 0 view .LVU349
 1441 0028 11E0     		b	.L85
 1442              	.L92:
 141:Src/state.c   **** 		debug_operations();
 1443              		.loc 1 141 3 is_stmt 1 view .LVU350
 141:Src/state.c   **** 		debug_operations();
 1444              		.loc 1 141 21 is_stmt 0 view .LVU351
 1445 002a 0D4B     		ldr	r3, .L93
 1446 002c 0022     		movs	r2, #0
 1447 002e 1A70     		strb	r2, [r3]
 142:Src/state.c   **** 	}
 1448              		.loc 1 142 3 is_stmt 1 view .LVU352
 1449 0030 FFF7FEFF 		bl	debug_operations
 1450              	.LVL68:
 1451 0034 E9E7     		b	.L86
 1452              	.L89:
 149:Src/state.c   **** 			can1.tx_size = 1;
 1453              		.loc 1 149 4 view .LVU353
 149:Src/state.c   **** 			can1.tx_size = 1;
 1454              		.loc 1 149 19 is_stmt 0 view .LVU354
 1455 0036 0B48     		ldr	r0, .L93+4
 1456 0038 0B4B     		ldr	r3, .L93+8
 1457 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1458 003c 0373     		strb	r3, [r0, #12]
 150:Src/state.c   **** 			can1.tx_id = ID_ACU_1;
 1459              		.loc 1 150 4 is_stmt 1 view .LVU355
 150:Src/state.c   **** 			can1.tx_id = ID_ACU_1;
 1460              		.loc 1 150 17 is_stmt 0 view .LVU356
 1461 003e 0123     		movs	r3, #1
 1462 0040 0360     		str	r3, [r0]
 151:Src/state.c   **** 			CAN_Send(&can1, normalPriority);
 1463              		.loc 1 151 4 is_stmt 1 view .LVU357
 151:Src/state.c   **** 			CAN_Send(&can1, normalPriority);
 1464              		.loc 1 151 15 is_stmt 0 view .LVU358
 1465 0042 4FF48073 		mov	r3, #256
ARM GAS  /tmp/ccCPBTWO.s 			page 44


 1466 0046 C362     		str	r3, [r0, #44]
 152:Src/state.c   **** 			break;
 1467              		.loc 1 152 4 is_stmt 1 view .LVU359
 1468 0048 0021     		movs	r1, #0
 1469 004a FFF7FEFF 		bl	CAN_Send
 1470              	.LVL69:
 153:Src/state.c   **** 		case ID_ASK_INV_DX:
 1471              		.loc 1 153 4 view .LVU360
 1472              	.L85:
 191:Src/state.c   **** /*******************************************************************
 1473              		.loc 1 191 1 is_stmt 0 view .LVU361
 1474 004e 08BD     		pop	{r3, pc}
 1475              	.L88:
 174:Src/state.c   **** 			{
 1476              		.loc 1 174 4 is_stmt 1 view .LVU362
 174:Src/state.c   **** 			{
 1477              		.loc 1 174 23 is_stmt 0 view .LVU363
 1478 0050 044B     		ldr	r3, .L93+4
 1479 0052 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1480 0054 022B     		cmp	r3, #2
 1481 0056 FAD1     		bne	.L85
 178:Src/state.c   **** 				break;
 1482              		.loc 1 178 5 is_stmt 1 view .LVU364
 178:Src/state.c   **** 				break;
 1483              		.loc 1 178 19 is_stmt 0 view .LVU365
 1484 0058 034B     		ldr	r3, .L93+8
 1485 005a 0222     		movs	r2, #2
 1486 005c 1A70     		strb	r2, [r3]
 179:Src/state.c   **** 			default:
 1487              		.loc 1 179 5 is_stmt 1 view .LVU366
 1488 005e F6E7     		b	.L85
 1489              	.L94:
 1490              		.align	2
 1491              	.L93:
 1492 0060 00000000 		.word	debug_msg_arrived
 1493 0064 00000000 		.word	can1
 1494 0068 00000000 		.word	current_state
 1495              		.cfi_endproc
 1496              	.LFE146:
 1498              		.section	.text.run,"ax",%progbits
 1499              		.align	1
 1500              		.global	run
 1501              		.syntax unified
 1502              		.thumb
 1503              		.thumb_func
 1504              		.fpu fpv5-d16
 1506              	run:
 1507              	.LFB148:
 402:Src/state.c   **** 	if (fifoRxDataCAN_pop(&can1))
 1508              		.loc 1 402 1 view -0
 1509              		.cfi_startproc
 1510              		@ args = 0, pretend = 0, frame = 0
 1511              		@ frame_needed = 0, uses_anonymous_args = 0
 1512 0000 08B5     		push	{r3, lr}
 1513              	.LCFI10:
 1514              		.cfi_def_cfa_offset 8
 1515              		.cfi_offset 3, -8
ARM GAS  /tmp/ccCPBTWO.s 			page 45


 1516              		.cfi_offset 14, -4
 403:Src/state.c   **** 	{
 1517              		.loc 1 403 2 view .LVU368
 403:Src/state.c   **** 	{
 1518              		.loc 1 403 6 is_stmt 0 view .LVU369
 1519 0002 0A48     		ldr	r0, .L99
 1520 0004 FFF7FEFF 		bl	fifoRxDataCAN_pop
 1521              	.LVL70:
 403:Src/state.c   **** 	{
 1522              		.loc 1 403 5 view .LVU370
 1523 0008 78B1     		cbz	r0, .L95
 405:Src/state.c   **** 		{
 1524              		.loc 1 405 3 is_stmt 1 view .LVU371
 405:Src/state.c   **** 		{
 1525              		.loc 1 405 15 is_stmt 0 view .LVU372
 1526 000a 084B     		ldr	r3, .L99
 1527 000c 1B6B     		ldr	r3, [r3, #48]
 405:Src/state.c   **** 		{
 1528              		.loc 1 405 3 view .LVU373
 1529 000e 342B     		cmp	r3, #52
 1530 0010 09D0     		beq	.L97
 1531 0012 A02B     		cmp	r3, #160
 1532 0014 09D1     		bne	.L95
 408:Src/state.c   **** 			{ //----- change state to setup -----//
 1533              		.loc 1 408 4 is_stmt 1 view .LVU374
 408:Src/state.c   **** 			{ //----- change state to setup -----//
 1534              		.loc 1 408 19 is_stmt 0 view .LVU375
 1535 0016 054B     		ldr	r3, .L99
 1536 0018 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 408:Src/state.c   **** 			{ //----- change state to setup -----//
 1537              		.loc 1 408 7 view .LVU376
 1538 001a 062B     		cmp	r3, #6
 1539 001c 05D1     		bne	.L95
 410:Src/state.c   **** 			}
 1540              		.loc 1 410 5 is_stmt 1 view .LVU377
 410:Src/state.c   **** 			}
 1541              		.loc 1 410 19 is_stmt 0 view .LVU378
 1542 001e 044B     		ldr	r3, .L99+4
 1543 0020 0222     		movs	r2, #2
 1544 0022 1A70     		strb	r2, [r3]
 1545 0024 01E0     		b	.L95
 1546              	.L97:
 414:Src/state.c   **** 			break;
 1547              		.loc 1 414 4 is_stmt 1 view .LVU379
 1548 0026 FFF7FEFF 		bl	atc_pot_operations
 1549              	.LVL71:
 415:Src/state.c   **** 		default:
 1550              		.loc 1 415 4 view .LVU380
 1551              	.L95:
 420:Src/state.c   **** /*******************************************************************
 1552              		.loc 1 420 1 is_stmt 0 view .LVU381
 1553 002a 08BD     		pop	{r3, pc}
 1554              	.L100:
 1555              		.align	2
 1556              	.L99:
 1557 002c 00000000 		.word	can1
 1558 0030 00000000 		.word	current_state
ARM GAS  /tmp/ccCPBTWO.s 			page 46


 1559              		.cfi_endproc
 1560              	.LFE148:
 1562              		.global	inv_init_response
 1563              		.global	init_inv_resp
 1564              		.global	init_precharge_start_time
 1565              		.global	init_step_start_time
 1566              		.global	init_step
 1567              		.global	critical_errors
 1568              		.global	setup_init
 1569              		.comm	current_state,1,1
 1570              		.section	.bss.critical_errors,"aw",%nobits
 1571              		.align	2
 1572              		.set	.LANCHOR4,. + 0
 1575              	critical_errors:
 1576 0000 00000000 		.space	4
 1577              		.section	.bss.init_inv_resp,"aw",%nobits
 1578              		.align	2
 1579              		.set	.LANCHOR6,. + 0
 1582              	init_inv_resp:
 1583 0000 00000000 		.space	4
 1584              		.section	.bss.init_precharge_start_time,"aw",%nobits
 1585              		.align	2
 1586              		.set	.LANCHOR5,. + 0
 1589              	init_precharge_start_time:
 1590 0000 00000000 		.space	4
 1591              		.section	.bss.init_step,"aw",%nobits
 1592              		.align	2
 1593              		.set	.LANCHOR0,. + 0
 1596              	init_step:
 1597 0000 00000000 		.space	4
 1598              		.section	.bss.init_step_start_time,"aw",%nobits
 1599              		.align	2
 1600              		.set	.LANCHOR1,. + 0
 1603              	init_step_start_time:
 1604 0000 00000000 		.space	4
 1605              		.section	.bss.inv_init_response,"aw",%nobits
 1606              		.set	.LANCHOR2,. + 0
 1609              	inv_init_response:
 1610 0000 00       		.space	1
 1611              		.section	.bss.setup_init,"aw",%nobits
 1612              		.align	2
 1613              		.set	.LANCHOR3,. + 0
 1616              	setup_init:
 1617 0000 00000000 		.space	4
 1618              		.text
 1619              	.Letext0:
 1620              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1621              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1622              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1623              		.file 5 "Inc/state.h"
 1624              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 1625              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1626              		.file 8 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1627              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1628              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1629              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1630              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
ARM GAS  /tmp/ccCPBTWO.s 			page 47


 1631              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1632              		.file 14 "Inc/can.h"
 1633              		.file 15 "Middlewares/Third_Party/FatFs/src/integer.h"
 1634              		.file 16 "/usr/arm-none-eabi/include/sys/lock.h"
 1635              		.file 17 "/usr/arm-none-eabi/include/sys/_types.h"
 1636              		.file 18 "/usr/lib/gcc/arm-none-eabi/9.2.0/include/stddef.h"
 1637              		.file 19 "/usr/arm-none-eabi/include/sys/reent.h"
 1638              		.file 20 "/usr/arm-none-eabi/include/stdlib.h"
 1639              		.file 21 "Middlewares/Third_Party/FatFs/src/ff.h"
 1640              		.file 22 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1641              		.file 23 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1642              		.file 24 "Inc/sd_diskio.h"
 1643              		.file 25 "Inc/fatfs.h"
 1644              		.file 26 "Inc/global_variables.h"
 1645              		.file 27 "/usr/arm-none-eabi/include/string.h"
 1646              		.file 28 "/usr/arm-none-eabi/include/stdio.h"
 1647              		.file 29 "<built-in>"
ARM GAS  /tmp/ccCPBTWO.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 state.c
     /tmp/ccCPBTWO.s:17     .text.set_bit_uint8:0000000000000000 $t
     /tmp/ccCPBTWO.s:25     .text.set_bit_uint8:0000000000000000 set_bit_uint8
     /tmp/ccCPBTWO.s:73     .text.init:0000000000000000 $t
     /tmp/ccCPBTWO.s:80     .text.init:0000000000000000 init
     /tmp/ccCPBTWO.s:365    .text.init:0000000000000164 $d
                            *COM*:0000000000000001 current_state
     /tmp/ccCPBTWO.s:376    .text.setup:0000000000000000 $t
     /tmp/ccCPBTWO.s:383    .text.setup:0000000000000000 setup
     /tmp/ccCPBTWO.s:626    .text.setup:0000000000000110 $d
     /tmp/ccCPBTWO.s:638    .rodata.debug_operations.str1.4:0000000000000000 $d
     /tmp/ccCPBTWO.s:742    .text.debug_operations:0000000000000000 $t
     /tmp/ccCPBTWO.s:749    .text.debug_operations:0000000000000000 debug_operations
     /tmp/ccCPBTWO.s:1243   .text.debug_operations:00000000000002d0 $d
     /tmp/ccCPBTWO.s:1292   .rodata.imu_operations.str1.4:0000000000000000 $d
     /tmp/ccCPBTWO.s:1296   .text.imu_operations:0000000000000000 $t
     /tmp/ccCPBTWO.s:1303   .text.imu_operations:0000000000000000 imu_operations
     /tmp/ccCPBTWO.s:1348   .text.imu_operations:000000000000002c $d
     /tmp/ccCPBTWO.s:1356   .text.atc_pot_operations:0000000000000000 $t
     /tmp/ccCPBTWO.s:1363   .text.atc_pot_operations:0000000000000000 atc_pot_operations
     /tmp/ccCPBTWO.s:1385   .text.atc_pot_operations:0000000000000010 $d
     /tmp/ccCPBTWO.s:1391   .text.idle:0000000000000000 $t
     /tmp/ccCPBTWO.s:1398   .text.idle:0000000000000000 idle
     /tmp/ccCPBTWO.s:1492   .text.idle:0000000000000060 $d
     /tmp/ccCPBTWO.s:1499   .text.run:0000000000000000 $t
     /tmp/ccCPBTWO.s:1506   .text.run:0000000000000000 run
     /tmp/ccCPBTWO.s:1557   .text.run:000000000000002c $d
     /tmp/ccCPBTWO.s:1609   .bss.inv_init_response:0000000000000000 inv_init_response
     /tmp/ccCPBTWO.s:1582   .bss.init_inv_resp:0000000000000000 init_inv_resp
     /tmp/ccCPBTWO.s:1589   .bss.init_precharge_start_time:0000000000000000 init_precharge_start_time
     /tmp/ccCPBTWO.s:1603   .bss.init_step_start_time:0000000000000000 init_step_start_time
     /tmp/ccCPBTWO.s:1596   .bss.init_step:0000000000000000 init_step
     /tmp/ccCPBTWO.s:1575   .bss.critical_errors:0000000000000000 critical_errors
     /tmp/ccCPBTWO.s:1616   .bss.setup_init:0000000000000000 setup_init
     /tmp/ccCPBTWO.s:1571   .bss.critical_errors:0000000000000000 $d
     /tmp/ccCPBTWO.s:1578   .bss.init_inv_resp:0000000000000000 $d
     /tmp/ccCPBTWO.s:1585   .bss.init_precharge_start_time:0000000000000000 $d
     /tmp/ccCPBTWO.s:1592   .bss.init_step:0000000000000000 $d
     /tmp/ccCPBTWO.s:1599   .bss.init_step_start_time:0000000000000000 $d
     /tmp/ccCPBTWO.s:1610   .bss.inv_init_response:0000000000000000 $d
     /tmp/ccCPBTWO.s:1612   .bss.setup_init:0000000000000000 $d

UNDEFINED SYMBOLS
CAN_Send
fifoRxDataCAN_pop
can3
can1
count_ms_abs
atc_connected
strcmp
HAL_UART_Transmit
memcpy
strlen
sprintf
debug_rx
mount_ok
ARM GAS  /tmp/ccCPBTWO.s 			page 49


huart3
debug_tx
code_version
count_hour
count_min
count_sec
count_dec
its_connected
imu_connected
canSnifferMode
successfull_opening
filename_log
log_names
count_imu
count_atc
debug_msg_arrived
