ARM GAS  /tmp/ccv27NRj.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"state.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.debug_operations,"ax",%progbits
  17              		.align	1
  18              		.global	debug_operations
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	debug_operations:
  25              	.LFB146:
  26              		.file 1 "Src/state.c"
   1:Src/state.c   **** #include "state.h"
   2:Src/state.c   **** #include "can.h"
   3:Src/state.c   **** #include "global_variables.h"
   4:Src/state.c   **** #include "stm32f7xx_hal.h"
   5:Src/state.c   **** #include "string.h"
   6:Src/state.c   **** #include "stdio.h"
   7:Src/state.c   **** 
   8:Src/state.c   **** // Default state
   9:Src/state.c   **** // Init variables
  10:Src/state.c   **** /*******************************************************************
  11:Src/state.c   ****  *                         START INIT STATE
  12:Src/state.c   ****  *******************************************************************/
  13:Src/state.c   **** void init(){
  14:Src/state.c   **** 	if(debug_msg_arrived == 1){
  15:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
  16:Src/state.c   **** 		debug_operations();
  17:Src/state.c   **** 	}
  18:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
  19:Src/state.c   **** 		switch (can1.rx_id){
  20:Src/state.c   **** 		case ID_imu_acceleration:
  21:Src/state.c   **** 		case ID_imu_angular_rate:
  22:Src/state.c   **** 			imu_operations();
  23:Src/state.c   **** 			break;
  24:Src/state.c   **** 		
  25:Src/state.c   **** 		default:
  26:Src/state.c   **** 			break;
  27:Src/state.c   **** 		}
  28:Src/state.c   **** 	}
  29:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can3)){
  30:Src/state.c   **** 
  31:Src/state.c   **** 	}
  32:Src/state.c   **** 	current_state = STATE_IDLE;
ARM GAS  /tmp/ccv27NRj.s 			page 2


  33:Src/state.c   **** }
  34:Src/state.c   **** /*******************************************************************
  35:Src/state.c   ****  *                         END INIT STATE
  36:Src/state.c   ****  *******************************************************************/
  37:Src/state.c   **** /*******************************************************************
  38:Src/state.c   ****  *                        START IDLE STATE
  39:Src/state.c   ****  *******************************************************************/
  40:Src/state.c   **** void idle(){
  41:Src/state.c   **** 	if(debug_msg_arrived == 1){
  42:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
  43:Src/state.c   **** 		debug_operations();
  44:Src/state.c   **** 	}
  45:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
  46:Src/state.c   **** 		switch(can1.rx_id){
  47:Src/state.c   **** 			case ID_ASK_STATE:
  48:Src/state.c   **** 				can1.dataTx[0] = (uint8_t)current_state;
  49:Src/state.c   **** 				can1.dataTx[1] = 0;
  50:Src/state.c   **** 				can1.dataTx[2] = 0;
  51:Src/state.c   **** 				can1.dataTx[3] = 0;
  52:Src/state.c   **** 				can1.dataTx[4] = 0;
  53:Src/state.c   **** 				can1.dataTx[5] = 0;
  54:Src/state.c   **** 				can1.dataTx[6] = 0;
  55:Src/state.c   **** 				can1.dataTx[7] = 0;
  56:Src/state.c   **** 				can1.tx_id = ID_ACU_1;
  57:Src/state.c   **** 				CAN_Send(&can1, normalPriority);
  58:Src/state.c   **** 				break;
  59:Src/state.c   **** 			case ID_ASK_INV_DX:
  60:Src/state.c   **** 				break;
  61:Src/state.c   **** 			case ID_ASK_INV_SX:
  62:Src/state.c   **** 				break;
  63:Src/state.c   **** 			case ID_BMS_HV:
  64:Src/state.c   **** 				break;
  65:Src/state.c   **** 			case ID_BMS_LV:
  66:Src/state.c   **** 				break;
  67:Src/state.c   **** 			case ID_STEERING_WEEL_1:
  68:Src/state.c   **** 				if(can1.dataRx[0] == 2){ //----- change the current state -----//
  69:Src/state.c   **** 					current_state = can1.dataRx[1];
  70:Src/state.c   **** 				}else if(can1.dataRx[0] == 3){ //----- change state to setup -----//
  71:Src/state.c   **** 					current_state = STATE_SETUP;
  72:Src/state.c   **** 				}
  73:Src/state.c   **** 				break;
  74:Src/state.c   **** 			case ID_ATC_POT:
  75:Src/state.c   **** 				atc_pot_operations();
  76:Src/state.c   **** 				break;
  77:Src/state.c   **** 			default:
  78:Src/state.c   **** 				break;
  79:Src/state.c   **** 		}
  80:Src/state.c   **** 	}
  81:Src/state.c   **** 
  82:Src/state.c   **** }
  83:Src/state.c   **** /*******************************************************************
  84:Src/state.c   ****  *                         END IDLE STATE
  85:Src/state.c   ****  *******************************************************************/
  86:Src/state.c   **** /*******************************************************************
  87:Src/state.c   ****  *                        START SETUP STATE
  88:Src/state.c   ****  *******************************************************************/
  89:Src/state.c   **** void setup(){
ARM GAS  /tmp/ccv27NRj.s 			page 3


  90:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
  91:Src/state.c   **** 		switch(can1.rx_id){
  92:Src/state.c   **** 			case ID_STEERING_WEEL_1:
  93:Src/state.c   **** 				if(can1.dataRx[0] == 4){ //----- change state to idle -----//
  94:Src/state.c   **** 					current_state = STATE_IDLE;
  95:Src/state.c   **** 				}else if(can1.dataRx[0] == 5){ //----- change state to run -----//
  96:Src/state.c   **** 					current_state = STATE_RUN;
  97:Src/state.c   **** 					can1.tx_id = ID_ACU_2;
  98:Src/state.c   **** 					can1.dataRx[0] = 5;
  99:Src/state.c   **** 					can1.tx_size = 1;
 100:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 101:Src/state.c   **** 				}
 102:Src/state.c   **** 			case ID_ATC_POT:
 103:Src/state.c   **** 				atc_pot_operations();
 104:Src/state.c   **** 				break;
 105:Src/state.c   **** 			default:
 106:Src/state.c   **** 				break;
 107:Src/state.c   **** 		}
 108:Src/state.c   **** 	}
 109:Src/state.c   **** }
 110:Src/state.c   **** /*******************************************************************
 111:Src/state.c   ****  *                         END SETUP STATE
 112:Src/state.c   ****  *******************************************************************/
 113:Src/state.c   **** /*******************************************************************
 114:Src/state.c   ****  *                         START RUN STATE
 115:Src/state.c   ****  *******************************************************************/
 116:Src/state.c   **** void run(){
 117:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
 118:Src/state.c   **** 		switch(can1.rx_id){
 119:Src/state.c   **** 			case ID_STEERING_WEEL_1:
 120:Src/state.c   **** 				if(can1.dataRx[0] == 6){ //----- change state to setup -----//
 121:Src/state.c   **** 					current_state = STATE_SETUP;
 122:Src/state.c   **** 				}
 123:Src/state.c   **** 				break;
 124:Src/state.c   **** 			case ID_ATC_POT:
 125:Src/state.c   **** 				atc_pot_operations();
 126:Src/state.c   **** 				break;
 127:Src/state.c   **** 			default:
 128:Src/state.c   **** 				break;
 129:Src/state.c   **** 		}
 130:Src/state.c   **** 	}
 131:Src/state.c   **** }
 132:Src/state.c   **** /*******************************************************************
 133:Src/state.c   ****  *                         END RUN STATE
 134:Src/state.c   ****  *******************************************************************/
 135:Src/state.c   **** 
 136:Src/state.c   **** void debug_operations(){
  27              		.loc 1 136 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 30B5     		push	{r4, r5, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 12
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
ARM GAS  /tmp/ccv27NRj.s 			page 4


  37 0002 85B0     		sub	sp, sp, #20
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 32
 137:Src/state.c   **** 	if(strcmp(debug_rx,"help") == 0){
  40              		.loc 1 137 0
  41 0004 7049     		ldr	r1, .L22
  42 0006 7148     		ldr	r0, .L22+4
  43 0008 FFF7FEFF 		bl	strcmp
  44              	.LVL0:
  45 000c 48B3     		cbz	r0, .L13
 138:Src/state.c   **** 		sprintf(debug_tx,
 139:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
 140:Src/state.c   **** 				"Avaiable msg are:\r\n"
 141:Src/state.c   **** 				"\t-- status -> print ECU status\r\n"
 142:Src/state.c   **** 				"\t-- time -> print activity time\r\n"
 143:Src/state.c   **** 				"\t-- codev  -> print code version\r\n");
 144:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 145:Src/state.c   **** 	}else if(strcmp(debug_rx,"codev") == 0){
  46              		.loc 1 145 0
  47 000e 7049     		ldr	r1, .L22+8
  48 0010 6E48     		ldr	r0, .L22+4
  49 0012 FFF7FEFF 		bl	strcmp
  50              	.LVL1:
  51 0016 0028     		cmp	r0, #0
  52 0018 33D0     		beq	.L14
 146:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)code_version, strlen(code_version), 100);
 147:Src/state.c   **** 	}else if(strcmp(debug_rx,"time") == 0){
  53              		.loc 1 147 0
  54 001a 6E49     		ldr	r1, .L22+12
  55 001c 6B48     		ldr	r0, .L22+4
  56 001e FFF7FEFF 		bl	strcmp
  57              	.LVL2:
  58 0022 0028     		cmp	r0, #0
  59 0024 38D0     		beq	.L15
 148:Src/state.c   **** 		sprintf(debug_tx,"\r\nTime: %d hours : %d min : %d sec : %d dec\r\n",count_hour,count_min, count_
 149:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 150:Src/state.c   **** 	}else if(strcmp(debug_rx,"status") == 0){
  60              		.loc 1 150 0
  61 0026 6C49     		ldr	r1, .L22+16
  62 0028 6848     		ldr	r0, .L22+4
  63 002a FFF7FEFF 		bl	strcmp
  64              	.LVL3:
  65 002e 0028     		cmp	r0, #0
  66 0030 4BD0     		beq	.L16
 151:Src/state.c   **** 		sprintf(debug_tx,
 152:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 153:Src/state.c   **** 				"\t 0 = OK\r\n"
 154:Src/state.c   **** 				"\t 1 = ERROR\r\n"
 155:Src/state.c   **** 				"\t 2 = BUSY\r\n"
 156:Src/state.c   **** 				"\t 3 = TIMEOUT\r\n\n"
 157:Src/state.c   **** 				"CAN1 status:\r\n"
 158:Src/state.c   **** 				"\tCAN1 config status: %d \r\n"
 159:Src/state.c   **** 				"\tCAN1 notification status: %d\r\n"
 160:Src/state.c   **** 				"\tCAN1 start status: %d\r\n"
 161:Src/state.c   **** 				,can1.configFilter_status,can1.activateNotif_status,can1.canStart_status);
 162:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 163:Src/state.c   **** 		sprintf(debug_tx,
ARM GAS  /tmp/ccv27NRj.s 			page 5


 164:Src/state.c   **** 				"CAN3 status:\r\n"
 165:Src/state.c   **** 				"\tCAN3 config status: %d \r\n"
 166:Src/state.c   **** 				"\tCAN3 notification status: %d\r\n"
 167:Src/state.c   **** 				"\tCAN3 start status: %d\r\n"
 168:Src/state.c   **** 				,can3.configFilter_status,can3.activateNotif_status,can3.canStart_status);
 169:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 170:Src/state.c   **** 		if(current_state == STATE_INIT){
 171:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_INIT\r\n", strlen("\r\nCurrent sta
 172:Src/state.c   **** 		}else if(current_state == STATE_IDLE){
 173:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_IDLE\r\n", strlen("\r\nCurrent sta
 174:Src/state.c   **** 		}else if(current_state == STATE_SETUP){
 175:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_SETUP\r\n", strlen("\r\nCurrent st
 176:Src/state.c   **** 		}else if(current_state == STATE_RUN){
 177:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_RUN\r\n", strlen("\r\nCurrent stat
 178:Src/state.c   **** 		}
 179:Src/state.c   **** 		sprintf(debug_tx,
 180:Src/state.c   **** 				"\r\n"
 181:Src/state.c   **** 				"Device connected : (0 = no, 1 = yes)\r\n"
 182:Src/state.c   **** 				"\t IMU -> %d\r\n"
 183:Src/state.c   **** 				"\t ITS0 -> %d\r\n"
 184:Src/state.c   **** 				"\t ITS1 -> %d\r\n"
 185:Src/state.c   **** 				"\t ITS2 -> %d\r\n"
 186:Src/state.c   **** 				"\t ITS3 -> %d\r\n"
 187:Src/state.c   **** 				,imu_connected, its0_connected, its1_connected, its2_connected, its3_connected);
 188:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 189:Src/state.c   **** 	}else if(strcmp(debug_rx,"gay") == 0){
  67              		.loc 1 189 0
  68 0032 6A49     		ldr	r1, .L22+20
  69 0034 6548     		ldr	r0, .L22+4
  70 0036 FFF7FEFF 		bl	strcmp
  71              	.LVL4:
  72 003a 0028     		cmp	r0, #0
  73 003c 00F0B280 		beq	.L17
 190:Src/state.c   **** 		sprintf(debug_tx,
 191:Src/state.c   **** 				"\r\n"
 192:Src/state.c   **** 				"          $\r\n"
 193:Src/state.c   **** 				"        $   $\r\n"
 194:Src/state.c   **** 				"       $     $\r\n"
 195:Src/state.c   **** 				"       $$$$$$$\r\n"
 196:Src/state.c   **** 				"       $$$$$$$\r\n"
 197:Src/state.c   **** 				"       $$$$$$$\r\n"
 198:Src/state.c   **** 				"       $$$$$$$\r\n"
 199:Src/state.c   **** 				"       $$$$$$$\r\n"
 200:Src/state.c   **** 				"       $$$$$$$\r\n"
 201:Src/state.c   **** 				"       $$$$$$$\r\n"
 202:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n"
 203:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 204:Src/state.c   **** 				"$$$$$$$$$$$$$$$$$$$$\r\n"
 205:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 206:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n");
 207:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 208:Src/state.c   **** 	}else{
 209:Src/state.c   **** 		sprintf(debug_tx,"\r\nERROR : msg %s doesn't exist\r\n",debug_rx);
  74              		.loc 1 209 0
  75 0040 674C     		ldr	r4, .L22+24
  76 0042 624A     		ldr	r2, .L22+4
  77 0044 6749     		ldr	r1, .L22+28
ARM GAS  /tmp/ccv27NRj.s 			page 6


  78 0046 2046     		mov	r0, r4
  79 0048 FFF7FEFF 		bl	sprintf
  80              	.LVL5:
 210:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
  81              		.loc 1 210 0
  82 004c 2046     		mov	r0, r4
  83 004e FFF7FEFF 		bl	strlen
  84              	.LVL6:
  85 0052 6423     		movs	r3, #100
  86 0054 82B2     		uxth	r2, r0
  87 0056 2146     		mov	r1, r4
  88 0058 6348     		ldr	r0, .L22+32
  89 005a FFF7FEFF 		bl	HAL_UART_Transmit
  90              	.LVL7:
  91              	.L1:
 211:Src/state.c   **** 	}
 212:Src/state.c   **** }
  92              		.loc 1 212 0
  93 005e 05B0     		add	sp, sp, #20
  94              	.LCFI2:
  95              		.cfi_remember_state
  96              		.cfi_def_cfa_offset 12
  97              		@ sp needed
  98 0060 30BD     		pop	{r4, r5, pc}
  99              	.L13:
 100              	.LCFI3:
 101              		.cfi_restore_state
 138:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
 102              		.loc 1 138 0
 103 0062 5F4C     		ldr	r4, .L22+24
 104 0064 9922     		movs	r2, #153
 105 0066 6149     		ldr	r1, .L22+36
 106 0068 2046     		mov	r0, r4
 107 006a FFF7FEFF 		bl	memcpy
 108              	.LVL8:
 144:Src/state.c   **** 	}else if(strcmp(debug_rx,"codev") == 0){
 109              		.loc 1 144 0
 110 006e 2046     		mov	r0, r4
 111 0070 FFF7FEFF 		bl	strlen
 112              	.LVL9:
 113 0074 6423     		movs	r3, #100
 114 0076 82B2     		uxth	r2, r0
 115 0078 2146     		mov	r1, r4
 116 007a 5B48     		ldr	r0, .L22+32
 117 007c FFF7FEFF 		bl	HAL_UART_Transmit
 118              	.LVL10:
 119 0080 EDE7     		b	.L1
 120              	.L14:
 146:Src/state.c   **** 	}else if(strcmp(debug_rx,"time") == 0){
 121              		.loc 1 146 0
 122 0082 5B4C     		ldr	r4, .L22+40
 123 0084 2046     		mov	r0, r4
 124 0086 FFF7FEFF 		bl	strlen
 125              	.LVL11:
 126 008a 6423     		movs	r3, #100
 127 008c 82B2     		uxth	r2, r0
 128 008e 2146     		mov	r1, r4
ARM GAS  /tmp/ccv27NRj.s 			page 7


 129 0090 5548     		ldr	r0, .L22+32
 130 0092 FFF7FEFF 		bl	HAL_UART_Transmit
 131              	.LVL12:
 132 0096 E2E7     		b	.L1
 133              	.L15:
 148:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 134              		.loc 1 148 0
 135 0098 564B     		ldr	r3, .L22+44
 136 009a 1B88     		ldrh	r3, [r3]
 137 009c 564A     		ldr	r2, .L22+48
 138 009e 1288     		ldrh	r2, [r2]
 139 00a0 4F4C     		ldr	r4, .L22+24
 140 00a2 5649     		ldr	r1, .L22+52
 141 00a4 0988     		ldrh	r1, [r1]
 142 00a6 0191     		str	r1, [sp, #4]
 143 00a8 5549     		ldr	r1, .L22+56
 144 00aa 0988     		ldrh	r1, [r1]
 145 00ac 0091     		str	r1, [sp]
 146 00ae 5549     		ldr	r1, .L22+60
 147 00b0 2046     		mov	r0, r4
 148 00b2 FFF7FEFF 		bl	sprintf
 149              	.LVL13:
 149:Src/state.c   **** 	}else if(strcmp(debug_rx,"status") == 0){
 150              		.loc 1 149 0
 151 00b6 2046     		mov	r0, r4
 152 00b8 FFF7FEFF 		bl	strlen
 153              	.LVL14:
 154 00bc 6423     		movs	r3, #100
 155 00be 82B2     		uxth	r2, r0
 156 00c0 2146     		mov	r1, r4
 157 00c2 4948     		ldr	r0, .L22+32
 158 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 159              	.LVL15:
 160 00c8 C9E7     		b	.L1
 161              	.L16:
 161:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 162              		.loc 1 161 0
 163 00ca 4F49     		ldr	r1, .L22+64
 164 00cc 91F85C20 		ldrb	r2, [r1, #92]	@ zero_extendqisi2
 165 00d0 91F85D30 		ldrb	r3, [r1, #93]	@ zero_extendqisi2
 166 00d4 91F85E10 		ldrb	r1, [r1, #94]	@ zero_extendqisi2
 151:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 167              		.loc 1 151 0
 168 00d8 414C     		ldr	r4, .L22+24
 169 00da 0091     		str	r1, [sp]
 170 00dc 4B49     		ldr	r1, .L22+68
 171 00de 2046     		mov	r0, r4
 172 00e0 FFF7FEFF 		bl	sprintf
 173              	.LVL16:
 162:Src/state.c   **** 		sprintf(debug_tx,
 174              		.loc 1 162 0
 175 00e4 2046     		mov	r0, r4
 176 00e6 FFF7FEFF 		bl	strlen
 177              	.LVL17:
 178 00ea 3F4D     		ldr	r5, .L22+32
 179 00ec 6423     		movs	r3, #100
 180 00ee 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccv27NRj.s 			page 8


 181 00f0 2146     		mov	r1, r4
 182 00f2 2846     		mov	r0, r5
 183 00f4 FFF7FEFF 		bl	HAL_UART_Transmit
 184              	.LVL18:
 168:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 185              		.loc 1 168 0
 186 00f8 4549     		ldr	r1, .L22+72
 187 00fa 91F85C20 		ldrb	r2, [r1, #92]	@ zero_extendqisi2
 188 00fe 91F85D30 		ldrb	r3, [r1, #93]	@ zero_extendqisi2
 189 0102 91F85E10 		ldrb	r1, [r1, #94]	@ zero_extendqisi2
 163:Src/state.c   **** 				"CAN3 status:\r\n"
 190              		.loc 1 163 0
 191 0106 0091     		str	r1, [sp]
 192 0108 4249     		ldr	r1, .L22+76
 193 010a 2046     		mov	r0, r4
 194 010c FFF7FEFF 		bl	sprintf
 195              	.LVL19:
 169:Src/state.c   **** 		if(current_state == STATE_INIT){
 196              		.loc 1 169 0
 197 0110 2046     		mov	r0, r4
 198 0112 FFF7FEFF 		bl	strlen
 199              	.LVL20:
 200 0116 6423     		movs	r3, #100
 201 0118 82B2     		uxth	r2, r0
 202 011a 2146     		mov	r1, r4
 203 011c 2846     		mov	r0, r5
 204 011e FFF7FEFF 		bl	HAL_UART_Transmit
 205              	.LVL21:
 170:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_INIT\r\n", strlen("\r\nCurrent sta
 206              		.loc 1 170 0
 207 0122 3D4B     		ldr	r3, .L22+80
 208 0124 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 209 0126 0BB3     		cbz	r3, .L18
 172:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_IDLE\r\n", strlen("\r\nCurrent sta
 210              		.loc 1 172 0
 211 0128 012B     		cmp	r3, #1
 212 012a 26D0     		beq	.L19
 174:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_SETUP\r\n", strlen("\r\nCurrent st
 213              		.loc 1 174 0
 214 012c 022B     		cmp	r3, #2
 215 012e 2BD0     		beq	.L20
 176:Src/state.c   **** 			HAL_UART_Transmit(&huart3,(uint8_t*)"\r\nCurrent state: STATE_RUN\r\n", strlen("\r\nCurrent stat
 216              		.loc 1 176 0
 217 0130 032B     		cmp	r3, #3
 218 0132 30D0     		beq	.L21
 219              	.L8:
 179:Src/state.c   **** 				"\r\n"
 220              		.loc 1 179 0
 221 0134 394B     		ldr	r3, .L22+84
 222 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 223 0138 394A     		ldr	r2, .L22+88
 224 013a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 225 013c 284C     		ldr	r4, .L22+24
 226 013e 3949     		ldr	r1, .L22+92
 227 0140 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 228 0142 0291     		str	r1, [sp, #8]
 229 0144 3849     		ldr	r1, .L22+96
ARM GAS  /tmp/ccv27NRj.s 			page 9


 230 0146 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 231 0148 0191     		str	r1, [sp, #4]
 232 014a 3849     		ldr	r1, .L22+100
 233 014c 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 234 014e 0091     		str	r1, [sp]
 235 0150 3749     		ldr	r1, .L22+104
 236 0152 2046     		mov	r0, r4
 237 0154 FFF7FEFF 		bl	sprintf
 238              	.LVL22:
 188:Src/state.c   **** 	}else if(strcmp(debug_rx,"gay") == 0){
 239              		.loc 1 188 0
 240 0158 2046     		mov	r0, r4
 241 015a FFF7FEFF 		bl	strlen
 242              	.LVL23:
 243 015e 6423     		movs	r3, #100
 244 0160 82B2     		uxth	r2, r0
 245 0162 2146     		mov	r1, r4
 246 0164 2048     		ldr	r0, .L22+32
 247 0166 FFF7FEFF 		bl	HAL_UART_Transmit
 248              	.LVL24:
 249 016a 78E7     		b	.L1
 250              	.L18:
 171:Src/state.c   **** 		}else if(current_state == STATE_IDLE){
 251              		.loc 1 171 0
 252 016c 6423     		movs	r3, #100
 253 016e 1D22     		movs	r2, #29
 254 0170 3049     		ldr	r1, .L22+108
 255 0172 2846     		mov	r0, r5
 256 0174 FFF7FEFF 		bl	HAL_UART_Transmit
 257              	.LVL25:
 258 0178 DCE7     		b	.L8
 259              	.L19:
 173:Src/state.c   **** 		}else if(current_state == STATE_SETUP){
 260              		.loc 1 173 0
 261 017a 6423     		movs	r3, #100
 262 017c 1D22     		movs	r2, #29
 263 017e 2E49     		ldr	r1, .L22+112
 264 0180 1948     		ldr	r0, .L22+32
 265 0182 FFF7FEFF 		bl	HAL_UART_Transmit
 266              	.LVL26:
 267 0186 D5E7     		b	.L8
 268              	.L20:
 175:Src/state.c   **** 		}else if(current_state == STATE_RUN){
 269              		.loc 1 175 0
 270 0188 6423     		movs	r3, #100
 271 018a 1E22     		movs	r2, #30
 272 018c 2B49     		ldr	r1, .L22+116
 273 018e 1648     		ldr	r0, .L22+32
 274 0190 FFF7FEFF 		bl	HAL_UART_Transmit
 275              	.LVL27:
 276 0194 CEE7     		b	.L8
 277              	.L21:
 177:Src/state.c   **** 		}
 278              		.loc 1 177 0
 279 0196 6423     		movs	r3, #100
 280 0198 1C22     		movs	r2, #28
 281 019a 2949     		ldr	r1, .L22+120
ARM GAS  /tmp/ccv27NRj.s 			page 10


 282 019c 1248     		ldr	r0, .L22+32
 283 019e FFF7FEFF 		bl	HAL_UART_Transmit
 284              	.LVL28:
 285 01a2 C7E7     		b	.L8
 286              	.L17:
 190:Src/state.c   **** 				"\r\n"
 287              		.loc 1 190 0
 288 01a4 0E4C     		ldr	r4, .L22+24
 289 01a6 40F20B12 		movw	r2, #267
 290 01aa 2649     		ldr	r1, .L22+124
 291 01ac 2046     		mov	r0, r4
 292 01ae FFF7FEFF 		bl	memcpy
 293              	.LVL29:
 207:Src/state.c   **** 	}else{
 294              		.loc 1 207 0
 295 01b2 2046     		mov	r0, r4
 296 01b4 FFF7FEFF 		bl	strlen
 297              	.LVL30:
 298 01b8 6423     		movs	r3, #100
 299 01ba 82B2     		uxth	r2, r0
 300 01bc 2146     		mov	r1, r4
 301 01be 0A48     		ldr	r0, .L22+32
 302 01c0 FFF7FEFF 		bl	HAL_UART_Transmit
 303              	.LVL31:
 304 01c4 4BE7     		b	.L1
 305              	.L23:
 306 01c6 00BF     		.align	2
 307              	.L22:
 308 01c8 00000000 		.word	.LC0
 309 01cc 00000000 		.word	debug_rx
 310 01d0 A4000000 		.word	.LC2
 311 01d4 AC000000 		.word	.LC3
 312 01d8 E4000000 		.word	.LC5
 313 01dc E4020000 		.word	.LC13
 314 01e0 00000000 		.word	debug_tx
 315 01e4 F4030000 		.word	.LC15
 316 01e8 00000000 		.word	huart3
 317 01ec 08000000 		.word	.LC1
 318 01f0 00000000 		.word	code_version
 319 01f4 00000000 		.word	count_min
 320 01f8 00000000 		.word	count_hour
 321 01fc 00000000 		.word	count_dec
 322 0200 00000000 		.word	count_sec
 323 0204 B4000000 		.word	.LC4
 324 0208 00000000 		.word	can1
 325 020c EC000000 		.word	.LC6
 326 0210 00000000 		.word	can3
 327 0214 94010000 		.word	.LC7
 328 0218 00000000 		.word	current_state
 329 021c 00000000 		.word	its0_connected
 330 0220 00000000 		.word	imu_connected
 331 0224 00000000 		.word	its3_connected
 332 0228 00000000 		.word	its2_connected
 333 022c 00000000 		.word	its1_connected
 334 0230 74020000 		.word	.LC12
 335 0234 F4010000 		.word	.LC8
 336 0238 14020000 		.word	.LC9
ARM GAS  /tmp/ccv27NRj.s 			page 11


 337 023c 34020000 		.word	.LC10
 338 0240 54020000 		.word	.LC11
 339 0244 E8020000 		.word	.LC14
 340              		.cfi_endproc
 341              	.LFE146:
 343              		.section	.text.imu_operations,"ax",%progbits
 344              		.align	1
 345              		.global	imu_operations
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 349              		.fpu fpv5-d16
 351              	imu_operations:
 352              	.LFB147:
 213:Src/state.c   **** 
 214:Src/state.c   **** void imu_operations(){
 353              		.loc 1 214 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 08B5     		push	{r3, lr}
 358              	.LCFI4:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 3, -8
 361              		.cfi_offset 14, -4
 215:Src/state.c   **** 	imu_connected = 1; //imu connected true
 362              		.loc 1 215 0
 363 0002 0122     		movs	r2, #1
 364 0004 094B     		ldr	r3, .L28
 365 0006 1A70     		strb	r2, [r3]
 216:Src/state.c   **** 	if(count_imu == 10 || count_imu == 11){
 366              		.loc 1 216 0
 367 0008 094B     		ldr	r3, .L28+4
 368 000a 1B88     		ldrh	r3, [r3]
 369 000c 0A3B     		subs	r3, r3, #10
 370 000e 9BB2     		uxth	r3, r3
 371 0010 9342     		cmp	r3, r2
 372 0012 03D9     		bls	.L27
 373              	.L25:
 217:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"IMU presente\r\n", strlen("IMU presente\r\n"), 10);
 218:Src/state.c   **** 	}
 219:Src/state.c   **** 	count_imu = 0;
 374              		.loc 1 219 0
 375 0014 0022     		movs	r2, #0
 376 0016 064B     		ldr	r3, .L28+4
 377 0018 1A80     		strh	r2, [r3]	@ movhi
 378 001a 08BD     		pop	{r3, pc}
 379              	.L27:
 217:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"IMU presente\r\n", strlen("IMU presente\r\n"), 10);
 380              		.loc 1 217 0
 381 001c 0A23     		movs	r3, #10
 382 001e 0E22     		movs	r2, #14
 383 0020 0449     		ldr	r1, .L28+8
 384 0022 0548     		ldr	r0, .L28+12
 385 0024 FFF7FEFF 		bl	HAL_UART_Transmit
 386              	.LVL32:
 387 0028 F4E7     		b	.L25
ARM GAS  /tmp/ccv27NRj.s 			page 12


 388              	.L29:
 389 002a 00BF     		.align	2
 390              	.L28:
 391 002c 00000000 		.word	imu_connected
 392 0030 00000000 		.word	count_imu
 393 0034 00000000 		.word	.LC16
 394 0038 00000000 		.word	huart3
 395              		.cfi_endproc
 396              	.LFE147:
 398              		.section	.text.init,"ax",%progbits
 399              		.align	1
 400              		.global	init
 401              		.syntax unified
 402              		.thumb
 403              		.thumb_func
 404              		.fpu fpv5-d16
 406              	init:
 407              	.LFB142:
  13:Src/state.c   **** 	if(debug_msg_arrived == 1){
 408              		.loc 1 13 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412 0000 08B5     		push	{r3, lr}
 413              	.LCFI5:
 414              		.cfi_def_cfa_offset 8
 415              		.cfi_offset 3, -8
 416              		.cfi_offset 14, -4
  14:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
 417              		.loc 1 14 0
 418 0002 0F4B     		ldr	r3, .L37
 419 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 420 0006 012B     		cmp	r3, #1
 421 0008 10D0     		beq	.L35
 422              	.L31:
  18:Src/state.c   **** 		switch (can1.rx_id){
 423              		.loc 1 18 0
 424 000a 0E48     		ldr	r0, .L37+4
 425 000c FFF7FEFF 		bl	fifoRxDataCAN_pop
 426              	.LVL33:
 427 0010 28B1     		cbz	r0, .L32
  19:Src/state.c   **** 		case ID_imu_acceleration:
 428              		.loc 1 19 0
 429 0012 0C4B     		ldr	r3, .L37+4
 430 0014 5B6A     		ldr	r3, [r3, #36]
 431 0016 A3F2EC43 		subw	r3, r3, #1260
 432 001a 012B     		cmp	r3, #1
 433 001c 0CD9     		bls	.L36
 434              	.L32:
  29:Src/state.c   **** 
 435              		.loc 1 29 0
 436 001e 0A48     		ldr	r0, .L37+8
 437 0020 FFF7FEFF 		bl	fifoRxDataCAN_pop
 438              	.LVL34:
  32:Src/state.c   **** }
 439              		.loc 1 32 0
 440 0024 0122     		movs	r2, #1
ARM GAS  /tmp/ccv27NRj.s 			page 13


 441 0026 094B     		ldr	r3, .L37+12
 442 0028 1A70     		strb	r2, [r3]
 443 002a 08BD     		pop	{r3, pc}
 444              	.L35:
  15:Src/state.c   **** 		debug_operations();
 445              		.loc 1 15 0
 446 002c 0022     		movs	r2, #0
 447 002e 044B     		ldr	r3, .L37
 448 0030 1A70     		strb	r2, [r3]
  16:Src/state.c   **** 	}
 449              		.loc 1 16 0
 450 0032 FFF7FEFF 		bl	debug_operations
 451              	.LVL35:
 452 0036 E8E7     		b	.L31
 453              	.L36:
  22:Src/state.c   **** 			break;
 454              		.loc 1 22 0
 455 0038 FFF7FEFF 		bl	imu_operations
 456              	.LVL36:
  23:Src/state.c   **** 		
 457              		.loc 1 23 0
 458 003c EFE7     		b	.L32
 459              	.L38:
 460 003e 00BF     		.align	2
 461              	.L37:
 462 0040 00000000 		.word	debug_msg_arrived
 463 0044 00000000 		.word	can1
 464 0048 00000000 		.word	can3
 465 004c 00000000 		.word	current_state
 466              		.cfi_endproc
 467              	.LFE142:
 469              		.section	.text.atc_pot_operations,"ax",%progbits
 470              		.align	1
 471              		.global	atc_pot_operations
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 475              		.fpu fpv5-d16
 477              	atc_pot_operations:
 478              	.LFB148:
 220:Src/state.c   **** }
 221:Src/state.c   **** void atc_pot_operations(){
 479              		.loc 1 221 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 484              	.LCFI6:
 485              		.cfi_def_cfa_offset 24
 486              		.cfi_offset 3, -24
 487              		.cfi_offset 4, -20
 488              		.cfi_offset 5, -16
 489              		.cfi_offset 6, -12
 490              		.cfi_offset 7, -8
 491              		.cfi_offset 14, -4
 222:Src/state.c   **** 	atc_connected = 1;
 492              		.loc 1 222 0
ARM GAS  /tmp/ccv27NRj.s 			page 14


 493 0002 0122     		movs	r2, #1
 494 0004 324B     		ldr	r3, .L45
 495 0006 1A70     		strb	r2, [r3]
 223:Src/state.c   **** 	count_atc = 0;
 496              		.loc 1 223 0
 497 0008 0022     		movs	r2, #0
 498 000a 324B     		ldr	r3, .L45+4
 499 000c 1A80     		strh	r2, [r3]	@ movhi
 224:Src/state.c   **** 	accel.pot1_val = can1.dataRx[0]*256 + can1.dataRx[1];
 500              		.loc 1 224 0
 501 000e 324C     		ldr	r4, .L45+8
 502 0010 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 503 0012 607C     		ldrb	r0, [r4, #17]	@ zero_extendqisi2
 504 0014 00EB0320 		add	r0, r0, r3, lsl #8
 505 0018 80B2     		uxth	r0, r0
 506 001a 304D     		ldr	r5, .L45+12
 507 001c 2880     		strh	r0, [r5]	@ movhi
 225:Src/state.c   **** 	accel.pot2_val = can1.dataRx[2]*256 + can1.dataRx[3];
 508              		.loc 1 225 0
 509 001e A37C     		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 510 0020 E17C     		ldrb	r1, [r4, #19]	@ zero_extendqisi2
 511 0022 01EB0321 		add	r1, r1, r3, lsl #8
 512 0026 89B2     		uxth	r1, r1
 513 0028 A980     		strh	r1, [r5, #4]	@ movhi
 226:Src/state.c   **** 	brake.pot1_val = can1.dataRx[4]*256 + can1.dataRx[5];
 514              		.loc 1 226 0
 515 002a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 516 002c 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 517 002e 02EB0322 		add	r2, r2, r3, lsl #8
 518 0032 92B2     		uxth	r2, r2
 519 0034 2A4E     		ldr	r6, .L45+16
 520 0036 3280     		strh	r2, [r6]	@ movhi
 227:Src/state.c   **** 	brake.pot2_val = can1.dataRx[6]*256 + can1.dataRx[7];
 521              		.loc 1 227 0
 522 0038 A77D     		ldrb	r7, [r4, #22]	@ zero_extendqisi2
 523 003a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 524 003c 03EB0723 		add	r3, r3, r7, lsl #8
 525 0040 9BB2     		uxth	r3, r3
 526 0042 B380     		strh	r3, [r6, #4]	@ movhi
 228:Src/state.c   **** 
 229:Src/state.c   **** 	//val100 = (val - pot_min_val)/(pot_max_val - pot_min_val)*100
 230:Src/state.c   **** 	if(accel.pot1_range!= 0 && accel.pot2_range != 0){
 527              		.loc 1 230 0
 528 0044 AC89     		ldrh	r4, [r5, #12]
 529 0046 ACB1     		cbz	r4, .L40
 530              		.loc 1 230 0 is_stmt 0 discriminator 1
 531 0048 6E8A     		ldrh	r6, [r5, #18]
 532 004a 9EB1     		cbz	r6, .L40
 231:Src/state.c   **** 		accel.pot1_val_100 = (accel.pot1_val - accel.pot1_min_val)/(accel.pot1_range)*100;
 533              		.loc 1 231 0 is_stmt 1
 534 004c EF89     		ldrh	r7, [r5, #14]
 535 004e C01B     		subs	r0, r0, r7
 536 0050 90FBF4F0 		sdiv	r0, r0, r4
 537 0054 00EB8000 		add	r0, r0, r0, lsl #2
 538 0058 00EB8000 		add	r0, r0, r0, lsl #2
 539 005c 8400     		lsls	r4, r0, #2
 540 005e AC70     		strb	r4, [r5, #2]
ARM GAS  /tmp/ccv27NRj.s 			page 15


 232:Src/state.c   **** 		accel.pot2_val_100 = (accel.pot2_val - accel.pot2_min_val)/(accel.pot2_range)*100;
 541              		.loc 1 232 0
 542 0060 288A     		ldrh	r0, [r5, #16]
 543 0062 091A     		subs	r1, r1, r0
 544 0064 91FBF6F1 		sdiv	r1, r1, r6
 545 0068 01EB8101 		add	r1, r1, r1, lsl #2
 546 006c 01EB8101 		add	r1, r1, r1, lsl #2
 547 0070 8800     		lsls	r0, r1, #2
 548 0072 A871     		strb	r0, [r5, #6]
 549              	.L40:
 233:Src/state.c   **** 	}
 234:Src/state.c   **** 	if(brake.pot1_range != 0 && brake.pot2_range != 0){
 550              		.loc 1 234 0
 551 0074 1A49     		ldr	r1, .L45+16
 552 0076 8989     		ldrh	r1, [r1, #12]
 553 0078 B1B1     		cbz	r1, .L41
 554              		.loc 1 234 0 is_stmt 0 discriminator 1
 555 007a 1948     		ldr	r0, .L45+16
 556 007c 448A     		ldrh	r4, [r0, #18]
 557 007e 9CB1     		cbz	r4, .L41
 235:Src/state.c   **** 		brake.pot1_val_100 = (brake.pot1_val - brake.pot1_min_val)/(brake.pot1_range)*100;
 558              		.loc 1 235 0 is_stmt 1
 559 0080 C589     		ldrh	r5, [r0, #14]
 560 0082 521B     		subs	r2, r2, r5
 561 0084 92FBF1F2 		sdiv	r2, r2, r1
 562 0088 02EB8202 		add	r2, r2, r2, lsl #2
 563 008c 02EB8202 		add	r2, r2, r2, lsl #2
 564 0090 9100     		lsls	r1, r2, #2
 565 0092 8170     		strb	r1, [r0, #2]
 236:Src/state.c   **** 		brake.pot2_val_100 = (brake.pot2_val - brake.pot2_min_val)/(brake.pot2_range)*100;
 566              		.loc 1 236 0
 567 0094 028A     		ldrh	r2, [r0, #16]
 568 0096 9B1A     		subs	r3, r3, r2
 569 0098 93FBF4F3 		sdiv	r3, r3, r4
 570 009c 03EB8303 		add	r3, r3, r3, lsl #2
 571 00a0 03EB8303 		add	r3, r3, r3, lsl #2
 572 00a4 9A00     		lsls	r2, r3, #2
 573 00a6 8271     		strb	r2, [r0, #6]
 574              	.L41:
 237:Src/state.c   **** 	}
 238:Src/state.c   **** 
 239:Src/state.c   **** 	if(accel_implausibility_check()){
 575              		.loc 1 239 0
 576 00a8 FFF7FEFF 		bl	accel_implausibility_check
 577              	.LVL37:
 578 00ac 00B9     		cbnz	r0, .L44
 579              	.L39:
 580 00ae F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 581              	.L44:
 240:Src/state.c   **** 		accel.pot1_val = 0;
 582              		.loc 1 240 0
 583 00b0 0A4B     		ldr	r3, .L45+12
 584 00b2 0022     		movs	r2, #0
 585 00b4 1A80     		strh	r2, [r3]	@ movhi
 241:Src/state.c   **** 		accel.pot2_val = 0;
 586              		.loc 1 241 0
 587 00b6 9A80     		strh	r2, [r3, #4]	@ movhi
ARM GAS  /tmp/ccv27NRj.s 			page 16


 242:Src/state.c   **** 		accel.pot1_val_100 = 0;
 588              		.loc 1 242 0
 589 00b8 9A70     		strb	r2, [r3, #2]
 243:Src/state.c   **** 		accel.pot2_val_100 = 0;
 590              		.loc 1 243 0
 591 00ba 9A71     		strb	r2, [r3, #6]
 244:Src/state.c   **** 		//send error//
 245:Src/state.c   **** 		can1.tx_id = 0x10;
 592              		.loc 1 245 0
 593 00bc 0648     		ldr	r0, .L45+8
 594 00be 1023     		movs	r3, #16
 595 00c0 0362     		str	r3, [r0, #32]
 246:Src/state.c   **** 		can1.dataTx[0] = 1;
 596              		.loc 1 246 0
 597 00c2 0121     		movs	r1, #1
 598 00c4 0172     		strb	r1, [r0, #8]
 247:Src/state.c   **** 		can1.tx_size = 1;
 599              		.loc 1 247 0
 600 00c6 0160     		str	r1, [r0]
 248:Src/state.c   **** 		CAN_Send(&can1,highPriority);
 601              		.loc 1 248 0
 602 00c8 FFF7FEFF 		bl	CAN_Send
 603              	.LVL38:
 249:Src/state.c   **** 	}else{
 250:Src/state.c   **** 		
 251:Src/state.c   **** 		
 252:Src/state.c   **** 		
 253:Src/state.c   **** 	}
 254:Src/state.c   **** 	/*if(brake_implausibility_check()){
 255:Src/state.c   **** 		brake.pot1_val = 0;
 256:Src/state.c   **** 		brake.pot2_val = 0;
 257:Src/state.c   **** 	}*/
 258:Src/state.c   **** 
 259:Src/state.c   **** }
 604              		.loc 1 259 0
 605 00cc EFE7     		b	.L39
 606              	.L46:
 607 00ce 00BF     		.align	2
 608              	.L45:
 609 00d0 00000000 		.word	atc_connected
 610 00d4 00000000 		.word	count_atc
 611 00d8 00000000 		.word	can1
 612 00dc 00000000 		.word	accel
 613 00e0 00000000 		.word	brake
 614              		.cfi_endproc
 615              	.LFE148:
 617              		.section	.text.idle,"ax",%progbits
 618              		.align	1
 619              		.global	idle
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu fpv5-d16
 625              	idle:
 626              	.LFB143:
  40:Src/state.c   **** 	if(debug_msg_arrived == 1){
 627              		.loc 1 40 0
ARM GAS  /tmp/ccv27NRj.s 			page 17


 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631 0000 08B5     		push	{r3, lr}
 632              	.LCFI7:
 633              		.cfi_def_cfa_offset 8
 634              		.cfi_offset 3, -8
 635              		.cfi_offset 14, -4
  41:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
 636              		.loc 1 41 0
 637 0002 1D4B     		ldr	r3, .L58
 638 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 639 0006 012B     		cmp	r3, #1
 640 0008 0CD0     		beq	.L55
 641              	.L48:
  45:Src/state.c   **** 		switch(can1.rx_id){
 642              		.loc 1 45 0
 643 000a 1C48     		ldr	r0, .L58+4
 644 000c FFF7FEFF 		bl	fifoRxDataCAN_pop
 645              	.LVL39:
 646 0010 38B1     		cbz	r0, .L47
  46:Src/state.c   **** 			case ID_ASK_STATE:
 647              		.loc 1 46 0
 648 0012 1A4B     		ldr	r3, .L58+4
 649 0014 5B6A     		ldr	r3, [r3, #36]
 650 0016 342B     		cmp	r3, #52
 651 0018 2BD0     		beq	.L50
 652 001a A02B     		cmp	r3, #160
 653 001c 1AD0     		beq	.L51
 654 001e 102B     		cmp	r3, #16
 655 0020 06D0     		beq	.L56
 656              	.L47:
 657 0022 08BD     		pop	{r3, pc}
 658              	.L55:
  42:Src/state.c   **** 		debug_operations();
 659              		.loc 1 42 0
 660 0024 0022     		movs	r2, #0
 661 0026 144B     		ldr	r3, .L58
 662 0028 1A70     		strb	r2, [r3]
  43:Src/state.c   **** 	}
 663              		.loc 1 43 0
 664 002a FFF7FEFF 		bl	debug_operations
 665              	.LVL40:
 666 002e ECE7     		b	.L48
 667              	.L56:
  48:Src/state.c   **** 				can1.dataTx[1] = 0;
 668              		.loc 1 48 0
 669 0030 134B     		ldr	r3, .L58+8
 670 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 671 0034 1148     		ldr	r0, .L58+4
 672 0036 0372     		strb	r3, [r0, #8]
  49:Src/state.c   **** 				can1.dataTx[2] = 0;
 673              		.loc 1 49 0
 674 0038 0021     		movs	r1, #0
 675 003a 4172     		strb	r1, [r0, #9]
  50:Src/state.c   **** 				can1.dataTx[3] = 0;
 676              		.loc 1 50 0
ARM GAS  /tmp/ccv27NRj.s 			page 18


 677 003c 8172     		strb	r1, [r0, #10]
  51:Src/state.c   **** 				can1.dataTx[4] = 0;
 678              		.loc 1 51 0
 679 003e C172     		strb	r1, [r0, #11]
  52:Src/state.c   **** 				can1.dataTx[5] = 0;
 680              		.loc 1 52 0
 681 0040 0173     		strb	r1, [r0, #12]
  53:Src/state.c   **** 				can1.dataTx[6] = 0;
 682              		.loc 1 53 0
 683 0042 4173     		strb	r1, [r0, #13]
  54:Src/state.c   **** 				can1.dataTx[7] = 0;
 684              		.loc 1 54 0
 685 0044 8173     		strb	r1, [r0, #14]
  55:Src/state.c   **** 				can1.tx_id = ID_ACU_1;
 686              		.loc 1 55 0
 687 0046 C173     		strb	r1, [r0, #15]
  56:Src/state.c   **** 				CAN_Send(&can1, normalPriority);
 688              		.loc 1 56 0
 689 0048 4FF48073 		mov	r3, #256
 690 004c 0362     		str	r3, [r0, #32]
  57:Src/state.c   **** 				break;
 691              		.loc 1 57 0
 692 004e FFF7FEFF 		bl	CAN_Send
 693              	.LVL41:
  58:Src/state.c   **** 			case ID_ASK_INV_DX:
 694              		.loc 1 58 0
 695 0052 08BD     		pop	{r3, pc}
 696              	.L51:
  68:Src/state.c   **** 					current_state = can1.dataRx[1];
 697              		.loc 1 68 0
 698 0054 094B     		ldr	r3, .L58+4
 699 0056 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 700 0058 022B     		cmp	r3, #2
 701 005a 05D0     		beq	.L57
  70:Src/state.c   **** 					current_state = STATE_SETUP;
 702              		.loc 1 70 0
 703 005c 032B     		cmp	r3, #3
 704 005e E0D1     		bne	.L47
  71:Src/state.c   **** 				}
 705              		.loc 1 71 0
 706 0060 0222     		movs	r2, #2
 707 0062 074B     		ldr	r3, .L58+8
 708 0064 1A70     		strb	r2, [r3]
 709 0066 08BD     		pop	{r3, pc}
 710              	.L57:
  69:Src/state.c   **** 				}else if(can1.dataRx[0] == 3){ //----- change state to setup -----//
 711              		.loc 1 69 0
 712 0068 044B     		ldr	r3, .L58+4
 713 006a 5A7C     		ldrb	r2, [r3, #17]	@ zero_extendqisi2
 714 006c 044B     		ldr	r3, .L58+8
 715 006e 1A70     		strb	r2, [r3]
 716 0070 08BD     		pop	{r3, pc}
 717              	.L50:
  75:Src/state.c   **** 				break;
 718              		.loc 1 75 0
 719 0072 FFF7FEFF 		bl	atc_pot_operations
 720              	.LVL42:
ARM GAS  /tmp/ccv27NRj.s 			page 19


  82:Src/state.c   **** /*******************************************************************
 721              		.loc 1 82 0
 722 0076 D4E7     		b	.L47
 723              	.L59:
 724              		.align	2
 725              	.L58:
 726 0078 00000000 		.word	debug_msg_arrived
 727 007c 00000000 		.word	can1
 728 0080 00000000 		.word	current_state
 729              		.cfi_endproc
 730              	.LFE143:
 732              		.section	.text.setup,"ax",%progbits
 733              		.align	1
 734              		.global	setup
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv5-d16
 740              	setup:
 741              	.LFB144:
  89:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
 742              		.loc 1 89 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746 0000 08B5     		push	{r3, lr}
 747              	.LCFI8:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 3, -8
 750              		.cfi_offset 14, -4
  90:Src/state.c   **** 		switch(can1.rx_id){
 751              		.loc 1 90 0
 752 0002 1248     		ldr	r0, .L68
 753 0004 FFF7FEFF 		bl	fifoRxDataCAN_pop
 754              	.LVL43:
 755 0008 68B1     		cbz	r0, .L60
  91:Src/state.c   **** 			case ID_STEERING_WEEL_1:
 756              		.loc 1 91 0
 757 000a 104B     		ldr	r3, .L68
 758 000c 5B6A     		ldr	r3, [r3, #36]
 759 000e 342B     		cmp	r3, #52
 760 0010 07D0     		beq	.L62
 761 0012 A02B     		cmp	r3, #160
 762 0014 07D1     		bne	.L60
  93:Src/state.c   **** 					current_state = STATE_IDLE;
 763              		.loc 1 93 0
 764 0016 0D4B     		ldr	r3, .L68
 765 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 766 001a 042B     		cmp	r3, #4
 767 001c 04D0     		beq	.L66
  95:Src/state.c   **** 					current_state = STATE_RUN;
 768              		.loc 1 95 0
 769 001e 052B     		cmp	r3, #5
 770 0020 06D0     		beq	.L67
 771              	.L62:
 103:Src/state.c   **** 				break;
 772              		.loc 1 103 0
ARM GAS  /tmp/ccv27NRj.s 			page 20


 773 0022 FFF7FEFF 		bl	atc_pot_operations
 774              	.LVL44:
 775              	.L60:
 776 0026 08BD     		pop	{r3, pc}
 777              	.L66:
  94:Src/state.c   **** 				}else if(can1.dataRx[0] == 5){ //----- change state to run -----//
 778              		.loc 1 94 0
 779 0028 0122     		movs	r2, #1
 780 002a 094B     		ldr	r3, .L68+4
 781 002c 1A70     		strb	r2, [r3]
 782 002e F8E7     		b	.L62
 783              	.L67:
  96:Src/state.c   **** 					can1.tx_id = ID_ACU_2;
 784              		.loc 1 96 0
 785 0030 0322     		movs	r2, #3
 786 0032 074B     		ldr	r3, .L68+4
 787 0034 1A70     		strb	r2, [r3]
  97:Src/state.c   **** 					can1.dataRx[0] = 5;
 788              		.loc 1 97 0
 789 0036 0548     		ldr	r0, .L68
 790 0038 5523     		movs	r3, #85
 791 003a 0362     		str	r3, [r0, #32]
  98:Src/state.c   **** 					can1.tx_size = 1;
 792              		.loc 1 98 0
 793 003c 0523     		movs	r3, #5
 794 003e 0374     		strb	r3, [r0, #16]
  99:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 795              		.loc 1 99 0
 796 0040 0123     		movs	r3, #1
 797 0042 0360     		str	r3, [r0]
 100:Src/state.c   **** 				}
 798              		.loc 1 100 0
 799 0044 0021     		movs	r1, #0
 800 0046 FFF7FEFF 		bl	CAN_Send
 801              	.LVL45:
 802 004a EAE7     		b	.L62
 803              	.L69:
 804              		.align	2
 805              	.L68:
 806 004c 00000000 		.word	can1
 807 0050 00000000 		.word	current_state
 808              		.cfi_endproc
 809              	.LFE144:
 811              		.section	.text.run,"ax",%progbits
 812              		.align	1
 813              		.global	run
 814              		.syntax unified
 815              		.thumb
 816              		.thumb_func
 817              		.fpu fpv5-d16
 819              	run:
 820              	.LFB145:
 116:Src/state.c   **** 	if(fifoRxDataCAN_pop(&can1)){
 821              		.loc 1 116 0
 822              		.cfi_startproc
 823              		@ args = 0, pretend = 0, frame = 0
 824              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccv27NRj.s 			page 21


 825 0000 08B5     		push	{r3, lr}
 826              	.LCFI9:
 827              		.cfi_def_cfa_offset 8
 828              		.cfi_offset 3, -8
 829              		.cfi_offset 14, -4
 117:Src/state.c   **** 		switch(can1.rx_id){
 830              		.loc 1 117 0
 831 0002 0A48     		ldr	r0, .L75
 832 0004 FFF7FEFF 		bl	fifoRxDataCAN_pop
 833              	.LVL46:
 834 0008 78B1     		cbz	r0, .L70
 118:Src/state.c   **** 			case ID_STEERING_WEEL_1:
 835              		.loc 1 118 0
 836 000a 084B     		ldr	r3, .L75
 837 000c 5B6A     		ldr	r3, [r3, #36]
 838 000e 342B     		cmp	r3, #52
 839 0010 09D0     		beq	.L72
 840 0012 A02B     		cmp	r3, #160
 841 0014 09D1     		bne	.L70
 120:Src/state.c   **** 					current_state = STATE_SETUP;
 842              		.loc 1 120 0
 843 0016 054B     		ldr	r3, .L75
 844 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 845 001a 062B     		cmp	r3, #6
 846 001c 05D1     		bne	.L70
 121:Src/state.c   **** 				}
 847              		.loc 1 121 0
 848 001e 0222     		movs	r2, #2
 849 0020 034B     		ldr	r3, .L75+4
 850 0022 1A70     		strb	r2, [r3]
 851 0024 08BD     		pop	{r3, pc}
 852              	.L72:
 125:Src/state.c   **** 				break;
 853              		.loc 1 125 0
 854 0026 FFF7FEFF 		bl	atc_pot_operations
 855              	.LVL47:
 856              	.L70:
 857 002a 08BD     		pop	{r3, pc}
 858              	.L76:
 859              		.align	2
 860              	.L75:
 861 002c 00000000 		.word	can1
 862 0030 00000000 		.word	current_state
 863              		.cfi_endproc
 864              	.LFE145:
 866              		.comm	current_state,1,1
 867              		.section	.rodata.debug_operations.str1.4,"aMS",%progbits,1
 868              		.align	2
 869              	.LC0:
 870 0000 68656C70 		.ascii	"help\000"
 870      00
 871 0005 000000   		.space	3
 872              	.LC1:
 873 0008 0D0A2A2A 		.ascii	"\015\012***********ECU HELP***********\015\012Avaia"
 873      2A2A2A2A 
 873      2A2A2A2A 
 873      2A454355 
ARM GAS  /tmp/ccv27NRj.s 			page 22


 873      2048454C 
 874 002f 626C6520 		.ascii	"ble msg are:\015\012\011-- status -> print ECU stat"
 874      6D736720 
 874      6172653A 
 874      0D0A092D 
 874      2D207374 
 875 0059 75730D0A 		.ascii	"us\015\012\011-- time -> print activity time\015\012"
 875      092D2D20 
 875      74696D65 
 875      202D3E20 
 875      7072696E 
 876 007e 092D2D20 		.ascii	"\011-- codev  -> print code version\015\012\000"
 876      636F6465 
 876      7620202D 
 876      3E207072 
 876      696E7420 
 877 00a1 000000   		.space	3
 878              	.LC2:
 879 00a4 636F6465 		.ascii	"codev\000"
 879      7600
 880 00aa 0000     		.space	2
 881              	.LC3:
 882 00ac 74696D65 		.ascii	"time\000"
 882      00
 883 00b1 000000   		.space	3
 884              	.LC4:
 885 00b4 0D0A5469 		.ascii	"\015\012Time: %d hours : %d min : %d sec : %d dec\015"
 885      6D653A20 
 885      25642068 
 885      6F757273 
 885      203A2025 
 886 00e0 0A00     		.ascii	"\012\000"
 887 00e2 0000     		.space	2
 888              	.LC5:
 889 00e4 73746174 		.ascii	"status\000"
 889      757300
 890 00eb 00       		.space	1
 891              	.LC6:
 892 00ec 0D0A0A74 		.ascii	"\015\012\012type of status:\015\012\011 0 = OK\015\012"
 892      79706520 
 892      6F662073 
 892      74617475 
 892      733A0D0A 
 893 010a 09203120 		.ascii	"\011 1 = ERROR\015\012\011 2 = BUSY\015\012\011 3 ="
 893      3D204552 
 893      524F520D 
 893      0A092032 
 893      203D2042 
 894 0128 2054494D 		.ascii	" TIMEOUT\015\012\012CAN1 status:\015\012\011CAN1 co"
 894      454F5554 
 894      0D0A0A43 
 894      414E3120 
 894      73746174 
 895 0149 6E666967 		.ascii	"nfig status: %d \015\012\011CAN1 notification statu"
 895      20737461 
 895      7475733A 
 895      20256420 
ARM GAS  /tmp/ccv27NRj.s 			page 23


 895      0D0A0943 
 896 0173 733A2025 		.ascii	"s: %d\015\012\011CAN1 start status: %d\015\012\000"
 896      640D0A09 
 896      43414E31 
 896      20737461 
 896      72742073 
 897 0193 00       		.space	1
 898              	.LC7:
 899 0194 43414E33 		.ascii	"CAN3 status:\015\012\011CAN3 config status: %d \015"
 899      20737461 
 899      7475733A 
 899      0D0A0943 
 899      414E3320 
 900 01bb 0A094341 		.ascii	"\012\011CAN3 notification status: %d\015\012\011CAN"
 900      4E33206E 
 900      6F746966 
 900      69636174 
 900      696F6E20 
 901 01df 33207374 		.ascii	"3 start status: %d\015\012\000"
 901      61727420 
 901      73746174 
 901      75733A20 
 901      25640D0A 
 902              	.LC8:
 903 01f4 0D0A4375 		.ascii	"\015\012Current state: STATE_INIT\015\012\000"
 903      7272656E 
 903      74207374 
 903      6174653A 
 903      20535441 
 904 0212 0000     		.space	2
 905              	.LC9:
 906 0214 0D0A4375 		.ascii	"\015\012Current state: STATE_IDLE\015\012\000"
 906      7272656E 
 906      74207374 
 906      6174653A 
 906      20535441 
 907 0232 0000     		.space	2
 908              	.LC10:
 909 0234 0D0A4375 		.ascii	"\015\012Current state: STATE_SETUP\015\012\000"
 909      7272656E 
 909      74207374 
 909      6174653A 
 909      20535441 
 910 0253 00       		.space	1
 911              	.LC11:
 912 0254 0D0A4375 		.ascii	"\015\012Current state: STATE_RUN\015\012\000"
 912      7272656E 
 912      74207374 
 912      6174653A 
 912      20535441 
 913 0271 000000   		.space	3
 914              	.LC12:
 915 0274 0D0A4465 		.ascii	"\015\012Device connected : (0 = no, 1 = yes)\015\012"
 915      76696365 
 915      20636F6E 
 915      6E656374 
 915      6564203A 
ARM GAS  /tmp/ccv27NRj.s 			page 24


 916 029c 0920494D 		.ascii	"\011 IMU -> %d\015\012\011 ITS0 -> %d\015\012\011 I"
 916      55202D3E 
 916      2025640D 
 916      0A092049 
 916      54533020 
 917 02ba 54533120 		.ascii	"TS1 -> %d\015\012\011 ITS2 -> %d\015\012\011 ITS3 -"
 917      2D3E2025 
 917      640D0A09 
 917      20495453 
 917      32202D3E 
 918 02db 3E202564 		.ascii	"> %d\015\012\000"
 918      0D0A00
 919 02e2 0000     		.space	2
 920              	.LC13:
 921 02e4 67617900 		.ascii	"gay\000"
 922              	.LC14:
 923 02e8 0D0A2020 		.ascii	"\015\012          $\015\012        $   $\015\012   "
 923      20202020 
 923      20202020 
 923      240D0A20 
 923      20202020 
 924 0309 20202020 		.ascii	"    $     $\015\012       $$$$$$$\015\012       $$$"
 924      24202020 
 924      2020240D 
 924      0A202020 
 924      20202020 
 925 0330 24242424 		.ascii	"$$$$\015\012       $$$$$$$\015\012       $$$$$$$\015"
 925      0D0A2020 
 925      20202020 
 925      20242424 
 925      24242424 
 926 0355 0A202020 		.ascii	"\012       $$$$$$$\015\012       $$$$$$$\015\012   "
 926      20202020 
 926      24242424 
 926      2424240D 
 926      0A202020 
 927 0379 20202020 		.ascii	"    $$$$$$$\015\012  $$$$$$     $$$$$$\015\012 $$$$"
 927      24242424 
 927      2424240D 
 927      0A202024 
 927      24242424 
 928 03a0 24242424 		.ascii	"$$$$   $$$$$$$$\015\012$$$$$$$$$$$$$$$$$$$$\015\012"
 928      20202024 
 928      24242424 
 928      2424240D 
 928      0A242424 
 929 03c7 20242424 		.ascii	" $$$$$$$$   $$$$$$$$\015\012  $$$$$$     $$$$$$\015"
 929      24242424 
 929      24202020 
 929      24242424 
 929      24242424 
 930 03f1 0A00     		.ascii	"\012\000"
 931 03f3 00       		.space	1
 932              	.LC15:
 933 03f4 0D0A4552 		.ascii	"\015\012ERROR : msg %s doesn't exist\015\012\000"
 933      524F5220 
 933      3A206D73 
ARM GAS  /tmp/ccv27NRj.s 			page 25


 933      67202573 
 933      20646F65 
 934              		.section	.rodata.imu_operations.str1.4,"aMS",%progbits,1
 935              		.align	2
 936              	.LC16:
 937 0000 494D5520 		.ascii	"IMU presente\015\012\000"
 937      70726573 
 937      656E7465 
 937      0D0A00
 938              		.text
 939              	.Letext0:
 940              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 941              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 942              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 943              		.file 5 "Inc/state.h"
 944              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 945              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 946              		.file 8 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 947              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 948              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 949              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 950              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 951              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 952              		.file 14 "Inc/can.h"
 953              		.file 15 "Middlewares/Third_Party/FatFs/src/integer.h"
 954              		.file 16 "/usr/include/newlib/sys/lock.h"
 955              		.file 17 "/usr/include/newlib/sys/_types.h"
 956              		.file 18 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 957              		.file 19 "/usr/include/newlib/sys/reent.h"
 958              		.file 20 "/usr/include/newlib/stdlib.h"
 959              		.file 21 "Middlewares/Third_Party/FatFs/src/ff.h"
 960              		.file 22 "Middlewares/Third_Party/FatFs/src/diskio.h"
 961              		.file 23 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 962              		.file 24 "Inc/sd_diskio.h"
 963              		.file 25 "Inc/fatfs.h"
 964              		.file 26 "Inc/pedals.h"
 965              		.file 27 "Inc/global_variables.h"
 966              		.file 28 "/usr/include/newlib/string.h"
 967              		.file 29 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccv27NRj.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 state.c
     /tmp/ccv27NRj.s:17     .text.debug_operations:0000000000000000 $t
     /tmp/ccv27NRj.s:24     .text.debug_operations:0000000000000000 debug_operations
     /tmp/ccv27NRj.s:308    .text.debug_operations:00000000000001c8 $d
                            *COM*:0000000000000001 current_state
     /tmp/ccv27NRj.s:344    .text.imu_operations:0000000000000000 $t
     /tmp/ccv27NRj.s:351    .text.imu_operations:0000000000000000 imu_operations
     /tmp/ccv27NRj.s:391    .text.imu_operations:000000000000002c $d
     /tmp/ccv27NRj.s:399    .text.init:0000000000000000 $t
     /tmp/ccv27NRj.s:406    .text.init:0000000000000000 init
     /tmp/ccv27NRj.s:462    .text.init:0000000000000040 $d
     /tmp/ccv27NRj.s:470    .text.atc_pot_operations:0000000000000000 $t
     /tmp/ccv27NRj.s:477    .text.atc_pot_operations:0000000000000000 atc_pot_operations
     /tmp/ccv27NRj.s:609    .text.atc_pot_operations:00000000000000d0 $d
     /tmp/ccv27NRj.s:618    .text.idle:0000000000000000 $t
     /tmp/ccv27NRj.s:625    .text.idle:0000000000000000 idle
     /tmp/ccv27NRj.s:726    .text.idle:0000000000000078 $d
     /tmp/ccv27NRj.s:733    .text.setup:0000000000000000 $t
     /tmp/ccv27NRj.s:740    .text.setup:0000000000000000 setup
     /tmp/ccv27NRj.s:806    .text.setup:000000000000004c $d
     /tmp/ccv27NRj.s:812    .text.run:0000000000000000 $t
     /tmp/ccv27NRj.s:819    .text.run:0000000000000000 run
     /tmp/ccv27NRj.s:861    .text.run:000000000000002c $d
     /tmp/ccv27NRj.s:868    .rodata.debug_operations.str1.4:0000000000000000 $d
     /tmp/ccv27NRj.s:935    .rodata.imu_operations.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
strcmp
sprintf
strlen
HAL_UART_Transmit
memcpy
debug_rx
debug_tx
huart3
code_version
count_min
count_hour
count_dec
count_sec
can1
can3
its0_connected
imu_connected
its3_connected
its2_connected
its1_connected
count_imu
fifoRxDataCAN_pop
debug_msg_arrived
accel_implausibility_check
CAN_Send
atc_connected
count_atc
accel
ARM GAS  /tmp/ccv27NRj.s 			page 27


brake
