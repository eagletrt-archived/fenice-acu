ARM GAS  /tmp/ccYCCuNH.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"state.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.set_bit_uint8,"ax",%progbits
  17              		.align	1
  18              		.global	set_bit_uint8
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	set_bit_uint8:
  25              	.LFB142:
  26              		.file 1 "Src/state.c"
   1:Src/state.c   **** #include "state.h"
   2:Src/state.c   **** #include "can.h"
   3:Src/state.c   **** #include "global_variables.h"
   4:Src/state.c   **** #include "stdio.h"
   5:Src/state.c   **** #include "stm32f7xx_hal.h"
   6:Src/state.c   **** #include "string.h"
   7:Src/state.c   **** /*******************************************************************
   8:Src/state.c   ****  *                         USER FUNCTIONS
   9:Src/state.c   ****  *******************************************************************/ 
  10:Src/state.c   **** void set_bit_uint8(uint8_t* _var, uint8_t _nBit, uint8_t _bool){
  27              		.loc 1 10 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  11:Src/state.c   **** 	if(_bool == 0 || _bool == 1){
  33              		.loc 1 11 0
  34 0000 012A     		cmp	r2, #1
  35 0002 00D9     		bls	.L8
  36              	.LVL1:
  37              	.L7:
  12:Src/state.c   **** 		(*_var) = ((*_var) & ( 0b11111111 ^ (0b00000001 << _nBit))) | (0b00000000 | (_bool << _nBit));
  13:Src/state.c   **** 	}
  14:Src/state.c   **** }
  38              		.loc 1 14 0
  39 0004 7047     		bx	lr
  40              	.LVL2:
  41              	.L8:
  10:Src/state.c   **** 	if(_bool == 0 || _bool == 1){
  42              		.loc 1 10 0
  43 0006 10B4     		push	{r4}
ARM GAS  /tmp/ccYCCuNH.s 			page 2


  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 4
  46              		.cfi_offset 4, -4
  12:Src/state.c   **** 		(*_var) = ((*_var) & ( 0b11111111 ^ (0b00000001 << _nBit))) | (0b00000000 | (_bool << _nBit));
  47              		.loc 1 12 0
  48 0008 90F90040 		ldrsb	r4, [r0]
  49 000c 0123     		movs	r3, #1
  50 000e 8B40     		lsls	r3, r3, r1
  51 0010 DB43     		mvns	r3, r3
  52 0012 5BB2     		sxtb	r3, r3
  53 0014 2340     		ands	r3, r3, r4
  54 0016 8A40     		lsls	r2, r2, r1
  55              	.LVL3:
  56 0018 1A43     		orrs	r2, r2, r3
  57 001a 0270     		strb	r2, [r0]
  58              		.loc 1 14 0
  59 001c 5DF8044B 		ldr	r4, [sp], #4
  60              	.LCFI1:
  61              		.cfi_restore 4
  62              		.cfi_def_cfa_offset 0
  63 0020 F0E7     		b	.L7
  64              		.cfi_endproc
  65              	.LFE142:
  67              		.section	.text.init,"ax",%progbits
  68              		.align	1
  69              		.global	init
  70              		.syntax unified
  71              		.thumb
  72              		.thumb_func
  73              		.fpu fpv5-d16
  75              	init:
  76              	.LFB143:
  15:Src/state.c   **** /*******************************************************************
  16:Src/state.c   ****  *                         STATE VARIABLES
  17:Src/state.c   ****  *******************************************************************/ 
  18:Src/state.c   **** /*** GLOBAL ***/
  19:Src/state.c   **** int setup_init = 0;
  20:Src/state.c   **** int critical_errors = 0;
  21:Src/state.c   **** 
  22:Src/state.c   **** /*** FOR INIT STATE ***/
  23:Src/state.c   **** int init_step = 0;
  24:Src/state.c   **** uint32_t init_step_start_time = 0;
  25:Src/state.c   **** uint8_t inv_init_response = 0; // bit 0 = inv R -> 0 = no / 1 = YES ---- bit 1 = inv L -> 0 = no / 
  26:Src/state.c   **** // Default state
  27:Src/state.c   **** // Init variables
  28:Src/state.c   **** /*******************************************************************
  29:Src/state.c   ****  *                         START INIT STATE
  30:Src/state.c   ****  *******************************************************************/
  31:Src/state.c   **** void init()
  32:Src/state.c   **** {
  77              		.loc 1 32 0
  78              		.cfi_startproc
  79              		@ args = 0, pretend = 0, frame = 0
  80              		@ frame_needed = 0, uses_anonymous_args = 0
  81 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
  82              	.LCFI2:
  83              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccYCCuNH.s 			page 3


  84              		.cfi_offset 3, -40
  85              		.cfi_offset 4, -36
  86              		.cfi_offset 5, -32
  87              		.cfi_offset 6, -28
  88              		.cfi_offset 7, -24
  89              		.cfi_offset 8, -20
  90              		.cfi_offset 9, -16
  91              		.cfi_offset 10, -12
  92              		.cfi_offset 11, -8
  93              		.cfi_offset 14, -4
  33:Src/state.c   **** 	if(init_step == 0){
  94              		.loc 1 33 0
  95 0004 5C4B     		ldr	r3, .L25
  96 0006 1B68     		ldr	r3, [r3]
  97 0008 4BB1     		cbz	r3, .L19
  34:Src/state.c   **** 		init_step = 1;
  35:Src/state.c   **** 		/* Send inverter L disable */
  36:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_SX;
  37:Src/state.c   **** 		can3.dataTx[0] = 0x51;
  38:Src/state.c   **** 		can3.dataTx[1] = 0x04;
  39:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  40:Src/state.c   **** 		can3.tx_size = 3;
  41:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  42:Src/state.c   **** 
  43:Src/state.c   **** 		/* Send inverter R disable */
  44:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_DX;
  45:Src/state.c   **** 		can3.dataTx[0] = 0x51;
  46:Src/state.c   **** 		can3.dataTx[1] = 0x04;
  47:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  48:Src/state.c   **** 		can3.tx_size = 3;
  49:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  50:Src/state.c   **** 
  51:Src/state.c   **** 		/* Send req to inverter L presence */
  52:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_SX;
  53:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
  54:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
  55:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  56:Src/state.c   **** 		can3.tx_size = 3;
  57:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  58:Src/state.c   **** 
  59:Src/state.c   **** 		/* Send req to inverter R presence */
  60:Src/state.c   **** 		can3.tx_id = ID_ASK_INV_DX;
  61:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
  62:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
  63:Src/state.c   **** 		can3.dataTx[2] = 0x00;
  64:Src/state.c   **** 		can3.tx_size = 3;
  65:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
  66:Src/state.c   **** 
  67:Src/state.c   **** 		init_step_start_time = count_ms_abs; // save the curret time
  68:Src/state.c   **** 
  69:Src/state.c   **** 	}else if(init_step == 1){
  98              		.loc 1 69 0
  99 000a 012B     		cmp	r3, #1
 100 000c 50D0     		beq	.L20
  70:Src/state.c   **** 		if (fifoRxDataCAN_pop(&can1)){
  71:Src/state.c   **** 			switch (can1.rx_id)
  72:Src/state.c   **** 			{
ARM GAS  /tmp/ccYCCuNH.s 			page 4


  73:Src/state.c   **** 			case ID_ASK_INV_DX:
  74:Src/state.c   **** 				if(can1.dataRx[0] == 0xE2 && can1.dataRx[1] == 0x01 && can1.dataRx[2] == 0x00){
  75:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 0, 1); //set bit 0 to 1
  76:Src/state.c   **** 				}
  77:Src/state.c   **** 				break;
  78:Src/state.c   **** 			case ID_ASK_INV_SX:
  79:Src/state.c   **** 				if(can1.dataRx[0] == 0xE2 && can1.dataRx[1] == 0x01 && can1.dataRx[2] == 0x00){
  80:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 1, 1); //set bit 1 to 1
  81:Src/state.c   **** 				}
  82:Src/state.c   **** 			default:
  83:Src/state.c   **** 				break;
  84:Src/state.c   **** 			}
  85:Src/state.c   **** 		}
  86:Src/state.c   **** 		if(inv_init_response == 3){ // means that each inv has responded
  87:Src/state.c   **** 			init_step = 2;
  88:Src/state.c   **** 		}else{
  89:Src/state.c   **** 			if(count_ms_abs - init_step_start_time > 1000 ){ //if is passed more than 1 second -> go ahead
  90:Src/state.c   **** 				/* Send Error to steer */ 
  91:Src/state.c   **** 				init_step = 3;
  92:Src/state.c   **** 			}
  93:Src/state.c   **** 		}
  94:Src/state.c   **** 	}else if(init_step == 2){
 101              		.loc 1 94 0
 102 000e 022B     		cmp	r3, #2
 103 0010 00F08C80 		beq	.L21
  95:Src/state.c   **** 		/* Send periodical status inv L */
  96:Src/state.c   **** 		can1.tx_id = ID_ASK_INV_SX;
  97:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
  98:Src/state.c   **** 		can1.dataTx[1] = 0x40;
  99:Src/state.c   **** 		can1.dataTx[2] = 0xFA;
 100:Src/state.c   **** 		can1.tx_size = 3;
 101:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 102:Src/state.c   **** 
 103:Src/state.c   **** 		/* Send periodical status inv R */
 104:Src/state.c   **** 		can1.tx_id = ID_ASK_INV_DX;
 105:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 106:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 107:Src/state.c   **** 		can1.dataTx[2] = 0xFA;
 108:Src/state.c   **** 		can1.tx_size = 3;
 109:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 110:Src/state.c   **** 
 111:Src/state.c   **** 		init_step = 3;
 112:Src/state.c   **** 	}else if(init_step == 3){
 104              		.loc 1 112 0
 105 0014 032B     		cmp	r3, #3
 106 0016 00F0AB80 		beq	.L22
 107              	.L9:
 108 001a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 109              	.L19:
  34:Src/state.c   **** 		/* Send inverter L disable */
 110              		.loc 1 34 0
 111 001e 0122     		movs	r2, #1
 112 0020 554B     		ldr	r3, .L25
 113 0022 1A60     		str	r2, [r3]
  36:Src/state.c   **** 		can3.dataTx[0] = 0x51;
 114              		.loc 1 36 0
 115 0024 554C     		ldr	r4, .L25+4
ARM GAS  /tmp/ccYCCuNH.s 			page 5


 116 0026 40F20128 		movw	r8, #513
 117 002a C4F82C80 		str	r8, [r4, #44]
  37:Src/state.c   **** 		can3.dataTx[1] = 0x04;
 118              		.loc 1 37 0
 119 002e 4FF0510B 		mov	fp, #81
 120 0032 84F80CB0 		strb	fp, [r4, #12]
  38:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 121              		.loc 1 38 0
 122 0036 4FF00409 		mov	r9, #4
 123 003a 84F80D90 		strb	r9, [r4, #13]
  39:Src/state.c   **** 		can3.tx_size = 3;
 124              		.loc 1 39 0
 125 003e 0025     		movs	r5, #0
 126 0040 A573     		strb	r5, [r4, #14]
  40:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 127              		.loc 1 40 0
 128 0042 0327     		movs	r7, #3
 129 0044 2760     		str	r7, [r4]
  41:Src/state.c   **** 
 130              		.loc 1 41 0
 131 0046 4E4E     		ldr	r6, .L25+8
 132 0048 2946     		mov	r1, r5
 133 004a 3046     		mov	r0, r6
 134 004c FFF7FEFF 		bl	CAN_Send
 135              	.LVL4:
  44:Src/state.c   **** 		can3.dataTx[0] = 0x51;
 136              		.loc 1 44 0
 137 0050 40F2022A 		movw	r10, #514
 138 0054 C4F82CA0 		str	r10, [r4, #44]
  45:Src/state.c   **** 		can3.dataTx[1] = 0x04;
 139              		.loc 1 45 0
 140 0058 84F80CB0 		strb	fp, [r4, #12]
  46:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 141              		.loc 1 46 0
 142 005c 84F80D90 		strb	r9, [r4, #13]
  47:Src/state.c   **** 		can3.tx_size = 3;
 143              		.loc 1 47 0
 144 0060 A573     		strb	r5, [r4, #14]
  48:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 145              		.loc 1 48 0
 146 0062 2760     		str	r7, [r4]
  49:Src/state.c   **** 
 147              		.loc 1 49 0
 148 0064 2946     		mov	r1, r5
 149 0066 3046     		mov	r0, r6
 150 0068 FFF7FEFF 		bl	CAN_Send
 151              	.LVL5:
  52:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
 152              		.loc 1 52 0
 153 006c C4F82C80 		str	r8, [r4, #44]
  53:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
 154              		.loc 1 53 0
 155 0070 4FF03D09 		mov	r9, #61
 156 0074 84F80C90 		strb	r9, [r4, #12]
  54:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 157              		.loc 1 54 0
 158 0078 4FF0E208 		mov	r8, #226
ARM GAS  /tmp/ccYCCuNH.s 			page 6


 159 007c 84F80D80 		strb	r8, [r4, #13]
  55:Src/state.c   **** 		can3.tx_size = 3;
 160              		.loc 1 55 0
 161 0080 A573     		strb	r5, [r4, #14]
  56:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 162              		.loc 1 56 0
 163 0082 2760     		str	r7, [r4]
  57:Src/state.c   **** 
 164              		.loc 1 57 0
 165 0084 2946     		mov	r1, r5
 166 0086 3046     		mov	r0, r6
 167 0088 FFF7FEFF 		bl	CAN_Send
 168              	.LVL6:
  60:Src/state.c   **** 		can3.dataTx[0] = 0x3D;
 169              		.loc 1 60 0
 170 008c C4F82CA0 		str	r10, [r4, #44]
  61:Src/state.c   **** 		can3.dataTx[1] = 0xE2;
 171              		.loc 1 61 0
 172 0090 84F80C90 		strb	r9, [r4, #12]
  62:Src/state.c   **** 		can3.dataTx[2] = 0x00;
 173              		.loc 1 62 0
 174 0094 84F80D80 		strb	r8, [r4, #13]
  63:Src/state.c   **** 		can3.tx_size = 3;
 175              		.loc 1 63 0
 176 0098 A573     		strb	r5, [r4, #14]
  64:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 177              		.loc 1 64 0
 178 009a 2760     		str	r7, [r4]
  65:Src/state.c   **** 
 179              		.loc 1 65 0
 180 009c 2946     		mov	r1, r5
 181 009e 3046     		mov	r0, r6
 182 00a0 FFF7FEFF 		bl	CAN_Send
 183              	.LVL7:
  67:Src/state.c   **** 
 184              		.loc 1 67 0
 185 00a4 374B     		ldr	r3, .L25+12
 186 00a6 1A68     		ldr	r2, [r3]
 187 00a8 374B     		ldr	r3, .L25+16
 188 00aa 1A60     		str	r2, [r3]
 189 00ac BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 190              	.L20:
  70:Src/state.c   **** 			switch (can1.rx_id)
 191              		.loc 1 70 0
 192 00b0 3348     		ldr	r0, .L25+8
 193 00b2 FFF7FEFF 		bl	fifoRxDataCAN_pop
 194              	.LVL8:
 195 00b6 80B1     		cbz	r0, .L13
  71:Src/state.c   **** 			{
 196              		.loc 1 71 0
 197 00b8 314B     		ldr	r3, .L25+8
 198 00ba 1B6B     		ldr	r3, [r3, #48]
 199 00bc 40F20122 		movw	r2, #513
 200 00c0 9342     		cmp	r3, r2
 201 00c2 21D0     		beq	.L14
 202 00c4 40F20222 		movw	r2, #514
 203 00c8 9342     		cmp	r3, r2
ARM GAS  /tmp/ccYCCuNH.s 			page 7


 204 00ca 06D1     		bne	.L13
  74:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 0, 1); //set bit 0 to 1
 205              		.loc 1 74 0
 206 00cc 2C4B     		ldr	r3, .L25+8
 207 00ce 5B69     		ldr	r3, [r3, #20]
 208 00d0 23F07F43 		bic	r3, r3, #-16777216
 209 00d4 B3F5F17F 		cmp	r3, #482
 210 00d8 10D0     		beq	.L23
 211              	.L13:
  86:Src/state.c   **** 			init_step = 2;
 212              		.loc 1 86 0
 213 00da 2C4B     		ldr	r3, .L25+20
 214 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 215 00de 032B     		cmp	r3, #3
 216 00e0 1FD0     		beq	.L24
  89:Src/state.c   **** 				/* Send Error to steer */ 
 217              		.loc 1 89 0
 218 00e2 284B     		ldr	r3, .L25+12
 219 00e4 1B68     		ldr	r3, [r3]
 220 00e6 284A     		ldr	r2, .L25+16
 221 00e8 1268     		ldr	r2, [r2]
 222 00ea 9B1A     		subs	r3, r3, r2
 223 00ec B3F57A7F 		cmp	r3, #1000
 224 00f0 93D9     		bls	.L9
  91:Src/state.c   **** 			}
 225              		.loc 1 91 0
 226 00f2 0322     		movs	r2, #3
 227 00f4 204B     		ldr	r3, .L25
 228 00f6 1A60     		str	r2, [r3]
 229 00f8 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 230              	.L23:
  75:Src/state.c   **** 				}
 231              		.loc 1 75 0
 232 00fc 0122     		movs	r2, #1
 233 00fe 0021     		movs	r1, #0
 234 0100 2248     		ldr	r0, .L25+20
 235 0102 FFF7FEFF 		bl	set_bit_uint8
 236              	.LVL9:
 237 0106 E8E7     		b	.L13
 238              	.L14:
  79:Src/state.c   **** 					set_bit_uint8(&inv_init_response, 1, 1); //set bit 1 to 1
 239              		.loc 1 79 0
 240 0108 1D4B     		ldr	r3, .L25+8
 241 010a 5B69     		ldr	r3, [r3, #20]
 242 010c 23F07F43 		bic	r3, r3, #-16777216
 243 0110 B3F5F17F 		cmp	r3, #482
 244 0114 E1D1     		bne	.L13
  80:Src/state.c   **** 				}
 245              		.loc 1 80 0
 246 0116 0122     		movs	r2, #1
 247 0118 1146     		mov	r1, r2
 248 011a 1C48     		ldr	r0, .L25+20
 249 011c FFF7FEFF 		bl	set_bit_uint8
 250              	.LVL10:
 251 0120 DBE7     		b	.L13
 252              	.L24:
  87:Src/state.c   **** 		}else{
ARM GAS  /tmp/ccYCCuNH.s 			page 8


 253              		.loc 1 87 0
 254 0122 0222     		movs	r2, #2
 255 0124 144B     		ldr	r3, .L25
 256 0126 1A60     		str	r2, [r3]
 257 0128 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 258              	.L21:
  96:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 259              		.loc 1 96 0
 260 012c 144C     		ldr	r4, .L25+8
 261 012e 40F20123 		movw	r3, #513
 262 0132 E362     		str	r3, [r4, #44]
  97:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 263              		.loc 1 97 0
 264 0134 4FF03D08 		mov	r8, #61
 265 0138 84F80C80 		strb	r8, [r4, #12]
  98:Src/state.c   **** 		can1.dataTx[2] = 0xFA;
 266              		.loc 1 98 0
 267 013c 4027     		movs	r7, #64
 268 013e 6773     		strb	r7, [r4, #13]
  99:Src/state.c   **** 		can1.tx_size = 3;
 269              		.loc 1 99 0
 270 0140 FA26     		movs	r6, #250
 271 0142 A673     		strb	r6, [r4, #14]
 100:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 272              		.loc 1 100 0
 273 0144 0325     		movs	r5, #3
 274 0146 2560     		str	r5, [r4]
 101:Src/state.c   **** 
 275              		.loc 1 101 0
 276 0148 0021     		movs	r1, #0
 277 014a 2046     		mov	r0, r4
 278 014c FFF7FEFF 		bl	CAN_Send
 279              	.LVL11:
 104:Src/state.c   **** 		can1.dataTx[0] = 0x3D;
 280              		.loc 1 104 0
 281 0150 40F20223 		movw	r3, #514
 282 0154 E362     		str	r3, [r4, #44]
 105:Src/state.c   **** 		can1.dataTx[1] = 0x40;
 283              		.loc 1 105 0
 284 0156 84F80C80 		strb	r8, [r4, #12]
 106:Src/state.c   **** 		can1.dataTx[2] = 0xFA;
 285              		.loc 1 106 0
 286 015a 6773     		strb	r7, [r4, #13]
 107:Src/state.c   **** 		can1.tx_size = 3;
 287              		.loc 1 107 0
 288 015c A673     		strb	r6, [r4, #14]
 108:Src/state.c   **** 		CAN_Send(&can1, normalPriority);
 289              		.loc 1 108 0
 290 015e 2560     		str	r5, [r4]
 109:Src/state.c   **** 
 291              		.loc 1 109 0
 292 0160 0021     		movs	r1, #0
 293 0162 2046     		mov	r0, r4
 294 0164 FFF7FEFF 		bl	CAN_Send
 295              	.LVL12:
 111:Src/state.c   **** 	}else if(init_step == 3){
 296              		.loc 1 111 0
ARM GAS  /tmp/ccYCCuNH.s 			page 9


 297 0168 034B     		ldr	r3, .L25
 298 016a 1D60     		str	r5, [r3]
 299 016c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 300              	.L22:
 113:Src/state.c   **** 		current_state = STATE_IDLE; // Change state to STATE_IDLE
 301              		.loc 1 113 0
 302 0170 0122     		movs	r2, #1
 303 0172 074B     		ldr	r3, .L25+24
 304 0174 1A70     		strb	r2, [r3]
 114:Src/state.c   **** 		/* Send msg to steer of changing state */
 115:Src/state.c   **** 	}
 116:Src/state.c   **** }
 305              		.loc 1 116 0
 306 0176 50E7     		b	.L9
 307              	.L26:
 308              		.align	2
 309              	.L25:
 310 0178 00000000 		.word	.LANCHOR0
 311 017c 00000000 		.word	can3
 312 0180 00000000 		.word	can1
 313 0184 00000000 		.word	count_ms_abs
 314 0188 00000000 		.word	.LANCHOR1
 315 018c 00000000 		.word	.LANCHOR2
 316 0190 00000000 		.word	current_state
 317              		.cfi_endproc
 318              	.LFE143:
 320              		.section	.text.debug_operations,"ax",%progbits
 321              		.align	1
 322              		.global	debug_operations
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu fpv5-d16
 328              	debug_operations:
 329              	.LFB147:
 117:Src/state.c   **** /*******************************************************************
 118:Src/state.c   ****  *                         END INIT STATE
 119:Src/state.c   ****  *******************************************************************/
 120:Src/state.c   **** /*******************************************************************
 121:Src/state.c   ****  *                        START IDLE STATE
 122:Src/state.c   ****  *******************************************************************/
 123:Src/state.c   **** void idle()
 124:Src/state.c   **** {
 125:Src/state.c   **** 	if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin) == GPIO_PIN_SET){
 126:Src/state.c   **** 		sprintf(txt,"%d\r\n%d\r\n%d\r\n%d\r\n",accel.pot1_val,accel.pot2_val,brake.pot1_val,brake.pot2_va
 127:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)txt,strlen(txt),10);
 128:Src/state.c   **** 		res_open = f_open(&pot_values_f, (TCHAR const*)&filename_pot, FA_OPEN_ALWAYS | FA_WRITE );
 129:Src/state.c   **** 		f_write(&pot_values_f,(TCHAR const*)&txt,strlen(txt), &byteswritten);
 130:Src/state.c   **** 		f_close(&pot_values_f);
 131:Src/state.c   **** 		HAL_Delay(1000);
 132:Src/state.c   **** 	}
 133:Src/state.c   **** 	if (debug_msg_arrived == 1)
 134:Src/state.c   **** 	{
 135:Src/state.c   **** 		debug_msg_arrived = 0; // reset flag
 136:Src/state.c   **** 		debug_operations();
 137:Src/state.c   **** 	}
 138:Src/state.c   **** 	if (fifoRxDataCAN_pop(&can1)) // Check if there are messages on CAN1 fifo
ARM GAS  /tmp/ccYCCuNH.s 			page 10


 139:Src/state.c   **** 	{
 140:Src/state.c   **** 		switch (can1.rx_id)
 141:Src/state.c   **** 		{
 142:Src/state.c   **** 		case ID_ASK_STATE:
 143:Src/state.c   **** 			can1.dataTx[0] = (uint8_t)current_state;
 144:Src/state.c   **** 			can1.tx_size = 1;
 145:Src/state.c   **** 			can1.tx_id = ID_ACU_1;
 146:Src/state.c   **** 			CAN_Send(&can1, normalPriority);
 147:Src/state.c   **** 			break;
 148:Src/state.c   **** 		case ID_ASK_INV_DX:
 149:Src/state.c   **** 			break;
 150:Src/state.c   **** 		case ID_ASK_INV_SX:
 151:Src/state.c   **** 			break;
 152:Src/state.c   **** 		case ID_BMS_HV:
 153:Src/state.c   **** 			if (can1.dataRx[0] == 0x03)
 154:Src/state.c   **** 			{
 155:Src/state.c   **** 				// Turn ON tractive system
 156:Src/state.c   **** 			}
 157:Src/state.c   **** 			else if (can1.dataRx[0] == 0x04)
 158:Src/state.c   **** 			{
 159:Src/state.c   **** 				// Turn OFF tractive system
 160:Src/state.c   **** 			}
 161:Src/state.c   **** 			break;
 162:Src/state.c   **** 		case ID_BMS_LV:
 163:Src/state.c   **** 			break;
 164:Src/state.c   **** 		case ID_STEERING_WEEL_1:
 165:Src/state.c   **** 			switch (can1.dataRx[0])
 166:Src/state.c   **** 			{
 167:Src/state.c   **** 			case REQUEST_TS_ON:
 168:Src/state.c   **** 				//If req Tractive System ON msg arrives -> go to setup state
 169:Src/state.c   **** 				current_state = STATE_SETUP;
 170:Src/state.c   **** 			default:
 171:Src/state.c   **** 				break;
 172:Src/state.c   **** 			}
 173:Src/state.c   **** 			break;
 174:Src/state.c   **** 		case ID_ATC_POT:
 175:Src/state.c   **** 			atc_pot_operations();
 176:Src/state.c   **** 			break;
 177:Src/state.c   **** 		default:
 178:Src/state.c   **** 			break;
 179:Src/state.c   **** 		}
 180:Src/state.c   **** 	}
 181:Src/state.c   **** }
 182:Src/state.c   **** /*******************************************************************
 183:Src/state.c   ****  *                         END IDLE STATE
 184:Src/state.c   ****  *******************************************************************/
 185:Src/state.c   **** /*******************************************************************
 186:Src/state.c   ****  *                        START SETUP STATE
 187:Src/state.c   ****  *******************************************************************/
 188:Src/state.c   **** void setup()
 189:Src/state.c   **** {
 190:Src/state.c   **** 	if(setup_init == 0){
 191:Src/state.c   **** 		setup_init = 1; //set that setup procedure is started
 192:Src/state.c   **** 		if((atc_connected == 1) && (brake.pot_avr_100 > 50) && (critical_errors = 0)){
 193:Src/state.c   **** 			//If Analog to CAN device is connected, brake is pressed and there aren't critical erros -> send
 194:Src/state.c   **** 			can1.dataTx[0] = 1;
 195:Src/state.c   **** 			can1.tx_size = 1;
ARM GAS  /tmp/ccYCCuNH.s 			page 11


 196:Src/state.c   **** 			can1.tx_id = ID_ACU_1;
 197:Src/state.c   **** 			CAN_Send(&can1, normalPriority);
 198:Src/state.c   **** 		}else{
 199:Src/state.c   **** 			//Can't turn on TS caused by some errors
 200:Src/state.c   **** 			current_state = STATE_IDLE; //return to idle state
 201:Src/state.c   **** 			can1.dataTx[0] = 1;
 202:Src/state.c   **** 			can1.tx_size = 1;
 203:Src/state.c   **** 			can1.tx_id = ID_ACU_2;
 204:Src/state.c   **** 			CAN_Send(&can1, highPriority);
 205:Src/state.c   **** 		}
 206:Src/state.c   **** 	}
 207:Src/state.c   **** 	if (fifoRxDataCAN_pop(&can1))
 208:Src/state.c   **** 	{
 209:Src/state.c   **** 		switch (can1.rx_id)
 210:Src/state.c   **** 		{
 211:Src/state.c   **** 		case ID_STEERING_WEEL_1:
 212:Src/state.c   **** 			switch (can1.dataRx[0])
 213:Src/state.c   **** 			{
 214:Src/state.c   **** 			//----- change state to run -----//
 215:Src/state.c   **** 			case 5:
 216:Src/state.c   **** 				// If inverter are ON and Brake is Pressed
 217:Src/state.c   **** 				current_state = STATE_RUN;
 218:Src/state.c   **** 				can1.tx_id = ID_ACU_2;
 219:Src/state.c   **** 				can1.dataRx[0] = 5;
 220:Src/state.c   **** 				can1.tx_size = 1;
 221:Src/state.c   **** 				CAN_Send(&can1, normalPriority);
 222:Src/state.c   **** 				break;
 223:Src/state.c   **** 			// Turn On inverter Dx
 224:Src/state.c   **** 			case 8:
 225:Src/state.c   **** 				// If Inverter Temp < 80
 226:Src/state.c   **** 				break;
 227:Src/state.c   **** 			// Turn On inverter Sx
 228:Src/state.c   **** 			case 9:
 229:Src/state.c   **** 				// if Iverter Temp < 80
 230:Src/state.c   **** 				break;
 231:Src/state.c   **** 			default:
 232:Src/state.c   **** 				break;
 233:Src/state.c   **** 			}
 234:Src/state.c   **** 			break;
 235:Src/state.c   **** 		case ID_BMS_HV:
 236:Src/state.c   **** 			switch (can1.dataRx[0])
 237:Src/state.c   **** 			{
 238:Src/state.c   **** 			case 4:
 239:Src/state.c   **** 				// Shutdown Confirmed
 240:Src/state.c   **** 				break;
 241:Src/state.c   **** 			case 8:
 242:Src/state.c   **** 				// Shutdown from Error
 243:Src/state.c   **** 				break;
 244:Src/state.c   **** 			}
 245:Src/state.c   **** 			break;
 246:Src/state.c   **** 		case ID_ATC_POT:
 247:Src/state.c   **** 			atc_pot_operations();
 248:Src/state.c   **** 			break;
 249:Src/state.c   **** 		case ID_REQ_INV_DX:
 250:Src/state.c   **** 			switch (can1.dataRx[0])
 251:Src/state.c   **** 			{
 252:Src/state.c   **** 			case 0x4A:
ARM GAS  /tmp/ccYCCuNH.s 			page 12


 253:Src/state.c   **** 				// Update Inverter Dx Temp = (can1.RxData[2] * 256 + can1.RxData[1] - 15797) / 112.1182
 254:Src/state.c   **** 				break;
 255:Src/state.c   **** 			case 0xD8:
 256:Src/state.c   **** 				if (can1.dataRx[2] == 0x0C /* && request of shutdown == false*/)
 257:Src/state.c   **** 				{
 258:Src/state.c   **** 					can1.dataTx[0] = 0x09;
 259:Src/state.c   **** 					can1.dataTx[1] = 0;
 260:Src/state.c   **** 					can1.dataTx[2] = 0;
 261:Src/state.c   **** 					can1.dataTx[3] = 0;
 262:Src/state.c   **** 					can1.dataTx[4] = 0;
 263:Src/state.c   **** 					can1.dataTx[5] = 0;
 264:Src/state.c   **** 					can1.dataTx[6] = 0;
 265:Src/state.c   **** 					can1.dataTx[7] = 0;
 266:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 267:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 268:Src/state.c   **** 					// Inverter Dx true
 269:Src/state.c   **** 				}
 270:Src/state.c   **** 				else
 271:Src/state.c   **** 				{
 272:Src/state.c   **** 					can1.dataTx[0] = 0xD0;
 273:Src/state.c   **** 					can1.dataTx[1] = 0;
 274:Src/state.c   **** 					can1.dataTx[2] = 0;
 275:Src/state.c   **** 					can1.dataTx[3] = 0;
 276:Src/state.c   **** 					can1.dataTx[4] = 0;
 277:Src/state.c   **** 					can1.dataTx[5] = 0;
 278:Src/state.c   **** 					can1.dataTx[6] = 0;
 279:Src/state.c   **** 					can1.dataTx[7] = 0;
 280:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 281:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 282:Src/state.c   **** 					// Inverter Dx false
 283:Src/state.c   **** 				}
 284:Src/state.c   **** 				break;
 285:Src/state.c   **** 			}
 286:Src/state.c   **** 			break;
 287:Src/state.c   **** 		case ID_REQ_INV_SX:
 288:Src/state.c   **** 			switch (can1.dataRx[0])
 289:Src/state.c   **** 			{
 290:Src/state.c   **** 			case 0x4A:
 291:Src/state.c   **** 				// Update Inverter Sx Temp = (can1.RxData[2] * 256 + can1.RxData[1] - 15797) / 112.1182
 292:Src/state.c   **** 				break;
 293:Src/state.c   **** 			case 0xD8:
 294:Src/state.c   **** 				if (can1.dataRx[2] == 0x0C /* && request of shutdown == false*/)
 295:Src/state.c   **** 				{
 296:Src/state.c   **** 					can1.dataTx[0] = 0x08;
 297:Src/state.c   **** 					can1.dataTx[1] = 0;
 298:Src/state.c   **** 					can1.dataTx[2] = 0;
 299:Src/state.c   **** 					can1.dataTx[3] = 0;
 300:Src/state.c   **** 					can1.dataTx[4] = 0;
 301:Src/state.c   **** 					can1.dataTx[5] = 0;
 302:Src/state.c   **** 					can1.dataTx[6] = 0;
 303:Src/state.c   **** 					can1.dataTx[7] = 0;
 304:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 305:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 306:Src/state.c   **** 					// Inverter Sx true
 307:Src/state.c   **** 				}
 308:Src/state.c   **** 				else
 309:Src/state.c   **** 				{
ARM GAS  /tmp/ccYCCuNH.s 			page 13


 310:Src/state.c   **** 					can1.dataTx[0] = 0x0C;
 311:Src/state.c   **** 					can1.dataTx[1] = 0;
 312:Src/state.c   **** 					can1.dataTx[2] = 0;
 313:Src/state.c   **** 					can1.dataTx[3] = 0;
 314:Src/state.c   **** 					can1.dataTx[4] = 0;
 315:Src/state.c   **** 					can1.dataTx[5] = 0;
 316:Src/state.c   **** 					can1.dataTx[6] = 0;
 317:Src/state.c   **** 					can1.dataTx[7] = 0;
 318:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 319:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 320:Src/state.c   **** 					// Inverter Sx false
 321:Src/state.c   **** 				}
 322:Src/state.c   **** 				break;
 323:Src/state.c   **** 			}
 324:Src/state.c   **** 			break;
 325:Src/state.c   **** 		default:
 326:Src/state.c   **** 			break;
 327:Src/state.c   **** 		}
 328:Src/state.c   **** 	}
 329:Src/state.c   **** }
 330:Src/state.c   **** /*******************************************************************
 331:Src/state.c   ****  *                         END SETUP STATE
 332:Src/state.c   ****  *******************************************************************/
 333:Src/state.c   **** /*******************************************************************
 334:Src/state.c   ****  *                         START RUN STATE
 335:Src/state.c   ****  *******************************************************************/
 336:Src/state.c   **** void run()
 337:Src/state.c   **** {
 338:Src/state.c   **** 	if (fifoRxDataCAN_pop(&can1))
 339:Src/state.c   **** 	{
 340:Src/state.c   **** 		switch (can1.rx_id)
 341:Src/state.c   **** 		{
 342:Src/state.c   **** 		case ID_STEERING_WEEL_1:
 343:Src/state.c   **** 			if (can1.dataRx[0] ==
 344:Src/state.c   **** 				6)
 345:Src/state.c   **** 			{ //----- change state to setup -----//
 346:Src/state.c   **** 				current_state = STATE_SETUP;
 347:Src/state.c   **** 			}
 348:Src/state.c   **** 			break;
 349:Src/state.c   **** 		case ID_ATC_POT:
 350:Src/state.c   **** 			atc_pot_operations();
 351:Src/state.c   **** 			break;
 352:Src/state.c   **** 		default:
 353:Src/state.c   **** 			break;
 354:Src/state.c   **** 		}
 355:Src/state.c   **** 	}
 356:Src/state.c   **** }
 357:Src/state.c   **** /*******************************************************************
 358:Src/state.c   ****  *                         END RUN STATE
 359:Src/state.c   ****  *******************************************************************/
 360:Src/state.c   **** 
 361:Src/state.c   **** void debug_operations()
 362:Src/state.c   **** {
 330              		.loc 1 362 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccYCCuNH.s 			page 14


 334 0000 30B5     		push	{r4, r5, lr}
 335              	.LCFI3:
 336              		.cfi_def_cfa_offset 12
 337              		.cfi_offset 4, -12
 338              		.cfi_offset 5, -8
 339              		.cfi_offset 14, -4
 340 0002 83B0     		sub	sp, sp, #12
 341              	.LCFI4:
 342              		.cfi_def_cfa_offset 24
 363:Src/state.c   **** 	if (strcmp(debug_rx, "help") == 0)
 343              		.loc 1 363 0
 344 0004 9149     		ldr	r1, .L55
 345 0006 9248     		ldr	r0, .L55+4
 346 0008 FFF7FEFF 		bl	strcmp
 347              	.LVL13:
 348 000c 20B3     		cbz	r0, .L43
 364:Src/state.c   **** 	{
 365:Src/state.c   **** 		sprintf(debug_tx,
 366:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
 367:Src/state.c   **** 				"Avaiable msg are:\r\n"
 368:Src/state.c   **** 				"\t-- status -> print ECU status\r\n"
 369:Src/state.c   **** 				"\t-- sd status -> print SD status and the name of file inside\r\n"
 370:Src/state.c   **** 				"\t-- sd file -> print files inside the SD\r\n"
 371:Src/state.c   **** 				"\t-- time -> print activity time\r\n"
 372:Src/state.c   **** 				"\t-- codev  -> print code version\r\n");
 373:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 374:Src/state.c   **** 	}
 375:Src/state.c   **** 	else if (strcmp(debug_rx, "codev") == 0)
 349              		.loc 1 375 0
 350 000e 9149     		ldr	r1, .L55+8
 351 0010 8F48     		ldr	r0, .L55+4
 352 0012 FFF7FEFF 		bl	strcmp
 353              	.LVL14:
 354 0016 0028     		cmp	r0, #0
 355 0018 30D0     		beq	.L44
 376:Src/state.c   **** 	{
 377:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)code_version, strlen(code_version),
 378:Src/state.c   **** 						  100);
 379:Src/state.c   **** 	}
 380:Src/state.c   **** 	else if (strcmp(debug_rx, "time") == 0)
 356              		.loc 1 380 0
 357 001a 8F49     		ldr	r1, .L55+12
 358 001c 8C48     		ldr	r0, .L55+4
 359 001e FFF7FEFF 		bl	strcmp
 360              	.LVL15:
 361 0022 0028     		cmp	r0, #0
 362 0024 35D0     		beq	.L45
 381:Src/state.c   **** 	{
 382:Src/state.c   **** 		sprintf(debug_tx, "\r\nTime: %d hours : %d min : %d sec : %d dec\r\n",
 383:Src/state.c   **** 				count_hour, count_min, count_sec, count_dec);
 384:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 385:Src/state.c   **** 	}
 386:Src/state.c   **** 	else if (strcmp(debug_rx, "status") == 0)
 363              		.loc 1 386 0
 364 0026 8D49     		ldr	r1, .L55+16
 365 0028 8948     		ldr	r0, .L55+4
 366 002a FFF7FEFF 		bl	strcmp
ARM GAS  /tmp/ccYCCuNH.s 			page 15


 367              	.LVL16:
 368 002e 0028     		cmp	r0, #0
 369 0030 4CD0     		beq	.L46
 387:Src/state.c   **** 	{
 388:Src/state.c   **** 		sprintf(debug_tx,
 389:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 390:Src/state.c   **** 				"\t 0 = OK\r\n"
 391:Src/state.c   **** 				"\t 1 = ERROR\r\n"
 392:Src/state.c   **** 				"\t 2 = BUSY\r\n"
 393:Src/state.c   **** 				"\t 3 = TIMEOUT\r\n\n"
 394:Src/state.c   **** 				"CAN1 status:\r\n"
 395:Src/state.c   **** 				"\tCAN1 config status: %d \r\n"
 396:Src/state.c   **** 				"\tCAN1 notification status: %d\r\n"
 397:Src/state.c   **** 				"\tCAN1 start status: %d\r\n",
 398:Src/state.c   **** 				can1.configFilter_status, can1.activateNotif_status,
 399:Src/state.c   **** 				can1.canStart_status);
 400:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 401:Src/state.c   **** 		sprintf(debug_tx,
 402:Src/state.c   **** 				"CAN3 status:\r\n"
 403:Src/state.c   **** 				"\tCAN3 config status: %d \r\n"
 404:Src/state.c   **** 				"\tCAN3 notification status: %d\r\n"
 405:Src/state.c   **** 				"\tCAN3 start status: %d\r\n",
 406:Src/state.c   **** 				can3.configFilter_status, can3.activateNotif_status,
 407:Src/state.c   **** 				can3.canStart_status);
 408:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 409:Src/state.c   **** 		if (current_state == STATE_INIT)
 410:Src/state.c   **** 		{
 411:Src/state.c   **** 			HAL_UART_Transmit(&huart3,
 412:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_INIT\r\n",
 413:Src/state.c   **** 							  strlen("\r\nCurrent state: STATE_INIT\r\n"), 100);
 414:Src/state.c   **** 		}
 415:Src/state.c   **** 		else if (current_state == STATE_IDLE)
 416:Src/state.c   **** 		{
 417:Src/state.c   **** 			HAL_UART_Transmit(&huart3,
 418:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_IDLE\r\n",
 419:Src/state.c   **** 							  strlen("\r\nCurrent state: STATE_IDLE\r\n"), 100);
 420:Src/state.c   **** 		}
 421:Src/state.c   **** 		else if (current_state == STATE_SETUP)
 422:Src/state.c   **** 		{
 423:Src/state.c   **** 			HAL_UART_Transmit(
 424:Src/state.c   **** 				&huart3, (uint8_t *)"\r\nCurrent state: STATE_SETUP\r\n",
 425:Src/state.c   **** 				strlen("\r\nCurrent state: STATE_SETUP\r\n"), 100);
 426:Src/state.c   **** 		}
 427:Src/state.c   **** 		else if (current_state == STATE_RUN)
 428:Src/state.c   **** 		{
 429:Src/state.c   **** 			HAL_UART_Transmit(&huart3,
 430:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_RUN\r\n",
 431:Src/state.c   **** 							  strlen("\r\nCurrent state: STATE_RUN\r\n"), 100);
 432:Src/state.c   **** 		}
 433:Src/state.c   **** 		sprintf(debug_tx,
 434:Src/state.c   **** 				"\r\n"
 435:Src/state.c   **** 				"Device connected : (0 = no, 1 = yes (for each bit))\r\n"
 436:Src/state.c   **** 				"\t IMU -> %d\r\n"
 437:Src/state.c   **** 				"\t ITS -> %d\r\n",
 438:Src/state.c   **** 				imu_connected, its_connected);
 439:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 440:Src/state.c   **** 	}
ARM GAS  /tmp/ccYCCuNH.s 			page 16


 441:Src/state.c   **** 	else if (strcmp(debug_rx, "sd status") == 0){
 370              		.loc 1 441 0
 371 0032 8B49     		ldr	r1, .L55+20
 372 0034 8648     		ldr	r0, .L55+4
 373 0036 FFF7FEFF 		bl	strcmp
 374              	.LVL17:
 375 003a 0028     		cmp	r0, #0
 376 003c 40F0CB80 		bne	.L37
 442:Src/state.c   **** 		if(mount_ok == 1){
 377              		.loc 1 442 0
 378 0040 884B     		ldr	r3, .L55+24
 379 0042 1B68     		ldr	r3, [r3]
 380 0044 012B     		cmp	r3, #1
 381 0046 00F0A580 		beq	.L47
 443:Src/state.c   **** 			HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nSd mounted ", strlen("\r\nSd mounted "), 100);
 444:Src/state.c   **** 			if(successfull_opening == 1){
 445:Src/state.c   **** 				sprintf(debug_tx,"Sd successfully opened and created file: %s\r\n",filename_log);
 446:Src/state.c   **** 				HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 447:Src/state.c   **** 			}else{
 448:Src/state.c   **** 				HAL_UART_Transmit(&huart3, (uint8_t *)"Sd open FAILED\r\n", strlen("Sd open FAILED\r\n"), 100);
 449:Src/state.c   **** 			}
 450:Src/state.c   **** 		}else{
 451:Src/state.c   **** 			HAL_UART_Transmit(&huart3, (uint8_t *)"\r\nSd NOT mounted ", strlen("\r\nSd NOT mounted "), 100)
 382              		.loc 1 451 0
 383 004a 6423     		movs	r3, #100
 384 004c 1122     		movs	r2, #17
 385 004e 8649     		ldr	r1, .L55+28
 386 0050 8648     		ldr	r0, .L55+32
 387 0052 FFF7FEFF 		bl	HAL_UART_Transmit
 388              	.LVL18:
 389 0056 0FE0     		b	.L27
 390              	.L43:
 365:Src/state.c   **** 				"\r\n***********ECU HELP***********\r\n"
 391              		.loc 1 365 0
 392 0058 854C     		ldr	r4, .L55+36
 393 005a 40F20112 		movw	r2, #257
 394 005e 8549     		ldr	r1, .L55+40
 395 0060 2046     		mov	r0, r4
 396 0062 FFF7FEFF 		bl	memcpy
 397              	.LVL19:
 373:Src/state.c   **** 	}
 398              		.loc 1 373 0
 399 0066 2046     		mov	r0, r4
 400 0068 FFF7FEFF 		bl	strlen
 401              	.LVL20:
 402 006c 6423     		movs	r3, #100
 403 006e 82B2     		uxth	r2, r0
 404 0070 2146     		mov	r1, r4
 405 0072 7E48     		ldr	r0, .L55+32
 406 0074 FFF7FEFF 		bl	HAL_UART_Transmit
 407              	.LVL21:
 408              	.L27:
 452:Src/state.c   **** 		}
 453:Src/state.c   **** 	}
 454:Src/state.c   **** 	else if(strcmp(debug_rx, "sd file") == 0){
 455:Src/state.c   **** 		sprintf(debug_tx,"\r\nFiles inside sd are:\r\n%s",log_names);
 456:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 1000);
ARM GAS  /tmp/ccYCCuNH.s 			page 17


 457:Src/state.c   **** 	}
 458:Src/state.c   **** 	else if (strcmp(debug_rx, "gay") == 0)
 459:Src/state.c   **** 	{
 460:Src/state.c   **** 		sprintf(debug_tx,
 461:Src/state.c   **** 				"\r\n"
 462:Src/state.c   **** 				"          $\r\n"
 463:Src/state.c   **** 				"        $   $\r\n"
 464:Src/state.c   **** 				"       $     $\r\n"
 465:Src/state.c   **** 				"       $$$$$$$\r\n"
 466:Src/state.c   **** 				"       $$$$$$$\r\n"
 467:Src/state.c   **** 				"       $$$$$$$\r\n"
 468:Src/state.c   **** 				"       $$$$$$$\r\n"
 469:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n"
 470:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 471:Src/state.c   **** 				"$$$$$$$$$$$$$$$$$$$$\r\n"
 472:Src/state.c   **** 				" $$$$$$$$   $$$$$$$$\r\n"
 473:Src/state.c   **** 				"  $$$$$$     $$$$$$\r\n");
 474:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 475:Src/state.c   **** 	}
 476:Src/state.c   **** 	else
 477:Src/state.c   **** 	{
 478:Src/state.c   **** 		sprintf(debug_tx, "\r\nERROR : msg %s doesn't exist\r\n", debug_rx);
 479:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 480:Src/state.c   **** 	}
 481:Src/state.c   **** }
 409              		.loc 1 481 0
 410 0078 03B0     		add	sp, sp, #12
 411              	.LCFI5:
 412              		.cfi_remember_state
 413              		.cfi_def_cfa_offset 12
 414              		@ sp needed
 415 007a 30BD     		pop	{r4, r5, pc}
 416              	.L44:
 417              	.LCFI6:
 418              		.cfi_restore_state
 377:Src/state.c   **** 						  100);
 419              		.loc 1 377 0
 420 007c 7E4C     		ldr	r4, .L55+44
 421 007e 2046     		mov	r0, r4
 422 0080 FFF7FEFF 		bl	strlen
 423              	.LVL22:
 424 0084 6423     		movs	r3, #100
 425 0086 82B2     		uxth	r2, r0
 426 0088 2146     		mov	r1, r4
 427 008a 7848     		ldr	r0, .L55+32
 428 008c FFF7FEFF 		bl	HAL_UART_Transmit
 429              	.LVL23:
 430 0090 F2E7     		b	.L27
 431              	.L45:
 382:Src/state.c   **** 				count_hour, count_min, count_sec, count_dec);
 432              		.loc 1 382 0
 433 0092 7A4B     		ldr	r3, .L55+48
 434 0094 1A88     		ldrh	r2, [r3]
 435 0096 7A4B     		ldr	r3, .L55+52
 436 0098 1B88     		ldrh	r3, [r3]
 437 009a 7A49     		ldr	r1, .L55+56
 438 009c 0988     		ldrh	r1, [r1]
ARM GAS  /tmp/ccYCCuNH.s 			page 18


 439 009e 89B2     		uxth	r1, r1
 440 00a0 7948     		ldr	r0, .L55+60
 441 00a2 0088     		ldrh	r0, [r0]
 442 00a4 80B2     		uxth	r0, r0
 443 00a6 724C     		ldr	r4, .L55+36
 444 00a8 0190     		str	r0, [sp, #4]
 445 00aa 0091     		str	r1, [sp]
 446 00ac 9BB2     		uxth	r3, r3
 447 00ae 92B2     		uxth	r2, r2
 448 00b0 7649     		ldr	r1, .L55+64
 449 00b2 2046     		mov	r0, r4
 450 00b4 FFF7FEFF 		bl	sprintf
 451              	.LVL24:
 384:Src/state.c   **** 	}
 452              		.loc 1 384 0
 453 00b8 2046     		mov	r0, r4
 454 00ba FFF7FEFF 		bl	strlen
 455              	.LVL25:
 456 00be 6423     		movs	r3, #100
 457 00c0 82B2     		uxth	r2, r0
 458 00c2 2146     		mov	r1, r4
 459 00c4 6948     		ldr	r0, .L55+32
 460 00c6 FFF7FEFF 		bl	HAL_UART_Transmit
 461              	.LVL26:
 462 00ca D5E7     		b	.L27
 463              	.L46:
 398:Src/state.c   **** 				can1.canStart_status);
 464              		.loc 1 398 0
 465 00cc 7049     		ldr	r1, .L55+68
 466 00ce 91F86C20 		ldrb	r2, [r1, #108]	@ zero_extendqisi2
 467 00d2 91F86D30 		ldrb	r3, [r1, #109]	@ zero_extendqisi2
 399:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 468              		.loc 1 399 0
 469 00d6 91F86E10 		ldrb	r1, [r1, #110]	@ zero_extendqisi2
 388:Src/state.c   **** 				"\r\n\ntype of status:\r\n"
 470              		.loc 1 388 0
 471 00da 654C     		ldr	r4, .L55+36
 472 00dc 0091     		str	r1, [sp]
 473 00de 6D49     		ldr	r1, .L55+72
 474 00e0 2046     		mov	r0, r4
 475 00e2 FFF7FEFF 		bl	sprintf
 476              	.LVL27:
 400:Src/state.c   **** 		sprintf(debug_tx,
 477              		.loc 1 400 0
 478 00e6 2046     		mov	r0, r4
 479 00e8 FFF7FEFF 		bl	strlen
 480              	.LVL28:
 481 00ec 5F4D     		ldr	r5, .L55+32
 482 00ee 6423     		movs	r3, #100
 483 00f0 82B2     		uxth	r2, r0
 484 00f2 2146     		mov	r1, r4
 485 00f4 2846     		mov	r0, r5
 486 00f6 FFF7FEFF 		bl	HAL_UART_Transmit
 487              	.LVL29:
 406:Src/state.c   **** 				can3.canStart_status);
 488              		.loc 1 406 0
 489 00fa 6749     		ldr	r1, .L55+76
ARM GAS  /tmp/ccYCCuNH.s 			page 19


 490 00fc 91F86C20 		ldrb	r2, [r1, #108]	@ zero_extendqisi2
 491 0100 91F86D30 		ldrb	r3, [r1, #109]	@ zero_extendqisi2
 407:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 492              		.loc 1 407 0
 493 0104 91F86E10 		ldrb	r1, [r1, #110]	@ zero_extendqisi2
 401:Src/state.c   **** 				"CAN3 status:\r\n"
 494              		.loc 1 401 0
 495 0108 0091     		str	r1, [sp]
 496 010a 6449     		ldr	r1, .L55+80
 497 010c 2046     		mov	r0, r4
 498 010e FFF7FEFF 		bl	sprintf
 499              	.LVL30:
 408:Src/state.c   **** 		if (current_state == STATE_INIT)
 500              		.loc 1 408 0
 501 0112 2046     		mov	r0, r4
 502 0114 FFF7FEFF 		bl	strlen
 503              	.LVL31:
 504 0118 6423     		movs	r3, #100
 505 011a 82B2     		uxth	r2, r0
 506 011c 2146     		mov	r1, r4
 507 011e 2846     		mov	r0, r5
 508 0120 FFF7FEFF 		bl	HAL_UART_Transmit
 509              	.LVL32:
 409:Src/state.c   **** 		{
 510              		.loc 1 409 0
 511 0124 5E4B     		ldr	r3, .L55+84
 512 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 513 0128 C3B1     		cbz	r3, .L48
 415:Src/state.c   **** 		{
 514              		.loc 1 415 0
 515 012a 012B     		cmp	r3, #1
 516 012c 1DD0     		beq	.L49
 421:Src/state.c   **** 		{
 517              		.loc 1 421 0
 518 012e 022B     		cmp	r3, #2
 519 0130 22D0     		beq	.L50
 427:Src/state.c   **** 		{
 520              		.loc 1 427 0
 521 0132 032B     		cmp	r3, #3
 522 0134 27D0     		beq	.L51
 523              	.L34:
 433:Src/state.c   **** 				"\r\n"
 524              		.loc 1 433 0
 525 0136 4E4C     		ldr	r4, .L55+36
 526 0138 5A4B     		ldr	r3, .L55+88
 527 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 528 013c 5A4A     		ldr	r2, .L55+92
 529 013e 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 530 0140 5A49     		ldr	r1, .L55+96
 531 0142 2046     		mov	r0, r4
 532 0144 FFF7FEFF 		bl	sprintf
 533              	.LVL33:
 439:Src/state.c   **** 	}
 534              		.loc 1 439 0
 535 0148 2046     		mov	r0, r4
 536 014a FFF7FEFF 		bl	strlen
 537              	.LVL34:
ARM GAS  /tmp/ccYCCuNH.s 			page 20


 538 014e 6423     		movs	r3, #100
 539 0150 82B2     		uxth	r2, r0
 540 0152 2146     		mov	r1, r4
 541 0154 4548     		ldr	r0, .L55+32
 542 0156 FFF7FEFF 		bl	HAL_UART_Transmit
 543              	.LVL35:
 544 015a 8DE7     		b	.L27
 545              	.L48:
 411:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_INIT\r\n",
 546              		.loc 1 411 0
 547 015c 6423     		movs	r3, #100
 548 015e 1D22     		movs	r2, #29
 549 0160 5349     		ldr	r1, .L55+100
 550 0162 2846     		mov	r0, r5
 551 0164 FFF7FEFF 		bl	HAL_UART_Transmit
 552              	.LVL36:
 553 0168 E5E7     		b	.L34
 554              	.L49:
 417:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_IDLE\r\n",
 555              		.loc 1 417 0
 556 016a 6423     		movs	r3, #100
 557 016c 1D22     		movs	r2, #29
 558 016e 5149     		ldr	r1, .L55+104
 559 0170 3E48     		ldr	r0, .L55+32
 560 0172 FFF7FEFF 		bl	HAL_UART_Transmit
 561              	.LVL37:
 562 0176 DEE7     		b	.L34
 563              	.L50:
 423:Src/state.c   **** 				&huart3, (uint8_t *)"\r\nCurrent state: STATE_SETUP\r\n",
 564              		.loc 1 423 0
 565 0178 6423     		movs	r3, #100
 566 017a 1E22     		movs	r2, #30
 567 017c 4E49     		ldr	r1, .L55+108
 568 017e 3B48     		ldr	r0, .L55+32
 569 0180 FFF7FEFF 		bl	HAL_UART_Transmit
 570              	.LVL38:
 571 0184 D7E7     		b	.L34
 572              	.L51:
 429:Src/state.c   **** 							  (uint8_t *)"\r\nCurrent state: STATE_RUN\r\n",
 573              		.loc 1 429 0
 574 0186 6423     		movs	r3, #100
 575 0188 1C22     		movs	r2, #28
 576 018a 4C49     		ldr	r1, .L55+112
 577 018c 3748     		ldr	r0, .L55+32
 578 018e FFF7FEFF 		bl	HAL_UART_Transmit
 579              	.LVL39:
 580 0192 D0E7     		b	.L34
 581              	.L47:
 443:Src/state.c   **** 			if(successfull_opening == 1){
 582              		.loc 1 443 0
 583 0194 6423     		movs	r3, #100
 584 0196 0D22     		movs	r2, #13
 585 0198 4949     		ldr	r1, .L55+116
 586 019a 3448     		ldr	r0, .L55+32
 587 019c FFF7FEFF 		bl	HAL_UART_Transmit
 588              	.LVL40:
 444:Src/state.c   **** 				sprintf(debug_tx,"Sd successfully opened and created file: %s\r\n",filename_log);
ARM GAS  /tmp/ccYCCuNH.s 			page 21


 589              		.loc 1 444 0
 590 01a0 484B     		ldr	r3, .L55+120
 591 01a2 1B68     		ldr	r3, [r3]
 592 01a4 012B     		cmp	r3, #1
 593 01a6 06D0     		beq	.L52
 448:Src/state.c   **** 			}
 594              		.loc 1 448 0
 595 01a8 6423     		movs	r3, #100
 596 01aa 1022     		movs	r2, #16
 597 01ac 4649     		ldr	r1, .L55+124
 598 01ae 2F48     		ldr	r0, .L55+32
 599 01b0 FFF7FEFF 		bl	HAL_UART_Transmit
 600              	.LVL41:
 601 01b4 60E7     		b	.L27
 602              	.L52:
 445:Src/state.c   **** 				HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 603              		.loc 1 445 0
 604 01b6 2E4C     		ldr	r4, .L55+36
 605 01b8 444A     		ldr	r2, .L55+128
 606 01ba 4549     		ldr	r1, .L55+132
 607 01bc 2046     		mov	r0, r4
 608 01be FFF7FEFF 		bl	sprintf
 609              	.LVL42:
 446:Src/state.c   **** 			}else{
 610              		.loc 1 446 0
 611 01c2 2046     		mov	r0, r4
 612 01c4 FFF7FEFF 		bl	strlen
 613              	.LVL43:
 614 01c8 6423     		movs	r3, #100
 615 01ca 82B2     		uxth	r2, r0
 616 01cc 2146     		mov	r1, r4
 617 01ce 2748     		ldr	r0, .L55+32
 618 01d0 FFF7FEFF 		bl	HAL_UART_Transmit
 619              	.LVL44:
 620 01d4 50E7     		b	.L27
 621              	.L37:
 454:Src/state.c   **** 		sprintf(debug_tx,"\r\nFiles inside sd are:\r\n%s",log_names);
 622              		.loc 1 454 0
 623 01d6 3F49     		ldr	r1, .L55+136
 624 01d8 1D48     		ldr	r0, .L55+4
 625 01da FFF7FEFF 		bl	strcmp
 626              	.LVL45:
 627 01de A0B1     		cbz	r0, .L53
 458:Src/state.c   **** 	{
 628              		.loc 1 458 0
 629 01e0 3D49     		ldr	r1, .L55+140
 630 01e2 1B48     		ldr	r0, .L55+4
 631 01e4 FFF7FEFF 		bl	strcmp
 632              	.LVL46:
 633 01e8 00B3     		cbz	r0, .L54
 478:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 100);
 634              		.loc 1 478 0
 635 01ea 214C     		ldr	r4, .L55+36
 636 01ec 184A     		ldr	r2, .L55+4
 637 01ee 3B49     		ldr	r1, .L55+144
 638 01f0 2046     		mov	r0, r4
 639 01f2 FFF7FEFF 		bl	sprintf
ARM GAS  /tmp/ccYCCuNH.s 			page 22


 640              	.LVL47:
 479:Src/state.c   **** 	}
 641              		.loc 1 479 0
 642 01f6 2046     		mov	r0, r4
 643 01f8 FFF7FEFF 		bl	strlen
 644              	.LVL48:
 645 01fc 6423     		movs	r3, #100
 646 01fe 82B2     		uxth	r2, r0
 647 0200 2146     		mov	r1, r4
 648 0202 1A48     		ldr	r0, .L55+32
 649 0204 FFF7FEFF 		bl	HAL_UART_Transmit
 650              	.LVL49:
 651              		.loc 1 481 0
 652 0208 36E7     		b	.L27
 653              	.L53:
 455:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)debug_tx, strlen(debug_tx), 1000);
 654              		.loc 1 455 0
 655 020a 194C     		ldr	r4, .L55+36
 656 020c 344A     		ldr	r2, .L55+148
 657 020e 3549     		ldr	r1, .L55+152
 658 0210 2046     		mov	r0, r4
 659 0212 FFF7FEFF 		bl	sprintf
 660              	.LVL50:
 456:Src/state.c   **** 	}
 661              		.loc 1 456 0
 662 0216 2046     		mov	r0, r4
 663 0218 FFF7FEFF 		bl	strlen
 664              	.LVL51:
 665 021c 4FF47A73 		mov	r3, #1000
 666 0220 82B2     		uxth	r2, r0
 667 0222 2146     		mov	r1, r4
 668 0224 1148     		ldr	r0, .L55+32
 669 0226 FFF7FEFF 		bl	HAL_UART_Transmit
 670              	.LVL52:
 671 022a 25E7     		b	.L27
 672              	.L54:
 460:Src/state.c   **** 				"\r\n"
 673              		.loc 1 460 0
 674 022c 104C     		ldr	r4, .L55+36
 675 022e DB22     		movs	r2, #219
 676 0230 2D49     		ldr	r1, .L55+156
 677 0232 2046     		mov	r0, r4
 678 0234 FFF7FEFF 		bl	memcpy
 679              	.LVL53:
 474:Src/state.c   **** 	}
 680              		.loc 1 474 0
 681 0238 2046     		mov	r0, r4
 682 023a FFF7FEFF 		bl	strlen
 683              	.LVL54:
 684 023e 6423     		movs	r3, #100
 685 0240 82B2     		uxth	r2, r0
 686 0242 2146     		mov	r1, r4
 687 0244 0948     		ldr	r0, .L55+32
 688 0246 FFF7FEFF 		bl	HAL_UART_Transmit
 689              	.LVL55:
 690 024a 15E7     		b	.L27
 691              	.L56:
ARM GAS  /tmp/ccYCCuNH.s 			page 23


 692              		.align	2
 693              	.L55:
 694 024c 00000000 		.word	.LC0
 695 0250 00000000 		.word	debug_rx
 696 0254 0C010000 		.word	.LC2
 697 0258 14010000 		.word	.LC3
 698 025c 4C010000 		.word	.LC5
 699 0260 30030000 		.word	.LC13
 700 0264 00000000 		.word	mount_ok
 701 0268 90030000 		.word	.LC17
 702 026c 00000000 		.word	huart3
 703 0270 00000000 		.word	debug_tx
 704 0274 08000000 		.word	.LC1
 705 0278 00000000 		.word	code_version
 706 027c 00000000 		.word	count_hour
 707 0280 00000000 		.word	count_min
 708 0284 00000000 		.word	count_sec
 709 0288 00000000 		.word	count_dec
 710 028c 1C010000 		.word	.LC4
 711 0290 00000000 		.word	can1
 712 0294 54010000 		.word	.LC6
 713 0298 00000000 		.word	can3
 714 029c FC010000 		.word	.LC7
 715 02a0 00000000 		.word	current_state
 716 02a4 00000000 		.word	its_connected
 717 02a8 00000000 		.word	imu_connected
 718 02ac DC020000 		.word	.LC12
 719 02b0 5C020000 		.word	.LC8
 720 02b4 7C020000 		.word	.LC9
 721 02b8 9C020000 		.word	.LC10
 722 02bc BC020000 		.word	.LC11
 723 02c0 3C030000 		.word	.LC14
 724 02c4 00000000 		.word	successfull_opening
 725 02c8 7C030000 		.word	.LC16
 726 02cc 00000000 		.word	filename_log
 727 02d0 4C030000 		.word	.LC15
 728 02d4 A4030000 		.word	.LC18
 729 02d8 C8030000 		.word	.LC20
 730 02dc A8040000 		.word	.LC22
 731 02e0 00000000 		.word	log_names
 732 02e4 AC030000 		.word	.LC19
 733 02e8 CC030000 		.word	.LC21
 734              		.cfi_endproc
 735              	.LFE147:
 737              		.section	.text.imu_operations,"ax",%progbits
 738              		.align	1
 739              		.global	imu_operations
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 743              		.fpu fpv5-d16
 745              	imu_operations:
 746              	.LFB148:
 482:Src/state.c   **** 
 483:Src/state.c   **** void imu_operations()
 484:Src/state.c   **** {
 747              		.loc 1 484 0
ARM GAS  /tmp/ccYCCuNH.s 			page 24


 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751 0000 08B5     		push	{r3, lr}
 752              	.LCFI7:
 753              		.cfi_def_cfa_offset 8
 754              		.cfi_offset 3, -8
 755              		.cfi_offset 14, -4
 485:Src/state.c   **** 	imu_connected = 1; // imu connected true
 756              		.loc 1 485 0
 757 0002 0122     		movs	r2, #1
 758 0004 094B     		ldr	r3, .L61
 759 0006 1A70     		strb	r2, [r3]
 486:Src/state.c   **** 	if (count_imu == 10 || count_imu == 11)
 760              		.loc 1 486 0
 761 0008 094B     		ldr	r3, .L61+4
 762 000a 1B88     		ldrh	r3, [r3]
 763 000c 0A3B     		subs	r3, r3, #10
 764 000e 9BB2     		uxth	r3, r3
 765 0010 9342     		cmp	r3, r2
 766 0012 03D9     		bls	.L60
 767              	.L58:
 487:Src/state.c   **** 	{
 488:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"IMU presente\r\n",
 489:Src/state.c   **** 						  strlen("IMU presente\r\n"), 10);
 490:Src/state.c   **** 	}
 491:Src/state.c   **** 	count_imu = 0;
 768              		.loc 1 491 0
 769 0014 0022     		movs	r2, #0
 770 0016 064B     		ldr	r3, .L61+4
 771 0018 1A80     		strh	r2, [r3]	@ movhi
 772 001a 08BD     		pop	{r3, pc}
 773              	.L60:
 488:Src/state.c   **** 						  strlen("IMU presente\r\n"), 10);
 774              		.loc 1 488 0
 775 001c 0A23     		movs	r3, #10
 776 001e 0E22     		movs	r2, #14
 777 0020 0449     		ldr	r1, .L61+8
 778 0022 0548     		ldr	r0, .L61+12
 779 0024 FFF7FEFF 		bl	HAL_UART_Transmit
 780              	.LVL56:
 781 0028 F4E7     		b	.L58
 782              	.L62:
 783 002a 00BF     		.align	2
 784              	.L61:
 785 002c 00000000 		.word	imu_connected
 786 0030 00000000 		.word	count_imu
 787 0034 00000000 		.word	.LC23
 788 0038 00000000 		.word	huart3
 789              		.cfi_endproc
 790              	.LFE148:
 792              		.section	.text.atc_pot_operations,"ax",%progbits
 793              		.align	1
 794              		.global	atc_pot_operations
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
ARM GAS  /tmp/ccYCCuNH.s 			page 25


 798              		.fpu fpv5-d16
 800              	atc_pot_operations:
 801              	.LFB149:
 492:Src/state.c   **** }
 493:Src/state.c   **** void atc_pot_operations()
 494:Src/state.c   **** {
 802              		.loc 1 494 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806 0000 38B5     		push	{r3, r4, r5, lr}
 807              	.LCFI8:
 808              		.cfi_def_cfa_offset 16
 809              		.cfi_offset 3, -16
 810              		.cfi_offset 4, -12
 811              		.cfi_offset 5, -8
 812              		.cfi_offset 14, -4
 495:Src/state.c   **** 	atc_connected = 1;
 813              		.loc 1 495 0
 814 0002 0122     		movs	r2, #1
 815 0004 3C4B     		ldr	r3, .L71
 816 0006 1A70     		strb	r2, [r3]
 496:Src/state.c   **** 	count_atc = 0;
 817              		.loc 1 496 0
 818 0008 0022     		movs	r2, #0
 819 000a 3C4B     		ldr	r3, .L71+4
 820 000c 1A80     		strh	r2, [r3]	@ movhi
 497:Src/state.c   **** 	accel.pot1_val = can1.dataRx[0] * 256 + can1.dataRx[1];
 821              		.loc 1 497 0
 822 000e 3C49     		ldr	r1, .L71+8
 823 0010 0A7D     		ldrb	r2, [r1, #20]	@ zero_extendqisi2
 824 0012 4B7D     		ldrb	r3, [r1, #21]	@ zero_extendqisi2
 825 0014 03EB0223 		add	r3, r3, r2, lsl #8
 826 0018 9BB2     		uxth	r3, r3
 827 001a 3A48     		ldr	r0, .L71+12
 828 001c 0380     		strh	r3, [r0]	@ movhi
 498:Src/state.c   **** 	accel.pot2_val = can1.dataRx[2] * 256 + can1.dataRx[3];
 829              		.loc 1 498 0
 830 001e 8C7D     		ldrb	r4, [r1, #22]	@ zero_extendqisi2
 831 0020 CA7D     		ldrb	r2, [r1, #23]	@ zero_extendqisi2
 832 0022 02EB0422 		add	r2, r2, r4, lsl #8
 833 0026 92B2     		uxth	r2, r2
 834 0028 8280     		strh	r2, [r0, #4]	@ movhi
 499:Src/state.c   **** 	// brake.pot1_val = can1.dataRx[4] * 256 + can1.dataRx[5];
 500:Src/state.c   **** 	// brake.pot2_val = can1.dataRx[6] * 256 + can1.dataRx[7];
 501:Src/state.c   **** 	/*sprintf(txt, "CAN: %d %d %d %d\r\n ", can1.dataRx[0], can1.dataRx[1],
 502:Src/state.c   **** 			can1.dataRx[2], can1.dataRx[3]);
 503:Src/state.c   **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 504:Src/state.c   **** 	// val100 = (val - pot_min_val)/(pot_max_val - pot_min_val)*100
 505:Src/state.c   **** 
 506:Src/state.c   **** 	if (accel.pot1_range != 0 && accel.pot2_range != 0)
 835              		.loc 1 506 0
 836 002a 8189     		ldrh	r1, [r0, #12]
 837 002c 89B1     		cbz	r1, .L64
 838              		.loc 1 506 0 is_stmt 0 discriminator 1
 839 002e 458A     		ldrh	r5, [r0, #18]
 840 0030 7DB1     		cbz	r5, .L64
ARM GAS  /tmp/ccYCCuNH.s 			page 26


 507:Src/state.c   **** 	{
 508:Src/state.c   **** 		accel.pot1_val_100 =
 509:Src/state.c   **** 			((accel.pot1_val - accel.pot1_min_val) * 100) / (accel.pot1_range);
 841              		.loc 1 509 0 is_stmt 1
 842 0032 0446     		mov	r4, r0
 843 0034 C089     		ldrh	r0, [r0, #14]
 844 0036 1B1A     		subs	r3, r3, r0
 845 0038 6420     		movs	r0, #100
 846 003a 00FB03F3 		mul	r3, r0, r3
 847 003e 93FBF1F3 		sdiv	r3, r3, r1
 508:Src/state.c   **** 			((accel.pot1_val - accel.pot1_min_val) * 100) / (accel.pot1_range);
 848              		.loc 1 508 0
 849 0042 A370     		strb	r3, [r4, #2]
 510:Src/state.c   **** 		accel.pot2_val_100 =
 511:Src/state.c   **** 			((accel.pot2_val - accel.pot2_min_val) * 100) / (accel.pot2_range);
 850              		.loc 1 511 0
 851 0044 238A     		ldrh	r3, [r4, #16]
 852 0046 D21A     		subs	r2, r2, r3
 853 0048 00FB02F2 		mul	r2, r0, r2
 854 004c 92FBF5F2 		sdiv	r2, r2, r5
 510:Src/state.c   **** 		accel.pot2_val_100 =
 855              		.loc 1 510 0
 856 0050 A271     		strb	r2, [r4, #6]
 857              	.L64:
 512:Src/state.c   **** 	}
 513:Src/state.c   **** 	if (brake.pot1_range != 0 && brake.pot2_range != 0)
 858              		.loc 1 513 0
 859 0052 2D4B     		ldr	r3, .L71+16
 860 0054 9989     		ldrh	r1, [r3, #12]
 861 0056 C1B1     		cbz	r1, .L65
 862              		.loc 1 513 0 is_stmt 0 discriminator 1
 863 0058 5C8A     		ldrh	r4, [r3, #18]
 864 005a B4B1     		cbz	r4, .L65
 514:Src/state.c   **** 	{
 515:Src/state.c   **** 		brake.pot1_val_100 =
 516:Src/state.c   **** 			(brake.pot1_val - brake.pot1_min_val) / (brake.pot1_range) * 100;
 865              		.loc 1 516 0 is_stmt 1
 866 005c 1846     		mov	r0, r3
 867 005e 1A88     		ldrh	r2, [r3]
 868 0060 DB89     		ldrh	r3, [r3, #14]
 869 0062 D21A     		subs	r2, r2, r3
 870 0064 92FBF1F2 		sdiv	r2, r2, r1
 515:Src/state.c   **** 			(brake.pot1_val - brake.pot1_min_val) / (brake.pot1_range) * 100;
 871              		.loc 1 515 0
 872 0068 02EB8202 		add	r2, r2, r2, lsl #2
 873 006c 02EB8202 		add	r2, r2, r2, lsl #2
 874 0070 9300     		lsls	r3, r2, #2
 875 0072 8370     		strb	r3, [r0, #2]
 517:Src/state.c   **** 		brake.pot2_val_100 =
 518:Src/state.c   **** 			(brake.pot2_val - brake.pot2_min_val) / (brake.pot2_range) * 100;
 876              		.loc 1 518 0
 877 0074 8388     		ldrh	r3, [r0, #4]
 878 0076 028A     		ldrh	r2, [r0, #16]
 879 0078 9B1A     		subs	r3, r3, r2
 880 007a 93FBF4F3 		sdiv	r3, r3, r4
 517:Src/state.c   **** 		brake.pot2_val_100 =
 881              		.loc 1 517 0
ARM GAS  /tmp/ccYCCuNH.s 			page 27


 882 007e 03EB8303 		add	r3, r3, r3, lsl #2
 883 0082 03EB8303 		add	r3, r3, r3, lsl #2
 884 0086 9A00     		lsls	r2, r3, #2
 885 0088 8271     		strb	r2, [r0, #6]
 886              	.L65:
 519:Src/state.c   **** 	}
 520:Src/state.c   **** 	/*sprintf(txt, "size: %d ", can1.rx_size);
 521:Src/state.c   **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 522:Src/state.c   **** 	/*sprintf(txt, "%d %d\r\n", accel.pot1_val, accel.pot2_val);
 523:Src/state.c   **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 524:Src/state.c   **** 	/*sprintf(txt, "%d %d\r\n", accel.pot1_val_100, accel.pot2_val_100);
 525:Src/state.c   **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 526:Src/state.c   **** 	if (accel_implausibility_check() == 1)
 887              		.loc 1 526 0
 888 008a FFF7FEFF 		bl	accel_implausibility_check
 889              	.LVL57:
 890 008e 0128     		cmp	r0, #1
 891 0090 03D0     		beq	.L69
 527:Src/state.c   **** 	{
 528:Src/state.c   **** 		accel.pot1_val = 0;
 529:Src/state.c   **** 		accel.pot2_val = 0;
 530:Src/state.c   **** 		accel.pot1_val_100 = 0;
 531:Src/state.c   **** 		accel.pot2_val_100 = 0;
 532:Src/state.c   **** 		// send error//
 533:Src/state.c   **** 		can1.tx_id = 0x10;
 534:Src/state.c   **** 		can1.dataTx[0] = 1;
 535:Src/state.c   **** 		can1.tx_size = 1;
 536:Src/state.c   **** 		// CAN_Send(&can1, highPriority);
 537:Src/state.c   **** 		sprintf(txt, "POT FAIL %d\r\n", accel_implausibility_check_count_flag);
 538:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)txt, strlen(txt), 10);
 539:Src/state.c   **** 	}
 540:Src/state.c   **** 	else if (accel_implausibility_check() == 0)
 892              		.loc 1 540 0
 893 0092 FFF7FEFF 		bl	accel_implausibility_check
 894              	.LVL58:
 895 0096 E8B1     		cbz	r0, .L70
 896              	.L63:
 897 0098 38BD     		pop	{r3, r4, r5, pc}
 898              	.L69:
 528:Src/state.c   **** 		accel.pot2_val = 0;
 899              		.loc 1 528 0
 900 009a 1A4B     		ldr	r3, .L71+12
 901 009c 0022     		movs	r2, #0
 902 009e 1A80     		strh	r2, [r3]	@ movhi
 529:Src/state.c   **** 		accel.pot1_val_100 = 0;
 903              		.loc 1 529 0
 904 00a0 9A80     		strh	r2, [r3, #4]	@ movhi
 530:Src/state.c   **** 		accel.pot2_val_100 = 0;
 905              		.loc 1 530 0
 906 00a2 9A70     		strb	r2, [r3, #2]
 531:Src/state.c   **** 		// send error//
 907              		.loc 1 531 0
 908 00a4 9A71     		strb	r2, [r3, #6]
 533:Src/state.c   **** 		can1.dataTx[0] = 1;
 909              		.loc 1 533 0
 910 00a6 164B     		ldr	r3, .L71+8
 911 00a8 1022     		movs	r2, #16
ARM GAS  /tmp/ccYCCuNH.s 			page 28


 912 00aa DA62     		str	r2, [r3, #44]
 534:Src/state.c   **** 		can1.tx_size = 1;
 913              		.loc 1 534 0
 914 00ac 0122     		movs	r2, #1
 915 00ae 1A73     		strb	r2, [r3, #12]
 535:Src/state.c   **** 		// CAN_Send(&can1, highPriority);
 916              		.loc 1 535 0
 917 00b0 1A60     		str	r2, [r3]
 537:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)txt, strlen(txt), 10);
 918              		.loc 1 537 0
 919 00b2 164C     		ldr	r4, .L71+20
 920 00b4 164B     		ldr	r3, .L71+24
 921 00b6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 922 00b8 1649     		ldr	r1, .L71+28
 923 00ba 2046     		mov	r0, r4
 924 00bc FFF7FEFF 		bl	sprintf
 925              	.LVL59:
 538:Src/state.c   **** 	}
 926              		.loc 1 538 0
 927 00c0 2046     		mov	r0, r4
 928 00c2 FFF7FEFF 		bl	strlen
 929              	.LVL60:
 930 00c6 0A23     		movs	r3, #10
 931 00c8 82B2     		uxth	r2, r0
 932 00ca 2146     		mov	r1, r4
 933 00cc 1248     		ldr	r0, .L71+32
 934 00ce FFF7FEFF 		bl	HAL_UART_Transmit
 935              	.LVL61:
 936 00d2 38BD     		pop	{r3, r4, r5, pc}
 937              	.L70:
 541:Src/state.c   **** 	{
 542:Src/state.c   **** 		sprintf(txt, "POT WORK %d %d\r\n", accel.pot1_val_100,
 938              		.loc 1 542 0
 939 00d4 0B4A     		ldr	r2, .L71+12
 940 00d6 0D4C     		ldr	r4, .L71+20
 941 00d8 9379     		ldrb	r3, [r2, #6]	@ zero_extendqisi2
 942 00da 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 943 00dc 0F49     		ldr	r1, .L71+36
 944 00de 2046     		mov	r0, r4
 945 00e0 FFF7FEFF 		bl	sprintf
 946              	.LVL62:
 543:Src/state.c   **** 				accel.pot2_val_100);
 544:Src/state.c   **** 		HAL_UART_Transmit(&huart3, (uint8_t *)txt, strlen(txt), 10);
 947              		.loc 1 544 0
 948 00e4 2046     		mov	r0, r4
 949 00e6 FFF7FEFF 		bl	strlen
 950              	.LVL63:
 951 00ea 0A23     		movs	r3, #10
 952 00ec 82B2     		uxth	r2, r0
 953 00ee 2146     		mov	r1, r4
 954 00f0 0948     		ldr	r0, .L71+32
 955 00f2 FFF7FEFF 		bl	HAL_UART_Transmit
 956              	.LVL64:
 545:Src/state.c   **** 	}
 546:Src/state.c   **** 	/*if(brake_implausibility_check()){
 547:Src/state.c   **** 		brake.pot1_val = 0;
 548:Src/state.c   **** 		brake.pot2_val = 0;
ARM GAS  /tmp/ccYCCuNH.s 			page 29


 549:Src/state.c   **** 	}*/
 550:Src/state.c   **** }
 957              		.loc 1 550 0
 958 00f6 CFE7     		b	.L63
 959              	.L72:
 960              		.align	2
 961              	.L71:
 962 00f8 00000000 		.word	atc_connected
 963 00fc 00000000 		.word	count_atc
 964 0100 00000000 		.word	can1
 965 0104 00000000 		.word	accel
 966 0108 00000000 		.word	brake
 967 010c 00000000 		.word	txt
 968 0110 00000000 		.word	accel_implausibility_check_count_flag
 969 0114 00000000 		.word	.LC24
 970 0118 00000000 		.word	huart3
 971 011c 10000000 		.word	.LC25
 972              		.cfi_endproc
 973              	.LFE149:
 975              		.section	.text.idle,"ax",%progbits
 976              		.align	1
 977              		.global	idle
 978              		.syntax unified
 979              		.thumb
 980              		.thumb_func
 981              		.fpu fpv5-d16
 983              	idle:
 984              	.LFB144:
 124:Src/state.c   **** 	if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port,USER_BUTTON_Pin) == GPIO_PIN_SET){
 985              		.loc 1 124 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989 0000 30B5     		push	{r4, r5, lr}
 990              	.LCFI9:
 991              		.cfi_def_cfa_offset 12
 992              		.cfi_offset 4, -12
 993              		.cfi_offset 5, -8
 994              		.cfi_offset 14, -4
 995 0002 83B0     		sub	sp, sp, #12
 996              	.LCFI10:
 997              		.cfi_def_cfa_offset 24
 125:Src/state.c   **** 		sprintf(txt,"%d\r\n%d\r\n%d\r\n%d\r\n",accel.pot1_val,accel.pot2_val,brake.pot1_val,brake.pot2_va
 998              		.loc 1 125 0
 999 0004 4FF40051 		mov	r1, #8192
 1000 0008 3148     		ldr	r0, .L85
 1001 000a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 1002              	.LVL65:
 1003 000e 0128     		cmp	r0, #1
 1004 0010 11D0     		beq	.L82
 1005              	.L74:
 133:Src/state.c   **** 	{
 1006              		.loc 1 133 0
 1007 0012 304B     		ldr	r3, .L85+4
 1008 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1009 0016 012B     		cmp	r3, #1
 1010 0018 3CD0     		beq	.L83
ARM GAS  /tmp/ccYCCuNH.s 			page 30


 1011              	.L75:
 138:Src/state.c   **** 	{
 1012              		.loc 1 138 0
 1013 001a 2F48     		ldr	r0, .L85+8
 1014 001c FFF7FEFF 		bl	fifoRxDataCAN_pop
 1015              	.LVL66:
 1016 0020 38B1     		cbz	r0, .L73
 140:Src/state.c   **** 		{
 1017              		.loc 1 140 0
 1018 0022 2D4B     		ldr	r3, .L85+8
 1019 0024 1B6B     		ldr	r3, [r3, #48]
 1020 0026 342B     		cmp	r3, #52
 1021 0028 4FD0     		beq	.L77
 1022 002a A02B     		cmp	r3, #160
 1023 002c 45D0     		beq	.L78
 1024 002e 102B     		cmp	r3, #16
 1025 0030 36D0     		beq	.L84
 1026              	.L73:
 181:Src/state.c   **** /*******************************************************************
 1027              		.loc 1 181 0
 1028 0032 03B0     		add	sp, sp, #12
 1029              	.LCFI11:
 1030              		.cfi_remember_state
 1031              		.cfi_def_cfa_offset 12
 1032              		@ sp needed
 1033 0034 30BD     		pop	{r4, r5, pc}
 1034              	.L82:
 1035              	.LCFI12:
 1036              		.cfi_restore_state
 126:Src/state.c   **** 		HAL_UART_Transmit(&huart3,(uint8_t*)txt,strlen(txt),10);
 1037              		.loc 1 126 0
 1038 0036 294B     		ldr	r3, .L85+12
 1039 0038 1A88     		ldrh	r2, [r3]
 1040 003a 9B88     		ldrh	r3, [r3, #4]
 1041 003c 2849     		ldr	r1, .L85+16
 1042 003e 0888     		ldrh	r0, [r1]
 1043 0040 8988     		ldrh	r1, [r1, #4]
 1044 0042 284C     		ldr	r4, .L85+20
 1045 0044 0191     		str	r1, [sp, #4]
 1046 0046 0090     		str	r0, [sp]
 1047 0048 2749     		ldr	r1, .L85+24
 1048 004a 2046     		mov	r0, r4
 1049 004c FFF7FEFF 		bl	sprintf
 1050              	.LVL67:
 127:Src/state.c   **** 		res_open = f_open(&pot_values_f, (TCHAR const*)&filename_pot, FA_OPEN_ALWAYS | FA_WRITE );
 1051              		.loc 1 127 0
 1052 0050 2046     		mov	r0, r4
 1053 0052 FFF7FEFF 		bl	strlen
 1054              	.LVL68:
 1055 0056 0A23     		movs	r3, #10
 1056 0058 82B2     		uxth	r2, r0
 1057 005a 2146     		mov	r1, r4
 1058 005c 2348     		ldr	r0, .L85+28
 1059 005e FFF7FEFF 		bl	HAL_UART_Transmit
 1060              	.LVL69:
 128:Src/state.c   **** 		f_write(&pot_values_f,(TCHAR const*)&txt,strlen(txt), &byteswritten);
 1061              		.loc 1 128 0
ARM GAS  /tmp/ccYCCuNH.s 			page 31


 1062 0062 234D     		ldr	r5, .L85+32
 1063 0064 1222     		movs	r2, #18
 1064 0066 2349     		ldr	r1, .L85+36
 1065 0068 2846     		mov	r0, r5
 1066 006a FFF7FEFF 		bl	f_open
 1067              	.LVL70:
 1068 006e 224B     		ldr	r3, .L85+40
 1069 0070 1870     		strb	r0, [r3]
 129:Src/state.c   **** 		f_close(&pot_values_f);
 1070              		.loc 1 129 0
 1071 0072 2046     		mov	r0, r4
 1072 0074 FFF7FEFF 		bl	strlen
 1073              	.LVL71:
 1074 0078 204B     		ldr	r3, .L85+44
 1075 007a 0246     		mov	r2, r0
 1076 007c 2146     		mov	r1, r4
 1077 007e 2846     		mov	r0, r5
 1078 0080 FFF7FEFF 		bl	f_write
 1079              	.LVL72:
 130:Src/state.c   **** 		HAL_Delay(1000);
 1080              		.loc 1 130 0
 1081 0084 2846     		mov	r0, r5
 1082 0086 FFF7FEFF 		bl	f_close
 1083              	.LVL73:
 131:Src/state.c   **** 	}
 1084              		.loc 1 131 0
 1085 008a 4FF47A70 		mov	r0, #1000
 1086 008e FFF7FEFF 		bl	HAL_Delay
 1087              	.LVL74:
 1088 0092 BEE7     		b	.L74
 1089              	.L83:
 135:Src/state.c   **** 		debug_operations();
 1090              		.loc 1 135 0
 1091 0094 0022     		movs	r2, #0
 1092 0096 0F4B     		ldr	r3, .L85+4
 1093 0098 1A70     		strb	r2, [r3]
 136:Src/state.c   **** 	}
 1094              		.loc 1 136 0
 1095 009a FFF7FEFF 		bl	debug_operations
 1096              	.LVL75:
 1097 009e BCE7     		b	.L75
 1098              	.L84:
 143:Src/state.c   **** 			can1.tx_size = 1;
 1099              		.loc 1 143 0
 1100 00a0 174B     		ldr	r3, .L85+48
 1101 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1102 00a4 0C48     		ldr	r0, .L85+8
 1103 00a6 0373     		strb	r3, [r0, #12]
 144:Src/state.c   **** 			can1.tx_id = ID_ACU_1;
 1104              		.loc 1 144 0
 1105 00a8 0123     		movs	r3, #1
 1106 00aa 0360     		str	r3, [r0]
 145:Src/state.c   **** 			CAN_Send(&can1, normalPriority);
 1107              		.loc 1 145 0
 1108 00ac 4FF48073 		mov	r3, #256
 1109 00b0 C362     		str	r3, [r0, #44]
 146:Src/state.c   **** 			break;
ARM GAS  /tmp/ccYCCuNH.s 			page 32


 1110              		.loc 1 146 0
 1111 00b2 0021     		movs	r1, #0
 1112 00b4 FFF7FEFF 		bl	CAN_Send
 1113              	.LVL76:
 147:Src/state.c   **** 		case ID_ASK_INV_DX:
 1114              		.loc 1 147 0
 1115 00b8 BBE7     		b	.L73
 1116              	.L78:
 165:Src/state.c   **** 			{
 1117              		.loc 1 165 0
 1118 00ba 074B     		ldr	r3, .L85+8
 1119 00bc 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1120 00be 022B     		cmp	r3, #2
 1121 00c0 B7D1     		bne	.L73
 169:Src/state.c   **** 			default:
 1122              		.loc 1 169 0
 1123 00c2 0222     		movs	r2, #2
 1124 00c4 0E4B     		ldr	r3, .L85+48
 1125 00c6 1A70     		strb	r2, [r3]
 1126 00c8 B3E7     		b	.L73
 1127              	.L77:
 175:Src/state.c   **** 			break;
 1128              		.loc 1 175 0
 1129 00ca FFF7FEFF 		bl	atc_pot_operations
 1130              	.LVL77:
 181:Src/state.c   **** /*******************************************************************
 1131              		.loc 1 181 0
 1132 00ce B0E7     		b	.L73
 1133              	.L86:
 1134              		.align	2
 1135              	.L85:
 1136 00d0 00080240 		.word	1073874944
 1137 00d4 00000000 		.word	debug_msg_arrived
 1138 00d8 00000000 		.word	can1
 1139 00dc 00000000 		.word	accel
 1140 00e0 00000000 		.word	brake
 1141 00e4 00000000 		.word	txt
 1142 00e8 00000000 		.word	.LC26
 1143 00ec 00000000 		.word	huart3
 1144 00f0 00000000 		.word	pot_values_f
 1145 00f4 00000000 		.word	filename_pot
 1146 00f8 00000000 		.word	res_open
 1147 00fc 00000000 		.word	byteswritten
 1148 0100 00000000 		.word	current_state
 1149              		.cfi_endproc
 1150              	.LFE144:
 1152              		.section	.text.setup,"ax",%progbits
 1153              		.align	1
 1154              		.global	setup
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1158              		.fpu fpv5-d16
 1160              	setup:
 1161              	.LFB145:
 189:Src/state.c   **** 	if(setup_init == 0){
 1162              		.loc 1 189 0
ARM GAS  /tmp/ccYCCuNH.s 			page 33


 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166 0000 08B5     		push	{r3, lr}
 1167              	.LCFI13:
 1168              		.cfi_def_cfa_offset 8
 1169              		.cfi_offset 3, -8
 1170              		.cfi_offset 14, -4
 190:Src/state.c   **** 		setup_init = 1; //set that setup procedure is started
 1171              		.loc 1 190 0
 1172 0002 4D4B     		ldr	r3, .L109
 1173 0004 1B68     		ldr	r3, [r3]
 1174 0006 83B9     		cbnz	r3, .L88
 191:Src/state.c   **** 		if((atc_connected == 1) && (brake.pot_avr_100 > 50) && (critical_errors = 0)){
 1175              		.loc 1 191 0
 1176 0008 0122     		movs	r2, #1
 1177 000a 4B4B     		ldr	r3, .L109
 1178 000c 1A60     		str	r2, [r3]
 192:Src/state.c   **** 			//If Analog to CAN device is connected, brake is pressed and there aren't critical erros -> send
 1179              		.loc 1 192 0
 1180 000e 4B4B     		ldr	r3, .L109+4
 1181 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1182 0012 9342     		cmp	r3, r2
 1183 0014 33D0     		beq	.L102
 1184              	.L89:
 200:Src/state.c   **** 			can1.dataTx[0] = 1;
 1185              		.loc 1 200 0
 1186 0016 0121     		movs	r1, #1
 1187 0018 494B     		ldr	r3, .L109+8
 1188 001a 1970     		strb	r1, [r3]
 201:Src/state.c   **** 			can1.tx_size = 1;
 1189              		.loc 1 201 0
 1190 001c 4948     		ldr	r0, .L109+12
 1191 001e 0173     		strb	r1, [r0, #12]
 202:Src/state.c   **** 			can1.tx_id = ID_ACU_2;
 1192              		.loc 1 202 0
 1193 0020 0160     		str	r1, [r0]
 203:Src/state.c   **** 			CAN_Send(&can1, highPriority);
 1194              		.loc 1 203 0
 1195 0022 5523     		movs	r3, #85
 1196 0024 C362     		str	r3, [r0, #44]
 204:Src/state.c   **** 		}
 1197              		.loc 1 204 0
 1198 0026 FFF7FEFF 		bl	CAN_Send
 1199              	.LVL78:
 1200              	.L88:
 207:Src/state.c   **** 	{
 1201              		.loc 1 207 0
 1202 002a 4648     		ldr	r0, .L109+12
 1203 002c FFF7FEFF 		bl	fifoRxDataCAN_pop
 1204              	.LVL79:
 1205 0030 0028     		cmp	r0, #0
 1206 0032 37D0     		beq	.L87
 209:Src/state.c   **** 		{
 1207              		.loc 1 209 0
 1208 0034 434B     		ldr	r3, .L109+12
 1209 0036 1B6B     		ldr	r3, [r3, #48]
ARM GAS  /tmp/ccYCCuNH.s 			page 34


 1210 0038 A02B     		cmp	r3, #160
 1211 003a 2FD0     		beq	.L91
 1212 003c 27D9     		bls	.L103
 1213 003e 40F28112 		movw	r2, #385
 1214 0042 9342     		cmp	r3, r2
 1215 0044 4ED0     		beq	.L94
 1216 0046 B3F5C17F 		cmp	r3, #386
 1217 004a 26D1     		bne	.L104
 250:Src/state.c   **** 			{
 1218              		.loc 1 250 0
 1219 004c 3D4B     		ldr	r3, .L109+12
 1220 004e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1221 0050 D82B     		cmp	r3, #216
 1222 0052 27D1     		bne	.L87
 256:Src/state.c   **** 				{
 1223              		.loc 1 256 0
 1224 0054 3B4B     		ldr	r3, .L109+12
 1225 0056 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 1226 0058 0C2B     		cmp	r3, #12
 1227 005a 32D0     		beq	.L105
 272:Src/state.c   **** 					can1.dataTx[1] = 0;
 1228              		.loc 1 272 0
 1229 005c 3948     		ldr	r0, .L109+12
 1230 005e D023     		movs	r3, #208
 1231 0060 0373     		strb	r3, [r0, #12]
 273:Src/state.c   **** 					can1.dataTx[2] = 0;
 1232              		.loc 1 273 0
 1233 0062 0021     		movs	r1, #0
 1234 0064 4173     		strb	r1, [r0, #13]
 274:Src/state.c   **** 					can1.dataTx[3] = 0;
 1235              		.loc 1 274 0
 1236 0066 8173     		strb	r1, [r0, #14]
 275:Src/state.c   **** 					can1.dataTx[4] = 0;
 1237              		.loc 1 275 0
 1238 0068 C173     		strb	r1, [r0, #15]
 276:Src/state.c   **** 					can1.dataTx[5] = 0;
 1239              		.loc 1 276 0
 1240 006a 0174     		strb	r1, [r0, #16]
 277:Src/state.c   **** 					can1.dataTx[6] = 0;
 1241              		.loc 1 277 0
 1242 006c 4174     		strb	r1, [r0, #17]
 278:Src/state.c   **** 					can1.dataTx[7] = 0;
 1243              		.loc 1 278 0
 1244 006e 8174     		strb	r1, [r0, #18]
 279:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 1245              		.loc 1 279 0
 1246 0070 C174     		strb	r1, [r0, #19]
 280:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 1247              		.loc 1 280 0
 1248 0072 4FF48073 		mov	r3, #256
 1249 0076 C362     		str	r3, [r0, #44]
 281:Src/state.c   **** 					// Inverter Dx false
 1250              		.loc 1 281 0
 1251 0078 FFF7FEFF 		bl	CAN_Send
 1252              	.LVL80:
 1253 007c 08BD     		pop	{r3, pc}
 1254              	.L102:
ARM GAS  /tmp/ccYCCuNH.s 			page 35


 192:Src/state.c   **** 			//If Analog to CAN device is connected, brake is pressed and there aren't critical erros -> send
 1255              		.loc 1 192 0 discriminator 1
 1256 007e 324B     		ldr	r3, .L109+16
 1257 0080 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 1258 0082 322B     		cmp	r3, #50
 1259 0084 C7D9     		bls	.L89
 192:Src/state.c   **** 			//If Analog to CAN device is connected, brake is pressed and there aren't critical erros -> send
 1260              		.loc 1 192 0 is_stmt 0 discriminator 2
 1261 0086 0022     		movs	r2, #0
 1262 0088 304B     		ldr	r3, .L109+20
 1263 008a 1A60     		str	r2, [r3]
 1264 008c C3E7     		b	.L89
 1265              	.L103:
 209:Src/state.c   **** 		{
 1266              		.loc 1 209 0 is_stmt 1
 1267 008e 342B     		cmp	r3, #52
 1268 0090 02D1     		bne	.L106
 247:Src/state.c   **** 			break;
 1269              		.loc 1 247 0
 1270 0092 FFF7FEFF 		bl	atc_pot_operations
 1271              	.LVL81:
 248:Src/state.c   **** 		case ID_REQ_INV_DX:
 1272              		.loc 1 248 0
 1273 0096 08BD     		pop	{r3, pc}
 1274              	.L106:
 1275 0098 08BD     		pop	{r3, pc}
 1276              	.L104:
 1277 009a 08BD     		pop	{r3, pc}
 1278              	.L91:
 212:Src/state.c   **** 			{
 1279              		.loc 1 212 0
 1280 009c 294B     		ldr	r3, .L109+12
 1281 009e 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1282 00a0 052B     		cmp	r3, #5
 1283 00a2 00D0     		beq	.L107
 1284              	.L87:
 1285 00a4 08BD     		pop	{r3, pc}
 1286              	.L107:
 217:Src/state.c   **** 				can1.tx_id = ID_ACU_2;
 1287              		.loc 1 217 0
 1288 00a6 0322     		movs	r2, #3
 1289 00a8 254B     		ldr	r3, .L109+8
 1290 00aa 1A70     		strb	r2, [r3]
 218:Src/state.c   **** 				can1.dataRx[0] = 5;
 1291              		.loc 1 218 0
 1292 00ac 2548     		ldr	r0, .L109+12
 1293 00ae 5523     		movs	r3, #85
 1294 00b0 C362     		str	r3, [r0, #44]
 219:Src/state.c   **** 				can1.tx_size = 1;
 1295              		.loc 1 219 0
 1296 00b2 0523     		movs	r3, #5
 1297 00b4 0375     		strb	r3, [r0, #20]
 220:Src/state.c   **** 				CAN_Send(&can1, normalPriority);
 1298              		.loc 1 220 0
 1299 00b6 0123     		movs	r3, #1
 1300 00b8 0360     		str	r3, [r0]
 221:Src/state.c   **** 				break;
ARM GAS  /tmp/ccYCCuNH.s 			page 36


 1301              		.loc 1 221 0
 1302 00ba 0021     		movs	r1, #0
 1303 00bc FFF7FEFF 		bl	CAN_Send
 1304              	.LVL82:
 222:Src/state.c   **** 			// Turn On inverter Dx
 1305              		.loc 1 222 0
 1306 00c0 08BD     		pop	{r3, pc}
 1307              	.L105:
 258:Src/state.c   **** 					can1.dataTx[1] = 0;
 1308              		.loc 1 258 0
 1309 00c2 2048     		ldr	r0, .L109+12
 1310 00c4 0923     		movs	r3, #9
 1311 00c6 0373     		strb	r3, [r0, #12]
 259:Src/state.c   **** 					can1.dataTx[2] = 0;
 1312              		.loc 1 259 0
 1313 00c8 0021     		movs	r1, #0
 1314 00ca 4173     		strb	r1, [r0, #13]
 260:Src/state.c   **** 					can1.dataTx[3] = 0;
 1315              		.loc 1 260 0
 1316 00cc 8173     		strb	r1, [r0, #14]
 261:Src/state.c   **** 					can1.dataTx[4] = 0;
 1317              		.loc 1 261 0
 1318 00ce C173     		strb	r1, [r0, #15]
 262:Src/state.c   **** 					can1.dataTx[5] = 0;
 1319              		.loc 1 262 0
 1320 00d0 0174     		strb	r1, [r0, #16]
 263:Src/state.c   **** 					can1.dataTx[6] = 0;
 1321              		.loc 1 263 0
 1322 00d2 4174     		strb	r1, [r0, #17]
 264:Src/state.c   **** 					can1.dataTx[7] = 0;
 1323              		.loc 1 264 0
 1324 00d4 8174     		strb	r1, [r0, #18]
 265:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 1325              		.loc 1 265 0
 1326 00d6 C174     		strb	r1, [r0, #19]
 266:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 1327              		.loc 1 266 0
 1328 00d8 4FF48073 		mov	r3, #256
 1329 00dc C362     		str	r3, [r0, #44]
 267:Src/state.c   **** 					// Inverter Dx true
 1330              		.loc 1 267 0
 1331 00de FFF7FEFF 		bl	CAN_Send
 1332              	.LVL83:
 1333 00e2 08BD     		pop	{r3, pc}
 1334              	.L94:
 288:Src/state.c   **** 			{
 1335              		.loc 1 288 0
 1336 00e4 174B     		ldr	r3, .L109+12
 1337 00e6 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1338 00e8 D82B     		cmp	r3, #216
 1339 00ea DBD1     		bne	.L87
 294:Src/state.c   **** 				{
 1340              		.loc 1 294 0
 1341 00ec 154B     		ldr	r3, .L109+12
 1342 00ee 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 1343 00f0 0C2B     		cmp	r3, #12
 1344 00f2 10D0     		beq	.L108
ARM GAS  /tmp/ccYCCuNH.s 			page 37


 310:Src/state.c   **** 					can1.dataTx[1] = 0;
 1345              		.loc 1 310 0
 1346 00f4 1348     		ldr	r0, .L109+12
 1347 00f6 0C23     		movs	r3, #12
 1348 00f8 0373     		strb	r3, [r0, #12]
 311:Src/state.c   **** 					can1.dataTx[2] = 0;
 1349              		.loc 1 311 0
 1350 00fa 0021     		movs	r1, #0
 1351 00fc 4173     		strb	r1, [r0, #13]
 312:Src/state.c   **** 					can1.dataTx[3] = 0;
 1352              		.loc 1 312 0
 1353 00fe 8173     		strb	r1, [r0, #14]
 313:Src/state.c   **** 					can1.dataTx[4] = 0;
 1354              		.loc 1 313 0
 1355 0100 C173     		strb	r1, [r0, #15]
 314:Src/state.c   **** 					can1.dataTx[5] = 0;
 1356              		.loc 1 314 0
 1357 0102 0174     		strb	r1, [r0, #16]
 315:Src/state.c   **** 					can1.dataTx[6] = 0;
 1358              		.loc 1 315 0
 1359 0104 4174     		strb	r1, [r0, #17]
 316:Src/state.c   **** 					can1.dataTx[7] = 0;
 1360              		.loc 1 316 0
 1361 0106 8174     		strb	r1, [r0, #18]
 317:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 1362              		.loc 1 317 0
 1363 0108 C174     		strb	r1, [r0, #19]
 318:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 1364              		.loc 1 318 0
 1365 010a 4FF48073 		mov	r3, #256
 1366 010e C362     		str	r3, [r0, #44]
 319:Src/state.c   **** 					// Inverter Sx false
 1367              		.loc 1 319 0
 1368 0110 FFF7FEFF 		bl	CAN_Send
 1369              	.LVL84:
 329:Src/state.c   **** /*******************************************************************
 1370              		.loc 1 329 0
 1371 0114 C6E7     		b	.L87
 1372              	.L108:
 296:Src/state.c   **** 					can1.dataTx[1] = 0;
 1373              		.loc 1 296 0
 1374 0116 0B48     		ldr	r0, .L109+12
 1375 0118 0823     		movs	r3, #8
 1376 011a 0373     		strb	r3, [r0, #12]
 297:Src/state.c   **** 					can1.dataTx[2] = 0;
 1377              		.loc 1 297 0
 1378 011c 0021     		movs	r1, #0
 1379 011e 4173     		strb	r1, [r0, #13]
 298:Src/state.c   **** 					can1.dataTx[3] = 0;
 1380              		.loc 1 298 0
 1381 0120 8173     		strb	r1, [r0, #14]
 299:Src/state.c   **** 					can1.dataTx[4] = 0;
 1382              		.loc 1 299 0
 1383 0122 C173     		strb	r1, [r0, #15]
 300:Src/state.c   **** 					can1.dataTx[5] = 0;
 1384              		.loc 1 300 0
 1385 0124 0174     		strb	r1, [r0, #16]
ARM GAS  /tmp/ccYCCuNH.s 			page 38


 301:Src/state.c   **** 					can1.dataTx[6] = 0;
 1386              		.loc 1 301 0
 1387 0126 4174     		strb	r1, [r0, #17]
 302:Src/state.c   **** 					can1.dataTx[7] = 0;
 1388              		.loc 1 302 0
 1389 0128 8174     		strb	r1, [r0, #18]
 303:Src/state.c   **** 					can1.tx_id = ID_ACU_1;
 1390              		.loc 1 303 0
 1391 012a C174     		strb	r1, [r0, #19]
 304:Src/state.c   **** 					CAN_Send(&can1, normalPriority);
 1392              		.loc 1 304 0
 1393 012c 4FF48073 		mov	r3, #256
 1394 0130 C362     		str	r3, [r0, #44]
 305:Src/state.c   **** 					// Inverter Sx true
 1395              		.loc 1 305 0
 1396 0132 FFF7FEFF 		bl	CAN_Send
 1397              	.LVL85:
 1398 0136 08BD     		pop	{r3, pc}
 1399              	.L110:
 1400              		.align	2
 1401              	.L109:
 1402 0138 00000000 		.word	.LANCHOR3
 1403 013c 00000000 		.word	atc_connected
 1404 0140 00000000 		.word	current_state
 1405 0144 00000000 		.word	can1
 1406 0148 00000000 		.word	brake
 1407 014c 00000000 		.word	.LANCHOR4
 1408              		.cfi_endproc
 1409              	.LFE145:
 1411              		.section	.text.run,"ax",%progbits
 1412              		.align	1
 1413              		.global	run
 1414              		.syntax unified
 1415              		.thumb
 1416              		.thumb_func
 1417              		.fpu fpv5-d16
 1419              	run:
 1420              	.LFB146:
 337:Src/state.c   **** 	if (fifoRxDataCAN_pop(&can1))
 1421              		.loc 1 337 0
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 0
 1424              		@ frame_needed = 0, uses_anonymous_args = 0
 1425 0000 08B5     		push	{r3, lr}
 1426              	.LCFI14:
 1427              		.cfi_def_cfa_offset 8
 1428              		.cfi_offset 3, -8
 1429              		.cfi_offset 14, -4
 338:Src/state.c   **** 	{
 1430              		.loc 1 338 0
 1431 0002 0A48     		ldr	r0, .L116
 1432 0004 FFF7FEFF 		bl	fifoRxDataCAN_pop
 1433              	.LVL86:
 1434 0008 78B1     		cbz	r0, .L111
 340:Src/state.c   **** 		{
 1435              		.loc 1 340 0
 1436 000a 084B     		ldr	r3, .L116
ARM GAS  /tmp/ccYCCuNH.s 			page 39


 1437 000c 1B6B     		ldr	r3, [r3, #48]
 1438 000e 342B     		cmp	r3, #52
 1439 0010 09D0     		beq	.L113
 1440 0012 A02B     		cmp	r3, #160
 1441 0014 09D1     		bne	.L111
 343:Src/state.c   **** 				6)
 1442              		.loc 1 343 0
 1443 0016 054B     		ldr	r3, .L116
 1444 0018 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1445 001a 062B     		cmp	r3, #6
 1446 001c 05D1     		bne	.L111
 346:Src/state.c   **** 			}
 1447              		.loc 1 346 0
 1448 001e 0222     		movs	r2, #2
 1449 0020 034B     		ldr	r3, .L116+4
 1450 0022 1A70     		strb	r2, [r3]
 1451 0024 08BD     		pop	{r3, pc}
 1452              	.L113:
 350:Src/state.c   **** 			break;
 1453              		.loc 1 350 0
 1454 0026 FFF7FEFF 		bl	atc_pot_operations
 1455              	.LVL87:
 1456              	.L111:
 1457 002a 08BD     		pop	{r3, pc}
 1458              	.L117:
 1459              		.align	2
 1460              	.L116:
 1461 002c 00000000 		.word	can1
 1462 0030 00000000 		.word	current_state
 1463              		.cfi_endproc
 1464              	.LFE146:
 1466              		.global	inv_init_response
 1467              		.global	init_step_start_time
 1468              		.global	init_step
 1469              		.global	critical_errors
 1470              		.global	setup_init
 1471              		.comm	current_state,1,1
 1472              		.section	.bss.critical_errors,"aw",%nobits
 1473              		.align	2
 1474              		.set	.LANCHOR4,. + 0
 1477              	critical_errors:
 1478 0000 00000000 		.space	4
 1479              		.section	.bss.init_step,"aw",%nobits
 1480              		.align	2
 1481              		.set	.LANCHOR0,. + 0
 1484              	init_step:
 1485 0000 00000000 		.space	4
 1486              		.section	.bss.init_step_start_time,"aw",%nobits
 1487              		.align	2
 1488              		.set	.LANCHOR1,. + 0
 1491              	init_step_start_time:
 1492 0000 00000000 		.space	4
 1493              		.section	.bss.inv_init_response,"aw",%nobits
 1494              		.set	.LANCHOR2,. + 0
 1497              	inv_init_response:
 1498 0000 00       		.space	1
 1499              		.section	.bss.setup_init,"aw",%nobits
ARM GAS  /tmp/ccYCCuNH.s 			page 40


 1500              		.align	2
 1501              		.set	.LANCHOR3,. + 0
 1504              	setup_init:
 1505 0000 00000000 		.space	4
 1506              		.section	.rodata.atc_pot_operations.str1.4,"aMS",%progbits,1
 1507              		.align	2
 1508              	.LC24:
 1509 0000 504F5420 		.ascii	"POT FAIL %d\015\012\000"
 1509      4641494C 
 1509      2025640D 
 1509      0A00
 1510 000e 0000     		.space	2
 1511              	.LC25:
 1512 0010 504F5420 		.ascii	"POT WORK %d %d\015\012\000"
 1512      574F524B 
 1512      20256420 
 1512      25640D0A 
 1512      00
 1513              		.section	.rodata.debug_operations.str1.4,"aMS",%progbits,1
 1514              		.align	2
 1515              	.LC0:
 1516 0000 68656C70 		.ascii	"help\000"
 1516      00
 1517 0005 000000   		.space	3
 1518              	.LC1:
 1519 0008 0D0A2A2A 		.ascii	"\015\012***********ECU HELP***********\015\012Avaia"
 1519      2A2A2A2A 
 1519      2A2A2A2A 
 1519      2A454355 
 1519      2048454C 
 1520 002f 626C6520 		.ascii	"ble msg are:\015\012\011-- status -> print ECU stat"
 1520      6D736720 
 1520      6172653A 
 1520      0D0A092D 
 1520      2D207374 
 1521 0059 75730D0A 		.ascii	"us\015\012\011-- sd status -> print SD status and t"
 1521      092D2D20 
 1521      73642073 
 1521      74617475 
 1521      73202D3E 
 1522 0083 6865206E 		.ascii	"he name of file inside\015\012\011-- sd file -> pri"
 1522      616D6520 
 1522      6F662066 
 1522      696C6520 
 1522      696E7369 
 1523 00ad 6E742066 		.ascii	"nt files inside the SD\015\012\011-- time -> print "
 1523      696C6573 
 1523      20696E73 
 1523      69646520 
 1523      74686520 
 1524 00d7 61637469 		.ascii	"activity time\015\012\011-- codev  -> print code ve"
 1524      76697479 
 1524      2074696D 
 1524      650D0A09 
 1524      2D2D2063 
 1525 0101 7273696F 		.ascii	"rsion\015\012\000"
 1525      6E0D0A00 
ARM GAS  /tmp/ccYCCuNH.s 			page 41


 1526 0109 000000   		.space	3
 1527              	.LC2:
 1528 010c 636F6465 		.ascii	"codev\000"
 1528      7600
 1529 0112 0000     		.space	2
 1530              	.LC3:
 1531 0114 74696D65 		.ascii	"time\000"
 1531      00
 1532 0119 000000   		.space	3
 1533              	.LC4:
 1534 011c 0D0A5469 		.ascii	"\015\012Time: %d hours : %d min : %d sec : %d dec\015"
 1534      6D653A20 
 1534      25642068 
 1534      6F757273 
 1534      203A2025 
 1535 0148 0A00     		.ascii	"\012\000"
 1536 014a 0000     		.space	2
 1537              	.LC5:
 1538 014c 73746174 		.ascii	"status\000"
 1538      757300
 1539 0153 00       		.space	1
 1540              	.LC6:
 1541 0154 0D0A0A74 		.ascii	"\015\012\012type of status:\015\012\011 0 = OK\015\012"
 1541      79706520 
 1541      6F662073 
 1541      74617475 
 1541      733A0D0A 
 1542 0172 09203120 		.ascii	"\011 1 = ERROR\015\012\011 2 = BUSY\015\012\011 3 ="
 1542      3D204552 
 1542      524F520D 
 1542      0A092032 
 1542      203D2042 
 1543 0190 2054494D 		.ascii	" TIMEOUT\015\012\012CAN1 status:\015\012\011CAN1 co"
 1543      454F5554 
 1543      0D0A0A43 
 1543      414E3120 
 1543      73746174 
 1544 01b1 6E666967 		.ascii	"nfig status: %d \015\012\011CAN1 notification statu"
 1544      20737461 
 1544      7475733A 
 1544      20256420 
 1544      0D0A0943 
 1545 01db 733A2025 		.ascii	"s: %d\015\012\011CAN1 start status: %d\015\012\000"
 1545      640D0A09 
 1545      43414E31 
 1545      20737461 
 1545      72742073 
 1546 01fb 00       		.space	1
 1547              	.LC7:
 1548 01fc 43414E33 		.ascii	"CAN3 status:\015\012\011CAN3 config status: %d \015"
 1548      20737461 
 1548      7475733A 
 1548      0D0A0943 
 1548      414E3320 
 1549 0223 0A094341 		.ascii	"\012\011CAN3 notification status: %d\015\012\011CAN"
 1549      4E33206E 
 1549      6F746966 
ARM GAS  /tmp/ccYCCuNH.s 			page 42


 1549      69636174 
 1549      696F6E20 
 1550 0247 33207374 		.ascii	"3 start status: %d\015\012\000"
 1550      61727420 
 1550      73746174 
 1550      75733A20 
 1550      25640D0A 
 1551              	.LC8:
 1552 025c 0D0A4375 		.ascii	"\015\012Current state: STATE_INIT\015\012\000"
 1552      7272656E 
 1552      74207374 
 1552      6174653A 
 1552      20535441 
 1553 027a 0000     		.space	2
 1554              	.LC9:
 1555 027c 0D0A4375 		.ascii	"\015\012Current state: STATE_IDLE\015\012\000"
 1555      7272656E 
 1555      74207374 
 1555      6174653A 
 1555      20535441 
 1556 029a 0000     		.space	2
 1557              	.LC10:
 1558 029c 0D0A4375 		.ascii	"\015\012Current state: STATE_SETUP\015\012\000"
 1558      7272656E 
 1558      74207374 
 1558      6174653A 
 1558      20535441 
 1559 02bb 00       		.space	1
 1560              	.LC11:
 1561 02bc 0D0A4375 		.ascii	"\015\012Current state: STATE_RUN\015\012\000"
 1561      7272656E 
 1561      74207374 
 1561      6174653A 
 1561      20535441 
 1562 02d9 000000   		.space	3
 1563              	.LC12:
 1564 02dc 0D0A4465 		.ascii	"\015\012Device connected : (0 = no, 1 = yes (for ea"
 1564      76696365 
 1564      20636F6E 
 1564      6E656374 
 1564      6564203A 
 1565 0309 63682062 		.ascii	"ch bit))\015\012\011 IMU -> %d\015\012\011 ITS -> %"
 1565      69742929 
 1565      0D0A0920 
 1565      494D5520 
 1565      2D3E2025 
 1566 032a 640D0A00 		.ascii	"d\015\012\000"
 1567 032e 0000     		.space	2
 1568              	.LC13:
 1569 0330 73642073 		.ascii	"sd status\000"
 1569      74617475 
 1569      7300
 1570 033a 0000     		.space	2
 1571              	.LC14:
 1572 033c 0D0A5364 		.ascii	"\015\012Sd mounted \000"
 1572      206D6F75 
 1572      6E746564 
ARM GAS  /tmp/ccYCCuNH.s 			page 43


 1572      2000
 1573 034a 0000     		.space	2
 1574              	.LC15:
 1575 034c 53642073 		.ascii	"Sd successfully opened and created file: %s\015\012"
 1575      75636365 
 1575      73736675 
 1575      6C6C7920 
 1575      6F70656E 
 1576 0379 00       		.ascii	"\000"
 1577 037a 0000     		.space	2
 1578              	.LC16:
 1579 037c 5364206F 		.ascii	"Sd open FAILED\015\012\000"
 1579      70656E20 
 1579      4641494C 
 1579      45440D0A 
 1579      00
 1580 038d 000000   		.space	3
 1581              	.LC17:
 1582 0390 0D0A5364 		.ascii	"\015\012Sd NOT mounted \000"
 1582      204E4F54 
 1582      206D6F75 
 1582      6E746564 
 1582      2000
 1583 03a2 0000     		.space	2
 1584              	.LC18:
 1585 03a4 73642066 		.ascii	"sd file\000"
 1585      696C6500 
 1586              	.LC19:
 1587 03ac 0D0A4669 		.ascii	"\015\012Files inside sd are:\015\012%s\000"
 1587      6C657320 
 1587      696E7369 
 1587      64652073 
 1587      64206172 
 1588 03c7 00       		.space	1
 1589              	.LC20:
 1590 03c8 67617900 		.ascii	"gay\000"
 1591              	.LC21:
 1592 03cc 0D0A2020 		.ascii	"\015\012          $\015\012        $   $\015\012   "
 1592      20202020 
 1592      20202020 
 1592      240D0A20 
 1592      20202020 
 1593 03ed 20202020 		.ascii	"    $     $\015\012       $$$$$$$\015\012       $$$"
 1593      24202020 
 1593      2020240D 
 1593      0A202020 
 1593      20202020 
 1594 0414 24242424 		.ascii	"$$$$\015\012       $$$$$$$\015\012       $$$$$$$\015"
 1594      0D0A2020 
 1594      20202020 
 1594      20242424 
 1594      24242424 
 1595 0439 0A202024 		.ascii	"\012  $$$$$$     $$$$$$\015\012 $$$$$$$$   $$$$$$$$"
 1595      24242424 
 1595      24202020 
 1595      20202424 
 1595      24242424 
ARM GAS  /tmp/ccYCCuNH.s 			page 44


 1596 0463 0D0A2424 		.ascii	"\015\012$$$$$$$$$$$$$$$$$$$$\015\012 $$$$$$$$   $$$"
 1596      24242424 
 1596      24242424 
 1596      24242424 
 1596      24242424 
 1597 048a 24242424 		.ascii	"$$$$$\015\012  $$$$$$     $$$$$$\015\012\000"
 1597      240D0A20 
 1597      20242424 
 1597      24242420 
 1597      20202020 
 1598 04a7 00       		.space	1
 1599              	.LC22:
 1600 04a8 0D0A4552 		.ascii	"\015\012ERROR : msg %s doesn't exist\015\012\000"
 1600      524F5220 
 1600      3A206D73 
 1600      67202573 
 1600      20646F65 
 1601              		.section	.rodata.idle.str1.4,"aMS",%progbits,1
 1602              		.align	2
 1603              	.LC26:
 1604 0000 25640D0A 		.ascii	"%d\015\012%d\015\012%d\015\012%d\015\012\000"
 1604      25640D0A 
 1604      25640D0A 
 1604      25640D0A 
 1604      00
 1605              		.section	.rodata.imu_operations.str1.4,"aMS",%progbits,1
 1606              		.align	2
 1607              	.LC23:
 1608 0000 494D5520 		.ascii	"IMU presente\015\012\000"
 1608      70726573 
 1608      656E7465 
 1608      0D0A00
 1609              		.text
 1610              	.Letext0:
 1611              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1612              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1613              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1614              		.file 5 "Inc/state.h"
 1615              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 1616              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1617              		.file 8 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1618              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1619              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1620              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1621              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1622              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1623              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1624              		.file 15 "Inc/can.h"
 1625              		.file 16 "Middlewares/Third_Party/FatFs/src/integer.h"
 1626              		.file 17 "/usr/include/newlib/sys/lock.h"
 1627              		.file 18 "/usr/include/newlib/sys/_types.h"
 1628              		.file 19 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1629              		.file 20 "/usr/include/newlib/sys/reent.h"
 1630              		.file 21 "/usr/include/newlib/stdlib.h"
 1631              		.file 22 "Middlewares/Third_Party/FatFs/src/ff.h"
 1632              		.file 23 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1633              		.file 24 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
ARM GAS  /tmp/ccYCCuNH.s 			page 45


 1634              		.file 25 "Inc/sd_diskio.h"
 1635              		.file 26 "Inc/fatfs.h"
 1636              		.file 27 "Inc/pedals.h"
 1637              		.file 28 "Inc/global_variables.h"
 1638              		.file 29 "/usr/include/newlib/stdio.h"
 1639              		.file 30 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccYCCuNH.s 			page 46


DEFINED SYMBOLS
                            *ABS*:0000000000000000 state.c
     /tmp/ccYCCuNH.s:17     .text.set_bit_uint8:0000000000000000 $t
     /tmp/ccYCCuNH.s:24     .text.set_bit_uint8:0000000000000000 set_bit_uint8
     /tmp/ccYCCuNH.s:68     .text.init:0000000000000000 $t
     /tmp/ccYCCuNH.s:75     .text.init:0000000000000000 init
     /tmp/ccYCCuNH.s:310    .text.init:0000000000000178 $d
                            *COM*:0000000000000001 current_state
     /tmp/ccYCCuNH.s:321    .text.debug_operations:0000000000000000 $t
     /tmp/ccYCCuNH.s:328    .text.debug_operations:0000000000000000 debug_operations
     /tmp/ccYCCuNH.s:694    .text.debug_operations:000000000000024c $d
     /tmp/ccYCCuNH.s:738    .text.imu_operations:0000000000000000 $t
     /tmp/ccYCCuNH.s:745    .text.imu_operations:0000000000000000 imu_operations
     /tmp/ccYCCuNH.s:785    .text.imu_operations:000000000000002c $d
     /tmp/ccYCCuNH.s:793    .text.atc_pot_operations:0000000000000000 $t
     /tmp/ccYCCuNH.s:800    .text.atc_pot_operations:0000000000000000 atc_pot_operations
     /tmp/ccYCCuNH.s:962    .text.atc_pot_operations:00000000000000f8 $d
     /tmp/ccYCCuNH.s:976    .text.idle:0000000000000000 $t
     /tmp/ccYCCuNH.s:983    .text.idle:0000000000000000 idle
     /tmp/ccYCCuNH.s:1136   .text.idle:00000000000000d0 $d
     /tmp/ccYCCuNH.s:1153   .text.setup:0000000000000000 $t
     /tmp/ccYCCuNH.s:1160   .text.setup:0000000000000000 setup
     /tmp/ccYCCuNH.s:1402   .text.setup:0000000000000138 $d
     /tmp/ccYCCuNH.s:1412   .text.run:0000000000000000 $t
     /tmp/ccYCCuNH.s:1419   .text.run:0000000000000000 run
     /tmp/ccYCCuNH.s:1461   .text.run:000000000000002c $d
     /tmp/ccYCCuNH.s:1497   .bss.inv_init_response:0000000000000000 inv_init_response
     /tmp/ccYCCuNH.s:1491   .bss.init_step_start_time:0000000000000000 init_step_start_time
     /tmp/ccYCCuNH.s:1484   .bss.init_step:0000000000000000 init_step
     /tmp/ccYCCuNH.s:1477   .bss.critical_errors:0000000000000000 critical_errors
     /tmp/ccYCCuNH.s:1504   .bss.setup_init:0000000000000000 setup_init
     /tmp/ccYCCuNH.s:1473   .bss.critical_errors:0000000000000000 $d
     /tmp/ccYCCuNH.s:1480   .bss.init_step:0000000000000000 $d
     /tmp/ccYCCuNH.s:1487   .bss.init_step_start_time:0000000000000000 $d
     /tmp/ccYCCuNH.s:1498   .bss.inv_init_response:0000000000000000 $d
     /tmp/ccYCCuNH.s:1500   .bss.setup_init:0000000000000000 $d
     /tmp/ccYCCuNH.s:1507   .rodata.atc_pot_operations.str1.4:0000000000000000 $d
     /tmp/ccYCCuNH.s:1514   .rodata.debug_operations.str1.4:0000000000000000 $d
     /tmp/ccYCCuNH.s:1602   .rodata.idle.str1.4:0000000000000000 $d
     /tmp/ccYCCuNH.s:1606   .rodata.imu_operations.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
CAN_Send
fifoRxDataCAN_pop
can3
can1
count_ms_abs
strcmp
HAL_UART_Transmit
memcpy
strlen
sprintf
debug_rx
mount_ok
huart3
debug_tx
ARM GAS  /tmp/ccYCCuNH.s 			page 47


code_version
count_hour
count_min
count_sec
count_dec
its_connected
imu_connected
successfull_opening
filename_log
log_names
count_imu
accel_implausibility_check
atc_connected
count_atc
accel
brake
txt
accel_implausibility_check_count_flag
HAL_GPIO_ReadPin
f_open
f_write
f_close
HAL_Delay
debug_msg_arrived
pot_values_f
filename_pot
res_open
byteswritten
