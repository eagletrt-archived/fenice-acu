ARM GAS  /tmp/ccYccQ35.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_SDMMC1_SD_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	MX_SDMMC1_SD_Init:
  24              	.LFB146:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.</center></h2>
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****  * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****  *                             www.st.com/SLA0044
  16:Src/main.c    ****  *
  17:Src/main.c    ****  ******************************************************************************
  18:Src/main.c    ****  */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "fatfs.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include "can.h"
  28:Src/main.c    **** #include "global_variables.h"
  29:Src/main.c    **** #include "sd.h"
  30:Src/main.c    **** #include "state.h"
  31:Src/main.c    **** #include "stdio.h"
  32:Src/main.c    **** #include "string.h"
  33:Src/main.c    **** /* USER CODE END Includes */
ARM GAS  /tmp/ccYccQ35.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** /* USER CODE END PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE END PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  50:Src/main.c    **** CAN_HandleTypeDef hcan1;
  51:Src/main.c    **** 
  52:Src/main.c    **** SD_HandleTypeDef hsd1;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim2;
  55:Src/main.c    **** 
  56:Src/main.c    **** UART_HandleTypeDef huart3;
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE BEGIN PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** uint8_t i_debug;
  61:Src/main.c    **** extern canStruct can1, can3;
  62:Src/main.c    **** extern fifoPriority fifoPriority_t;
  63:Src/main.c    **** 
  64:Src/main.c    **** CAN_FilterTypeDef sFilter;
  65:Src/main.c    **** 
  66:Src/main.c    **** long int counter = 0;
  67:Src/main.c    **** /* USER CODE END PV */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** void SystemClock_Config(void);
  71:Src/main.c    **** static void MX_GPIO_Init(void);
  72:Src/main.c    **** static void MX_SDMMC1_SD_Init(void);
  73:Src/main.c    **** static void MX_USART3_UART_Init(void);
  74:Src/main.c    **** static void MX_CAN1_Init(void);
  75:Src/main.c    **** static void MX_TIM2_Init(void);
  76:Src/main.c    **** static void MX_NVIC_Init(void);
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /**
  87:Src/main.c    ****   * @brief  The application entry point.
  88:Src/main.c    ****   * @retval int
  89:Src/main.c    ****   */
  90:Src/main.c    **** int main(void)
ARM GAS  /tmp/ccYccQ35.s 			page 3


  91:Src/main.c    **** {
  92:Src/main.c    ****   /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE END 1 */
  95:Src/main.c    ****   
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 100:Src/main.c    ****   HAL_Init();
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN Init */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END Init */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Configure the system clock */
 107:Src/main.c    ****   SystemClock_Config();
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE END SysInit */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Initialize all configured peripherals */
 114:Src/main.c    ****   MX_GPIO_Init();
 115:Src/main.c    ****   MX_SDMMC1_SD_Init();
 116:Src/main.c    ****   MX_USART3_UART_Init();
 117:Src/main.c    ****   MX_FATFS_Init();
 118:Src/main.c    ****   MX_CAN1_Init();
 119:Src/main.c    ****   MX_TIM2_Init();
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* Initialize interrupts */
 122:Src/main.c    ****   MX_NVIC_Init();
 123:Src/main.c    ****   /* USER CODE BEGIN 2 */
 124:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim2);
 125:Src/main.c    **** 
 126:Src/main.c    **** 	can1.rx0_interrupt = CAN1_RX0_IRQn;
 127:Src/main.c    **** 	can1.tx_interrupt = CAN1_TX_IRQn;
 128:Src/main.c    **** 	can1.hcan = &hcan1;
 129:Src/main.c    **** 
 130:Src/main.c    **** 	can_init();
 131:Src/main.c    **** 
 132:Src/main.c    **** 	HAL_UART_Receive_IT(&huart3, (uint8_t *)&debug_rx[debug_rx_count],
 133:Src/main.c    **** 						1);  // activate rx interrupt for debug
 134:Src/main.c    **** 
 135:Src/main.c    **** 	current_state = STATE_INIT;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	accel.pot1_max_val = 4096;
 138:Src/main.c    **** 	accel.pot1_min_val = 0;
 139:Src/main.c    **** 	accel.pot1_range = accel.pot1_max_val - accel.pot1_min_val;
 140:Src/main.c    **** 	accel.pot2_max_val = 4096;
 141:Src/main.c    **** 	accel.pot2_min_val = 0;
 142:Src/main.c    **** 	accel.pot2_range = accel.pot2_max_val - accel.pot2_min_val;
 143:Src/main.c    **** 
 144:Src/main.c    **** 	init_sd();
 145:Src/main.c    **** 
 146:Src/main.c    **** 	
 147:Src/main.c    **** 
ARM GAS  /tmp/ccYccQ35.s 			page 4


 148:Src/main.c    ****   /* USER CODE END 2 */
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* Infinite loop */
 151:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 152:Src/main.c    **** 	while (1) {
 153:Src/main.c    **** 		can1.dataTx[0] = 0;
 154:Src/main.c    **** 		can1.dataTx[1] = 0;
 155:Src/main.c    **** 		can1.dataTx[2] = 0;
 156:Src/main.c    **** 		can1.dataTx[3] = 0;
 157:Src/main.c    **** 		can1.dataTx[4] = counter >> 24;
 158:Src/main.c    **** 		can1.dataTx[5] = counter >> 16;
 159:Src/main.c    **** 		can1.dataTx[6] = counter >> 8;
 160:Src/main.c    **** 		can1.dataTx[7] = counter % 256;
 161:Src/main.c    **** 
 162:Src/main.c    **** 		can1.tx_id = 0xA0;
 163:Src/main.c    **** 
 164:Src/main.c    **** 		// CAN_Send(&can1, normalPriority);
 165:Src/main.c    **** 		// HAL_Delay(500);
 166:Src/main.c    **** 
 167:Src/main.c    **** 		// counter ++;
 168:Src/main.c    **** 
 169:Src/main.c    **** 		if (current_state == STATE_INIT) {
 170:Src/main.c    **** 			init();
 171:Src/main.c    **** 		} else if (current_state == STATE_IDLE) {
 172:Src/main.c    **** 			idle();
 173:Src/main.c    **** 		} else if (current_state == STATE_SETUP) {
 174:Src/main.c    **** 			setup();
 175:Src/main.c    **** 		} else if (current_state == STATE_RUN) {
 176:Src/main.c    **** 			run();
 177:Src/main.c    **** 		}
 178:Src/main.c    ****     /* USER CODE END WHILE */
 179:Src/main.c    **** 
 180:Src/main.c    ****     /* USER CODE BEGIN 3 */
 181:Src/main.c    **** 	}
 182:Src/main.c    ****   /* USER CODE END 3 */
 183:Src/main.c    **** }
 184:Src/main.c    **** 
 185:Src/main.c    **** /**
 186:Src/main.c    ****   * @brief System Clock Configuration
 187:Src/main.c    ****   * @retval None
 188:Src/main.c    ****   */
 189:Src/main.c    **** void SystemClock_Config(void)
 190:Src/main.c    **** {
 191:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 192:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 193:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 194:Src/main.c    **** 
 195:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 196:Src/main.c    ****   */
 197:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 198:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 199:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 200:Src/main.c    ****   */
 201:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 202:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 203:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 204:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccYccQ35.s 			page 5


 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 207:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 208:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 209:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 210:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 211:Src/main.c    ****   {
 212:Src/main.c    ****     Error_Handler();
 213:Src/main.c    ****   }
 214:Src/main.c    ****   /** Activate the Over-Drive mode 
 215:Src/main.c    ****   */
 216:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 217:Src/main.c    ****   {
 218:Src/main.c    ****     Error_Handler();
 219:Src/main.c    ****   }
 220:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 221:Src/main.c    ****   */
 222:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 223:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 224:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 225:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 226:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 227:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 228:Src/main.c    **** 
 229:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     Error_Handler();
 232:Src/main.c    ****   }
 233:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 234:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 235:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 236:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 237:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 238:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 239:Src/main.c    ****   {
 240:Src/main.c    ****     Error_Handler();
 241:Src/main.c    ****   }
 242:Src/main.c    **** }
 243:Src/main.c    **** 
 244:Src/main.c    **** /**
 245:Src/main.c    ****   * @brief NVIC Configuration.
 246:Src/main.c    ****   * @retval None
 247:Src/main.c    ****   */
 248:Src/main.c    **** static void MX_NVIC_Init(void)
 249:Src/main.c    **** {
 250:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 251:Src/main.c    ****   HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 252:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 253:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 254:Src/main.c    ****   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 255:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 256:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 257:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 258:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 259:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 260:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 261:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
ARM GAS  /tmp/ccYccQ35.s 			page 6


 262:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 263:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 264:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 265:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 266:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 267:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 268:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 269:Src/main.c    ****   HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 270:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
 271:Src/main.c    **** }
 272:Src/main.c    **** 
 273:Src/main.c    **** /**
 274:Src/main.c    ****   * @brief CAN1 Initialization Function
 275:Src/main.c    ****   * @param None
 276:Src/main.c    ****   * @retval None
 277:Src/main.c    ****   */
 278:Src/main.c    **** static void MX_CAN1_Init(void)
 279:Src/main.c    **** {
 280:Src/main.c    **** 
 281:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 282:Src/main.c    **** 
 283:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 284:Src/main.c    **** 
 285:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 286:Src/main.c    **** 
 287:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 288:Src/main.c    ****   hcan1.Instance = CAN1;
 289:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 290:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 291:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 292:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 293:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 294:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 295:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 296:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 297:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 298:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 299:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 300:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 301:Src/main.c    ****   {
 302:Src/main.c    ****     Error_Handler();
 303:Src/main.c    ****   }
 304:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 305:Src/main.c    **** 
 306:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 307:Src/main.c    **** 
 308:Src/main.c    **** }
 309:Src/main.c    **** 
 310:Src/main.c    **** /**
 311:Src/main.c    ****   * @brief SDMMC1 Initialization Function
 312:Src/main.c    ****   * @param None
 313:Src/main.c    ****   * @retval None
 314:Src/main.c    ****   */
 315:Src/main.c    **** static void MX_SDMMC1_SD_Init(void)
 316:Src/main.c    **** {
  26              		.loc 1 316 0
  27              		.cfi_startproc
ARM GAS  /tmp/ccYccQ35.s 			page 7


  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 317:Src/main.c    **** 
 318:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 0 */
 319:Src/main.c    **** 
 320:Src/main.c    ****   /* USER CODE END SDMMC1_Init 0 */
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 1 */
 323:Src/main.c    **** 
 324:Src/main.c    ****   /* USER CODE END SDMMC1_Init 1 */
 325:Src/main.c    ****   hsd1.Instance = SDMMC1;
  31              		.loc 1 325 0
  32 0000 054B     		ldr	r3, .L2
  33 0002 064A     		ldr	r2, .L2+4
  34 0004 1A60     		str	r2, [r3]
 326:Src/main.c    ****   hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  35              		.loc 1 326 0
  36 0006 0022     		movs	r2, #0
  37 0008 5A60     		str	r2, [r3, #4]
 327:Src/main.c    ****   hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  38              		.loc 1 327 0
  39 000a 9A60     		str	r2, [r3, #8]
 328:Src/main.c    ****   hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  40              		.loc 1 328 0
  41 000c DA60     		str	r2, [r3, #12]
 329:Src/main.c    ****   hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  42              		.loc 1 329 0
  43 000e 1A61     		str	r2, [r3, #16]
 330:Src/main.c    ****   hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  44              		.loc 1 330 0
  45 0010 5A61     		str	r2, [r3, #20]
 331:Src/main.c    ****   hsd1.Init.ClockDiv = 1;
  46              		.loc 1 331 0
  47 0012 0122     		movs	r2, #1
  48 0014 9A61     		str	r2, [r3, #24]
  49 0016 7047     		bx	lr
  50              	.L3:
  51              		.align	2
  52              	.L2:
  53 0018 00000000 		.word	hsd1
  54 001c 002C0140 		.word	1073818624
  55              		.cfi_endproc
  56              	.LFE146:
  58              		.section	.text.MX_GPIO_Init,"ax",%progbits
  59              		.align	1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-d16
  65              	MX_GPIO_Init:
  66              	.LFB149:
 332:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 2 */
 333:Src/main.c    **** 
 334:Src/main.c    ****   /* USER CODE END SDMMC1_Init 2 */
 335:Src/main.c    **** 
 336:Src/main.c    **** }
ARM GAS  /tmp/ccYccQ35.s 			page 8


 337:Src/main.c    **** 
 338:Src/main.c    **** /**
 339:Src/main.c    ****   * @brief TIM2 Initialization Function
 340:Src/main.c    ****   * @param None
 341:Src/main.c    ****   * @retval None
 342:Src/main.c    ****   */
 343:Src/main.c    **** static void MX_TIM2_Init(void)
 344:Src/main.c    **** {
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 347:Src/main.c    **** 
 348:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 349:Src/main.c    **** 
 350:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 351:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 354:Src/main.c    **** 
 355:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 356:Src/main.c    ****   htim2.Instance = TIM2;
 357:Src/main.c    ****   htim2.Init.Prescaler = 108;
 358:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 359:Src/main.c    ****   htim2.Init.Period = 1000;
 360:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 361:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 362:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 363:Src/main.c    ****   {
 364:Src/main.c    ****     Error_Handler();
 365:Src/main.c    ****   }
 366:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 367:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 368:Src/main.c    ****   {
 369:Src/main.c    ****     Error_Handler();
 370:Src/main.c    ****   }
 371:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 372:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 373:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 374:Src/main.c    ****   {
 375:Src/main.c    ****     Error_Handler();
 376:Src/main.c    ****   }
 377:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 378:Src/main.c    **** 
 379:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 380:Src/main.c    **** 
 381:Src/main.c    **** }
 382:Src/main.c    **** 
 383:Src/main.c    **** /**
 384:Src/main.c    ****   * @brief USART3 Initialization Function
 385:Src/main.c    ****   * @param None
 386:Src/main.c    ****   * @retval None
 387:Src/main.c    ****   */
 388:Src/main.c    **** static void MX_USART3_UART_Init(void)
 389:Src/main.c    **** {
 390:Src/main.c    **** 
 391:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 392:Src/main.c    **** 
 393:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
ARM GAS  /tmp/ccYccQ35.s 			page 9


 394:Src/main.c    **** 
 395:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 396:Src/main.c    **** 
 397:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 398:Src/main.c    ****   huart3.Instance = USART3;
 399:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 400:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 401:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 402:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 403:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 404:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 405:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 406:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 407:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 408:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 409:Src/main.c    ****   {
 410:Src/main.c    ****     Error_Handler();
 411:Src/main.c    ****   }
 412:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 415:Src/main.c    **** 
 416:Src/main.c    **** }
 417:Src/main.c    **** 
 418:Src/main.c    **** /**
 419:Src/main.c    ****   * @brief GPIO Initialization Function
 420:Src/main.c    ****   * @param None
 421:Src/main.c    ****   * @retval None
 422:Src/main.c    ****   */
 423:Src/main.c    **** static void MX_GPIO_Init(void)
 424:Src/main.c    **** {
  67              		.loc 1 424 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 40
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 30B5     		push	{r4, r5, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 12
  74              		.cfi_offset 4, -12
  75              		.cfi_offset 5, -8
  76              		.cfi_offset 14, -4
  77 0002 8BB0     		sub	sp, sp, #44
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 56
 425:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  80              		.loc 1 425 0
  81 0004 0024     		movs	r4, #0
  82 0006 0594     		str	r4, [sp, #20]
  83 0008 0694     		str	r4, [sp, #24]
  84 000a 0794     		str	r4, [sp, #28]
  85 000c 0894     		str	r4, [sp, #32]
  86 000e 0994     		str	r4, [sp, #36]
  87              	.LBB2:
 426:Src/main.c    **** 
 427:Src/main.c    ****   /* GPIO Ports Clock Enable */
 428:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  88              		.loc 1 428 0
ARM GAS  /tmp/ccYccQ35.s 			page 10


  89 0010 244B     		ldr	r3, .L6
  90 0012 1A6B     		ldr	r2, [r3, #48]
  91 0014 42F00402 		orr	r2, r2, #4
  92 0018 1A63     		str	r2, [r3, #48]
  93 001a 1A6B     		ldr	r2, [r3, #48]
  94 001c 02F00402 		and	r2, r2, #4
  95 0020 0192     		str	r2, [sp, #4]
  96 0022 019A     		ldr	r2, [sp, #4]
  97              	.LBE2:
  98              	.LBB3:
 429:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  99              		.loc 1 429 0
 100 0024 1A6B     		ldr	r2, [r3, #48]
 101 0026 42F00102 		orr	r2, r2, #1
 102 002a 1A63     		str	r2, [r3, #48]
 103 002c 1A6B     		ldr	r2, [r3, #48]
 104 002e 02F00102 		and	r2, r2, #1
 105 0032 0292     		str	r2, [sp, #8]
 106 0034 029A     		ldr	r2, [sp, #8]
 107              	.LBE3:
 108              	.LBB4:
 430:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 109              		.loc 1 430 0
 110 0036 1A6B     		ldr	r2, [r3, #48]
 111 0038 42F00202 		orr	r2, r2, #2
 112 003c 1A63     		str	r2, [r3, #48]
 113 003e 1A6B     		ldr	r2, [r3, #48]
 114 0040 02F00202 		and	r2, r2, #2
 115 0044 0392     		str	r2, [sp, #12]
 116 0046 039A     		ldr	r2, [sp, #12]
 117              	.LBE4:
 118              	.LBB5:
 431:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 119              		.loc 1 431 0
 120 0048 1A6B     		ldr	r2, [r3, #48]
 121 004a 42F00802 		orr	r2, r2, #8
 122 004e 1A63     		str	r2, [r3, #48]
 123 0050 1B6B     		ldr	r3, [r3, #48]
 124 0052 03F00803 		and	r3, r3, #8
 125 0056 0493     		str	r3, [sp, #16]
 126 0058 049B     		ldr	r3, [sp, #16]
 127              	.LBE5:
 432:Src/main.c    **** 
 433:Src/main.c    ****   /*Configure GPIO pin Output Level */
 434:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_green_Pin|LED_red_Pin|LED_blue_Pin, GPIO_PIN_RESET);
 128              		.loc 1 434 0
 129 005a 134D     		ldr	r5, .L6+4
 130 005c 2246     		mov	r2, r4
 131 005e 44F28101 		movw	r1, #16513
 132 0062 2846     		mov	r0, r5
 133 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 134              	.LVL0:
 435:Src/main.c    **** 
 436:Src/main.c    ****   /*Configure GPIO pin : USER_BUTTON_Pin */
 437:Src/main.c    ****   GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 135              		.loc 1 437 0
 136 0068 4FF40053 		mov	r3, #8192
ARM GAS  /tmp/ccYccQ35.s 			page 11


 137 006c 0593     		str	r3, [sp, #20]
 438:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 138              		.loc 1 438 0
 139 006e 0694     		str	r4, [sp, #24]
 439:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 140              		.loc 1 439 0
 141 0070 0794     		str	r4, [sp, #28]
 440:Src/main.c    ****   HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 142              		.loc 1 440 0
 143 0072 05A9     		add	r1, sp, #20
 144 0074 0D48     		ldr	r0, .L6+8
 145 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL1:
 441:Src/main.c    **** 
 442:Src/main.c    ****   /*Configure GPIO pin : SD_detect_Pin */
 443:Src/main.c    ****   GPIO_InitStruct.Pin = SD_detect_Pin;
 147              		.loc 1 443 0
 148 007a 2023     		movs	r3, #32
 149 007c 0593     		str	r3, [sp, #20]
 444:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 150              		.loc 1 444 0
 151 007e 0694     		str	r4, [sp, #24]
 445:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 152              		.loc 1 445 0
 153 0080 0794     		str	r4, [sp, #28]
 446:Src/main.c    ****   HAL_GPIO_Init(SD_detect_GPIO_Port, &GPIO_InitStruct);
 154              		.loc 1 446 0
 155 0082 05A9     		add	r1, sp, #20
 156 0084 0A48     		ldr	r0, .L6+12
 157 0086 FFF7FEFF 		bl	HAL_GPIO_Init
 158              	.LVL2:
 447:Src/main.c    **** 
 448:Src/main.c    ****   /*Configure GPIO pins : LED_green_Pin LED_red_Pin LED_blue_Pin */
 449:Src/main.c    ****   GPIO_InitStruct.Pin = LED_green_Pin|LED_red_Pin|LED_blue_Pin;
 159              		.loc 1 449 0
 160 008a 44F28103 		movw	r3, #16513
 161 008e 0593     		str	r3, [sp, #20]
 450:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 162              		.loc 1 450 0
 163 0090 0123     		movs	r3, #1
 164 0092 0693     		str	r3, [sp, #24]
 451:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 165              		.loc 1 451 0
 166 0094 0794     		str	r4, [sp, #28]
 452:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 167              		.loc 1 452 0
 168 0096 0894     		str	r4, [sp, #32]
 453:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 169              		.loc 1 453 0
 170 0098 05A9     		add	r1, sp, #20
 171 009a 2846     		mov	r0, r5
 172 009c FFF7FEFF 		bl	HAL_GPIO_Init
 173              	.LVL3:
 454:Src/main.c    **** 
 455:Src/main.c    **** }
 174              		.loc 1 455 0
 175 00a0 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccYccQ35.s 			page 12


 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 12
 178              		@ sp needed
 179 00a2 30BD     		pop	{r4, r5, pc}
 180              	.L7:
 181              		.align	2
 182              	.L6:
 183 00a4 00380240 		.word	1073887232
 184 00a8 00040240 		.word	1073873920
 185 00ac 00080240 		.word	1073874944
 186 00b0 00000240 		.word	1073872896
 187              		.cfi_endproc
 188              	.LFE149:
 190              		.section	.text.MX_NVIC_Init,"ax",%progbits
 191              		.align	1
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv5-d16
 197              	MX_NVIC_Init:
 198              	.LFB144:
 249:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 199              		.loc 1 249 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI3:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 251:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 208              		.loc 1 251 0
 209 0002 0022     		movs	r2, #0
 210 0004 1146     		mov	r1, r2
 211 0006 3120     		movs	r0, #49
 212 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 213              	.LVL4:
 252:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 214              		.loc 1 252 0
 215 000c 3120     		movs	r0, #49
 216 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 217              	.LVL5:
 254:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 218              		.loc 1 254 0
 219 0012 0022     		movs	r2, #0
 220 0014 1146     		mov	r1, r2
 221 0016 2720     		movs	r0, #39
 222 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 223              	.LVL6:
 255:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 224              		.loc 1 255 0
 225 001c 2720     		movs	r0, #39
 226 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 227              	.LVL7:
 257:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 228              		.loc 1 257 0
ARM GAS  /tmp/ccYccQ35.s 			page 13


 229 0022 0022     		movs	r2, #0
 230 0024 1146     		mov	r1, r2
 231 0026 1620     		movs	r0, #22
 232 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 233              	.LVL8:
 258:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 234              		.loc 1 258 0
 235 002c 1620     		movs	r0, #22
 236 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 237              	.LVL9:
 260:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 238              		.loc 1 260 0
 239 0032 0022     		movs	r2, #0
 240 0034 1146     		mov	r1, r2
 241 0036 1520     		movs	r0, #21
 242 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 243              	.LVL10:
 261:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 244              		.loc 1 261 0
 245 003c 1520     		movs	r0, #21
 246 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 247              	.LVL11:
 263:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 248              		.loc 1 263 0
 249 0042 0022     		movs	r2, #0
 250 0044 1146     		mov	r1, r2
 251 0046 1420     		movs	r0, #20
 252 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 253              	.LVL12:
 264:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 254              		.loc 1 264 0
 255 004c 1420     		movs	r0, #20
 256 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 257              	.LVL13:
 266:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 258              		.loc 1 266 0
 259 0052 0022     		movs	r2, #0
 260 0054 1146     		mov	r1, r2
 261 0056 1320     		movs	r0, #19
 262 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 263              	.LVL14:
 267:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 264              		.loc 1 267 0
 265 005c 1320     		movs	r0, #19
 266 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 267              	.LVL15:
 269:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
 268              		.loc 1 269 0
 269 0062 0022     		movs	r2, #0
 270 0064 1146     		mov	r1, r2
 271 0066 1C20     		movs	r0, #28
 272 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 273              	.LVL16:
 270:Src/main.c    **** }
 274              		.loc 1 270 0
 275 006c 1C20     		movs	r0, #28
 276 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /tmp/ccYccQ35.s 			page 14


 277              	.LVL17:
 278 0072 08BD     		pop	{r3, pc}
 279              		.cfi_endproc
 280              	.LFE144:
 282              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 283              		.align	1
 284              		.global	HAL_TIM_PeriodElapsedCallback
 285              		.syntax unified
 286              		.thumb
 287              		.thumb_func
 288              		.fpu fpv5-d16
 290              	HAL_TIM_PeriodElapsedCallback:
 291              	.LFB150:
 456:Src/main.c    **** 
 457:Src/main.c    **** /* USER CODE BEGIN 4 */
 458:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 292              		.loc 1 458 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              	.LVL18:
 297 0000 08B5     		push	{r3, lr}
 298              	.LCFI4:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 3, -8
 301              		.cfi_offset 14, -4
 459:Src/main.c    **** 	if (htim == &htim2) {
 302              		.loc 1 459 0
 303 0002 464B     		ldr	r3, .L26
 304 0004 8342     		cmp	r3, r0
 305 0006 00D0     		beq	.L19
 306              	.LVL19:
 307              	.L10:
 308 0008 08BD     		pop	{r3, pc}
 309              	.LVL20:
 310              	.L19:
 460:Src/main.c    **** 		count_ms += 1;
 311              		.loc 1 460 0
 312 000a 454A     		ldr	r2, .L26+4
 313 000c 1388     		ldrh	r3, [r2]
 314 000e 9BB2     		uxth	r3, r3
 315 0010 0133     		adds	r3, r3, #1
 316 0012 9BB2     		uxth	r3, r3
 317 0014 1380     		strh	r3, [r2]	@ movhi
 461:Src/main.c    **** 		count_ms_abs++; //absolute 32 bit counter -> up to 50 days 
 318              		.loc 1 461 0
 319 0016 434A     		ldr	r2, .L26+8
 320 0018 1368     		ldr	r3, [r2]
 321 001a 0133     		adds	r3, r3, #1
 322 001c 1360     		str	r3, [r2]
 462:Src/main.c    **** 		if (accel_implausibility_check_count_flag == 1) {
 323              		.loc 1 462 0
 324 001e 424B     		ldr	r3, .L26+12
 325 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326 0022 012B     		cmp	r3, #1
 327 0024 51D0     		beq	.L20
 328              	.L12:
ARM GAS  /tmp/ccYccQ35.s 			page 15


 463:Src/main.c    **** 			accel_implausibility_check_count++;
 464:Src/main.c    **** 			if (accel_implausibility_check_count == 50) {
 465:Src/main.c    **** 				accel_implausibility_check_count_flag = 2;
 466:Src/main.c    **** 				accel_implausibility_check_count = 0;
 467:Src/main.c    **** 				// TODO: add error messages
 468:Src/main.c    **** 			}
 469:Src/main.c    **** 		}
 470:Src/main.c    **** 		if (count_ms == 100) {
 329              		.loc 1 470 0
 330 0026 3E4B     		ldr	r3, .L26+4
 331 0028 1B88     		ldrh	r3, [r3]
 332 002a 9BB2     		uxth	r3, r3
 333 002c 642B     		cmp	r3, #100
 334 002e EBD1     		bne	.L10
 471:Src/main.c    **** 			count_ms = 0;
 335              		.loc 1 471 0
 336 0030 0022     		movs	r2, #0
 337 0032 3B4B     		ldr	r3, .L26+4
 338 0034 1A80     		strh	r2, [r3]	@ movhi
 472:Src/main.c    **** 			count_dec++;
 339              		.loc 1 472 0
 340 0036 3D4A     		ldr	r2, .L26+16
 341 0038 1388     		ldrh	r3, [r2]
 342 003a 9BB2     		uxth	r3, r3
 343 003c 0133     		adds	r3, r3, #1
 344 003e 9BB2     		uxth	r3, r3
 345 0040 1380     		strh	r3, [r2]	@ movhi
 473:Src/main.c    **** 			//--- put your counter here (count each 0,1 sec) ---//
 474:Src/main.c    **** 			count_inverter++;
 346              		.loc 1 474 0
 347 0042 3B4B     		ldr	r3, .L26+20
 348 0044 1988     		ldrh	r1, [r3]
 349 0046 0131     		adds	r1, r1, #1
 350 0048 89B2     		uxth	r1, r1
 351 004a 1980     		strh	r1, [r3]	@ movhi
 475:Src/main.c    **** 			count_imu++;
 352              		.loc 1 475 0
 353 004c 394A     		ldr	r2, .L26+24
 354 004e 1388     		ldrh	r3, [r2]
 355 0050 0133     		adds	r3, r3, #1
 356 0052 9BB2     		uxth	r3, r3
 357 0054 1380     		strh	r3, [r2]	@ movhi
 476:Src/main.c    **** 			count_atc++;
 358              		.loc 1 476 0
 359 0056 3848     		ldr	r0, .L26+28
 360              	.LVL21:
 361 0058 0288     		ldrh	r2, [r0]
 362 005a 0132     		adds	r2, r2, #1
 363 005c 92B2     		uxth	r2, r2
 364 005e 0280     		strh	r2, [r0]	@ movhi
 477:Src/main.c    **** 			if (count_inverter == 10) {  //--- check if inverter is connected ---//
 365              		.loc 1 477 0
 366 0060 0A29     		cmp	r1, #10
 367 0062 01D0     		beq	.L13
 478:Src/main.c    **** 					   // TODO: to implement error functions
 479:Src/main.c    **** 			} else if (count_inverter == 11) {
 368              		.loc 1 479 0
ARM GAS  /tmp/ccYccQ35.s 			page 16


 369 0064 0B29     		cmp	r1, #11
 370 0066 3ED0     		beq	.L21
 371              	.L13:
 480:Src/main.c    **** 				count_inverter = 10;
 481:Src/main.c    **** 			}
 482:Src/main.c    **** 			if (count_atc == 10) {  //--- check if Analog To Can is connected ---//
 372              		.loc 1 482 0
 373 0068 0A2A     		cmp	r2, #10
 374 006a 40D0     		beq	.L22
 483:Src/main.c    **** 				// TODO: to implement error functions
 484:Src/main.c    **** 				atc_connected = 0;
 485:Src/main.c    **** 			} else if (count_atc == 11) {
 375              		.loc 1 485 0
 376 006c 0B2A     		cmp	r2, #11
 377 006e 42D0     		beq	.L23
 378              	.L15:
 486:Src/main.c    **** 				count_atc = 10;
 487:Src/main.c    **** 			}
 488:Src/main.c    **** 			if (count_imu == 10) {  //--- check if imu is connected ---//
 379              		.loc 1 488 0
 380 0070 0A2B     		cmp	r3, #10
 381 0072 44D0     		beq	.L24
 489:Src/main.c    **** 				// imu non presente //
 490:Src/main.c    **** 				imu_connected = 0;  // imu not connected
 491:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 1
 492:Src/main.c    **** 			} else if (count_imu == 11) {
 382              		.loc 1 492 0
 383 0074 0B2B     		cmp	r3, #11
 384 0076 4CD0     		beq	.L25
 385              	.L17:
 493:Src/main.c    **** 				count_imu = 10;
 494:Src/main.c    **** 			}
 495:Src/main.c    **** 			if (count_dec == 10) {
 386              		.loc 1 495 0
 387 0078 2C4B     		ldr	r3, .L26+16
 388 007a 1B88     		ldrh	r3, [r3]
 389 007c 9BB2     		uxth	r3, r3
 390 007e 0A2B     		cmp	r3, #10
 391 0080 C2D1     		bne	.L10
 496:Src/main.c    **** 				count_dec = 0;
 392              		.loc 1 496 0
 393 0082 0022     		movs	r2, #0
 394 0084 294B     		ldr	r3, .L26+16
 395 0086 1A80     		strh	r2, [r3]	@ movhi
 497:Src/main.c    **** 				count_sec++;
 396              		.loc 1 497 0
 397 0088 2C4A     		ldr	r2, .L26+32
 398 008a 1388     		ldrh	r3, [r2]
 399 008c 9BB2     		uxth	r3, r3
 400 008e 0133     		adds	r3, r3, #1
 401 0090 9BB2     		uxth	r3, r3
 402 0092 1380     		strh	r3, [r2]	@ movhi
 498:Src/main.c    **** 				if (count_sec == 60) {
 403              		.loc 1 498 0
 404 0094 1388     		ldrh	r3, [r2]
 405 0096 9BB2     		uxth	r3, r3
 406 0098 3C2B     		cmp	r3, #60
ARM GAS  /tmp/ccYccQ35.s 			page 17


 407 009a B5D1     		bne	.L10
 499:Src/main.c    **** 					count_sec = 0;
 408              		.loc 1 499 0
 409 009c 0022     		movs	r2, #0
 410 009e 274B     		ldr	r3, .L26+32
 411 00a0 1A80     		strh	r2, [r3]	@ movhi
 500:Src/main.c    **** 					count_min++;
 412              		.loc 1 500 0
 413 00a2 274A     		ldr	r2, .L26+36
 414 00a4 1388     		ldrh	r3, [r2]
 415 00a6 9BB2     		uxth	r3, r3
 416 00a8 0133     		adds	r3, r3, #1
 417 00aa 9BB2     		uxth	r3, r3
 418 00ac 1380     		strh	r3, [r2]	@ movhi
 501:Src/main.c    **** 					if (count_min == 60) {
 419              		.loc 1 501 0
 420 00ae 1388     		ldrh	r3, [r2]
 421 00b0 9BB2     		uxth	r3, r3
 422 00b2 3C2B     		cmp	r3, #60
 423 00b4 A8D1     		bne	.L10
 502:Src/main.c    **** 						count_min = 0;
 424              		.loc 1 502 0
 425 00b6 0022     		movs	r2, #0
 426 00b8 214B     		ldr	r3, .L26+36
 427 00ba 1A80     		strh	r2, [r3]	@ movhi
 503:Src/main.c    **** 						count_hour++;
 428              		.loc 1 503 0
 429 00bc 214A     		ldr	r2, .L26+40
 430 00be 1388     		ldrh	r3, [r2]
 431 00c0 9BB2     		uxth	r3, r3
 432 00c2 0133     		adds	r3, r3, #1
 433 00c4 9BB2     		uxth	r3, r3
 434 00c6 1380     		strh	r3, [r2]	@ movhi
 504:Src/main.c    **** 					}
 505:Src/main.c    **** 				}
 506:Src/main.c    **** 			}
 507:Src/main.c    **** 		}
 508:Src/main.c    **** 	}
 509:Src/main.c    **** }
 435              		.loc 1 509 0
 436 00c8 9EE7     		b	.L10
 437              	.LVL22:
 438              	.L20:
 463:Src/main.c    **** 			if (accel_implausibility_check_count == 50) {
 439              		.loc 1 463 0
 440 00ca 1F4A     		ldr	r2, .L26+44
 441 00cc 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 442 00ce 0133     		adds	r3, r3, #1
 443 00d0 DBB2     		uxtb	r3, r3
 444 00d2 1370     		strb	r3, [r2]
 464:Src/main.c    **** 				accel_implausibility_check_count_flag = 2;
 445              		.loc 1 464 0
 446 00d4 322B     		cmp	r3, #50
 447 00d6 A6D1     		bne	.L12
 465:Src/main.c    **** 				accel_implausibility_check_count = 0;
 448              		.loc 1 465 0
 449 00d8 0222     		movs	r2, #2
ARM GAS  /tmp/ccYccQ35.s 			page 18


 450 00da 134B     		ldr	r3, .L26+12
 451 00dc 1A70     		strb	r2, [r3]
 466:Src/main.c    **** 				// TODO: add error messages
 452              		.loc 1 466 0
 453 00de 0022     		movs	r2, #0
 454 00e0 194B     		ldr	r3, .L26+44
 455 00e2 1A70     		strb	r2, [r3]
 456 00e4 9FE7     		b	.L12
 457              	.LVL23:
 458              	.L21:
 480:Src/main.c    **** 			}
 459              		.loc 1 480 0
 460 00e6 0A20     		movs	r0, #10
 461 00e8 1149     		ldr	r1, .L26+20
 462 00ea 0880     		strh	r0, [r1]	@ movhi
 463 00ec BCE7     		b	.L13
 464              	.L22:
 484:Src/main.c    **** 			} else if (count_atc == 11) {
 465              		.loc 1 484 0
 466 00ee 0021     		movs	r1, #0
 467 00f0 164A     		ldr	r2, .L26+48
 468 00f2 1170     		strb	r1, [r2]
 469 00f4 BCE7     		b	.L15
 470              	.L23:
 486:Src/main.c    **** 			}
 471              		.loc 1 486 0
 472 00f6 0A21     		movs	r1, #10
 473 00f8 0F4A     		ldr	r2, .L26+28
 474 00fa 1180     		strh	r1, [r2]	@ movhi
 475 00fc B8E7     		b	.L15
 476              	.L24:
 490:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 1
 477              		.loc 1 490 0
 478 00fe 0022     		movs	r2, #0
 479 0100 134B     		ldr	r3, .L26+52
 480 0102 1A70     		strb	r2, [r3]
 491:Src/main.c    **** 			} else if (count_imu == 11) {
 481              		.loc 1 491 0
 482 0104 0A23     		movs	r3, #10
 483 0106 1222     		movs	r2, #18
 484 0108 1249     		ldr	r1, .L26+56
 485 010a 1348     		ldr	r0, .L26+60
 486 010c FFF7FEFF 		bl	HAL_UART_Transmit
 487              	.LVL24:
 488 0110 B2E7     		b	.L17
 489              	.L25:
 493:Src/main.c    **** 			}
 490              		.loc 1 493 0
 491 0112 0A22     		movs	r2, #10
 492 0114 074B     		ldr	r3, .L26+24
 493 0116 1A80     		strh	r2, [r3]	@ movhi
 494 0118 AEE7     		b	.L17
 495              	.L27:
 496 011a 00BF     		.align	2
 497              	.L26:
 498 011c 00000000 		.word	htim2
 499 0120 00000000 		.word	count_ms
ARM GAS  /tmp/ccYccQ35.s 			page 19


 500 0124 00000000 		.word	count_ms_abs
 501 0128 00000000 		.word	accel_implausibility_check_count_flag
 502 012c 00000000 		.word	count_dec
 503 0130 00000000 		.word	count_inverter
 504 0134 00000000 		.word	count_imu
 505 0138 00000000 		.word	count_atc
 506 013c 00000000 		.word	count_sec
 507 0140 00000000 		.word	count_min
 508 0144 00000000 		.word	count_hour
 509 0148 00000000 		.word	accel_implausibility_check_count
 510 014c 00000000 		.word	atc_connected
 511 0150 00000000 		.word	imu_connected
 512 0154 00000000 		.word	.LC0
 513 0158 00000000 		.word	huart3
 514              		.cfi_endproc
 515              	.LFE150:
 517              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 518              		.align	1
 519              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 520              		.syntax unified
 521              		.thumb
 522              		.thumb_func
 523              		.fpu fpv5-d16
 525              	HAL_CAN_RxFifo0MsgPendingCallback:
 526              	.LFB151:
 510:Src/main.c    **** 
 511:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 527              		.loc 1 511 0
 528              		.cfi_startproc
 529              		@ args = 0, pretend = 0, frame = 32
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531              	.LVL25:
 532 0000 10B5     		push	{r4, lr}
 533              	.LCFI5:
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 4, -8
 536              		.cfi_offset 14, -4
 537 0002 88B0     		sub	sp, sp, #32
 538              	.LCFI6:
 539              		.cfi_def_cfa_offset 40
 540 0004 0446     		mov	r4, r0
 512:Src/main.c    **** 	/*sprintf(txt, "%d\r\n", HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 513:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 514:Src/main.c    **** 
 515:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 541              		.loc 1 515 0
 542 0006 8021     		movs	r1, #128
 543 0008 0E48     		ldr	r0, .L32
 544              	.LVL26:
 545 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 546              	.LVL27:
 516:Src/main.c    **** 	if (hcan == &hcan1) {
 547              		.loc 1 516 0
 548 000e 0E4B     		ldr	r3, .L32+4
 549 0010 9C42     		cmp	r4, r3
 550 0012 01D0     		beq	.L31
 551              	.LVL28:
ARM GAS  /tmp/ccYccQ35.s 			page 20


 552              	.L28:
 517:Src/main.c    **** 		// HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO0\r\n", strlen("rx on
 518:Src/main.c    **** 		// FIFO0\r\n"), 10);
 519:Src/main.c    **** 		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 520:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 521:Src/main.c    **** 			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &header,
 522:Src/main.c    **** 								 can1.dataRX_int);
 523:Src/main.c    **** 			can1.rx_id_int = header.StdId;
 524:Src/main.c    **** 			can1.rx_size_int = header.DLC;
 525:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 526:Src/main.c    **** 			/*sprintf(txt, "DATA: %d %d %d %d %d %d %d %d\r\n", can1.dataRx[0],
 527:Src/main.c    **** 					can1.dataRx[1], can1.dataRx[2], can1.dataRx[3],
 528:Src/main.c    **** 					can1.dataRx[4], can1.dataRx[5], can1.dataRx[6],
 529:Src/main.c    **** 					can1.dataRx[7]);*/
 530:Src/main.c    **** 			// HAL_UART_Transmit(&huart3, (uint8_t *)txt, strlen(txt), 100);
 531:Src/main.c    **** 			// HAL_UART_Transmit(&huart3, (uint8_t*)"ciao2\r\n",
 532:Src/main.c    **** 			// strlen("ciao2\r\n"), 10);
 533:Src/main.c    **** 		}
 534:Src/main.c    **** 	}
 535:Src/main.c    **** }
 553              		.loc 1 535 0
 554 0014 08B0     		add	sp, sp, #32
 555              	.LCFI7:
 556              		.cfi_remember_state
 557              		.cfi_def_cfa_offset 8
 558              		@ sp needed
 559 0016 10BD     		pop	{r4, pc}
 560              	.LVL29:
 561              	.L31:
 562              	.LCFI8:
 563              		.cfi_restore_state
 519:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 564              		.loc 1 519 0
 565 0018 0021     		movs	r1, #0
 566 001a 1846     		mov	r0, r3
 567 001c FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 568              	.LVL30:
 569 0020 0028     		cmp	r0, #0
 570 0022 F7D0     		beq	.L28
 571              	.LBB6:
 521:Src/main.c    **** 								 can1.dataRX_int);
 572              		.loc 1 521 0
 573 0024 094C     		ldr	r4, .L32+8
 574              	.LVL31:
 575 0026 2346     		mov	r3, r4
 576 0028 01AA     		add	r2, sp, #4
 577 002a 0021     		movs	r1, #0
 578 002c 0648     		ldr	r0, .L32+4
 579 002e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 580              	.LVL32:
 523:Src/main.c    **** 			can1.rx_size_int = header.DLC;
 581              		.loc 1 523 0
 582 0032 A4F11C00 		sub	r0, r4, #28
 583 0036 019B     		ldr	r3, [sp, #4]
 584 0038 4363     		str	r3, [r0, #52]
 524:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 585              		.loc 1 524 0
ARM GAS  /tmp/ccYccQ35.s 			page 21


 586 003a 059B     		ldr	r3, [sp, #20]
 587 003c 8360     		str	r3, [r0, #8]
 525:Src/main.c    **** 			/*sprintf(txt, "DATA: %d %d %d %d %d %d %d %d\r\n", can1.dataRx[0],
 588              		.loc 1 525 0
 589 003e FFF7FEFF 		bl	fifoRxDataCAN_push
 590              	.LVL33:
 591              	.LBE6:
 592              		.loc 1 535 0
 593 0042 E7E7     		b	.L28
 594              	.L33:
 595              		.align	2
 596              	.L32:
 597 0044 00040240 		.word	1073873920
 598 0048 00000000 		.word	hcan1
 599 004c 1C000000 		.word	can1+28
 600              		.cfi_endproc
 601              	.LFE151:
 603              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 604              		.align	1
 605              		.global	HAL_CAN_RxFifo1MsgPendingCallback
 606              		.syntax unified
 607              		.thumb
 608              		.thumb_func
 609              		.fpu fpv5-d16
 611              	HAL_CAN_RxFifo1MsgPendingCallback:
 612              	.LFB152:
 536:Src/main.c    **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 613              		.loc 1 536 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              	.LVL34:
 618 0000 08B5     		push	{r3, lr}
 619              	.LCFI9:
 620              		.cfi_def_cfa_offset 8
 621              		.cfi_offset 3, -8
 622              		.cfi_offset 14, -4
 537:Src/main.c    **** 	if (hcan == &hcan1) {
 623              		.loc 1 537 0
 624 0002 054B     		ldr	r3, .L38
 625 0004 8342     		cmp	r3, r0
 626 0006 00D0     		beq	.L37
 627              	.LVL35:
 628              	.L34:
 629 0008 08BD     		pop	{r3, pc}
 630              	.LVL36:
 631              	.L37:
 538:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"rx on FIFO1\r\n",
 632              		.loc 1 538 0
 633 000a 0A23     		movs	r3, #10
 634 000c 0D22     		movs	r2, #13
 635 000e 0349     		ldr	r1, .L38+4
 636 0010 0348     		ldr	r0, .L38+8
 637              	.LVL37:
 638 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 639              	.LVL38:
 539:Src/main.c    **** 						  strlen("rx on FIFO1\r\n"), 10);
ARM GAS  /tmp/ccYccQ35.s 			page 22


 540:Src/main.c    **** 	}
 541:Src/main.c    **** }
 640              		.loc 1 541 0
 641 0016 F7E7     		b	.L34
 642              	.L39:
 643              		.align	2
 644              	.L38:
 645 0018 00000000 		.word	hcan1
 646 001c 00000000 		.word	.LC1
 647 0020 00000000 		.word	huart3
 648              		.cfi_endproc
 649              	.LFE152:
 651              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 652              		.align	1
 653              		.global	HAL_CAN_RxFifo0FullCallback
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu fpv5-d16
 659              	HAL_CAN_RxFifo0FullCallback:
 660              	.LFB153:
 542:Src/main.c    **** 
 543:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 661              		.loc 1 543 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              	.LVL39:
 666 0000 08B5     		push	{r3, lr}
 667              	.LCFI10:
 668              		.cfi_def_cfa_offset 8
 669              		.cfi_offset 3, -8
 670              		.cfi_offset 14, -4
 544:Src/main.c    **** 	if (hcan == &hcan1) {
 671              		.loc 1 544 0
 672 0002 054B     		ldr	r3, .L44
 673 0004 8342     		cmp	r3, r0
 674 0006 00D0     		beq	.L43
 675              	.LVL40:
 676              	.L40:
 677 0008 08BD     		pop	{r3, pc}
 678              	.LVL41:
 679              	.L43:
 545:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO0 FULL\r\n",
 680              		.loc 1 545 0
 681 000a 0A23     		movs	r3, #10
 682 000c 0C22     		movs	r2, #12
 683 000e 0349     		ldr	r1, .L44+4
 684 0010 0348     		ldr	r0, .L44+8
 685              	.LVL42:
 686 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 687              	.LVL43:
 546:Src/main.c    **** 						  strlen("FIFO0 FULL\r\n"), 10);
 547:Src/main.c    **** 	}
 548:Src/main.c    **** }
 688              		.loc 1 548 0
 689 0016 F7E7     		b	.L40
ARM GAS  /tmp/ccYccQ35.s 			page 23


 690              	.L45:
 691              		.align	2
 692              	.L44:
 693 0018 00000000 		.word	hcan1
 694 001c 00000000 		.word	.LC2
 695 0020 00000000 		.word	huart3
 696              		.cfi_endproc
 697              	.LFE153:
 699              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 700              		.align	1
 701              		.global	HAL_CAN_RxFifo1FullCallback
 702              		.syntax unified
 703              		.thumb
 704              		.thumb_func
 705              		.fpu fpv5-d16
 707              	HAL_CAN_RxFifo1FullCallback:
 708              	.LFB154:
 549:Src/main.c    **** void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan) {
 709              		.loc 1 549 0
 710              		.cfi_startproc
 711              		@ args = 0, pretend = 0, frame = 0
 712              		@ frame_needed = 0, uses_anonymous_args = 0
 713              	.LVL44:
 714 0000 08B5     		push	{r3, lr}
 715              	.LCFI11:
 716              		.cfi_def_cfa_offset 8
 717              		.cfi_offset 3, -8
 718              		.cfi_offset 14, -4
 550:Src/main.c    **** 	if (hcan == &hcan1) {
 719              		.loc 1 550 0
 720 0002 054B     		ldr	r3, .L50
 721 0004 8342     		cmp	r3, r0
 722 0006 00D0     		beq	.L49
 723              	.LVL45:
 724              	.L46:
 725 0008 08BD     		pop	{r3, pc}
 726              	.LVL46:
 727              	.L49:
 551:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO1 FULL\r\n",
 728              		.loc 1 551 0
 729 000a 0A23     		movs	r3, #10
 730 000c 0C22     		movs	r2, #12
 731 000e 0349     		ldr	r1, .L50+4
 732 0010 0348     		ldr	r0, .L50+8
 733              	.LVL47:
 734 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 735              	.LVL48:
 552:Src/main.c    **** 						  strlen("FIFO1 FULL\r\n"), 10);
 553:Src/main.c    **** 	}
 554:Src/main.c    **** }
 736              		.loc 1 554 0
 737 0016 F7E7     		b	.L46
 738              	.L51:
 739              		.align	2
 740              	.L50:
 741 0018 00000000 		.word	hcan1
 742 001c 00000000 		.word	.LC3
ARM GAS  /tmp/ccYccQ35.s 			page 24


 743 0020 00000000 		.word	huart3
 744              		.cfi_endproc
 745              	.LFE154:
 747              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 748              		.align	1
 749              		.global	HAL_CAN_TxMailbox0CompleteCallback
 750              		.syntax unified
 751              		.thumb
 752              		.thumb_func
 753              		.fpu fpv5-d16
 755              	HAL_CAN_TxMailbox0CompleteCallback:
 756              	.LFB155:
 555:Src/main.c    **** 
 556:Src/main.c    **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 757              		.loc 1 556 0
 758              		.cfi_startproc
 759              		@ args = 0, pretend = 0, frame = 0
 760              		@ frame_needed = 0, uses_anonymous_args = 0
 761              	.LVL49:
 762 0000 38B5     		push	{r3, r4, r5, lr}
 763              	.LCFI12:
 764              		.cfi_def_cfa_offset 16
 765              		.cfi_offset 3, -16
 766              		.cfi_offset 4, -12
 767              		.cfi_offset 5, -8
 768              		.cfi_offset 14, -4
 769 0002 0546     		mov	r5, r0
 557:Src/main.c    **** 	sprintf(txt, "mb0: %d\r\n", (int)can1.idBck);
 770              		.loc 1 557 0
 771 0004 184C     		ldr	r4, .L57
 772 0006 194B     		ldr	r3, .L57+4
 773 0008 9A6B     		ldr	r2, [r3, #56]
 774 000a 1949     		ldr	r1, .L57+8
 775 000c 2046     		mov	r0, r4
 776              	.LVL50:
 777 000e FFF7FEFF 		bl	sprintf
 778              	.LVL51:
 558:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 779              		.loc 1 558 0
 780 0012 2046     		mov	r0, r4
 781 0014 FFF7FEFF 		bl	strlen
 782              	.LVL52:
 783 0018 0A23     		movs	r3, #10
 784 001a 82B2     		uxth	r2, r0
 785 001c 2146     		mov	r1, r4
 786 001e 1548     		ldr	r0, .L57+12
 787 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 788              	.LVL53:
 559:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 789              		.loc 1 559 0
 790 0024 0121     		movs	r1, #1
 791 0026 1448     		ldr	r0, .L57+16
 792 0028 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 793              	.LVL54:
 560:Src/main.c    **** 	if (hcan == &hcan1) {
 794              		.loc 1 560 0
 795 002c 134B     		ldr	r3, .L57+20
ARM GAS  /tmp/ccYccQ35.s 			page 25


 796 002e 9D42     		cmp	r5, r3
 797 0030 00D0     		beq	.L56
 798              	.L52:
 799 0032 38BD     		pop	{r3, r4, r5, pc}
 800              	.LVL55:
 801              	.L56:
 561:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 802              		.loc 1 561 0
 803 0034 0D48     		ldr	r0, .L57+4
 804 0036 FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 805              	.LVL56:
 806 003a 58B1     		cbz	r0, .L54
 562:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 807              		.loc 1 562 0
 808 003c 0B48     		ldr	r0, .L57+4
 809 003e FFF7FEFF 		bl	CAN_Send_IT
 810              	.LVL57:
 811 0042 0028     		cmp	r0, #0
 812 0044 F5D0     		beq	.L52
 563:Src/main.c    **** 				// TODO: implementare errore
 564:Src/main.c    **** 			} else {
 565:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)("high\r\n"),
 813              		.loc 1 565 0
 814 0046 0A23     		movs	r3, #10
 815 0048 0622     		movs	r2, #6
 816 004a 0D49     		ldr	r1, .L57+24
 817 004c 0948     		ldr	r0, .L57+12
 818 004e FFF7FEFF 		bl	HAL_UART_Transmit
 819              	.LVL58:
 820 0052 38BD     		pop	{r3, r4, r5, pc}
 821              	.LVL59:
 822              	.L54:
 566:Src/main.c    **** 								  strlen("high\r\n"), 10);
 567:Src/main.c    **** 			}
 568:Src/main.c    **** 		} else if (fifoTxDataCAN_normal_pop(&can1)) {
 823              		.loc 1 568 0
 824 0054 0548     		ldr	r0, .L57+4
 825 0056 FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 826              	.LVL60:
 827 005a 0028     		cmp	r0, #0
 828 005c E9D0     		beq	.L52
 569:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 570:Src/main.c    **** 			// strlen("Prendo dalla fifo\r\n"), 10);
 571:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 829              		.loc 1 571 0
 830 005e 0348     		ldr	r0, .L57+4
 831 0060 FFF7FEFF 		bl	CAN_Send_IT
 832              	.LVL61:
 572:Src/main.c    **** 				// TODO: implementare errore
 573:Src/main.c    **** 			}
 574:Src/main.c    **** 		} else {
 575:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 576:Src/main.c    **** 			// strlen("Fifo vuota\r\n"), 10);
 577:Src/main.c    **** 		}
 578:Src/main.c    **** 	} /*else{
 579:Src/main.c    **** 	 HAL_UART_Transmit(&huart3,(uint8_t*)("Messaggio trasmesso\r\n"),
 580:Src/main.c    **** 	 strlen("Messaggio trasmesso\r\n"), 10);
ARM GAS  /tmp/ccYccQ35.s 			page 26


 581:Src/main.c    **** 		 //HAL_GPIO_TogglePin(USER_LED_4_GPIO_Port, USER_LED_4_Pin);
 582:Src/main.c    **** 		 fifoDataType fifodata;
 583:Src/main.c    **** 		 if(fifoTxDataCAN3_high_pop(&fifoCAN3, &fifodata)){
 584:Src/main.c    **** 			 for(int i = 0; i < 8; i++){
 585:Src/main.c    **** 				 can3.dataTx[i] = fifodata.data[i];
 586:Src/main.c    **** 			 }
 587:Src/main.c    **** 			 if(CAN_Send_IT(&can3, fifodata.id) == 0){
 588:Src/main.c    **** 				 //TODO: implementare errore
 589:Src/main.c    **** 			 }
 590:Src/main.c    **** 		 }else if(fifoTxDataCAN3_normal_pop(&fifoCAN3, &fifodata)){
 591:Src/main.c    **** 			 HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 592:Src/main.c    **** 	 strlen("Prendo dalla fifo\r\n"), 10); for(int i = 0; i < 8; i++){
 593:Src/main.c    **** 				 can3.dataTx[i] = fifodata.data[i];
 594:Src/main.c    **** 			 }
 595:Src/main.c    **** 			 if(CAN_Send_IT(&can3, fifodata.id) == 0){
 596:Src/main.c    **** 				 //TODO: implementare errore
 597:Src/main.c    **** 			 }
 598:Src/main.c    **** 		 }else{
 599:Src/main.c    **** 			 //TODO: riattivare interrupt
 600:Src/main.c    **** 			 HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 601:Src/main.c    **** 	 strlen("Fifo vuota\r\n"), 10);
 602:Src/main.c    **** 		 }*/
 603:Src/main.c    **** 	  //}
 604:Src/main.c    **** }
 833              		.loc 1 604 0
 834 0064 E5E7     		b	.L52
 835              	.L58:
 836 0066 00BF     		.align	2
 837              	.L57:
 838 0068 00000000 		.word	txt
 839 006c 00000000 		.word	can1
 840 0070 00000000 		.word	.LC4
 841 0074 00000000 		.word	huart3
 842 0078 00040240 		.word	1073873920
 843 007c 00000000 		.word	hcan1
 844 0080 0C000000 		.word	.LC5
 845              		.cfi_endproc
 846              	.LFE155:
 848              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 849              		.align	1
 850              		.global	HAL_CAN_TxMailbox1CompleteCallback
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 854              		.fpu fpv5-d16
 856              	HAL_CAN_TxMailbox1CompleteCallback:
 857              	.LFB156:
 605:Src/main.c    **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 858              		.loc 1 605 0
 859              		.cfi_startproc
 860              		@ args = 0, pretend = 0, frame = 0
 861              		@ frame_needed = 0, uses_anonymous_args = 0
 862              	.LVL62:
 863 0000 38B5     		push	{r3, r4, r5, lr}
 864              	.LCFI13:
 865              		.cfi_def_cfa_offset 16
 866              		.cfi_offset 3, -16
ARM GAS  /tmp/ccYccQ35.s 			page 27


 867              		.cfi_offset 4, -12
 868              		.cfi_offset 5, -8
 869              		.cfi_offset 14, -4
 870 0002 0546     		mov	r5, r0
 606:Src/main.c    **** 	sprintf(txt, "mb1: %d %d\r\n", can1.fifo.txTailNormal,
 871              		.loc 1 606 0
 872 0004 194A     		ldr	r2, .L64
 873 0006 1A4C     		ldr	r4, .L64+4
 874 0008 92F87230 		ldrb	r3, [r2, #114]	@ zero_extendqisi2
 875 000c 92F87320 		ldrb	r2, [r2, #115]	@ zero_extendqisi2
 876 0010 1849     		ldr	r1, .L64+8
 877 0012 2046     		mov	r0, r4
 878              	.LVL63:
 879 0014 FFF7FEFF 		bl	sprintf
 880              	.LVL64:
 607:Src/main.c    **** 			can1.fifo.txHeadNormal);
 608:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 881              		.loc 1 608 0
 882 0018 2046     		mov	r0, r4
 883 001a FFF7FEFF 		bl	strlen
 884              	.LVL65:
 885 001e 0A23     		movs	r3, #10
 886 0020 82B2     		uxth	r2, r0
 887 0022 2146     		mov	r1, r4
 888 0024 1448     		ldr	r0, .L64+12
 889 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 890              	.LVL66:
 609:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 891              		.loc 1 609 0
 892 002a 0121     		movs	r1, #1
 893 002c 1348     		ldr	r0, .L64+16
 894 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 895              	.LVL67:
 610:Src/main.c    **** 	if (hcan == &hcan1) {
 896              		.loc 1 610 0
 897 0032 134B     		ldr	r3, .L64+20
 898 0034 9D42     		cmp	r5, r3
 899 0036 00D0     		beq	.L63
 900              	.L59:
 901 0038 38BD     		pop	{r3, r4, r5, pc}
 902              	.LVL68:
 903              	.L63:
 611:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 904              		.loc 1 611 0
 905 003a 0C48     		ldr	r0, .L64
 906 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 907              	.LVL69:
 908 0040 58B1     		cbz	r0, .L61
 612:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 909              		.loc 1 612 0
 910 0042 0A48     		ldr	r0, .L64
 911 0044 FFF7FEFF 		bl	CAN_Send_IT
 912              	.LVL70:
 913 0048 0028     		cmp	r0, #0
 914 004a F5D0     		beq	.L59
 613:Src/main.c    **** 				// TODO: implementare errore
 614:Src/main.c    **** 			} else {
ARM GAS  /tmp/ccYccQ35.s 			page 28


 615:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)("high\r\n"),
 915              		.loc 1 615 0
 916 004c 0A23     		movs	r3, #10
 917 004e 0622     		movs	r2, #6
 918 0050 0C49     		ldr	r1, .L64+24
 919 0052 0948     		ldr	r0, .L64+12
 920 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 921              	.LVL71:
 922 0058 38BD     		pop	{r3, r4, r5, pc}
 923              	.LVL72:
 924              	.L61:
 616:Src/main.c    **** 								  strlen("high\r\n"), 10);
 617:Src/main.c    **** 			}
 618:Src/main.c    **** 		} else if (fifoTxDataCAN_normal_pop(&can1)) {
 925              		.loc 1 618 0
 926 005a 0448     		ldr	r0, .L64
 927 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 928              	.LVL73:
 929 0060 0028     		cmp	r0, #0
 930 0062 E9D0     		beq	.L59
 619:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 620:Src/main.c    **** 			// strlen("Prendo dalla fifo\r\n"), 10);
 621:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 931              		.loc 1 621 0
 932 0064 0148     		ldr	r0, .L64
 933 0066 FFF7FEFF 		bl	CAN_Send_IT
 934              	.LVL74:
 622:Src/main.c    **** 				// TODO: implementare errore
 623:Src/main.c    **** 			}
 624:Src/main.c    **** 		} else {
 625:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 626:Src/main.c    **** 			// strlen("Fifo vuota\r\n"), 10);
 627:Src/main.c    **** 		}
 628:Src/main.c    **** 	}
 629:Src/main.c    **** }
 935              		.loc 1 629 0
 936 006a E5E7     		b	.L59
 937              	.L65:
 938              		.align	2
 939              	.L64:
 940 006c 00000000 		.word	can1
 941 0070 00000000 		.word	txt
 942 0074 00000000 		.word	.LC6
 943 0078 00000000 		.word	huart3
 944 007c 00040240 		.word	1073873920
 945 0080 00000000 		.word	hcan1
 946 0084 0C000000 		.word	.LC5
 947              		.cfi_endproc
 948              	.LFE156:
 950              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 951              		.align	1
 952              		.global	HAL_CAN_TxMailbox2CompleteCallback
 953              		.syntax unified
 954              		.thumb
 955              		.thumb_func
 956              		.fpu fpv5-d16
 958              	HAL_CAN_TxMailbox2CompleteCallback:
ARM GAS  /tmp/ccYccQ35.s 			page 29


 959              	.LFB157:
 630:Src/main.c    **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 960              		.loc 1 630 0
 961              		.cfi_startproc
 962              		@ args = 0, pretend = 0, frame = 0
 963              		@ frame_needed = 0, uses_anonymous_args = 0
 964              	.LVL75:
 965 0000 38B5     		push	{r3, r4, r5, lr}
 966              	.LCFI14:
 967              		.cfi_def_cfa_offset 16
 968              		.cfi_offset 3, -16
 969              		.cfi_offset 4, -12
 970              		.cfi_offset 5, -8
 971              		.cfi_offset 14, -4
 972 0002 0546     		mov	r5, r0
 631:Src/main.c    **** 	sprintf(txt, "mb2: %d %d\r\n", can1.fifo.txTailNormal,
 973              		.loc 1 631 0
 974 0004 194A     		ldr	r2, .L71
 975 0006 1A4C     		ldr	r4, .L71+4
 976 0008 92F87230 		ldrb	r3, [r2, #114]	@ zero_extendqisi2
 977 000c 92F87320 		ldrb	r2, [r2, #115]	@ zero_extendqisi2
 978 0010 1849     		ldr	r1, .L71+8
 979 0012 2046     		mov	r0, r4
 980              	.LVL76:
 981 0014 FFF7FEFF 		bl	sprintf
 982              	.LVL77:
 632:Src/main.c    **** 			can1.fifo.txHeadNormal);
 633:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 983              		.loc 1 633 0
 984 0018 2046     		mov	r0, r4
 985 001a FFF7FEFF 		bl	strlen
 986              	.LVL78:
 987 001e 0A23     		movs	r3, #10
 988 0020 82B2     		uxth	r2, r0
 989 0022 2146     		mov	r1, r4
 990 0024 1448     		ldr	r0, .L71+12
 991 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 992              	.LVL79:
 634:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 993              		.loc 1 634 0
 994 002a 0121     		movs	r1, #1
 995 002c 1348     		ldr	r0, .L71+16
 996 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 997              	.LVL80:
 635:Src/main.c    **** 	if (hcan == &hcan1) {
 998              		.loc 1 635 0
 999 0032 134B     		ldr	r3, .L71+20
 1000 0034 9D42     		cmp	r5, r3
 1001 0036 00D0     		beq	.L70
 1002              	.L66:
 1003 0038 38BD     		pop	{r3, r4, r5, pc}
 1004              	.LVL81:
 1005              	.L70:
 636:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 1006              		.loc 1 636 0
 1007 003a 0C48     		ldr	r0, .L71
 1008 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
ARM GAS  /tmp/ccYccQ35.s 			page 30


 1009              	.LVL82:
 1010 0040 58B1     		cbz	r0, .L68
 637:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 1011              		.loc 1 637 0
 1012 0042 0A48     		ldr	r0, .L71
 1013 0044 FFF7FEFF 		bl	CAN_Send_IT
 1014              	.LVL83:
 1015 0048 0028     		cmp	r0, #0
 1016 004a F5D0     		beq	.L66
 638:Src/main.c    **** 				// TODO: implementare errore
 639:Src/main.c    **** 			} else {
 640:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)("high\r\n"),
 1017              		.loc 1 640 0
 1018 004c 0A23     		movs	r3, #10
 1019 004e 0622     		movs	r2, #6
 1020 0050 0C49     		ldr	r1, .L71+24
 1021 0052 0948     		ldr	r0, .L71+12
 1022 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 1023              	.LVL84:
 1024 0058 38BD     		pop	{r3, r4, r5, pc}
 1025              	.LVL85:
 1026              	.L68:
 641:Src/main.c    **** 								  strlen("high\r\n"), 10);
 642:Src/main.c    **** 			}
 643:Src/main.c    **** 		} else if (fifoTxDataCAN_normal_pop(&can1)) {
 1027              		.loc 1 643 0
 1028 005a 0448     		ldr	r0, .L71
 1029 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 1030              	.LVL86:
 1031 0060 0028     		cmp	r0, #0
 1032 0062 E9D0     		beq	.L66
 644:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 645:Src/main.c    **** 			// strlen("Prendo dalla fifo\r\n"), 10);
 646:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 1033              		.loc 1 646 0
 1034 0064 0148     		ldr	r0, .L71
 1035 0066 FFF7FEFF 		bl	CAN_Send_IT
 1036              	.LVL87:
 647:Src/main.c    **** 				// TODO: implementare errore
 648:Src/main.c    **** 			}
 649:Src/main.c    **** 		} else {
 650:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 651:Src/main.c    **** 			// strlen("Fifo vuota\r\n"), 10);
 652:Src/main.c    **** 		}
 653:Src/main.c    **** 	}
 654:Src/main.c    **** }
 1037              		.loc 1 654 0
 1038 006a E5E7     		b	.L66
 1039              	.L72:
 1040              		.align	2
 1041              	.L71:
 1042 006c 00000000 		.word	can1
 1043 0070 00000000 		.word	txt
 1044 0074 00000000 		.word	.LC7
 1045 0078 00000000 		.word	huart3
 1046 007c 00040240 		.word	1073873920
 1047 0080 00000000 		.word	hcan1
ARM GAS  /tmp/ccYccQ35.s 			page 31


 1048 0084 0C000000 		.word	.LC5
 1049              		.cfi_endproc
 1050              	.LFE157:
 1052              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1053              		.align	1
 1054              		.global	HAL_CAN_ErrorCallback
 1055              		.syntax unified
 1056              		.thumb
 1057              		.thumb_func
 1058              		.fpu fpv5-d16
 1060              	HAL_CAN_ErrorCallback:
 1061              	.LFB158:
 655:Src/main.c    **** void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 1062              		.loc 1 655 0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 0
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 1066              	.LVL88:
 1067 0000 38B5     		push	{r3, r4, r5, lr}
 1068              	.LCFI15:
 1069              		.cfi_def_cfa_offset 16
 1070              		.cfi_offset 3, -16
 1071              		.cfi_offset 4, -12
 1072              		.cfi_offset 5, -8
 1073              		.cfi_offset 14, -4
 1074 0002 0546     		mov	r5, r0
 656:Src/main.c    **** 	sprintf(txt, "--- Errore ---: %d\r\n", (int)hcan->ErrorCode);
 1075              		.loc 1 656 0
 1076 0004 426A     		ldr	r2, [r0, #36]
 1077 0006 0B4C     		ldr	r4, .L77
 1078 0008 0B49     		ldr	r1, .L77+4
 1079 000a 2046     		mov	r0, r4
 1080              	.LVL89:
 1081 000c FFF7FEFF 		bl	sprintf
 1082              	.LVL90:
 657:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 1083              		.loc 1 657 0
 1084 0010 2046     		mov	r0, r4
 1085 0012 FFF7FEFF 		bl	strlen
 1086              	.LVL91:
 1087 0016 0A23     		movs	r3, #10
 1088 0018 82B2     		uxth	r2, r0
 1089 001a 2146     		mov	r1, r4
 1090 001c 0748     		ldr	r0, .L77+8
 1091 001e FFF7FEFF 		bl	HAL_UART_Transmit
 1092              	.LVL92:
 658:Src/main.c    **** 	if (hcan == &hcan1) {
 1093              		.loc 1 658 0
 1094 0022 074B     		ldr	r3, .L77+12
 1095 0024 9D42     		cmp	r5, r3
 1096 0026 00D0     		beq	.L76
 1097              	.L73:
 1098 0028 38BD     		pop	{r3, r4, r5, pc}
 1099              	.LVL93:
 1100              	.L76:
 659:Src/main.c    **** 		CAN_Send_Bck(&can1);
 1101              		.loc 1 659 0
ARM GAS  /tmp/ccYccQ35.s 			page 32


 1102 002a 0648     		ldr	r0, .L77+16
 1103 002c FFF7FEFF 		bl	CAN_Send_Bck
 1104              	.LVL94:
 660:Src/main.c    **** 	}
 661:Src/main.c    **** }
 1105              		.loc 1 661 0
 1106 0030 FAE7     		b	.L73
 1107              	.L78:
 1108 0032 00BF     		.align	2
 1109              	.L77:
 1110 0034 00000000 		.word	txt
 1111 0038 00000000 		.word	.LC8
 1112 003c 00000000 		.word	huart3
 1113 0040 00000000 		.word	hcan1
 1114 0044 00000000 		.word	can1
 1115              		.cfi_endproc
 1116              	.LFE158:
 1118              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1119              		.align	1
 1120              		.global	HAL_UART_RxCpltCallback
 1121              		.syntax unified
 1122              		.thumb
 1123              		.thumb_func
 1124              		.fpu fpv5-d16
 1126              	HAL_UART_RxCpltCallback:
 1127              	.LFB159:
 662:Src/main.c    **** 
 663:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 1128              		.loc 1 663 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 0
 1131              		@ frame_needed = 0, uses_anonymous_args = 0
 1132              	.LVL95:
 1133 0000 08B5     		push	{r3, lr}
 1134              	.LCFI16:
 1135              		.cfi_def_cfa_offset 8
 1136              		.cfi_offset 3, -8
 1137              		.cfi_offset 14, -4
 664:Src/main.c    **** 	if (huart == &huart3) {
 1138              		.loc 1 664 0
 1139 0002 174B     		ldr	r3, .L87
 1140 0004 8342     		cmp	r3, r0
 1141 0006 00D0     		beq	.L85
 1142              	.LVL96:
 1143              	.L79:
 1144 0008 08BD     		pop	{r3, pc}
 1145              	.LVL97:
 1146              	.L85:
 665:Src/main.c    **** 		if ((debug_rx[debug_rx_count] == '\r') |
 1147              		.loc 1 665 0
 1148 000a 164B     		ldr	r3, .L87+4
 1149 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1150 000e 164B     		ldr	r3, .L87+8
 1151 0010 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1152 0012 0A2B     		cmp	r3, #10
 1153 0014 18BF     		it	ne
 1154 0016 0D2B     		cmpne	r3, #13
ARM GAS  /tmp/ccYccQ35.s 			page 33


 1155 0018 10D1     		bne	.L81
 666:Src/main.c    **** 			(debug_rx[debug_rx_count] == '\n')) {
 667:Src/main.c    **** 			debug_msg_arrived = 1;		   // set flag
 1156              		.loc 1 667 0
 1157 001a 0122     		movs	r2, #1
 1158 001c 134B     		ldr	r3, .L87+12
 1159 001e 1A70     		strb	r2, [r3]
 668:Src/main.c    **** 			debug_rx[debug_rx_count] = 0;  // set end of the string
 1160              		.loc 1 668 0
 1161 0020 0023     		movs	r3, #0
 1162 0022 114A     		ldr	r2, .L87+8
 1163 0024 5354     		strb	r3, [r2, r1]
 669:Src/main.c    **** 			debug_rx_count = 0;			   // reset counter
 1164              		.loc 1 669 0
 1165 0026 0F4A     		ldr	r2, .L87+4
 1166 0028 1370     		strb	r3, [r2]
 1167              	.LVL98:
 1168              	.L82:
 670:Src/main.c    **** 		} else {
 671:Src/main.c    **** 			if (debug_rx_count == MAX_DEBUG_RX_L) {
 672:Src/main.c    **** 				// overflow
 673:Src/main.c    **** 				debug_rx_count = 0;  // reset counter for overflow
 674:Src/main.c    **** 			} else {
 675:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)&debug_rx[debug_rx_count],1, 10);  // retransmit char
 676:Src/main.c    **** 				debug_rx_count++;
 677:Src/main.c    **** 			}
 678:Src/main.c    **** 		}
 679:Src/main.c    **** 		HAL_UART_Receive_IT(&huart3, (uint8_t *)&debug_rx[debug_rx_count], 1);  // activate rx interrupt 
 1169              		.loc 1 679 0
 1170 002a 0E4B     		ldr	r3, .L87+4
 1171 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1172 002e 0122     		movs	r2, #1
 1173 0030 0D49     		ldr	r1, .L87+8
 1174 0032 1944     		add	r1, r1, r3
 1175 0034 0A48     		ldr	r0, .L87
 1176 0036 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1177              	.LVL99:
 680:Src/main.c    **** 	}
 681:Src/main.c    **** }
 1178              		.loc 1 681 0
 1179 003a E5E7     		b	.L79
 1180              	.LVL100:
 1181              	.L81:
 671:Src/main.c    **** 				// overflow
 1182              		.loc 1 671 0
 1183 003c 1429     		cmp	r1, #20
 1184 003e 0BD0     		beq	.L86
 675:Src/main.c    **** 				debug_rx_count++;
 1185              		.loc 1 675 0
 1186 0040 0A23     		movs	r3, #10
 1187 0042 0122     		movs	r2, #1
 1188 0044 0848     		ldr	r0, .L87+8
 1189              	.LVL101:
 1190 0046 0144     		add	r1, r1, r0
 1191 0048 0548     		ldr	r0, .L87
 1192 004a FFF7FEFF 		bl	HAL_UART_Transmit
 1193              	.LVL102:
ARM GAS  /tmp/ccYccQ35.s 			page 34


 676:Src/main.c    **** 			}
 1194              		.loc 1 676 0
 1195 004e 054A     		ldr	r2, .L87+4
 1196 0050 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1197 0052 0133     		adds	r3, r3, #1
 1198 0054 1370     		strb	r3, [r2]
 1199 0056 E8E7     		b	.L82
 1200              	.LVL103:
 1201              	.L86:
 673:Src/main.c    **** 			} else {
 1202              		.loc 1 673 0
 1203 0058 0022     		movs	r2, #0
 1204 005a 024B     		ldr	r3, .L87+4
 1205 005c 1A70     		strb	r2, [r3]
 1206 005e E4E7     		b	.L82
 1207              	.L88:
 1208              		.align	2
 1209              	.L87:
 1210 0060 00000000 		.word	huart3
 1211 0064 00000000 		.word	debug_rx_count
 1212 0068 00000000 		.word	debug_rx
 1213 006c 00000000 		.word	debug_msg_arrived
 1214              		.cfi_endproc
 1215              	.LFE159:
 1217              		.section	.text.Error_Handler,"ax",%progbits
 1218              		.align	1
 1219              		.global	Error_Handler
 1220              		.syntax unified
 1221              		.thumb
 1222              		.thumb_func
 1223              		.fpu fpv5-d16
 1225              	Error_Handler:
 1226              	.LFB160:
 682:Src/main.c    **** /* USER CODE END 4 */
 683:Src/main.c    **** 
 684:Src/main.c    **** /**
 685:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 686:Src/main.c    ****   * @retval None
 687:Src/main.c    ****   */
 688:Src/main.c    **** void Error_Handler(void)
 689:Src/main.c    **** {
 1227              		.loc 1 689 0
 1228              		.cfi_startproc
 1229              		@ args = 0, pretend = 0, frame = 0
 1230              		@ frame_needed = 0, uses_anonymous_args = 0
 1231 0000 10B5     		push	{r4, lr}
 1232              	.LCFI17:
 1233              		.cfi_def_cfa_offset 8
 1234              		.cfi_offset 4, -8
 1235              		.cfi_offset 14, -4
 690:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 691:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state
 692:Src/main.c    **** 	 */
 693:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 1236              		.loc 1 693 0
 1237 0002 094C     		ldr	r4, .L91
 1238 0004 8021     		movs	r1, #128
ARM GAS  /tmp/ccYccQ35.s 			page 35


 1239 0006 2046     		mov	r0, r4
 1240 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1241              	.LVL104:
 694:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 1242              		.loc 1 694 0
 1243 000c 0121     		movs	r1, #1
 1244 000e 2046     		mov	r0, r4
 1245 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1246              	.LVL105:
 695:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 1247              		.loc 1 695 0
 1248 0014 4FF48041 		mov	r1, #16384
 1249 0018 2046     		mov	r0, r4
 1250 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1251              	.LVL106:
 696:Src/main.c    **** 
 697:Src/main.c    **** 	HAL_Delay(100);
 1252              		.loc 1 697 0
 1253 001e 6420     		movs	r0, #100
 1254 0020 FFF7FEFF 		bl	HAL_Delay
 1255              	.LVL107:
 1256 0024 10BD     		pop	{r4, pc}
 1257              	.L92:
 1258 0026 00BF     		.align	2
 1259              	.L91:
 1260 0028 00040240 		.word	1073873920
 1261              		.cfi_endproc
 1262              	.LFE160:
 1264              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1265              		.align	1
 1266              		.syntax unified
 1267              		.thumb
 1268              		.thumb_func
 1269              		.fpu fpv5-d16
 1271              	MX_USART3_UART_Init:
 1272              	.LFB148:
 389:Src/main.c    **** 
 1273              		.loc 1 389 0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277 0000 08B5     		push	{r3, lr}
 1278              	.LCFI18:
 1279              		.cfi_def_cfa_offset 8
 1280              		.cfi_offset 3, -8
 1281              		.cfi_offset 14, -4
 398:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 1282              		.loc 1 398 0
 1283 0002 0B48     		ldr	r0, .L97
 1284 0004 0B4B     		ldr	r3, .L97+4
 1285 0006 0360     		str	r3, [r0]
 399:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1286              		.loc 1 399 0
 1287 0008 0B4B     		ldr	r3, .L97+8
 1288 000a 4360     		str	r3, [r0, #4]
 400:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1289              		.loc 1 400 0
ARM GAS  /tmp/ccYccQ35.s 			page 36


 1290 000c 0023     		movs	r3, #0
 1291 000e 8360     		str	r3, [r0, #8]
 401:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 1292              		.loc 1 401 0
 1293 0010 C360     		str	r3, [r0, #12]
 402:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1294              		.loc 1 402 0
 1295 0012 0361     		str	r3, [r0, #16]
 403:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1296              		.loc 1 403 0
 1297 0014 0C22     		movs	r2, #12
 1298 0016 4261     		str	r2, [r0, #20]
 404:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1299              		.loc 1 404 0
 1300 0018 8361     		str	r3, [r0, #24]
 405:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1301              		.loc 1 405 0
 1302 001a C361     		str	r3, [r0, #28]
 406:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1303              		.loc 1 406 0
 1304 001c 0362     		str	r3, [r0, #32]
 407:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1305              		.loc 1 407 0
 1306 001e 4362     		str	r3, [r0, #36]
 408:Src/main.c    ****   {
 1307              		.loc 1 408 0
 1308 0020 FFF7FEFF 		bl	HAL_UART_Init
 1309              	.LVL108:
 1310 0024 00B9     		cbnz	r0, .L96
 1311              	.L93:
 1312 0026 08BD     		pop	{r3, pc}
 1313              	.L96:
 410:Src/main.c    ****   }
 1314              		.loc 1 410 0
 1315 0028 FFF7FEFF 		bl	Error_Handler
 1316              	.LVL109:
 416:Src/main.c    **** 
 1317              		.loc 1 416 0
 1318 002c FBE7     		b	.L93
 1319              	.L98:
 1320 002e 00BF     		.align	2
 1321              	.L97:
 1322 0030 00000000 		.word	huart3
 1323 0034 00480040 		.word	1073760256
 1324 0038 80841E00 		.word	2000000
 1325              		.cfi_endproc
 1326              	.LFE148:
 1328              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1329              		.align	1
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.fpu fpv5-d16
 1335              	MX_CAN1_Init:
 1336              	.LFB145:
 279:Src/main.c    **** 
 1337              		.loc 1 279 0
ARM GAS  /tmp/ccYccQ35.s 			page 37


 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 0
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
 1341 0000 08B5     		push	{r3, lr}
 1342              	.LCFI19:
 1343              		.cfi_def_cfa_offset 8
 1344              		.cfi_offset 3, -8
 1345              		.cfi_offset 14, -4
 288:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 1346              		.loc 1 288 0
 1347 0002 0E48     		ldr	r0, .L103
 1348 0004 0E4B     		ldr	r3, .L103+4
 1349 0006 0360     		str	r3, [r0]
 289:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1350              		.loc 1 289 0
 1351 0008 0323     		movs	r3, #3
 1352 000a 4360     		str	r3, [r0, #4]
 290:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1353              		.loc 1 290 0
 1354 000c 0023     		movs	r3, #0
 1355 000e 8360     		str	r3, [r0, #8]
 291:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 1356              		.loc 1 291 0
 1357 0010 C360     		str	r3, [r0, #12]
 292:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 1358              		.loc 1 292 0
 1359 0012 4FF46022 		mov	r2, #917504
 1360 0016 0261     		str	r2, [r0, #16]
 293:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1361              		.loc 1 293 0
 1362 0018 4FF48012 		mov	r2, #1048576
 1363 001c 4261     		str	r2, [r0, #20]
 294:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 1364              		.loc 1 294 0
 1365 001e 0376     		strb	r3, [r0, #24]
 295:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 1366              		.loc 1 295 0
 1367 0020 4376     		strb	r3, [r0, #25]
 296:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 1368              		.loc 1 296 0
 1369 0022 0122     		movs	r2, #1
 1370 0024 8276     		strb	r2, [r0, #26]
 297:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1371              		.loc 1 297 0
 1372 0026 C276     		strb	r2, [r0, #27]
 298:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 1373              		.loc 1 298 0
 1374 0028 0377     		strb	r3, [r0, #28]
 299:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1375              		.loc 1 299 0
 1376 002a 4377     		strb	r3, [r0, #29]
 300:Src/main.c    ****   {
 1377              		.loc 1 300 0
 1378 002c FFF7FEFF 		bl	HAL_CAN_Init
 1379              	.LVL110:
 1380 0030 00B9     		cbnz	r0, .L102
 1381              	.L99:
ARM GAS  /tmp/ccYccQ35.s 			page 38


 1382 0032 08BD     		pop	{r3, pc}
 1383              	.L102:
 302:Src/main.c    ****   }
 1384              		.loc 1 302 0
 1385 0034 FFF7FEFF 		bl	Error_Handler
 1386              	.LVL111:
 308:Src/main.c    **** 
 1387              		.loc 1 308 0
 1388 0038 FBE7     		b	.L99
 1389              	.L104:
 1390 003a 00BF     		.align	2
 1391              	.L103:
 1392 003c 00000000 		.word	hcan1
 1393 0040 00640040 		.word	1073767424
 1394              		.cfi_endproc
 1395              	.LFE145:
 1397              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1398              		.align	1
 1399              		.syntax unified
 1400              		.thumb
 1401              		.thumb_func
 1402              		.fpu fpv5-d16
 1404              	MX_TIM2_Init:
 1405              	.LFB147:
 344:Src/main.c    **** 
 1406              		.loc 1 344 0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 32
 1409              		@ frame_needed = 0, uses_anonymous_args = 0
 1410 0000 00B5     		push	{lr}
 1411              	.LCFI20:
 1412              		.cfi_def_cfa_offset 4
 1413              		.cfi_offset 14, -4
 1414 0002 89B0     		sub	sp, sp, #36
 1415              	.LCFI21:
 1416              		.cfi_def_cfa_offset 40
 350:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1417              		.loc 1 350 0
 1418 0004 0023     		movs	r3, #0
 1419 0006 0493     		str	r3, [sp, #16]
 1420 0008 0593     		str	r3, [sp, #20]
 1421 000a 0693     		str	r3, [sp, #24]
 1422 000c 0793     		str	r3, [sp, #28]
 351:Src/main.c    **** 
 1423              		.loc 1 351 0
 1424 000e 0193     		str	r3, [sp, #4]
 1425 0010 0293     		str	r3, [sp, #8]
 1426 0012 0393     		str	r3, [sp, #12]
 356:Src/main.c    ****   htim2.Init.Prescaler = 108;
 1427              		.loc 1 356 0
 1428 0014 1548     		ldr	r0, .L113
 1429 0016 4FF08042 		mov	r2, #1073741824
 1430 001a 0260     		str	r2, [r0]
 357:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1431              		.loc 1 357 0
 1432 001c 6C22     		movs	r2, #108
 1433 001e 4260     		str	r2, [r0, #4]
ARM GAS  /tmp/ccYccQ35.s 			page 39


 358:Src/main.c    ****   htim2.Init.Period = 1000;
 1434              		.loc 1 358 0
 1435 0020 8360     		str	r3, [r0, #8]
 359:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1436              		.loc 1 359 0
 1437 0022 4FF47A72 		mov	r2, #1000
 1438 0026 C260     		str	r2, [r0, #12]
 360:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1439              		.loc 1 360 0
 1440 0028 0361     		str	r3, [r0, #16]
 361:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1441              		.loc 1 361 0
 1442 002a 8361     		str	r3, [r0, #24]
 362:Src/main.c    ****   {
 1443              		.loc 1 362 0
 1444 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1445              	.LVL112:
 1446 0030 98B9     		cbnz	r0, .L110
 1447              	.L106:
 366:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1448              		.loc 1 366 0
 1449 0032 08A9     		add	r1, sp, #32
 1450 0034 4FF48053 		mov	r3, #4096
 1451 0038 41F8103D 		str	r3, [r1, #-16]!
 367:Src/main.c    ****   {
 1452              		.loc 1 367 0
 1453 003c 0B48     		ldr	r0, .L113
 1454 003e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1455              	.LVL113:
 1456 0042 68B9     		cbnz	r0, .L111
 1457              	.L107:
 371:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1458              		.loc 1 371 0
 1459 0044 0023     		movs	r3, #0
 1460 0046 0193     		str	r3, [sp, #4]
 372:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1461              		.loc 1 372 0
 1462 0048 0393     		str	r3, [sp, #12]
 373:Src/main.c    ****   {
 1463              		.loc 1 373 0
 1464 004a 01A9     		add	r1, sp, #4
 1465 004c 0748     		ldr	r0, .L113
 1466 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1467              	.LVL114:
 1468 0052 40B9     		cbnz	r0, .L112
 1469              	.L105:
 381:Src/main.c    **** 
 1470              		.loc 1 381 0
 1471 0054 09B0     		add	sp, sp, #36
 1472              	.LCFI22:
 1473              		.cfi_remember_state
 1474              		.cfi_def_cfa_offset 4
 1475              		@ sp needed
 1476 0056 5DF804FB 		ldr	pc, [sp], #4
 1477              	.L110:
 1478              	.LCFI23:
 1479              		.cfi_restore_state
ARM GAS  /tmp/ccYccQ35.s 			page 40


 364:Src/main.c    ****   }
 1480              		.loc 1 364 0
 1481 005a FFF7FEFF 		bl	Error_Handler
 1482              	.LVL115:
 1483 005e E8E7     		b	.L106
 1484              	.L111:
 369:Src/main.c    ****   }
 1485              		.loc 1 369 0
 1486 0060 FFF7FEFF 		bl	Error_Handler
 1487              	.LVL116:
 1488 0064 EEE7     		b	.L107
 1489              	.L112:
 375:Src/main.c    ****   }
 1490              		.loc 1 375 0
 1491 0066 FFF7FEFF 		bl	Error_Handler
 1492              	.LVL117:
 381:Src/main.c    **** 
 1493              		.loc 1 381 0
 1494 006a F3E7     		b	.L105
 1495              	.L114:
 1496              		.align	2
 1497              	.L113:
 1498 006c 00000000 		.word	htim2
 1499              		.cfi_endproc
 1500              	.LFE147:
 1502              		.section	.text.SystemClock_Config,"ax",%progbits
 1503              		.align	1
 1504              		.global	SystemClock_Config
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu fpv5-d16
 1510              	SystemClock_Config:
 1511              	.LFB143:
 190:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1512              		.loc 1 190 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 224
 1515              		@ frame_needed = 0, uses_anonymous_args = 0
 1516 0000 10B5     		push	{r4, lr}
 1517              	.LCFI24:
 1518              		.cfi_def_cfa_offset 8
 1519              		.cfi_offset 4, -8
 1520              		.cfi_offset 14, -4
 1521 0002 B8B0     		sub	sp, sp, #224
 1522              	.LCFI25:
 1523              		.cfi_def_cfa_offset 232
 191:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1524              		.loc 1 191 0
 1525 0004 3422     		movs	r2, #52
 1526 0006 0021     		movs	r1, #0
 1527 0008 2BA8     		add	r0, sp, #172
 1528 000a FFF7FEFF 		bl	memset
 1529              	.LVL118:
 192:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1530              		.loc 1 192 0
 1531 000e 0024     		movs	r4, #0
ARM GAS  /tmp/ccYccQ35.s 			page 41


 1532 0010 2694     		str	r4, [sp, #152]
 1533 0012 2794     		str	r4, [sp, #156]
 1534 0014 2894     		str	r4, [sp, #160]
 1535 0016 2994     		str	r4, [sp, #164]
 1536 0018 2A94     		str	r4, [sp, #168]
 193:Src/main.c    **** 
 1537              		.loc 1 193 0
 1538 001a 9022     		movs	r2, #144
 1539 001c 2146     		mov	r1, r4
 1540 001e 02A8     		add	r0, sp, #8
 1541 0020 FFF7FEFF 		bl	memset
 1542              	.LVL119:
 1543              	.LBB7:
 197:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1544              		.loc 1 197 0
 1545 0024 294B     		ldr	r3, .L125
 1546 0026 1A6C     		ldr	r2, [r3, #64]
 1547 0028 42F08052 		orr	r2, r2, #268435456
 1548 002c 1A64     		str	r2, [r3, #64]
 1549 002e 1B6C     		ldr	r3, [r3, #64]
 1550 0030 03F08053 		and	r3, r3, #268435456
 1551 0034 0093     		str	r3, [sp]
 1552 0036 009B     		ldr	r3, [sp]
 1553              	.LBE7:
 1554              	.LBB8:
 198:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1555              		.loc 1 198 0
 1556 0038 254B     		ldr	r3, .L125+4
 1557 003a 1A68     		ldr	r2, [r3]
 1558 003c 42F44042 		orr	r2, r2, #49152
 1559 0040 1A60     		str	r2, [r3]
 1560 0042 1B68     		ldr	r3, [r3]
 1561 0044 03F44043 		and	r3, r3, #49152
 1562 0048 0193     		str	r3, [sp, #4]
 1563 004a 019B     		ldr	r3, [sp, #4]
 1564              	.LBE8:
 201:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1565              		.loc 1 201 0
 1566 004c 0223     		movs	r3, #2
 1567 004e 2B93     		str	r3, [sp, #172]
 202:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1568              		.loc 1 202 0
 1569 0050 0122     		movs	r2, #1
 1570 0052 2E92     		str	r2, [sp, #184]
 203:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1571              		.loc 1 203 0
 1572 0054 1022     		movs	r2, #16
 1573 0056 2F92     		str	r2, [sp, #188]
 204:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1574              		.loc 1 204 0
 1575 0058 3193     		str	r3, [sp, #196]
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1576              		.loc 1 205 0
 1577 005a 3294     		str	r4, [sp, #200]
 206:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 1578              		.loc 1 206 0
 1579 005c 0822     		movs	r2, #8
ARM GAS  /tmp/ccYccQ35.s 			page 42


 1580 005e 3392     		str	r2, [sp, #204]
 207:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1581              		.loc 1 207 0
 1582 0060 D822     		movs	r2, #216
 1583 0062 3492     		str	r2, [sp, #208]
 208:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 1584              		.loc 1 208 0
 1585 0064 3593     		str	r3, [sp, #212]
 209:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1586              		.loc 1 209 0
 1587 0066 0923     		movs	r3, #9
 1588 0068 3693     		str	r3, [sp, #216]
 210:Src/main.c    ****   {
 1589              		.loc 1 210 0
 1590 006a 2BA8     		add	r0, sp, #172
 1591 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1592              	.LVL120:
 1593 0070 F8B9     		cbnz	r0, .L121
 1594              	.L116:
 216:Src/main.c    ****   {
 1595              		.loc 1 216 0
 1596 0072 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1597              	.LVL121:
 1598 0076 F8B9     		cbnz	r0, .L122
 1599              	.L117:
 222:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1600              		.loc 1 222 0
 1601 0078 0F23     		movs	r3, #15
 1602 007a 2693     		str	r3, [sp, #152]
 224:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1603              		.loc 1 224 0
 1604 007c 0223     		movs	r3, #2
 1605 007e 2793     		str	r3, [sp, #156]
 225:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1606              		.loc 1 225 0
 1607 0080 0023     		movs	r3, #0
 1608 0082 2893     		str	r3, [sp, #160]
 226:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1609              		.loc 1 226 0
 1610 0084 4FF4A053 		mov	r3, #5120
 1611 0088 2993     		str	r3, [sp, #164]
 227:Src/main.c    **** 
 1612              		.loc 1 227 0
 1613 008a 4FF48053 		mov	r3, #4096
 1614 008e 2A93     		str	r3, [sp, #168]
 229:Src/main.c    ****   {
 1615              		.loc 1 229 0
 1616 0090 0721     		movs	r1, #7
 1617 0092 26A8     		add	r0, sp, #152
 1618 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1619              	.LVL122:
 1620 0098 88B9     		cbnz	r0, .L123
 1621              	.L118:
 233:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 1622              		.loc 1 233 0
 1623 009a 0E4B     		ldr	r3, .L125+8
 1624 009c 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccYccQ35.s 			page 43


 235:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1625              		.loc 1 235 0
 1626 009e 0023     		movs	r3, #0
 1627 00a0 1593     		str	r3, [sp, #84]
 236:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 1628              		.loc 1 236 0
 1629 00a2 2193     		str	r3, [sp, #132]
 237:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1630              		.loc 1 237 0
 1631 00a4 2293     		str	r3, [sp, #136]
 238:Src/main.c    ****   {
 1632              		.loc 1 238 0
 1633 00a6 02A8     		add	r0, sp, #8
 1634 00a8 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1635              	.LVL123:
 1636 00ac 50B9     		cbnz	r0, .L124
 1637              	.L115:
 242:Src/main.c    **** 
 1638              		.loc 1 242 0
 1639 00ae 38B0     		add	sp, sp, #224
 1640              	.LCFI26:
 1641              		.cfi_remember_state
 1642              		.cfi_def_cfa_offset 8
 1643              		@ sp needed
 1644 00b0 10BD     		pop	{r4, pc}
 1645              	.L121:
 1646              	.LCFI27:
 1647              		.cfi_restore_state
 212:Src/main.c    ****   }
 1648              		.loc 1 212 0
 1649 00b2 FFF7FEFF 		bl	Error_Handler
 1650              	.LVL124:
 1651 00b6 DCE7     		b	.L116
 1652              	.L122:
 218:Src/main.c    ****   }
 1653              		.loc 1 218 0
 1654 00b8 FFF7FEFF 		bl	Error_Handler
 1655              	.LVL125:
 1656 00bc DCE7     		b	.L117
 1657              	.L123:
 231:Src/main.c    ****   }
 1658              		.loc 1 231 0
 1659 00be FFF7FEFF 		bl	Error_Handler
 1660              	.LVL126:
 1661 00c2 EAE7     		b	.L118
 1662              	.L124:
 240:Src/main.c    ****   }
 1663              		.loc 1 240 0
 1664 00c4 FFF7FEFF 		bl	Error_Handler
 1665              	.LVL127:
 242:Src/main.c    **** 
 1666              		.loc 1 242 0
 1667 00c8 F1E7     		b	.L115
 1668              	.L126:
 1669 00ca 00BF     		.align	2
 1670              	.L125:
 1671 00cc 00380240 		.word	1073887232
ARM GAS  /tmp/ccYccQ35.s 			page 44


 1672 00d0 00700040 		.word	1073770496
 1673 00d4 0001A000 		.word	10486016
 1674              		.cfi_endproc
 1675              	.LFE143:
 1677              		.section	.text.main,"ax",%progbits
 1678              		.align	1
 1679              		.global	main
 1680              		.syntax unified
 1681              		.thumb
 1682              		.thumb_func
 1683              		.fpu fpv5-d16
 1685              	main:
 1686              	.LFB142:
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1687              		.loc 1 91 0
 1688              		.cfi_startproc
 1689              		@ Volatile: function does not return.
 1690              		@ args = 0, pretend = 0, frame = 0
 1691              		@ frame_needed = 0, uses_anonymous_args = 0
 1692 0000 08B5     		push	{r3, lr}
 1693              	.LCFI28:
 1694              		.cfi_def_cfa_offset 8
 1695              		.cfi_offset 3, -8
 1696              		.cfi_offset 14, -4
 100:Src/main.c    **** 
 1697              		.loc 1 100 0
 1698 0002 FFF7FEFF 		bl	HAL_Init
 1699              	.LVL128:
 107:Src/main.c    **** 
 1700              		.loc 1 107 0
 1701 0006 FFF7FEFF 		bl	SystemClock_Config
 1702              	.LVL129:
 114:Src/main.c    ****   MX_SDMMC1_SD_Init();
 1703              		.loc 1 114 0
 1704 000a FFF7FEFF 		bl	MX_GPIO_Init
 1705              	.LVL130:
 115:Src/main.c    ****   MX_USART3_UART_Init();
 1706              		.loc 1 115 0
 1707 000e FFF7FEFF 		bl	MX_SDMMC1_SD_Init
 1708              	.LVL131:
 116:Src/main.c    ****   MX_FATFS_Init();
 1709              		.loc 1 116 0
 1710 0012 FFF7FEFF 		bl	MX_USART3_UART_Init
 1711              	.LVL132:
 117:Src/main.c    ****   MX_CAN1_Init();
 1712              		.loc 1 117 0
 1713 0016 FFF7FEFF 		bl	MX_FATFS_Init
 1714              	.LVL133:
 118:Src/main.c    ****   MX_TIM2_Init();
 1715              		.loc 1 118 0
 1716 001a FFF7FEFF 		bl	MX_CAN1_Init
 1717              	.LVL134:
 119:Src/main.c    **** 
 1718              		.loc 1 119 0
 1719 001e FFF7FEFF 		bl	MX_TIM2_Init
 1720              	.LVL135:
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
ARM GAS  /tmp/ccYccQ35.s 			page 45


 1721              		.loc 1 122 0
 1722 0022 FFF7FEFF 		bl	MX_NVIC_Init
 1723              	.LVL136:
 124:Src/main.c    **** 
 1724              		.loc 1 124 0
 1725 0026 2848     		ldr	r0, .L137
 1726 0028 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1727              	.LVL137:
 126:Src/main.c    **** 	can1.tx_interrupt = CAN1_TX_IRQn;
 1728              		.loc 1 126 0
 1729 002c 274B     		ldr	r3, .L137+4
 1730 002e 1422     		movs	r2, #20
 1731 0030 83F8982D 		strb	r2, [r3, #3480]
 127:Src/main.c    **** 	can1.hcan = &hcan1;
 1732              		.loc 1 127 0
 1733 0034 1322     		movs	r2, #19
 1734 0036 83F8992D 		strb	r2, [r3, #3481]
 128:Src/main.c    **** 
 1735              		.loc 1 128 0
 1736 003a 254A     		ldr	r2, .L137+8
 1737 003c 1A64     		str	r2, [r3, #64]
 130:Src/main.c    **** 
 1738              		.loc 1 130 0
 1739 003e FFF7FEFF 		bl	can_init
 1740              	.LVL138:
 132:Src/main.c    **** 						1);  // activate rx interrupt for debug
 1741              		.loc 1 132 0
 1742 0042 244B     		ldr	r3, .L137+12
 1743 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1744 0046 0122     		movs	r2, #1
 1745 0048 2349     		ldr	r1, .L137+16
 1746 004a 1944     		add	r1, r1, r3
 1747 004c 2348     		ldr	r0, .L137+20
 1748 004e FFF7FEFF 		bl	HAL_UART_Receive_IT
 1749              	.LVL139:
 135:Src/main.c    **** 
 1750              		.loc 1 135 0
 1751 0052 0021     		movs	r1, #0
 1752 0054 224B     		ldr	r3, .L137+24
 1753 0056 1970     		strb	r1, [r3]
 137:Src/main.c    **** 	accel.pot1_min_val = 0;
 1754              		.loc 1 137 0
 1755 0058 224B     		ldr	r3, .L137+28
 1756 005a 4FF48052 		mov	r2, #4096
 1757 005e 1A81     		strh	r2, [r3, #8]	@ movhi
 138:Src/main.c    **** 	accel.pot1_range = accel.pot1_max_val - accel.pot1_min_val;
 1758              		.loc 1 138 0
 1759 0060 D981     		strh	r1, [r3, #14]	@ movhi
 139:Src/main.c    **** 	accel.pot2_max_val = 4096;
 1760              		.loc 1 139 0
 1761 0062 9A81     		strh	r2, [r3, #12]	@ movhi
 140:Src/main.c    **** 	accel.pot2_min_val = 0;
 1762              		.loc 1 140 0
 1763 0064 5A81     		strh	r2, [r3, #10]	@ movhi
 141:Src/main.c    **** 	accel.pot2_range = accel.pot2_max_val - accel.pot2_min_val;
 1764              		.loc 1 141 0
 1765 0066 1982     		strh	r1, [r3, #16]	@ movhi
ARM GAS  /tmp/ccYccQ35.s 			page 46


 142:Src/main.c    **** 
 1766              		.loc 1 142 0
 1767 0068 5A82     		strh	r2, [r3, #18]	@ movhi
 144:Src/main.c    **** 
 1768              		.loc 1 144 0
 1769 006a FFF7FEFF 		bl	init_sd
 1770              	.LVL140:
 1771 006e 01E0     		b	.L128
 1772              	.L134:
 170:Src/main.c    **** 		} else if (current_state == STATE_IDLE) {
 1773              		.loc 1 170 0
 1774 0070 FFF7FEFF 		bl	init
 1775              	.LVL141:
 1776              	.L128:
 153:Src/main.c    **** 		can1.dataTx[1] = 0;
 1777              		.loc 1 153 0
 1778 0074 154A     		ldr	r2, .L137+4
 1779 0076 0023     		movs	r3, #0
 1780 0078 1373     		strb	r3, [r2, #12]
 154:Src/main.c    **** 		can1.dataTx[2] = 0;
 1781              		.loc 1 154 0
 1782 007a 5373     		strb	r3, [r2, #13]
 155:Src/main.c    **** 		can1.dataTx[3] = 0;
 1783              		.loc 1 155 0
 1784 007c 9373     		strb	r3, [r2, #14]
 156:Src/main.c    **** 		can1.dataTx[4] = counter >> 24;
 1785              		.loc 1 156 0
 1786 007e D373     		strb	r3, [r2, #15]
 157:Src/main.c    **** 		can1.dataTx[5] = counter >> 16;
 1787              		.loc 1 157 0
 1788 0080 194B     		ldr	r3, .L137+32
 1789 0082 1B68     		ldr	r3, [r3]
 1790 0084 1916     		asrs	r1, r3, #24
 1791 0086 1174     		strb	r1, [r2, #16]
 158:Src/main.c    **** 		can1.dataTx[6] = counter >> 8;
 1792              		.loc 1 158 0
 1793 0088 1914     		asrs	r1, r3, #16
 1794 008a 5174     		strb	r1, [r2, #17]
 159:Src/main.c    **** 		can1.dataTx[7] = counter % 256;
 1795              		.loc 1 159 0
 1796 008c 1912     		asrs	r1, r3, #8
 1797 008e 9174     		strb	r1, [r2, #18]
 160:Src/main.c    **** 
 1798              		.loc 1 160 0
 1799 0090 5942     		rsbs	r1, r3, #0
 1800 0092 DBB2     		uxtb	r3, r3
 1801 0094 C9B2     		uxtb	r1, r1
 1802 0096 58BF     		it	pl
 1803 0098 4B42     		rsbpl	r3, r1, #0
 1804 009a D374     		strb	r3, [r2, #19]
 162:Src/main.c    **** 
 1805              		.loc 1 162 0
 1806 009c A023     		movs	r3, #160
 1807 009e D362     		str	r3, [r2, #44]
 169:Src/main.c    **** 			init();
 1808              		.loc 1 169 0
 1809 00a0 0F4B     		ldr	r3, .L137+24
ARM GAS  /tmp/ccYccQ35.s 			page 47


 1810 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1811 00a4 002B     		cmp	r3, #0
 1812 00a6 E3D0     		beq	.L134
 171:Src/main.c    **** 			idle();
 1813              		.loc 1 171 0
 1814 00a8 012B     		cmp	r3, #1
 1815 00aa 06D0     		beq	.L135
 173:Src/main.c    **** 			setup();
 1816              		.loc 1 173 0
 1817 00ac 022B     		cmp	r3, #2
 1818 00ae 07D0     		beq	.L136
 175:Src/main.c    **** 			run();
 1819              		.loc 1 175 0
 1820 00b0 032B     		cmp	r3, #3
 1821 00b2 DFD1     		bne	.L128
 176:Src/main.c    **** 		}
 1822              		.loc 1 176 0
 1823 00b4 FFF7FEFF 		bl	run
 1824              	.LVL142:
 1825 00b8 DCE7     		b	.L128
 1826              	.L135:
 172:Src/main.c    **** 		} else if (current_state == STATE_SETUP) {
 1827              		.loc 1 172 0
 1828 00ba FFF7FEFF 		bl	idle
 1829              	.LVL143:
 1830 00be D9E7     		b	.L128
 1831              	.L136:
 174:Src/main.c    **** 		} else if (current_state == STATE_RUN) {
 1832              		.loc 1 174 0
 1833 00c0 FFF7FEFF 		bl	setup
 1834              	.LVL144:
 1835 00c4 D6E7     		b	.L128
 1836              	.L138:
 1837 00c6 00BF     		.align	2
 1838              	.L137:
 1839 00c8 00000000 		.word	htim2
 1840 00cc 00000000 		.word	can1
 1841 00d0 00000000 		.word	hcan1
 1842 00d4 00000000 		.word	debug_rx_count
 1843 00d8 00000000 		.word	debug_rx
 1844 00dc 00000000 		.word	huart3
 1845 00e0 00000000 		.word	current_state
 1846 00e4 00000000 		.word	accel
 1847 00e8 00000000 		.word	.LANCHOR0
 1848              		.cfi_endproc
 1849              	.LFE142:
 1851              		.global	counter
 1852              		.comm	sFilter,40,4
 1853              		.comm	i_debug,1,1
 1854              		.comm	huart3,128,4
 1855              		.comm	htim2,64,4
 1856              		.comm	hsd1,132,4
 1857              		.comm	hcan1,40,4
 1858              		.comm	current_state,1,1
 1859              		.section	.bss.counter,"aw",%nobits
 1860              		.align	2
 1861              		.set	.LANCHOR0,. + 0
ARM GAS  /tmp/ccYccQ35.s 			page 48


 1864              	counter:
 1865 0000 00000000 		.space	4
 1866              		.section	.rodata.HAL_CAN_ErrorCallback.str1.4,"aMS",%progbits,1
 1867              		.align	2
 1868              	.LC8:
 1869 0000 2D2D2D20 		.ascii	"--- Errore ---: %d\015\012\000"
 1869      4572726F 
 1869      7265202D 
 1869      2D2D3A20 
 1869      25640D0A 
 1870              		.section	.rodata.HAL_CAN_RxFifo0FullCallback.str1.4,"aMS",%progbits,1
 1871              		.align	2
 1872              	.LC2:
 1873 0000 4649464F 		.ascii	"FIFO0 FULL\015\012\000"
 1873      30204655 
 1873      4C4C0D0A 
 1873      00
 1874              		.section	.rodata.HAL_CAN_RxFifo1FullCallback.str1.4,"aMS",%progbits,1
 1875              		.align	2
 1876              	.LC3:
 1877 0000 4649464F 		.ascii	"FIFO1 FULL\015\012\000"
 1877      31204655 
 1877      4C4C0D0A 
 1877      00
 1878              		.section	.rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4,"aMS",%progbits,1
 1879              		.align	2
 1880              	.LC1:
 1881 0000 7278206F 		.ascii	"rx on FIFO1\015\012\000"
 1881      6E204649 
 1881      464F310D 
 1881      0A00
 1882              		.section	.rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4,"aMS",%progbits,1
 1883              		.align	2
 1884              	.LC4:
 1885 0000 6D62303A 		.ascii	"mb0: %d\015\012\000"
 1885      2025640D 
 1885      0A00
 1886 000a 0000     		.space	2
 1887              	.LC5:
 1888 000c 68696768 		.ascii	"high\015\012\000"
 1888      0D0A00
 1889              		.section	.rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4,"aMS",%progbits,1
 1890              		.align	2
 1891              	.LC6:
 1892 0000 6D62313A 		.ascii	"mb1: %d %d\015\012\000"
 1892      20256420 
 1892      25640D0A 
 1892      00
 1893              		.section	.rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4,"aMS",%progbits,1
 1894              		.align	2
 1895              	.LC7:
 1896 0000 6D62323A 		.ascii	"mb2: %d %d\015\012\000"
 1896      20256420 
 1896      25640D0A 
 1896      00
 1897              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 1898              		.align	2
ARM GAS  /tmp/ccYccQ35.s 			page 49


 1899              	.LC0:
 1900 0000 494D5520 		.ascii	"IMU non presente\015\012\000"
 1900      6E6F6E20 
 1900      70726573 
 1900      656E7465 
 1900      0D0A00
 1901              		.text
 1902              	.Letext0:
 1903              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1904              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1905              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1906              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 1907              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1908              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1909              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1910              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1911              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1912              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1913              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1914              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1915              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 1916              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 1917              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1918              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1919              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1920              		.file 19 "Middlewares/Third_Party/FatFs/src/integer.h"
 1921              		.file 20 "/usr/include/newlib/sys/lock.h"
 1922              		.file 21 "/usr/include/newlib/sys/_types.h"
 1923              		.file 22 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1924              		.file 23 "/usr/include/newlib/sys/reent.h"
 1925              		.file 24 "/usr/include/newlib/stdlib.h"
 1926              		.file 25 "Middlewares/Third_Party/FatFs/src/ff.h"
 1927              		.file 26 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1928              		.file 27 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1929              		.file 28 "Inc/sd_diskio.h"
 1930              		.file 29 "Inc/fatfs.h"
 1931              		.file 30 "Inc/can.h"
 1932              		.file 31 "Inc/pedals.h"
 1933              		.file 32 "Inc/global_variables.h"
 1934              		.file 33 "Inc/state.h"
 1935              		.file 34 "/usr/include/newlib/stdio.h"
 1936              		.file 35 "/usr/include/newlib/string.h"
 1937              		.file 36 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1938              		.file 37 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1939              		.file 38 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
 1940              		.file 39 "Inc/sd.h"
ARM GAS  /tmp/ccYccQ35.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccYccQ35.s:17     .text.MX_SDMMC1_SD_Init:0000000000000000 $t
     /tmp/ccYccQ35.s:23     .text.MX_SDMMC1_SD_Init:0000000000000000 MX_SDMMC1_SD_Init
     /tmp/ccYccQ35.s:53     .text.MX_SDMMC1_SD_Init:0000000000000018 $d
                            *COM*:0000000000000084 hsd1
     /tmp/ccYccQ35.s:59     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccYccQ35.s:65     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccYccQ35.s:183    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/ccYccQ35.s:191    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccYccQ35.s:197    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccYccQ35.s:283    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:290    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccYccQ35.s:498    .text.HAL_TIM_PeriodElapsedCallback:000000000000011c $d
                            *COM*:0000000000000040 htim2
                            *COM*:0000000000000080 huart3
     /tmp/ccYccQ35.s:518    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:525    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccYccQ35.s:597    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000044 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccYccQ35.s:604    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:611    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccYccQ35.s:645    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000018 $d
     /tmp/ccYccQ35.s:652    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:659    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccYccQ35.s:693    .text.HAL_CAN_RxFifo0FullCallback:0000000000000018 $d
     /tmp/ccYccQ35.s:700    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:707    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccYccQ35.s:741    .text.HAL_CAN_RxFifo1FullCallback:0000000000000018 $d
     /tmp/ccYccQ35.s:748    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:755    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccYccQ35.s:838    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000068 $d
     /tmp/ccYccQ35.s:849    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:856    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccYccQ35.s:940    .text.HAL_CAN_TxMailbox1CompleteCallback:000000000000006c $d
     /tmp/ccYccQ35.s:951    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:958    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccYccQ35.s:1042   .text.HAL_CAN_TxMailbox2CompleteCallback:000000000000006c $d
     /tmp/ccYccQ35.s:1053   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:1060   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccYccQ35.s:1110   .text.HAL_CAN_ErrorCallback:0000000000000034 $d
     /tmp/ccYccQ35.s:1119   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccYccQ35.s:1126   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccYccQ35.s:1210   .text.HAL_UART_RxCpltCallback:0000000000000060 $d
     /tmp/ccYccQ35.s:1218   .text.Error_Handler:0000000000000000 $t
     /tmp/ccYccQ35.s:1225   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccYccQ35.s:1260   .text.Error_Handler:0000000000000028 $d
     /tmp/ccYccQ35.s:1265   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccYccQ35.s:1271   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccYccQ35.s:1322   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/ccYccQ35.s:1329   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccYccQ35.s:1335   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccYccQ35.s:1392   .text.MX_CAN1_Init:000000000000003c $d
     /tmp/ccYccQ35.s:1398   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccYccQ35.s:1404   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccYccQ35.s:1498   .text.MX_TIM2_Init:000000000000006c $d
     /tmp/ccYccQ35.s:1503   .text.SystemClock_Config:0000000000000000 $t
ARM GAS  /tmp/ccYccQ35.s 			page 51


     /tmp/ccYccQ35.s:1510   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccYccQ35.s:1671   .text.SystemClock_Config:00000000000000cc $d
     /tmp/ccYccQ35.s:1678   .text.main:0000000000000000 $t
     /tmp/ccYccQ35.s:1685   .text.main:0000000000000000 main
     /tmp/ccYccQ35.s:1839   .text.main:00000000000000c8 $d
                            *COM*:0000000000000001 current_state
     /tmp/ccYccQ35.s:1864   .bss.counter:0000000000000000 counter
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000001 i_debug
     /tmp/ccYccQ35.s:1860   .bss.counter:0000000000000000 $d
     /tmp/ccYccQ35.s:1867   .rodata.HAL_CAN_ErrorCallback.str1.4:0000000000000000 $d
     /tmp/ccYccQ35.s:1871   .rodata.HAL_CAN_RxFifo0FullCallback.str1.4:0000000000000000 $d
     /tmp/ccYccQ35.s:1875   .rodata.HAL_CAN_RxFifo1FullCallback.str1.4:0000000000000000 $d
     /tmp/ccYccQ35.s:1879   .rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/ccYccQ35.s:1883   .rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccYccQ35.s:1890   .rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccYccQ35.s:1894   .rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccYccQ35.s:1898   .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
count_ms
count_ms_abs
accel_implausibility_check_count_flag
count_dec
count_inverter
count_imu
count_atc
count_sec
count_min
count_hour
accel_implausibility_check_count
atc_connected
imu_connected
HAL_GPIO_TogglePin
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
fifoRxDataCAN_push
can1
sprintf
strlen
fifoTxDataCAN_high_pop
CAN_Send_IT
fifoTxDataCAN_normal_pop
txt
CAN_Send_Bck
HAL_UART_Receive_IT
debug_rx_count
debug_rx
debug_msg_arrived
HAL_Delay
HAL_UART_Init
ARM GAS  /tmp/ccYccQ35.s 			page 52


HAL_CAN_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
HAL_TIM_Base_Start_IT
can_init
init_sd
init
run
idle
setup
accel
