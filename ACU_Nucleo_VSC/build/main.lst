ARM GAS  /tmp/cc7Gx9Zv.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_SDMMC1_SD_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	MX_SDMMC1_SD_Init:
  24              	.LFB146:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "fatfs.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include "state.h"
  28:Src/main.c    **** #include "can.h"
  29:Src/main.c    **** #include "global_variables.h"
  30:Src/main.c    **** #include "string.h"
  31:Src/main.c    **** #include "stdio.h"
  32:Src/main.c    **** #include "sd.h"
  33:Src/main.c    **** /* USER CODE END Includes */
ARM GAS  /tmp/cc7Gx9Zv.s 			page 2


  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** /* USER CODE END PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE END PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  50:Src/main.c    **** CAN_HandleTypeDef hcan1;
  51:Src/main.c    **** 
  52:Src/main.c    **** SD_HandleTypeDef hsd1;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim2;
  55:Src/main.c    **** 
  56:Src/main.c    **** UART_HandleTypeDef huart3;
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE BEGIN PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** uint8_t i_debug;
  61:Src/main.c    **** extern canStruct can1,can3;
  62:Src/main.c    **** extern fifoPriority fifoPriority_t;
  63:Src/main.c    **** 
  64:Src/main.c    **** CAN_FilterTypeDef sFilter;
  65:Src/main.c    **** 
  66:Src/main.c    **** long int counter = 0;
  67:Src/main.c    **** /* USER CODE END PV */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** void SystemClock_Config(void);
  71:Src/main.c    **** static void MX_GPIO_Init(void);
  72:Src/main.c    **** static void MX_SDMMC1_SD_Init(void);
  73:Src/main.c    **** static void MX_USART3_UART_Init(void);
  74:Src/main.c    **** static void MX_CAN1_Init(void);
  75:Src/main.c    **** static void MX_TIM2_Init(void);
  76:Src/main.c    **** static void MX_NVIC_Init(void);
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /**
  87:Src/main.c    ****   * @brief  The application entry point.
  88:Src/main.c    ****   * @retval int
  89:Src/main.c    ****   */
  90:Src/main.c    **** int main(void)
ARM GAS  /tmp/cc7Gx9Zv.s 			page 3


  91:Src/main.c    **** {
  92:Src/main.c    ****   /* USER CODE BEGIN 1 */
  93:Src/main.c    **** 
  94:Src/main.c    ****   /* USER CODE END 1 */
  95:Src/main.c    ****   
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  98:Src/main.c    **** 
  99:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 100:Src/main.c    ****   HAL_Init();
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN Init */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END Init */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Configure the system clock */
 107:Src/main.c    ****   SystemClock_Config();
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE END SysInit */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Initialize all configured peripherals */
 114:Src/main.c    ****   MX_GPIO_Init();
 115:Src/main.c    ****   MX_SDMMC1_SD_Init();
 116:Src/main.c    ****   MX_USART3_UART_Init();
 117:Src/main.c    ****   MX_FATFS_Init();
 118:Src/main.c    ****   MX_CAN1_Init();
 119:Src/main.c    ****   MX_TIM2_Init();
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* Initialize interrupts */
 122:Src/main.c    ****   MX_NVIC_Init();
 123:Src/main.c    ****   /* USER CODE BEGIN 2 */
 124:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 125:Src/main.c    **** 
 126:Src/main.c    ****   can1.rx0_interrupt = CAN1_RX0_IRQn;
 127:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 128:Src/main.c    ****   can1.hcan = &hcan1;
 129:Src/main.c    **** 
 130:Src/main.c    ****   can_init();
 131:Src/main.c    **** 
 132:Src/main.c    ****   HAL_UART_Receive_IT(&huart3,(uint8_t*) &debug_rx[debug_rx_count], 1); //activate rx interrupt for
 133:Src/main.c    **** 
 134:Src/main.c    ****   current_state = STATE_INIT;
 135:Src/main.c    **** 
 136:Src/main.c    ****   init_sd();
 137:Src/main.c    ****   
 138:Src/main.c    ****   /* USER CODE END 2 */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* Infinite loop */
 141:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 142:Src/main.c    ****   while (1)
 143:Src/main.c    ****   {
 144:Src/main.c    ****     can1.dataTx[0] = 0;
 145:Src/main.c    **** 	  can1.dataTx[1] = 0;
 146:Src/main.c    **** 	  can1.dataTx[2] = 0;
 147:Src/main.c    **** 	  can1.dataTx[3] = 0;
ARM GAS  /tmp/cc7Gx9Zv.s 			page 4


 148:Src/main.c    **** 	  can1.dataTx[4] = counter >> 24;
 149:Src/main.c    **** 	  can1.dataTx[5] = counter >> 16;
 150:Src/main.c    **** 	  can1.dataTx[6] = counter >> 8;
 151:Src/main.c    **** 	  can1.dataTx[7] = counter % 256;
 152:Src/main.c    **** 
 153:Src/main.c    **** 	  can1.tx_id = 0xA0;
 154:Src/main.c    **** 
 155:Src/main.c    **** 	  //CAN_Send(&can1, normalPriority);
 156:Src/main.c    **** 	  //HAL_Delay(500);
 157:Src/main.c    **** 
 158:Src/main.c    **** 	  //counter ++;
 159:Src/main.c    **** 
 160:Src/main.c    **** 	  if(current_state == STATE_INIT){
 161:Src/main.c    **** 		  init();
 162:Src/main.c    **** 	  }else if(current_state == STATE_IDLE){
 163:Src/main.c    **** 		  idle();
 164:Src/main.c    **** 	  }else if(current_state == STATE_SETUP){
 165:Src/main.c    **** 		  setup();
 166:Src/main.c    **** 	  }else if(current_state == STATE_RUN){
 167:Src/main.c    **** 		  run();
 168:Src/main.c    **** 	  }
 169:Src/main.c    ****     /* USER CODE END WHILE */
 170:Src/main.c    **** 
 171:Src/main.c    ****     /* USER CODE BEGIN 3 */
 172:Src/main.c    ****   }
 173:Src/main.c    ****   /* USER CODE END 3 */
 174:Src/main.c    **** }
 175:Src/main.c    **** 
 176:Src/main.c    **** /**
 177:Src/main.c    ****   * @brief System Clock Configuration
 178:Src/main.c    ****   * @retval None
 179:Src/main.c    ****   */
 180:Src/main.c    **** void SystemClock_Config(void)
 181:Src/main.c    **** {
 182:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 183:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 184:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 185:Src/main.c    **** 
 186:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 187:Src/main.c    ****   */
 188:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 189:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 190:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****   */
 192:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 193:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 194:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 200:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 201:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 202:Src/main.c    ****   {
 203:Src/main.c    ****     Error_Handler();
 204:Src/main.c    ****   }
ARM GAS  /tmp/cc7Gx9Zv.s 			page 5


 205:Src/main.c    ****   /** Activate the Over-Drive mode 
 206:Src/main.c    ****   */
 207:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 208:Src/main.c    ****   {
 209:Src/main.c    ****     Error_Handler();
 210:Src/main.c    ****   }
 211:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 212:Src/main.c    ****   */
 213:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 215:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 218:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 219:Src/main.c    **** 
 220:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 225:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 226:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 227:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 228:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 229:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     Error_Handler();
 232:Src/main.c    ****   }
 233:Src/main.c    **** }
 234:Src/main.c    **** 
 235:Src/main.c    **** /**
 236:Src/main.c    ****   * @brief NVIC Configuration.
 237:Src/main.c    ****   * @retval None
 238:Src/main.c    ****   */
 239:Src/main.c    **** static void MX_NVIC_Init(void)
 240:Src/main.c    **** {
 241:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 242:Src/main.c    ****   HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 243:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 244:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 245:Src/main.c    ****   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 246:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 247:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 248:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 249:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 250:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 251:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 252:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 253:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 254:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 255:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 256:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 257:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 258:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 259:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 260:Src/main.c    ****   HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 261:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
ARM GAS  /tmp/cc7Gx9Zv.s 			page 6


 262:Src/main.c    **** }
 263:Src/main.c    **** 
 264:Src/main.c    **** /**
 265:Src/main.c    ****   * @brief CAN1 Initialization Function
 266:Src/main.c    ****   * @param None
 267:Src/main.c    ****   * @retval None
 268:Src/main.c    ****   */
 269:Src/main.c    **** static void MX_CAN1_Init(void)
 270:Src/main.c    **** {
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 279:Src/main.c    ****   hcan1.Instance = CAN1;
 280:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 281:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 282:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 283:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 284:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 285:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 286:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 287:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 288:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 289:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 290:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 291:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 292:Src/main.c    ****   {
 293:Src/main.c    ****     Error_Handler();
 294:Src/main.c    ****   }
 295:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 296:Src/main.c    **** 
 297:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 298:Src/main.c    **** 
 299:Src/main.c    **** }
 300:Src/main.c    **** 
 301:Src/main.c    **** /**
 302:Src/main.c    ****   * @brief SDMMC1 Initialization Function
 303:Src/main.c    ****   * @param None
 304:Src/main.c    ****   * @retval None
 305:Src/main.c    ****   */
 306:Src/main.c    **** static void MX_SDMMC1_SD_Init(void)
 307:Src/main.c    **** {
  26              		.loc 1 307 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 0 */
 310:Src/main.c    **** 
 311:Src/main.c    ****   /* USER CODE END SDMMC1_Init 0 */
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 1 */
ARM GAS  /tmp/cc7Gx9Zv.s 			page 7


 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE END SDMMC1_Init 1 */
 316:Src/main.c    ****   hsd1.Instance = SDMMC1;
  31              		.loc 1 316 0
  32 0000 054B     		ldr	r3, .L2
  33 0002 064A     		ldr	r2, .L2+4
  34 0004 1A60     		str	r2, [r3]
 317:Src/main.c    ****   hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  35              		.loc 1 317 0
  36 0006 0022     		movs	r2, #0
  37 0008 5A60     		str	r2, [r3, #4]
 318:Src/main.c    ****   hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  38              		.loc 1 318 0
  39 000a 9A60     		str	r2, [r3, #8]
 319:Src/main.c    ****   hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  40              		.loc 1 319 0
  41 000c DA60     		str	r2, [r3, #12]
 320:Src/main.c    ****   hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  42              		.loc 1 320 0
  43 000e 1A61     		str	r2, [r3, #16]
 321:Src/main.c    ****   hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  44              		.loc 1 321 0
  45 0010 5A61     		str	r2, [r3, #20]
 322:Src/main.c    ****   hsd1.Init.ClockDiv = 1;
  46              		.loc 1 322 0
  47 0012 0122     		movs	r2, #1
  48 0014 9A61     		str	r2, [r3, #24]
  49 0016 7047     		bx	lr
  50              	.L3:
  51              		.align	2
  52              	.L2:
  53 0018 00000000 		.word	hsd1
  54 001c 002C0140 		.word	1073818624
  55              		.cfi_endproc
  56              	.LFE146:
  58              		.section	.text.MX_GPIO_Init,"ax",%progbits
  59              		.align	1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-d16
  65              	MX_GPIO_Init:
  66              	.LFB149:
 323:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 2 */
 324:Src/main.c    **** 
 325:Src/main.c    ****   /* USER CODE END SDMMC1_Init 2 */
 326:Src/main.c    **** 
 327:Src/main.c    **** }
 328:Src/main.c    **** 
 329:Src/main.c    **** /**
 330:Src/main.c    ****   * @brief TIM2 Initialization Function
 331:Src/main.c    ****   * @param None
 332:Src/main.c    ****   * @retval None
 333:Src/main.c    ****   */
 334:Src/main.c    **** static void MX_TIM2_Init(void)
 335:Src/main.c    **** {
 336:Src/main.c    **** 
ARM GAS  /tmp/cc7Gx9Zv.s 			page 8


 337:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 338:Src/main.c    **** 
 339:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 340:Src/main.c    **** 
 341:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 342:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 343:Src/main.c    **** 
 344:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 347:Src/main.c    ****   htim2.Instance = TIM2;
 348:Src/main.c    ****   htim2.Init.Prescaler = 108;
 349:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 350:Src/main.c    ****   htim2.Init.Period = 1000;
 351:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 352:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 353:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 354:Src/main.c    ****   {
 355:Src/main.c    ****     Error_Handler();
 356:Src/main.c    ****   }
 357:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 358:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 359:Src/main.c    ****   {
 360:Src/main.c    ****     Error_Handler();
 361:Src/main.c    ****   }
 362:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 363:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 364:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 365:Src/main.c    ****   {
 366:Src/main.c    ****     Error_Handler();
 367:Src/main.c    ****   }
 368:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 369:Src/main.c    **** 
 370:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 371:Src/main.c    **** 
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** /**
 375:Src/main.c    ****   * @brief USART3 Initialization Function
 376:Src/main.c    ****   * @param None
 377:Src/main.c    ****   * @retval None
 378:Src/main.c    ****   */
 379:Src/main.c    **** static void MX_USART3_UART_Init(void)
 380:Src/main.c    **** {
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 383:Src/main.c    **** 
 384:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 385:Src/main.c    **** 
 386:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 389:Src/main.c    ****   huart3.Instance = USART3;
 390:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 391:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 392:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 393:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/cc7Gx9Zv.s 			page 9


 394:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 395:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 396:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 397:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 398:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 399:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 400:Src/main.c    ****   {
 401:Src/main.c    ****     Error_Handler();
 402:Src/main.c    ****   }
 403:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 404:Src/main.c    **** 
 405:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 406:Src/main.c    **** 
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /**
 410:Src/main.c    ****   * @brief GPIO Initialization Function
 411:Src/main.c    ****   * @param None
 412:Src/main.c    ****   * @retval None
 413:Src/main.c    ****   */
 414:Src/main.c    **** static void MX_GPIO_Init(void)
 415:Src/main.c    **** {
  67              		.loc 1 415 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 40
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 30B5     		push	{r4, r5, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 12
  74              		.cfi_offset 4, -12
  75              		.cfi_offset 5, -8
  76              		.cfi_offset 14, -4
  77 0002 8BB0     		sub	sp, sp, #44
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 56
 416:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  80              		.loc 1 416 0
  81 0004 0024     		movs	r4, #0
  82 0006 0594     		str	r4, [sp, #20]
  83 0008 0694     		str	r4, [sp, #24]
  84 000a 0794     		str	r4, [sp, #28]
  85 000c 0894     		str	r4, [sp, #32]
  86 000e 0994     		str	r4, [sp, #36]
  87              	.LBB2:
 417:Src/main.c    **** 
 418:Src/main.c    ****   /* GPIO Ports Clock Enable */
 419:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  88              		.loc 1 419 0
  89 0010 204B     		ldr	r3, .L6
  90 0012 1A6B     		ldr	r2, [r3, #48]
  91 0014 42F00102 		orr	r2, r2, #1
  92 0018 1A63     		str	r2, [r3, #48]
  93 001a 1A6B     		ldr	r2, [r3, #48]
  94 001c 02F00102 		and	r2, r2, #1
  95 0020 0192     		str	r2, [sp, #4]
  96 0022 019A     		ldr	r2, [sp, #4]
  97              	.LBE2:
ARM GAS  /tmp/cc7Gx9Zv.s 			page 10


  98              	.LBB3:
 420:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  99              		.loc 1 420 0
 100 0024 1A6B     		ldr	r2, [r3, #48]
 101 0026 42F00202 		orr	r2, r2, #2
 102 002a 1A63     		str	r2, [r3, #48]
 103 002c 1A6B     		ldr	r2, [r3, #48]
 104 002e 02F00202 		and	r2, r2, #2
 105 0032 0292     		str	r2, [sp, #8]
 106 0034 029A     		ldr	r2, [sp, #8]
 107              	.LBE3:
 108              	.LBB4:
 421:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 109              		.loc 1 421 0
 110 0036 1A6B     		ldr	r2, [r3, #48]
 111 0038 42F00802 		orr	r2, r2, #8
 112 003c 1A63     		str	r2, [r3, #48]
 113 003e 1A6B     		ldr	r2, [r3, #48]
 114 0040 02F00802 		and	r2, r2, #8
 115 0044 0392     		str	r2, [sp, #12]
 116 0046 039A     		ldr	r2, [sp, #12]
 117              	.LBE4:
 118              	.LBB5:
 422:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 119              		.loc 1 422 0
 120 0048 1A6B     		ldr	r2, [r3, #48]
 121 004a 42F00402 		orr	r2, r2, #4
 122 004e 1A63     		str	r2, [r3, #48]
 123 0050 1B6B     		ldr	r3, [r3, #48]
 124 0052 03F00403 		and	r3, r3, #4
 125 0056 0493     		str	r3, [sp, #16]
 126 0058 049B     		ldr	r3, [sp, #16]
 127              	.LBE5:
 423:Src/main.c    **** 
 424:Src/main.c    ****   /*Configure GPIO pin Output Level */
 425:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_green_Pin|LED_red_Pin|LED_blue_Pin, GPIO_PIN_RESET);
 128              		.loc 1 425 0
 129 005a 0F4D     		ldr	r5, .L6+4
 130 005c 2246     		mov	r2, r4
 131 005e 44F28101 		movw	r1, #16513
 132 0062 2846     		mov	r0, r5
 133 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 134              	.LVL0:
 426:Src/main.c    **** 
 427:Src/main.c    ****   /*Configure GPIO pin : SD_detect_Pin */
 428:Src/main.c    ****   GPIO_InitStruct.Pin = SD_detect_Pin;
 135              		.loc 1 428 0
 136 0068 2023     		movs	r3, #32
 137 006a 0593     		str	r3, [sp, #20]
 429:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 138              		.loc 1 429 0
 139 006c 0694     		str	r4, [sp, #24]
 430:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 140              		.loc 1 430 0
 141 006e 0794     		str	r4, [sp, #28]
 431:Src/main.c    ****   HAL_GPIO_Init(SD_detect_GPIO_Port, &GPIO_InitStruct);
 142              		.loc 1 431 0
ARM GAS  /tmp/cc7Gx9Zv.s 			page 11


 143 0070 05A9     		add	r1, sp, #20
 144 0072 0A48     		ldr	r0, .L6+8
 145 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL1:
 432:Src/main.c    **** 
 433:Src/main.c    ****   /*Configure GPIO pins : LED_green_Pin LED_red_Pin LED_blue_Pin */
 434:Src/main.c    ****   GPIO_InitStruct.Pin = LED_green_Pin|LED_red_Pin|LED_blue_Pin;
 147              		.loc 1 434 0
 148 0078 44F28103 		movw	r3, #16513
 149 007c 0593     		str	r3, [sp, #20]
 435:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 150              		.loc 1 435 0
 151 007e 0123     		movs	r3, #1
 152 0080 0693     		str	r3, [sp, #24]
 436:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 153              		.loc 1 436 0
 154 0082 0794     		str	r4, [sp, #28]
 437:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 155              		.loc 1 437 0
 156 0084 0894     		str	r4, [sp, #32]
 438:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 157              		.loc 1 438 0
 158 0086 05A9     		add	r1, sp, #20
 159 0088 2846     		mov	r0, r5
 160 008a FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL2:
 439:Src/main.c    **** 
 440:Src/main.c    **** }
 162              		.loc 1 440 0
 163 008e 0BB0     		add	sp, sp, #44
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 12
 166              		@ sp needed
 167 0090 30BD     		pop	{r4, r5, pc}
 168              	.L7:
 169 0092 00BF     		.align	2
 170              	.L6:
 171 0094 00380240 		.word	1073887232
 172 0098 00040240 		.word	1073873920
 173 009c 00000240 		.word	1073872896
 174              		.cfi_endproc
 175              	.LFE149:
 177              		.section	.text.MX_NVIC_Init,"ax",%progbits
 178              		.align	1
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv5-d16
 184              	MX_NVIC_Init:
 185              	.LFB144:
 240:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 186              		.loc 1 240 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 08B5     		push	{r3, lr}
 191              	.LCFI3:
ARM GAS  /tmp/cc7Gx9Zv.s 			page 12


 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 3, -8
 194              		.cfi_offset 14, -4
 242:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 195              		.loc 1 242 0
 196 0002 0022     		movs	r2, #0
 197 0004 1146     		mov	r1, r2
 198 0006 3120     		movs	r0, #49
 199 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 200              	.LVL3:
 243:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 201              		.loc 1 243 0
 202 000c 3120     		movs	r0, #49
 203 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 204              	.LVL4:
 245:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 205              		.loc 1 245 0
 206 0012 0022     		movs	r2, #0
 207 0014 1146     		mov	r1, r2
 208 0016 2720     		movs	r0, #39
 209 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 210              	.LVL5:
 246:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 211              		.loc 1 246 0
 212 001c 2720     		movs	r0, #39
 213 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 214              	.LVL6:
 248:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 215              		.loc 1 248 0
 216 0022 0022     		movs	r2, #0
 217 0024 1146     		mov	r1, r2
 218 0026 1620     		movs	r0, #22
 219 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL7:
 249:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 221              		.loc 1 249 0
 222 002c 1620     		movs	r0, #22
 223 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 224              	.LVL8:
 251:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 225              		.loc 1 251 0
 226 0032 0022     		movs	r2, #0
 227 0034 1146     		mov	r1, r2
 228 0036 1520     		movs	r0, #21
 229 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL9:
 252:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 231              		.loc 1 252 0
 232 003c 1520     		movs	r0, #21
 233 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL10:
 254:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 235              		.loc 1 254 0
 236 0042 0022     		movs	r2, #0
 237 0044 1146     		mov	r1, r2
 238 0046 1420     		movs	r0, #20
 239 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/cc7Gx9Zv.s 			page 13


 240              	.LVL11:
 255:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 241              		.loc 1 255 0
 242 004c 1420     		movs	r0, #20
 243 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL12:
 257:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 245              		.loc 1 257 0
 246 0052 0022     		movs	r2, #0
 247 0054 1146     		mov	r1, r2
 248 0056 1320     		movs	r0, #19
 249 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250              	.LVL13:
 258:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 251              		.loc 1 258 0
 252 005c 1320     		movs	r0, #19
 253 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254              	.LVL14:
 260:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
 255              		.loc 1 260 0
 256 0062 0022     		movs	r2, #0
 257 0064 1146     		mov	r1, r2
 258 0066 1C20     		movs	r0, #28
 259 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 260              	.LVL15:
 261:Src/main.c    **** }
 261              		.loc 1 261 0
 262 006c 1C20     		movs	r0, #28
 263 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 264              	.LVL16:
 265 0072 08BD     		pop	{r3, pc}
 266              		.cfi_endproc
 267              	.LFE144:
 269              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 270              		.align	1
 271              		.global	HAL_TIM_PeriodElapsedCallback
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv5-d16
 277              	HAL_TIM_PeriodElapsedCallback:
 278              	.LFB150:
 441:Src/main.c    **** 
 442:Src/main.c    **** /* USER CODE BEGIN 4 */
 443:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 279              		.loc 1 443 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL17:
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 444:Src/main.c    **** 	if(htim == &htim2){
 289              		.loc 1 444 0
ARM GAS  /tmp/cc7Gx9Zv.s 			page 14


 290 0002 3B4B     		ldr	r3, .L26
 291 0004 8342     		cmp	r3, r0
 292 0006 00D0     		beq	.L19
 293              	.LVL18:
 294              	.L10:
 295 0008 08BD     		pop	{r3, pc}
 296              	.LVL19:
 297              	.L19:
 445:Src/main.c    **** 		count_ms += 1;
 298              		.loc 1 445 0
 299 000a 3A4A     		ldr	r2, .L26+4
 300 000c 1388     		ldrh	r3, [r2]
 301 000e 0133     		adds	r3, r3, #1
 302 0010 9BB2     		uxth	r3, r3
 303 0012 1380     		strh	r3, [r2]	@ movhi
 446:Src/main.c    **** 		if(accel_implausibility_check_count_flag == 1){
 304              		.loc 1 446 0
 305 0014 384A     		ldr	r2, .L26+8
 306 0016 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 307 0018 012A     		cmp	r2, #1
 308 001a 43D0     		beq	.L20
 309              	.L12:
 447:Src/main.c    **** 			accel_implausibility_check_count++;
 448:Src/main.c    **** 			if(accel_implausibility_check_count == 50){
 449:Src/main.c    **** 				accel_implausibility_check_count_flag = 2;
 450:Src/main.c    **** 				//TODO: add error messages
 451:Src/main.c    **** 			}
 452:Src/main.c    **** 		}
 453:Src/main.c    **** 		if(count_ms == 100){
 310              		.loc 1 453 0
 311 001c 642B     		cmp	r3, #100
 312 001e F3D1     		bne	.L10
 454:Src/main.c    **** 			count_ms = 0;
 313              		.loc 1 454 0
 314 0020 0022     		movs	r2, #0
 315 0022 344B     		ldr	r3, .L26+4
 316 0024 1A80     		strh	r2, [r3]	@ movhi
 455:Src/main.c    **** 			count_dec++;
 317              		.loc 1 455 0
 318 0026 354A     		ldr	r2, .L26+12
 319 0028 1388     		ldrh	r3, [r2]
 320 002a 0133     		adds	r3, r3, #1
 321 002c 1380     		strh	r3, [r2]	@ movhi
 456:Src/main.c    **** 			//--- put your counter here (count each 0,1 sec) ---//
 457:Src/main.c    **** 			count_inverter++;
 322              		.loc 1 457 0
 323 002e 344B     		ldr	r3, .L26+16
 324 0030 1988     		ldrh	r1, [r3]
 325 0032 0131     		adds	r1, r1, #1
 326 0034 89B2     		uxth	r1, r1
 327 0036 1980     		strh	r1, [r3]	@ movhi
 458:Src/main.c    **** 			count_imu++;
 328              		.loc 1 458 0
 329 0038 324A     		ldr	r2, .L26+20
 330 003a 1388     		ldrh	r3, [r2]
 331 003c 0133     		adds	r3, r3, #1
 332 003e 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cc7Gx9Zv.s 			page 15


 333 0040 1380     		strh	r3, [r2]	@ movhi
 459:Src/main.c    ****       		count_atc++;
 334              		.loc 1 459 0
 335 0042 3148     		ldr	r0, .L26+24
 336              	.LVL20:
 337 0044 0288     		ldrh	r2, [r0]
 338 0046 0132     		adds	r2, r2, #1
 339 0048 92B2     		uxth	r2, r2
 340 004a 0280     		strh	r2, [r0]	@ movhi
 460:Src/main.c    **** 			if(count_inverter == 10){ //--- check if inverter is connected ---//
 341              		.loc 1 460 0
 342 004c 0A29     		cmp	r1, #10
 343 004e 01D0     		beq	.L13
 461:Src/main.c    **** 				//TODO: to implement error functions
 462:Src/main.c    **** 			}else if(count_inverter == 11){
 344              		.loc 1 462 0
 345 0050 0B29     		cmp	r1, #11
 346 0052 32D0     		beq	.L21
 347              	.L13:
 463:Src/main.c    **** 				count_inverter = 10;
 464:Src/main.c    **** 			}
 465:Src/main.c    ****             if(count_atc == 10){ //--- check if Analog To Can is connected ---//
 348              		.loc 1 465 0
 349 0054 0A2A     		cmp	r2, #10
 350 0056 34D0     		beq	.L22
 466:Src/main.c    ****                 //TODO: to implement error functions
 467:Src/main.c    ****                 atc_connected = 0;
 468:Src/main.c    ****             }else if(count_atc == 11){
 351              		.loc 1 468 0
 352 0058 0B2A     		cmp	r2, #11
 353 005a 36D0     		beq	.L23
 354              	.L15:
 469:Src/main.c    ****                 count_atc = 10;
 470:Src/main.c    ****             }
 471:Src/main.c    **** 			if(count_imu == 10){ //--- check if imu is connected ---//
 355              		.loc 1 471 0
 356 005c 0A2B     		cmp	r3, #10
 357 005e 38D0     		beq	.L24
 472:Src/main.c    **** 				// imu non presente //
 473:Src/main.c    **** 				imu_connected = 0; //imu not connected
 474:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 10
 475:Src/main.c    **** 			}else if(count_imu == 11){
 358              		.loc 1 475 0
 359 0060 0B2B     		cmp	r3, #11
 360 0062 40D0     		beq	.L25
 361              	.L17:
 476:Src/main.c    **** 				count_imu = 10;
 477:Src/main.c    **** 			}
 478:Src/main.c    **** 			if(count_dec == 10){
 362              		.loc 1 478 0
 363 0064 254B     		ldr	r3, .L26+12
 364 0066 1B88     		ldrh	r3, [r3]
 365 0068 0A2B     		cmp	r3, #10
 366 006a CDD1     		bne	.L10
 479:Src/main.c    **** 				count_dec = 0;
 367              		.loc 1 479 0
 368 006c 0022     		movs	r2, #0
ARM GAS  /tmp/cc7Gx9Zv.s 			page 16


 369 006e 234B     		ldr	r3, .L26+12
 370 0070 1A80     		strh	r2, [r3]	@ movhi
 480:Src/main.c    **** 				count_sec++;
 371              		.loc 1 480 0
 372 0072 264A     		ldr	r2, .L26+28
 373 0074 1388     		ldrh	r3, [r2]
 374 0076 0133     		adds	r3, r3, #1
 375 0078 9BB2     		uxth	r3, r3
 376 007a 1380     		strh	r3, [r2]	@ movhi
 481:Src/main.c    **** 				if(count_sec == 60){
 377              		.loc 1 481 0
 378 007c 3C2B     		cmp	r3, #60
 379 007e C3D1     		bne	.L10
 482:Src/main.c    **** 					count_sec = 0;
 380              		.loc 1 482 0
 381 0080 0022     		movs	r2, #0
 382 0082 224B     		ldr	r3, .L26+28
 383 0084 1A80     		strh	r2, [r3]	@ movhi
 483:Src/main.c    **** 					count_min++;
 384              		.loc 1 483 0
 385 0086 224A     		ldr	r2, .L26+32
 386 0088 1388     		ldrh	r3, [r2]
 387 008a 0133     		adds	r3, r3, #1
 388 008c 9BB2     		uxth	r3, r3
 389 008e 1380     		strh	r3, [r2]	@ movhi
 484:Src/main.c    **** 					if(count_min == 60){
 390              		.loc 1 484 0
 391 0090 3C2B     		cmp	r3, #60
 392 0092 B9D1     		bne	.L10
 485:Src/main.c    **** 						count_min = 0;
 393              		.loc 1 485 0
 394 0094 0022     		movs	r2, #0
 395 0096 1E4B     		ldr	r3, .L26+32
 396 0098 1A80     		strh	r2, [r3]	@ movhi
 486:Src/main.c    **** 						count_hour++;
 397              		.loc 1 486 0
 398 009a 1E4A     		ldr	r2, .L26+36
 399 009c 1388     		ldrh	r3, [r2]
 400 009e 0133     		adds	r3, r3, #1
 401 00a0 1380     		strh	r3, [r2]	@ movhi
 487:Src/main.c    **** 					}
 488:Src/main.c    **** 				}
 489:Src/main.c    **** 			}
 490:Src/main.c    **** 		}
 491:Src/main.c    **** 	}
 492:Src/main.c    **** }
 402              		.loc 1 492 0
 403 00a2 B1E7     		b	.L10
 404              	.LVL21:
 405              	.L20:
 447:Src/main.c    **** 			if(accel_implausibility_check_count == 50){
 406              		.loc 1 447 0
 407 00a4 1C49     		ldr	r1, .L26+40
 408 00a6 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 409 00a8 0132     		adds	r2, r2, #1
 410 00aa D2B2     		uxtb	r2, r2
 411 00ac 0A70     		strb	r2, [r1]
ARM GAS  /tmp/cc7Gx9Zv.s 			page 17


 448:Src/main.c    **** 				accel_implausibility_check_count_flag = 2;
 412              		.loc 1 448 0
 413 00ae 322A     		cmp	r2, #50
 414 00b0 B4D1     		bne	.L12
 449:Src/main.c    **** 				//TODO: add error messages
 415              		.loc 1 449 0
 416 00b2 0221     		movs	r1, #2
 417 00b4 104A     		ldr	r2, .L26+8
 418 00b6 1170     		strb	r1, [r2]
 419 00b8 B0E7     		b	.L12
 420              	.LVL22:
 421              	.L21:
 463:Src/main.c    **** 			}
 422              		.loc 1 463 0
 423 00ba 0A20     		movs	r0, #10
 424 00bc 1049     		ldr	r1, .L26+16
 425 00be 0880     		strh	r0, [r1]	@ movhi
 426 00c0 C8E7     		b	.L13
 427              	.L22:
 467:Src/main.c    ****             }else if(count_atc == 11){
 428              		.loc 1 467 0
 429 00c2 0021     		movs	r1, #0
 430 00c4 154A     		ldr	r2, .L26+44
 431 00c6 1170     		strb	r1, [r2]
 432 00c8 C8E7     		b	.L15
 433              	.L23:
 469:Src/main.c    ****             }
 434              		.loc 1 469 0
 435 00ca 0A21     		movs	r1, #10
 436 00cc 0E4A     		ldr	r2, .L26+24
 437 00ce 1180     		strh	r1, [r2]	@ movhi
 438 00d0 C4E7     		b	.L15
 439              	.L24:
 473:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 10
 440              		.loc 1 473 0
 441 00d2 0022     		movs	r2, #0
 442 00d4 124B     		ldr	r3, .L26+48
 443 00d6 1A70     		strb	r2, [r3]
 474:Src/main.c    **** 			}else if(count_imu == 11){
 444              		.loc 1 474 0
 445 00d8 0A23     		movs	r3, #10
 446 00da 1222     		movs	r2, #18
 447 00dc 1149     		ldr	r1, .L26+52
 448 00de 1248     		ldr	r0, .L26+56
 449 00e0 FFF7FEFF 		bl	HAL_UART_Transmit
 450              	.LVL23:
 451 00e4 BEE7     		b	.L17
 452              	.L25:
 476:Src/main.c    **** 			}
 453              		.loc 1 476 0
 454 00e6 0A22     		movs	r2, #10
 455 00e8 064B     		ldr	r3, .L26+20
 456 00ea 1A80     		strh	r2, [r3]	@ movhi
 457 00ec BAE7     		b	.L17
 458              	.L27:
 459 00ee 00BF     		.align	2
 460              	.L26:
ARM GAS  /tmp/cc7Gx9Zv.s 			page 18


 461 00f0 00000000 		.word	htim2
 462 00f4 00000000 		.word	count_ms
 463 00f8 00000000 		.word	accel_implausibility_check_count_flag
 464 00fc 00000000 		.word	count_dec
 465 0100 00000000 		.word	count_inverter
 466 0104 00000000 		.word	count_imu
 467 0108 00000000 		.word	count_atc
 468 010c 00000000 		.word	count_sec
 469 0110 00000000 		.word	count_min
 470 0114 00000000 		.word	count_hour
 471 0118 00000000 		.word	accel_implausibility_check_count
 472 011c 00000000 		.word	atc_connected
 473 0120 00000000 		.word	imu_connected
 474 0124 00000000 		.word	.LC0
 475 0128 00000000 		.word	huart3
 476              		.cfi_endproc
 477              	.LFE150:
 479              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 480              		.align	1
 481              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 482              		.syntax unified
 483              		.thumb
 484              		.thumb_func
 485              		.fpu fpv5-d16
 487              	HAL_CAN_RxFifo0MsgPendingCallback:
 488              	.LFB151:
 493:Src/main.c    **** 
 494:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 489              		.loc 1 494 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 32
 492              		@ frame_needed = 0, uses_anonymous_args = 0
 493              	.LVL24:
 494 0000 10B5     		push	{r4, lr}
 495              	.LCFI5:
 496              		.cfi_def_cfa_offset 8
 497              		.cfi_offset 4, -8
 498              		.cfi_offset 14, -4
 499 0002 88B0     		sub	sp, sp, #32
 500              	.LCFI6:
 501              		.cfi_def_cfa_offset 40
 502 0004 0446     		mov	r4, r0
 495:Src/main.c    **** 	/*sprintf(txt, "%d\r\n", HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 496:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 497:Src/main.c    **** 
 498:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 503              		.loc 1 498 0
 504 0006 8021     		movs	r1, #128
 505 0008 0E48     		ldr	r0, .L32
 506              	.LVL25:
 507 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 508              	.LVL26:
 499:Src/main.c    **** 	if (hcan == &hcan1){
 509              		.loc 1 499 0
 510 000e 0E4B     		ldr	r3, .L32+4
 511 0010 9C42     		cmp	r4, r3
 512 0012 01D0     		beq	.L31
ARM GAS  /tmp/cc7Gx9Zv.s 			page 19


 513              	.LVL27:
 514              	.L28:
 500:Src/main.c    **** 		//HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO0\r\n", strlen("rx on FIFO0\r\n"), 10);
 501:Src/main.c    **** 		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 502:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 503:Src/main.c    **** 			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &header, can1.dataRx);
 504:Src/main.c    **** 			can1.rx_id = header.StdId;
 505:Src/main.c    **** 			can1.rx_size = header.DLC;
 506:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 507:Src/main.c    **** 			//sprintf(txt,"DATA: %d %d %d %d %d %d %d %d\r\n",can1.dataRx[0],can1.dataRx[1],can1.dataRx[2],c
 508:Src/main.c    **** 			//HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 100);
 509:Src/main.c    **** 			//HAL_UART_Transmit(&huart3, (uint8_t*)"ciao2\r\n", strlen("ciao2\r\n"), 10);
 510:Src/main.c    **** 
 511:Src/main.c    **** 
 512:Src/main.c    **** 		}
 513:Src/main.c    **** 	}
 514:Src/main.c    **** }
 515              		.loc 1 514 0
 516 0014 08B0     		add	sp, sp, #32
 517              	.LCFI7:
 518              		.cfi_remember_state
 519              		.cfi_def_cfa_offset 8
 520              		@ sp needed
 521 0016 10BD     		pop	{r4, pc}
 522              	.LVL28:
 523              	.L31:
 524              	.LCFI8:
 525              		.cfi_restore_state
 501:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 526              		.loc 1 501 0
 527 0018 0021     		movs	r1, #0
 528 001a 1846     		mov	r0, r3
 529 001c FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 530              	.LVL29:
 531 0020 0028     		cmp	r0, #0
 532 0022 F7D0     		beq	.L28
 533              	.LBB6:
 503:Src/main.c    **** 			can1.rx_id = header.StdId;
 534              		.loc 1 503 0
 535 0024 094C     		ldr	r4, .L32+8
 536              	.LVL30:
 537 0026 2346     		mov	r3, r4
 538 0028 01AA     		add	r2, sp, #4
 539 002a 0021     		movs	r1, #0
 540 002c 0648     		ldr	r0, .L32+4
 541 002e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 542              	.LVL31:
 504:Src/main.c    **** 			can1.rx_size = header.DLC;
 543              		.loc 1 504 0
 544 0032 A4F11000 		sub	r0, r4, #16
 545 0036 019B     		ldr	r3, [sp, #4]
 546 0038 4362     		str	r3, [r0, #36]
 505:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 547              		.loc 1 505 0
 548 003a 059B     		ldr	r3, [sp, #20]
 549 003c 4360     		str	r3, [r0, #4]
 506:Src/main.c    **** 			//sprintf(txt,"DATA: %d %d %d %d %d %d %d %d\r\n",can1.dataRx[0],can1.dataRx[1],can1.dataRx[2],c
ARM GAS  /tmp/cc7Gx9Zv.s 			page 20


 550              		.loc 1 506 0
 551 003e FFF7FEFF 		bl	fifoRxDataCAN_push
 552              	.LVL32:
 553              	.LBE6:
 554              		.loc 1 514 0
 555 0042 E7E7     		b	.L28
 556              	.L33:
 557              		.align	2
 558              	.L32:
 559 0044 00040240 		.word	1073873920
 560 0048 00000000 		.word	hcan1
 561 004c 10000000 		.word	can1+16
 562              		.cfi_endproc
 563              	.LFE151:
 565              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 566              		.align	1
 567              		.global	HAL_CAN_RxFifo1MsgPendingCallback
 568              		.syntax unified
 569              		.thumb
 570              		.thumb_func
 571              		.fpu fpv5-d16
 573              	HAL_CAN_RxFifo1MsgPendingCallback:
 574              	.LFB152:
 515:Src/main.c    **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 575              		.loc 1 515 0
 576              		.cfi_startproc
 577              		@ args = 0, pretend = 0, frame = 0
 578              		@ frame_needed = 0, uses_anonymous_args = 0
 579              	.LVL33:
 580 0000 08B5     		push	{r3, lr}
 581              	.LCFI9:
 582              		.cfi_def_cfa_offset 8
 583              		.cfi_offset 3, -8
 584              		.cfi_offset 14, -4
 516:Src/main.c    **** 	if (hcan == &hcan1){
 585              		.loc 1 516 0
 586 0002 054B     		ldr	r3, .L38
 587 0004 8342     		cmp	r3, r0
 588 0006 00D0     		beq	.L37
 589              	.LVL34:
 590              	.L34:
 591 0008 08BD     		pop	{r3, pc}
 592              	.LVL35:
 593              	.L37:
 517:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO1\r\n", strlen("rx on FIFO1\r\n"), 10);
 594              		.loc 1 517 0
 595 000a 0A23     		movs	r3, #10
 596 000c 0D22     		movs	r2, #13
 597 000e 0349     		ldr	r1, .L38+4
 598 0010 0348     		ldr	r0, .L38+8
 599              	.LVL36:
 600 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 601              	.LVL37:
 518:Src/main.c    **** 	}
 519:Src/main.c    **** }
 602              		.loc 1 519 0
 603 0016 F7E7     		b	.L34
ARM GAS  /tmp/cc7Gx9Zv.s 			page 21


 604              	.L39:
 605              		.align	2
 606              	.L38:
 607 0018 00000000 		.word	hcan1
 608 001c 00000000 		.word	.LC1
 609 0020 00000000 		.word	huart3
 610              		.cfi_endproc
 611              	.LFE152:
 613              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 614              		.align	1
 615              		.global	HAL_CAN_RxFifo0FullCallback
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu fpv5-d16
 621              	HAL_CAN_RxFifo0FullCallback:
 622              	.LFB153:
 520:Src/main.c    **** 
 521:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 623              		.loc 1 521 0
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              	.LVL38:
 628 0000 08B5     		push	{r3, lr}
 629              	.LCFI10:
 630              		.cfi_def_cfa_offset 8
 631              		.cfi_offset 3, -8
 632              		.cfi_offset 14, -4
 522:Src/main.c    **** 	if (hcan == &hcan1){
 633              		.loc 1 522 0
 634 0002 054B     		ldr	r3, .L44
 635 0004 8342     		cmp	r3, r0
 636 0006 00D0     		beq	.L43
 637              	.LVL39:
 638              	.L40:
 639 0008 08BD     		pop	{r3, pc}
 640              	.LVL40:
 641              	.L43:
 523:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO0 FULL\r\n", strlen("FIFO0 FULL\r\n"), 10);
 642              		.loc 1 523 0
 643 000a 0A23     		movs	r3, #10
 644 000c 0C22     		movs	r2, #12
 645 000e 0349     		ldr	r1, .L44+4
 646 0010 0348     		ldr	r0, .L44+8
 647              	.LVL41:
 648 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 649              	.LVL42:
 524:Src/main.c    **** 	}
 525:Src/main.c    **** }
 650              		.loc 1 525 0
 651 0016 F7E7     		b	.L40
 652              	.L45:
 653              		.align	2
 654              	.L44:
 655 0018 00000000 		.word	hcan1
 656 001c 00000000 		.word	.LC2
ARM GAS  /tmp/cc7Gx9Zv.s 			page 22


 657 0020 00000000 		.word	huart3
 658              		.cfi_endproc
 659              	.LFE153:
 661              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 662              		.align	1
 663              		.global	HAL_CAN_RxFifo1FullCallback
 664              		.syntax unified
 665              		.thumb
 666              		.thumb_func
 667              		.fpu fpv5-d16
 669              	HAL_CAN_RxFifo1FullCallback:
 670              	.LFB154:
 526:Src/main.c    **** void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan){
 671              		.loc 1 526 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              	.LVL43:
 676 0000 08B5     		push	{r3, lr}
 677              	.LCFI11:
 678              		.cfi_def_cfa_offset 8
 679              		.cfi_offset 3, -8
 680              		.cfi_offset 14, -4
 527:Src/main.c    **** 	if (hcan == &hcan1){
 681              		.loc 1 527 0
 682 0002 054B     		ldr	r3, .L50
 683 0004 8342     		cmp	r3, r0
 684 0006 00D0     		beq	.L49
 685              	.LVL44:
 686              	.L46:
 687 0008 08BD     		pop	{r3, pc}
 688              	.LVL45:
 689              	.L49:
 528:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO1 FULL\r\n", strlen("FIFO1 FULL\r\n"), 10);
 690              		.loc 1 528 0
 691 000a 0A23     		movs	r3, #10
 692 000c 0C22     		movs	r2, #12
 693 000e 0349     		ldr	r1, .L50+4
 694 0010 0348     		ldr	r0, .L50+8
 695              	.LVL46:
 696 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 697              	.LVL47:
 529:Src/main.c    **** 	}
 530:Src/main.c    **** }
 698              		.loc 1 530 0
 699 0016 F7E7     		b	.L46
 700              	.L51:
 701              		.align	2
 702              	.L50:
 703 0018 00000000 		.word	hcan1
 704 001c 00000000 		.word	.LC3
 705 0020 00000000 		.word	huart3
 706              		.cfi_endproc
 707              	.LFE154:
 709              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 710              		.align	1
 711              		.global	HAL_CAN_TxMailbox0CompleteCallback
ARM GAS  /tmp/cc7Gx9Zv.s 			page 23


 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu fpv5-d16
 717              	HAL_CAN_TxMailbox0CompleteCallback:
 718              	.LFB155:
 531:Src/main.c    **** 
 532:Src/main.c    **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 719              		.loc 1 532 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723              	.LVL48:
 724 0000 38B5     		push	{r3, r4, r5, lr}
 725              	.LCFI12:
 726              		.cfi_def_cfa_offset 16
 727              		.cfi_offset 3, -16
 728              		.cfi_offset 4, -12
 729              		.cfi_offset 5, -8
 730              		.cfi_offset 14, -4
 731 0002 0546     		mov	r5, r0
 533:Src/main.c    **** 	sprintf(txt,"mb0: %d\r\n", (int)can1.idBck);
 732              		.loc 1 533 0
 733 0004 184C     		ldr	r4, .L57
 734 0006 194B     		ldr	r3, .L57+4
 735 0008 9A6A     		ldr	r2, [r3, #40]
 736 000a 1949     		ldr	r1, .L57+8
 737 000c 2046     		mov	r0, r4
 738              	.LVL49:
 739 000e FFF7FEFF 		bl	sprintf
 740              	.LVL50:
 534:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 741              		.loc 1 534 0
 742 0012 2046     		mov	r0, r4
 743 0014 FFF7FEFF 		bl	strlen
 744              	.LVL51:
 745 0018 0A23     		movs	r3, #10
 746 001a 82B2     		uxth	r2, r0
 747 001c 2146     		mov	r1, r4
 748 001e 1548     		ldr	r0, .L57+12
 749 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 750              	.LVL52:
 535:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 751              		.loc 1 535 0
 752 0024 0121     		movs	r1, #1
 753 0026 1448     		ldr	r0, .L57+16
 754 0028 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 755              	.LVL53:
 536:Src/main.c    **** 	if(hcan == &hcan1){
 756              		.loc 1 536 0
 757 002c 134B     		ldr	r3, .L57+20
 758 002e 9D42     		cmp	r5, r3
 759 0030 00D0     		beq	.L56
 760              	.L52:
 761 0032 38BD     		pop	{r3, r4, r5, pc}
 762              	.LVL54:
 763              	.L56:
ARM GAS  /tmp/cc7Gx9Zv.s 			page 24


 537:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 764              		.loc 1 537 0
 765 0034 0D48     		ldr	r0, .L57+4
 766 0036 FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 767              	.LVL55:
 768 003a 58B1     		cbz	r0, .L54
 538:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 769              		.loc 1 538 0
 770 003c 0B48     		ldr	r0, .L57+4
 771 003e FFF7FEFF 		bl	CAN_Send_IT
 772              	.LVL56:
 773 0042 0028     		cmp	r0, #0
 774 0044 F5D0     		beq	.L52
 539:Src/main.c    **** 				//TODO: implementare errore
 540:Src/main.c    **** 			}else{
 541:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 775              		.loc 1 541 0
 776 0046 0A23     		movs	r3, #10
 777 0048 0622     		movs	r2, #6
 778 004a 0D49     		ldr	r1, .L57+24
 779 004c 0948     		ldr	r0, .L57+12
 780 004e FFF7FEFF 		bl	HAL_UART_Transmit
 781              	.LVL57:
 782 0052 38BD     		pop	{r3, r4, r5, pc}
 783              	.LVL58:
 784              	.L54:
 542:Src/main.c    **** 			}
 543:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 785              		.loc 1 543 0
 786 0054 0548     		ldr	r0, .L57+4
 787 0056 FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 788              	.LVL59:
 789 005a 0028     		cmp	r0, #0
 790 005c E9D0     		beq	.L52
 544:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 545:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 791              		.loc 1 545 0
 792 005e 0348     		ldr	r0, .L57+4
 793 0060 FFF7FEFF 		bl	CAN_Send_IT
 794              	.LVL60:
 546:Src/main.c    **** 				//TODO: implementare errore
 547:Src/main.c    **** 			}
 548:Src/main.c    **** 		}else{
 549:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 550:Src/main.c    **** 		}
 551:Src/main.c    **** 	}/*else{
 552:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)("Messaggio trasmesso\r\n"), strlen("Messaggio trasmesso\r\n")
 553:Src/main.c    **** 		//HAL_GPIO_TogglePin(USER_LED_4_GPIO_Port, USER_LED_4_Pin);
 554:Src/main.c    **** 		fifoDataType fifodata;
 555:Src/main.c    **** 		if(fifoTxDataCAN3_high_pop(&fifoCAN3, &fifodata)){
 556:Src/main.c    **** 			for(int i = 0; i < 8; i++){
 557:Src/main.c    **** 				can3.dataTx[i] = fifodata.data[i];
 558:Src/main.c    **** 			}
 559:Src/main.c    **** 			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 560:Src/main.c    **** 				//TODO: implementare errore
 561:Src/main.c    **** 			}
 562:Src/main.c    **** 		}else if(fifoTxDataCAN3_normal_pop(&fifoCAN3, &fifodata)){
ARM GAS  /tmp/cc7Gx9Zv.s 			page 25


 563:Src/main.c    **** 			HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n"), 
 564:Src/main.c    **** 			for(int i = 0; i < 8; i++){
 565:Src/main.c    **** 				can3.dataTx[i] = fifodata.data[i];
 566:Src/main.c    **** 			}
 567:Src/main.c    **** 			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 568:Src/main.c    **** 				//TODO: implementare errore
 569:Src/main.c    **** 			}
 570:Src/main.c    **** 		}else{
 571:Src/main.c    **** 			//TODO: riattivare interrupt
 572:Src/main.c    **** 			HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 573:Src/main.c    **** 		}*/
 574:Src/main.c    **** 	//}
 575:Src/main.c    **** }
 795              		.loc 1 575 0
 796 0064 E5E7     		b	.L52
 797              	.L58:
 798 0066 00BF     		.align	2
 799              	.L57:
 800 0068 00000000 		.word	txt
 801 006c 00000000 		.word	can1
 802 0070 00000000 		.word	.LC4
 803 0074 00000000 		.word	huart3
 804 0078 00040240 		.word	1073873920
 805 007c 00000000 		.word	hcan1
 806 0080 0C000000 		.word	.LC5
 807              		.cfi_endproc
 808              	.LFE155:
 810              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 811              		.align	1
 812              		.global	HAL_CAN_TxMailbox1CompleteCallback
 813              		.syntax unified
 814              		.thumb
 815              		.thumb_func
 816              		.fpu fpv5-d16
 818              	HAL_CAN_TxMailbox1CompleteCallback:
 819              	.LFB156:
 576:Src/main.c    **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 820              		.loc 1 576 0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              	.LVL61:
 825 0000 38B5     		push	{r3, r4, r5, lr}
 826              	.LCFI13:
 827              		.cfi_def_cfa_offset 16
 828              		.cfi_offset 3, -16
 829              		.cfi_offset 4, -12
 830              		.cfi_offset 5, -8
 831              		.cfi_offset 14, -4
 832 0002 0546     		mov	r5, r0
 577:Src/main.c    **** 	sprintf(txt,"mb1: %d %d\r\n" ,can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
 833              		.loc 1 577 0
 834 0004 194A     		ldr	r2, .L64
 835 0006 1A4C     		ldr	r4, .L64+4
 836 0008 92F86230 		ldrb	r3, [r2, #98]	@ zero_extendqisi2
 837 000c 92F86320 		ldrb	r2, [r2, #99]	@ zero_extendqisi2
 838 0010 1849     		ldr	r1, .L64+8
ARM GAS  /tmp/cc7Gx9Zv.s 			page 26


 839 0012 2046     		mov	r0, r4
 840              	.LVL62:
 841 0014 FFF7FEFF 		bl	sprintf
 842              	.LVL63:
 578:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 843              		.loc 1 578 0
 844 0018 2046     		mov	r0, r4
 845 001a FFF7FEFF 		bl	strlen
 846              	.LVL64:
 847 001e 0A23     		movs	r3, #10
 848 0020 82B2     		uxth	r2, r0
 849 0022 2146     		mov	r1, r4
 850 0024 1448     		ldr	r0, .L64+12
 851 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 852              	.LVL65:
 579:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 853              		.loc 1 579 0
 854 002a 0121     		movs	r1, #1
 855 002c 1348     		ldr	r0, .L64+16
 856 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 857              	.LVL66:
 580:Src/main.c    **** 	if(hcan == &hcan1){
 858              		.loc 1 580 0
 859 0032 134B     		ldr	r3, .L64+20
 860 0034 9D42     		cmp	r5, r3
 861 0036 00D0     		beq	.L63
 862              	.L59:
 863 0038 38BD     		pop	{r3, r4, r5, pc}
 864              	.LVL67:
 865              	.L63:
 581:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 866              		.loc 1 581 0
 867 003a 0C48     		ldr	r0, .L64
 868 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 869              	.LVL68:
 870 0040 58B1     		cbz	r0, .L61
 582:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 871              		.loc 1 582 0
 872 0042 0A48     		ldr	r0, .L64
 873 0044 FFF7FEFF 		bl	CAN_Send_IT
 874              	.LVL69:
 875 0048 0028     		cmp	r0, #0
 876 004a F5D0     		beq	.L59
 583:Src/main.c    **** 				//TODO: implementare errore
 584:Src/main.c    **** 			}else{
 585:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 877              		.loc 1 585 0
 878 004c 0A23     		movs	r3, #10
 879 004e 0622     		movs	r2, #6
 880 0050 0C49     		ldr	r1, .L64+24
 881 0052 0948     		ldr	r0, .L64+12
 882 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 883              	.LVL70:
 884 0058 38BD     		pop	{r3, r4, r5, pc}
 885              	.LVL71:
 886              	.L61:
 586:Src/main.c    **** 			}
ARM GAS  /tmp/cc7Gx9Zv.s 			page 27


 587:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 887              		.loc 1 587 0
 888 005a 0448     		ldr	r0, .L64
 889 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 890              	.LVL72:
 891 0060 0028     		cmp	r0, #0
 892 0062 E9D0     		beq	.L59
 588:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 589:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 893              		.loc 1 589 0
 894 0064 0148     		ldr	r0, .L64
 895 0066 FFF7FEFF 		bl	CAN_Send_IT
 896              	.LVL73:
 590:Src/main.c    **** 				//TODO: implementare errore
 591:Src/main.c    **** 			}
 592:Src/main.c    **** 		}else{
 593:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 594:Src/main.c    **** 		}
 595:Src/main.c    **** 	}
 596:Src/main.c    **** }
 897              		.loc 1 596 0
 898 006a E5E7     		b	.L59
 899              	.L65:
 900              		.align	2
 901              	.L64:
 902 006c 00000000 		.word	can1
 903 0070 00000000 		.word	txt
 904 0074 00000000 		.word	.LC6
 905 0078 00000000 		.word	huart3
 906 007c 00040240 		.word	1073873920
 907 0080 00000000 		.word	hcan1
 908 0084 0C000000 		.word	.LC5
 909              		.cfi_endproc
 910              	.LFE156:
 912              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 913              		.align	1
 914              		.global	HAL_CAN_TxMailbox2CompleteCallback
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
 918              		.fpu fpv5-d16
 920              	HAL_CAN_TxMailbox2CompleteCallback:
 921              	.LFB157:
 597:Src/main.c    **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 922              		.loc 1 597 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              	.LVL74:
 927 0000 38B5     		push	{r3, r4, r5, lr}
 928              	.LCFI14:
 929              		.cfi_def_cfa_offset 16
 930              		.cfi_offset 3, -16
 931              		.cfi_offset 4, -12
 932              		.cfi_offset 5, -8
 933              		.cfi_offset 14, -4
 934 0002 0546     		mov	r5, r0
ARM GAS  /tmp/cc7Gx9Zv.s 			page 28


 598:Src/main.c    **** 	sprintf(txt,"mb2: %d %d\r\n", can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
 935              		.loc 1 598 0
 936 0004 194A     		ldr	r2, .L71
 937 0006 1A4C     		ldr	r4, .L71+4
 938 0008 92F86230 		ldrb	r3, [r2, #98]	@ zero_extendqisi2
 939 000c 92F86320 		ldrb	r2, [r2, #99]	@ zero_extendqisi2
 940 0010 1849     		ldr	r1, .L71+8
 941 0012 2046     		mov	r0, r4
 942              	.LVL75:
 943 0014 FFF7FEFF 		bl	sprintf
 944              	.LVL76:
 599:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 945              		.loc 1 599 0
 946 0018 2046     		mov	r0, r4
 947 001a FFF7FEFF 		bl	strlen
 948              	.LVL77:
 949 001e 0A23     		movs	r3, #10
 950 0020 82B2     		uxth	r2, r0
 951 0022 2146     		mov	r1, r4
 952 0024 1448     		ldr	r0, .L71+12
 953 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 954              	.LVL78:
 600:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 955              		.loc 1 600 0
 956 002a 0121     		movs	r1, #1
 957 002c 1348     		ldr	r0, .L71+16
 958 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 959              	.LVL79:
 601:Src/main.c    **** 	if(hcan == &hcan1){
 960              		.loc 1 601 0
 961 0032 134B     		ldr	r3, .L71+20
 962 0034 9D42     		cmp	r5, r3
 963 0036 00D0     		beq	.L70
 964              	.L66:
 965 0038 38BD     		pop	{r3, r4, r5, pc}
 966              	.LVL80:
 967              	.L70:
 602:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 968              		.loc 1 602 0
 969 003a 0C48     		ldr	r0, .L71
 970 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 971              	.LVL81:
 972 0040 58B1     		cbz	r0, .L68
 603:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 973              		.loc 1 603 0
 974 0042 0A48     		ldr	r0, .L71
 975 0044 FFF7FEFF 		bl	CAN_Send_IT
 976              	.LVL82:
 977 0048 0028     		cmp	r0, #0
 978 004a F5D0     		beq	.L66
 604:Src/main.c    **** 				//TODO: implementare errore
 605:Src/main.c    **** 			}else{
 606:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 979              		.loc 1 606 0
 980 004c 0A23     		movs	r3, #10
 981 004e 0622     		movs	r2, #6
 982 0050 0C49     		ldr	r1, .L71+24
ARM GAS  /tmp/cc7Gx9Zv.s 			page 29


 983 0052 0948     		ldr	r0, .L71+12
 984 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 985              	.LVL83:
 986 0058 38BD     		pop	{r3, r4, r5, pc}
 987              	.LVL84:
 988              	.L68:
 607:Src/main.c    **** 			}
 608:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 989              		.loc 1 608 0
 990 005a 0448     		ldr	r0, .L71
 991 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 992              	.LVL85:
 993 0060 0028     		cmp	r0, #0
 994 0062 E9D0     		beq	.L66
 609:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 610:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 995              		.loc 1 610 0
 996 0064 0148     		ldr	r0, .L71
 997 0066 FFF7FEFF 		bl	CAN_Send_IT
 998              	.LVL86:
 611:Src/main.c    **** 				//TODO: implementare errore
 612:Src/main.c    **** 			}
 613:Src/main.c    **** 		}else{
 614:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 615:Src/main.c    **** 		}
 616:Src/main.c    **** 	}
 617:Src/main.c    **** }
 999              		.loc 1 617 0
 1000 006a E5E7     		b	.L66
 1001              	.L72:
 1002              		.align	2
 1003              	.L71:
 1004 006c 00000000 		.word	can1
 1005 0070 00000000 		.word	txt
 1006 0074 00000000 		.word	.LC7
 1007 0078 00000000 		.word	huart3
 1008 007c 00040240 		.word	1073873920
 1009 0080 00000000 		.word	hcan1
 1010 0084 0C000000 		.word	.LC5
 1011              		.cfi_endproc
 1012              	.LFE157:
 1014              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1015              		.align	1
 1016              		.global	HAL_CAN_ErrorCallback
 1017              		.syntax unified
 1018              		.thumb
 1019              		.thumb_func
 1020              		.fpu fpv5-d16
 1022              	HAL_CAN_ErrorCallback:
 1023              	.LFB158:
 618:Src/main.c    **** void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 1024              		.loc 1 618 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 1028              	.LVL87:
 1029 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/cc7Gx9Zv.s 			page 30


 1030              	.LCFI15:
 1031              		.cfi_def_cfa_offset 16
 1032              		.cfi_offset 3, -16
 1033              		.cfi_offset 4, -12
 1034              		.cfi_offset 5, -8
 1035              		.cfi_offset 14, -4
 1036 0002 0546     		mov	r5, r0
 619:Src/main.c    **** 	sprintf(txt,"--- Errore ---: %d\r\n",(int)hcan->ErrorCode);
 1037              		.loc 1 619 0
 1038 0004 426A     		ldr	r2, [r0, #36]
 1039 0006 0B4C     		ldr	r4, .L77
 1040 0008 0B49     		ldr	r1, .L77+4
 1041 000a 2046     		mov	r0, r4
 1042              	.LVL88:
 1043 000c FFF7FEFF 		bl	sprintf
 1044              	.LVL89:
 620:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 1045              		.loc 1 620 0
 1046 0010 2046     		mov	r0, r4
 1047 0012 FFF7FEFF 		bl	strlen
 1048              	.LVL90:
 1049 0016 0A23     		movs	r3, #10
 1050 0018 82B2     		uxth	r2, r0
 1051 001a 2146     		mov	r1, r4
 1052 001c 0748     		ldr	r0, .L77+8
 1053 001e FFF7FEFF 		bl	HAL_UART_Transmit
 1054              	.LVL91:
 621:Src/main.c    **** 	if(hcan == &hcan1){
 1055              		.loc 1 621 0
 1056 0022 074B     		ldr	r3, .L77+12
 1057 0024 9D42     		cmp	r5, r3
 1058 0026 00D0     		beq	.L76
 1059              	.L73:
 1060 0028 38BD     		pop	{r3, r4, r5, pc}
 1061              	.LVL92:
 1062              	.L76:
 622:Src/main.c    **** 		CAN_Send_Bck(&can1);
 1063              		.loc 1 622 0
 1064 002a 0648     		ldr	r0, .L77+16
 1065 002c FFF7FEFF 		bl	CAN_Send_Bck
 1066              	.LVL93:
 623:Src/main.c    **** 	}
 624:Src/main.c    **** }
 1067              		.loc 1 624 0
 1068 0030 FAE7     		b	.L73
 1069              	.L78:
 1070 0032 00BF     		.align	2
 1071              	.L77:
 1072 0034 00000000 		.word	txt
 1073 0038 00000000 		.word	.LC8
 1074 003c 00000000 		.word	huart3
 1075 0040 00000000 		.word	hcan1
 1076 0044 00000000 		.word	can1
 1077              		.cfi_endproc
 1078              	.LFE158:
 1080              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1081              		.align	1
ARM GAS  /tmp/cc7Gx9Zv.s 			page 31


 1082              		.global	HAL_UART_RxCpltCallback
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu fpv5-d16
 1088              	HAL_UART_RxCpltCallback:
 1089              	.LFB159:
 625:Src/main.c    **** 
 626:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 1090              		.loc 1 626 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 0
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              	.LVL94:
 1095 0000 08B5     		push	{r3, lr}
 1096              	.LCFI16:
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 3, -8
 1099              		.cfi_offset 14, -4
 627:Src/main.c    **** 	if(huart == &huart3){
 1100              		.loc 1 627 0
 1101 0002 174B     		ldr	r3, .L87
 1102 0004 8342     		cmp	r3, r0
 1103 0006 00D0     		beq	.L85
 1104              	.LVL95:
 1105              	.L79:
 1106 0008 08BD     		pop	{r3, pc}
 1107              	.LVL96:
 1108              	.L85:
 628:Src/main.c    **** 		if((debug_rx[debug_rx_count] == '\r') | (debug_rx[debug_rx_count] == '\n')){
 1109              		.loc 1 628 0
 1110 000a 164B     		ldr	r3, .L87+4
 1111 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1112 000e 164B     		ldr	r3, .L87+8
 1113 0010 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1114 0012 0A2B     		cmp	r3, #10
 1115 0014 18BF     		it	ne
 1116 0016 0D2B     		cmpne	r3, #13
 1117 0018 10D1     		bne	.L81
 629:Src/main.c    **** 			debug_msg_arrived = 1; //set flag
 1118              		.loc 1 629 0
 1119 001a 0122     		movs	r2, #1
 1120 001c 134B     		ldr	r3, .L87+12
 1121 001e 1A70     		strb	r2, [r3]
 630:Src/main.c    **** 			debug_rx[debug_rx_count] = 0; //set end of the string
 1122              		.loc 1 630 0
 1123 0020 0023     		movs	r3, #0
 1124 0022 114A     		ldr	r2, .L87+8
 1125 0024 5354     		strb	r3, [r2, r1]
 631:Src/main.c    **** 			debug_rx_count = 0; //reset counter
 1126              		.loc 1 631 0
 1127 0026 0F4A     		ldr	r2, .L87+4
 1128 0028 1370     		strb	r3, [r2]
 1129              	.LVL97:
 1130              	.L82:
 632:Src/main.c    **** 		}else{
 633:Src/main.c    **** 			if(debug_rx_count == MAX_DEBUG_RX_L){
ARM GAS  /tmp/cc7Gx9Zv.s 			page 32


 634:Src/main.c    **** 				//overflow
 635:Src/main.c    **** 				debug_rx_count = 0; //reset counter for overflow
 636:Src/main.c    **** 			}else{
 637:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)&debug_rx[debug_rx_count], 1, 10); //retransmit char
 638:Src/main.c    **** 				debug_rx_count++;
 639:Src/main.c    **** 			}
 640:Src/main.c    **** 		}
 641:Src/main.c    **** 		HAL_UART_Receive_IT(&huart3,(uint8_t*) &debug_rx[debug_rx_count], 1); //activate rx interrupt for
 1131              		.loc 1 641 0
 1132 002a 0E4B     		ldr	r3, .L87+4
 1133 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1134 002e 0122     		movs	r2, #1
 1135 0030 0D49     		ldr	r1, .L87+8
 1136 0032 1944     		add	r1, r1, r3
 1137 0034 0A48     		ldr	r0, .L87
 1138 0036 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1139              	.LVL98:
 642:Src/main.c    **** 	}
 643:Src/main.c    **** }
 1140              		.loc 1 643 0
 1141 003a E5E7     		b	.L79
 1142              	.LVL99:
 1143              	.L81:
 633:Src/main.c    **** 				//overflow
 1144              		.loc 1 633 0
 1145 003c 1429     		cmp	r1, #20
 1146 003e 0BD0     		beq	.L86
 637:Src/main.c    **** 				debug_rx_count++;
 1147              		.loc 1 637 0
 1148 0040 0A23     		movs	r3, #10
 1149 0042 0122     		movs	r2, #1
 1150 0044 0848     		ldr	r0, .L87+8
 1151              	.LVL100:
 1152 0046 0144     		add	r1, r1, r0
 1153 0048 0548     		ldr	r0, .L87
 1154 004a FFF7FEFF 		bl	HAL_UART_Transmit
 1155              	.LVL101:
 638:Src/main.c    **** 			}
 1156              		.loc 1 638 0
 1157 004e 054A     		ldr	r2, .L87+4
 1158 0050 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1159 0052 0133     		adds	r3, r3, #1
 1160 0054 1370     		strb	r3, [r2]
 1161 0056 E8E7     		b	.L82
 1162              	.LVL102:
 1163              	.L86:
 635:Src/main.c    **** 			}else{
 1164              		.loc 1 635 0
 1165 0058 0022     		movs	r2, #0
 1166 005a 024B     		ldr	r3, .L87+4
 1167 005c 1A70     		strb	r2, [r3]
 1168 005e E4E7     		b	.L82
 1169              	.L88:
 1170              		.align	2
 1171              	.L87:
 1172 0060 00000000 		.word	huart3
 1173 0064 00000000 		.word	debug_rx_count
ARM GAS  /tmp/cc7Gx9Zv.s 			page 33


 1174 0068 00000000 		.word	debug_rx
 1175 006c 00000000 		.word	debug_msg_arrived
 1176              		.cfi_endproc
 1177              	.LFE159:
 1179              		.section	.text.Error_Handler,"ax",%progbits
 1180              		.align	1
 1181              		.global	Error_Handler
 1182              		.syntax unified
 1183              		.thumb
 1184              		.thumb_func
 1185              		.fpu fpv5-d16
 1187              	Error_Handler:
 1188              	.LFB160:
 644:Src/main.c    **** /* USER CODE END 4 */
 645:Src/main.c    **** 
 646:Src/main.c    **** /**
 647:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 648:Src/main.c    ****   * @retval None
 649:Src/main.c    ****   */
 650:Src/main.c    **** void Error_Handler(void)
 651:Src/main.c    **** {
 1189              		.loc 1 651 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193 0000 10B5     		push	{r4, lr}
 1194              	.LCFI17:
 1195              		.cfi_def_cfa_offset 8
 1196              		.cfi_offset 4, -8
 1197              		.cfi_offset 14, -4
 652:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 653:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 654:Src/main.c    ****   HAL_GPIO_TogglePin(LED_blue_GPIO_Port,LED_blue_Pin);
 1198              		.loc 1 654 0
 1199 0002 094C     		ldr	r4, .L91
 1200 0004 8021     		movs	r1, #128
 1201 0006 2046     		mov	r0, r4
 1202 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1203              	.LVL103:
 655:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 1204              		.loc 1 655 0
 1205 000c 0121     		movs	r1, #1
 1206 000e 2046     		mov	r0, r4
 1207 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1208              	.LVL104:
 656:Src/main.c    ****   HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 1209              		.loc 1 656 0
 1210 0014 4FF48041 		mov	r1, #16384
 1211 0018 2046     		mov	r0, r4
 1212 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1213              	.LVL105:
 657:Src/main.c    **** 
 658:Src/main.c    **** 	HAL_Delay(100);
 1214              		.loc 1 658 0
 1215 001e 6420     		movs	r0, #100
 1216 0020 FFF7FEFF 		bl	HAL_Delay
 1217              	.LVL106:
ARM GAS  /tmp/cc7Gx9Zv.s 			page 34


 1218 0024 10BD     		pop	{r4, pc}
 1219              	.L92:
 1220 0026 00BF     		.align	2
 1221              	.L91:
 1222 0028 00040240 		.word	1073873920
 1223              		.cfi_endproc
 1224              	.LFE160:
 1226              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1227              		.align	1
 1228              		.syntax unified
 1229              		.thumb
 1230              		.thumb_func
 1231              		.fpu fpv5-d16
 1233              	MX_USART3_UART_Init:
 1234              	.LFB148:
 380:Src/main.c    **** 
 1235              		.loc 1 380 0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 0, uses_anonymous_args = 0
 1239 0000 08B5     		push	{r3, lr}
 1240              	.LCFI18:
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 3, -8
 1243              		.cfi_offset 14, -4
 389:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 1244              		.loc 1 389 0
 1245 0002 0B48     		ldr	r0, .L97
 1246 0004 0B4B     		ldr	r3, .L97+4
 1247 0006 0360     		str	r3, [r0]
 390:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1248              		.loc 1 390 0
 1249 0008 0B4B     		ldr	r3, .L97+8
 1250 000a 4360     		str	r3, [r0, #4]
 391:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1251              		.loc 1 391 0
 1252 000c 0023     		movs	r3, #0
 1253 000e 8360     		str	r3, [r0, #8]
 392:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 1254              		.loc 1 392 0
 1255 0010 C360     		str	r3, [r0, #12]
 393:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1256              		.loc 1 393 0
 1257 0012 0361     		str	r3, [r0, #16]
 394:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1258              		.loc 1 394 0
 1259 0014 0C22     		movs	r2, #12
 1260 0016 4261     		str	r2, [r0, #20]
 395:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1261              		.loc 1 395 0
 1262 0018 8361     		str	r3, [r0, #24]
 396:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1263              		.loc 1 396 0
 1264 001a C361     		str	r3, [r0, #28]
 397:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1265              		.loc 1 397 0
 1266 001c 0362     		str	r3, [r0, #32]
ARM GAS  /tmp/cc7Gx9Zv.s 			page 35


 398:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1267              		.loc 1 398 0
 1268 001e 4362     		str	r3, [r0, #36]
 399:Src/main.c    ****   {
 1269              		.loc 1 399 0
 1270 0020 FFF7FEFF 		bl	HAL_UART_Init
 1271              	.LVL107:
 1272 0024 00B9     		cbnz	r0, .L96
 1273              	.L93:
 1274 0026 08BD     		pop	{r3, pc}
 1275              	.L96:
 401:Src/main.c    ****   }
 1276              		.loc 1 401 0
 1277 0028 FFF7FEFF 		bl	Error_Handler
 1278              	.LVL108:
 407:Src/main.c    **** 
 1279              		.loc 1 407 0
 1280 002c FBE7     		b	.L93
 1281              	.L98:
 1282 002e 00BF     		.align	2
 1283              	.L97:
 1284 0030 00000000 		.word	huart3
 1285 0034 00480040 		.word	1073760256
 1286 0038 80841E00 		.word	2000000
 1287              		.cfi_endproc
 1288              	.LFE148:
 1290              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1291              		.align	1
 1292              		.syntax unified
 1293              		.thumb
 1294              		.thumb_func
 1295              		.fpu fpv5-d16
 1297              	MX_CAN1_Init:
 1298              	.LFB145:
 270:Src/main.c    **** 
 1299              		.loc 1 270 0
 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303 0000 08B5     		push	{r3, lr}
 1304              	.LCFI19:
 1305              		.cfi_def_cfa_offset 8
 1306              		.cfi_offset 3, -8
 1307              		.cfi_offset 14, -4
 279:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 1308              		.loc 1 279 0
 1309 0002 0E48     		ldr	r0, .L103
 1310 0004 0E4B     		ldr	r3, .L103+4
 1311 0006 0360     		str	r3, [r0]
 280:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1312              		.loc 1 280 0
 1313 0008 0323     		movs	r3, #3
 1314 000a 4360     		str	r3, [r0, #4]
 281:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1315              		.loc 1 281 0
 1316 000c 0023     		movs	r3, #0
 1317 000e 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/cc7Gx9Zv.s 			page 36


 282:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 1318              		.loc 1 282 0
 1319 0010 C360     		str	r3, [r0, #12]
 283:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 1320              		.loc 1 283 0
 1321 0012 4FF46022 		mov	r2, #917504
 1322 0016 0261     		str	r2, [r0, #16]
 284:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1323              		.loc 1 284 0
 1324 0018 4FF48012 		mov	r2, #1048576
 1325 001c 4261     		str	r2, [r0, #20]
 285:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 1326              		.loc 1 285 0
 1327 001e 0376     		strb	r3, [r0, #24]
 286:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 1328              		.loc 1 286 0
 1329 0020 4376     		strb	r3, [r0, #25]
 287:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 1330              		.loc 1 287 0
 1331 0022 0122     		movs	r2, #1
 1332 0024 8276     		strb	r2, [r0, #26]
 288:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1333              		.loc 1 288 0
 1334 0026 C276     		strb	r2, [r0, #27]
 289:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 1335              		.loc 1 289 0
 1336 0028 0377     		strb	r3, [r0, #28]
 290:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1337              		.loc 1 290 0
 1338 002a 4377     		strb	r3, [r0, #29]
 291:Src/main.c    ****   {
 1339              		.loc 1 291 0
 1340 002c FFF7FEFF 		bl	HAL_CAN_Init
 1341              	.LVL109:
 1342 0030 00B9     		cbnz	r0, .L102
 1343              	.L99:
 1344 0032 08BD     		pop	{r3, pc}
 1345              	.L102:
 293:Src/main.c    ****   }
 1346              		.loc 1 293 0
 1347 0034 FFF7FEFF 		bl	Error_Handler
 1348              	.LVL110:
 299:Src/main.c    **** 
 1349              		.loc 1 299 0
 1350 0038 FBE7     		b	.L99
 1351              	.L104:
 1352 003a 00BF     		.align	2
 1353              	.L103:
 1354 003c 00000000 		.word	hcan1
 1355 0040 00640040 		.word	1073767424
 1356              		.cfi_endproc
 1357              	.LFE145:
 1359              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1360              		.align	1
 1361              		.syntax unified
 1362              		.thumb
 1363              		.thumb_func
ARM GAS  /tmp/cc7Gx9Zv.s 			page 37


 1364              		.fpu fpv5-d16
 1366              	MX_TIM2_Init:
 1367              	.LFB147:
 335:Src/main.c    **** 
 1368              		.loc 1 335 0
 1369              		.cfi_startproc
 1370              		@ args = 0, pretend = 0, frame = 32
 1371              		@ frame_needed = 0, uses_anonymous_args = 0
 1372 0000 00B5     		push	{lr}
 1373              	.LCFI20:
 1374              		.cfi_def_cfa_offset 4
 1375              		.cfi_offset 14, -4
 1376 0002 89B0     		sub	sp, sp, #36
 1377              	.LCFI21:
 1378              		.cfi_def_cfa_offset 40
 341:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1379              		.loc 1 341 0
 1380 0004 0023     		movs	r3, #0
 1381 0006 0493     		str	r3, [sp, #16]
 1382 0008 0593     		str	r3, [sp, #20]
 1383 000a 0693     		str	r3, [sp, #24]
 1384 000c 0793     		str	r3, [sp, #28]
 342:Src/main.c    **** 
 1385              		.loc 1 342 0
 1386 000e 0193     		str	r3, [sp, #4]
 1387 0010 0293     		str	r3, [sp, #8]
 1388 0012 0393     		str	r3, [sp, #12]
 347:Src/main.c    ****   htim2.Init.Prescaler = 108;
 1389              		.loc 1 347 0
 1390 0014 1548     		ldr	r0, .L113
 1391 0016 4FF08042 		mov	r2, #1073741824
 1392 001a 0260     		str	r2, [r0]
 348:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1393              		.loc 1 348 0
 1394 001c 6C22     		movs	r2, #108
 1395 001e 4260     		str	r2, [r0, #4]
 349:Src/main.c    ****   htim2.Init.Period = 1000;
 1396              		.loc 1 349 0
 1397 0020 8360     		str	r3, [r0, #8]
 350:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1398              		.loc 1 350 0
 1399 0022 4FF47A72 		mov	r2, #1000
 1400 0026 C260     		str	r2, [r0, #12]
 351:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1401              		.loc 1 351 0
 1402 0028 0361     		str	r3, [r0, #16]
 352:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1403              		.loc 1 352 0
 1404 002a 8361     		str	r3, [r0, #24]
 353:Src/main.c    ****   {
 1405              		.loc 1 353 0
 1406 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1407              	.LVL111:
 1408 0030 98B9     		cbnz	r0, .L110
 1409              	.L106:
 357:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1410              		.loc 1 357 0
ARM GAS  /tmp/cc7Gx9Zv.s 			page 38


 1411 0032 08A9     		add	r1, sp, #32
 1412 0034 4FF48053 		mov	r3, #4096
 1413 0038 41F8103D 		str	r3, [r1, #-16]!
 358:Src/main.c    ****   {
 1414              		.loc 1 358 0
 1415 003c 0B48     		ldr	r0, .L113
 1416 003e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1417              	.LVL112:
 1418 0042 68B9     		cbnz	r0, .L111
 1419              	.L107:
 362:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1420              		.loc 1 362 0
 1421 0044 0023     		movs	r3, #0
 1422 0046 0193     		str	r3, [sp, #4]
 363:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1423              		.loc 1 363 0
 1424 0048 0393     		str	r3, [sp, #12]
 364:Src/main.c    ****   {
 1425              		.loc 1 364 0
 1426 004a 01A9     		add	r1, sp, #4
 1427 004c 0748     		ldr	r0, .L113
 1428 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1429              	.LVL113:
 1430 0052 40B9     		cbnz	r0, .L112
 1431              	.L105:
 372:Src/main.c    **** 
 1432              		.loc 1 372 0
 1433 0054 09B0     		add	sp, sp, #36
 1434              	.LCFI22:
 1435              		.cfi_remember_state
 1436              		.cfi_def_cfa_offset 4
 1437              		@ sp needed
 1438 0056 5DF804FB 		ldr	pc, [sp], #4
 1439              	.L110:
 1440              	.LCFI23:
 1441              		.cfi_restore_state
 355:Src/main.c    ****   }
 1442              		.loc 1 355 0
 1443 005a FFF7FEFF 		bl	Error_Handler
 1444              	.LVL114:
 1445 005e E8E7     		b	.L106
 1446              	.L111:
 360:Src/main.c    ****   }
 1447              		.loc 1 360 0
 1448 0060 FFF7FEFF 		bl	Error_Handler
 1449              	.LVL115:
 1450 0064 EEE7     		b	.L107
 1451              	.L112:
 366:Src/main.c    ****   }
 1452              		.loc 1 366 0
 1453 0066 FFF7FEFF 		bl	Error_Handler
 1454              	.LVL116:
 372:Src/main.c    **** 
 1455              		.loc 1 372 0
 1456 006a F3E7     		b	.L105
 1457              	.L114:
 1458              		.align	2
ARM GAS  /tmp/cc7Gx9Zv.s 			page 39


 1459              	.L113:
 1460 006c 00000000 		.word	htim2
 1461              		.cfi_endproc
 1462              	.LFE147:
 1464              		.section	.text.SystemClock_Config,"ax",%progbits
 1465              		.align	1
 1466              		.global	SystemClock_Config
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1470              		.fpu fpv5-d16
 1472              	SystemClock_Config:
 1473              	.LFB143:
 181:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1474              		.loc 1 181 0
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 224
 1477              		@ frame_needed = 0, uses_anonymous_args = 0
 1478 0000 10B5     		push	{r4, lr}
 1479              	.LCFI24:
 1480              		.cfi_def_cfa_offset 8
 1481              		.cfi_offset 4, -8
 1482              		.cfi_offset 14, -4
 1483 0002 B8B0     		sub	sp, sp, #224
 1484              	.LCFI25:
 1485              		.cfi_def_cfa_offset 232
 182:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1486              		.loc 1 182 0
 1487 0004 3422     		movs	r2, #52
 1488 0006 0021     		movs	r1, #0
 1489 0008 2BA8     		add	r0, sp, #172
 1490 000a FFF7FEFF 		bl	memset
 1491              	.LVL117:
 183:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1492              		.loc 1 183 0
 1493 000e 0024     		movs	r4, #0
 1494 0010 2694     		str	r4, [sp, #152]
 1495 0012 2794     		str	r4, [sp, #156]
 1496 0014 2894     		str	r4, [sp, #160]
 1497 0016 2994     		str	r4, [sp, #164]
 1498 0018 2A94     		str	r4, [sp, #168]
 184:Src/main.c    **** 
 1499              		.loc 1 184 0
 1500 001a 9022     		movs	r2, #144
 1501 001c 2146     		mov	r1, r4
 1502 001e 02A8     		add	r0, sp, #8
 1503 0020 FFF7FEFF 		bl	memset
 1504              	.LVL118:
 1505              	.LBB7:
 188:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1506              		.loc 1 188 0
 1507 0024 294B     		ldr	r3, .L125
 1508 0026 1A6C     		ldr	r2, [r3, #64]
 1509 0028 42F08052 		orr	r2, r2, #268435456
 1510 002c 1A64     		str	r2, [r3, #64]
 1511 002e 1B6C     		ldr	r3, [r3, #64]
 1512 0030 03F08053 		and	r3, r3, #268435456
ARM GAS  /tmp/cc7Gx9Zv.s 			page 40


 1513 0034 0093     		str	r3, [sp]
 1514 0036 009B     		ldr	r3, [sp]
 1515              	.LBE7:
 1516              	.LBB8:
 189:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1517              		.loc 1 189 0
 1518 0038 254B     		ldr	r3, .L125+4
 1519 003a 1A68     		ldr	r2, [r3]
 1520 003c 42F44042 		orr	r2, r2, #49152
 1521 0040 1A60     		str	r2, [r3]
 1522 0042 1B68     		ldr	r3, [r3]
 1523 0044 03F44043 		and	r3, r3, #49152
 1524 0048 0193     		str	r3, [sp, #4]
 1525 004a 019B     		ldr	r3, [sp, #4]
 1526              	.LBE8:
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1527              		.loc 1 192 0
 1528 004c 0223     		movs	r3, #2
 1529 004e 2B93     		str	r3, [sp, #172]
 193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1530              		.loc 1 193 0
 1531 0050 0122     		movs	r2, #1
 1532 0052 2E92     		str	r2, [sp, #184]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1533              		.loc 1 194 0
 1534 0054 1022     		movs	r2, #16
 1535 0056 2F92     		str	r2, [sp, #188]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1536              		.loc 1 195 0
 1537 0058 3193     		str	r3, [sp, #196]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1538              		.loc 1 196 0
 1539 005a 3294     		str	r4, [sp, #200]
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 1540              		.loc 1 197 0
 1541 005c 0822     		movs	r2, #8
 1542 005e 3392     		str	r2, [sp, #204]
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1543              		.loc 1 198 0
 1544 0060 D822     		movs	r2, #216
 1545 0062 3492     		str	r2, [sp, #208]
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 1546              		.loc 1 199 0
 1547 0064 3593     		str	r3, [sp, #212]
 200:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1548              		.loc 1 200 0
 1549 0066 0923     		movs	r3, #9
 1550 0068 3693     		str	r3, [sp, #216]
 201:Src/main.c    ****   {
 1551              		.loc 1 201 0
 1552 006a 2BA8     		add	r0, sp, #172
 1553 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1554              	.LVL119:
 1555 0070 F8B9     		cbnz	r0, .L121
 1556              	.L116:
 207:Src/main.c    ****   {
 1557              		.loc 1 207 0
ARM GAS  /tmp/cc7Gx9Zv.s 			page 41


 1558 0072 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1559              	.LVL120:
 1560 0076 F8B9     		cbnz	r0, .L122
 1561              	.L117:
 213:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1562              		.loc 1 213 0
 1563 0078 0F23     		movs	r3, #15
 1564 007a 2693     		str	r3, [sp, #152]
 215:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1565              		.loc 1 215 0
 1566 007c 0223     		movs	r3, #2
 1567 007e 2793     		str	r3, [sp, #156]
 216:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1568              		.loc 1 216 0
 1569 0080 0023     		movs	r3, #0
 1570 0082 2893     		str	r3, [sp, #160]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1571              		.loc 1 217 0
 1572 0084 4FF4A053 		mov	r3, #5120
 1573 0088 2993     		str	r3, [sp, #164]
 218:Src/main.c    **** 
 1574              		.loc 1 218 0
 1575 008a 4FF48053 		mov	r3, #4096
 1576 008e 2A93     		str	r3, [sp, #168]
 220:Src/main.c    ****   {
 1577              		.loc 1 220 0
 1578 0090 0721     		movs	r1, #7
 1579 0092 26A8     		add	r0, sp, #152
 1580 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1581              	.LVL121:
 1582 0098 88B9     		cbnz	r0, .L123
 1583              	.L118:
 224:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 1584              		.loc 1 224 0
 1585 009a 0E4B     		ldr	r3, .L125+8
 1586 009c 0293     		str	r3, [sp, #8]
 226:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1587              		.loc 1 226 0
 1588 009e 0023     		movs	r3, #0
 1589 00a0 1593     		str	r3, [sp, #84]
 227:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 1590              		.loc 1 227 0
 1591 00a2 2193     		str	r3, [sp, #132]
 228:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1592              		.loc 1 228 0
 1593 00a4 2293     		str	r3, [sp, #136]
 229:Src/main.c    ****   {
 1594              		.loc 1 229 0
 1595 00a6 02A8     		add	r0, sp, #8
 1596 00a8 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1597              	.LVL122:
 1598 00ac 50B9     		cbnz	r0, .L124
 1599              	.L115:
 233:Src/main.c    **** 
 1600              		.loc 1 233 0
 1601 00ae 38B0     		add	sp, sp, #224
 1602              	.LCFI26:
ARM GAS  /tmp/cc7Gx9Zv.s 			page 42


 1603              		.cfi_remember_state
 1604              		.cfi_def_cfa_offset 8
 1605              		@ sp needed
 1606 00b0 10BD     		pop	{r4, pc}
 1607              	.L121:
 1608              	.LCFI27:
 1609              		.cfi_restore_state
 203:Src/main.c    ****   }
 1610              		.loc 1 203 0
 1611 00b2 FFF7FEFF 		bl	Error_Handler
 1612              	.LVL123:
 1613 00b6 DCE7     		b	.L116
 1614              	.L122:
 209:Src/main.c    ****   }
 1615              		.loc 1 209 0
 1616 00b8 FFF7FEFF 		bl	Error_Handler
 1617              	.LVL124:
 1618 00bc DCE7     		b	.L117
 1619              	.L123:
 222:Src/main.c    ****   }
 1620              		.loc 1 222 0
 1621 00be FFF7FEFF 		bl	Error_Handler
 1622              	.LVL125:
 1623 00c2 EAE7     		b	.L118
 1624              	.L124:
 231:Src/main.c    ****   }
 1625              		.loc 1 231 0
 1626 00c4 FFF7FEFF 		bl	Error_Handler
 1627              	.LVL126:
 233:Src/main.c    **** 
 1628              		.loc 1 233 0
 1629 00c8 F1E7     		b	.L115
 1630              	.L126:
 1631 00ca 00BF     		.align	2
 1632              	.L125:
 1633 00cc 00380240 		.word	1073887232
 1634 00d0 00700040 		.word	1073770496
 1635 00d4 0001A000 		.word	10486016
 1636              		.cfi_endproc
 1637              	.LFE143:
 1639              		.section	.text.main,"ax",%progbits
 1640              		.align	1
 1641              		.global	main
 1642              		.syntax unified
 1643              		.thumb
 1644              		.thumb_func
 1645              		.fpu fpv5-d16
 1647              	main:
 1648              	.LFB142:
  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1649              		.loc 1 91 0
 1650              		.cfi_startproc
 1651              		@ Volatile: function does not return.
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 1654 0000 08B5     		push	{r3, lr}
 1655              	.LCFI28:
ARM GAS  /tmp/cc7Gx9Zv.s 			page 43


 1656              		.cfi_def_cfa_offset 8
 1657              		.cfi_offset 3, -8
 1658              		.cfi_offset 14, -4
 100:Src/main.c    **** 
 1659              		.loc 1 100 0
 1660 0002 FFF7FEFF 		bl	HAL_Init
 1661              	.LVL127:
 107:Src/main.c    **** 
 1662              		.loc 1 107 0
 1663 0006 FFF7FEFF 		bl	SystemClock_Config
 1664              	.LVL128:
 114:Src/main.c    ****   MX_SDMMC1_SD_Init();
 1665              		.loc 1 114 0
 1666 000a FFF7FEFF 		bl	MX_GPIO_Init
 1667              	.LVL129:
 115:Src/main.c    ****   MX_USART3_UART_Init();
 1668              		.loc 1 115 0
 1669 000e FFF7FEFF 		bl	MX_SDMMC1_SD_Init
 1670              	.LVL130:
 116:Src/main.c    ****   MX_FATFS_Init();
 1671              		.loc 1 116 0
 1672 0012 FFF7FEFF 		bl	MX_USART3_UART_Init
 1673              	.LVL131:
 117:Src/main.c    ****   MX_CAN1_Init();
 1674              		.loc 1 117 0
 1675 0016 FFF7FEFF 		bl	MX_FATFS_Init
 1676              	.LVL132:
 118:Src/main.c    ****   MX_TIM2_Init();
 1677              		.loc 1 118 0
 1678 001a FFF7FEFF 		bl	MX_CAN1_Init
 1679              	.LVL133:
 119:Src/main.c    **** 
 1680              		.loc 1 119 0
 1681 001e FFF7FEFF 		bl	MX_TIM2_Init
 1682              	.LVL134:
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1683              		.loc 1 122 0
 1684 0022 FFF7FEFF 		bl	MX_NVIC_Init
 1685              	.LVL135:
 124:Src/main.c    **** 
 1686              		.loc 1 124 0
 1687 0026 2348     		ldr	r0, .L137
 1688 0028 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1689              	.LVL136:
 126:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 1690              		.loc 1 126 0
 1691 002c 224B     		ldr	r3, .L137+4
 1692 002e 1422     		movs	r2, #20
 1693 0030 83F8882D 		strb	r2, [r3, #3464]
 127:Src/main.c    ****   can1.hcan = &hcan1;
 1694              		.loc 1 127 0
 1695 0034 1322     		movs	r2, #19
 1696 0036 83F8892D 		strb	r2, [r3, #3465]
 128:Src/main.c    **** 
 1697              		.loc 1 128 0
 1698 003a 204A     		ldr	r2, .L137+8
 1699 003c 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/cc7Gx9Zv.s 			page 44


 130:Src/main.c    **** 
 1700              		.loc 1 130 0
 1701 003e FFF7FEFF 		bl	can_init
 1702              	.LVL137:
 132:Src/main.c    **** 
 1703              		.loc 1 132 0
 1704 0042 1F4B     		ldr	r3, .L137+12
 1705 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1706 0046 0122     		movs	r2, #1
 1707 0048 1E49     		ldr	r1, .L137+16
 1708 004a 1944     		add	r1, r1, r3
 1709 004c 1E48     		ldr	r0, .L137+20
 1710 004e FFF7FEFF 		bl	HAL_UART_Receive_IT
 1711              	.LVL138:
 134:Src/main.c    **** 
 1712              		.loc 1 134 0
 1713 0052 0022     		movs	r2, #0
 1714 0054 1D4B     		ldr	r3, .L137+24
 1715 0056 1A70     		strb	r2, [r3]
 136:Src/main.c    ****   
 1716              		.loc 1 136 0
 1717 0058 FFF7FEFF 		bl	init_sd
 1718              	.LVL139:
 1719 005c 01E0     		b	.L128
 1720              	.L134:
 161:Src/main.c    **** 	  }else if(current_state == STATE_IDLE){
 1721              		.loc 1 161 0
 1722 005e FFF7FEFF 		bl	init
 1723              	.LVL140:
 1724              	.L128:
 144:Src/main.c    **** 	  can1.dataTx[1] = 0;
 1725              		.loc 1 144 0
 1726 0062 154A     		ldr	r2, .L137+4
 1727 0064 0023     		movs	r3, #0
 1728 0066 1372     		strb	r3, [r2, #8]
 145:Src/main.c    **** 	  can1.dataTx[2] = 0;
 1729              		.loc 1 145 0
 1730 0068 5372     		strb	r3, [r2, #9]
 146:Src/main.c    **** 	  can1.dataTx[3] = 0;
 1731              		.loc 1 146 0
 1732 006a 9372     		strb	r3, [r2, #10]
 147:Src/main.c    **** 	  can1.dataTx[4] = counter >> 24;
 1733              		.loc 1 147 0
 1734 006c D372     		strb	r3, [r2, #11]
 148:Src/main.c    **** 	  can1.dataTx[5] = counter >> 16;
 1735              		.loc 1 148 0
 1736 006e 184B     		ldr	r3, .L137+28
 1737 0070 1B68     		ldr	r3, [r3]
 1738 0072 1916     		asrs	r1, r3, #24
 1739 0074 1173     		strb	r1, [r2, #12]
 149:Src/main.c    **** 	  can1.dataTx[6] = counter >> 8;
 1740              		.loc 1 149 0
 1741 0076 1914     		asrs	r1, r3, #16
 1742 0078 5173     		strb	r1, [r2, #13]
 150:Src/main.c    **** 	  can1.dataTx[7] = counter % 256;
 1743              		.loc 1 150 0
 1744 007a 1912     		asrs	r1, r3, #8
ARM GAS  /tmp/cc7Gx9Zv.s 			page 45


 1745 007c 9173     		strb	r1, [r2, #14]
 151:Src/main.c    **** 
 1746              		.loc 1 151 0
 1747 007e 5942     		rsbs	r1, r3, #0
 1748 0080 DBB2     		uxtb	r3, r3
 1749 0082 C9B2     		uxtb	r1, r1
 1750 0084 58BF     		it	pl
 1751 0086 4B42     		rsbpl	r3, r1, #0
 1752 0088 D373     		strb	r3, [r2, #15]
 153:Src/main.c    **** 
 1753              		.loc 1 153 0
 1754 008a A023     		movs	r3, #160
 1755 008c 1362     		str	r3, [r2, #32]
 160:Src/main.c    **** 		  init();
 1756              		.loc 1 160 0
 1757 008e 0F4B     		ldr	r3, .L137+24
 1758 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1759 0092 002B     		cmp	r3, #0
 1760 0094 E3D0     		beq	.L134
 162:Src/main.c    **** 		  idle();
 1761              		.loc 1 162 0
 1762 0096 012B     		cmp	r3, #1
 1763 0098 06D0     		beq	.L135
 164:Src/main.c    **** 		  setup();
 1764              		.loc 1 164 0
 1765 009a 022B     		cmp	r3, #2
 1766 009c 07D0     		beq	.L136
 166:Src/main.c    **** 		  run();
 1767              		.loc 1 166 0
 1768 009e 032B     		cmp	r3, #3
 1769 00a0 DFD1     		bne	.L128
 167:Src/main.c    **** 	  }
 1770              		.loc 1 167 0
 1771 00a2 FFF7FEFF 		bl	run
 1772              	.LVL141:
 1773 00a6 DCE7     		b	.L128
 1774              	.L135:
 163:Src/main.c    **** 	  }else if(current_state == STATE_SETUP){
 1775              		.loc 1 163 0
 1776 00a8 FFF7FEFF 		bl	idle
 1777              	.LVL142:
 1778 00ac D9E7     		b	.L128
 1779              	.L136:
 165:Src/main.c    **** 	  }else if(current_state == STATE_RUN){
 1780              		.loc 1 165 0
 1781 00ae FFF7FEFF 		bl	setup
 1782              	.LVL143:
 1783 00b2 D6E7     		b	.L128
 1784              	.L138:
 1785              		.align	2
 1786              	.L137:
 1787 00b4 00000000 		.word	htim2
 1788 00b8 00000000 		.word	can1
 1789 00bc 00000000 		.word	hcan1
 1790 00c0 00000000 		.word	debug_rx_count
 1791 00c4 00000000 		.word	debug_rx
 1792 00c8 00000000 		.word	huart3
ARM GAS  /tmp/cc7Gx9Zv.s 			page 46


 1793 00cc 00000000 		.word	current_state
 1794 00d0 00000000 		.word	.LANCHOR0
 1795              		.cfi_endproc
 1796              	.LFE142:
 1798              		.global	counter
 1799              		.comm	sFilter,40,4
 1800              		.comm	i_debug,1,1
 1801              		.comm	huart3,128,4
 1802              		.comm	htim2,64,4
 1803              		.comm	hsd1,132,4
 1804              		.comm	hcan1,40,4
 1805              		.comm	current_state,1,1
 1806              		.section	.bss.counter,"aw",%nobits
 1807              		.align	2
 1808              		.set	.LANCHOR0,. + 0
 1811              	counter:
 1812 0000 00000000 		.space	4
 1813              		.section	.rodata.HAL_CAN_ErrorCallback.str1.4,"aMS",%progbits,1
 1814              		.align	2
 1815              	.LC8:
 1816 0000 2D2D2D20 		.ascii	"--- Errore ---: %d\015\012\000"
 1816      4572726F 
 1816      7265202D 
 1816      2D2D3A20 
 1816      25640D0A 
 1817              		.section	.rodata.HAL_CAN_RxFifo0FullCallback.str1.4,"aMS",%progbits,1
 1818              		.align	2
 1819              	.LC2:
 1820 0000 4649464F 		.ascii	"FIFO0 FULL\015\012\000"
 1820      30204655 
 1820      4C4C0D0A 
 1820      00
 1821              		.section	.rodata.HAL_CAN_RxFifo1FullCallback.str1.4,"aMS",%progbits,1
 1822              		.align	2
 1823              	.LC3:
 1824 0000 4649464F 		.ascii	"FIFO1 FULL\015\012\000"
 1824      31204655 
 1824      4C4C0D0A 
 1824      00
 1825              		.section	.rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4,"aMS",%progbits,1
 1826              		.align	2
 1827              	.LC1:
 1828 0000 7278206F 		.ascii	"rx on FIFO1\015\012\000"
 1828      6E204649 
 1828      464F310D 
 1828      0A00
 1829              		.section	.rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4,"aMS",%progbits,1
 1830              		.align	2
 1831              	.LC4:
 1832 0000 6D62303A 		.ascii	"mb0: %d\015\012\000"
 1832      2025640D 
 1832      0A00
 1833 000a 0000     		.space	2
 1834              	.LC5:
 1835 000c 68696768 		.ascii	"high\015\012\000"
 1835      0D0A00
 1836              		.section	.rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/cc7Gx9Zv.s 			page 47


 1837              		.align	2
 1838              	.LC6:
 1839 0000 6D62313A 		.ascii	"mb1: %d %d\015\012\000"
 1839      20256420 
 1839      25640D0A 
 1839      00
 1840              		.section	.rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4,"aMS",%progbits,1
 1841              		.align	2
 1842              	.LC7:
 1843 0000 6D62323A 		.ascii	"mb2: %d %d\015\012\000"
 1843      20256420 
 1843      25640D0A 
 1843      00
 1844              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 1845              		.align	2
 1846              	.LC0:
 1847 0000 494D5520 		.ascii	"IMU non presente\015\012\000"
 1847      6E6F6E20 
 1847      70726573 
 1847      656E7465 
 1847      0D0A00
 1848              		.text
 1849              	.Letext0:
 1850              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1851              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1852              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1853              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 1854              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1855              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1856              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1857              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1858              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1859              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1860              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1861              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1862              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 1863              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 1864              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1865              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1866              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1867              		.file 19 "Middlewares/Third_Party/FatFs/src/integer.h"
 1868              		.file 20 "/usr/include/newlib/sys/lock.h"
 1869              		.file 21 "/usr/include/newlib/sys/_types.h"
 1870              		.file 22 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1871              		.file 23 "/usr/include/newlib/sys/reent.h"
 1872              		.file 24 "/usr/include/newlib/stdlib.h"
 1873              		.file 25 "Middlewares/Third_Party/FatFs/src/ff.h"
 1874              		.file 26 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1875              		.file 27 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1876              		.file 28 "Inc/sd_diskio.h"
 1877              		.file 29 "Inc/fatfs.h"
 1878              		.file 30 "Inc/state.h"
 1879              		.file 31 "Inc/can.h"
 1880              		.file 32 "Inc/pedals.h"
 1881              		.file 33 "Inc/global_variables.h"
 1882              		.file 34 "/usr/include/newlib/stdio.h"
 1883              		.file 35 "/usr/include/newlib/string.h"
ARM GAS  /tmp/cc7Gx9Zv.s 			page 48


 1884              		.file 36 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1885              		.file 37 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1886              		.file 38 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
 1887              		.file 39 "Inc/sd.h"
ARM GAS  /tmp/cc7Gx9Zv.s 			page 49


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc7Gx9Zv.s:17     .text.MX_SDMMC1_SD_Init:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:23     .text.MX_SDMMC1_SD_Init:0000000000000000 MX_SDMMC1_SD_Init
     /tmp/cc7Gx9Zv.s:53     .text.MX_SDMMC1_SD_Init:0000000000000018 $d
                            *COM*:0000000000000084 hsd1
     /tmp/cc7Gx9Zv.s:59     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:65     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc7Gx9Zv.s:171    .text.MX_GPIO_Init:0000000000000094 $d
     /tmp/cc7Gx9Zv.s:178    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:184    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/cc7Gx9Zv.s:270    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:277    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc7Gx9Zv.s:461    .text.HAL_TIM_PeriodElapsedCallback:00000000000000f0 $d
                            *COM*:0000000000000040 htim2
                            *COM*:0000000000000080 huart3
     /tmp/cc7Gx9Zv.s:480    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:487    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/cc7Gx9Zv.s:559    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000044 $d
                            *COM*:0000000000000028 hcan1
     /tmp/cc7Gx9Zv.s:566    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:573    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/cc7Gx9Zv.s:607    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000018 $d
     /tmp/cc7Gx9Zv.s:614    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:621    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/cc7Gx9Zv.s:655    .text.HAL_CAN_RxFifo0FullCallback:0000000000000018 $d
     /tmp/cc7Gx9Zv.s:662    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:669    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/cc7Gx9Zv.s:703    .text.HAL_CAN_RxFifo1FullCallback:0000000000000018 $d
     /tmp/cc7Gx9Zv.s:710    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:717    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/cc7Gx9Zv.s:800    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000068 $d
     /tmp/cc7Gx9Zv.s:811    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:818    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/cc7Gx9Zv.s:902    .text.HAL_CAN_TxMailbox1CompleteCallback:000000000000006c $d
     /tmp/cc7Gx9Zv.s:913    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:920    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/cc7Gx9Zv.s:1004   .text.HAL_CAN_TxMailbox2CompleteCallback:000000000000006c $d
     /tmp/cc7Gx9Zv.s:1015   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:1022   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/cc7Gx9Zv.s:1072   .text.HAL_CAN_ErrorCallback:0000000000000034 $d
     /tmp/cc7Gx9Zv.s:1081   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:1088   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc7Gx9Zv.s:1172   .text.HAL_UART_RxCpltCallback:0000000000000060 $d
     /tmp/cc7Gx9Zv.s:1180   .text.Error_Handler:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:1187   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc7Gx9Zv.s:1222   .text.Error_Handler:0000000000000028 $d
     /tmp/cc7Gx9Zv.s:1227   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:1233   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cc7Gx9Zv.s:1284   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/cc7Gx9Zv.s:1291   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:1297   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc7Gx9Zv.s:1354   .text.MX_CAN1_Init:000000000000003c $d
     /tmp/cc7Gx9Zv.s:1360   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:1366   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc7Gx9Zv.s:1460   .text.MX_TIM2_Init:000000000000006c $d
     /tmp/cc7Gx9Zv.s:1465   .text.SystemClock_Config:0000000000000000 $t
ARM GAS  /tmp/cc7Gx9Zv.s 			page 50


     /tmp/cc7Gx9Zv.s:1472   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc7Gx9Zv.s:1633   .text.SystemClock_Config:00000000000000cc $d
     /tmp/cc7Gx9Zv.s:1640   .text.main:0000000000000000 $t
     /tmp/cc7Gx9Zv.s:1647   .text.main:0000000000000000 main
     /tmp/cc7Gx9Zv.s:1787   .text.main:00000000000000b4 $d
                            *COM*:0000000000000001 current_state
     /tmp/cc7Gx9Zv.s:1811   .bss.counter:0000000000000000 counter
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000001 i_debug
     /tmp/cc7Gx9Zv.s:1807   .bss.counter:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1814   .rodata.HAL_CAN_ErrorCallback.str1.4:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1818   .rodata.HAL_CAN_RxFifo0FullCallback.str1.4:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1822   .rodata.HAL_CAN_RxFifo1FullCallback.str1.4:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1826   .rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1830   .rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1837   .rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1841   .rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4:0000000000000000 $d
     /tmp/cc7Gx9Zv.s:1845   .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
count_ms
accel_implausibility_check_count_flag
count_dec
count_inverter
count_imu
count_atc
count_sec
count_min
count_hour
accel_implausibility_check_count
atc_connected
imu_connected
HAL_GPIO_TogglePin
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
fifoRxDataCAN_push
can1
sprintf
strlen
fifoTxDataCAN_high_pop
CAN_Send_IT
fifoTxDataCAN_normal_pop
txt
CAN_Send_Bck
HAL_UART_Receive_IT
debug_rx_count
debug_rx
debug_msg_arrived
HAL_Delay
HAL_UART_Init
HAL_CAN_Init
ARM GAS  /tmp/cc7Gx9Zv.s 			page 51


HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
HAL_TIM_Base_Start_IT
can_init
init_sd
init
run
idle
setup
