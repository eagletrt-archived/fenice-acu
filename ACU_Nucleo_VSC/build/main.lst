ARM GAS  /tmp/ccwzORpx.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_SDMMC1_SD_Init,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	MX_SDMMC1_SD_Init:
  25              	.LFB148:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****  ******************************************************************************
   4:Src/main.c    ****  * @file           : main.c
   5:Src/main.c    ****  * @brief          : Main program body
   6:Src/main.c    ****  ******************************************************************************
   7:Src/main.c    ****  * @attention
   8:Src/main.c    ****  *
   9:Src/main.c    ****  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****  * All rights reserved.</center></h2>
  11:Src/main.c    ****  *
  12:Src/main.c    ****  * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****  * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****  * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****  *                             www.st.com/SLA0044
  16:Src/main.c    ****  *
  17:Src/main.c    ****  ******************************************************************************
  18:Src/main.c    ****  */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "fatfs.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include "can.h"
  28:Src/main.c    **** #include "global_variables.h"
  29:Src/main.c    **** #include "sd.h"
  30:Src/main.c    **** #include "state.h"
  31:Src/main.c    **** #include "stdio.h"
  32:Src/main.c    **** #include "string.h"
ARM GAS  /tmp/ccwzORpx.s 			page 2


  33:Src/main.c    **** /* USER CODE END Includes */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PTD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PD */
  42:Src/main.c    **** /* USER CODE END PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  45:Src/main.c    **** /* USER CODE BEGIN PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* USER CODE END PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  50:Src/main.c    **** CAN_HandleTypeDef hcan1;
  51:Src/main.c    **** 
  52:Src/main.c    **** SD_HandleTypeDef hsd1;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim2;
  55:Src/main.c    **** 
  56:Src/main.c    **** UART_HandleTypeDef huart3;
  57:Src/main.c    **** 
  58:Src/main.c    **** /* USER CODE BEGIN PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** uint8_t i_debug;
  61:Src/main.c    **** extern canStruct can1, can3;
  62:Src/main.c    **** extern fifoPriority fifoPriority_t;
  63:Src/main.c    **** 
  64:Src/main.c    **** CAN_FilterTypeDef sFilter;
  65:Src/main.c    **** 
  66:Src/main.c    **** long int counter = 0;
  67:Src/main.c    **** /* USER CODE END PV */
  68:Src/main.c    **** 
  69:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  70:Src/main.c    **** void SystemClock_Config(void);
  71:Src/main.c    **** static void MX_GPIO_Init(void);
  72:Src/main.c    **** static void MX_SDMMC1_SD_Init(void);
  73:Src/main.c    **** static void MX_USART3_UART_Init(void);
  74:Src/main.c    **** static void MX_CAN1_Init(void);
  75:Src/main.c    **** static void MX_TIM2_Init(void);
  76:Src/main.c    **** static void MX_NVIC_Init(void);
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** 
  79:Src/main.c    **** /* USER CODE END PFP */
  80:Src/main.c    **** 
  81:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** /**
  87:Src/main.c    ****  * @brief  The application entry point.
  88:Src/main.c    ****  * @retval int
  89:Src/main.c    ****  */
ARM GAS  /tmp/ccwzORpx.s 			page 3


  90:Src/main.c    **** int main(void) {
  91:Src/main.c    **** 	/* USER CODE BEGIN 1 */
  92:Src/main.c    **** 
  93:Src/main.c    **** 	/* USER CODE END 1 */
  94:Src/main.c    **** 
  95:Src/main.c    **** 	/* MCU
  96:Src/main.c    **** 	 * Configuration--------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    **** 	/* Reset of all peripherals, Initializes the Flash interface and the
  99:Src/main.c    **** 	 * Systick. */
 100:Src/main.c    **** 	HAL_Init();
 101:Src/main.c    **** 
 102:Src/main.c    **** 	/* USER CODE BEGIN Init */
 103:Src/main.c    **** 
 104:Src/main.c    **** 	/* USER CODE END Init */
 105:Src/main.c    **** 
 106:Src/main.c    **** 	/* Configure the system clock */
 107:Src/main.c    **** 	SystemClock_Config();
 108:Src/main.c    **** 
 109:Src/main.c    **** 	/* USER CODE BEGIN SysInit */
 110:Src/main.c    **** 
 111:Src/main.c    **** 	/* USER CODE END SysInit */
 112:Src/main.c    **** 
 113:Src/main.c    **** 	/* Initialize all configured peripherals */
 114:Src/main.c    **** 	MX_GPIO_Init();
 115:Src/main.c    **** 	MX_SDMMC1_SD_Init();
 116:Src/main.c    **** 	MX_USART3_UART_Init();
 117:Src/main.c    **** 	MX_FATFS_Init();
 118:Src/main.c    **** 	MX_CAN1_Init();
 119:Src/main.c    **** 	MX_TIM2_Init();
 120:Src/main.c    **** 
 121:Src/main.c    **** 	/* Initialize interrupts */
 122:Src/main.c    **** 	MX_NVIC_Init();
 123:Src/main.c    **** 	/* USER CODE BEGIN 2 */
 124:Src/main.c    **** 	HAL_TIM_Base_Start_IT(&htim2);
 125:Src/main.c    **** 
 126:Src/main.c    **** 	can1.rx0_interrupt = CAN1_RX0_IRQn;
 127:Src/main.c    **** 	can1.tx_interrupt = CAN1_TX_IRQn;
 128:Src/main.c    **** 	can1.hcan = &hcan1;
 129:Src/main.c    **** 
 130:Src/main.c    **** 	can_init();
 131:Src/main.c    **** 
 132:Src/main.c    **** 	HAL_UART_Receive_IT(&huart3, (uint8_t *)&debug_rx[debug_rx_count],
 133:Src/main.c    **** 						1);  // activate rx interrupt for debug
 134:Src/main.c    **** 
 135:Src/main.c    **** 	current_state = STATE_INIT;
 136:Src/main.c    **** 
 137:Src/main.c    **** 	accel.pot1_max_val = 4096;
 138:Src/main.c    **** 	accel.pot1_min_val = 0;
 139:Src/main.c    **** 	accel.pot1_range = accel.pot1_max_val - accel.pot1_min_val;
 140:Src/main.c    **** 	accel.pot2_max_val = 4096;
 141:Src/main.c    **** 	accel.pot2_min_val = 0;
 142:Src/main.c    **** 	accel.pot2_range = accel.pot2_max_val - accel.pot2_min_val;
 143:Src/main.c    **** 
 144:Src/main.c    **** 	init_sd();
 145:Src/main.c    **** 
 146:Src/main.c    **** 	/* USER CODE END 2 */
ARM GAS  /tmp/ccwzORpx.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    **** 	/* Infinite loop */
 149:Src/main.c    **** 	/* USER CODE BEGIN WHILE */
 150:Src/main.c    **** 	while (1) {
 151:Src/main.c    **** 		can1.dataTx[0] = 0;
 152:Src/main.c    **** 		can1.dataTx[1] = 0;
 153:Src/main.c    **** 		can1.dataTx[2] = 0;
 154:Src/main.c    **** 		can1.dataTx[3] = 0;
 155:Src/main.c    **** 		can1.dataTx[4] = counter >> 24;
 156:Src/main.c    **** 		can1.dataTx[5] = counter >> 16;
 157:Src/main.c    **** 		can1.dataTx[6] = counter >> 8;
 158:Src/main.c    **** 		can1.dataTx[7] = counter % 256;
 159:Src/main.c    **** 
 160:Src/main.c    **** 		can1.tx_id = 0xA0;
 161:Src/main.c    **** 
 162:Src/main.c    **** 		// CAN_Send(&can1, normalPriority);
 163:Src/main.c    **** 		// HAL_Delay(500);
 164:Src/main.c    **** 
 165:Src/main.c    **** 		// counter ++;
 166:Src/main.c    **** 
 167:Src/main.c    **** 		if (current_state == STATE_INIT) {
 168:Src/main.c    **** 			init();
 169:Src/main.c    **** 		} else if (current_state == STATE_IDLE) {
 170:Src/main.c    **** 			idle();
 171:Src/main.c    **** 		} else if (current_state == STATE_SETUP) {
 172:Src/main.c    **** 			setup();
 173:Src/main.c    **** 		} else if (current_state == STATE_RUN) {
 174:Src/main.c    **** 			run();
 175:Src/main.c    **** 		}
 176:Src/main.c    **** 		/* USER CODE END WHILE */
 177:Src/main.c    **** 
 178:Src/main.c    **** 		/* USER CODE BEGIN 3 */
 179:Src/main.c    **** 	}
 180:Src/main.c    **** 	/* USER CODE END 3 */
 181:Src/main.c    **** }
 182:Src/main.c    **** 
 183:Src/main.c    **** /**
 184:Src/main.c    ****  * @brief System Clock Configuration
 185:Src/main.c    ****  * @retval None
 186:Src/main.c    ****  */
 187:Src/main.c    **** void SystemClock_Config(void) {
 188:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 189:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 190:Src/main.c    **** 	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 191:Src/main.c    **** 
 192:Src/main.c    **** 	/** Configure the main internal regulator output voltage
 193:Src/main.c    **** 	 */
 194:Src/main.c    **** 	__HAL_RCC_PWR_CLK_ENABLE();
 195:Src/main.c    **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 196:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 197:Src/main.c    **** 	 */
 198:Src/main.c    **** 	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 199:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 200:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 201:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 202:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 203:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLM = 8;
ARM GAS  /tmp/ccwzORpx.s 			page 5


 204:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLN = 216;
 205:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 206:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLQ = 9;
 207:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 208:Src/main.c    **** 		Error_Handler();
 209:Src/main.c    **** 	}
 210:Src/main.c    **** 	/** Activate the Over-Drive mode
 211:Src/main.c    **** 	 */
 212:Src/main.c    **** 	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 213:Src/main.c    **** 		Error_Handler();
 214:Src/main.c    **** 	}
 215:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 216:Src/main.c    **** 	 */
 217:Src/main.c    **** 	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 218:Src/main.c    **** 								  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 219:Src/main.c    **** 	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 220:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 221:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 222:Src/main.c    **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 223:Src/main.c    **** 
 224:Src/main.c    **** 	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 225:Src/main.c    **** 		Error_Handler();
 226:Src/main.c    **** 	}
 227:Src/main.c    **** 	PeriphClkInitStruct.PeriphClockSelection =
 228:Src/main.c    **** 		RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_CLK48;
 229:Src/main.c    **** 	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 230:Src/main.c    **** 	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 231:Src/main.c    **** 	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 232:Src/main.c    **** 	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 233:Src/main.c    **** 		Error_Handler();
 234:Src/main.c    **** 	}
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** /**
 238:Src/main.c    ****  * @brief NVIC Configuration.
 239:Src/main.c    ****  * @retval None
 240:Src/main.c    ****  */
 241:Src/main.c    **** static void MX_NVIC_Init(void) {
 242:Src/main.c    **** 	/* SDMMC1_IRQn interrupt configuration */
 243:Src/main.c    **** 	HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 244:Src/main.c    **** 	HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 245:Src/main.c    **** 	/* USART3_IRQn interrupt configuration */
 246:Src/main.c    **** 	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 247:Src/main.c    **** 	HAL_NVIC_EnableIRQ(USART3_IRQn);
 248:Src/main.c    **** 	/* CAN1_SCE_IRQn interrupt configuration */
 249:Src/main.c    **** 	HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 250:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 251:Src/main.c    **** 	/* CAN1_RX1_IRQn interrupt configuration */
 252:Src/main.c    **** 	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 253:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 254:Src/main.c    **** 	/* CAN1_RX0_IRQn interrupt configuration */
 255:Src/main.c    **** 	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 256:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 257:Src/main.c    **** 	/* CAN1_TX_IRQn interrupt configuration */
 258:Src/main.c    **** 	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 259:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 260:Src/main.c    **** 	/* TIM2_IRQn interrupt configuration */
ARM GAS  /tmp/ccwzORpx.s 			page 6


 261:Src/main.c    **** 	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 262:Src/main.c    **** 	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 263:Src/main.c    **** }
 264:Src/main.c    **** 
 265:Src/main.c    **** /**
 266:Src/main.c    ****  * @brief CAN1 Initialization Function
 267:Src/main.c    ****  * @param None
 268:Src/main.c    ****  * @retval None
 269:Src/main.c    ****  */
 270:Src/main.c    **** static void MX_CAN1_Init(void) {
 271:Src/main.c    **** 	/* USER CODE BEGIN CAN1_Init 0 */
 272:Src/main.c    **** 
 273:Src/main.c    **** 	/* USER CODE END CAN1_Init 0 */
 274:Src/main.c    **** 
 275:Src/main.c    **** 	/* USER CODE BEGIN CAN1_Init 1 */
 276:Src/main.c    **** 
 277:Src/main.c    **** 	/* USER CODE END CAN1_Init 1 */
 278:Src/main.c    **** 	hcan1.Instance = CAN1;
 279:Src/main.c    **** 	hcan1.Init.Prescaler = 3;
 280:Src/main.c    **** 	hcan1.Init.Mode = CAN_MODE_NORMAL;
 281:Src/main.c    **** 	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 282:Src/main.c    **** 	hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 283:Src/main.c    **** 	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 284:Src/main.c    **** 	hcan1.Init.TimeTriggeredMode = DISABLE;
 285:Src/main.c    **** 	hcan1.Init.AutoBusOff = DISABLE;
 286:Src/main.c    **** 	hcan1.Init.AutoWakeUp = ENABLE;
 287:Src/main.c    **** 	hcan1.Init.AutoRetransmission = ENABLE;
 288:Src/main.c    **** 	hcan1.Init.ReceiveFifoLocked = DISABLE;
 289:Src/main.c    **** 	hcan1.Init.TransmitFifoPriority = DISABLE;
 290:Src/main.c    **** 	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 291:Src/main.c    **** 		Error_Handler();
 292:Src/main.c    **** 	}
 293:Src/main.c    **** 	/* USER CODE BEGIN CAN1_Init 2 */
 294:Src/main.c    **** 
 295:Src/main.c    **** 	/* USER CODE END CAN1_Init 2 */
 296:Src/main.c    **** }
 297:Src/main.c    **** 
 298:Src/main.c    **** /**
 299:Src/main.c    ****  * @brief SDMMC1 Initialization Function
 300:Src/main.c    ****  * @param None
 301:Src/main.c    ****  * @retval None
 302:Src/main.c    ****  */
 303:Src/main.c    **** static void MX_SDMMC1_SD_Init(void) {
  27              		.loc 1 303 37 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 304:Src/main.c    **** 	/* USER CODE BEGIN SDMMC1_Init 0 */
 305:Src/main.c    **** 
 306:Src/main.c    **** 	/* USER CODE END SDMMC1_Init 0 */
 307:Src/main.c    **** 
 308:Src/main.c    **** 	/* USER CODE BEGIN SDMMC1_Init 1 */
 309:Src/main.c    **** 
 310:Src/main.c    **** 	/* USER CODE END SDMMC1_Init 1 */
 311:Src/main.c    **** 	hsd1.Instance = SDMMC1;
  32              		.loc 1 311 2 view .LVU1
ARM GAS  /tmp/ccwzORpx.s 			page 7


  33              		.loc 1 311 16 is_stmt 0 view .LVU2
  34 0000 054B     		ldr	r3, .L2
  35 0002 064A     		ldr	r2, .L2+4
  36 0004 1A60     		str	r2, [r3]
 312:Src/main.c    **** 	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  37              		.loc 1 312 2 is_stmt 1 view .LVU3
  38              		.loc 1 312 22 is_stmt 0 view .LVU4
  39 0006 0022     		movs	r2, #0
  40 0008 5A60     		str	r2, [r3, #4]
 313:Src/main.c    **** 	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  41              		.loc 1 313 2 is_stmt 1 view .LVU5
  42              		.loc 1 313 24 is_stmt 0 view .LVU6
  43 000a 9A60     		str	r2, [r3, #8]
 314:Src/main.c    **** 	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  44              		.loc 1 314 2 is_stmt 1 view .LVU7
  45              		.loc 1 314 27 is_stmt 0 view .LVU8
  46 000c DA60     		str	r2, [r3, #12]
 315:Src/main.c    **** 	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  47              		.loc 1 315 2 is_stmt 1 view .LVU9
  48              		.loc 1 315 20 is_stmt 0 view .LVU10
  49 000e 1A61     		str	r2, [r3, #16]
 316:Src/main.c    **** 	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  50              		.loc 1 316 2 is_stmt 1 view .LVU11
  51              		.loc 1 316 32 is_stmt 0 view .LVU12
  52 0010 5A61     		str	r2, [r3, #20]
 317:Src/main.c    **** 	hsd1.Init.ClockDiv = 1;
  53              		.loc 1 317 2 is_stmt 1 view .LVU13
  54              		.loc 1 317 21 is_stmt 0 view .LVU14
  55 0012 0122     		movs	r2, #1
  56 0014 9A61     		str	r2, [r3, #24]
 318:Src/main.c    **** 	/* USER CODE BEGIN SDMMC1_Init 2 */
 319:Src/main.c    **** 
 320:Src/main.c    **** 	/* USER CODE END SDMMC1_Init 2 */
 321:Src/main.c    **** }
  57              		.loc 1 321 1 view .LVU15
  58 0016 7047     		bx	lr
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0018 00000000 		.word	hsd1
  63 001c 002C0140 		.word	1073818624
  64              		.cfi_endproc
  65              	.LFE148:
  67              		.section	.text.MX_GPIO_Init,"ax",%progbits
  68              		.align	1
  69              		.syntax unified
  70              		.thumb
  71              		.thumb_func
  72              		.fpu fpv5-d16
  74              	MX_GPIO_Init:
  75              	.LFB151:
 322:Src/main.c    **** 
 323:Src/main.c    **** /**
 324:Src/main.c    ****  * @brief TIM2 Initialization Function
 325:Src/main.c    ****  * @param None
 326:Src/main.c    ****  * @retval None
 327:Src/main.c    ****  */
ARM GAS  /tmp/ccwzORpx.s 			page 8


 328:Src/main.c    **** static void MX_TIM2_Init(void) {
 329:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 0 */
 330:Src/main.c    **** 
 331:Src/main.c    **** 	/* USER CODE END TIM2_Init 0 */
 332:Src/main.c    **** 
 333:Src/main.c    **** 	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 334:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 335:Src/main.c    **** 
 336:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 1 */
 337:Src/main.c    **** 
 338:Src/main.c    **** 	/* USER CODE END TIM2_Init 1 */
 339:Src/main.c    **** 	htim2.Instance = TIM2;
 340:Src/main.c    **** 	htim2.Init.Prescaler = 108;
 341:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 342:Src/main.c    **** 	htim2.Init.Period = 1000;
 343:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 344:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 345:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 346:Src/main.c    **** 		Error_Handler();
 347:Src/main.c    **** 	}
 348:Src/main.c    **** 	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 349:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 350:Src/main.c    **** 		Error_Handler();
 351:Src/main.c    **** 	}
 352:Src/main.c    **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 353:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 354:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) !=
 355:Src/main.c    **** 		HAL_OK) {
 356:Src/main.c    **** 		Error_Handler();
 357:Src/main.c    **** 	}
 358:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 2 */
 359:Src/main.c    **** 
 360:Src/main.c    **** 	/* USER CODE END TIM2_Init 2 */
 361:Src/main.c    **** }
 362:Src/main.c    **** 
 363:Src/main.c    **** /**
 364:Src/main.c    ****  * @brief USART3 Initialization Function
 365:Src/main.c    ****  * @param None
 366:Src/main.c    ****  * @retval None
 367:Src/main.c    ****  */
 368:Src/main.c    **** static void MX_USART3_UART_Init(void) {
 369:Src/main.c    **** 	/* USER CODE BEGIN USART3_Init 0 */
 370:Src/main.c    **** 
 371:Src/main.c    **** 	/* USER CODE END USART3_Init 0 */
 372:Src/main.c    **** 
 373:Src/main.c    **** 	/* USER CODE BEGIN USART3_Init 1 */
 374:Src/main.c    **** 
 375:Src/main.c    **** 	/* USER CODE END USART3_Init 1 */
 376:Src/main.c    **** 	huart3.Instance = USART3;
 377:Src/main.c    **** 	huart3.Init.BaudRate = 2000000;
 378:Src/main.c    **** 	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 379:Src/main.c    **** 	huart3.Init.StopBits = UART_STOPBITS_1;
 380:Src/main.c    **** 	huart3.Init.Parity = UART_PARITY_NONE;
 381:Src/main.c    **** 	huart3.Init.Mode = UART_MODE_TX_RX;
 382:Src/main.c    **** 	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 383:Src/main.c    **** 	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 384:Src/main.c    **** 	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
ARM GAS  /tmp/ccwzORpx.s 			page 9


 385:Src/main.c    **** 	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 386:Src/main.c    **** 	if (HAL_UART_Init(&huart3) != HAL_OK) {
 387:Src/main.c    **** 		Error_Handler();
 388:Src/main.c    **** 	}
 389:Src/main.c    **** 	/* USER CODE BEGIN USART3_Init 2 */
 390:Src/main.c    **** 
 391:Src/main.c    **** 	/* USER CODE END USART3_Init 2 */
 392:Src/main.c    **** }
 393:Src/main.c    **** 
 394:Src/main.c    **** /**
 395:Src/main.c    ****  * @brief GPIO Initialization Function
 396:Src/main.c    ****  * @param None
 397:Src/main.c    ****  * @retval None
 398:Src/main.c    ****  */
 399:Src/main.c    **** static void MX_GPIO_Init(void) {
  76              		.loc 1 399 32 is_stmt 1 view -0
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 40
  79              		@ frame_needed = 0, uses_anonymous_args = 0
  80 0000 30B5     		push	{r4, r5, lr}
  81              	.LCFI0:
  82              		.cfi_def_cfa_offset 12
  83              		.cfi_offset 4, -12
  84              		.cfi_offset 5, -8
  85              		.cfi_offset 14, -4
  86 0002 8BB0     		sub	sp, sp, #44
  87              	.LCFI1:
  88              		.cfi_def_cfa_offset 56
 400:Src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStruct = {0};
  89              		.loc 1 400 2 view .LVU17
  90              		.loc 1 400 19 is_stmt 0 view .LVU18
  91 0004 0024     		movs	r4, #0
  92 0006 0594     		str	r4, [sp, #20]
  93 0008 0694     		str	r4, [sp, #24]
  94 000a 0794     		str	r4, [sp, #28]
  95 000c 0894     		str	r4, [sp, #32]
  96 000e 0994     		str	r4, [sp, #36]
 401:Src/main.c    **** 
 402:Src/main.c    **** 	/* GPIO Ports Clock Enable */
 403:Src/main.c    **** 	__HAL_RCC_GPIOA_CLK_ENABLE();
  97              		.loc 1 403 2 is_stmt 1 view .LVU19
  98              	.LBB2:
  99              		.loc 1 403 2 view .LVU20
 100              		.loc 1 403 2 view .LVU21
 101 0010 204B     		ldr	r3, .L6
 102 0012 1A6B     		ldr	r2, [r3, #48]
 103 0014 42F00102 		orr	r2, r2, #1
 104 0018 1A63     		str	r2, [r3, #48]
 105              		.loc 1 403 2 view .LVU22
 106 001a 1A6B     		ldr	r2, [r3, #48]
 107 001c 02F00102 		and	r2, r2, #1
 108 0020 0192     		str	r2, [sp, #4]
 109              		.loc 1 403 2 view .LVU23
 110 0022 019A     		ldr	r2, [sp, #4]
 111              	.LBE2:
 112              		.loc 1 403 2 view .LVU24
 404:Src/main.c    **** 	__HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/ccwzORpx.s 			page 10


 113              		.loc 1 404 2 view .LVU25
 114              	.LBB3:
 115              		.loc 1 404 2 view .LVU26
 116              		.loc 1 404 2 view .LVU27
 117 0024 1A6B     		ldr	r2, [r3, #48]
 118 0026 42F00202 		orr	r2, r2, #2
 119 002a 1A63     		str	r2, [r3, #48]
 120              		.loc 1 404 2 view .LVU28
 121 002c 1A6B     		ldr	r2, [r3, #48]
 122 002e 02F00202 		and	r2, r2, #2
 123 0032 0292     		str	r2, [sp, #8]
 124              		.loc 1 404 2 view .LVU29
 125 0034 029A     		ldr	r2, [sp, #8]
 126              	.LBE3:
 127              		.loc 1 404 2 view .LVU30
 405:Src/main.c    **** 	__HAL_RCC_GPIOD_CLK_ENABLE();
 128              		.loc 1 405 2 view .LVU31
 129              	.LBB4:
 130              		.loc 1 405 2 view .LVU32
 131              		.loc 1 405 2 view .LVU33
 132 0036 1A6B     		ldr	r2, [r3, #48]
 133 0038 42F00802 		orr	r2, r2, #8
 134 003c 1A63     		str	r2, [r3, #48]
 135              		.loc 1 405 2 view .LVU34
 136 003e 1A6B     		ldr	r2, [r3, #48]
 137 0040 02F00802 		and	r2, r2, #8
 138 0044 0392     		str	r2, [sp, #12]
 139              		.loc 1 405 2 view .LVU35
 140 0046 039A     		ldr	r2, [sp, #12]
 141              	.LBE4:
 142              		.loc 1 405 2 view .LVU36
 406:Src/main.c    **** 	__HAL_RCC_GPIOC_CLK_ENABLE();
 143              		.loc 1 406 2 view .LVU37
 144              	.LBB5:
 145              		.loc 1 406 2 view .LVU38
 146              		.loc 1 406 2 view .LVU39
 147 0048 1A6B     		ldr	r2, [r3, #48]
 148 004a 42F00402 		orr	r2, r2, #4
 149 004e 1A63     		str	r2, [r3, #48]
 150              		.loc 1 406 2 view .LVU40
 151 0050 1B6B     		ldr	r3, [r3, #48]
 152 0052 03F00403 		and	r3, r3, #4
 153 0056 0493     		str	r3, [sp, #16]
 154              		.loc 1 406 2 view .LVU41
 155 0058 049B     		ldr	r3, [sp, #16]
 156              	.LBE5:
 157              		.loc 1 406 2 view .LVU42
 407:Src/main.c    **** 
 408:Src/main.c    **** 	/*Configure GPIO pin Output Level */
 409:Src/main.c    **** 	HAL_GPIO_WritePin(GPIOB, LED_green_Pin | LED_red_Pin | LED_blue_Pin,
 158              		.loc 1 409 2 view .LVU43
 159 005a 0F4D     		ldr	r5, .L6+4
 160 005c 2246     		mov	r2, r4
 161 005e 44F28101 		movw	r1, #16513
 162 0062 2846     		mov	r0, r5
 163 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 164              	.LVL0:
ARM GAS  /tmp/ccwzORpx.s 			page 11


 410:Src/main.c    **** 					  GPIO_PIN_RESET);
 411:Src/main.c    **** 
 412:Src/main.c    **** 	/*Configure GPIO pin : SD_detect_Pin */
 413:Src/main.c    **** 	GPIO_InitStruct.Pin = SD_detect_Pin;
 165              		.loc 1 413 2 view .LVU44
 166              		.loc 1 413 22 is_stmt 0 view .LVU45
 167 0068 2023     		movs	r3, #32
 168 006a 0593     		str	r3, [sp, #20]
 414:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 169              		.loc 1 414 2 is_stmt 1 view .LVU46
 170              		.loc 1 414 23 is_stmt 0 view .LVU47
 171 006c 0694     		str	r4, [sp, #24]
 415:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 172              		.loc 1 415 2 is_stmt 1 view .LVU48
 173              		.loc 1 415 23 is_stmt 0 view .LVU49
 174 006e 0794     		str	r4, [sp, #28]
 416:Src/main.c    **** 	HAL_GPIO_Init(SD_detect_GPIO_Port, &GPIO_InitStruct);
 175              		.loc 1 416 2 is_stmt 1 view .LVU50
 176 0070 05A9     		add	r1, sp, #20
 177 0072 0A48     		ldr	r0, .L6+8
 178 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 179              	.LVL1:
 417:Src/main.c    **** 
 418:Src/main.c    **** 	/*Configure GPIO pins : LED_green_Pin LED_red_Pin LED_blue_Pin */
 419:Src/main.c    **** 	GPIO_InitStruct.Pin = LED_green_Pin | LED_red_Pin | LED_blue_Pin;
 180              		.loc 1 419 2 view .LVU51
 181              		.loc 1 419 22 is_stmt 0 view .LVU52
 182 0078 44F28103 		movw	r3, #16513
 183 007c 0593     		str	r3, [sp, #20]
 420:Src/main.c    **** 	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 184              		.loc 1 420 2 is_stmt 1 view .LVU53
 185              		.loc 1 420 23 is_stmt 0 view .LVU54
 186 007e 0123     		movs	r3, #1
 187 0080 0693     		str	r3, [sp, #24]
 421:Src/main.c    **** 	GPIO_InitStruct.Pull = GPIO_NOPULL;
 188              		.loc 1 421 2 is_stmt 1 view .LVU55
 189              		.loc 1 421 23 is_stmt 0 view .LVU56
 190 0082 0794     		str	r4, [sp, #28]
 422:Src/main.c    **** 	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 191              		.loc 1 422 2 is_stmt 1 view .LVU57
 192              		.loc 1 422 24 is_stmt 0 view .LVU58
 193 0084 0894     		str	r4, [sp, #32]
 423:Src/main.c    **** 	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 194              		.loc 1 423 2 is_stmt 1 view .LVU59
 195 0086 05A9     		add	r1, sp, #20
 196 0088 2846     		mov	r0, r5
 197 008a FFF7FEFF 		bl	HAL_GPIO_Init
 198              	.LVL2:
 424:Src/main.c    **** }
 199              		.loc 1 424 1 is_stmt 0 view .LVU60
 200 008e 0BB0     		add	sp, sp, #44
 201              	.LCFI2:
 202              		.cfi_def_cfa_offset 12
 203              		@ sp needed
 204 0090 30BD     		pop	{r4, r5, pc}
 205              	.L7:
 206 0092 00BF     		.align	2
ARM GAS  /tmp/ccwzORpx.s 			page 12


 207              	.L6:
 208 0094 00380240 		.word	1073887232
 209 0098 00040240 		.word	1073873920
 210 009c 00000240 		.word	1073872896
 211              		.cfi_endproc
 212              	.LFE151:
 214              		.section	.text.MX_NVIC_Init,"ax",%progbits
 215              		.align	1
 216              		.syntax unified
 217              		.thumb
 218              		.thumb_func
 219              		.fpu fpv5-d16
 221              	MX_NVIC_Init:
 222              	.LFB146:
 241:Src/main.c    **** 	/* SDMMC1_IRQn interrupt configuration */
 223              		.loc 1 241 32 is_stmt 1 view -0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227 0000 08B5     		push	{r3, lr}
 228              	.LCFI3:
 229              		.cfi_def_cfa_offset 8
 230              		.cfi_offset 3, -8
 231              		.cfi_offset 14, -4
 243:Src/main.c    **** 	HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 232              		.loc 1 243 2 view .LVU62
 233 0002 0022     		movs	r2, #0
 234 0004 1146     		mov	r1, r2
 235 0006 3120     		movs	r0, #49
 236 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 237              	.LVL3:
 244:Src/main.c    **** 	/* USART3_IRQn interrupt configuration */
 238              		.loc 1 244 2 view .LVU63
 239 000c 3120     		movs	r0, #49
 240 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 241              	.LVL4:
 246:Src/main.c    **** 	HAL_NVIC_EnableIRQ(USART3_IRQn);
 242              		.loc 1 246 2 view .LVU64
 243 0012 0022     		movs	r2, #0
 244 0014 1146     		mov	r1, r2
 245 0016 2720     		movs	r0, #39
 246 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 247              	.LVL5:
 247:Src/main.c    **** 	/* CAN1_SCE_IRQn interrupt configuration */
 248              		.loc 1 247 2 view .LVU65
 249 001c 2720     		movs	r0, #39
 250 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 251              	.LVL6:
 249:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 252              		.loc 1 249 2 view .LVU66
 253 0022 0022     		movs	r2, #0
 254 0024 1146     		mov	r1, r2
 255 0026 1620     		movs	r0, #22
 256 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 257              	.LVL7:
 250:Src/main.c    **** 	/* CAN1_RX1_IRQn interrupt configuration */
 258              		.loc 1 250 2 view .LVU67
ARM GAS  /tmp/ccwzORpx.s 			page 13


 259 002c 1620     		movs	r0, #22
 260 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 261              	.LVL8:
 252:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 262              		.loc 1 252 2 view .LVU68
 263 0032 0022     		movs	r2, #0
 264 0034 1146     		mov	r1, r2
 265 0036 1520     		movs	r0, #21
 266 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 267              	.LVL9:
 253:Src/main.c    **** 	/* CAN1_RX0_IRQn interrupt configuration */
 268              		.loc 1 253 2 view .LVU69
 269 003c 1520     		movs	r0, #21
 270 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 271              	.LVL10:
 255:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 272              		.loc 1 255 2 view .LVU70
 273 0042 0022     		movs	r2, #0
 274 0044 1146     		mov	r1, r2
 275 0046 1420     		movs	r0, #20
 276 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 277              	.LVL11:
 256:Src/main.c    **** 	/* CAN1_TX_IRQn interrupt configuration */
 278              		.loc 1 256 2 view .LVU71
 279 004c 1420     		movs	r0, #20
 280 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 281              	.LVL12:
 258:Src/main.c    **** 	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 282              		.loc 1 258 2 view .LVU72
 283 0052 0022     		movs	r2, #0
 284 0054 1146     		mov	r1, r2
 285 0056 1320     		movs	r0, #19
 286 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 287              	.LVL13:
 259:Src/main.c    **** 	/* TIM2_IRQn interrupt configuration */
 288              		.loc 1 259 2 view .LVU73
 289 005c 1320     		movs	r0, #19
 290 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 291              	.LVL14:
 261:Src/main.c    **** 	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 292              		.loc 1 261 2 view .LVU74
 293 0062 0022     		movs	r2, #0
 294 0064 1146     		mov	r1, r2
 295 0066 1C20     		movs	r0, #28
 296 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 297              	.LVL15:
 262:Src/main.c    **** }
 298              		.loc 1 262 2 view .LVU75
 299 006c 1C20     		movs	r0, #28
 300 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 301              	.LVL16:
 263:Src/main.c    **** 
 302              		.loc 1 263 1 is_stmt 0 view .LVU76
 303 0072 08BD     		pop	{r3, pc}
 304              		.cfi_endproc
 305              	.LFE146:
 307              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccwzORpx.s 			page 14


 308              		.align	2
 309              	.LC0:
 310 0000 494D5520 		.ascii	"IMU non presente\015\012\000"
 310      6E6F6E20 
 310      70726573 
 310      656E7465 
 310      0D0A00
 311              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 312              		.align	1
 313              		.global	HAL_TIM_PeriodElapsedCallback
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv5-d16
 319              	HAL_TIM_PeriodElapsedCallback:
 320              	.LVL17:
 321              	.LFB152:
 425:Src/main.c    **** 
 426:Src/main.c    **** /* USER CODE BEGIN 4 */
 427:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 322              		.loc 1 427 61 is_stmt 1 view -0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              		.loc 1 427 61 is_stmt 0 view .LVU78
 327 0000 08B5     		push	{r3, lr}
 328              	.LCFI4:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
 428:Src/main.c    **** 	if (htim == &htim2) {
 332              		.loc 1 428 2 is_stmt 1 view .LVU79
 333              		.loc 1 428 5 is_stmt 0 view .LVU80
 334 0002 3C4B     		ldr	r3, .L26
 335 0004 8342     		cmp	r3, r0
 336 0006 00D0     		beq	.L19
 337              	.LVL18:
 338              	.L10:
 429:Src/main.c    **** 		count_ms += 1;
 430:Src/main.c    **** 		if (accel_implausibility_check_count_flag == 1) {
 431:Src/main.c    **** 			accel_implausibility_check_count++;
 432:Src/main.c    **** 			if (accel_implausibility_check_count == 50) {
 433:Src/main.c    **** 				accel_implausibility_check_count_flag = 2;
 434:Src/main.c    **** 				accel_implausibility_check_count = 0;
 435:Src/main.c    **** 				// TODO: add error messages
 436:Src/main.c    **** 			}
 437:Src/main.c    **** 		}
 438:Src/main.c    **** 		if (count_ms == 100) {
 439:Src/main.c    **** 			count_ms = 0;
 440:Src/main.c    **** 			count_dec++;
 441:Src/main.c    **** 			//--- put your counter here (count each 0,1 sec) ---//
 442:Src/main.c    **** 			count_inverter++;
 443:Src/main.c    **** 			count_imu++;
 444:Src/main.c    **** 			count_atc++;
 445:Src/main.c    **** 			if (count_inverter ==
 446:Src/main.c    **** 				10) {  //--- check if inverter is connected ---//
 447:Src/main.c    **** 					   // TODO: to implement error functions
ARM GAS  /tmp/ccwzORpx.s 			page 15


 448:Src/main.c    **** 			} else if (count_inverter == 11) {
 449:Src/main.c    **** 				count_inverter = 10;
 450:Src/main.c    **** 			}
 451:Src/main.c    **** 			if (count_atc ==
 452:Src/main.c    **** 				10) {  //--- check if Analog To Can is connected ---//
 453:Src/main.c    **** 				// TODO: to implement error functions
 454:Src/main.c    **** 				atc_connected = 0;
 455:Src/main.c    **** 			} else if (count_atc == 11) {
 456:Src/main.c    **** 				count_atc = 10;
 457:Src/main.c    **** 			}
 458:Src/main.c    **** 			if (count_imu == 10) {  //--- check if imu is connected ---//
 459:Src/main.c    **** 				// imu non presente //
 460:Src/main.c    **** 				imu_connected = 0;  // imu not connected
 461:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)"IMU non presente\r\n",
 462:Src/main.c    **** 								  strlen("IMU non presente\r\n"), 10);
 463:Src/main.c    **** 			} else if (count_imu == 11) {
 464:Src/main.c    **** 				count_imu = 10;
 465:Src/main.c    **** 			}
 466:Src/main.c    **** 			if (count_dec == 10) {
 467:Src/main.c    **** 				count_dec = 0;
 468:Src/main.c    **** 				count_sec++;
 469:Src/main.c    **** 				if (count_sec == 60) {
 470:Src/main.c    **** 					count_sec = 0;
 471:Src/main.c    **** 					count_min++;
 472:Src/main.c    **** 					if (count_min == 60) {
 473:Src/main.c    **** 						count_min = 0;
 474:Src/main.c    **** 						count_hour++;
 475:Src/main.c    **** 					}
 476:Src/main.c    **** 				}
 477:Src/main.c    **** 			}
 478:Src/main.c    **** 		}
 479:Src/main.c    **** 	}
 480:Src/main.c    **** }
 339              		.loc 1 480 1 view .LVU81
 340 0008 08BD     		pop	{r3, pc}
 341              	.LVL19:
 342              	.L19:
 429:Src/main.c    **** 		count_ms += 1;
 343              		.loc 1 429 3 is_stmt 1 view .LVU82
 429:Src/main.c    **** 		count_ms += 1;
 344              		.loc 1 429 12 is_stmt 0 view .LVU83
 345 000a 3B4A     		ldr	r2, .L26+4
 346 000c 1388     		ldrh	r3, [r2]
 347 000e 0133     		adds	r3, r3, #1
 348 0010 9BB2     		uxth	r3, r3
 349 0012 1380     		strh	r3, [r2]	@ movhi
 430:Src/main.c    **** 			accel_implausibility_check_count++;
 350              		.loc 1 430 3 is_stmt 1 view .LVU84
 430:Src/main.c    **** 			accel_implausibility_check_count++;
 351              		.loc 1 430 45 is_stmt 0 view .LVU85
 352 0014 394A     		ldr	r2, .L26+8
 353 0016 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 430:Src/main.c    **** 			accel_implausibility_check_count++;
 354              		.loc 1 430 6 view .LVU86
 355 0018 012A     		cmp	r2, #1
 356 001a 43D0     		beq	.L20
 357              	.L12:
ARM GAS  /tmp/ccwzORpx.s 			page 16


 438:Src/main.c    **** 			count_ms = 0;
 358              		.loc 1 438 3 is_stmt 1 view .LVU87
 438:Src/main.c    **** 			count_ms = 0;
 359              		.loc 1 438 6 is_stmt 0 view .LVU88
 360 001c 642B     		cmp	r3, #100
 361 001e F3D1     		bne	.L10
 439:Src/main.c    **** 			count_dec++;
 362              		.loc 1 439 4 is_stmt 1 view .LVU89
 439:Src/main.c    **** 			count_dec++;
 363              		.loc 1 439 13 is_stmt 0 view .LVU90
 364 0020 354B     		ldr	r3, .L26+4
 365 0022 0022     		movs	r2, #0
 366 0024 1A80     		strh	r2, [r3]	@ movhi
 440:Src/main.c    **** 			//--- put your counter here (count each 0,1 sec) ---//
 367              		.loc 1 440 4 is_stmt 1 view .LVU91
 440:Src/main.c    **** 			//--- put your counter here (count each 0,1 sec) ---//
 368              		.loc 1 440 13 is_stmt 0 view .LVU92
 369 0026 364A     		ldr	r2, .L26+12
 370 0028 1388     		ldrh	r3, [r2]
 371 002a 0133     		adds	r3, r3, #1
 372 002c 1380     		strh	r3, [r2]	@ movhi
 442:Src/main.c    **** 			count_imu++;
 373              		.loc 1 442 4 is_stmt 1 view .LVU93
 442:Src/main.c    **** 			count_imu++;
 374              		.loc 1 442 18 is_stmt 0 view .LVU94
 375 002e 354B     		ldr	r3, .L26+16
 376 0030 1988     		ldrh	r1, [r3]
 377 0032 0131     		adds	r1, r1, #1
 378 0034 89B2     		uxth	r1, r1
 379 0036 1980     		strh	r1, [r3]	@ movhi
 443:Src/main.c    **** 			count_atc++;
 380              		.loc 1 443 4 is_stmt 1 view .LVU95
 443:Src/main.c    **** 			count_atc++;
 381              		.loc 1 443 13 is_stmt 0 view .LVU96
 382 0038 334A     		ldr	r2, .L26+20
 383 003a 1388     		ldrh	r3, [r2]
 384 003c 0133     		adds	r3, r3, #1
 385 003e 9BB2     		uxth	r3, r3
 386 0040 1380     		strh	r3, [r2]	@ movhi
 444:Src/main.c    **** 			if (count_inverter ==
 387              		.loc 1 444 4 is_stmt 1 view .LVU97
 444:Src/main.c    **** 			if (count_inverter ==
 388              		.loc 1 444 13 is_stmt 0 view .LVU98
 389 0042 3248     		ldr	r0, .L26+24
 390              	.LVL20:
 444:Src/main.c    **** 			if (count_inverter ==
 391              		.loc 1 444 13 view .LVU99
 392 0044 0288     		ldrh	r2, [r0]
 393 0046 0132     		adds	r2, r2, #1
 394 0048 92B2     		uxth	r2, r2
 395 004a 0280     		strh	r2, [r0]	@ movhi
 445:Src/main.c    **** 				10) {  //--- check if inverter is connected ---//
 396              		.loc 1 445 4 is_stmt 1 view .LVU100
 445:Src/main.c    **** 				10) {  //--- check if inverter is connected ---//
 397              		.loc 1 445 7 is_stmt 0 view .LVU101
 398 004c 0A29     		cmp	r1, #10
 399 004e 01D0     		beq	.L13
ARM GAS  /tmp/ccwzORpx.s 			page 17


 448:Src/main.c    **** 				count_inverter = 10;
 400              		.loc 1 448 11 is_stmt 1 view .LVU102
 448:Src/main.c    **** 				count_inverter = 10;
 401              		.loc 1 448 14 is_stmt 0 view .LVU103
 402 0050 0B29     		cmp	r1, #11
 403 0052 35D0     		beq	.L21
 404              	.L13:
 451:Src/main.c    **** 				10) {  //--- check if Analog To Can is connected ---//
 405              		.loc 1 451 4 is_stmt 1 view .LVU104
 451:Src/main.c    **** 				10) {  //--- check if Analog To Can is connected ---//
 406              		.loc 1 451 7 is_stmt 0 view .LVU105
 407 0054 0A2A     		cmp	r2, #10
 408 0056 37D0     		beq	.L22
 455:Src/main.c    **** 				count_atc = 10;
 409              		.loc 1 455 11 is_stmt 1 view .LVU106
 455:Src/main.c    **** 				count_atc = 10;
 410              		.loc 1 455 14 is_stmt 0 view .LVU107
 411 0058 0B2A     		cmp	r2, #11
 412 005a 39D0     		beq	.L23
 413              	.L15:
 458:Src/main.c    **** 				// imu non presente //
 414              		.loc 1 458 4 is_stmt 1 view .LVU108
 458:Src/main.c    **** 				// imu non presente //
 415              		.loc 1 458 7 is_stmt 0 view .LVU109
 416 005c 0A2B     		cmp	r3, #10
 417 005e 3BD0     		beq	.L24
 463:Src/main.c    **** 				count_imu = 10;
 418              		.loc 1 463 11 is_stmt 1 view .LVU110
 463:Src/main.c    **** 				count_imu = 10;
 419              		.loc 1 463 14 is_stmt 0 view .LVU111
 420 0060 0B2B     		cmp	r3, #11
 421 0062 43D0     		beq	.L25
 422              	.L17:
 466:Src/main.c    **** 				count_dec = 0;
 423              		.loc 1 466 4 is_stmt 1 view .LVU112
 466:Src/main.c    **** 				count_dec = 0;
 424              		.loc 1 466 18 is_stmt 0 view .LVU113
 425 0064 264B     		ldr	r3, .L26+12
 426 0066 1B88     		ldrh	r3, [r3]
 466:Src/main.c    **** 				count_dec = 0;
 427              		.loc 1 466 7 view .LVU114
 428 0068 0A2B     		cmp	r3, #10
 429 006a CDD1     		bne	.L10
 467:Src/main.c    **** 				count_sec++;
 430              		.loc 1 467 5 is_stmt 1 view .LVU115
 467:Src/main.c    **** 				count_sec++;
 431              		.loc 1 467 15 is_stmt 0 view .LVU116
 432 006c 244B     		ldr	r3, .L26+12
 433 006e 0022     		movs	r2, #0
 434 0070 1A80     		strh	r2, [r3]	@ movhi
 468:Src/main.c    **** 				if (count_sec == 60) {
 435              		.loc 1 468 5 is_stmt 1 view .LVU117
 468:Src/main.c    **** 				if (count_sec == 60) {
 436              		.loc 1 468 14 is_stmt 0 view .LVU118
 437 0072 274A     		ldr	r2, .L26+28
 438 0074 1388     		ldrh	r3, [r2]
 439 0076 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccwzORpx.s 			page 18


 440 0078 9BB2     		uxth	r3, r3
 441 007a 1380     		strh	r3, [r2]	@ movhi
 469:Src/main.c    **** 					count_sec = 0;
 442              		.loc 1 469 5 is_stmt 1 view .LVU119
 469:Src/main.c    **** 					count_sec = 0;
 443              		.loc 1 469 8 is_stmt 0 view .LVU120
 444 007c 3C2B     		cmp	r3, #60
 445 007e C3D1     		bne	.L10
 470:Src/main.c    **** 					count_min++;
 446              		.loc 1 470 6 is_stmt 1 view .LVU121
 470:Src/main.c    **** 					count_min++;
 447              		.loc 1 470 16 is_stmt 0 view .LVU122
 448 0080 1346     		mov	r3, r2
 449 0082 0022     		movs	r2, #0
 450 0084 1A80     		strh	r2, [r3]	@ movhi
 471:Src/main.c    **** 					if (count_min == 60) {
 451              		.loc 1 471 6 is_stmt 1 view .LVU123
 471:Src/main.c    **** 					if (count_min == 60) {
 452              		.loc 1 471 15 is_stmt 0 view .LVU124
 453 0086 234A     		ldr	r2, .L26+32
 454 0088 1388     		ldrh	r3, [r2]
 455 008a 0133     		adds	r3, r3, #1
 456 008c 9BB2     		uxth	r3, r3
 457 008e 1380     		strh	r3, [r2]	@ movhi
 472:Src/main.c    **** 						count_min = 0;
 458              		.loc 1 472 6 is_stmt 1 view .LVU125
 472:Src/main.c    **** 						count_min = 0;
 459              		.loc 1 472 9 is_stmt 0 view .LVU126
 460 0090 3C2B     		cmp	r3, #60
 461 0092 B9D1     		bne	.L10
 473:Src/main.c    **** 						count_hour++;
 462              		.loc 1 473 7 is_stmt 1 view .LVU127
 473:Src/main.c    **** 						count_hour++;
 463              		.loc 1 473 17 is_stmt 0 view .LVU128
 464 0094 1346     		mov	r3, r2
 465 0096 0022     		movs	r2, #0
 466 0098 1A80     		strh	r2, [r3]	@ movhi
 474:Src/main.c    **** 					}
 467              		.loc 1 474 7 is_stmt 1 view .LVU129
 474:Src/main.c    **** 					}
 468              		.loc 1 474 17 is_stmt 0 view .LVU130
 469 009a 1F4A     		ldr	r2, .L26+36
 470 009c 1388     		ldrh	r3, [r2]
 471 009e 0133     		adds	r3, r3, #1
 472 00a0 1380     		strh	r3, [r2]	@ movhi
 473              		.loc 1 480 1 view .LVU131
 474 00a2 B1E7     		b	.L10
 475              	.LVL21:
 476              	.L20:
 431:Src/main.c    **** 			if (accel_implausibility_check_count == 50) {
 477              		.loc 1 431 4 is_stmt 1 view .LVU132
 431:Src/main.c    **** 			if (accel_implausibility_check_count == 50) {
 478              		.loc 1 431 36 is_stmt 0 view .LVU133
 479 00a4 1D49     		ldr	r1, .L26+40
 480 00a6 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 481 00a8 0132     		adds	r2, r2, #1
 482 00aa D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccwzORpx.s 			page 19


 483 00ac 0A70     		strb	r2, [r1]
 432:Src/main.c    **** 				accel_implausibility_check_count_flag = 2;
 484              		.loc 1 432 4 is_stmt 1 view .LVU134
 432:Src/main.c    **** 				accel_implausibility_check_count_flag = 2;
 485              		.loc 1 432 7 is_stmt 0 view .LVU135
 486 00ae 322A     		cmp	r2, #50
 487 00b0 B4D1     		bne	.L12
 433:Src/main.c    **** 				accel_implausibility_check_count = 0;
 488              		.loc 1 433 5 is_stmt 1 view .LVU136
 433:Src/main.c    **** 				accel_implausibility_check_count = 0;
 489              		.loc 1 433 43 is_stmt 0 view .LVU137
 490 00b2 124A     		ldr	r2, .L26+8
 491 00b4 0221     		movs	r1, #2
 492 00b6 1170     		strb	r1, [r2]
 434:Src/main.c    **** 				// TODO: add error messages
 493              		.loc 1 434 5 is_stmt 1 view .LVU138
 434:Src/main.c    **** 				// TODO: add error messages
 494              		.loc 1 434 38 is_stmt 0 view .LVU139
 495 00b8 184A     		ldr	r2, .L26+40
 496 00ba 0021     		movs	r1, #0
 497 00bc 1170     		strb	r1, [r2]
 498 00be ADE7     		b	.L12
 499              	.LVL22:
 500              	.L21:
 449:Src/main.c    **** 			}
 501              		.loc 1 449 5 is_stmt 1 view .LVU140
 449:Src/main.c    **** 			}
 502              		.loc 1 449 20 is_stmt 0 view .LVU141
 503 00c0 1049     		ldr	r1, .L26+16
 504 00c2 0A20     		movs	r0, #10
 505 00c4 0880     		strh	r0, [r1]	@ movhi
 506 00c6 C5E7     		b	.L13
 507              	.L22:
 454:Src/main.c    **** 			} else if (count_atc == 11) {
 508              		.loc 1 454 5 is_stmt 1 view .LVU142
 454:Src/main.c    **** 			} else if (count_atc == 11) {
 509              		.loc 1 454 19 is_stmt 0 view .LVU143
 510 00c8 154A     		ldr	r2, .L26+44
 511 00ca 0021     		movs	r1, #0
 512 00cc 1170     		strb	r1, [r2]
 513 00ce C5E7     		b	.L15
 514              	.L23:
 456:Src/main.c    **** 			}
 515              		.loc 1 456 5 is_stmt 1 view .LVU144
 456:Src/main.c    **** 			}
 516              		.loc 1 456 15 is_stmt 0 view .LVU145
 517 00d0 0E4A     		ldr	r2, .L26+24
 518 00d2 0A21     		movs	r1, #10
 519 00d4 1180     		strh	r1, [r2]	@ movhi
 520 00d6 C1E7     		b	.L15
 521              	.L24:
 460:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)"IMU non presente\r\n",
 522              		.loc 1 460 5 is_stmt 1 view .LVU146
 460:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)"IMU non presente\r\n",
 523              		.loc 1 460 19 is_stmt 0 view .LVU147
 524 00d8 124B     		ldr	r3, .L26+48
 525 00da 0022     		movs	r2, #0
ARM GAS  /tmp/ccwzORpx.s 			page 20


 526 00dc 1A70     		strb	r2, [r3]
 461:Src/main.c    **** 								  strlen("IMU non presente\r\n"), 10);
 527              		.loc 1 461 5 is_stmt 1 view .LVU148
 528 00de 0A23     		movs	r3, #10
 529 00e0 1222     		movs	r2, #18
 530 00e2 1149     		ldr	r1, .L26+52
 531 00e4 1148     		ldr	r0, .L26+56
 532 00e6 FFF7FEFF 		bl	HAL_UART_Transmit
 533              	.LVL23:
 534 00ea BBE7     		b	.L17
 535              	.L25:
 464:Src/main.c    **** 			}
 536              		.loc 1 464 5 view .LVU149
 464:Src/main.c    **** 			}
 537              		.loc 1 464 15 is_stmt 0 view .LVU150
 538 00ec 064B     		ldr	r3, .L26+20
 539 00ee 0A22     		movs	r2, #10
 540 00f0 1A80     		strh	r2, [r3]	@ movhi
 541 00f2 B7E7     		b	.L17
 542              	.L27:
 543              		.align	2
 544              	.L26:
 545 00f4 00000000 		.word	htim2
 546 00f8 00000000 		.word	count_ms
 547 00fc 00000000 		.word	accel_implausibility_check_count_flag
 548 0100 00000000 		.word	count_dec
 549 0104 00000000 		.word	count_inverter
 550 0108 00000000 		.word	count_imu
 551 010c 00000000 		.word	count_atc
 552 0110 00000000 		.word	count_sec
 553 0114 00000000 		.word	count_min
 554 0118 00000000 		.word	count_hour
 555 011c 00000000 		.word	accel_implausibility_check_count
 556 0120 00000000 		.word	atc_connected
 557 0124 00000000 		.word	imu_connected
 558 0128 00000000 		.word	.LC0
 559 012c 00000000 		.word	huart3
 560              		.cfi_endproc
 561              	.LFE152:
 563              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 564              		.align	1
 565              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 566              		.syntax unified
 567              		.thumb
 568              		.thumb_func
 569              		.fpu fpv5-d16
 571              	HAL_CAN_RxFifo0MsgPendingCallback:
 572              	.LVL24:
 573              	.LFB153:
 481:Src/main.c    **** 
 482:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 574              		.loc 1 482 65 is_stmt 1 view -0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 32
 577              		@ frame_needed = 0, uses_anonymous_args = 0
 578              		.loc 1 482 65 is_stmt 0 view .LVU152
 579 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccwzORpx.s 			page 21


 580              	.LCFI5:
 581              		.cfi_def_cfa_offset 8
 582              		.cfi_offset 4, -8
 583              		.cfi_offset 14, -4
 584 0002 88B0     		sub	sp, sp, #32
 585              	.LCFI6:
 586              		.cfi_def_cfa_offset 40
 587 0004 0446     		mov	r4, r0
 483:Src/main.c    **** 	/*sprintf(txt, "%d\r\n", HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 484:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 485:Src/main.c    **** 
 486:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 588              		.loc 1 486 2 is_stmt 1 view .LVU153
 589 0006 8021     		movs	r1, #128
 590 0008 0E48     		ldr	r0, .L32
 591              	.LVL25:
 592              		.loc 1 486 2 is_stmt 0 view .LVU154
 593 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 594              	.LVL26:
 487:Src/main.c    **** 	if (hcan == &hcan1) {
 595              		.loc 1 487 2 is_stmt 1 view .LVU155
 596              		.loc 1 487 5 is_stmt 0 view .LVU156
 597 000e 0E4B     		ldr	r3, .L32+4
 598 0010 9C42     		cmp	r4, r3
 599 0012 01D0     		beq	.L31
 600              	.LVL27:
 601              	.L28:
 488:Src/main.c    **** 		// HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO0\r\n", strlen("rx on
 489:Src/main.c    **** 		// FIFO0\r\n"), 10);
 490:Src/main.c    **** 		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0) {
 491:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 492:Src/main.c    **** 			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &header,
 493:Src/main.c    **** 								 can1.dataRX_int);
 494:Src/main.c    **** 			can1.rx_id_int = header.StdId;
 495:Src/main.c    **** 			can1.rx_size_int = header.DLC;
 496:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 497:Src/main.c    **** 			/*sprintf(txt, "DATA: %d %d %d %d %d %d %d %d\r\n", can1.dataRx[0],
 498:Src/main.c    **** 					can1.dataRx[1], can1.dataRx[2], can1.dataRx[3],
 499:Src/main.c    **** 					can1.dataRx[4], can1.dataRx[5], can1.dataRx[6],
 500:Src/main.c    **** 					can1.dataRx[7]);*/
 501:Src/main.c    **** 			// HAL_UART_Transmit(&huart3, (uint8_t *)txt, strlen(txt), 100);
 502:Src/main.c    **** 			// HAL_UART_Transmit(&huart3, (uint8_t*)"ciao2\r\n",
 503:Src/main.c    **** 			// strlen("ciao2\r\n"), 10);
 504:Src/main.c    **** 		}
 505:Src/main.c    **** 	}
 506:Src/main.c    **** }
 602              		.loc 1 506 1 view .LVU157
 603 0014 08B0     		add	sp, sp, #32
 604              	.LCFI7:
 605              		.cfi_remember_state
 606              		.cfi_def_cfa_offset 8
 607              		@ sp needed
 608 0016 10BD     		pop	{r4, pc}
 609              	.LVL28:
 610              	.L31:
 611              	.LCFI8:
 612              		.cfi_restore_state
ARM GAS  /tmp/ccwzORpx.s 			page 22


 490:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 613              		.loc 1 490 3 is_stmt 1 view .LVU158
 490:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 614              		.loc 1 490 7 is_stmt 0 view .LVU159
 615 0018 0021     		movs	r1, #0
 616 001a 1846     		mov	r0, r3
 617 001c FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 618              	.LVL29:
 490:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 619              		.loc 1 490 6 view .LVU160
 620 0020 0028     		cmp	r0, #0
 621 0022 F7D0     		beq	.L28
 622              	.LBB6:
 491:Src/main.c    **** 			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &header,
 623              		.loc 1 491 4 is_stmt 1 view .LVU161
 492:Src/main.c    **** 								 can1.dataRX_int);
 624              		.loc 1 492 4 view .LVU162
 625 0024 094C     		ldr	r4, .L32+8
 626              	.LVL30:
 492:Src/main.c    **** 								 can1.dataRX_int);
 627              		.loc 1 492 4 is_stmt 0 view .LVU163
 628 0026 2346     		mov	r3, r4
 629 0028 01AA     		add	r2, sp, #4
 630 002a 0021     		movs	r1, #0
 631 002c 0648     		ldr	r0, .L32+4
 632 002e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 633              	.LVL31:
 494:Src/main.c    **** 			can1.rx_size_int = header.DLC;
 634              		.loc 1 494 4 is_stmt 1 view .LVU164
 494:Src/main.c    **** 			can1.rx_size_int = header.DLC;
 635              		.loc 1 494 19 is_stmt 0 view .LVU165
 636 0032 A4F11C00 		sub	r0, r4, #28
 637 0036 019B     		ldr	r3, [sp, #4]
 638 0038 4363     		str	r3, [r0, #52]
 495:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 639              		.loc 1 495 4 is_stmt 1 view .LVU166
 495:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 640              		.loc 1 495 29 is_stmt 0 view .LVU167
 641 003a 059B     		ldr	r3, [sp, #20]
 495:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 642              		.loc 1 495 21 view .LVU168
 643 003c 8360     		str	r3, [r0, #8]
 496:Src/main.c    **** 			/*sprintf(txt, "DATA: %d %d %d %d %d %d %d %d\r\n", can1.dataRx[0],
 644              		.loc 1 496 4 is_stmt 1 view .LVU169
 645 003e FFF7FEFF 		bl	fifoRxDataCAN_push
 646              	.LVL32:
 647              	.LBE6:
 648              		.loc 1 506 1 is_stmt 0 view .LVU170
 649 0042 E7E7     		b	.L28
 650              	.L33:
 651              		.align	2
 652              	.L32:
 653 0044 00040240 		.word	1073873920
 654 0048 00000000 		.word	hcan1
 655 004c 1C000000 		.word	can1+28
 656              		.cfi_endproc
 657              	.LFE153:
ARM GAS  /tmp/ccwzORpx.s 			page 23


 659              		.section	.rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4,"aMS",%progbits,1
 660              		.align	2
 661              	.LC1:
 662 0000 7278206F 		.ascii	"rx on FIFO1\015\012\000"
 662      6E204649 
 662      464F310D 
 662      0A00
 663              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 664              		.align	1
 665              		.global	HAL_CAN_RxFifo1MsgPendingCallback
 666              		.syntax unified
 667              		.thumb
 668              		.thumb_func
 669              		.fpu fpv5-d16
 671              	HAL_CAN_RxFifo1MsgPendingCallback:
 672              	.LVL33:
 673              	.LFB154:
 507:Src/main.c    **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 674              		.loc 1 507 65 is_stmt 1 view -0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              		.loc 1 507 65 is_stmt 0 view .LVU172
 679 0000 08B5     		push	{r3, lr}
 680              	.LCFI9:
 681              		.cfi_def_cfa_offset 8
 682              		.cfi_offset 3, -8
 683              		.cfi_offset 14, -4
 508:Src/main.c    **** 	if (hcan == &hcan1) {
 684              		.loc 1 508 2 is_stmt 1 view .LVU173
 685              		.loc 1 508 5 is_stmt 0 view .LVU174
 686 0002 054B     		ldr	r3, .L38
 687 0004 8342     		cmp	r3, r0
 688 0006 00D0     		beq	.L37
 689              	.LVL34:
 690              	.L34:
 509:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"rx on FIFO1\r\n",
 510:Src/main.c    **** 						  strlen("rx on FIFO1\r\n"), 10);
 511:Src/main.c    **** 	}
 512:Src/main.c    **** }
 691              		.loc 1 512 1 view .LVU175
 692 0008 08BD     		pop	{r3, pc}
 693              	.LVL35:
 694              	.L37:
 509:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"rx on FIFO1\r\n",
 695              		.loc 1 509 3 is_stmt 1 view .LVU176
 696 000a 0A23     		movs	r3, #10
 697 000c 0D22     		movs	r2, #13
 698 000e 0349     		ldr	r1, .L38+4
 699 0010 0348     		ldr	r0, .L38+8
 700              	.LVL36:
 509:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"rx on FIFO1\r\n",
 701              		.loc 1 509 3 is_stmt 0 view .LVU177
 702 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 703              	.LVL37:
 704              		.loc 1 512 1 view .LVU178
 705 0016 F7E7     		b	.L34
ARM GAS  /tmp/ccwzORpx.s 			page 24


 706              	.L39:
 707              		.align	2
 708              	.L38:
 709 0018 00000000 		.word	hcan1
 710 001c 00000000 		.word	.LC1
 711 0020 00000000 		.word	huart3
 712              		.cfi_endproc
 713              	.LFE154:
 715              		.section	.rodata.HAL_CAN_RxFifo0FullCallback.str1.4,"aMS",%progbits,1
 716              		.align	2
 717              	.LC2:
 718 0000 4649464F 		.ascii	"FIFO0 FULL\015\012\000"
 718      30204655 
 718      4C4C0D0A 
 718      00
 719              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 720              		.align	1
 721              		.global	HAL_CAN_RxFifo0FullCallback
 722              		.syntax unified
 723              		.thumb
 724              		.thumb_func
 725              		.fpu fpv5-d16
 727              	HAL_CAN_RxFifo0FullCallback:
 728              	.LVL38:
 729              	.LFB155:
 513:Src/main.c    **** 
 514:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 730              		.loc 1 514 59 is_stmt 1 view -0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734              		.loc 1 514 59 is_stmt 0 view .LVU180
 735 0000 08B5     		push	{r3, lr}
 736              	.LCFI10:
 737              		.cfi_def_cfa_offset 8
 738              		.cfi_offset 3, -8
 739              		.cfi_offset 14, -4
 515:Src/main.c    **** 	if (hcan == &hcan1) {
 740              		.loc 1 515 2 is_stmt 1 view .LVU181
 741              		.loc 1 515 5 is_stmt 0 view .LVU182
 742 0002 054B     		ldr	r3, .L44
 743 0004 8342     		cmp	r3, r0
 744 0006 00D0     		beq	.L43
 745              	.LVL39:
 746              	.L40:
 516:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO0 FULL\r\n",
 517:Src/main.c    **** 						  strlen("FIFO0 FULL\r\n"), 10);
 518:Src/main.c    **** 	}
 519:Src/main.c    **** }
 747              		.loc 1 519 1 view .LVU183
 748 0008 08BD     		pop	{r3, pc}
 749              	.LVL40:
 750              	.L43:
 516:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO0 FULL\r\n",
 751              		.loc 1 516 3 is_stmt 1 view .LVU184
 752 000a 0A23     		movs	r3, #10
 753 000c 0C22     		movs	r2, #12
ARM GAS  /tmp/ccwzORpx.s 			page 25


 754 000e 0349     		ldr	r1, .L44+4
 755 0010 0348     		ldr	r0, .L44+8
 756              	.LVL41:
 516:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO0 FULL\r\n",
 757              		.loc 1 516 3 is_stmt 0 view .LVU185
 758 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 759              	.LVL42:
 760              		.loc 1 519 1 view .LVU186
 761 0016 F7E7     		b	.L40
 762              	.L45:
 763              		.align	2
 764              	.L44:
 765 0018 00000000 		.word	hcan1
 766 001c 00000000 		.word	.LC2
 767 0020 00000000 		.word	huart3
 768              		.cfi_endproc
 769              	.LFE155:
 771              		.section	.rodata.HAL_CAN_RxFifo1FullCallback.str1.4,"aMS",%progbits,1
 772              		.align	2
 773              	.LC3:
 774 0000 4649464F 		.ascii	"FIFO1 FULL\015\012\000"
 774      31204655 
 774      4C4C0D0A 
 774      00
 775              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 776              		.align	1
 777              		.global	HAL_CAN_RxFifo1FullCallback
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv5-d16
 783              	HAL_CAN_RxFifo1FullCallback:
 784              	.LVL43:
 785              	.LFB156:
 520:Src/main.c    **** void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan) {
 786              		.loc 1 520 59 is_stmt 1 view -0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		.loc 1 520 59 is_stmt 0 view .LVU188
 791 0000 08B5     		push	{r3, lr}
 792              	.LCFI11:
 793              		.cfi_def_cfa_offset 8
 794              		.cfi_offset 3, -8
 795              		.cfi_offset 14, -4
 521:Src/main.c    **** 	if (hcan == &hcan1) {
 796              		.loc 1 521 2 is_stmt 1 view .LVU189
 797              		.loc 1 521 5 is_stmt 0 view .LVU190
 798 0002 054B     		ldr	r3, .L50
 799 0004 8342     		cmp	r3, r0
 800 0006 00D0     		beq	.L49
 801              	.LVL44:
 802              	.L46:
 522:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO1 FULL\r\n",
 523:Src/main.c    **** 						  strlen("FIFO1 FULL\r\n"), 10);
 524:Src/main.c    **** 	}
 525:Src/main.c    **** }
ARM GAS  /tmp/ccwzORpx.s 			page 26


 803              		.loc 1 525 1 view .LVU191
 804 0008 08BD     		pop	{r3, pc}
 805              	.LVL45:
 806              	.L49:
 522:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO1 FULL\r\n",
 807              		.loc 1 522 3 is_stmt 1 view .LVU192
 808 000a 0A23     		movs	r3, #10
 809 000c 0C22     		movs	r2, #12
 810 000e 0349     		ldr	r1, .L50+4
 811 0010 0348     		ldr	r0, .L50+8
 812              	.LVL46:
 522:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t *)"FIFO1 FULL\r\n",
 813              		.loc 1 522 3 is_stmt 0 view .LVU193
 814 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 815              	.LVL47:
 816              		.loc 1 525 1 view .LVU194
 817 0016 F7E7     		b	.L46
 818              	.L51:
 819              		.align	2
 820              	.L50:
 821 0018 00000000 		.word	hcan1
 822 001c 00000000 		.word	.LC3
 823 0020 00000000 		.word	huart3
 824              		.cfi_endproc
 825              	.LFE156:
 827              		.section	.rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4,"aMS",%progbits,1
 828              		.align	2
 829              	.LC4:
 830 0000 6D62303A 		.ascii	"mb0: %d\015\012\000"
 830      2025640D 
 830      0A00
 831 000a 0000     		.align	2
 832              	.LC5:
 833 000c 68696768 		.ascii	"high\015\012\000"
 833      0D0A00
 834              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 835              		.align	1
 836              		.global	HAL_CAN_TxMailbox0CompleteCallback
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv5-d16
 842              	HAL_CAN_TxMailbox0CompleteCallback:
 843              	.LVL48:
 844              	.LFB157:
 526:Src/main.c    **** 
 527:Src/main.c    **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 845              		.loc 1 527 66 is_stmt 1 view -0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              		.loc 1 527 66 is_stmt 0 view .LVU196
 850 0000 38B5     		push	{r3, r4, r5, lr}
 851              	.LCFI12:
 852              		.cfi_def_cfa_offset 16
 853              		.cfi_offset 3, -16
 854              		.cfi_offset 4, -12
ARM GAS  /tmp/ccwzORpx.s 			page 27


 855              		.cfi_offset 5, -8
 856              		.cfi_offset 14, -4
 857 0002 0446     		mov	r4, r0
 528:Src/main.c    **** 	sprintf(txt, "mb0: %d\r\n", (int)can1.idBck);
 858              		.loc 1 528 2 is_stmt 1 view .LVU197
 859 0004 184D     		ldr	r5, .L57
 860 0006 194B     		ldr	r3, .L57+4
 861 0008 9A6B     		ldr	r2, [r3, #56]
 862 000a 1949     		ldr	r1, .L57+8
 863 000c 2846     		mov	r0, r5
 864              	.LVL49:
 865              		.loc 1 528 2 is_stmt 0 view .LVU198
 866 000e FFF7FEFF 		bl	sprintf
 867              	.LVL50:
 529:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 868              		.loc 1 529 2 is_stmt 1 view .LVU199
 869              		.loc 1 529 47 is_stmt 0 view .LVU200
 870 0012 2846     		mov	r0, r5
 871 0014 FFF7FEFF 		bl	strlen
 872              	.LVL51:
 873              		.loc 1 529 2 view .LVU201
 874 0018 0A23     		movs	r3, #10
 875 001a 82B2     		uxth	r2, r0
 876 001c 2946     		mov	r1, r5
 877 001e 1548     		ldr	r0, .L57+12
 878 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 879              	.LVL52:
 530:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 880              		.loc 1 530 2 is_stmt 1 view .LVU202
 881 0024 0121     		movs	r1, #1
 882 0026 1448     		ldr	r0, .L57+16
 883 0028 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 884              	.LVL53:
 531:Src/main.c    **** 	if (hcan == &hcan1) {
 885              		.loc 1 531 2 view .LVU203
 886              		.loc 1 531 5 is_stmt 0 view .LVU204
 887 002c 134B     		ldr	r3, .L57+20
 888 002e 9C42     		cmp	r4, r3
 889 0030 00D0     		beq	.L56
 890              	.L52:
 532:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 533:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 534:Src/main.c    **** 				// TODO: implementare errore
 535:Src/main.c    **** 			} else {
 536:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)("high\r\n"),
 537:Src/main.c    **** 								  strlen("high\r\n"), 10);
 538:Src/main.c    **** 			}
 539:Src/main.c    **** 		} else if (fifoTxDataCAN_normal_pop(&can1)) {
 540:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 541:Src/main.c    **** 			// strlen("Prendo dalla fifo\r\n"), 10);
 542:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 543:Src/main.c    **** 				// TODO: implementare errore
 544:Src/main.c    **** 			}
 545:Src/main.c    **** 		} else {
 546:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 547:Src/main.c    **** 			// strlen("Fifo vuota\r\n"), 10);
 548:Src/main.c    **** 		}
ARM GAS  /tmp/ccwzORpx.s 			page 28


 549:Src/main.c    **** 	} /*else{
 550:Src/main.c    **** 	 HAL_UART_Transmit(&huart3,(uint8_t*)("Messaggio trasmesso\r\n"),
 551:Src/main.c    **** 	 strlen("Messaggio trasmesso\r\n"), 10);
 552:Src/main.c    **** 		 //HAL_GPIO_TogglePin(USER_LED_4_GPIO_Port, USER_LED_4_Pin);
 553:Src/main.c    **** 		 fifoDataType fifodata;
 554:Src/main.c    **** 		 if(fifoTxDataCAN3_high_pop(&fifoCAN3, &fifodata)){
 555:Src/main.c    **** 			 for(int i = 0; i < 8; i++){
 556:Src/main.c    **** 				 can3.dataTx[i] = fifodata.data[i];
 557:Src/main.c    **** 			 }
 558:Src/main.c    **** 			 if(CAN_Send_IT(&can3, fifodata.id) == 0){
 559:Src/main.c    **** 				 //TODO: implementare errore
 560:Src/main.c    **** 			 }
 561:Src/main.c    **** 		 }else if(fifoTxDataCAN3_normal_pop(&fifoCAN3, &fifodata)){
 562:Src/main.c    **** 			 HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 563:Src/main.c    **** 	 strlen("Prendo dalla fifo\r\n"), 10); for(int i = 0; i < 8; i++){
 564:Src/main.c    **** 				 can3.dataTx[i] = fifodata.data[i];
 565:Src/main.c    **** 			 }
 566:Src/main.c    **** 			 if(CAN_Send_IT(&can3, fifodata.id) == 0){
 567:Src/main.c    **** 				 //TODO: implementare errore
 568:Src/main.c    **** 			 }
 569:Src/main.c    **** 		 }else{
 570:Src/main.c    **** 			 //TODO: riattivare interrupt
 571:Src/main.c    **** 			 HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 572:Src/main.c    **** 	 strlen("Fifo vuota\r\n"), 10);
 573:Src/main.c    **** 		 }*/
 574:Src/main.c    **** 	  //}
 575:Src/main.c    **** }
 891              		.loc 1 575 1 view .LVU205
 892 0032 38BD     		pop	{r3, r4, r5, pc}
 893              	.LVL54:
 894              	.L56:
 532:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 895              		.loc 1 532 3 is_stmt 1 view .LVU206
 532:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 896              		.loc 1 532 7 is_stmt 0 view .LVU207
 897 0034 0D48     		ldr	r0, .L57+4
 898 0036 FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 899              	.LVL55:
 532:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 900              		.loc 1 532 6 view .LVU208
 901 003a 58B1     		cbz	r0, .L54
 533:Src/main.c    **** 				// TODO: implementare errore
 902              		.loc 1 533 4 is_stmt 1 view .LVU209
 533:Src/main.c    **** 				// TODO: implementare errore
 903              		.loc 1 533 8 is_stmt 0 view .LVU210
 904 003c 0B48     		ldr	r0, .L57+4
 905 003e FFF7FEFF 		bl	CAN_Send_IT
 906              	.LVL56:
 533:Src/main.c    **** 				// TODO: implementare errore
 907              		.loc 1 533 7 view .LVU211
 908 0042 0028     		cmp	r0, #0
 909 0044 F5D0     		beq	.L52
 536:Src/main.c    **** 								  strlen("high\r\n"), 10);
 910              		.loc 1 536 5 is_stmt 1 view .LVU212
 911 0046 0A23     		movs	r3, #10
 912 0048 0622     		movs	r2, #6
 913 004a 0D49     		ldr	r1, .L57+24
ARM GAS  /tmp/ccwzORpx.s 			page 29


 914 004c 0948     		ldr	r0, .L57+12
 915 004e FFF7FEFF 		bl	HAL_UART_Transmit
 916              	.LVL57:
 917 0052 EEE7     		b	.L52
 918              	.L54:
 539:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 919              		.loc 1 539 10 view .LVU213
 539:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 920              		.loc 1 539 14 is_stmt 0 view .LVU214
 921 0054 0548     		ldr	r0, .L57+4
 922 0056 FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 923              	.LVL58:
 539:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 924              		.loc 1 539 13 view .LVU215
 925 005a 0028     		cmp	r0, #0
 926 005c E9D0     		beq	.L52
 542:Src/main.c    **** 				// TODO: implementare errore
 927              		.loc 1 542 4 is_stmt 1 view .LVU216
 542:Src/main.c    **** 				// TODO: implementare errore
 928              		.loc 1 542 8 is_stmt 0 view .LVU217
 929 005e 0348     		ldr	r0, .L57+4
 930 0060 FFF7FEFF 		bl	CAN_Send_IT
 931              	.LVL59:
 544:Src/main.c    **** 		} else {
 932              		.loc 1 544 4 is_stmt 1 view .LVU218
 548:Src/main.c    **** 	} /*else{
 933              		.loc 1 548 3 view .LVU219
 934              		.loc 1 575 1 is_stmt 0 view .LVU220
 935 0064 E5E7     		b	.L52
 936              	.L58:
 937 0066 00BF     		.align	2
 938              	.L57:
 939 0068 00000000 		.word	txt
 940 006c 00000000 		.word	can1
 941 0070 00000000 		.word	.LC4
 942 0074 00000000 		.word	huart3
 943 0078 00040240 		.word	1073873920
 944 007c 00000000 		.word	hcan1
 945 0080 0C000000 		.word	.LC5
 946              		.cfi_endproc
 947              	.LFE157:
 949              		.section	.rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4,"aMS",%progbits,1
 950              		.align	2
 951              	.LC6:
 952 0000 6D62313A 		.ascii	"mb1: %d %d\015\012\000"
 952      20256420 
 952      25640D0A 
 952      00
 953              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 954              		.align	1
 955              		.global	HAL_CAN_TxMailbox1CompleteCallback
 956              		.syntax unified
 957              		.thumb
 958              		.thumb_func
 959              		.fpu fpv5-d16
 961              	HAL_CAN_TxMailbox1CompleteCallback:
 962              	.LVL60:
ARM GAS  /tmp/ccwzORpx.s 			page 30


 963              	.LFB158:
 576:Src/main.c    **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 964              		.loc 1 576 66 is_stmt 1 view -0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              		.loc 1 576 66 is_stmt 0 view .LVU222
 969 0000 38B5     		push	{r3, r4, r5, lr}
 970              	.LCFI13:
 971              		.cfi_def_cfa_offset 16
 972              		.cfi_offset 3, -16
 973              		.cfi_offset 4, -12
 974              		.cfi_offset 5, -8
 975              		.cfi_offset 14, -4
 976 0002 0446     		mov	r4, r0
 577:Src/main.c    **** 	sprintf(txt, "mb1: %d %d\r\n", can1.fifo.txTailNormal,
 977              		.loc 1 577 2 is_stmt 1 view .LVU223
 978              		.loc 1 577 42 is_stmt 0 view .LVU224
 979 0004 194A     		ldr	r2, .L64
 980              		.loc 1 577 2 view .LVU225
 981 0006 1A4D     		ldr	r5, .L64+4
 982 0008 92F87230 		ldrb	r3, [r2, #114]	@ zero_extendqisi2
 983 000c 92F87320 		ldrb	r2, [r2, #115]	@ zero_extendqisi2
 984 0010 1849     		ldr	r1, .L64+8
 985 0012 2846     		mov	r0, r5
 986              	.LVL61:
 987              		.loc 1 577 2 view .LVU226
 988 0014 FFF7FEFF 		bl	sprintf
 989              	.LVL62:
 578:Src/main.c    **** 			can1.fifo.txHeadNormal);
 579:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 990              		.loc 1 579 2 is_stmt 1 view .LVU227
 991              		.loc 1 579 47 is_stmt 0 view .LVU228
 992 0018 2846     		mov	r0, r5
 993 001a FFF7FEFF 		bl	strlen
 994              	.LVL63:
 995              		.loc 1 579 2 view .LVU229
 996 001e 0A23     		movs	r3, #10
 997 0020 82B2     		uxth	r2, r0
 998 0022 2946     		mov	r1, r5
 999 0024 1448     		ldr	r0, .L64+12
 1000 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 1001              	.LVL64:
 580:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 1002              		.loc 1 580 2 is_stmt 1 view .LVU230
 1003 002a 0121     		movs	r1, #1
 1004 002c 1348     		ldr	r0, .L64+16
 1005 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1006              	.LVL65:
 581:Src/main.c    **** 	if (hcan == &hcan1) {
 1007              		.loc 1 581 2 view .LVU231
 1008              		.loc 1 581 5 is_stmt 0 view .LVU232
 1009 0032 134B     		ldr	r3, .L64+20
 1010 0034 9C42     		cmp	r4, r3
 1011 0036 00D0     		beq	.L63
 1012              	.L59:
 582:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
ARM GAS  /tmp/ccwzORpx.s 			page 31


 583:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 584:Src/main.c    **** 				// TODO: implementare errore
 585:Src/main.c    **** 			} else {
 586:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)("high\r\n"),
 587:Src/main.c    **** 								  strlen("high\r\n"), 10);
 588:Src/main.c    **** 			}
 589:Src/main.c    **** 		} else if (fifoTxDataCAN_normal_pop(&can1)) {
 590:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 591:Src/main.c    **** 			// strlen("Prendo dalla fifo\r\n"), 10);
 592:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 593:Src/main.c    **** 				// TODO: implementare errore
 594:Src/main.c    **** 			}
 595:Src/main.c    **** 		} else {
 596:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 597:Src/main.c    **** 			// strlen("Fifo vuota\r\n"), 10);
 598:Src/main.c    **** 		}
 599:Src/main.c    **** 	}
 600:Src/main.c    **** }
 1013              		.loc 1 600 1 view .LVU233
 1014 0038 38BD     		pop	{r3, r4, r5, pc}
 1015              	.LVL66:
 1016              	.L63:
 582:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 1017              		.loc 1 582 3 is_stmt 1 view .LVU234
 582:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 1018              		.loc 1 582 7 is_stmt 0 view .LVU235
 1019 003a 0C48     		ldr	r0, .L64
 1020 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 1021              	.LVL67:
 582:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 1022              		.loc 1 582 6 view .LVU236
 1023 0040 58B1     		cbz	r0, .L61
 583:Src/main.c    **** 				// TODO: implementare errore
 1024              		.loc 1 583 4 is_stmt 1 view .LVU237
 583:Src/main.c    **** 				// TODO: implementare errore
 1025              		.loc 1 583 8 is_stmt 0 view .LVU238
 1026 0042 0A48     		ldr	r0, .L64
 1027 0044 FFF7FEFF 		bl	CAN_Send_IT
 1028              	.LVL68:
 583:Src/main.c    **** 				// TODO: implementare errore
 1029              		.loc 1 583 7 view .LVU239
 1030 0048 0028     		cmp	r0, #0
 1031 004a F5D0     		beq	.L59
 586:Src/main.c    **** 								  strlen("high\r\n"), 10);
 1032              		.loc 1 586 5 is_stmt 1 view .LVU240
 1033 004c 0A23     		movs	r3, #10
 1034 004e 0622     		movs	r2, #6
 1035 0050 0C49     		ldr	r1, .L64+24
 1036 0052 0948     		ldr	r0, .L64+12
 1037 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 1038              	.LVL69:
 1039 0058 EEE7     		b	.L59
 1040              	.L61:
 589:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 1041              		.loc 1 589 10 view .LVU241
 589:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 1042              		.loc 1 589 14 is_stmt 0 view .LVU242
ARM GAS  /tmp/ccwzORpx.s 			page 32


 1043 005a 0448     		ldr	r0, .L64
 1044 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 1045              	.LVL70:
 589:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 1046              		.loc 1 589 13 view .LVU243
 1047 0060 0028     		cmp	r0, #0
 1048 0062 E9D0     		beq	.L59
 592:Src/main.c    **** 				// TODO: implementare errore
 1049              		.loc 1 592 4 is_stmt 1 view .LVU244
 592:Src/main.c    **** 				// TODO: implementare errore
 1050              		.loc 1 592 8 is_stmt 0 view .LVU245
 1051 0064 0148     		ldr	r0, .L64
 1052 0066 FFF7FEFF 		bl	CAN_Send_IT
 1053              	.LVL71:
 594:Src/main.c    **** 		} else {
 1054              		.loc 1 594 4 is_stmt 1 view .LVU246
 598:Src/main.c    **** 	}
 1055              		.loc 1 598 3 view .LVU247
 1056              		.loc 1 600 1 is_stmt 0 view .LVU248
 1057 006a E5E7     		b	.L59
 1058              	.L65:
 1059              		.align	2
 1060              	.L64:
 1061 006c 00000000 		.word	can1
 1062 0070 00000000 		.word	txt
 1063 0074 00000000 		.word	.LC6
 1064 0078 00000000 		.word	huart3
 1065 007c 00040240 		.word	1073873920
 1066 0080 00000000 		.word	hcan1
 1067 0084 0C000000 		.word	.LC5
 1068              		.cfi_endproc
 1069              	.LFE158:
 1071              		.section	.rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4,"aMS",%progbits,1
 1072              		.align	2
 1073              	.LC7:
 1074 0000 6D62323A 		.ascii	"mb2: %d %d\015\012\000"
 1074      20256420 
 1074      25640D0A 
 1074      00
 1075              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 1076              		.align	1
 1077              		.global	HAL_CAN_TxMailbox2CompleteCallback
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv5-d16
 1083              	HAL_CAN_TxMailbox2CompleteCallback:
 1084              	.LVL72:
 1085              	.LFB159:
 601:Src/main.c    **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 1086              		.loc 1 601 66 is_stmt 1 view -0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090              		.loc 1 601 66 is_stmt 0 view .LVU250
 1091 0000 38B5     		push	{r3, r4, r5, lr}
 1092              	.LCFI14:
ARM GAS  /tmp/ccwzORpx.s 			page 33


 1093              		.cfi_def_cfa_offset 16
 1094              		.cfi_offset 3, -16
 1095              		.cfi_offset 4, -12
 1096              		.cfi_offset 5, -8
 1097              		.cfi_offset 14, -4
 1098 0002 0446     		mov	r4, r0
 602:Src/main.c    **** 	sprintf(txt, "mb2: %d %d\r\n", can1.fifo.txTailNormal,
 1099              		.loc 1 602 2 is_stmt 1 view .LVU251
 1100              		.loc 1 602 42 is_stmt 0 view .LVU252
 1101 0004 194A     		ldr	r2, .L71
 1102              		.loc 1 602 2 view .LVU253
 1103 0006 1A4D     		ldr	r5, .L71+4
 1104 0008 92F87230 		ldrb	r3, [r2, #114]	@ zero_extendqisi2
 1105 000c 92F87320 		ldrb	r2, [r2, #115]	@ zero_extendqisi2
 1106 0010 1849     		ldr	r1, .L71+8
 1107 0012 2846     		mov	r0, r5
 1108              	.LVL73:
 1109              		.loc 1 602 2 view .LVU254
 1110 0014 FFF7FEFF 		bl	sprintf
 1111              	.LVL74:
 603:Src/main.c    **** 			can1.fifo.txHeadNormal);
 604:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 1112              		.loc 1 604 2 is_stmt 1 view .LVU255
 1113              		.loc 1 604 47 is_stmt 0 view .LVU256
 1114 0018 2846     		mov	r0, r5
 1115 001a FFF7FEFF 		bl	strlen
 1116              	.LVL75:
 1117              		.loc 1 604 2 view .LVU257
 1118 001e 0A23     		movs	r3, #10
 1119 0020 82B2     		uxth	r2, r0
 1120 0022 2946     		mov	r1, r5
 1121 0024 1448     		ldr	r0, .L71+12
 1122 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 1123              	.LVL76:
 605:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 1124              		.loc 1 605 2 is_stmt 1 view .LVU258
 1125 002a 0121     		movs	r1, #1
 1126 002c 1348     		ldr	r0, .L71+16
 1127 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1128              	.LVL77:
 606:Src/main.c    **** 	if (hcan == &hcan1) {
 1129              		.loc 1 606 2 view .LVU259
 1130              		.loc 1 606 5 is_stmt 0 view .LVU260
 1131 0032 134B     		ldr	r3, .L71+20
 1132 0034 9C42     		cmp	r4, r3
 1133 0036 00D0     		beq	.L70
 1134              	.L66:
 607:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 608:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 609:Src/main.c    **** 				// TODO: implementare errore
 610:Src/main.c    **** 			} else {
 611:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)("high\r\n"),
 612:Src/main.c    **** 								  strlen("high\r\n"), 10);
 613:Src/main.c    **** 			}
 614:Src/main.c    **** 		} else if (fifoTxDataCAN_normal_pop(&can1)) {
 615:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 616:Src/main.c    **** 			// strlen("Prendo dalla fifo\r\n"), 10);
ARM GAS  /tmp/ccwzORpx.s 			page 34


 617:Src/main.c    **** 			if (CAN_Send_IT(&can1) == 0) {
 618:Src/main.c    **** 				// TODO: implementare errore
 619:Src/main.c    **** 			}
 620:Src/main.c    **** 		} else {
 621:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"),
 622:Src/main.c    **** 			// strlen("Fifo vuota\r\n"), 10);
 623:Src/main.c    **** 		}
 624:Src/main.c    **** 	}
 625:Src/main.c    **** }
 1135              		.loc 1 625 1 view .LVU261
 1136 0038 38BD     		pop	{r3, r4, r5, pc}
 1137              	.LVL78:
 1138              	.L70:
 607:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 1139              		.loc 1 607 3 is_stmt 1 view .LVU262
 607:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 1140              		.loc 1 607 7 is_stmt 0 view .LVU263
 1141 003a 0C48     		ldr	r0, .L71
 1142 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 1143              	.LVL79:
 607:Src/main.c    **** 		if (fifoTxDataCAN_high_pop(&can1)) {
 1144              		.loc 1 607 6 view .LVU264
 1145 0040 58B1     		cbz	r0, .L68
 608:Src/main.c    **** 				// TODO: implementare errore
 1146              		.loc 1 608 4 is_stmt 1 view .LVU265
 608:Src/main.c    **** 				// TODO: implementare errore
 1147              		.loc 1 608 8 is_stmt 0 view .LVU266
 1148 0042 0A48     		ldr	r0, .L71
 1149 0044 FFF7FEFF 		bl	CAN_Send_IT
 1150              	.LVL80:
 608:Src/main.c    **** 				// TODO: implementare errore
 1151              		.loc 1 608 7 view .LVU267
 1152 0048 0028     		cmp	r0, #0
 1153 004a F5D0     		beq	.L66
 611:Src/main.c    **** 								  strlen("high\r\n"), 10);
 1154              		.loc 1 611 5 is_stmt 1 view .LVU268
 1155 004c 0A23     		movs	r3, #10
 1156 004e 0622     		movs	r2, #6
 1157 0050 0C49     		ldr	r1, .L71+24
 1158 0052 0948     		ldr	r0, .L71+12
 1159 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 1160              	.LVL81:
 1161 0058 EEE7     		b	.L66
 1162              	.L68:
 614:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 1163              		.loc 1 614 10 view .LVU269
 614:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 1164              		.loc 1 614 14 is_stmt 0 view .LVU270
 1165 005a 0448     		ldr	r0, .L71
 1166 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 1167              	.LVL82:
 614:Src/main.c    **** 			// HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"),
 1168              		.loc 1 614 13 view .LVU271
 1169 0060 0028     		cmp	r0, #0
 1170 0062 E9D0     		beq	.L66
 617:Src/main.c    **** 				// TODO: implementare errore
 1171              		.loc 1 617 4 is_stmt 1 view .LVU272
ARM GAS  /tmp/ccwzORpx.s 			page 35


 617:Src/main.c    **** 				// TODO: implementare errore
 1172              		.loc 1 617 8 is_stmt 0 view .LVU273
 1173 0064 0148     		ldr	r0, .L71
 1174 0066 FFF7FEFF 		bl	CAN_Send_IT
 1175              	.LVL83:
 619:Src/main.c    **** 		} else {
 1176              		.loc 1 619 4 is_stmt 1 view .LVU274
 623:Src/main.c    **** 	}
 1177              		.loc 1 623 3 view .LVU275
 1178              		.loc 1 625 1 is_stmt 0 view .LVU276
 1179 006a E5E7     		b	.L66
 1180              	.L72:
 1181              		.align	2
 1182              	.L71:
 1183 006c 00000000 		.word	can1
 1184 0070 00000000 		.word	txt
 1185 0074 00000000 		.word	.LC7
 1186 0078 00000000 		.word	huart3
 1187 007c 00040240 		.word	1073873920
 1188 0080 00000000 		.word	hcan1
 1189 0084 0C000000 		.word	.LC5
 1190              		.cfi_endproc
 1191              	.LFE159:
 1193              		.section	.rodata.HAL_CAN_ErrorCallback.str1.4,"aMS",%progbits,1
 1194              		.align	2
 1195              	.LC8:
 1196 0000 2D2D2D20 		.ascii	"--- Errore ---: %d\015\012\000"
 1196      4572726F 
 1196      7265202D 
 1196      2D2D3A20 
 1196      25640D0A 
 1197              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1198              		.align	1
 1199              		.global	HAL_CAN_ErrorCallback
 1200              		.syntax unified
 1201              		.thumb
 1202              		.thumb_func
 1203              		.fpu fpv5-d16
 1205              	HAL_CAN_ErrorCallback:
 1206              	.LVL84:
 1207              	.LFB160:
 626:Src/main.c    **** void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 1208              		.loc 1 626 53 is_stmt 1 view -0
 1209              		.cfi_startproc
 1210              		@ args = 0, pretend = 0, frame = 0
 1211              		@ frame_needed = 0, uses_anonymous_args = 0
 1212              		.loc 1 626 53 is_stmt 0 view .LVU278
 1213 0000 38B5     		push	{r3, r4, r5, lr}
 1214              	.LCFI15:
 1215              		.cfi_def_cfa_offset 16
 1216              		.cfi_offset 3, -16
 1217              		.cfi_offset 4, -12
 1218              		.cfi_offset 5, -8
 1219              		.cfi_offset 14, -4
 1220 0002 0446     		mov	r4, r0
 627:Src/main.c    **** 	sprintf(txt, "--- Errore ---: %d\r\n", (int)hcan->ErrorCode);
 1221              		.loc 1 627 2 is_stmt 1 view .LVU279
ARM GAS  /tmp/ccwzORpx.s 			page 36


 1222              		.loc 1 627 50 is_stmt 0 view .LVU280
 1223 0004 426A     		ldr	r2, [r0, #36]
 1224              		.loc 1 627 2 view .LVU281
 1225 0006 0B4D     		ldr	r5, .L77
 1226 0008 0B49     		ldr	r1, .L77+4
 1227 000a 2846     		mov	r0, r5
 1228              	.LVL85:
 1229              		.loc 1 627 2 view .LVU282
 1230 000c FFF7FEFF 		bl	sprintf
 1231              	.LVL86:
 628:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t *)(txt), strlen(txt), 10);
 1232              		.loc 1 628 2 is_stmt 1 view .LVU283
 1233              		.loc 1 628 47 is_stmt 0 view .LVU284
 1234 0010 2846     		mov	r0, r5
 1235 0012 FFF7FEFF 		bl	strlen
 1236              	.LVL87:
 1237              		.loc 1 628 2 view .LVU285
 1238 0016 0A23     		movs	r3, #10
 1239 0018 82B2     		uxth	r2, r0
 1240 001a 2946     		mov	r1, r5
 1241 001c 0748     		ldr	r0, .L77+8
 1242 001e FFF7FEFF 		bl	HAL_UART_Transmit
 1243              	.LVL88:
 629:Src/main.c    **** 	if (hcan == &hcan1) {
 1244              		.loc 1 629 2 is_stmt 1 view .LVU286
 1245              		.loc 1 629 5 is_stmt 0 view .LVU287
 1246 0022 074B     		ldr	r3, .L77+12
 1247 0024 9C42     		cmp	r4, r3
 1248 0026 00D0     		beq	.L76
 1249              	.L73:
 630:Src/main.c    **** 		CAN_Send_Bck(&can1);
 631:Src/main.c    **** 	}
 632:Src/main.c    **** }
 1250              		.loc 1 632 1 view .LVU288
 1251 0028 38BD     		pop	{r3, r4, r5, pc}
 1252              	.LVL89:
 1253              	.L76:
 630:Src/main.c    **** 		CAN_Send_Bck(&can1);
 1254              		.loc 1 630 3 is_stmt 1 view .LVU289
 1255 002a 0648     		ldr	r0, .L77+16
 1256 002c FFF7FEFF 		bl	CAN_Send_Bck
 1257              	.LVL90:
 1258              		.loc 1 632 1 is_stmt 0 view .LVU290
 1259 0030 FAE7     		b	.L73
 1260              	.L78:
 1261 0032 00BF     		.align	2
 1262              	.L77:
 1263 0034 00000000 		.word	txt
 1264 0038 00000000 		.word	.LC8
 1265 003c 00000000 		.word	huart3
 1266 0040 00000000 		.word	hcan1
 1267 0044 00000000 		.word	can1
 1268              		.cfi_endproc
 1269              	.LFE160:
 1271              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1272              		.align	1
 1273              		.global	HAL_UART_RxCpltCallback
ARM GAS  /tmp/ccwzORpx.s 			page 37


 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu fpv5-d16
 1279              	HAL_UART_RxCpltCallback:
 1280              	.LVL91:
 1281              	.LFB161:
 633:Src/main.c    **** 
 634:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 1282              		.loc 1 634 57 is_stmt 1 view -0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 0
 1285              		@ frame_needed = 0, uses_anonymous_args = 0
 1286              		.loc 1 634 57 is_stmt 0 view .LVU292
 1287 0000 08B5     		push	{r3, lr}
 1288              	.LCFI16:
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 3, -8
 1291              		.cfi_offset 14, -4
 635:Src/main.c    **** 	if (huart == &huart3) {
 1292              		.loc 1 635 2 is_stmt 1 view .LVU293
 1293              		.loc 1 635 5 is_stmt 0 view .LVU294
 1294 0002 174B     		ldr	r3, .L86
 1295 0004 8342     		cmp	r3, r0
 1296 0006 00D0     		beq	.L85
 1297              	.LVL92:
 1298              	.L79:
 636:Src/main.c    **** 		if ((debug_rx[debug_rx_count] == '\r') |
 637:Src/main.c    **** 			(debug_rx[debug_rx_count] == '\n')) {
 638:Src/main.c    **** 			debug_msg_arrived = 1;		   // set flag
 639:Src/main.c    **** 			debug_rx[debug_rx_count] = 0;  // set end of the string
 640:Src/main.c    **** 			debug_rx_count = 0;			   // reset counter
 641:Src/main.c    **** 		} else {
 642:Src/main.c    **** 			if (debug_rx_count == MAX_DEBUG_RX_L) {
 643:Src/main.c    **** 				// overflow
 644:Src/main.c    **** 				debug_rx_count = 0;  // reset counter for overflow
 645:Src/main.c    **** 			} else {
 646:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t *)&debug_rx[debug_rx_count],
 647:Src/main.c    **** 								  1, 10);  // retransmit char
 648:Src/main.c    **** 				debug_rx_count++;
 649:Src/main.c    **** 			}
 650:Src/main.c    **** 		}
 651:Src/main.c    **** 		HAL_UART_Receive_IT(&huart3, (uint8_t *)&debug_rx[debug_rx_count],
 652:Src/main.c    **** 							1);  // activate rx interrupt for debug
 653:Src/main.c    **** 	}
 654:Src/main.c    **** }
 1299              		.loc 1 654 1 view .LVU295
 1300 0008 08BD     		pop	{r3, pc}
 1301              	.LVL93:
 1302              	.L85:
 636:Src/main.c    **** 		if ((debug_rx[debug_rx_count] == '\r') |
 1303              		.loc 1 636 3 is_stmt 1 view .LVU296
 636:Src/main.c    **** 		if ((debug_rx[debug_rx_count] == '\r') |
 1304              		.loc 1 636 16 is_stmt 0 view .LVU297
 1305 000a 164B     		ldr	r3, .L86+4
 1306 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1307 000e 164B     		ldr	r3, .L86+8
ARM GAS  /tmp/ccwzORpx.s 			page 38


 1308 0010 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 636:Src/main.c    **** 		if ((debug_rx[debug_rx_count] == '\r') |
 1309              		.loc 1 636 6 view .LVU298
 1310 0012 0A2B     		cmp	r3, #10
 1311 0014 18BF     		it	ne
 1312 0016 0D2B     		cmpne	r3, #13
 1313 0018 10D1     		bne	.L81
 638:Src/main.c    **** 			debug_rx[debug_rx_count] = 0;  // set end of the string
 1314              		.loc 1 638 4 is_stmt 1 view .LVU299
 638:Src/main.c    **** 			debug_rx[debug_rx_count] = 0;  // set end of the string
 1315              		.loc 1 638 22 is_stmt 0 view .LVU300
 1316 001a 144B     		ldr	r3, .L86+12
 1317 001c 0122     		movs	r2, #1
 1318 001e 1A70     		strb	r2, [r3]
 639:Src/main.c    **** 			debug_rx_count = 0;			   // reset counter
 1319              		.loc 1 639 4 is_stmt 1 view .LVU301
 639:Src/main.c    **** 			debug_rx_count = 0;			   // reset counter
 1320              		.loc 1 639 29 is_stmt 0 view .LVU302
 1321 0020 0023     		movs	r3, #0
 1322 0022 114A     		ldr	r2, .L86+8
 1323 0024 5354     		strb	r3, [r2, r1]
 640:Src/main.c    **** 		} else {
 1324              		.loc 1 640 4 is_stmt 1 view .LVU303
 640:Src/main.c    **** 		} else {
 1325              		.loc 1 640 19 is_stmt 0 view .LVU304
 1326 0026 0F4A     		ldr	r2, .L86+4
 1327 0028 1370     		strb	r3, [r2]
 1328              	.LVL94:
 1329              	.L82:
 651:Src/main.c    **** 							1);  // activate rx interrupt for debug
 1330              		.loc 1 651 3 is_stmt 1 view .LVU305
 651:Src/main.c    **** 							1);  // activate rx interrupt for debug
 1331              		.loc 1 651 52 is_stmt 0 view .LVU306
 1332 002a 0E4B     		ldr	r3, .L86+4
 1333 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 651:Src/main.c    **** 							1);  // activate rx interrupt for debug
 1334              		.loc 1 651 3 view .LVU307
 1335 002e 0122     		movs	r2, #1
 1336 0030 0D49     		ldr	r1, .L86+8
 1337 0032 1944     		add	r1, r1, r3
 1338 0034 0A48     		ldr	r0, .L86
 1339 0036 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1340              	.LVL95:
 1341              		.loc 1 654 1 view .LVU308
 1342 003a E5E7     		b	.L79
 1343              	.LVL96:
 1344              	.L81:
 642:Src/main.c    **** 				// overflow
 1345              		.loc 1 642 4 is_stmt 1 view .LVU309
 642:Src/main.c    **** 				// overflow
 1346              		.loc 1 642 7 is_stmt 0 view .LVU310
 1347 003c 1429     		cmp	r1, #20
 1348 003e 03D1     		bne	.L83
 644:Src/main.c    **** 			} else {
 1349              		.loc 1 644 5 is_stmt 1 view .LVU311
 644:Src/main.c    **** 			} else {
 1350              		.loc 1 644 20 is_stmt 0 view .LVU312
ARM GAS  /tmp/ccwzORpx.s 			page 39


 1351 0040 084B     		ldr	r3, .L86+4
 1352 0042 0022     		movs	r2, #0
 1353 0044 1A70     		strb	r2, [r3]
 1354 0046 F0E7     		b	.L82
 1355              	.L83:
 646:Src/main.c    **** 								  1, 10);  // retransmit char
 1356              		.loc 1 646 5 is_stmt 1 view .LVU313
 1357 0048 0A23     		movs	r3, #10
 1358 004a 0122     		movs	r2, #1
 1359 004c 0648     		ldr	r0, .L86+8
 1360              	.LVL97:
 646:Src/main.c    **** 								  1, 10);  // retransmit char
 1361              		.loc 1 646 5 is_stmt 0 view .LVU314
 1362 004e 0144     		add	r1, r1, r0
 1363 0050 0348     		ldr	r0, .L86
 1364 0052 FFF7FEFF 		bl	HAL_UART_Transmit
 1365              	.LVL98:
 648:Src/main.c    **** 			}
 1366              		.loc 1 648 5 is_stmt 1 view .LVU315
 648:Src/main.c    **** 			}
 1367              		.loc 1 648 19 is_stmt 0 view .LVU316
 1368 0056 034A     		ldr	r2, .L86+4
 1369 0058 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1370 005a 0133     		adds	r3, r3, #1
 1371 005c 1370     		strb	r3, [r2]
 1372 005e E4E7     		b	.L82
 1373              	.L87:
 1374              		.align	2
 1375              	.L86:
 1376 0060 00000000 		.word	huart3
 1377 0064 00000000 		.word	debug_rx_count
 1378 0068 00000000 		.word	debug_rx
 1379 006c 00000000 		.word	debug_msg_arrived
 1380              		.cfi_endproc
 1381              	.LFE161:
 1383              		.section	.text.Error_Handler,"ax",%progbits
 1384              		.align	1
 1385              		.global	Error_Handler
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv5-d16
 1391              	Error_Handler:
 1392              	.LFB162:
 655:Src/main.c    **** /* USER CODE END 4 */
 656:Src/main.c    **** 
 657:Src/main.c    **** /**
 658:Src/main.c    ****  * @brief  This function is executed in case of error occurrence.
 659:Src/main.c    ****  * @retval None
 660:Src/main.c    ****  */
 661:Src/main.c    **** void Error_Handler(void) {
 1393              		.loc 1 661 26 is_stmt 1 view -0
 1394              		.cfi_startproc
 1395              		@ args = 0, pretend = 0, frame = 0
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 1397 0000 10B5     		push	{r4, lr}
 1398              	.LCFI17:
ARM GAS  /tmp/ccwzORpx.s 			page 40


 1399              		.cfi_def_cfa_offset 8
 1400              		.cfi_offset 4, -8
 1401              		.cfi_offset 14, -4
 662:Src/main.c    **** 	/* USER CODE BEGIN Error_Handler_Debug */
 663:Src/main.c    **** 	/* User can add his own implementation to report the HAL error return state
 664:Src/main.c    **** 	 */
 665:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 1402              		.loc 1 665 2 view .LVU318
 1403 0002 094C     		ldr	r4, .L90
 1404 0004 8021     		movs	r1, #128
 1405 0006 2046     		mov	r0, r4
 1406 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1407              	.LVL99:
 666:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 1408              		.loc 1 666 2 view .LVU319
 1409 000c 0121     		movs	r1, #1
 1410 000e 2046     		mov	r0, r4
 1411 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1412              	.LVL100:
 667:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 1413              		.loc 1 667 2 view .LVU320
 1414 0014 4FF48041 		mov	r1, #16384
 1415 0018 2046     		mov	r0, r4
 1416 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1417              	.LVL101:
 668:Src/main.c    **** 
 669:Src/main.c    **** 	HAL_Delay(100);
 1418              		.loc 1 669 2 view .LVU321
 1419 001e 6420     		movs	r0, #100
 1420 0020 FFF7FEFF 		bl	HAL_Delay
 1421              	.LVL102:
 670:Src/main.c    **** 	/* USER CODE END Error_Handler_Debug */
 671:Src/main.c    **** }
 1422              		.loc 1 671 1 is_stmt 0 view .LVU322
 1423 0024 10BD     		pop	{r4, pc}
 1424              	.L91:
 1425 0026 00BF     		.align	2
 1426              	.L90:
 1427 0028 00040240 		.word	1073873920
 1428              		.cfi_endproc
 1429              	.LFE162:
 1431              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1432              		.align	1
 1433              		.syntax unified
 1434              		.thumb
 1435              		.thumb_func
 1436              		.fpu fpv5-d16
 1438              	MX_USART3_UART_Init:
 1439              	.LFB150:
 368:Src/main.c    **** 	/* USER CODE BEGIN USART3_Init 0 */
 1440              		.loc 1 368 39 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 1444 0000 08B5     		push	{r3, lr}
 1445              	.LCFI18:
 1446              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccwzORpx.s 			page 41


 1447              		.cfi_offset 3, -8
 1448              		.cfi_offset 14, -4
 376:Src/main.c    **** 	huart3.Init.BaudRate = 2000000;
 1449              		.loc 1 376 2 view .LVU324
 376:Src/main.c    **** 	huart3.Init.BaudRate = 2000000;
 1450              		.loc 1 376 18 is_stmt 0 view .LVU325
 1451 0002 0B48     		ldr	r0, .L96
 1452 0004 0B4B     		ldr	r3, .L96+4
 1453 0006 0360     		str	r3, [r0]
 377:Src/main.c    **** 	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1454              		.loc 1 377 2 is_stmt 1 view .LVU326
 377:Src/main.c    **** 	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1455              		.loc 1 377 23 is_stmt 0 view .LVU327
 1456 0008 0B4B     		ldr	r3, .L96+8
 1457 000a 4360     		str	r3, [r0, #4]
 378:Src/main.c    **** 	huart3.Init.StopBits = UART_STOPBITS_1;
 1458              		.loc 1 378 2 is_stmt 1 view .LVU328
 378:Src/main.c    **** 	huart3.Init.StopBits = UART_STOPBITS_1;
 1459              		.loc 1 378 25 is_stmt 0 view .LVU329
 1460 000c 0023     		movs	r3, #0
 1461 000e 8360     		str	r3, [r0, #8]
 379:Src/main.c    **** 	huart3.Init.Parity = UART_PARITY_NONE;
 1462              		.loc 1 379 2 is_stmt 1 view .LVU330
 379:Src/main.c    **** 	huart3.Init.Parity = UART_PARITY_NONE;
 1463              		.loc 1 379 23 is_stmt 0 view .LVU331
 1464 0010 C360     		str	r3, [r0, #12]
 380:Src/main.c    **** 	huart3.Init.Mode = UART_MODE_TX_RX;
 1465              		.loc 1 380 2 is_stmt 1 view .LVU332
 380:Src/main.c    **** 	huart3.Init.Mode = UART_MODE_TX_RX;
 1466              		.loc 1 380 21 is_stmt 0 view .LVU333
 1467 0012 0361     		str	r3, [r0, #16]
 381:Src/main.c    **** 	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1468              		.loc 1 381 2 is_stmt 1 view .LVU334
 381:Src/main.c    **** 	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1469              		.loc 1 381 19 is_stmt 0 view .LVU335
 1470 0014 0C22     		movs	r2, #12
 1471 0016 4261     		str	r2, [r0, #20]
 382:Src/main.c    **** 	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1472              		.loc 1 382 2 is_stmt 1 view .LVU336
 382:Src/main.c    **** 	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1473              		.loc 1 382 24 is_stmt 0 view .LVU337
 1474 0018 8361     		str	r3, [r0, #24]
 383:Src/main.c    **** 	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1475              		.loc 1 383 2 is_stmt 1 view .LVU338
 383:Src/main.c    **** 	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1476              		.loc 1 383 27 is_stmt 0 view .LVU339
 1477 001a C361     		str	r3, [r0, #28]
 384:Src/main.c    **** 	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1478              		.loc 1 384 2 is_stmt 1 view .LVU340
 384:Src/main.c    **** 	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1479              		.loc 1 384 29 is_stmt 0 view .LVU341
 1480 001c 0362     		str	r3, [r0, #32]
 385:Src/main.c    **** 	if (HAL_UART_Init(&huart3) != HAL_OK) {
 1481              		.loc 1 385 2 is_stmt 1 view .LVU342
 385:Src/main.c    **** 	if (HAL_UART_Init(&huart3) != HAL_OK) {
 1482              		.loc 1 385 37 is_stmt 0 view .LVU343
 1483 001e 4362     		str	r3, [r0, #36]
ARM GAS  /tmp/ccwzORpx.s 			page 42


 386:Src/main.c    **** 		Error_Handler();
 1484              		.loc 1 386 2 is_stmt 1 view .LVU344
 386:Src/main.c    **** 		Error_Handler();
 1485              		.loc 1 386 6 is_stmt 0 view .LVU345
 1486 0020 FFF7FEFF 		bl	HAL_UART_Init
 1487              	.LVL103:
 386:Src/main.c    **** 		Error_Handler();
 1488              		.loc 1 386 5 view .LVU346
 1489 0024 00B9     		cbnz	r0, .L95
 1490              	.L92:
 392:Src/main.c    **** 
 1491              		.loc 1 392 1 view .LVU347
 1492 0026 08BD     		pop	{r3, pc}
 1493              	.L95:
 387:Src/main.c    **** 	}
 1494              		.loc 1 387 3 is_stmt 1 view .LVU348
 1495 0028 FFF7FEFF 		bl	Error_Handler
 1496              	.LVL104:
 392:Src/main.c    **** 
 1497              		.loc 1 392 1 is_stmt 0 view .LVU349
 1498 002c FBE7     		b	.L92
 1499              	.L97:
 1500 002e 00BF     		.align	2
 1501              	.L96:
 1502 0030 00000000 		.word	huart3
 1503 0034 00480040 		.word	1073760256
 1504 0038 80841E00 		.word	2000000
 1505              		.cfi_endproc
 1506              	.LFE150:
 1508              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1509              		.align	1
 1510              		.syntax unified
 1511              		.thumb
 1512              		.thumb_func
 1513              		.fpu fpv5-d16
 1515              	MX_CAN1_Init:
 1516              	.LFB147:
 270:Src/main.c    **** 	/* USER CODE BEGIN CAN1_Init 0 */
 1517              		.loc 1 270 32 is_stmt 1 view -0
 1518              		.cfi_startproc
 1519              		@ args = 0, pretend = 0, frame = 0
 1520              		@ frame_needed = 0, uses_anonymous_args = 0
 1521 0000 08B5     		push	{r3, lr}
 1522              	.LCFI19:
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 3, -8
 1525              		.cfi_offset 14, -4
 278:Src/main.c    **** 	hcan1.Init.Prescaler = 3;
 1526              		.loc 1 278 2 view .LVU351
 278:Src/main.c    **** 	hcan1.Init.Prescaler = 3;
 1527              		.loc 1 278 17 is_stmt 0 view .LVU352
 1528 0002 0E48     		ldr	r0, .L102
 1529 0004 0E4B     		ldr	r3, .L102+4
 1530 0006 0360     		str	r3, [r0]
 279:Src/main.c    **** 	hcan1.Init.Mode = CAN_MODE_NORMAL;
 1531              		.loc 1 279 2 is_stmt 1 view .LVU353
 279:Src/main.c    **** 	hcan1.Init.Mode = CAN_MODE_NORMAL;
ARM GAS  /tmp/ccwzORpx.s 			page 43


 1532              		.loc 1 279 23 is_stmt 0 view .LVU354
 1533 0008 0323     		movs	r3, #3
 1534 000a 4360     		str	r3, [r0, #4]
 280:Src/main.c    **** 	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1535              		.loc 1 280 2 is_stmt 1 view .LVU355
 280:Src/main.c    **** 	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1536              		.loc 1 280 18 is_stmt 0 view .LVU356
 1537 000c 0023     		movs	r3, #0
 1538 000e 8360     		str	r3, [r0, #8]
 281:Src/main.c    **** 	hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 1539              		.loc 1 281 2 is_stmt 1 view .LVU357
 281:Src/main.c    **** 	hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 1540              		.loc 1 281 27 is_stmt 0 view .LVU358
 1541 0010 C360     		str	r3, [r0, #12]
 282:Src/main.c    **** 	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 1542              		.loc 1 282 2 is_stmt 1 view .LVU359
 282:Src/main.c    **** 	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 1543              		.loc 1 282 22 is_stmt 0 view .LVU360
 1544 0012 4FF46022 		mov	r2, #917504
 1545 0016 0261     		str	r2, [r0, #16]
 283:Src/main.c    **** 	hcan1.Init.TimeTriggeredMode = DISABLE;
 1546              		.loc 1 283 2 is_stmt 1 view .LVU361
 283:Src/main.c    **** 	hcan1.Init.TimeTriggeredMode = DISABLE;
 1547              		.loc 1 283 22 is_stmt 0 view .LVU362
 1548 0018 4FF48012 		mov	r2, #1048576
 1549 001c 4261     		str	r2, [r0, #20]
 284:Src/main.c    **** 	hcan1.Init.AutoBusOff = DISABLE;
 1550              		.loc 1 284 2 is_stmt 1 view .LVU363
 284:Src/main.c    **** 	hcan1.Init.AutoBusOff = DISABLE;
 1551              		.loc 1 284 31 is_stmt 0 view .LVU364
 1552 001e 0376     		strb	r3, [r0, #24]
 285:Src/main.c    **** 	hcan1.Init.AutoWakeUp = ENABLE;
 1553              		.loc 1 285 2 is_stmt 1 view .LVU365
 285:Src/main.c    **** 	hcan1.Init.AutoWakeUp = ENABLE;
 1554              		.loc 1 285 24 is_stmt 0 view .LVU366
 1555 0020 4376     		strb	r3, [r0, #25]
 286:Src/main.c    **** 	hcan1.Init.AutoRetransmission = ENABLE;
 1556              		.loc 1 286 2 is_stmt 1 view .LVU367
 286:Src/main.c    **** 	hcan1.Init.AutoRetransmission = ENABLE;
 1557              		.loc 1 286 24 is_stmt 0 view .LVU368
 1558 0022 0122     		movs	r2, #1
 1559 0024 8276     		strb	r2, [r0, #26]
 287:Src/main.c    **** 	hcan1.Init.ReceiveFifoLocked = DISABLE;
 1560              		.loc 1 287 2 is_stmt 1 view .LVU369
 287:Src/main.c    **** 	hcan1.Init.ReceiveFifoLocked = DISABLE;
 1561              		.loc 1 287 32 is_stmt 0 view .LVU370
 1562 0026 C276     		strb	r2, [r0, #27]
 288:Src/main.c    **** 	hcan1.Init.TransmitFifoPriority = DISABLE;
 1563              		.loc 1 288 2 is_stmt 1 view .LVU371
 288:Src/main.c    **** 	hcan1.Init.TransmitFifoPriority = DISABLE;
 1564              		.loc 1 288 31 is_stmt 0 view .LVU372
 1565 0028 0377     		strb	r3, [r0, #28]
 289:Src/main.c    **** 	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 1566              		.loc 1 289 2 is_stmt 1 view .LVU373
 289:Src/main.c    **** 	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 1567              		.loc 1 289 34 is_stmt 0 view .LVU374
 1568 002a 4377     		strb	r3, [r0, #29]
ARM GAS  /tmp/ccwzORpx.s 			page 44


 290:Src/main.c    **** 		Error_Handler();
 1569              		.loc 1 290 2 is_stmt 1 view .LVU375
 290:Src/main.c    **** 		Error_Handler();
 1570              		.loc 1 290 6 is_stmt 0 view .LVU376
 1571 002c FFF7FEFF 		bl	HAL_CAN_Init
 1572              	.LVL105:
 290:Src/main.c    **** 		Error_Handler();
 1573              		.loc 1 290 5 view .LVU377
 1574 0030 00B9     		cbnz	r0, .L101
 1575              	.L98:
 296:Src/main.c    **** 
 1576              		.loc 1 296 1 view .LVU378
 1577 0032 08BD     		pop	{r3, pc}
 1578              	.L101:
 291:Src/main.c    **** 	}
 1579              		.loc 1 291 3 is_stmt 1 view .LVU379
 1580 0034 FFF7FEFF 		bl	Error_Handler
 1581              	.LVL106:
 296:Src/main.c    **** 
 1582              		.loc 1 296 1 is_stmt 0 view .LVU380
 1583 0038 FBE7     		b	.L98
 1584              	.L103:
 1585 003a 00BF     		.align	2
 1586              	.L102:
 1587 003c 00000000 		.word	hcan1
 1588 0040 00640040 		.word	1073767424
 1589              		.cfi_endproc
 1590              	.LFE147:
 1592              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1593              		.align	1
 1594              		.syntax unified
 1595              		.thumb
 1596              		.thumb_func
 1597              		.fpu fpv5-d16
 1599              	MX_TIM2_Init:
 1600              	.LFB149:
 328:Src/main.c    **** 	/* USER CODE BEGIN TIM2_Init 0 */
 1601              		.loc 1 328 32 is_stmt 1 view -0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 32
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 1605 0000 00B5     		push	{lr}
 1606              	.LCFI20:
 1607              		.cfi_def_cfa_offset 4
 1608              		.cfi_offset 14, -4
 1609 0002 89B0     		sub	sp, sp, #36
 1610              	.LCFI21:
 1611              		.cfi_def_cfa_offset 40
 333:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1612              		.loc 1 333 2 view .LVU382
 333:Src/main.c    **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 1613              		.loc 1 333 25 is_stmt 0 view .LVU383
 1614 0004 0023     		movs	r3, #0
 1615 0006 0493     		str	r3, [sp, #16]
 1616 0008 0593     		str	r3, [sp, #20]
 1617 000a 0693     		str	r3, [sp, #24]
 1618 000c 0793     		str	r3, [sp, #28]
ARM GAS  /tmp/ccwzORpx.s 			page 45


 334:Src/main.c    **** 
 1619              		.loc 1 334 2 is_stmt 1 view .LVU384
 334:Src/main.c    **** 
 1620              		.loc 1 334 26 is_stmt 0 view .LVU385
 1621 000e 0193     		str	r3, [sp, #4]
 1622 0010 0293     		str	r3, [sp, #8]
 1623 0012 0393     		str	r3, [sp, #12]
 339:Src/main.c    **** 	htim2.Init.Prescaler = 108;
 1624              		.loc 1 339 2 is_stmt 1 view .LVU386
 339:Src/main.c    **** 	htim2.Init.Prescaler = 108;
 1625              		.loc 1 339 17 is_stmt 0 view .LVU387
 1626 0014 1548     		ldr	r0, .L112
 1627 0016 4FF08042 		mov	r2, #1073741824
 1628 001a 0260     		str	r2, [r0]
 340:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1629              		.loc 1 340 2 is_stmt 1 view .LVU388
 340:Src/main.c    **** 	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1630              		.loc 1 340 23 is_stmt 0 view .LVU389
 1631 001c 6C22     		movs	r2, #108
 1632 001e 4260     		str	r2, [r0, #4]
 341:Src/main.c    **** 	htim2.Init.Period = 1000;
 1633              		.loc 1 341 2 is_stmt 1 view .LVU390
 341:Src/main.c    **** 	htim2.Init.Period = 1000;
 1634              		.loc 1 341 25 is_stmt 0 view .LVU391
 1635 0020 8360     		str	r3, [r0, #8]
 342:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1636              		.loc 1 342 2 is_stmt 1 view .LVU392
 342:Src/main.c    **** 	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1637              		.loc 1 342 20 is_stmt 0 view .LVU393
 1638 0022 4FF47A72 		mov	r2, #1000
 1639 0026 C260     		str	r2, [r0, #12]
 343:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1640              		.loc 1 343 2 is_stmt 1 view .LVU394
 343:Src/main.c    **** 	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1641              		.loc 1 343 27 is_stmt 0 view .LVU395
 1642 0028 0361     		str	r3, [r0, #16]
 344:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 1643              		.loc 1 344 2 is_stmt 1 view .LVU396
 344:Src/main.c    **** 	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 1644              		.loc 1 344 31 is_stmt 0 view .LVU397
 1645 002a 8361     		str	r3, [r0, #24]
 345:Src/main.c    **** 		Error_Handler();
 1646              		.loc 1 345 2 is_stmt 1 view .LVU398
 345:Src/main.c    **** 		Error_Handler();
 1647              		.loc 1 345 6 is_stmt 0 view .LVU399
 1648 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1649              	.LVL107:
 345:Src/main.c    **** 		Error_Handler();
 1650              		.loc 1 345 5 view .LVU400
 1651 0030 90B9     		cbnz	r0, .L109
 1652              	.L105:
 348:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 1653              		.loc 1 348 2 is_stmt 1 view .LVU401
 348:Src/main.c    **** 	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 1654              		.loc 1 348 33 is_stmt 0 view .LVU402
 1655 0032 4FF48053 		mov	r3, #4096
 1656 0036 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/ccwzORpx.s 			page 46


 349:Src/main.c    **** 		Error_Handler();
 1657              		.loc 1 349 2 is_stmt 1 view .LVU403
 349:Src/main.c    **** 		Error_Handler();
 1658              		.loc 1 349 6 is_stmt 0 view .LVU404
 1659 0038 04A9     		add	r1, sp, #16
 1660 003a 0C48     		ldr	r0, .L112
 1661 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1662              	.LVL108:
 349:Src/main.c    **** 		Error_Handler();
 1663              		.loc 1 349 5 view .LVU405
 1664 0040 68B9     		cbnz	r0, .L110
 1665              	.L106:
 352:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1666              		.loc 1 352 2 is_stmt 1 view .LVU406
 352:Src/main.c    **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1667              		.loc 1 352 36 is_stmt 0 view .LVU407
 1668 0042 0023     		movs	r3, #0
 1669 0044 0193     		str	r3, [sp, #4]
 353:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) !=
 1670              		.loc 1 353 2 is_stmt 1 view .LVU408
 353:Src/main.c    **** 	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) !=
 1671              		.loc 1 353 32 is_stmt 0 view .LVU409
 1672 0046 0393     		str	r3, [sp, #12]
 354:Src/main.c    **** 		HAL_OK) {
 1673              		.loc 1 354 2 is_stmt 1 view .LVU410
 354:Src/main.c    **** 		HAL_OK) {
 1674              		.loc 1 354 6 is_stmt 0 view .LVU411
 1675 0048 01A9     		add	r1, sp, #4
 1676 004a 0848     		ldr	r0, .L112
 1677 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1678              	.LVL109:
 354:Src/main.c    **** 		HAL_OK) {
 1679              		.loc 1 354 5 view .LVU412
 1680 0050 40B9     		cbnz	r0, .L111
 1681              	.L104:
 361:Src/main.c    **** 
 1682              		.loc 1 361 1 view .LVU413
 1683 0052 09B0     		add	sp, sp, #36
 1684              	.LCFI22:
 1685              		.cfi_remember_state
 1686              		.cfi_def_cfa_offset 4
 1687              		@ sp needed
 1688 0054 5DF804FB 		ldr	pc, [sp], #4
 1689              	.L109:
 1690              	.LCFI23:
 1691              		.cfi_restore_state
 346:Src/main.c    **** 	}
 1692              		.loc 1 346 3 is_stmt 1 view .LVU414
 1693 0058 FFF7FEFF 		bl	Error_Handler
 1694              	.LVL110:
 1695 005c E9E7     		b	.L105
 1696              	.L110:
 350:Src/main.c    **** 	}
 1697              		.loc 1 350 3 view .LVU415
 1698 005e FFF7FEFF 		bl	Error_Handler
 1699              	.LVL111:
 1700 0062 EEE7     		b	.L106
ARM GAS  /tmp/ccwzORpx.s 			page 47


 1701              	.L111:
 356:Src/main.c    **** 	}
 1702              		.loc 1 356 3 view .LVU416
 1703 0064 FFF7FEFF 		bl	Error_Handler
 1704              	.LVL112:
 361:Src/main.c    **** 
 1705              		.loc 1 361 1 is_stmt 0 view .LVU417
 1706 0068 F3E7     		b	.L104
 1707              	.L113:
 1708 006a 00BF     		.align	2
 1709              	.L112:
 1710 006c 00000000 		.word	htim2
 1711              		.cfi_endproc
 1712              	.LFE149:
 1714              		.section	.text.SystemClock_Config,"ax",%progbits
 1715              		.align	1
 1716              		.global	SystemClock_Config
 1717              		.syntax unified
 1718              		.thumb
 1719              		.thumb_func
 1720              		.fpu fpv5-d16
 1722              	SystemClock_Config:
 1723              	.LFB145:
 187:Src/main.c    **** 	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1724              		.loc 1 187 31 is_stmt 1 view -0
 1725              		.cfi_startproc
 1726              		@ args = 0, pretend = 0, frame = 224
 1727              		@ frame_needed = 0, uses_anonymous_args = 0
 1728 0000 10B5     		push	{r4, lr}
 1729              	.LCFI24:
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 4, -8
 1732              		.cfi_offset 14, -4
 1733 0002 B8B0     		sub	sp, sp, #224
 1734              	.LCFI25:
 1735              		.cfi_def_cfa_offset 232
 188:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1736              		.loc 1 188 2 view .LVU419
 188:Src/main.c    **** 	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1737              		.loc 1 188 21 is_stmt 0 view .LVU420
 1738 0004 3422     		movs	r2, #52
 1739 0006 0021     		movs	r1, #0
 1740 0008 2BA8     		add	r0, sp, #172
 1741 000a FFF7FEFF 		bl	memset
 1742              	.LVL113:
 189:Src/main.c    **** 	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1743              		.loc 1 189 2 is_stmt 1 view .LVU421
 189:Src/main.c    **** 	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1744              		.loc 1 189 21 is_stmt 0 view .LVU422
 1745 000e 0024     		movs	r4, #0
 1746 0010 2694     		str	r4, [sp, #152]
 1747 0012 2794     		str	r4, [sp, #156]
 1748 0014 2894     		str	r4, [sp, #160]
 1749 0016 2994     		str	r4, [sp, #164]
 1750 0018 2A94     		str	r4, [sp, #168]
 190:Src/main.c    **** 
 1751              		.loc 1 190 2 is_stmt 1 view .LVU423
ARM GAS  /tmp/ccwzORpx.s 			page 48


 190:Src/main.c    **** 
 1752              		.loc 1 190 27 is_stmt 0 view .LVU424
 1753 001a 9022     		movs	r2, #144
 1754 001c 2146     		mov	r1, r4
 1755 001e 02A8     		add	r0, sp, #8
 1756 0020 FFF7FEFF 		bl	memset
 1757              	.LVL114:
 194:Src/main.c    **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1758              		.loc 1 194 2 is_stmt 1 view .LVU425
 1759              	.LBB7:
 194:Src/main.c    **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1760              		.loc 1 194 2 view .LVU426
 194:Src/main.c    **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1761              		.loc 1 194 2 view .LVU427
 1762 0024 294B     		ldr	r3, .L124
 1763 0026 1A6C     		ldr	r2, [r3, #64]
 1764 0028 42F08052 		orr	r2, r2, #268435456
 1765 002c 1A64     		str	r2, [r3, #64]
 194:Src/main.c    **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1766              		.loc 1 194 2 view .LVU428
 1767 002e 1B6C     		ldr	r3, [r3, #64]
 1768 0030 03F08053 		and	r3, r3, #268435456
 1769 0034 0093     		str	r3, [sp]
 194:Src/main.c    **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1770              		.loc 1 194 2 view .LVU429
 1771 0036 009B     		ldr	r3, [sp]
 1772              	.LBE7:
 194:Src/main.c    **** 	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1773              		.loc 1 194 2 view .LVU430
 195:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 1774              		.loc 1 195 2 view .LVU431
 1775              	.LBB8:
 195:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 1776              		.loc 1 195 2 view .LVU432
 195:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 1777              		.loc 1 195 2 view .LVU433
 1778 0038 254B     		ldr	r3, .L124+4
 1779 003a 1A68     		ldr	r2, [r3]
 1780 003c 42F44042 		orr	r2, r2, #49152
 1781 0040 1A60     		str	r2, [r3]
 195:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 1782              		.loc 1 195 2 view .LVU434
 1783 0042 1B68     		ldr	r3, [r3]
 1784 0044 03F44043 		and	r3, r3, #49152
 1785 0048 0193     		str	r3, [sp, #4]
 195:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 1786              		.loc 1 195 2 view .LVU435
 1787 004a 019B     		ldr	r3, [sp, #4]
 1788              	.LBE8:
 195:Src/main.c    **** 	/** Initializes the CPU, AHB and APB busses clocks
 1789              		.loc 1 195 2 view .LVU436
 198:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1790              		.loc 1 198 2 view .LVU437
 198:Src/main.c    **** 	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1791              		.loc 1 198 35 is_stmt 0 view .LVU438
 1792 004c 0223     		movs	r3, #2
 1793 004e 2B93     		str	r3, [sp, #172]
ARM GAS  /tmp/ccwzORpx.s 			page 49


 199:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1794              		.loc 1 199 2 is_stmt 1 view .LVU439
 199:Src/main.c    **** 	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1795              		.loc 1 199 29 is_stmt 0 view .LVU440
 1796 0050 0122     		movs	r2, #1
 1797 0052 2E92     		str	r2, [sp, #184]
 200:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1798              		.loc 1 200 2 is_stmt 1 view .LVU441
 200:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1799              		.loc 1 200 40 is_stmt 0 view .LVU442
 1800 0054 1022     		movs	r2, #16
 1801 0056 2F92     		str	r2, [sp, #188]
 201:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1802              		.loc 1 201 2 is_stmt 1 view .LVU443
 201:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1803              		.loc 1 201 33 is_stmt 0 view .LVU444
 1804 0058 3193     		str	r3, [sp, #196]
 202:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLM = 8;
 1805              		.loc 1 202 2 is_stmt 1 view .LVU445
 202:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLM = 8;
 1806              		.loc 1 202 34 is_stmt 0 view .LVU446
 1807 005a 3294     		str	r4, [sp, #200]
 203:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLN = 216;
 1808              		.loc 1 203 2 is_stmt 1 view .LVU447
 203:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLN = 216;
 1809              		.loc 1 203 29 is_stmt 0 view .LVU448
 1810 005c 0822     		movs	r2, #8
 1811 005e 3392     		str	r2, [sp, #204]
 204:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1812              		.loc 1 204 2 is_stmt 1 view .LVU449
 204:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1813              		.loc 1 204 29 is_stmt 0 view .LVU450
 1814 0060 D822     		movs	r2, #216
 1815 0062 3492     		str	r2, [sp, #208]
 205:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLQ = 9;
 1816              		.loc 1 205 2 is_stmt 1 view .LVU451
 205:Src/main.c    **** 	RCC_OscInitStruct.PLL.PLLQ = 9;
 1817              		.loc 1 205 29 is_stmt 0 view .LVU452
 1818 0064 3593     		str	r3, [sp, #212]
 206:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1819              		.loc 1 206 2 is_stmt 1 view .LVU453
 206:Src/main.c    **** 	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 1820              		.loc 1 206 29 is_stmt 0 view .LVU454
 1821 0066 0923     		movs	r3, #9
 1822 0068 3693     		str	r3, [sp, #216]
 207:Src/main.c    **** 		Error_Handler();
 1823              		.loc 1 207 2 is_stmt 1 view .LVU455
 207:Src/main.c    **** 		Error_Handler();
 1824              		.loc 1 207 6 is_stmt 0 view .LVU456
 1825 006a 2BA8     		add	r0, sp, #172
 1826 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1827              	.LVL115:
 207:Src/main.c    **** 		Error_Handler();
 1828              		.loc 1 207 5 view .LVU457
 1829 0070 F8B9     		cbnz	r0, .L120
 1830              	.L115:
 212:Src/main.c    **** 		Error_Handler();
ARM GAS  /tmp/ccwzORpx.s 			page 50


 1831              		.loc 1 212 2 is_stmt 1 view .LVU458
 212:Src/main.c    **** 		Error_Handler();
 1832              		.loc 1 212 6 is_stmt 0 view .LVU459
 1833 0072 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1834              	.LVL116:
 212:Src/main.c    **** 		Error_Handler();
 1835              		.loc 1 212 5 view .LVU460
 1836 0076 F8B9     		cbnz	r0, .L121
 1837              	.L116:
 217:Src/main.c    **** 								  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 1838              		.loc 1 217 2 is_stmt 1 view .LVU461
 217:Src/main.c    **** 								  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 1839              		.loc 1 217 30 is_stmt 0 view .LVU462
 1840 0078 0F23     		movs	r3, #15
 1841 007a 2693     		str	r3, [sp, #152]
 219:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1842              		.loc 1 219 2 is_stmt 1 view .LVU463
 219:Src/main.c    **** 	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1843              		.loc 1 219 33 is_stmt 0 view .LVU464
 1844 007c 0223     		movs	r3, #2
 1845 007e 2793     		str	r3, [sp, #156]
 220:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1846              		.loc 1 220 2 is_stmt 1 view .LVU465
 220:Src/main.c    **** 	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1847              		.loc 1 220 34 is_stmt 0 view .LVU466
 1848 0080 0023     		movs	r3, #0
 1849 0082 2893     		str	r3, [sp, #160]
 221:Src/main.c    **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1850              		.loc 1 221 2 is_stmt 1 view .LVU467
 221:Src/main.c    **** 	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1851              		.loc 1 221 35 is_stmt 0 view .LVU468
 1852 0084 4FF4A053 		mov	r3, #5120
 1853 0088 2993     		str	r3, [sp, #164]
 222:Src/main.c    **** 
 1854              		.loc 1 222 2 is_stmt 1 view .LVU469
 222:Src/main.c    **** 
 1855              		.loc 1 222 35 is_stmt 0 view .LVU470
 1856 008a 4FF48053 		mov	r3, #4096
 1857 008e 2A93     		str	r3, [sp, #168]
 224:Src/main.c    **** 		Error_Handler();
 1858              		.loc 1 224 2 is_stmt 1 view .LVU471
 224:Src/main.c    **** 		Error_Handler();
 1859              		.loc 1 224 6 is_stmt 0 view .LVU472
 1860 0090 0721     		movs	r1, #7
 1861 0092 26A8     		add	r0, sp, #152
 1862 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1863              	.LVL117:
 224:Src/main.c    **** 		Error_Handler();
 1864              		.loc 1 224 5 view .LVU473
 1865 0098 88B9     		cbnz	r0, .L122
 1866              	.L117:
 227:Src/main.c    **** 		RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_CLK48;
 1867              		.loc 1 227 2 is_stmt 1 view .LVU474
 227:Src/main.c    **** 		RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_SDMMC1 | RCC_PERIPHCLK_CLK48;
 1868              		.loc 1 227 43 is_stmt 0 view .LVU475
 1869 009a 0E4B     		ldr	r3, .L124+8
 1870 009c 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccwzORpx.s 			page 51


 229:Src/main.c    **** 	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1871              		.loc 1 229 2 is_stmt 1 view .LVU476
 229:Src/main.c    **** 	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1872              		.loc 1 229 43 is_stmt 0 view .LVU477
 1873 009e 0023     		movs	r3, #0
 1874 00a0 1593     		str	r3, [sp, #84]
 230:Src/main.c    **** 	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 1875              		.loc 1 230 2 is_stmt 1 view .LVU478
 230:Src/main.c    **** 	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 1876              		.loc 1 230 42 is_stmt 0 view .LVU479
 1877 00a2 2193     		str	r3, [sp, #132]
 231:Src/main.c    **** 	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 1878              		.loc 1 231 2 is_stmt 1 view .LVU480
 231:Src/main.c    **** 	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 1879              		.loc 1 231 43 is_stmt 0 view .LVU481
 1880 00a4 2293     		str	r3, [sp, #136]
 232:Src/main.c    **** 		Error_Handler();
 1881              		.loc 1 232 2 is_stmt 1 view .LVU482
 232:Src/main.c    **** 		Error_Handler();
 1882              		.loc 1 232 6 is_stmt 0 view .LVU483
 1883 00a6 02A8     		add	r0, sp, #8
 1884 00a8 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1885              	.LVL118:
 232:Src/main.c    **** 		Error_Handler();
 1886              		.loc 1 232 5 view .LVU484
 1887 00ac 50B9     		cbnz	r0, .L123
 1888              	.L114:
 235:Src/main.c    **** 
 1889              		.loc 1 235 1 view .LVU485
 1890 00ae 38B0     		add	sp, sp, #224
 1891              	.LCFI26:
 1892              		.cfi_remember_state
 1893              		.cfi_def_cfa_offset 8
 1894              		@ sp needed
 1895 00b0 10BD     		pop	{r4, pc}
 1896              	.L120:
 1897              	.LCFI27:
 1898              		.cfi_restore_state
 208:Src/main.c    **** 	}
 1899              		.loc 1 208 3 is_stmt 1 view .LVU486
 1900 00b2 FFF7FEFF 		bl	Error_Handler
 1901              	.LVL119:
 1902 00b6 DCE7     		b	.L115
 1903              	.L121:
 213:Src/main.c    **** 	}
 1904              		.loc 1 213 3 view .LVU487
 1905 00b8 FFF7FEFF 		bl	Error_Handler
 1906              	.LVL120:
 1907 00bc DCE7     		b	.L116
 1908              	.L122:
 225:Src/main.c    **** 	}
 1909              		.loc 1 225 3 view .LVU488
 1910 00be FFF7FEFF 		bl	Error_Handler
 1911              	.LVL121:
 1912 00c2 EAE7     		b	.L117
 1913              	.L123:
 233:Src/main.c    **** 	}
ARM GAS  /tmp/ccwzORpx.s 			page 52


 1914              		.loc 1 233 3 view .LVU489
 1915 00c4 FFF7FEFF 		bl	Error_Handler
 1916              	.LVL122:
 235:Src/main.c    **** 
 1917              		.loc 1 235 1 is_stmt 0 view .LVU490
 1918 00c8 F1E7     		b	.L114
 1919              	.L125:
 1920 00ca 00BF     		.align	2
 1921              	.L124:
 1922 00cc 00380240 		.word	1073887232
 1923 00d0 00700040 		.word	1073770496
 1924 00d4 0001A000 		.word	10486016
 1925              		.cfi_endproc
 1926              	.LFE145:
 1928              		.section	.text.main,"ax",%progbits
 1929              		.align	1
 1930              		.global	main
 1931              		.syntax unified
 1932              		.thumb
 1933              		.thumb_func
 1934              		.fpu fpv5-d16
 1936              	main:
 1937              	.LFB144:
  90:Src/main.c    **** 	/* USER CODE BEGIN 1 */
 1938              		.loc 1 90 16 is_stmt 1 view -0
 1939              		.cfi_startproc
 1940              		@ Volatile: function does not return.
 1941              		@ args = 0, pretend = 0, frame = 0
 1942              		@ frame_needed = 0, uses_anonymous_args = 0
 1943 0000 08B5     		push	{r3, lr}
 1944              	.LCFI28:
 1945              		.cfi_def_cfa_offset 8
 1946              		.cfi_offset 3, -8
 1947              		.cfi_offset 14, -4
 100:Src/main.c    **** 
 1948              		.loc 1 100 2 view .LVU492
 1949 0002 FFF7FEFF 		bl	HAL_Init
 1950              	.LVL123:
 107:Src/main.c    **** 
 1951              		.loc 1 107 2 view .LVU493
 1952 0006 FFF7FEFF 		bl	SystemClock_Config
 1953              	.LVL124:
 114:Src/main.c    **** 	MX_SDMMC1_SD_Init();
 1954              		.loc 1 114 2 view .LVU494
 1955 000a FFF7FEFF 		bl	MX_GPIO_Init
 1956              	.LVL125:
 115:Src/main.c    **** 	MX_USART3_UART_Init();
 1957              		.loc 1 115 2 view .LVU495
 1958 000e FFF7FEFF 		bl	MX_SDMMC1_SD_Init
 1959              	.LVL126:
 116:Src/main.c    **** 	MX_FATFS_Init();
 1960              		.loc 1 116 2 view .LVU496
 1961 0012 FFF7FEFF 		bl	MX_USART3_UART_Init
 1962              	.LVL127:
 117:Src/main.c    **** 	MX_CAN1_Init();
 1963              		.loc 1 117 2 view .LVU497
 1964 0016 FFF7FEFF 		bl	MX_FATFS_Init
ARM GAS  /tmp/ccwzORpx.s 			page 53


 1965              	.LVL128:
 118:Src/main.c    **** 	MX_TIM2_Init();
 1966              		.loc 1 118 2 view .LVU498
 1967 001a FFF7FEFF 		bl	MX_CAN1_Init
 1968              	.LVL129:
 119:Src/main.c    **** 
 1969              		.loc 1 119 2 view .LVU499
 1970 001e FFF7FEFF 		bl	MX_TIM2_Init
 1971              	.LVL130:
 122:Src/main.c    **** 	/* USER CODE BEGIN 2 */
 1972              		.loc 1 122 2 view .LVU500
 1973 0022 FFF7FEFF 		bl	MX_NVIC_Init
 1974              	.LVL131:
 124:Src/main.c    **** 
 1975              		.loc 1 124 2 view .LVU501
 1976 0026 2848     		ldr	r0, .L136
 1977 0028 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1978              	.LVL132:
 126:Src/main.c    **** 	can1.tx_interrupt = CAN1_TX_IRQn;
 1979              		.loc 1 126 2 view .LVU502
 126:Src/main.c    **** 	can1.tx_interrupt = CAN1_TX_IRQn;
 1980              		.loc 1 126 21 is_stmt 0 view .LVU503
 1981 002c 274B     		ldr	r3, .L136+4
 1982 002e 1422     		movs	r2, #20
 1983 0030 83F8982D 		strb	r2, [r3, #3480]
 127:Src/main.c    **** 	can1.hcan = &hcan1;
 1984              		.loc 1 127 2 is_stmt 1 view .LVU504
 127:Src/main.c    **** 	can1.hcan = &hcan1;
 1985              		.loc 1 127 20 is_stmt 0 view .LVU505
 1986 0034 1322     		movs	r2, #19
 1987 0036 83F8992D 		strb	r2, [r3, #3481]
 128:Src/main.c    **** 
 1988              		.loc 1 128 2 is_stmt 1 view .LVU506
 128:Src/main.c    **** 
 1989              		.loc 1 128 12 is_stmt 0 view .LVU507
 1990 003a 254A     		ldr	r2, .L136+8
 1991 003c 1A64     		str	r2, [r3, #64]
 130:Src/main.c    **** 
 1992              		.loc 1 130 2 is_stmt 1 view .LVU508
 1993 003e FFF7FEFF 		bl	can_init
 1994              	.LVL133:
 132:Src/main.c    **** 						1);  // activate rx interrupt for debug
 1995              		.loc 1 132 2 view .LVU509
 132:Src/main.c    **** 						1);  // activate rx interrupt for debug
 1996              		.loc 1 132 51 is_stmt 0 view .LVU510
 1997 0042 244B     		ldr	r3, .L136+12
 1998 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 132:Src/main.c    **** 						1);  // activate rx interrupt for debug
 1999              		.loc 1 132 2 view .LVU511
 2000 0046 0122     		movs	r2, #1
 2001 0048 2349     		ldr	r1, .L136+16
 2002 004a 1944     		add	r1, r1, r3
 2003 004c 2348     		ldr	r0, .L136+20
 2004 004e FFF7FEFF 		bl	HAL_UART_Receive_IT
 2005              	.LVL134:
 135:Src/main.c    **** 
 2006              		.loc 1 135 2 is_stmt 1 view .LVU512
ARM GAS  /tmp/ccwzORpx.s 			page 54


 135:Src/main.c    **** 
 2007              		.loc 1 135 16 is_stmt 0 view .LVU513
 2008 0052 0021     		movs	r1, #0
 2009 0054 224B     		ldr	r3, .L136+24
 2010 0056 1970     		strb	r1, [r3]
 137:Src/main.c    **** 	accel.pot1_min_val = 0;
 2011              		.loc 1 137 2 is_stmt 1 view .LVU514
 137:Src/main.c    **** 	accel.pot1_min_val = 0;
 2012              		.loc 1 137 21 is_stmt 0 view .LVU515
 2013 0058 224B     		ldr	r3, .L136+28
 2014 005a 4FF48052 		mov	r2, #4096
 2015 005e 1A81     		strh	r2, [r3, #8]	@ movhi
 138:Src/main.c    **** 	accel.pot1_range = accel.pot1_max_val - accel.pot1_min_val;
 2016              		.loc 1 138 2 is_stmt 1 view .LVU516
 138:Src/main.c    **** 	accel.pot1_range = accel.pot1_max_val - accel.pot1_min_val;
 2017              		.loc 1 138 21 is_stmt 0 view .LVU517
 2018 0060 D981     		strh	r1, [r3, #14]	@ movhi
 139:Src/main.c    **** 	accel.pot2_max_val = 4096;
 2019              		.loc 1 139 2 is_stmt 1 view .LVU518
 139:Src/main.c    **** 	accel.pot2_max_val = 4096;
 2020              		.loc 1 139 19 is_stmt 0 view .LVU519
 2021 0062 9A81     		strh	r2, [r3, #12]	@ movhi
 140:Src/main.c    **** 	accel.pot2_min_val = 0;
 2022              		.loc 1 140 2 is_stmt 1 view .LVU520
 140:Src/main.c    **** 	accel.pot2_min_val = 0;
 2023              		.loc 1 140 21 is_stmt 0 view .LVU521
 2024 0064 5A81     		strh	r2, [r3, #10]	@ movhi
 141:Src/main.c    **** 	accel.pot2_range = accel.pot2_max_val - accel.pot2_min_val;
 2025              		.loc 1 141 2 is_stmt 1 view .LVU522
 141:Src/main.c    **** 	accel.pot2_range = accel.pot2_max_val - accel.pot2_min_val;
 2026              		.loc 1 141 21 is_stmt 0 view .LVU523
 2027 0066 1982     		strh	r1, [r3, #16]	@ movhi
 142:Src/main.c    **** 
 2028              		.loc 1 142 2 is_stmt 1 view .LVU524
 142:Src/main.c    **** 
 2029              		.loc 1 142 19 is_stmt 0 view .LVU525
 2030 0068 5A82     		strh	r2, [r3, #18]	@ movhi
 144:Src/main.c    **** 
 2031              		.loc 1 144 2 is_stmt 1 view .LVU526
 2032 006a FFF7FEFF 		bl	init_sd
 2033              	.LVL135:
 2034 006e 05E0     		b	.L127
 2035              	.L128:
 169:Src/main.c    **** 			idle();
 2036              		.loc 1 169 10 view .LVU527
 169:Src/main.c    **** 			idle();
 2037              		.loc 1 169 13 is_stmt 0 view .LVU528
 2038 0070 012B     		cmp	r3, #1
 2039 0072 20D0     		beq	.L133
 171:Src/main.c    **** 			setup();
 2040              		.loc 1 171 10 is_stmt 1 view .LVU529
 171:Src/main.c    **** 			setup();
 2041              		.loc 1 171 13 is_stmt 0 view .LVU530
 2042 0074 022B     		cmp	r3, #2
 2043 0076 21D0     		beq	.L134
 173:Src/main.c    **** 			run();
 2044              		.loc 1 173 10 is_stmt 1 view .LVU531
ARM GAS  /tmp/ccwzORpx.s 			page 55


 173:Src/main.c    **** 			run();
 2045              		.loc 1 173 13 is_stmt 0 view .LVU532
 2046 0078 032B     		cmp	r3, #3
 2047 007a 22D0     		beq	.L135
 2048              	.L127:
 150:Src/main.c    **** 		can1.dataTx[0] = 0;
 2049              		.loc 1 150 2 is_stmt 1 view .LVU533
 151:Src/main.c    **** 		can1.dataTx[1] = 0;
 2050              		.loc 1 151 3 view .LVU534
 151:Src/main.c    **** 		can1.dataTx[1] = 0;
 2051              		.loc 1 151 18 is_stmt 0 view .LVU535
 2052 007c 134A     		ldr	r2, .L136+4
 2053 007e 0023     		movs	r3, #0
 2054 0080 1373     		strb	r3, [r2, #12]
 152:Src/main.c    **** 		can1.dataTx[2] = 0;
 2055              		.loc 1 152 3 is_stmt 1 view .LVU536
 152:Src/main.c    **** 		can1.dataTx[2] = 0;
 2056              		.loc 1 152 18 is_stmt 0 view .LVU537
 2057 0082 5373     		strb	r3, [r2, #13]
 153:Src/main.c    **** 		can1.dataTx[3] = 0;
 2058              		.loc 1 153 3 is_stmt 1 view .LVU538
 153:Src/main.c    **** 		can1.dataTx[3] = 0;
 2059              		.loc 1 153 18 is_stmt 0 view .LVU539
 2060 0084 9373     		strb	r3, [r2, #14]
 154:Src/main.c    **** 		can1.dataTx[4] = counter >> 24;
 2061              		.loc 1 154 3 is_stmt 1 view .LVU540
 154:Src/main.c    **** 		can1.dataTx[4] = counter >> 24;
 2062              		.loc 1 154 18 is_stmt 0 view .LVU541
 2063 0086 D373     		strb	r3, [r2, #15]
 155:Src/main.c    **** 		can1.dataTx[5] = counter >> 16;
 2064              		.loc 1 155 3 is_stmt 1 view .LVU542
 155:Src/main.c    **** 		can1.dataTx[5] = counter >> 16;
 2065              		.loc 1 155 28 is_stmt 0 view .LVU543
 2066 0088 174B     		ldr	r3, .L136+32
 2067 008a 1B68     		ldr	r3, [r3]
 2068 008c 1916     		asrs	r1, r3, #24
 155:Src/main.c    **** 		can1.dataTx[5] = counter >> 16;
 2069              		.loc 1 155 18 view .LVU544
 2070 008e 1174     		strb	r1, [r2, #16]
 156:Src/main.c    **** 		can1.dataTx[6] = counter >> 8;
 2071              		.loc 1 156 3 is_stmt 1 view .LVU545
 156:Src/main.c    **** 		can1.dataTx[6] = counter >> 8;
 2072              		.loc 1 156 28 is_stmt 0 view .LVU546
 2073 0090 1914     		asrs	r1, r3, #16
 156:Src/main.c    **** 		can1.dataTx[6] = counter >> 8;
 2074              		.loc 1 156 18 view .LVU547
 2075 0092 5174     		strb	r1, [r2, #17]
 157:Src/main.c    **** 		can1.dataTx[7] = counter % 256;
 2076              		.loc 1 157 3 is_stmt 1 view .LVU548
 157:Src/main.c    **** 		can1.dataTx[7] = counter % 256;
 2077              		.loc 1 157 28 is_stmt 0 view .LVU549
 2078 0094 1912     		asrs	r1, r3, #8
 157:Src/main.c    **** 		can1.dataTx[7] = counter % 256;
 2079              		.loc 1 157 18 view .LVU550
 2080 0096 9174     		strb	r1, [r2, #18]
 158:Src/main.c    **** 
 2081              		.loc 1 158 3 is_stmt 1 view .LVU551
ARM GAS  /tmp/ccwzORpx.s 			page 56


 158:Src/main.c    **** 
 2082              		.loc 1 158 28 is_stmt 0 view .LVU552
 2083 0098 5942     		rsbs	r1, r3, #0
 2084 009a DBB2     		uxtb	r3, r3
 2085 009c C9B2     		uxtb	r1, r1
 2086 009e 58BF     		it	pl
 2087 00a0 4B42     		rsbpl	r3, r1, #0
 158:Src/main.c    **** 
 2088              		.loc 1 158 18 view .LVU553
 2089 00a2 D374     		strb	r3, [r2, #19]
 160:Src/main.c    **** 
 2090              		.loc 1 160 3 is_stmt 1 view .LVU554
 160:Src/main.c    **** 
 2091              		.loc 1 160 14 is_stmt 0 view .LVU555
 2092 00a4 A023     		movs	r3, #160
 2093 00a6 D362     		str	r3, [r2, #44]
 167:Src/main.c    **** 			init();
 2094              		.loc 1 167 3 is_stmt 1 view .LVU556
 167:Src/main.c    **** 			init();
 2095              		.loc 1 167 21 is_stmt 0 view .LVU557
 2096 00a8 0D4B     		ldr	r3, .L136+24
 2097 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 167:Src/main.c    **** 			init();
 2098              		.loc 1 167 6 view .LVU558
 2099 00ac 002B     		cmp	r3, #0
 2100 00ae DFD1     		bne	.L128
 168:Src/main.c    **** 		} else if (current_state == STATE_IDLE) {
 2101              		.loc 1 168 4 is_stmt 1 view .LVU559
 2102 00b0 FFF7FEFF 		bl	init
 2103              	.LVL136:
 2104 00b4 E2E7     		b	.L127
 2105              	.L133:
 170:Src/main.c    **** 		} else if (current_state == STATE_SETUP) {
 2106              		.loc 1 170 4 view .LVU560
 2107 00b6 FFF7FEFF 		bl	idle
 2108              	.LVL137:
 2109 00ba DFE7     		b	.L127
 2110              	.L134:
 172:Src/main.c    **** 		} else if (current_state == STATE_RUN) {
 2111              		.loc 1 172 4 view .LVU561
 2112 00bc FFF7FEFF 		bl	setup
 2113              	.LVL138:
 2114 00c0 DCE7     		b	.L127
 2115              	.L135:
 174:Src/main.c    **** 		}
 2116              		.loc 1 174 4 view .LVU562
 2117 00c2 FFF7FEFF 		bl	run
 2118              	.LVL139:
 2119 00c6 D9E7     		b	.L127
 2120              	.L137:
 2121              		.align	2
 2122              	.L136:
 2123 00c8 00000000 		.word	htim2
 2124 00cc 00000000 		.word	can1
 2125 00d0 00000000 		.word	hcan1
 2126 00d4 00000000 		.word	debug_rx_count
 2127 00d8 00000000 		.word	debug_rx
ARM GAS  /tmp/ccwzORpx.s 			page 57


 2128 00dc 00000000 		.word	huart3
 2129 00e0 00000000 		.word	current_state
 2130 00e4 00000000 		.word	accel
 2131 00e8 00000000 		.word	.LANCHOR0
 2132              		.cfi_endproc
 2133              	.LFE144:
 2135              		.global	counter
 2136              		.comm	sFilter,40,4
 2137              		.comm	i_debug,1,1
 2138              		.comm	huart3,128,4
 2139              		.comm	htim2,64,4
 2140              		.comm	hsd1,132,4
 2141              		.comm	hcan1,40,4
 2142              		.comm	current_state,1,1
 2143              		.section	.bss.counter,"aw",%nobits
 2144              		.align	2
 2145              		.set	.LANCHOR0,. + 0
 2148              	counter:
 2149 0000 00000000 		.space	4
 2150              		.text
 2151              	.Letext0:
 2152              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 2153              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2154              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2155              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 2156              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 2157              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 2158              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 2159              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 2160              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 2161              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 2162              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 2163              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 2164              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 2165              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 2166              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 2167              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 2168              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 2169              		.file 19 "Middlewares/Third_Party/FatFs/src/integer.h"
 2170              		.file 20 "/usr/arm-none-eabi/include/sys/lock.h"
 2171              		.file 21 "/usr/arm-none-eabi/include/sys/_types.h"
 2172              		.file 22 "/usr/lib/gcc/arm-none-eabi/9.2.0/include/stddef.h"
 2173              		.file 23 "/usr/arm-none-eabi/include/sys/reent.h"
 2174              		.file 24 "/usr/arm-none-eabi/include/stdlib.h"
 2175              		.file 25 "Middlewares/Third_Party/FatFs/src/ff.h"
 2176              		.file 26 "Middlewares/Third_Party/FatFs/src/diskio.h"
 2177              		.file 27 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 2178              		.file 28 "Inc/sd_diskio.h"
 2179              		.file 29 "Inc/fatfs.h"
 2180              		.file 30 "Inc/can.h"
 2181              		.file 31 "Inc/pedals.h"
 2182              		.file 32 "Inc/global_variables.h"
 2183              		.file 33 "Inc/state.h"
 2184              		.file 34 "/usr/arm-none-eabi/include/stdio.h"
 2185              		.file 35 "/usr/arm-none-eabi/include/string.h"
 2186              		.file 36 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 2187              		.file 37 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
ARM GAS  /tmp/ccwzORpx.s 			page 58


 2188              		.file 38 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
 2189              		.file 39 "Inc/sd.h"
 2190              		.file 40 "<built-in>"
ARM GAS  /tmp/ccwzORpx.s 			page 59


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccwzORpx.s:17     .text.MX_SDMMC1_SD_Init:0000000000000000 $t
     /tmp/ccwzORpx.s:24     .text.MX_SDMMC1_SD_Init:0000000000000000 MX_SDMMC1_SD_Init
     /tmp/ccwzORpx.s:62     .text.MX_SDMMC1_SD_Init:0000000000000018 $d
                            *COM*:0000000000000084 hsd1
     /tmp/ccwzORpx.s:68     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccwzORpx.s:74     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccwzORpx.s:208    .text.MX_GPIO_Init:0000000000000094 $d
     /tmp/ccwzORpx.s:215    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccwzORpx.s:221    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccwzORpx.s:308    .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:312    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:319    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccwzORpx.s:545    .text.HAL_TIM_PeriodElapsedCallback:00000000000000f4 $d
                            *COM*:0000000000000040 htim2
                            *COM*:0000000000000080 huart3
     /tmp/ccwzORpx.s:564    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:571    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccwzORpx.s:653    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000044 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccwzORpx.s:660    .rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:664    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:671    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccwzORpx.s:709    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000018 $d
     /tmp/ccwzORpx.s:716    .rodata.HAL_CAN_RxFifo0FullCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:720    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:727    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccwzORpx.s:765    .text.HAL_CAN_RxFifo0FullCallback:0000000000000018 $d
     /tmp/ccwzORpx.s:772    .rodata.HAL_CAN_RxFifo1FullCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:776    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:783    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccwzORpx.s:821    .text.HAL_CAN_RxFifo1FullCallback:0000000000000018 $d
     /tmp/ccwzORpx.s:828    .rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:835    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:842    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccwzORpx.s:939    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000068 $d
     /tmp/ccwzORpx.s:950    .rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:954    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:961    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccwzORpx.s:1061   .text.HAL_CAN_TxMailbox1CompleteCallback:000000000000006c $d
     /tmp/ccwzORpx.s:1072   .rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:1076   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:1083   .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccwzORpx.s:1183   .text.HAL_CAN_TxMailbox2CompleteCallback:000000000000006c $d
     /tmp/ccwzORpx.s:1194   .rodata.HAL_CAN_ErrorCallback.str1.4:0000000000000000 $d
     /tmp/ccwzORpx.s:1198   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:1205   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccwzORpx.s:1263   .text.HAL_CAN_ErrorCallback:0000000000000034 $d
     /tmp/ccwzORpx.s:1272   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccwzORpx.s:1279   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccwzORpx.s:1376   .text.HAL_UART_RxCpltCallback:0000000000000060 $d
     /tmp/ccwzORpx.s:1384   .text.Error_Handler:0000000000000000 $t
     /tmp/ccwzORpx.s:1391   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccwzORpx.s:1427   .text.Error_Handler:0000000000000028 $d
     /tmp/ccwzORpx.s:1432   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccwzORpx.s:1438   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
ARM GAS  /tmp/ccwzORpx.s 			page 60


     /tmp/ccwzORpx.s:1502   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/ccwzORpx.s:1509   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccwzORpx.s:1515   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccwzORpx.s:1587   .text.MX_CAN1_Init:000000000000003c $d
     /tmp/ccwzORpx.s:1593   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccwzORpx.s:1599   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccwzORpx.s:1710   .text.MX_TIM2_Init:000000000000006c $d
     /tmp/ccwzORpx.s:1715   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccwzORpx.s:1722   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccwzORpx.s:1922   .text.SystemClock_Config:00000000000000cc $d
     /tmp/ccwzORpx.s:1929   .text.main:0000000000000000 $t
     /tmp/ccwzORpx.s:1936   .text.main:0000000000000000 main
     /tmp/ccwzORpx.s:2123   .text.main:00000000000000c8 $d
                            *COM*:0000000000000001 current_state
     /tmp/ccwzORpx.s:2148   .bss.counter:0000000000000000 counter
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000001 i_debug
     /tmp/ccwzORpx.s:2144   .bss.counter:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
count_ms
accel_implausibility_check_count_flag
count_dec
count_inverter
count_imu
count_atc
count_sec
count_min
count_hour
accel_implausibility_check_count
atc_connected
imu_connected
HAL_GPIO_TogglePin
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
fifoRxDataCAN_push
can1
sprintf
strlen
fifoTxDataCAN_high_pop
CAN_Send_IT
fifoTxDataCAN_normal_pop
txt
CAN_Send_Bck
HAL_UART_Receive_IT
debug_rx_count
debug_rx
debug_msg_arrived
HAL_Delay
HAL_UART_Init
HAL_CAN_Init
HAL_TIM_Base_Init
ARM GAS  /tmp/ccwzORpx.s 			page 61


HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
HAL_TIM_Base_Start_IT
can_init
init_sd
init
idle
setup
run
accel
