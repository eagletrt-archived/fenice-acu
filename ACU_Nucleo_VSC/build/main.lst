ARM GAS  /tmp/ccWFWrY3.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_SDMMC1_SD_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	MX_SDMMC1_SD_Init:
  24              	.LFB146:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "fatfs.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include "state.h"
  28:Src/main.c    **** #include "can.h"
  29:Src/main.c    **** #include "global_variables.h"
  30:Src/main.c    **** #include "string.h"
  31:Src/main.c    **** #include "stdio.h"
  32:Src/main.c    **** /* USER CODE END Includes */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccWFWrY3.s 			page 2


  34:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* USER CODE END PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PD */
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** CAN_HandleTypeDef hcan1;
  50:Src/main.c    **** 
  51:Src/main.c    **** SD_HandleTypeDef hsd1;
  52:Src/main.c    **** 
  53:Src/main.c    **** TIM_HandleTypeDef htim2;
  54:Src/main.c    **** 
  55:Src/main.c    **** UART_HandleTypeDef huart3;
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** uint8_t i_debug;
  60:Src/main.c    **** extern canStruct can1,can3;
  61:Src/main.c    **** extern fifoPriority fifoPriority_t;
  62:Src/main.c    **** 
  63:Src/main.c    **** CAN_FilterTypeDef sFilter;
  64:Src/main.c    **** 
  65:Src/main.c    **** long int counter = 0;
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_SDMMC1_SD_Init(void);
  72:Src/main.c    **** static void MX_USART3_UART_Init(void);
  73:Src/main.c    **** static void MX_CAN1_Init(void);
  74:Src/main.c    **** static void MX_TIM2_Init(void);
  75:Src/main.c    **** static void MX_NVIC_Init(void);
  76:Src/main.c    **** /* USER CODE BEGIN PFP */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END PFP */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  81:Src/main.c    **** /* USER CODE BEGIN 0 */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE END 0 */
  84:Src/main.c    **** 
  85:Src/main.c    **** /**
  86:Src/main.c    ****   * @brief  The application entry point.
  87:Src/main.c    ****   * @retval int
  88:Src/main.c    ****   */
  89:Src/main.c    **** int main(void)
  90:Src/main.c    **** {
ARM GAS  /tmp/ccWFWrY3.s 			page 3


  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE END 1 */
  94:Src/main.c    ****   
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Src/main.c    ****   HAL_Init();
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Configure the system clock */
 106:Src/main.c    ****   SystemClock_Config();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Initialize all configured peripherals */
 113:Src/main.c    ****   MX_GPIO_Init();
 114:Src/main.c    ****   MX_SDMMC1_SD_Init();
 115:Src/main.c    ****   MX_USART3_UART_Init();
 116:Src/main.c    ****   MX_FATFS_Init();
 117:Src/main.c    ****   MX_CAN1_Init();
 118:Src/main.c    ****   MX_TIM2_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Initialize interrupts */
 121:Src/main.c    ****   MX_NVIC_Init();
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
 123:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 124:Src/main.c    **** 
 125:Src/main.c    ****   can1.rx0_interrupt = CAN1_RX0_IRQn;
 126:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 127:Src/main.c    ****   can1.hcan = &hcan1;
 128:Src/main.c    **** 
 129:Src/main.c    ****   can_init();
 130:Src/main.c    **** 
 131:Src/main.c    ****   HAL_UART_Receive_IT(&huart3,(uint8_t*) &debug_rx[debug_rx_count], 1); //activate rx interrupt for
 132:Src/main.c    **** 
 133:Src/main.c    ****   current_state = STATE_INIT;
 134:Src/main.c    **** 
 135:Src/main.c    ****   
 136:Src/main.c    ****   /* USER CODE END 2 */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Infinite loop */
 139:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 140:Src/main.c    ****   while (1)
 141:Src/main.c    ****   {
 142:Src/main.c    ****     can1.dataTx[0] = 0;
 143:Src/main.c    **** 	  can1.dataTx[1] = 0;
 144:Src/main.c    **** 	  can1.dataTx[2] = 0;
 145:Src/main.c    **** 	  can1.dataTx[3] = 0;
 146:Src/main.c    **** 	  can1.dataTx[4] = counter >> 24;
 147:Src/main.c    **** 	  can1.dataTx[5] = counter >> 16;
ARM GAS  /tmp/ccWFWrY3.s 			page 4


 148:Src/main.c    **** 	  can1.dataTx[6] = counter >> 8;
 149:Src/main.c    **** 	  can1.dataTx[7] = counter % 256;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	  can1.tx_id = 0xA0;
 152:Src/main.c    **** 
 153:Src/main.c    **** 	  //CAN_Send(&can1, normalPriority);
 154:Src/main.c    **** 	  //HAL_Delay(500);
 155:Src/main.c    **** 
 156:Src/main.c    **** 	  //counter ++;
 157:Src/main.c    **** 
 158:Src/main.c    **** 	  if(current_state == STATE_INIT){
 159:Src/main.c    **** 		  init();
 160:Src/main.c    **** 	  }else if(current_state == STATE_IDLE){
 161:Src/main.c    **** 		  idle();
 162:Src/main.c    **** 	  }else if(current_state == STATE_CALIB){
 163:Src/main.c    **** 		  calib();
 164:Src/main.c    **** 	  }else if(current_state == STATE_SETUP){
 165:Src/main.c    **** 		  setup();
 166:Src/main.c    **** 	  }else if(current_state == STATE_RUN){
 167:Src/main.c    **** 		  run();
 168:Src/main.c    **** 	  }
 169:Src/main.c    ****     /* USER CODE END WHILE */
 170:Src/main.c    **** 
 171:Src/main.c    ****     /* USER CODE BEGIN 3 */
 172:Src/main.c    ****   }
 173:Src/main.c    ****   /* USER CODE END 3 */
 174:Src/main.c    **** }
 175:Src/main.c    **** 
 176:Src/main.c    **** /**
 177:Src/main.c    ****   * @brief System Clock Configuration
 178:Src/main.c    ****   * @retval None
 179:Src/main.c    ****   */
 180:Src/main.c    **** void SystemClock_Config(void)
 181:Src/main.c    **** {
 182:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 183:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 184:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 185:Src/main.c    **** 
 186:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 187:Src/main.c    ****   */
 188:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 189:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 190:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****   */
 192:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 193:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 194:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 200:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 201:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 202:Src/main.c    ****   {
 203:Src/main.c    ****     Error_Handler();
 204:Src/main.c    ****   }
ARM GAS  /tmp/ccWFWrY3.s 			page 5


 205:Src/main.c    ****   /** Activate the Over-Drive mode 
 206:Src/main.c    ****   */
 207:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 208:Src/main.c    ****   {
 209:Src/main.c    ****     Error_Handler();
 210:Src/main.c    ****   }
 211:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 212:Src/main.c    ****   */
 213:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 215:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 218:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 219:Src/main.c    **** 
 220:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 225:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 226:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 227:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 228:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 229:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     Error_Handler();
 232:Src/main.c    ****   }
 233:Src/main.c    **** }
 234:Src/main.c    **** 
 235:Src/main.c    **** /**
 236:Src/main.c    ****   * @brief NVIC Configuration.
 237:Src/main.c    ****   * @retval None
 238:Src/main.c    ****   */
 239:Src/main.c    **** static void MX_NVIC_Init(void)
 240:Src/main.c    **** {
 241:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 242:Src/main.c    ****   HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 243:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 244:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 245:Src/main.c    ****   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 246:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 247:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 248:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 249:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 250:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 251:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 252:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 253:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 254:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 255:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 256:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 257:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 258:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 259:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 260:Src/main.c    ****   HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 261:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
ARM GAS  /tmp/ccWFWrY3.s 			page 6


 262:Src/main.c    **** }
 263:Src/main.c    **** 
 264:Src/main.c    **** /**
 265:Src/main.c    ****   * @brief CAN1 Initialization Function
 266:Src/main.c    ****   * @param None
 267:Src/main.c    ****   * @retval None
 268:Src/main.c    ****   */
 269:Src/main.c    **** static void MX_CAN1_Init(void)
 270:Src/main.c    **** {
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 279:Src/main.c    ****   hcan1.Instance = CAN1;
 280:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 281:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 282:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 283:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 284:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 285:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 286:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 287:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 288:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 289:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 290:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 291:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 292:Src/main.c    ****   {
 293:Src/main.c    ****     Error_Handler();
 294:Src/main.c    ****   }
 295:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 296:Src/main.c    **** 
 297:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 298:Src/main.c    **** 
 299:Src/main.c    **** }
 300:Src/main.c    **** 
 301:Src/main.c    **** /**
 302:Src/main.c    ****   * @brief SDMMC1 Initialization Function
 303:Src/main.c    ****   * @param None
 304:Src/main.c    ****   * @retval None
 305:Src/main.c    ****   */
 306:Src/main.c    **** static void MX_SDMMC1_SD_Init(void)
 307:Src/main.c    **** {
  26              		.loc 1 307 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 0 */
 310:Src/main.c    **** 
 311:Src/main.c    ****   /* USER CODE END SDMMC1_Init 0 */
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 1 */
ARM GAS  /tmp/ccWFWrY3.s 			page 7


 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE END SDMMC1_Init 1 */
 316:Src/main.c    ****   hsd1.Instance = SDMMC1;
  31              		.loc 1 316 0
  32 0000 054B     		ldr	r3, .L2
  33 0002 064A     		ldr	r2, .L2+4
  34 0004 1A60     		str	r2, [r3]
 317:Src/main.c    ****   hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  35              		.loc 1 317 0
  36 0006 0022     		movs	r2, #0
  37 0008 5A60     		str	r2, [r3, #4]
 318:Src/main.c    ****   hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  38              		.loc 1 318 0
  39 000a 9A60     		str	r2, [r3, #8]
 319:Src/main.c    ****   hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  40              		.loc 1 319 0
  41 000c DA60     		str	r2, [r3, #12]
 320:Src/main.c    ****   hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  42              		.loc 1 320 0
  43 000e 1A61     		str	r2, [r3, #16]
 321:Src/main.c    ****   hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  44              		.loc 1 321 0
  45 0010 5A61     		str	r2, [r3, #20]
 322:Src/main.c    ****   hsd1.Init.ClockDiv = 1;
  46              		.loc 1 322 0
  47 0012 0122     		movs	r2, #1
  48 0014 9A61     		str	r2, [r3, #24]
  49 0016 7047     		bx	lr
  50              	.L3:
  51              		.align	2
  52              	.L2:
  53 0018 00000000 		.word	hsd1
  54 001c 002C0140 		.word	1073818624
  55              		.cfi_endproc
  56              	.LFE146:
  58              		.section	.text.MX_GPIO_Init,"ax",%progbits
  59              		.align	1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-d16
  65              	MX_GPIO_Init:
  66              	.LFB149:
 323:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 2 */
 324:Src/main.c    **** 
 325:Src/main.c    ****   /* USER CODE END SDMMC1_Init 2 */
 326:Src/main.c    **** 
 327:Src/main.c    **** }
 328:Src/main.c    **** 
 329:Src/main.c    **** /**
 330:Src/main.c    ****   * @brief TIM2 Initialization Function
 331:Src/main.c    ****   * @param None
 332:Src/main.c    ****   * @retval None
 333:Src/main.c    ****   */
 334:Src/main.c    **** static void MX_TIM2_Init(void)
 335:Src/main.c    **** {
 336:Src/main.c    **** 
ARM GAS  /tmp/ccWFWrY3.s 			page 8


 337:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 338:Src/main.c    **** 
 339:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 340:Src/main.c    **** 
 341:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 342:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 343:Src/main.c    **** 
 344:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 347:Src/main.c    ****   htim2.Instance = TIM2;
 348:Src/main.c    ****   htim2.Init.Prescaler = 108;
 349:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 350:Src/main.c    ****   htim2.Init.Period = 1000;
 351:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 352:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 353:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 354:Src/main.c    ****   {
 355:Src/main.c    ****     Error_Handler();
 356:Src/main.c    ****   }
 357:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 358:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 359:Src/main.c    ****   {
 360:Src/main.c    ****     Error_Handler();
 361:Src/main.c    ****   }
 362:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 363:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 364:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 365:Src/main.c    ****   {
 366:Src/main.c    ****     Error_Handler();
 367:Src/main.c    ****   }
 368:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 369:Src/main.c    **** 
 370:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 371:Src/main.c    **** 
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** /**
 375:Src/main.c    ****   * @brief USART3 Initialization Function
 376:Src/main.c    ****   * @param None
 377:Src/main.c    ****   * @retval None
 378:Src/main.c    ****   */
 379:Src/main.c    **** static void MX_USART3_UART_Init(void)
 380:Src/main.c    **** {
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 383:Src/main.c    **** 
 384:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 385:Src/main.c    **** 
 386:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 389:Src/main.c    ****   huart3.Instance = USART3;
 390:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 391:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 392:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 393:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccWFWrY3.s 			page 9


 394:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 395:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 396:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 397:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 398:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 399:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 400:Src/main.c    ****   {
 401:Src/main.c    ****     Error_Handler();
 402:Src/main.c    ****   }
 403:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 404:Src/main.c    **** 
 405:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 406:Src/main.c    **** 
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /**
 410:Src/main.c    ****   * @brief GPIO Initialization Function
 411:Src/main.c    ****   * @param None
 412:Src/main.c    ****   * @retval None
 413:Src/main.c    ****   */
 414:Src/main.c    **** static void MX_GPIO_Init(void)
 415:Src/main.c    **** {
  67              		.loc 1 415 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 40
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 30B5     		push	{r4, r5, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 12
  74              		.cfi_offset 4, -12
  75              		.cfi_offset 5, -8
  76              		.cfi_offset 14, -4
  77 0002 8BB0     		sub	sp, sp, #44
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 56
 416:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  80              		.loc 1 416 0
  81 0004 0024     		movs	r4, #0
  82 0006 0594     		str	r4, [sp, #20]
  83 0008 0694     		str	r4, [sp, #24]
  84 000a 0794     		str	r4, [sp, #28]
  85 000c 0894     		str	r4, [sp, #32]
  86 000e 0994     		str	r4, [sp, #36]
  87              	.LBB2:
 417:Src/main.c    **** 
 418:Src/main.c    ****   /* GPIO Ports Clock Enable */
 419:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  88              		.loc 1 419 0
  89 0010 204B     		ldr	r3, .L6
  90 0012 1A6B     		ldr	r2, [r3, #48]
  91 0014 42F00102 		orr	r2, r2, #1
  92 0018 1A63     		str	r2, [r3, #48]
  93 001a 1A6B     		ldr	r2, [r3, #48]
  94 001c 02F00102 		and	r2, r2, #1
  95 0020 0192     		str	r2, [sp, #4]
  96 0022 019A     		ldr	r2, [sp, #4]
  97              	.LBE2:
ARM GAS  /tmp/ccWFWrY3.s 			page 10


  98              	.LBB3:
 420:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  99              		.loc 1 420 0
 100 0024 1A6B     		ldr	r2, [r3, #48]
 101 0026 42F00202 		orr	r2, r2, #2
 102 002a 1A63     		str	r2, [r3, #48]
 103 002c 1A6B     		ldr	r2, [r3, #48]
 104 002e 02F00202 		and	r2, r2, #2
 105 0032 0292     		str	r2, [sp, #8]
 106 0034 029A     		ldr	r2, [sp, #8]
 107              	.LBE3:
 108              	.LBB4:
 421:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 109              		.loc 1 421 0
 110 0036 1A6B     		ldr	r2, [r3, #48]
 111 0038 42F00802 		orr	r2, r2, #8
 112 003c 1A63     		str	r2, [r3, #48]
 113 003e 1A6B     		ldr	r2, [r3, #48]
 114 0040 02F00802 		and	r2, r2, #8
 115 0044 0392     		str	r2, [sp, #12]
 116 0046 039A     		ldr	r2, [sp, #12]
 117              	.LBE4:
 118              	.LBB5:
 422:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 119              		.loc 1 422 0
 120 0048 1A6B     		ldr	r2, [r3, #48]
 121 004a 42F00402 		orr	r2, r2, #4
 122 004e 1A63     		str	r2, [r3, #48]
 123 0050 1B6B     		ldr	r3, [r3, #48]
 124 0052 03F00403 		and	r3, r3, #4
 125 0056 0493     		str	r3, [sp, #16]
 126 0058 049B     		ldr	r3, [sp, #16]
 127              	.LBE5:
 423:Src/main.c    **** 
 424:Src/main.c    ****   /*Configure GPIO pin Output Level */
 425:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_green_Pin|LED_red_Pin|LED_blue_Pin, GPIO_PIN_RESET);
 128              		.loc 1 425 0
 129 005a 0F4D     		ldr	r5, .L6+4
 130 005c 2246     		mov	r2, r4
 131 005e 44F28101 		movw	r1, #16513
 132 0062 2846     		mov	r0, r5
 133 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 134              	.LVL0:
 426:Src/main.c    **** 
 427:Src/main.c    ****   /*Configure GPIO pin : SD_detect_Pin */
 428:Src/main.c    ****   GPIO_InitStruct.Pin = SD_detect_Pin;
 135              		.loc 1 428 0
 136 0068 2023     		movs	r3, #32
 137 006a 0593     		str	r3, [sp, #20]
 429:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 138              		.loc 1 429 0
 139 006c 0694     		str	r4, [sp, #24]
 430:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 140              		.loc 1 430 0
 141 006e 0794     		str	r4, [sp, #28]
 431:Src/main.c    ****   HAL_GPIO_Init(SD_detect_GPIO_Port, &GPIO_InitStruct);
 142              		.loc 1 431 0
ARM GAS  /tmp/ccWFWrY3.s 			page 11


 143 0070 05A9     		add	r1, sp, #20
 144 0072 0A48     		ldr	r0, .L6+8
 145 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL1:
 432:Src/main.c    **** 
 433:Src/main.c    ****   /*Configure GPIO pins : LED_green_Pin LED_red_Pin LED_blue_Pin */
 434:Src/main.c    ****   GPIO_InitStruct.Pin = LED_green_Pin|LED_red_Pin|LED_blue_Pin;
 147              		.loc 1 434 0
 148 0078 44F28103 		movw	r3, #16513
 149 007c 0593     		str	r3, [sp, #20]
 435:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 150              		.loc 1 435 0
 151 007e 0123     		movs	r3, #1
 152 0080 0693     		str	r3, [sp, #24]
 436:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 153              		.loc 1 436 0
 154 0082 0794     		str	r4, [sp, #28]
 437:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 155              		.loc 1 437 0
 156 0084 0894     		str	r4, [sp, #32]
 438:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 157              		.loc 1 438 0
 158 0086 05A9     		add	r1, sp, #20
 159 0088 2846     		mov	r0, r5
 160 008a FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL2:
 439:Src/main.c    **** 
 440:Src/main.c    **** }
 162              		.loc 1 440 0
 163 008e 0BB0     		add	sp, sp, #44
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 12
 166              		@ sp needed
 167 0090 30BD     		pop	{r4, r5, pc}
 168              	.L7:
 169 0092 00BF     		.align	2
 170              	.L6:
 171 0094 00380240 		.word	1073887232
 172 0098 00040240 		.word	1073873920
 173 009c 00000240 		.word	1073872896
 174              		.cfi_endproc
 175              	.LFE149:
 177              		.section	.text.MX_NVIC_Init,"ax",%progbits
 178              		.align	1
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv5-d16
 184              	MX_NVIC_Init:
 185              	.LFB144:
 240:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 186              		.loc 1 240 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 08B5     		push	{r3, lr}
 191              	.LCFI3:
ARM GAS  /tmp/ccWFWrY3.s 			page 12


 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 3, -8
 194              		.cfi_offset 14, -4
 242:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 195              		.loc 1 242 0
 196 0002 0022     		movs	r2, #0
 197 0004 1146     		mov	r1, r2
 198 0006 3120     		movs	r0, #49
 199 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 200              	.LVL3:
 243:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 201              		.loc 1 243 0
 202 000c 3120     		movs	r0, #49
 203 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 204              	.LVL4:
 245:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 205              		.loc 1 245 0
 206 0012 0022     		movs	r2, #0
 207 0014 1146     		mov	r1, r2
 208 0016 2720     		movs	r0, #39
 209 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 210              	.LVL5:
 246:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 211              		.loc 1 246 0
 212 001c 2720     		movs	r0, #39
 213 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 214              	.LVL6:
 248:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 215              		.loc 1 248 0
 216 0022 0022     		movs	r2, #0
 217 0024 1146     		mov	r1, r2
 218 0026 1620     		movs	r0, #22
 219 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL7:
 249:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 221              		.loc 1 249 0
 222 002c 1620     		movs	r0, #22
 223 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 224              	.LVL8:
 251:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 225              		.loc 1 251 0
 226 0032 0022     		movs	r2, #0
 227 0034 1146     		mov	r1, r2
 228 0036 1520     		movs	r0, #21
 229 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL9:
 252:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 231              		.loc 1 252 0
 232 003c 1520     		movs	r0, #21
 233 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL10:
 254:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 235              		.loc 1 254 0
 236 0042 0022     		movs	r2, #0
 237 0044 1146     		mov	r1, r2
 238 0046 1420     		movs	r0, #20
 239 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/ccWFWrY3.s 			page 13


 240              	.LVL11:
 255:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 241              		.loc 1 255 0
 242 004c 1420     		movs	r0, #20
 243 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL12:
 257:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 245              		.loc 1 257 0
 246 0052 0022     		movs	r2, #0
 247 0054 1146     		mov	r1, r2
 248 0056 1320     		movs	r0, #19
 249 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250              	.LVL13:
 258:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 251              		.loc 1 258 0
 252 005c 1320     		movs	r0, #19
 253 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254              	.LVL14:
 260:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
 255              		.loc 1 260 0
 256 0062 0022     		movs	r2, #0
 257 0064 1146     		mov	r1, r2
 258 0066 1C20     		movs	r0, #28
 259 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 260              	.LVL15:
 261:Src/main.c    **** }
 261              		.loc 1 261 0
 262 006c 1C20     		movs	r0, #28
 263 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 264              	.LVL16:
 265 0072 08BD     		pop	{r3, pc}
 266              		.cfi_endproc
 267              	.LFE144:
 269              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 270              		.align	1
 271              		.global	HAL_TIM_PeriodElapsedCallback
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv5-d16
 277              	HAL_TIM_PeriodElapsedCallback:
 278              	.LFB150:
 441:Src/main.c    **** 
 442:Src/main.c    **** /* USER CODE BEGIN 4 */
 443:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 279              		.loc 1 443 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL17:
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 444:Src/main.c    **** 	if(htim == &htim2){
 289              		.loc 1 444 0
ARM GAS  /tmp/ccWFWrY3.s 			page 14


 290 0002 334B     		ldr	r3, .L24
 291 0004 8342     		cmp	r3, r0
 292 0006 00D0     		beq	.L18
 293              	.LVL18:
 294              	.L10:
 295 0008 08BD     		pop	{r3, pc}
 296              	.LVL19:
 297              	.L18:
 445:Src/main.c    **** 		count_ms += 1;
 298              		.loc 1 445 0
 299 000a 324A     		ldr	r2, .L24+4
 300 000c 1388     		ldrh	r3, [r2]
 301 000e 0133     		adds	r3, r3, #1
 302 0010 9BB2     		uxth	r3, r3
 303 0012 1380     		strh	r3, [r2]	@ movhi
 446:Src/main.c    **** 		if(count_ms == 100){
 304              		.loc 1 446 0
 305 0014 642B     		cmp	r3, #100
 306 0016 F7D1     		bne	.L10
 447:Src/main.c    **** 			count_ms = 0;
 307              		.loc 1 447 0
 308 0018 0022     		movs	r2, #0
 309 001a 2E4B     		ldr	r3, .L24+4
 310 001c 1A80     		strh	r2, [r3]	@ movhi
 448:Src/main.c    **** 			count_dec++;
 311              		.loc 1 448 0
 312 001e 2E4A     		ldr	r2, .L24+8
 313 0020 1388     		ldrh	r3, [r2]
 314 0022 0133     		adds	r3, r3, #1
 315 0024 1380     		strh	r3, [r2]	@ movhi
 449:Src/main.c    **** 			//--- put your counter here (count each 0,1 sec) ---//
 450:Src/main.c    **** 			count_inverter++;
 316              		.loc 1 450 0
 317 0026 2D4B     		ldr	r3, .L24+12
 318 0028 1988     		ldrh	r1, [r3]
 319 002a 0131     		adds	r1, r1, #1
 320 002c 89B2     		uxth	r1, r1
 321 002e 1980     		strh	r1, [r3]	@ movhi
 451:Src/main.c    **** 			count_imu++;
 322              		.loc 1 451 0
 323 0030 2B4A     		ldr	r2, .L24+16
 324 0032 1388     		ldrh	r3, [r2]
 325 0034 0133     		adds	r3, r3, #1
 326 0036 9BB2     		uxth	r3, r3
 327 0038 1380     		strh	r3, [r2]	@ movhi
 452:Src/main.c    ****             count_atc++;
 328              		.loc 1 452 0
 329 003a 2A48     		ldr	r0, .L24+20
 330              	.LVL20:
 331 003c 0288     		ldrh	r2, [r0]
 332 003e 0132     		adds	r2, r2, #1
 333 0040 92B2     		uxth	r2, r2
 334 0042 0280     		strh	r2, [r0]	@ movhi
 453:Src/main.c    **** 			if(count_inverter == 10){ //--- check if inverter is connected ---//
 335              		.loc 1 453 0
 336 0044 0A29     		cmp	r1, #10
 337 0046 01D0     		beq	.L12
ARM GAS  /tmp/ccWFWrY3.s 			page 15


 454:Src/main.c    **** 				//TODO: to implement error functions
 455:Src/main.c    **** 			}else if(count_inverter == 11){
 338              		.loc 1 455 0
 339 0048 0B29     		cmp	r1, #11
 340 004a 27D0     		beq	.L19
 341              	.L12:
 456:Src/main.c    **** 				count_inverter = 10;
 457:Src/main.c    **** 			}
 458:Src/main.c    ****             if(count_atc == 10){ //--- check if Analog To Can is connected ---//
 342              		.loc 1 458 0
 343 004c 0A2A     		cmp	r2, #10
 344 004e 29D0     		beq	.L20
 459:Src/main.c    ****                 //TODO: to implement error functions
 460:Src/main.c    ****                 atc_connected = 0;
 461:Src/main.c    ****             }else if(count_atc == 11){
 345              		.loc 1 461 0
 346 0050 0B2A     		cmp	r2, #11
 347 0052 2BD0     		beq	.L21
 348              	.L14:
 462:Src/main.c    ****                 count_atc = 10;
 463:Src/main.c    ****             }
 464:Src/main.c    **** 			if(count_imu == 10){ //--- check if imu is connected ---//
 349              		.loc 1 464 0
 350 0054 0A2B     		cmp	r3, #10
 351 0056 2DD0     		beq	.L22
 465:Src/main.c    **** 				// imu non presente //
 466:Src/main.c    **** 				imu_connected = 0; //imu not connected
 467:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 10
 468:Src/main.c    **** 			}else if(count_imu == 11){
 352              		.loc 1 468 0
 353 0058 0B2B     		cmp	r3, #11
 354 005a 35D0     		beq	.L23
 355              	.L16:
 469:Src/main.c    **** 				count_imu = 10;
 470:Src/main.c    **** 			}
 471:Src/main.c    **** 			if(count_dec == 10){
 356              		.loc 1 471 0
 357 005c 1E4B     		ldr	r3, .L24+8
 358 005e 1B88     		ldrh	r3, [r3]
 359 0060 0A2B     		cmp	r3, #10
 360 0062 D1D1     		bne	.L10
 472:Src/main.c    **** 				count_dec = 0;
 361              		.loc 1 472 0
 362 0064 0022     		movs	r2, #0
 363 0066 1C4B     		ldr	r3, .L24+8
 364 0068 1A80     		strh	r2, [r3]	@ movhi
 473:Src/main.c    **** 				count_sec++;
 365              		.loc 1 473 0
 366 006a 1F4A     		ldr	r2, .L24+24
 367 006c 1388     		ldrh	r3, [r2]
 368 006e 0133     		adds	r3, r3, #1
 369 0070 9BB2     		uxth	r3, r3
 370 0072 1380     		strh	r3, [r2]	@ movhi
 474:Src/main.c    **** 				if(count_sec == 60){
 371              		.loc 1 474 0
 372 0074 3C2B     		cmp	r3, #60
 373 0076 C7D1     		bne	.L10
ARM GAS  /tmp/ccWFWrY3.s 			page 16


 475:Src/main.c    **** 					count_sec = 0;
 374              		.loc 1 475 0
 375 0078 0022     		movs	r2, #0
 376 007a 1B4B     		ldr	r3, .L24+24
 377 007c 1A80     		strh	r2, [r3]	@ movhi
 476:Src/main.c    **** 					count_min++;
 378              		.loc 1 476 0
 379 007e 1B4A     		ldr	r2, .L24+28
 380 0080 1388     		ldrh	r3, [r2]
 381 0082 0133     		adds	r3, r3, #1
 382 0084 9BB2     		uxth	r3, r3
 383 0086 1380     		strh	r3, [r2]	@ movhi
 477:Src/main.c    **** 					if(count_min == 60){
 384              		.loc 1 477 0
 385 0088 3C2B     		cmp	r3, #60
 386 008a BDD1     		bne	.L10
 478:Src/main.c    **** 						count_min = 0;
 387              		.loc 1 478 0
 388 008c 0022     		movs	r2, #0
 389 008e 174B     		ldr	r3, .L24+28
 390 0090 1A80     		strh	r2, [r3]	@ movhi
 479:Src/main.c    **** 						count_hour++;
 391              		.loc 1 479 0
 392 0092 174A     		ldr	r2, .L24+32
 393 0094 1388     		ldrh	r3, [r2]
 394 0096 0133     		adds	r3, r3, #1
 395 0098 1380     		strh	r3, [r2]	@ movhi
 480:Src/main.c    **** 					}
 481:Src/main.c    **** 				}
 482:Src/main.c    **** 			}
 483:Src/main.c    **** 		}
 484:Src/main.c    **** 	}
 485:Src/main.c    **** }
 396              		.loc 1 485 0
 397 009a B5E7     		b	.L10
 398              	.L19:
 456:Src/main.c    **** 			}
 399              		.loc 1 456 0
 400 009c 0A20     		movs	r0, #10
 401 009e 0F49     		ldr	r1, .L24+12
 402 00a0 0880     		strh	r0, [r1]	@ movhi
 403 00a2 D3E7     		b	.L12
 404              	.L20:
 460:Src/main.c    ****             }else if(count_atc == 11){
 405              		.loc 1 460 0
 406 00a4 0021     		movs	r1, #0
 407 00a6 134A     		ldr	r2, .L24+36
 408 00a8 1170     		strb	r1, [r2]
 409 00aa D3E7     		b	.L14
 410              	.L21:
 462:Src/main.c    ****             }
 411              		.loc 1 462 0
 412 00ac 0A21     		movs	r1, #10
 413 00ae 0D4A     		ldr	r2, .L24+20
 414 00b0 1180     		strh	r1, [r2]	@ movhi
 415 00b2 CFE7     		b	.L14
 416              	.L22:
ARM GAS  /tmp/ccWFWrY3.s 			page 17


 466:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 10
 417              		.loc 1 466 0
 418 00b4 0022     		movs	r2, #0
 419 00b6 104B     		ldr	r3, .L24+40
 420 00b8 1A70     		strb	r2, [r3]
 467:Src/main.c    **** 			}else if(count_imu == 11){
 421              		.loc 1 467 0
 422 00ba 0A23     		movs	r3, #10
 423 00bc 1222     		movs	r2, #18
 424 00be 0F49     		ldr	r1, .L24+44
 425 00c0 0F48     		ldr	r0, .L24+48
 426 00c2 FFF7FEFF 		bl	HAL_UART_Transmit
 427              	.LVL21:
 428 00c6 C9E7     		b	.L16
 429              	.L23:
 469:Src/main.c    **** 			}
 430              		.loc 1 469 0
 431 00c8 0A22     		movs	r2, #10
 432 00ca 054B     		ldr	r3, .L24+16
 433 00cc 1A80     		strh	r2, [r3]	@ movhi
 434 00ce C5E7     		b	.L16
 435              	.L25:
 436              		.align	2
 437              	.L24:
 438 00d0 00000000 		.word	htim2
 439 00d4 00000000 		.word	count_ms
 440 00d8 00000000 		.word	count_dec
 441 00dc 00000000 		.word	count_inverter
 442 00e0 00000000 		.word	count_imu
 443 00e4 00000000 		.word	count_atc
 444 00e8 00000000 		.word	count_sec
 445 00ec 00000000 		.word	count_min
 446 00f0 00000000 		.word	count_hour
 447 00f4 00000000 		.word	atc_connected
 448 00f8 00000000 		.word	imu_connected
 449 00fc 00000000 		.word	.LC0
 450 0100 00000000 		.word	huart3
 451              		.cfi_endproc
 452              	.LFE150:
 454              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 455              		.align	1
 456              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 457              		.syntax unified
 458              		.thumb
 459              		.thumb_func
 460              		.fpu fpv5-d16
 462              	HAL_CAN_RxFifo0MsgPendingCallback:
 463              	.LFB151:
 486:Src/main.c    **** 
 487:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 464              		.loc 1 487 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 32
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              	.LVL22:
 469 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 470              	.LCFI5:
ARM GAS  /tmp/ccWFWrY3.s 			page 18


 471              		.cfi_def_cfa_offset 20
 472              		.cfi_offset 4, -20
 473              		.cfi_offset 5, -16
 474              		.cfi_offset 6, -12
 475              		.cfi_offset 7, -8
 476              		.cfi_offset 14, -4
 477 0002 8FB0     		sub	sp, sp, #60
 478              	.LCFI6:
 479              		.cfi_def_cfa_offset 80
 480 0004 0446     		mov	r4, r0
 488:Src/main.c    **** 	/*sprintf(txt, "%d\r\n", HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 489:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 490:Src/main.c    **** 
 491:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 481              		.loc 1 491 0
 482 0006 8021     		movs	r1, #128
 483 0008 1E48     		ldr	r0, .L30
 484              	.LVL23:
 485 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 486              	.LVL24:
 492:Src/main.c    **** 	if (hcan == &hcan1){
 487              		.loc 1 492 0
 488 000e 1E4B     		ldr	r3, .L30+4
 489 0010 9C42     		cmp	r4, r3
 490 0012 01D0     		beq	.L29
 491              	.LVL25:
 492              	.L26:
 493:Src/main.c    **** 		//HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO0\r\n", strlen("rx on FIFO0\r\n"), 10);
 494:Src/main.c    **** 		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 495:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 496:Src/main.c    **** 			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &header, can1.dataRx);
 497:Src/main.c    **** 			can1.rx_id = header.StdId;
 498:Src/main.c    **** 			can1.rx_size = header.DLC;
 499:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 500:Src/main.c    **** 			sprintf(txt,"DATA: %d %d %d %d %d %d %d %d\r\n",can1.dataRx[0],can1.dataRx[1],can1.dataRx[2],can
 501:Src/main.c    **** 			HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 100);
 502:Src/main.c    **** 			//HAL_UART_Transmit(&huart3, (uint8_t*)"ciao2\r\n", strlen("ciao2\r\n"), 10);
 503:Src/main.c    **** 
 504:Src/main.c    **** 
 505:Src/main.c    **** 		}
 506:Src/main.c    **** 	}
 507:Src/main.c    **** }
 493              		.loc 1 507 0
 494 0014 0FB0     		add	sp, sp, #60
 495              	.LCFI7:
 496              		.cfi_remember_state
 497              		.cfi_def_cfa_offset 20
 498              		@ sp needed
 499 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 500              	.LVL26:
 501              	.L29:
 502              	.LCFI8:
 503              		.cfi_restore_state
 494:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 504              		.loc 1 494 0
 505 0018 0021     		movs	r1, #0
 506 001a 1846     		mov	r0, r3
ARM GAS  /tmp/ccWFWrY3.s 			page 19


 507 001c FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 508              	.LVL27:
 509 0020 0028     		cmp	r0, #0
 510 0022 F7D0     		beq	.L26
 511              	.LBB6:
 496:Src/main.c    **** 			can1.rx_id = header.StdId;
 512              		.loc 1 496 0
 513 0024 194C     		ldr	r4, .L30+8
 514              	.LVL28:
 515 0026 2346     		mov	r3, r4
 516 0028 07AA     		add	r2, sp, #28
 517 002a 0021     		movs	r1, #0
 518 002c 1648     		ldr	r0, .L30+4
 519 002e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 520              	.LVL29:
 497:Src/main.c    **** 			can1.rx_size = header.DLC;
 521              		.loc 1 497 0
 522 0032 079B     		ldr	r3, [sp, #28]
 523 0034 6361     		str	r3, [r4, #20]
 498:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 524              		.loc 1 498 0
 525 0036 0B9B     		ldr	r3, [sp, #44]
 526 0038 44F80C3C 		str	r3, [r4, #-12]
 497:Src/main.c    **** 			can1.rx_size = header.DLC;
 527              		.loc 1 497 0
 528 003c 103C     		subs	r4, r4, #16
 499:Src/main.c    **** 			sprintf(txt,"DATA: %d %d %d %d %d %d %d %d\r\n",can1.dataRx[0],can1.dataRx[1],can1.dataRx[2],can
 529              		.loc 1 499 0
 530 003e 2046     		mov	r0, r4
 531 0040 FFF7FEFF 		bl	fifoRxDataCAN_push
 532              	.LVL30:
 500:Src/main.c    **** 			HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 100);
 533              		.loc 1 500 0
 534 0044 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 535 0046 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 536 0048 A17C     		ldrb	r1, [r4, #18]	@ zero_extendqisi2
 537 004a E07C     		ldrb	r0, [r4, #19]	@ zero_extendqisi2
 538 004c 257D     		ldrb	r5, [r4, #20]	@ zero_extendqisi2
 539 004e 667D     		ldrb	r6, [r4, #21]	@ zero_extendqisi2
 540 0050 A77D     		ldrb	r7, [r4, #22]	@ zero_extendqisi2
 541 0052 94F817E0 		ldrb	lr, [r4, #23]	@ zero_extendqisi2
 542 0056 0E4C     		ldr	r4, .L30+12
 543 0058 CDF814E0 		str	lr, [sp, #20]
 544 005c 0497     		str	r7, [sp, #16]
 545 005e 0396     		str	r6, [sp, #12]
 546 0060 0295     		str	r5, [sp, #8]
 547 0062 0190     		str	r0, [sp, #4]
 548 0064 0091     		str	r1, [sp]
 549 0066 0B49     		ldr	r1, .L30+16
 550 0068 2046     		mov	r0, r4
 551 006a FFF7FEFF 		bl	sprintf
 552              	.LVL31:
 501:Src/main.c    **** 			//HAL_UART_Transmit(&huart3, (uint8_t*)"ciao2\r\n", strlen("ciao2\r\n"), 10);
 553              		.loc 1 501 0
 554 006e 2046     		mov	r0, r4
 555 0070 FFF7FEFF 		bl	strlen
 556              	.LVL32:
ARM GAS  /tmp/ccWFWrY3.s 			page 20


 557 0074 6423     		movs	r3, #100
 558 0076 82B2     		uxth	r2, r0
 559 0078 2146     		mov	r1, r4
 560 007a 0748     		ldr	r0, .L30+20
 561 007c FFF7FEFF 		bl	HAL_UART_Transmit
 562              	.LVL33:
 563              	.LBE6:
 564              		.loc 1 507 0
 565 0080 C8E7     		b	.L26
 566              	.L31:
 567 0082 00BF     		.align	2
 568              	.L30:
 569 0084 00040240 		.word	1073873920
 570 0088 00000000 		.word	hcan1
 571 008c 10000000 		.word	can1+16
 572 0090 00000000 		.word	txt
 573 0094 00000000 		.word	.LC1
 574 0098 00000000 		.word	huart3
 575              		.cfi_endproc
 576              	.LFE151:
 578              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 579              		.align	1
 580              		.global	HAL_CAN_RxFifo1MsgPendingCallback
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 584              		.fpu fpv5-d16
 586              	HAL_CAN_RxFifo1MsgPendingCallback:
 587              	.LFB152:
 508:Src/main.c    **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 588              		.loc 1 508 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              	.LVL34:
 593 0000 08B5     		push	{r3, lr}
 594              	.LCFI9:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 3, -8
 597              		.cfi_offset 14, -4
 509:Src/main.c    **** 	if (hcan == &hcan1){
 598              		.loc 1 509 0
 599 0002 054B     		ldr	r3, .L36
 600 0004 8342     		cmp	r3, r0
 601 0006 00D0     		beq	.L35
 602              	.LVL35:
 603              	.L32:
 604 0008 08BD     		pop	{r3, pc}
 605              	.LVL36:
 606              	.L35:
 510:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO1\r\n", strlen("rx on FIFO1\r\n"), 10);
 607              		.loc 1 510 0
 608 000a 0A23     		movs	r3, #10
 609 000c 0D22     		movs	r2, #13
 610 000e 0349     		ldr	r1, .L36+4
 611 0010 0348     		ldr	r0, .L36+8
 612              	.LVL37:
ARM GAS  /tmp/ccWFWrY3.s 			page 21


 613 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 614              	.LVL38:
 511:Src/main.c    **** 	}
 512:Src/main.c    **** }
 615              		.loc 1 512 0
 616 0016 F7E7     		b	.L32
 617              	.L37:
 618              		.align	2
 619              	.L36:
 620 0018 00000000 		.word	hcan1
 621 001c 00000000 		.word	.LC2
 622 0020 00000000 		.word	huart3
 623              		.cfi_endproc
 624              	.LFE152:
 626              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 627              		.align	1
 628              		.global	HAL_CAN_RxFifo0FullCallback
 629              		.syntax unified
 630              		.thumb
 631              		.thumb_func
 632              		.fpu fpv5-d16
 634              	HAL_CAN_RxFifo0FullCallback:
 635              	.LFB153:
 513:Src/main.c    **** 
 514:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 636              		.loc 1 514 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              	.LVL39:
 641 0000 08B5     		push	{r3, lr}
 642              	.LCFI10:
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 3, -8
 645              		.cfi_offset 14, -4
 515:Src/main.c    **** 	if (hcan == &hcan1){
 646              		.loc 1 515 0
 647 0002 054B     		ldr	r3, .L42
 648 0004 8342     		cmp	r3, r0
 649 0006 00D0     		beq	.L41
 650              	.LVL40:
 651              	.L38:
 652 0008 08BD     		pop	{r3, pc}
 653              	.LVL41:
 654              	.L41:
 516:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO0 FULL\r\n", strlen("FIFO0 FULL\r\n"), 10);
 655              		.loc 1 516 0
 656 000a 0A23     		movs	r3, #10
 657 000c 0C22     		movs	r2, #12
 658 000e 0349     		ldr	r1, .L42+4
 659 0010 0348     		ldr	r0, .L42+8
 660              	.LVL42:
 661 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 662              	.LVL43:
 517:Src/main.c    **** 	}
 518:Src/main.c    **** }
 663              		.loc 1 518 0
ARM GAS  /tmp/ccWFWrY3.s 			page 22


 664 0016 F7E7     		b	.L38
 665              	.L43:
 666              		.align	2
 667              	.L42:
 668 0018 00000000 		.word	hcan1
 669 001c 00000000 		.word	.LC3
 670 0020 00000000 		.word	huart3
 671              		.cfi_endproc
 672              	.LFE153:
 674              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 675              		.align	1
 676              		.global	HAL_CAN_RxFifo1FullCallback
 677              		.syntax unified
 678              		.thumb
 679              		.thumb_func
 680              		.fpu fpv5-d16
 682              	HAL_CAN_RxFifo1FullCallback:
 683              	.LFB154:
 519:Src/main.c    **** void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan){
 684              		.loc 1 519 0
 685              		.cfi_startproc
 686              		@ args = 0, pretend = 0, frame = 0
 687              		@ frame_needed = 0, uses_anonymous_args = 0
 688              	.LVL44:
 689 0000 08B5     		push	{r3, lr}
 690              	.LCFI11:
 691              		.cfi_def_cfa_offset 8
 692              		.cfi_offset 3, -8
 693              		.cfi_offset 14, -4
 520:Src/main.c    **** 	if (hcan == &hcan1){
 694              		.loc 1 520 0
 695 0002 054B     		ldr	r3, .L48
 696 0004 8342     		cmp	r3, r0
 697 0006 00D0     		beq	.L47
 698              	.LVL45:
 699              	.L44:
 700 0008 08BD     		pop	{r3, pc}
 701              	.LVL46:
 702              	.L47:
 521:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO1 FULL\r\n", strlen("FIFO1 FULL\r\n"), 10);
 703              		.loc 1 521 0
 704 000a 0A23     		movs	r3, #10
 705 000c 0C22     		movs	r2, #12
 706 000e 0349     		ldr	r1, .L48+4
 707 0010 0348     		ldr	r0, .L48+8
 708              	.LVL47:
 709 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 710              	.LVL48:
 522:Src/main.c    **** 	}
 523:Src/main.c    **** }
 711              		.loc 1 523 0
 712 0016 F7E7     		b	.L44
 713              	.L49:
 714              		.align	2
 715              	.L48:
 716 0018 00000000 		.word	hcan1
 717 001c 00000000 		.word	.LC4
ARM GAS  /tmp/ccWFWrY3.s 			page 23


 718 0020 00000000 		.word	huart3
 719              		.cfi_endproc
 720              	.LFE154:
 722              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 723              		.align	1
 724              		.global	HAL_CAN_TxMailbox0CompleteCallback
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv5-d16
 730              	HAL_CAN_TxMailbox0CompleteCallback:
 731              	.LFB155:
 524:Src/main.c    **** 
 525:Src/main.c    **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 732              		.loc 1 525 0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 0
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736              	.LVL49:
 737 0000 38B5     		push	{r3, r4, r5, lr}
 738              	.LCFI12:
 739              		.cfi_def_cfa_offset 16
 740              		.cfi_offset 3, -16
 741              		.cfi_offset 4, -12
 742              		.cfi_offset 5, -8
 743              		.cfi_offset 14, -4
 744 0002 0546     		mov	r5, r0
 526:Src/main.c    **** 	sprintf(txt,"mb0: %d\r\n", (int)can1.idBck);
 745              		.loc 1 526 0
 746 0004 184C     		ldr	r4, .L55
 747 0006 194B     		ldr	r3, .L55+4
 748 0008 9A6A     		ldr	r2, [r3, #40]
 749 000a 1949     		ldr	r1, .L55+8
 750 000c 2046     		mov	r0, r4
 751              	.LVL50:
 752 000e FFF7FEFF 		bl	sprintf
 753              	.LVL51:
 527:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 754              		.loc 1 527 0
 755 0012 2046     		mov	r0, r4
 756 0014 FFF7FEFF 		bl	strlen
 757              	.LVL52:
 758 0018 0A23     		movs	r3, #10
 759 001a 82B2     		uxth	r2, r0
 760 001c 2146     		mov	r1, r4
 761 001e 1548     		ldr	r0, .L55+12
 762 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 763              	.LVL53:
 528:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 764              		.loc 1 528 0
 765 0024 0121     		movs	r1, #1
 766 0026 1448     		ldr	r0, .L55+16
 767 0028 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 768              	.LVL54:
 529:Src/main.c    **** 	if(hcan == &hcan1){
 769              		.loc 1 529 0
 770 002c 134B     		ldr	r3, .L55+20
ARM GAS  /tmp/ccWFWrY3.s 			page 24


 771 002e 9D42     		cmp	r5, r3
 772 0030 00D0     		beq	.L54
 773              	.L50:
 774 0032 38BD     		pop	{r3, r4, r5, pc}
 775              	.LVL55:
 776              	.L54:
 530:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 777              		.loc 1 530 0
 778 0034 0D48     		ldr	r0, .L55+4
 779 0036 FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 780              	.LVL56:
 781 003a 58B1     		cbz	r0, .L52
 531:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 782              		.loc 1 531 0
 783 003c 0B48     		ldr	r0, .L55+4
 784 003e FFF7FEFF 		bl	CAN_Send_IT
 785              	.LVL57:
 786 0042 0028     		cmp	r0, #0
 787 0044 F5D0     		beq	.L50
 532:Src/main.c    **** 				//TODO: implementare errore
 533:Src/main.c    **** 			}else{
 534:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 788              		.loc 1 534 0
 789 0046 0A23     		movs	r3, #10
 790 0048 0622     		movs	r2, #6
 791 004a 0D49     		ldr	r1, .L55+24
 792 004c 0948     		ldr	r0, .L55+12
 793 004e FFF7FEFF 		bl	HAL_UART_Transmit
 794              	.LVL58:
 795 0052 38BD     		pop	{r3, r4, r5, pc}
 796              	.LVL59:
 797              	.L52:
 535:Src/main.c    **** 			}
 536:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 798              		.loc 1 536 0
 799 0054 0548     		ldr	r0, .L55+4
 800 0056 FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 801              	.LVL60:
 802 005a 0028     		cmp	r0, #0
 803 005c E9D0     		beq	.L50
 537:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 538:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 804              		.loc 1 538 0
 805 005e 0348     		ldr	r0, .L55+4
 806 0060 FFF7FEFF 		bl	CAN_Send_IT
 807              	.LVL61:
 539:Src/main.c    **** 				//TODO: implementare errore
 540:Src/main.c    **** 			}
 541:Src/main.c    **** 		}else{
 542:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 543:Src/main.c    **** 		}
 544:Src/main.c    **** 	}/*else{
 545:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)("Messaggio trasmesso\r\n"), strlen("Messaggio trasmesso\r\n")
 546:Src/main.c    **** 		//HAL_GPIO_TogglePin(USER_LED_4_GPIO_Port, USER_LED_4_Pin);
 547:Src/main.c    **** 		fifoDataType fifodata;
 548:Src/main.c    **** 		if(fifoTxDataCAN3_high_pop(&fifoCAN3, &fifodata)){
 549:Src/main.c    **** 			for(int i = 0; i < 8; i++){
ARM GAS  /tmp/ccWFWrY3.s 			page 25


 550:Src/main.c    **** 				can3.dataTx[i] = fifodata.data[i];
 551:Src/main.c    **** 			}
 552:Src/main.c    **** 			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 553:Src/main.c    **** 				//TODO: implementare errore
 554:Src/main.c    **** 			}
 555:Src/main.c    **** 		}else if(fifoTxDataCAN3_normal_pop(&fifoCAN3, &fifodata)){
 556:Src/main.c    **** 			HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n"), 
 557:Src/main.c    **** 			for(int i = 0; i < 8; i++){
 558:Src/main.c    **** 				can3.dataTx[i] = fifodata.data[i];
 559:Src/main.c    **** 			}
 560:Src/main.c    **** 			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 561:Src/main.c    **** 				//TODO: implementare errore
 562:Src/main.c    **** 			}
 563:Src/main.c    **** 		}else{
 564:Src/main.c    **** 			//TODO: riattivare interrupt
 565:Src/main.c    **** 			HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 566:Src/main.c    **** 		}*/
 567:Src/main.c    **** 	//}
 568:Src/main.c    **** }
 808              		.loc 1 568 0
 809 0064 E5E7     		b	.L50
 810              	.L56:
 811 0066 00BF     		.align	2
 812              	.L55:
 813 0068 00000000 		.word	txt
 814 006c 00000000 		.word	can1
 815 0070 00000000 		.word	.LC5
 816 0074 00000000 		.word	huart3
 817 0078 00040240 		.word	1073873920
 818 007c 00000000 		.word	hcan1
 819 0080 0C000000 		.word	.LC6
 820              		.cfi_endproc
 821              	.LFE155:
 823              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 824              		.align	1
 825              		.global	HAL_CAN_TxMailbox1CompleteCallback
 826              		.syntax unified
 827              		.thumb
 828              		.thumb_func
 829              		.fpu fpv5-d16
 831              	HAL_CAN_TxMailbox1CompleteCallback:
 832              	.LFB156:
 569:Src/main.c    **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 833              		.loc 1 569 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 0
 836              		@ frame_needed = 0, uses_anonymous_args = 0
 837              	.LVL62:
 838 0000 38B5     		push	{r3, r4, r5, lr}
 839              	.LCFI13:
 840              		.cfi_def_cfa_offset 16
 841              		.cfi_offset 3, -16
 842              		.cfi_offset 4, -12
 843              		.cfi_offset 5, -8
 844              		.cfi_offset 14, -4
 845 0002 0546     		mov	r5, r0
 570:Src/main.c    **** 	sprintf(txt,"mb1: %d %d\r\n" ,can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
ARM GAS  /tmp/ccWFWrY3.s 			page 26


 846              		.loc 1 570 0
 847 0004 194A     		ldr	r2, .L62
 848 0006 1A4C     		ldr	r4, .L62+4
 849 0008 92F86230 		ldrb	r3, [r2, #98]	@ zero_extendqisi2
 850 000c 92F86320 		ldrb	r2, [r2, #99]	@ zero_extendqisi2
 851 0010 1849     		ldr	r1, .L62+8
 852 0012 2046     		mov	r0, r4
 853              	.LVL63:
 854 0014 FFF7FEFF 		bl	sprintf
 855              	.LVL64:
 571:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 856              		.loc 1 571 0
 857 0018 2046     		mov	r0, r4
 858 001a FFF7FEFF 		bl	strlen
 859              	.LVL65:
 860 001e 0A23     		movs	r3, #10
 861 0020 82B2     		uxth	r2, r0
 862 0022 2146     		mov	r1, r4
 863 0024 1448     		ldr	r0, .L62+12
 864 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 865              	.LVL66:
 572:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 866              		.loc 1 572 0
 867 002a 0121     		movs	r1, #1
 868 002c 1348     		ldr	r0, .L62+16
 869 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 870              	.LVL67:
 573:Src/main.c    **** 	if(hcan == &hcan1){
 871              		.loc 1 573 0
 872 0032 134B     		ldr	r3, .L62+20
 873 0034 9D42     		cmp	r5, r3
 874 0036 00D0     		beq	.L61
 875              	.L57:
 876 0038 38BD     		pop	{r3, r4, r5, pc}
 877              	.LVL68:
 878              	.L61:
 574:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 879              		.loc 1 574 0
 880 003a 0C48     		ldr	r0, .L62
 881 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 882              	.LVL69:
 883 0040 58B1     		cbz	r0, .L59
 575:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 884              		.loc 1 575 0
 885 0042 0A48     		ldr	r0, .L62
 886 0044 FFF7FEFF 		bl	CAN_Send_IT
 887              	.LVL70:
 888 0048 0028     		cmp	r0, #0
 889 004a F5D0     		beq	.L57
 576:Src/main.c    **** 				//TODO: implementare errore
 577:Src/main.c    **** 			}else{
 578:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 890              		.loc 1 578 0
 891 004c 0A23     		movs	r3, #10
 892 004e 0622     		movs	r2, #6
 893 0050 0C49     		ldr	r1, .L62+24
 894 0052 0948     		ldr	r0, .L62+12
ARM GAS  /tmp/ccWFWrY3.s 			page 27


 895 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 896              	.LVL71:
 897 0058 38BD     		pop	{r3, r4, r5, pc}
 898              	.LVL72:
 899              	.L59:
 579:Src/main.c    **** 			}
 580:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 900              		.loc 1 580 0
 901 005a 0448     		ldr	r0, .L62
 902 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 903              	.LVL73:
 904 0060 0028     		cmp	r0, #0
 905 0062 E9D0     		beq	.L57
 581:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 582:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 906              		.loc 1 582 0
 907 0064 0148     		ldr	r0, .L62
 908 0066 FFF7FEFF 		bl	CAN_Send_IT
 909              	.LVL74:
 583:Src/main.c    **** 				//TODO: implementare errore
 584:Src/main.c    **** 			}
 585:Src/main.c    **** 		}else{
 586:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 587:Src/main.c    **** 		}
 588:Src/main.c    **** 	}
 589:Src/main.c    **** }
 910              		.loc 1 589 0
 911 006a E5E7     		b	.L57
 912              	.L63:
 913              		.align	2
 914              	.L62:
 915 006c 00000000 		.word	can1
 916 0070 00000000 		.word	txt
 917 0074 00000000 		.word	.LC7
 918 0078 00000000 		.word	huart3
 919 007c 00040240 		.word	1073873920
 920 0080 00000000 		.word	hcan1
 921 0084 0C000000 		.word	.LC6
 922              		.cfi_endproc
 923              	.LFE156:
 925              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 926              		.align	1
 927              		.global	HAL_CAN_TxMailbox2CompleteCallback
 928              		.syntax unified
 929              		.thumb
 930              		.thumb_func
 931              		.fpu fpv5-d16
 933              	HAL_CAN_TxMailbox2CompleteCallback:
 934              	.LFB157:
 590:Src/main.c    **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 935              		.loc 1 590 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 0
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              	.LVL75:
 940 0000 38B5     		push	{r3, r4, r5, lr}
 941              	.LCFI14:
ARM GAS  /tmp/ccWFWrY3.s 			page 28


 942              		.cfi_def_cfa_offset 16
 943              		.cfi_offset 3, -16
 944              		.cfi_offset 4, -12
 945              		.cfi_offset 5, -8
 946              		.cfi_offset 14, -4
 947 0002 0546     		mov	r5, r0
 591:Src/main.c    **** 	sprintf(txt,"mb2: %d %d\r\n", can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
 948              		.loc 1 591 0
 949 0004 194A     		ldr	r2, .L69
 950 0006 1A4C     		ldr	r4, .L69+4
 951 0008 92F86230 		ldrb	r3, [r2, #98]	@ zero_extendqisi2
 952 000c 92F86320 		ldrb	r2, [r2, #99]	@ zero_extendqisi2
 953 0010 1849     		ldr	r1, .L69+8
 954 0012 2046     		mov	r0, r4
 955              	.LVL76:
 956 0014 FFF7FEFF 		bl	sprintf
 957              	.LVL77:
 592:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 958              		.loc 1 592 0
 959 0018 2046     		mov	r0, r4
 960 001a FFF7FEFF 		bl	strlen
 961              	.LVL78:
 962 001e 0A23     		movs	r3, #10
 963 0020 82B2     		uxth	r2, r0
 964 0022 2146     		mov	r1, r4
 965 0024 1448     		ldr	r0, .L69+12
 966 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 967              	.LVL79:
 593:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 968              		.loc 1 593 0
 969 002a 0121     		movs	r1, #1
 970 002c 1348     		ldr	r0, .L69+16
 971 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 972              	.LVL80:
 594:Src/main.c    **** 	if(hcan == &hcan1){
 973              		.loc 1 594 0
 974 0032 134B     		ldr	r3, .L69+20
 975 0034 9D42     		cmp	r5, r3
 976 0036 00D0     		beq	.L68
 977              	.L64:
 978 0038 38BD     		pop	{r3, r4, r5, pc}
 979              	.LVL81:
 980              	.L68:
 595:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 981              		.loc 1 595 0
 982 003a 0C48     		ldr	r0, .L69
 983 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 984              	.LVL82:
 985 0040 58B1     		cbz	r0, .L66
 596:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 986              		.loc 1 596 0
 987 0042 0A48     		ldr	r0, .L69
 988 0044 FFF7FEFF 		bl	CAN_Send_IT
 989              	.LVL83:
 990 0048 0028     		cmp	r0, #0
 991 004a F5D0     		beq	.L64
 597:Src/main.c    **** 				//TODO: implementare errore
ARM GAS  /tmp/ccWFWrY3.s 			page 29


 598:Src/main.c    **** 			}else{
 599:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 992              		.loc 1 599 0
 993 004c 0A23     		movs	r3, #10
 994 004e 0622     		movs	r2, #6
 995 0050 0C49     		ldr	r1, .L69+24
 996 0052 0948     		ldr	r0, .L69+12
 997 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 998              	.LVL84:
 999 0058 38BD     		pop	{r3, r4, r5, pc}
 1000              	.LVL85:
 1001              	.L66:
 600:Src/main.c    **** 			}
 601:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 1002              		.loc 1 601 0
 1003 005a 0448     		ldr	r0, .L69
 1004 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 1005              	.LVL86:
 1006 0060 0028     		cmp	r0, #0
 1007 0062 E9D0     		beq	.L64
 602:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 603:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 1008              		.loc 1 603 0
 1009 0064 0148     		ldr	r0, .L69
 1010 0066 FFF7FEFF 		bl	CAN_Send_IT
 1011              	.LVL87:
 604:Src/main.c    **** 				//TODO: implementare errore
 605:Src/main.c    **** 			}
 606:Src/main.c    **** 		}else{
 607:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 608:Src/main.c    **** 		}
 609:Src/main.c    **** 	}
 610:Src/main.c    **** }
 1012              		.loc 1 610 0
 1013 006a E5E7     		b	.L64
 1014              	.L70:
 1015              		.align	2
 1016              	.L69:
 1017 006c 00000000 		.word	can1
 1018 0070 00000000 		.word	txt
 1019 0074 00000000 		.word	.LC8
 1020 0078 00000000 		.word	huart3
 1021 007c 00040240 		.word	1073873920
 1022 0080 00000000 		.word	hcan1
 1023 0084 0C000000 		.word	.LC6
 1024              		.cfi_endproc
 1025              	.LFE157:
 1027              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1028              		.align	1
 1029              		.global	HAL_CAN_ErrorCallback
 1030              		.syntax unified
 1031              		.thumb
 1032              		.thumb_func
 1033              		.fpu fpv5-d16
 1035              	HAL_CAN_ErrorCallback:
 1036              	.LFB158:
 611:Src/main.c    **** void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
ARM GAS  /tmp/ccWFWrY3.s 			page 30


 1037              		.loc 1 611 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 0
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 1041              	.LVL88:
 1042 0000 38B5     		push	{r3, r4, r5, lr}
 1043              	.LCFI15:
 1044              		.cfi_def_cfa_offset 16
 1045              		.cfi_offset 3, -16
 1046              		.cfi_offset 4, -12
 1047              		.cfi_offset 5, -8
 1048              		.cfi_offset 14, -4
 1049 0002 0546     		mov	r5, r0
 612:Src/main.c    **** 	sprintf(txt,"--- Errore ---: %d\r\n",(int)hcan->ErrorCode);
 1050              		.loc 1 612 0
 1051 0004 426A     		ldr	r2, [r0, #36]
 1052 0006 0B4C     		ldr	r4, .L75
 1053 0008 0B49     		ldr	r1, .L75+4
 1054 000a 2046     		mov	r0, r4
 1055              	.LVL89:
 1056 000c FFF7FEFF 		bl	sprintf
 1057              	.LVL90:
 613:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 1058              		.loc 1 613 0
 1059 0010 2046     		mov	r0, r4
 1060 0012 FFF7FEFF 		bl	strlen
 1061              	.LVL91:
 1062 0016 0A23     		movs	r3, #10
 1063 0018 82B2     		uxth	r2, r0
 1064 001a 2146     		mov	r1, r4
 1065 001c 0748     		ldr	r0, .L75+8
 1066 001e FFF7FEFF 		bl	HAL_UART_Transmit
 1067              	.LVL92:
 614:Src/main.c    **** 	if(hcan == &hcan1){
 1068              		.loc 1 614 0
 1069 0022 074B     		ldr	r3, .L75+12
 1070 0024 9D42     		cmp	r5, r3
 1071 0026 00D0     		beq	.L74
 1072              	.L71:
 1073 0028 38BD     		pop	{r3, r4, r5, pc}
 1074              	.LVL93:
 1075              	.L74:
 615:Src/main.c    **** 		CAN_Send_Bck(&can1);
 1076              		.loc 1 615 0
 1077 002a 0648     		ldr	r0, .L75+16
 1078 002c FFF7FEFF 		bl	CAN_Send_Bck
 1079              	.LVL94:
 616:Src/main.c    **** 	}
 617:Src/main.c    **** }
 1080              		.loc 1 617 0
 1081 0030 FAE7     		b	.L71
 1082              	.L76:
 1083 0032 00BF     		.align	2
 1084              	.L75:
 1085 0034 00000000 		.word	txt
 1086 0038 00000000 		.word	.LC9
 1087 003c 00000000 		.word	huart3
ARM GAS  /tmp/ccWFWrY3.s 			page 31


 1088 0040 00000000 		.word	hcan1
 1089 0044 00000000 		.word	can1
 1090              		.cfi_endproc
 1091              	.LFE158:
 1093              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1094              		.align	1
 1095              		.global	HAL_UART_RxCpltCallback
 1096              		.syntax unified
 1097              		.thumb
 1098              		.thumb_func
 1099              		.fpu fpv5-d16
 1101              	HAL_UART_RxCpltCallback:
 1102              	.LFB159:
 618:Src/main.c    **** 
 619:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 1103              		.loc 1 619 0
 1104              		.cfi_startproc
 1105              		@ args = 0, pretend = 0, frame = 0
 1106              		@ frame_needed = 0, uses_anonymous_args = 0
 1107              	.LVL95:
 1108 0000 08B5     		push	{r3, lr}
 1109              	.LCFI16:
 1110              		.cfi_def_cfa_offset 8
 1111              		.cfi_offset 3, -8
 1112              		.cfi_offset 14, -4
 620:Src/main.c    **** 	if(huart == &huart3){
 1113              		.loc 1 620 0
 1114 0002 174B     		ldr	r3, .L85
 1115 0004 8342     		cmp	r3, r0
 1116 0006 00D0     		beq	.L83
 1117              	.LVL96:
 1118              	.L77:
 1119 0008 08BD     		pop	{r3, pc}
 1120              	.LVL97:
 1121              	.L83:
 621:Src/main.c    **** 		if((debug_rx[debug_rx_count] == '\r') | (debug_rx[debug_rx_count] == '\n')){
 1122              		.loc 1 621 0
 1123 000a 164B     		ldr	r3, .L85+4
 1124 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1125 000e 164B     		ldr	r3, .L85+8
 1126 0010 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1127 0012 0A2B     		cmp	r3, #10
 1128 0014 18BF     		it	ne
 1129 0016 0D2B     		cmpne	r3, #13
 1130 0018 10D1     		bne	.L79
 622:Src/main.c    **** 			debug_msg_arrived = 1; //set flag
 1131              		.loc 1 622 0
 1132 001a 0122     		movs	r2, #1
 1133 001c 134B     		ldr	r3, .L85+12
 1134 001e 1A70     		strb	r2, [r3]
 623:Src/main.c    **** 			debug_rx[debug_rx_count] = 0; //set end of the string
 1135              		.loc 1 623 0
 1136 0020 0023     		movs	r3, #0
 1137 0022 114A     		ldr	r2, .L85+8
 1138 0024 5354     		strb	r3, [r2, r1]
 624:Src/main.c    **** 			debug_rx_count = 0; //reset counter
 1139              		.loc 1 624 0
ARM GAS  /tmp/ccWFWrY3.s 			page 32


 1140 0026 0F4A     		ldr	r2, .L85+4
 1141 0028 1370     		strb	r3, [r2]
 1142              	.LVL98:
 1143              	.L80:
 625:Src/main.c    **** 		}else{
 626:Src/main.c    **** 			if(debug_rx_count == MAX_DEBUG_RX_L){
 627:Src/main.c    **** 				//overflow
 628:Src/main.c    **** 				debug_rx_count = 0; //reset counter for overflow
 629:Src/main.c    **** 			}else{
 630:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)&debug_rx[debug_rx_count], 1, 10); //retransmit char
 631:Src/main.c    **** 				debug_rx_count++;
 632:Src/main.c    **** 			}
 633:Src/main.c    **** 		}
 634:Src/main.c    **** 		HAL_UART_Receive_IT(&huart3,(uint8_t*) &debug_rx[debug_rx_count], 1); //activate rx interrupt for
 1144              		.loc 1 634 0
 1145 002a 0E4B     		ldr	r3, .L85+4
 1146 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1147 002e 0122     		movs	r2, #1
 1148 0030 0D49     		ldr	r1, .L85+8
 1149 0032 1944     		add	r1, r1, r3
 1150 0034 0A48     		ldr	r0, .L85
 1151 0036 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1152              	.LVL99:
 635:Src/main.c    **** 	}
 636:Src/main.c    **** }
 1153              		.loc 1 636 0
 1154 003a E5E7     		b	.L77
 1155              	.LVL100:
 1156              	.L79:
 626:Src/main.c    **** 				//overflow
 1157              		.loc 1 626 0
 1158 003c 1429     		cmp	r1, #20
 1159 003e 0BD0     		beq	.L84
 630:Src/main.c    **** 				debug_rx_count++;
 1160              		.loc 1 630 0
 1161 0040 0A23     		movs	r3, #10
 1162 0042 0122     		movs	r2, #1
 1163 0044 0848     		ldr	r0, .L85+8
 1164              	.LVL101:
 1165 0046 0144     		add	r1, r1, r0
 1166 0048 0548     		ldr	r0, .L85
 1167 004a FFF7FEFF 		bl	HAL_UART_Transmit
 1168              	.LVL102:
 631:Src/main.c    **** 			}
 1169              		.loc 1 631 0
 1170 004e 054A     		ldr	r2, .L85+4
 1171 0050 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1172 0052 0133     		adds	r3, r3, #1
 1173 0054 1370     		strb	r3, [r2]
 1174 0056 E8E7     		b	.L80
 1175              	.LVL103:
 1176              	.L84:
 628:Src/main.c    **** 			}else{
 1177              		.loc 1 628 0
 1178 0058 0022     		movs	r2, #0
 1179 005a 024B     		ldr	r3, .L85+4
 1180 005c 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccWFWrY3.s 			page 33


 1181 005e E4E7     		b	.L80
 1182              	.L86:
 1183              		.align	2
 1184              	.L85:
 1185 0060 00000000 		.word	huart3
 1186 0064 00000000 		.word	debug_rx_count
 1187 0068 00000000 		.word	debug_rx
 1188 006c 00000000 		.word	debug_msg_arrived
 1189              		.cfi_endproc
 1190              	.LFE159:
 1192              		.section	.text.Error_Handler,"ax",%progbits
 1193              		.align	1
 1194              		.global	Error_Handler
 1195              		.syntax unified
 1196              		.thumb
 1197              		.thumb_func
 1198              		.fpu fpv5-d16
 1200              	Error_Handler:
 1201              	.LFB160:
 637:Src/main.c    **** /* USER CODE END 4 */
 638:Src/main.c    **** 
 639:Src/main.c    **** /**
 640:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 641:Src/main.c    ****   * @retval None
 642:Src/main.c    ****   */
 643:Src/main.c    **** void Error_Handler(void)
 644:Src/main.c    **** {
 1202              		.loc 1 644 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 0
 1205              		@ frame_needed = 0, uses_anonymous_args = 0
 1206 0000 10B5     		push	{r4, lr}
 1207              	.LCFI17:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 4, -8
 1210              		.cfi_offset 14, -4
 645:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 646:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 647:Src/main.c    ****   HAL_GPIO_TogglePin(LED_blue_GPIO_Port,LED_blue_Pin);
 1211              		.loc 1 647 0
 1212 0002 094C     		ldr	r4, .L89
 1213 0004 8021     		movs	r1, #128
 1214 0006 2046     		mov	r0, r4
 1215 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1216              	.LVL104:
 648:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 1217              		.loc 1 648 0
 1218 000c 0121     		movs	r1, #1
 1219 000e 2046     		mov	r0, r4
 1220 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1221              	.LVL105:
 649:Src/main.c    ****   HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 1222              		.loc 1 649 0
 1223 0014 4FF48041 		mov	r1, #16384
 1224 0018 2046     		mov	r0, r4
 1225 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1226              	.LVL106:
ARM GAS  /tmp/ccWFWrY3.s 			page 34


 650:Src/main.c    **** 
 651:Src/main.c    **** 	HAL_Delay(100);
 1227              		.loc 1 651 0
 1228 001e 6420     		movs	r0, #100
 1229 0020 FFF7FEFF 		bl	HAL_Delay
 1230              	.LVL107:
 1231 0024 10BD     		pop	{r4, pc}
 1232              	.L90:
 1233 0026 00BF     		.align	2
 1234              	.L89:
 1235 0028 00040240 		.word	1073873920
 1236              		.cfi_endproc
 1237              	.LFE160:
 1239              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1240              		.align	1
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv5-d16
 1246              	MX_USART3_UART_Init:
 1247              	.LFB148:
 380:Src/main.c    **** 
 1248              		.loc 1 380 0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252 0000 08B5     		push	{r3, lr}
 1253              	.LCFI18:
 1254              		.cfi_def_cfa_offset 8
 1255              		.cfi_offset 3, -8
 1256              		.cfi_offset 14, -4
 389:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 1257              		.loc 1 389 0
 1258 0002 0B48     		ldr	r0, .L95
 1259 0004 0B4B     		ldr	r3, .L95+4
 1260 0006 0360     		str	r3, [r0]
 390:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1261              		.loc 1 390 0
 1262 0008 0B4B     		ldr	r3, .L95+8
 1263 000a 4360     		str	r3, [r0, #4]
 391:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1264              		.loc 1 391 0
 1265 000c 0023     		movs	r3, #0
 1266 000e 8360     		str	r3, [r0, #8]
 392:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 1267              		.loc 1 392 0
 1268 0010 C360     		str	r3, [r0, #12]
 393:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1269              		.loc 1 393 0
 1270 0012 0361     		str	r3, [r0, #16]
 394:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1271              		.loc 1 394 0
 1272 0014 0C22     		movs	r2, #12
 1273 0016 4261     		str	r2, [r0, #20]
 395:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1274              		.loc 1 395 0
 1275 0018 8361     		str	r3, [r0, #24]
ARM GAS  /tmp/ccWFWrY3.s 			page 35


 396:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1276              		.loc 1 396 0
 1277 001a C361     		str	r3, [r0, #28]
 397:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1278              		.loc 1 397 0
 1279 001c 0362     		str	r3, [r0, #32]
 398:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1280              		.loc 1 398 0
 1281 001e 4362     		str	r3, [r0, #36]
 399:Src/main.c    ****   {
 1282              		.loc 1 399 0
 1283 0020 FFF7FEFF 		bl	HAL_UART_Init
 1284              	.LVL108:
 1285 0024 00B9     		cbnz	r0, .L94
 1286              	.L91:
 1287 0026 08BD     		pop	{r3, pc}
 1288              	.L94:
 401:Src/main.c    ****   }
 1289              		.loc 1 401 0
 1290 0028 FFF7FEFF 		bl	Error_Handler
 1291              	.LVL109:
 407:Src/main.c    **** 
 1292              		.loc 1 407 0
 1293 002c FBE7     		b	.L91
 1294              	.L96:
 1295 002e 00BF     		.align	2
 1296              	.L95:
 1297 0030 00000000 		.word	huart3
 1298 0034 00480040 		.word	1073760256
 1299 0038 80841E00 		.word	2000000
 1300              		.cfi_endproc
 1301              	.LFE148:
 1303              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1304              		.align	1
 1305              		.syntax unified
 1306              		.thumb
 1307              		.thumb_func
 1308              		.fpu fpv5-d16
 1310              	MX_CAN1_Init:
 1311              	.LFB145:
 270:Src/main.c    **** 
 1312              		.loc 1 270 0
 1313              		.cfi_startproc
 1314              		@ args = 0, pretend = 0, frame = 0
 1315              		@ frame_needed = 0, uses_anonymous_args = 0
 1316 0000 08B5     		push	{r3, lr}
 1317              	.LCFI19:
 1318              		.cfi_def_cfa_offset 8
 1319              		.cfi_offset 3, -8
 1320              		.cfi_offset 14, -4
 279:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 1321              		.loc 1 279 0
 1322 0002 0E48     		ldr	r0, .L101
 1323 0004 0E4B     		ldr	r3, .L101+4
 1324 0006 0360     		str	r3, [r0]
 280:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1325              		.loc 1 280 0
ARM GAS  /tmp/ccWFWrY3.s 			page 36


 1326 0008 0323     		movs	r3, #3
 1327 000a 4360     		str	r3, [r0, #4]
 281:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1328              		.loc 1 281 0
 1329 000c 0023     		movs	r3, #0
 1330 000e 8360     		str	r3, [r0, #8]
 282:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 1331              		.loc 1 282 0
 1332 0010 C360     		str	r3, [r0, #12]
 283:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 1333              		.loc 1 283 0
 1334 0012 4FF46022 		mov	r2, #917504
 1335 0016 0261     		str	r2, [r0, #16]
 284:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1336              		.loc 1 284 0
 1337 0018 4FF48012 		mov	r2, #1048576
 1338 001c 4261     		str	r2, [r0, #20]
 285:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 1339              		.loc 1 285 0
 1340 001e 0376     		strb	r3, [r0, #24]
 286:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 1341              		.loc 1 286 0
 1342 0020 4376     		strb	r3, [r0, #25]
 287:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 1343              		.loc 1 287 0
 1344 0022 0122     		movs	r2, #1
 1345 0024 8276     		strb	r2, [r0, #26]
 288:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1346              		.loc 1 288 0
 1347 0026 C276     		strb	r2, [r0, #27]
 289:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 1348              		.loc 1 289 0
 1349 0028 0377     		strb	r3, [r0, #28]
 290:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1350              		.loc 1 290 0
 1351 002a 4377     		strb	r3, [r0, #29]
 291:Src/main.c    ****   {
 1352              		.loc 1 291 0
 1353 002c FFF7FEFF 		bl	HAL_CAN_Init
 1354              	.LVL110:
 1355 0030 00B9     		cbnz	r0, .L100
 1356              	.L97:
 1357 0032 08BD     		pop	{r3, pc}
 1358              	.L100:
 293:Src/main.c    ****   }
 1359              		.loc 1 293 0
 1360 0034 FFF7FEFF 		bl	Error_Handler
 1361              	.LVL111:
 299:Src/main.c    **** 
 1362              		.loc 1 299 0
 1363 0038 FBE7     		b	.L97
 1364              	.L102:
 1365 003a 00BF     		.align	2
 1366              	.L101:
 1367 003c 00000000 		.word	hcan1
 1368 0040 00640040 		.word	1073767424
 1369              		.cfi_endproc
ARM GAS  /tmp/ccWFWrY3.s 			page 37


 1370              	.LFE145:
 1372              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1373              		.align	1
 1374              		.syntax unified
 1375              		.thumb
 1376              		.thumb_func
 1377              		.fpu fpv5-d16
 1379              	MX_TIM2_Init:
 1380              	.LFB147:
 335:Src/main.c    **** 
 1381              		.loc 1 335 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 32
 1384              		@ frame_needed = 0, uses_anonymous_args = 0
 1385 0000 00B5     		push	{lr}
 1386              	.LCFI20:
 1387              		.cfi_def_cfa_offset 4
 1388              		.cfi_offset 14, -4
 1389 0002 89B0     		sub	sp, sp, #36
 1390              	.LCFI21:
 1391              		.cfi_def_cfa_offset 40
 341:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1392              		.loc 1 341 0
 1393 0004 0023     		movs	r3, #0
 1394 0006 0493     		str	r3, [sp, #16]
 1395 0008 0593     		str	r3, [sp, #20]
 1396 000a 0693     		str	r3, [sp, #24]
 1397 000c 0793     		str	r3, [sp, #28]
 342:Src/main.c    **** 
 1398              		.loc 1 342 0
 1399 000e 0193     		str	r3, [sp, #4]
 1400 0010 0293     		str	r3, [sp, #8]
 1401 0012 0393     		str	r3, [sp, #12]
 347:Src/main.c    ****   htim2.Init.Prescaler = 108;
 1402              		.loc 1 347 0
 1403 0014 1548     		ldr	r0, .L111
 1404 0016 4FF08042 		mov	r2, #1073741824
 1405 001a 0260     		str	r2, [r0]
 348:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1406              		.loc 1 348 0
 1407 001c 6C22     		movs	r2, #108
 1408 001e 4260     		str	r2, [r0, #4]
 349:Src/main.c    ****   htim2.Init.Period = 1000;
 1409              		.loc 1 349 0
 1410 0020 8360     		str	r3, [r0, #8]
 350:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1411              		.loc 1 350 0
 1412 0022 4FF47A72 		mov	r2, #1000
 1413 0026 C260     		str	r2, [r0, #12]
 351:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1414              		.loc 1 351 0
 1415 0028 0361     		str	r3, [r0, #16]
 352:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1416              		.loc 1 352 0
 1417 002a 8361     		str	r3, [r0, #24]
 353:Src/main.c    ****   {
 1418              		.loc 1 353 0
ARM GAS  /tmp/ccWFWrY3.s 			page 38


 1419 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1420              	.LVL112:
 1421 0030 98B9     		cbnz	r0, .L108
 1422              	.L104:
 357:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1423              		.loc 1 357 0
 1424 0032 08A9     		add	r1, sp, #32
 1425 0034 4FF48053 		mov	r3, #4096
 1426 0038 41F8103D 		str	r3, [r1, #-16]!
 358:Src/main.c    ****   {
 1427              		.loc 1 358 0
 1428 003c 0B48     		ldr	r0, .L111
 1429 003e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1430              	.LVL113:
 1431 0042 68B9     		cbnz	r0, .L109
 1432              	.L105:
 362:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1433              		.loc 1 362 0
 1434 0044 0023     		movs	r3, #0
 1435 0046 0193     		str	r3, [sp, #4]
 363:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1436              		.loc 1 363 0
 1437 0048 0393     		str	r3, [sp, #12]
 364:Src/main.c    ****   {
 1438              		.loc 1 364 0
 1439 004a 01A9     		add	r1, sp, #4
 1440 004c 0748     		ldr	r0, .L111
 1441 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1442              	.LVL114:
 1443 0052 40B9     		cbnz	r0, .L110
 1444              	.L103:
 372:Src/main.c    **** 
 1445              		.loc 1 372 0
 1446 0054 09B0     		add	sp, sp, #36
 1447              	.LCFI22:
 1448              		.cfi_remember_state
 1449              		.cfi_def_cfa_offset 4
 1450              		@ sp needed
 1451 0056 5DF804FB 		ldr	pc, [sp], #4
 1452              	.L108:
 1453              	.LCFI23:
 1454              		.cfi_restore_state
 355:Src/main.c    ****   }
 1455              		.loc 1 355 0
 1456 005a FFF7FEFF 		bl	Error_Handler
 1457              	.LVL115:
 1458 005e E8E7     		b	.L104
 1459              	.L109:
 360:Src/main.c    ****   }
 1460              		.loc 1 360 0
 1461 0060 FFF7FEFF 		bl	Error_Handler
 1462              	.LVL116:
 1463 0064 EEE7     		b	.L105
 1464              	.L110:
 366:Src/main.c    ****   }
 1465              		.loc 1 366 0
 1466 0066 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/ccWFWrY3.s 			page 39


 1467              	.LVL117:
 372:Src/main.c    **** 
 1468              		.loc 1 372 0
 1469 006a F3E7     		b	.L103
 1470              	.L112:
 1471              		.align	2
 1472              	.L111:
 1473 006c 00000000 		.word	htim2
 1474              		.cfi_endproc
 1475              	.LFE147:
 1477              		.section	.text.SystemClock_Config,"ax",%progbits
 1478              		.align	1
 1479              		.global	SystemClock_Config
 1480              		.syntax unified
 1481              		.thumb
 1482              		.thumb_func
 1483              		.fpu fpv5-d16
 1485              	SystemClock_Config:
 1486              	.LFB143:
 181:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1487              		.loc 1 181 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 224
 1490              		@ frame_needed = 0, uses_anonymous_args = 0
 1491 0000 10B5     		push	{r4, lr}
 1492              	.LCFI24:
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 4, -8
 1495              		.cfi_offset 14, -4
 1496 0002 B8B0     		sub	sp, sp, #224
 1497              	.LCFI25:
 1498              		.cfi_def_cfa_offset 232
 182:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1499              		.loc 1 182 0
 1500 0004 3422     		movs	r2, #52
 1501 0006 0021     		movs	r1, #0
 1502 0008 2BA8     		add	r0, sp, #172
 1503 000a FFF7FEFF 		bl	memset
 1504              	.LVL118:
 183:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1505              		.loc 1 183 0
 1506 000e 0024     		movs	r4, #0
 1507 0010 2694     		str	r4, [sp, #152]
 1508 0012 2794     		str	r4, [sp, #156]
 1509 0014 2894     		str	r4, [sp, #160]
 1510 0016 2994     		str	r4, [sp, #164]
 1511 0018 2A94     		str	r4, [sp, #168]
 184:Src/main.c    **** 
 1512              		.loc 1 184 0
 1513 001a 9022     		movs	r2, #144
 1514 001c 2146     		mov	r1, r4
 1515 001e 02A8     		add	r0, sp, #8
 1516 0020 FFF7FEFF 		bl	memset
 1517              	.LVL119:
 1518              	.LBB7:
 188:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1519              		.loc 1 188 0
ARM GAS  /tmp/ccWFWrY3.s 			page 40


 1520 0024 294B     		ldr	r3, .L123
 1521 0026 1A6C     		ldr	r2, [r3, #64]
 1522 0028 42F08052 		orr	r2, r2, #268435456
 1523 002c 1A64     		str	r2, [r3, #64]
 1524 002e 1B6C     		ldr	r3, [r3, #64]
 1525 0030 03F08053 		and	r3, r3, #268435456
 1526 0034 0093     		str	r3, [sp]
 1527 0036 009B     		ldr	r3, [sp]
 1528              	.LBE7:
 1529              	.LBB8:
 189:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1530              		.loc 1 189 0
 1531 0038 254B     		ldr	r3, .L123+4
 1532 003a 1A68     		ldr	r2, [r3]
 1533 003c 42F44042 		orr	r2, r2, #49152
 1534 0040 1A60     		str	r2, [r3]
 1535 0042 1B68     		ldr	r3, [r3]
 1536 0044 03F44043 		and	r3, r3, #49152
 1537 0048 0193     		str	r3, [sp, #4]
 1538 004a 019B     		ldr	r3, [sp, #4]
 1539              	.LBE8:
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1540              		.loc 1 192 0
 1541 004c 0223     		movs	r3, #2
 1542 004e 2B93     		str	r3, [sp, #172]
 193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1543              		.loc 1 193 0
 1544 0050 0122     		movs	r2, #1
 1545 0052 2E92     		str	r2, [sp, #184]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1546              		.loc 1 194 0
 1547 0054 1022     		movs	r2, #16
 1548 0056 2F92     		str	r2, [sp, #188]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1549              		.loc 1 195 0
 1550 0058 3193     		str	r3, [sp, #196]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1551              		.loc 1 196 0
 1552 005a 3294     		str	r4, [sp, #200]
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 1553              		.loc 1 197 0
 1554 005c 0822     		movs	r2, #8
 1555 005e 3392     		str	r2, [sp, #204]
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1556              		.loc 1 198 0
 1557 0060 D822     		movs	r2, #216
 1558 0062 3492     		str	r2, [sp, #208]
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 1559              		.loc 1 199 0
 1560 0064 3593     		str	r3, [sp, #212]
 200:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1561              		.loc 1 200 0
 1562 0066 0923     		movs	r3, #9
 1563 0068 3693     		str	r3, [sp, #216]
 201:Src/main.c    ****   {
 1564              		.loc 1 201 0
 1565 006a 2BA8     		add	r0, sp, #172
ARM GAS  /tmp/ccWFWrY3.s 			page 41


 1566 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1567              	.LVL120:
 1568 0070 F8B9     		cbnz	r0, .L119
 1569              	.L114:
 207:Src/main.c    ****   {
 1570              		.loc 1 207 0
 1571 0072 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1572              	.LVL121:
 1573 0076 F8B9     		cbnz	r0, .L120
 1574              	.L115:
 213:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1575              		.loc 1 213 0
 1576 0078 0F23     		movs	r3, #15
 1577 007a 2693     		str	r3, [sp, #152]
 215:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1578              		.loc 1 215 0
 1579 007c 0223     		movs	r3, #2
 1580 007e 2793     		str	r3, [sp, #156]
 216:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1581              		.loc 1 216 0
 1582 0080 0023     		movs	r3, #0
 1583 0082 2893     		str	r3, [sp, #160]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1584              		.loc 1 217 0
 1585 0084 4FF4A053 		mov	r3, #5120
 1586 0088 2993     		str	r3, [sp, #164]
 218:Src/main.c    **** 
 1587              		.loc 1 218 0
 1588 008a 4FF48053 		mov	r3, #4096
 1589 008e 2A93     		str	r3, [sp, #168]
 220:Src/main.c    ****   {
 1590              		.loc 1 220 0
 1591 0090 0721     		movs	r1, #7
 1592 0092 26A8     		add	r0, sp, #152
 1593 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1594              	.LVL122:
 1595 0098 88B9     		cbnz	r0, .L121
 1596              	.L116:
 224:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 1597              		.loc 1 224 0
 1598 009a 0E4B     		ldr	r3, .L123+8
 1599 009c 0293     		str	r3, [sp, #8]
 226:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1600              		.loc 1 226 0
 1601 009e 0023     		movs	r3, #0
 1602 00a0 1593     		str	r3, [sp, #84]
 227:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 1603              		.loc 1 227 0
 1604 00a2 2193     		str	r3, [sp, #132]
 228:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1605              		.loc 1 228 0
 1606 00a4 2293     		str	r3, [sp, #136]
 229:Src/main.c    ****   {
 1607              		.loc 1 229 0
 1608 00a6 02A8     		add	r0, sp, #8
 1609 00a8 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1610              	.LVL123:
ARM GAS  /tmp/ccWFWrY3.s 			page 42


 1611 00ac 50B9     		cbnz	r0, .L122
 1612              	.L113:
 233:Src/main.c    **** 
 1613              		.loc 1 233 0
 1614 00ae 38B0     		add	sp, sp, #224
 1615              	.LCFI26:
 1616              		.cfi_remember_state
 1617              		.cfi_def_cfa_offset 8
 1618              		@ sp needed
 1619 00b0 10BD     		pop	{r4, pc}
 1620              	.L119:
 1621              	.LCFI27:
 1622              		.cfi_restore_state
 203:Src/main.c    ****   }
 1623              		.loc 1 203 0
 1624 00b2 FFF7FEFF 		bl	Error_Handler
 1625              	.LVL124:
 1626 00b6 DCE7     		b	.L114
 1627              	.L120:
 209:Src/main.c    ****   }
 1628              		.loc 1 209 0
 1629 00b8 FFF7FEFF 		bl	Error_Handler
 1630              	.LVL125:
 1631 00bc DCE7     		b	.L115
 1632              	.L121:
 222:Src/main.c    ****   }
 1633              		.loc 1 222 0
 1634 00be FFF7FEFF 		bl	Error_Handler
 1635              	.LVL126:
 1636 00c2 EAE7     		b	.L116
 1637              	.L122:
 231:Src/main.c    ****   }
 1638              		.loc 1 231 0
 1639 00c4 FFF7FEFF 		bl	Error_Handler
 1640              	.LVL127:
 233:Src/main.c    **** 
 1641              		.loc 1 233 0
 1642 00c8 F1E7     		b	.L113
 1643              	.L124:
 1644 00ca 00BF     		.align	2
 1645              	.L123:
 1646 00cc 00380240 		.word	1073887232
 1647 00d0 00700040 		.word	1073770496
 1648 00d4 0001A000 		.word	10486016
 1649              		.cfi_endproc
 1650              	.LFE143:
 1652              		.section	.text.main,"ax",%progbits
 1653              		.align	1
 1654              		.global	main
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu fpv5-d16
 1660              	main:
 1661              	.LFB142:
  90:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1662              		.loc 1 90 0
ARM GAS  /tmp/ccWFWrY3.s 			page 43


 1663              		.cfi_startproc
 1664              		@ Volatile: function does not return.
 1665              		@ args = 0, pretend = 0, frame = 0
 1666              		@ frame_needed = 0, uses_anonymous_args = 0
 1667 0000 08B5     		push	{r3, lr}
 1668              	.LCFI28:
 1669              		.cfi_def_cfa_offset 8
 1670              		.cfi_offset 3, -8
 1671              		.cfi_offset 14, -4
  99:Src/main.c    **** 
 1672              		.loc 1 99 0
 1673 0002 FFF7FEFF 		bl	HAL_Init
 1674              	.LVL128:
 106:Src/main.c    **** 
 1675              		.loc 1 106 0
 1676 0006 FFF7FEFF 		bl	SystemClock_Config
 1677              	.LVL129:
 113:Src/main.c    ****   MX_SDMMC1_SD_Init();
 1678              		.loc 1 113 0
 1679 000a FFF7FEFF 		bl	MX_GPIO_Init
 1680              	.LVL130:
 114:Src/main.c    ****   MX_USART3_UART_Init();
 1681              		.loc 1 114 0
 1682 000e FFF7FEFF 		bl	MX_SDMMC1_SD_Init
 1683              	.LVL131:
 115:Src/main.c    ****   MX_FATFS_Init();
 1684              		.loc 1 115 0
 1685 0012 FFF7FEFF 		bl	MX_USART3_UART_Init
 1686              	.LVL132:
 116:Src/main.c    ****   MX_CAN1_Init();
 1687              		.loc 1 116 0
 1688 0016 FFF7FEFF 		bl	MX_FATFS_Init
 1689              	.LVL133:
 117:Src/main.c    ****   MX_TIM2_Init();
 1690              		.loc 1 117 0
 1691 001a FFF7FEFF 		bl	MX_CAN1_Init
 1692              	.LVL134:
 118:Src/main.c    **** 
 1693              		.loc 1 118 0
 1694 001e FFF7FEFF 		bl	MX_TIM2_Init
 1695              	.LVL135:
 121:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1696              		.loc 1 121 0
 1697 0022 FFF7FEFF 		bl	MX_NVIC_Init
 1698              	.LVL136:
 123:Src/main.c    **** 
 1699              		.loc 1 123 0
 1700 0026 2548     		ldr	r0, .L137
 1701 0028 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1702              	.LVL137:
 125:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 1703              		.loc 1 125 0
 1704 002c 244B     		ldr	r3, .L137+4
 1705 002e 1422     		movs	r2, #20
 1706 0030 83F8882D 		strb	r2, [r3, #3464]
 126:Src/main.c    ****   can1.hcan = &hcan1;
 1707              		.loc 1 126 0
ARM GAS  /tmp/ccWFWrY3.s 			page 44


 1708 0034 1322     		movs	r2, #19
 1709 0036 83F8892D 		strb	r2, [r3, #3465]
 127:Src/main.c    **** 
 1710              		.loc 1 127 0
 1711 003a 224A     		ldr	r2, .L137+8
 1712 003c 1A63     		str	r2, [r3, #48]
 129:Src/main.c    **** 
 1713              		.loc 1 129 0
 1714 003e FFF7FEFF 		bl	can_init
 1715              	.LVL138:
 131:Src/main.c    **** 
 1716              		.loc 1 131 0
 1717 0042 214B     		ldr	r3, .L137+12
 1718 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1719 0046 0122     		movs	r2, #1
 1720 0048 2049     		ldr	r1, .L137+16
 1721 004a 1944     		add	r1, r1, r3
 1722 004c 2048     		ldr	r0, .L137+20
 1723 004e FFF7FEFF 		bl	HAL_UART_Receive_IT
 1724              	.LVL139:
 133:Src/main.c    **** 
 1725              		.loc 1 133 0
 1726 0052 0022     		movs	r2, #0
 1727 0054 1F4B     		ldr	r3, .L137+24
 1728 0056 1A70     		strb	r2, [r3]
 1729 0058 01E0     		b	.L126
 1730              	.L133:
 159:Src/main.c    **** 	  }else if(current_state == STATE_IDLE){
 1731              		.loc 1 159 0
 1732 005a FFF7FEFF 		bl	init
 1733              	.LVL140:
 1734              	.L126:
 142:Src/main.c    **** 	  can1.dataTx[1] = 0;
 1735              		.loc 1 142 0
 1736 005e 184A     		ldr	r2, .L137+4
 1737 0060 0023     		movs	r3, #0
 1738 0062 1372     		strb	r3, [r2, #8]
 143:Src/main.c    **** 	  can1.dataTx[2] = 0;
 1739              		.loc 1 143 0
 1740 0064 5372     		strb	r3, [r2, #9]
 144:Src/main.c    **** 	  can1.dataTx[3] = 0;
 1741              		.loc 1 144 0
 1742 0066 9372     		strb	r3, [r2, #10]
 145:Src/main.c    **** 	  can1.dataTx[4] = counter >> 24;
 1743              		.loc 1 145 0
 1744 0068 D372     		strb	r3, [r2, #11]
 146:Src/main.c    **** 	  can1.dataTx[5] = counter >> 16;
 1745              		.loc 1 146 0
 1746 006a 1B4B     		ldr	r3, .L137+28
 1747 006c 1B68     		ldr	r3, [r3]
 1748 006e 1916     		asrs	r1, r3, #24
 1749 0070 1173     		strb	r1, [r2, #12]
 147:Src/main.c    **** 	  can1.dataTx[6] = counter >> 8;
 1750              		.loc 1 147 0
 1751 0072 1914     		asrs	r1, r3, #16
 1752 0074 5173     		strb	r1, [r2, #13]
 148:Src/main.c    **** 	  can1.dataTx[7] = counter % 256;
ARM GAS  /tmp/ccWFWrY3.s 			page 45


 1753              		.loc 1 148 0
 1754 0076 1912     		asrs	r1, r3, #8
 1755 0078 9173     		strb	r1, [r2, #14]
 149:Src/main.c    **** 
 1756              		.loc 1 149 0
 1757 007a 5942     		rsbs	r1, r3, #0
 1758 007c DBB2     		uxtb	r3, r3
 1759 007e C9B2     		uxtb	r1, r1
 1760 0080 58BF     		it	pl
 1761 0082 4B42     		rsbpl	r3, r1, #0
 1762 0084 D373     		strb	r3, [r2, #15]
 151:Src/main.c    **** 
 1763              		.loc 1 151 0
 1764 0086 A023     		movs	r3, #160
 1765 0088 1362     		str	r3, [r2, #32]
 158:Src/main.c    **** 		  init();
 1766              		.loc 1 158 0
 1767 008a 124B     		ldr	r3, .L137+24
 1768 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1769 008e 002B     		cmp	r3, #0
 1770 0090 E3D0     		beq	.L133
 160:Src/main.c    **** 		  idle();
 1771              		.loc 1 160 0
 1772 0092 012B     		cmp	r3, #1
 1773 0094 08D0     		beq	.L134
 162:Src/main.c    **** 		  calib();
 1774              		.loc 1 162 0
 1775 0096 022B     		cmp	r3, #2
 1776 0098 09D0     		beq	.L135
 164:Src/main.c    **** 		  setup();
 1777              		.loc 1 164 0
 1778 009a 032B     		cmp	r3, #3
 1779 009c 0AD0     		beq	.L136
 166:Src/main.c    **** 		  run();
 1780              		.loc 1 166 0
 1781 009e 042B     		cmp	r3, #4
 1782 00a0 DDD1     		bne	.L126
 167:Src/main.c    **** 	  }
 1783              		.loc 1 167 0
 1784 00a2 FFF7FEFF 		bl	run
 1785              	.LVL141:
 1786 00a6 DAE7     		b	.L126
 1787              	.L134:
 161:Src/main.c    **** 	  }else if(current_state == STATE_CALIB){
 1788              		.loc 1 161 0
 1789 00a8 FFF7FEFF 		bl	idle
 1790              	.LVL142:
 1791 00ac D7E7     		b	.L126
 1792              	.L135:
 163:Src/main.c    **** 	  }else if(current_state == STATE_SETUP){
 1793              		.loc 1 163 0
 1794 00ae FFF7FEFF 		bl	calib
 1795              	.LVL143:
 1796 00b2 D4E7     		b	.L126
 1797              	.L136:
 165:Src/main.c    **** 	  }else if(current_state == STATE_RUN){
 1798              		.loc 1 165 0
ARM GAS  /tmp/ccWFWrY3.s 			page 46


 1799 00b4 FFF7FEFF 		bl	setup
 1800              	.LVL144:
 1801 00b8 D1E7     		b	.L126
 1802              	.L138:
 1803 00ba 00BF     		.align	2
 1804              	.L137:
 1805 00bc 00000000 		.word	htim2
 1806 00c0 00000000 		.word	can1
 1807 00c4 00000000 		.word	hcan1
 1808 00c8 00000000 		.word	debug_rx_count
 1809 00cc 00000000 		.word	debug_rx
 1810 00d0 00000000 		.word	huart3
 1811 00d4 00000000 		.word	current_state
 1812 00d8 00000000 		.word	.LANCHOR0
 1813              		.cfi_endproc
 1814              	.LFE142:
 1816              		.global	counter
 1817              		.comm	sFilter,40,4
 1818              		.comm	i_debug,1,1
 1819              		.comm	huart3,128,4
 1820              		.comm	htim2,64,4
 1821              		.comm	hsd1,132,4
 1822              		.comm	hcan1,40,4
 1823              		.comm	current_state,1,1
 1824              		.section	.bss.counter,"aw",%nobits
 1825              		.align	2
 1826              		.set	.LANCHOR0,. + 0
 1829              	counter:
 1830 0000 00000000 		.space	4
 1831              		.section	.rodata.HAL_CAN_ErrorCallback.str1.4,"aMS",%progbits,1
 1832              		.align	2
 1833              	.LC9:
 1834 0000 2D2D2D20 		.ascii	"--- Errore ---: %d\015\012\000"
 1834      4572726F 
 1834      7265202D 
 1834      2D2D3A20 
 1834      25640D0A 
 1835              		.section	.rodata.HAL_CAN_RxFifo0FullCallback.str1.4,"aMS",%progbits,1
 1836              		.align	2
 1837              	.LC3:
 1838 0000 4649464F 		.ascii	"FIFO0 FULL\015\012\000"
 1838      30204655 
 1838      4C4C0D0A 
 1838      00
 1839              		.section	.rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4,"aMS",%progbits,1
 1840              		.align	2
 1841              	.LC1:
 1842 0000 44415441 		.ascii	"DATA: %d %d %d %d %d %d %d %d\015\012\000"
 1842      3A202564 
 1842      20256420 
 1842      25642025 
 1842      64202564 
 1843              		.section	.rodata.HAL_CAN_RxFifo1FullCallback.str1.4,"aMS",%progbits,1
 1844              		.align	2
 1845              	.LC4:
 1846 0000 4649464F 		.ascii	"FIFO1 FULL\015\012\000"
 1846      31204655 
ARM GAS  /tmp/ccWFWrY3.s 			page 47


 1846      4C4C0D0A 
 1846      00
 1847              		.section	.rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4,"aMS",%progbits,1
 1848              		.align	2
 1849              	.LC2:
 1850 0000 7278206F 		.ascii	"rx on FIFO1\015\012\000"
 1850      6E204649 
 1850      464F310D 
 1850      0A00
 1851              		.section	.rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4,"aMS",%progbits,1
 1852              		.align	2
 1853              	.LC5:
 1854 0000 6D62303A 		.ascii	"mb0: %d\015\012\000"
 1854      2025640D 
 1854      0A00
 1855 000a 0000     		.space	2
 1856              	.LC6:
 1857 000c 68696768 		.ascii	"high\015\012\000"
 1857      0D0A00
 1858              		.section	.rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4,"aMS",%progbits,1
 1859              		.align	2
 1860              	.LC7:
 1861 0000 6D62313A 		.ascii	"mb1: %d %d\015\012\000"
 1861      20256420 
 1861      25640D0A 
 1861      00
 1862              		.section	.rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4,"aMS",%progbits,1
 1863              		.align	2
 1864              	.LC8:
 1865 0000 6D62323A 		.ascii	"mb2: %d %d\015\012\000"
 1865      20256420 
 1865      25640D0A 
 1865      00
 1866              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 1867              		.align	2
 1868              	.LC0:
 1869 0000 494D5520 		.ascii	"IMU non presente\015\012\000"
 1869      6E6F6E20 
 1869      70726573 
 1869      656E7465 
 1869      0D0A00
 1870              		.text
 1871              	.Letext0:
 1872              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1873              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1874              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1875              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 1876              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1877              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1878              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1879              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1880              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1881              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1882              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1883              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1884              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 1885              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
ARM GAS  /tmp/ccWFWrY3.s 			page 48


 1886              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1887              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1888              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1889              		.file 19 "Middlewares/Third_Party/FatFs/src/integer.h"
 1890              		.file 20 "/usr/include/newlib/sys/lock.h"
 1891              		.file 21 "/usr/include/newlib/sys/_types.h"
 1892              		.file 22 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1893              		.file 23 "/usr/include/newlib/sys/reent.h"
 1894              		.file 24 "/usr/include/newlib/stdlib.h"
 1895              		.file 25 "Middlewares/Third_Party/FatFs/src/ff.h"
 1896              		.file 26 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1897              		.file 27 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1898              		.file 28 "Inc/sd_diskio.h"
 1899              		.file 29 "Inc/fatfs.h"
 1900              		.file 30 "Inc/state.h"
 1901              		.file 31 "Inc/can.h"
 1902              		.file 32 "Inc/pedals.h"
 1903              		.file 33 "Inc/global_variables.h"
 1904              		.file 34 "/usr/include/newlib/stdio.h"
 1905              		.file 35 "/usr/include/newlib/string.h"
 1906              		.file 36 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1907              		.file 37 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1908              		.file 38 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
ARM GAS  /tmp/ccWFWrY3.s 			page 49


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccWFWrY3.s:17     .text.MX_SDMMC1_SD_Init:0000000000000000 $t
     /tmp/ccWFWrY3.s:23     .text.MX_SDMMC1_SD_Init:0000000000000000 MX_SDMMC1_SD_Init
     /tmp/ccWFWrY3.s:53     .text.MX_SDMMC1_SD_Init:0000000000000018 $d
                            *COM*:0000000000000084 hsd1
     /tmp/ccWFWrY3.s:59     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccWFWrY3.s:65     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccWFWrY3.s:171    .text.MX_GPIO_Init:0000000000000094 $d
     /tmp/ccWFWrY3.s:178    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccWFWrY3.s:184    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccWFWrY3.s:270    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:277    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccWFWrY3.s:438    .text.HAL_TIM_PeriodElapsedCallback:00000000000000d0 $d
                            *COM*:0000000000000040 htim2
                            *COM*:0000000000000080 huart3
     /tmp/ccWFWrY3.s:455    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:462    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccWFWrY3.s:569    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000084 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccWFWrY3.s:579    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:586    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccWFWrY3.s:620    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000018 $d
     /tmp/ccWFWrY3.s:627    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:634    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccWFWrY3.s:668    .text.HAL_CAN_RxFifo0FullCallback:0000000000000018 $d
     /tmp/ccWFWrY3.s:675    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:682    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccWFWrY3.s:716    .text.HAL_CAN_RxFifo1FullCallback:0000000000000018 $d
     /tmp/ccWFWrY3.s:723    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:730    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccWFWrY3.s:813    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000068 $d
     /tmp/ccWFWrY3.s:824    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:831    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccWFWrY3.s:915    .text.HAL_CAN_TxMailbox1CompleteCallback:000000000000006c $d
     /tmp/ccWFWrY3.s:926    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:933    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccWFWrY3.s:1017   .text.HAL_CAN_TxMailbox2CompleteCallback:000000000000006c $d
     /tmp/ccWFWrY3.s:1028   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:1035   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccWFWrY3.s:1085   .text.HAL_CAN_ErrorCallback:0000000000000034 $d
     /tmp/ccWFWrY3.s:1094   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccWFWrY3.s:1101   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccWFWrY3.s:1185   .text.HAL_UART_RxCpltCallback:0000000000000060 $d
     /tmp/ccWFWrY3.s:1193   .text.Error_Handler:0000000000000000 $t
     /tmp/ccWFWrY3.s:1200   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccWFWrY3.s:1235   .text.Error_Handler:0000000000000028 $d
     /tmp/ccWFWrY3.s:1240   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccWFWrY3.s:1246   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccWFWrY3.s:1297   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/ccWFWrY3.s:1304   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccWFWrY3.s:1310   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccWFWrY3.s:1367   .text.MX_CAN1_Init:000000000000003c $d
     /tmp/ccWFWrY3.s:1373   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccWFWrY3.s:1379   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccWFWrY3.s:1473   .text.MX_TIM2_Init:000000000000006c $d
     /tmp/ccWFWrY3.s:1478   .text.SystemClock_Config:0000000000000000 $t
ARM GAS  /tmp/ccWFWrY3.s 			page 50


     /tmp/ccWFWrY3.s:1485   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccWFWrY3.s:1646   .text.SystemClock_Config:00000000000000cc $d
     /tmp/ccWFWrY3.s:1653   .text.main:0000000000000000 $t
     /tmp/ccWFWrY3.s:1660   .text.main:0000000000000000 main
     /tmp/ccWFWrY3.s:1805   .text.main:00000000000000bc $d
                            *COM*:0000000000000001 current_state
     /tmp/ccWFWrY3.s:1829   .bss.counter:0000000000000000 counter
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000001 i_debug
     /tmp/ccWFWrY3.s:1825   .bss.counter:0000000000000000 $d
     /tmp/ccWFWrY3.s:1832   .rodata.HAL_CAN_ErrorCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1836   .rodata.HAL_CAN_RxFifo0FullCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1840   .rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1844   .rodata.HAL_CAN_RxFifo1FullCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1848   .rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1852   .rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1859   .rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1863   .rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccWFWrY3.s:1867   .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
count_ms
count_dec
count_inverter
count_imu
count_atc
count_sec
count_min
count_hour
atc_connected
imu_connected
HAL_GPIO_TogglePin
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
fifoRxDataCAN_push
sprintf
strlen
can1
txt
fifoTxDataCAN_high_pop
CAN_Send_IT
fifoTxDataCAN_normal_pop
CAN_Send_Bck
HAL_UART_Receive_IT
debug_rx_count
debug_rx
debug_msg_arrived
HAL_Delay
HAL_UART_Init
HAL_CAN_Init
HAL_TIM_Base_Init
ARM GAS  /tmp/ccWFWrY3.s 			page 51


HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
HAL_TIM_Base_Start_IT
can_init
init
run
idle
calib
setup
