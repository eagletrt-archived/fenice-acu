ARM GAS  /tmp/ccEC78z9.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_SDMMC1_SD_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	MX_SDMMC1_SD_Init:
  24              	.LFB146:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "fatfs.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** #include "state.h"
  28:Src/main.c    **** #include "can.h"
  29:Src/main.c    **** #include "global_variables.h"
  30:Src/main.c    **** #include "string.h"
  31:Src/main.c    **** #include "stdio.h"
  32:Src/main.c    **** /* USER CODE END Includes */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccEC78z9.s 			page 2


  34:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PTD */
  36:Src/main.c    **** 
  37:Src/main.c    **** /* USER CODE END PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  40:Src/main.c    **** /* USER CODE BEGIN PD */
  41:Src/main.c    **** /* USER CODE END PD */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  44:Src/main.c    **** /* USER CODE BEGIN PM */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* USER CODE END PM */
  47:Src/main.c    **** 
  48:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  49:Src/main.c    **** CAN_HandleTypeDef hcan1;
  50:Src/main.c    **** 
  51:Src/main.c    **** SD_HandleTypeDef hsd1;
  52:Src/main.c    **** 
  53:Src/main.c    **** TIM_HandleTypeDef htim2;
  54:Src/main.c    **** 
  55:Src/main.c    **** UART_HandleTypeDef huart3;
  56:Src/main.c    **** 
  57:Src/main.c    **** /* USER CODE BEGIN PV */
  58:Src/main.c    **** 
  59:Src/main.c    **** uint8_t i_debug;
  60:Src/main.c    **** extern canStruct can1,can3;
  61:Src/main.c    **** extern fifoPriority fifoPriority_t;
  62:Src/main.c    **** 
  63:Src/main.c    **** CAN_FilterTypeDef sFilter;
  64:Src/main.c    **** 
  65:Src/main.c    **** long int counter = 0;
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_SDMMC1_SD_Init(void);
  72:Src/main.c    **** static void MX_USART3_UART_Init(void);
  73:Src/main.c    **** static void MX_CAN1_Init(void);
  74:Src/main.c    **** static void MX_TIM2_Init(void);
  75:Src/main.c    **** static void MX_NVIC_Init(void);
  76:Src/main.c    **** /* USER CODE BEGIN PFP */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END PFP */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  81:Src/main.c    **** /* USER CODE BEGIN 0 */
  82:Src/main.c    **** 
  83:Src/main.c    **** /* USER CODE END 0 */
  84:Src/main.c    **** 
  85:Src/main.c    **** /**
  86:Src/main.c    ****   * @brief  The application entry point.
  87:Src/main.c    ****   * @retval int
  88:Src/main.c    ****   */
  89:Src/main.c    **** int main(void)
  90:Src/main.c    **** {
ARM GAS  /tmp/ccEC78z9.s 			page 3


  91:Src/main.c    ****   /* USER CODE BEGIN 1 */
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE END 1 */
  94:Src/main.c    ****   
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  99:Src/main.c    ****   HAL_Init();
 100:Src/main.c    **** 
 101:Src/main.c    ****   /* USER CODE BEGIN Init */
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE END Init */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* Configure the system clock */
 106:Src/main.c    ****   SystemClock_Config();
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 109:Src/main.c    **** 
 110:Src/main.c    ****   /* USER CODE END SysInit */
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* Initialize all configured peripherals */
 113:Src/main.c    ****   MX_GPIO_Init();
 114:Src/main.c    ****   MX_SDMMC1_SD_Init();
 115:Src/main.c    ****   MX_USART3_UART_Init();
 116:Src/main.c    ****   MX_FATFS_Init();
 117:Src/main.c    ****   MX_CAN1_Init();
 118:Src/main.c    ****   MX_TIM2_Init();
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Initialize interrupts */
 121:Src/main.c    ****   MX_NVIC_Init();
 122:Src/main.c    ****   /* USER CODE BEGIN 2 */
 123:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim2);
 124:Src/main.c    **** 
 125:Src/main.c    ****   can1.rx0_interrupt = CAN1_RX0_IRQn;
 126:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 127:Src/main.c    ****   can1.hcan = &hcan1;
 128:Src/main.c    **** 
 129:Src/main.c    ****   can_init();
 130:Src/main.c    **** 
 131:Src/main.c    ****   HAL_UART_Receive_IT(&huart3,(uint8_t*) &debug_rx[debug_rx_count], 1); //activate rx interrupt for
 132:Src/main.c    **** 
 133:Src/main.c    ****   current_state = STATE_INIT;
 134:Src/main.c    **** 
 135:Src/main.c    ****   
 136:Src/main.c    ****   /* USER CODE END 2 */
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* Infinite loop */
 139:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 140:Src/main.c    ****   while (1)
 141:Src/main.c    ****   {
 142:Src/main.c    ****     can1.dataTx[0] = 0;
 143:Src/main.c    **** 	  can1.dataTx[1] = 0;
 144:Src/main.c    **** 	  can1.dataTx[2] = 0;
 145:Src/main.c    **** 	  can1.dataTx[3] = 0;
 146:Src/main.c    **** 	  can1.dataTx[4] = counter >> 24;
 147:Src/main.c    **** 	  can1.dataTx[5] = counter >> 16;
ARM GAS  /tmp/ccEC78z9.s 			page 4


 148:Src/main.c    **** 	  can1.dataTx[6] = counter >> 8;
 149:Src/main.c    **** 	  can1.dataTx[7] = counter % 256;
 150:Src/main.c    **** 
 151:Src/main.c    **** 	  can1.tx_id = 0xA0;
 152:Src/main.c    **** 
 153:Src/main.c    **** 	  //CAN_Send(&can1, normalPriority);
 154:Src/main.c    **** 	  //HAL_Delay(500);
 155:Src/main.c    **** 
 156:Src/main.c    **** 	  //counter ++;
 157:Src/main.c    **** 
 158:Src/main.c    **** 	  if(current_state == STATE_INIT){
 159:Src/main.c    **** 		  init();
 160:Src/main.c    **** 	  }else if(current_state == STATE_IDLE){
 161:Src/main.c    **** 		  idle();
 162:Src/main.c    **** 	  }else if(current_state == STATE_CALIB){
 163:Src/main.c    **** 		  calib();
 164:Src/main.c    **** 	  }else if(current_state == STATE_SETUP){
 165:Src/main.c    **** 		  setup();
 166:Src/main.c    **** 	  }else if(current_state == STATE_RUN){
 167:Src/main.c    **** 		  run();
 168:Src/main.c    **** 	  }
 169:Src/main.c    ****     /* USER CODE END WHILE */
 170:Src/main.c    **** 
 171:Src/main.c    ****     /* USER CODE BEGIN 3 */
 172:Src/main.c    ****   }
 173:Src/main.c    ****   /* USER CODE END 3 */
 174:Src/main.c    **** }
 175:Src/main.c    **** 
 176:Src/main.c    **** /**
 177:Src/main.c    ****   * @brief System Clock Configuration
 178:Src/main.c    ****   * @retval None
 179:Src/main.c    ****   */
 180:Src/main.c    **** void SystemClock_Config(void)
 181:Src/main.c    **** {
 182:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 183:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 184:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 185:Src/main.c    **** 
 186:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 187:Src/main.c    ****   */
 188:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 189:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 190:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 191:Src/main.c    ****   */
 192:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 193:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 194:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 200:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 201:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 202:Src/main.c    ****   {
 203:Src/main.c    ****     Error_Handler();
 204:Src/main.c    ****   }
ARM GAS  /tmp/ccEC78z9.s 			page 5


 205:Src/main.c    ****   /** Activate the Over-Drive mode 
 206:Src/main.c    ****   */
 207:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 208:Src/main.c    ****   {
 209:Src/main.c    ****     Error_Handler();
 210:Src/main.c    ****   }
 211:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 212:Src/main.c    ****   */
 213:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 215:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 218:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 219:Src/main.c    **** 
 220:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     Error_Handler();
 223:Src/main.c    ****   }
 224:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC1
 225:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 226:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 227:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 228:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 229:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 230:Src/main.c    ****   {
 231:Src/main.c    ****     Error_Handler();
 232:Src/main.c    ****   }
 233:Src/main.c    **** }
 234:Src/main.c    **** 
 235:Src/main.c    **** /**
 236:Src/main.c    ****   * @brief NVIC Configuration.
 237:Src/main.c    ****   * @retval None
 238:Src/main.c    ****   */
 239:Src/main.c    **** static void MX_NVIC_Init(void)
 240:Src/main.c    **** {
 241:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 242:Src/main.c    ****   HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 243:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 244:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 245:Src/main.c    ****   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 246:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 247:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 248:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 249:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 250:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 251:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 252:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 253:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 254:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 255:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 256:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 257:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 258:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 259:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 260:Src/main.c    ****   HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 261:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
ARM GAS  /tmp/ccEC78z9.s 			page 6


 262:Src/main.c    **** }
 263:Src/main.c    **** 
 264:Src/main.c    **** /**
 265:Src/main.c    ****   * @brief CAN1 Initialization Function
 266:Src/main.c    ****   * @param None
 267:Src/main.c    ****   * @retval None
 268:Src/main.c    ****   */
 269:Src/main.c    **** static void MX_CAN1_Init(void)
 270:Src/main.c    **** {
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 277:Src/main.c    **** 
 278:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 279:Src/main.c    ****   hcan1.Instance = CAN1;
 280:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 281:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 282:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 283:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 284:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 285:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 286:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 287:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 288:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 289:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 290:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 291:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 292:Src/main.c    ****   {
 293:Src/main.c    ****     Error_Handler();
 294:Src/main.c    ****   }
 295:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 296:Src/main.c    **** 
 297:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 298:Src/main.c    **** 
 299:Src/main.c    **** }
 300:Src/main.c    **** 
 301:Src/main.c    **** /**
 302:Src/main.c    ****   * @brief SDMMC1 Initialization Function
 303:Src/main.c    ****   * @param None
 304:Src/main.c    ****   * @retval None
 305:Src/main.c    ****   */
 306:Src/main.c    **** static void MX_SDMMC1_SD_Init(void)
 307:Src/main.c    **** {
  26              		.loc 1 307 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 308:Src/main.c    **** 
 309:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 0 */
 310:Src/main.c    **** 
 311:Src/main.c    ****   /* USER CODE END SDMMC1_Init 0 */
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 1 */
ARM GAS  /tmp/ccEC78z9.s 			page 7


 314:Src/main.c    **** 
 315:Src/main.c    ****   /* USER CODE END SDMMC1_Init 1 */
 316:Src/main.c    ****   hsd1.Instance = SDMMC1;
  31              		.loc 1 316 0
  32 0000 054B     		ldr	r3, .L2
  33 0002 064A     		ldr	r2, .L2+4
  34 0004 1A60     		str	r2, [r3]
 317:Src/main.c    ****   hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  35              		.loc 1 317 0
  36 0006 0022     		movs	r2, #0
  37 0008 5A60     		str	r2, [r3, #4]
 318:Src/main.c    ****   hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  38              		.loc 1 318 0
  39 000a 9A60     		str	r2, [r3, #8]
 319:Src/main.c    ****   hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  40              		.loc 1 319 0
  41 000c DA60     		str	r2, [r3, #12]
 320:Src/main.c    ****   hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  42              		.loc 1 320 0
  43 000e 1A61     		str	r2, [r3, #16]
 321:Src/main.c    ****   hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  44              		.loc 1 321 0
  45 0010 5A61     		str	r2, [r3, #20]
 322:Src/main.c    ****   hsd1.Init.ClockDiv = 1;
  46              		.loc 1 322 0
  47 0012 0122     		movs	r2, #1
  48 0014 9A61     		str	r2, [r3, #24]
  49 0016 7047     		bx	lr
  50              	.L3:
  51              		.align	2
  52              	.L2:
  53 0018 00000000 		.word	hsd1
  54 001c 002C0140 		.word	1073818624
  55              		.cfi_endproc
  56              	.LFE146:
  58              		.section	.text.MX_GPIO_Init,"ax",%progbits
  59              		.align	1
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv5-d16
  65              	MX_GPIO_Init:
  66              	.LFB149:
 323:Src/main.c    ****   /* USER CODE BEGIN SDMMC1_Init 2 */
 324:Src/main.c    **** 
 325:Src/main.c    ****   /* USER CODE END SDMMC1_Init 2 */
 326:Src/main.c    **** 
 327:Src/main.c    **** }
 328:Src/main.c    **** 
 329:Src/main.c    **** /**
 330:Src/main.c    ****   * @brief TIM2 Initialization Function
 331:Src/main.c    ****   * @param None
 332:Src/main.c    ****   * @retval None
 333:Src/main.c    ****   */
 334:Src/main.c    **** static void MX_TIM2_Init(void)
 335:Src/main.c    **** {
 336:Src/main.c    **** 
ARM GAS  /tmp/ccEC78z9.s 			page 8


 337:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 338:Src/main.c    **** 
 339:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 340:Src/main.c    **** 
 341:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 342:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 343:Src/main.c    **** 
 344:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 345:Src/main.c    **** 
 346:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 347:Src/main.c    ****   htim2.Instance = TIM2;
 348:Src/main.c    ****   htim2.Init.Prescaler = 108;
 349:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 350:Src/main.c    ****   htim2.Init.Period = 1000;
 351:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 352:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 353:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 354:Src/main.c    ****   {
 355:Src/main.c    ****     Error_Handler();
 356:Src/main.c    ****   }
 357:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 358:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 359:Src/main.c    ****   {
 360:Src/main.c    ****     Error_Handler();
 361:Src/main.c    ****   }
 362:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 363:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 364:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 365:Src/main.c    ****   {
 366:Src/main.c    ****     Error_Handler();
 367:Src/main.c    ****   }
 368:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 369:Src/main.c    **** 
 370:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 371:Src/main.c    **** 
 372:Src/main.c    **** }
 373:Src/main.c    **** 
 374:Src/main.c    **** /**
 375:Src/main.c    ****   * @brief USART3 Initialization Function
 376:Src/main.c    ****   * @param None
 377:Src/main.c    ****   * @retval None
 378:Src/main.c    ****   */
 379:Src/main.c    **** static void MX_USART3_UART_Init(void)
 380:Src/main.c    **** {
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 383:Src/main.c    **** 
 384:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 385:Src/main.c    **** 
 386:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 387:Src/main.c    **** 
 388:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 389:Src/main.c    ****   huart3.Instance = USART3;
 390:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 391:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 392:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 393:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
ARM GAS  /tmp/ccEC78z9.s 			page 9


 394:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 395:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 396:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 397:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 398:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 399:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 400:Src/main.c    ****   {
 401:Src/main.c    ****     Error_Handler();
 402:Src/main.c    ****   }
 403:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 404:Src/main.c    **** 
 405:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 406:Src/main.c    **** 
 407:Src/main.c    **** }
 408:Src/main.c    **** 
 409:Src/main.c    **** /**
 410:Src/main.c    ****   * @brief GPIO Initialization Function
 411:Src/main.c    ****   * @param None
 412:Src/main.c    ****   * @retval None
 413:Src/main.c    ****   */
 414:Src/main.c    **** static void MX_GPIO_Init(void)
 415:Src/main.c    **** {
  67              		.loc 1 415 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 40
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 30B5     		push	{r4, r5, lr}
  72              	.LCFI0:
  73              		.cfi_def_cfa_offset 12
  74              		.cfi_offset 4, -12
  75              		.cfi_offset 5, -8
  76              		.cfi_offset 14, -4
  77 0002 8BB0     		sub	sp, sp, #44
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 56
 416:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  80              		.loc 1 416 0
  81 0004 0024     		movs	r4, #0
  82 0006 0594     		str	r4, [sp, #20]
  83 0008 0694     		str	r4, [sp, #24]
  84 000a 0794     		str	r4, [sp, #28]
  85 000c 0894     		str	r4, [sp, #32]
  86 000e 0994     		str	r4, [sp, #36]
  87              	.LBB2:
 417:Src/main.c    **** 
 418:Src/main.c    ****   /* GPIO Ports Clock Enable */
 419:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  88              		.loc 1 419 0
  89 0010 204B     		ldr	r3, .L6
  90 0012 1A6B     		ldr	r2, [r3, #48]
  91 0014 42F00102 		orr	r2, r2, #1
  92 0018 1A63     		str	r2, [r3, #48]
  93 001a 1A6B     		ldr	r2, [r3, #48]
  94 001c 02F00102 		and	r2, r2, #1
  95 0020 0192     		str	r2, [sp, #4]
  96 0022 019A     		ldr	r2, [sp, #4]
  97              	.LBE2:
ARM GAS  /tmp/ccEC78z9.s 			page 10


  98              	.LBB3:
 420:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  99              		.loc 1 420 0
 100 0024 1A6B     		ldr	r2, [r3, #48]
 101 0026 42F00202 		orr	r2, r2, #2
 102 002a 1A63     		str	r2, [r3, #48]
 103 002c 1A6B     		ldr	r2, [r3, #48]
 104 002e 02F00202 		and	r2, r2, #2
 105 0032 0292     		str	r2, [sp, #8]
 106 0034 029A     		ldr	r2, [sp, #8]
 107              	.LBE3:
 108              	.LBB4:
 421:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 109              		.loc 1 421 0
 110 0036 1A6B     		ldr	r2, [r3, #48]
 111 0038 42F00802 		orr	r2, r2, #8
 112 003c 1A63     		str	r2, [r3, #48]
 113 003e 1A6B     		ldr	r2, [r3, #48]
 114 0040 02F00802 		and	r2, r2, #8
 115 0044 0392     		str	r2, [sp, #12]
 116 0046 039A     		ldr	r2, [sp, #12]
 117              	.LBE4:
 118              	.LBB5:
 422:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 119              		.loc 1 422 0
 120 0048 1A6B     		ldr	r2, [r3, #48]
 121 004a 42F00402 		orr	r2, r2, #4
 122 004e 1A63     		str	r2, [r3, #48]
 123 0050 1B6B     		ldr	r3, [r3, #48]
 124 0052 03F00403 		and	r3, r3, #4
 125 0056 0493     		str	r3, [sp, #16]
 126 0058 049B     		ldr	r3, [sp, #16]
 127              	.LBE5:
 423:Src/main.c    **** 
 424:Src/main.c    ****   /*Configure GPIO pin Output Level */
 425:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_green_Pin|LED_red_Pin|LED_blue_Pin, GPIO_PIN_RESET);
 128              		.loc 1 425 0
 129 005a 0F4D     		ldr	r5, .L6+4
 130 005c 2246     		mov	r2, r4
 131 005e 44F28101 		movw	r1, #16513
 132 0062 2846     		mov	r0, r5
 133 0064 FFF7FEFF 		bl	HAL_GPIO_WritePin
 134              	.LVL0:
 426:Src/main.c    **** 
 427:Src/main.c    ****   /*Configure GPIO pin : SD_detect_Pin */
 428:Src/main.c    ****   GPIO_InitStruct.Pin = SD_detect_Pin;
 135              		.loc 1 428 0
 136 0068 2023     		movs	r3, #32
 137 006a 0593     		str	r3, [sp, #20]
 429:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 138              		.loc 1 429 0
 139 006c 0694     		str	r4, [sp, #24]
 430:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 140              		.loc 1 430 0
 141 006e 0794     		str	r4, [sp, #28]
 431:Src/main.c    ****   HAL_GPIO_Init(SD_detect_GPIO_Port, &GPIO_InitStruct);
 142              		.loc 1 431 0
ARM GAS  /tmp/ccEC78z9.s 			page 11


 143 0070 05A9     		add	r1, sp, #20
 144 0072 0A48     		ldr	r0, .L6+8
 145 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL1:
 432:Src/main.c    **** 
 433:Src/main.c    ****   /*Configure GPIO pins : LED_green_Pin LED_red_Pin LED_blue_Pin */
 434:Src/main.c    ****   GPIO_InitStruct.Pin = LED_green_Pin|LED_red_Pin|LED_blue_Pin;
 147              		.loc 1 434 0
 148 0078 44F28103 		movw	r3, #16513
 149 007c 0593     		str	r3, [sp, #20]
 435:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 150              		.loc 1 435 0
 151 007e 0123     		movs	r3, #1
 152 0080 0693     		str	r3, [sp, #24]
 436:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 153              		.loc 1 436 0
 154 0082 0794     		str	r4, [sp, #28]
 437:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 155              		.loc 1 437 0
 156 0084 0894     		str	r4, [sp, #32]
 438:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 157              		.loc 1 438 0
 158 0086 05A9     		add	r1, sp, #20
 159 0088 2846     		mov	r0, r5
 160 008a FFF7FEFF 		bl	HAL_GPIO_Init
 161              	.LVL2:
 439:Src/main.c    **** 
 440:Src/main.c    **** }
 162              		.loc 1 440 0
 163 008e 0BB0     		add	sp, sp, #44
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 12
 166              		@ sp needed
 167 0090 30BD     		pop	{r4, r5, pc}
 168              	.L7:
 169 0092 00BF     		.align	2
 170              	.L6:
 171 0094 00380240 		.word	1073887232
 172 0098 00040240 		.word	1073873920
 173 009c 00000240 		.word	1073872896
 174              		.cfi_endproc
 175              	.LFE149:
 177              		.section	.text.MX_NVIC_Init,"ax",%progbits
 178              		.align	1
 179              		.syntax unified
 180              		.thumb
 181              		.thumb_func
 182              		.fpu fpv5-d16
 184              	MX_NVIC_Init:
 185              	.LFB144:
 240:Src/main.c    ****   /* SDMMC1_IRQn interrupt configuration */
 186              		.loc 1 240 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190 0000 08B5     		push	{r3, lr}
 191              	.LCFI3:
ARM GAS  /tmp/ccEC78z9.s 			page 12


 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 3, -8
 194              		.cfi_offset 14, -4
 242:Src/main.c    ****   HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 195              		.loc 1 242 0
 196 0002 0022     		movs	r2, #0
 197 0004 1146     		mov	r1, r2
 198 0006 3120     		movs	r0, #49
 199 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 200              	.LVL3:
 243:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 201              		.loc 1 243 0
 202 000c 3120     		movs	r0, #49
 203 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 204              	.LVL4:
 245:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 205              		.loc 1 245 0
 206 0012 0022     		movs	r2, #0
 207 0014 1146     		mov	r1, r2
 208 0016 2720     		movs	r0, #39
 209 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 210              	.LVL5:
 246:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 211              		.loc 1 246 0
 212 001c 2720     		movs	r0, #39
 213 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 214              	.LVL6:
 248:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 215              		.loc 1 248 0
 216 0022 0022     		movs	r2, #0
 217 0024 1146     		mov	r1, r2
 218 0026 1620     		movs	r0, #22
 219 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 220              	.LVL7:
 249:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 221              		.loc 1 249 0
 222 002c 1620     		movs	r0, #22
 223 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 224              	.LVL8:
 251:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 225              		.loc 1 251 0
 226 0032 0022     		movs	r2, #0
 227 0034 1146     		mov	r1, r2
 228 0036 1520     		movs	r0, #21
 229 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 230              	.LVL9:
 252:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 231              		.loc 1 252 0
 232 003c 1520     		movs	r0, #21
 233 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 234              	.LVL10:
 254:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 235              		.loc 1 254 0
 236 0042 0022     		movs	r2, #0
 237 0044 1146     		mov	r1, r2
 238 0046 1420     		movs	r0, #20
 239 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/ccEC78z9.s 			page 13


 240              	.LVL11:
 255:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 241              		.loc 1 255 0
 242 004c 1420     		movs	r0, #20
 243 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 244              	.LVL12:
 257:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 245              		.loc 1 257 0
 246 0052 0022     		movs	r2, #0
 247 0054 1146     		mov	r1, r2
 248 0056 1320     		movs	r0, #19
 249 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 250              	.LVL13:
 258:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 251              		.loc 1 258 0
 252 005c 1320     		movs	r0, #19
 253 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 254              	.LVL14:
 260:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
 255              		.loc 1 260 0
 256 0062 0022     		movs	r2, #0
 257 0064 1146     		mov	r1, r2
 258 0066 1C20     		movs	r0, #28
 259 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 260              	.LVL15:
 261:Src/main.c    **** }
 261              		.loc 1 261 0
 262 006c 1C20     		movs	r0, #28
 263 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 264              	.LVL16:
 265 0072 08BD     		pop	{r3, pc}
 266              		.cfi_endproc
 267              	.LFE144:
 269              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 270              		.align	1
 271              		.global	HAL_TIM_PeriodElapsedCallback
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv5-d16
 277              	HAL_TIM_PeriodElapsedCallback:
 278              	.LFB150:
 441:Src/main.c    **** 
 442:Src/main.c    **** /* USER CODE BEGIN 4 */
 443:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 279              		.loc 1 443 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL17:
 284 0000 08B5     		push	{r3, lr}
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 3, -8
 288              		.cfi_offset 14, -4
 444:Src/main.c    **** 	if(htim == &htim2){
 289              		.loc 1 444 0
ARM GAS  /tmp/ccEC78z9.s 			page 14


 290 0002 2B4B     		ldr	r3, .L20
 291 0004 8342     		cmp	r3, r0
 292 0006 00D0     		beq	.L16
 293              	.LVL18:
 294              	.L10:
 295 0008 08BD     		pop	{r3, pc}
 296              	.LVL19:
 297              	.L16:
 445:Src/main.c    **** 		count_ms += 1;
 298              		.loc 1 445 0
 299 000a 2A4A     		ldr	r2, .L20+4
 300 000c 1388     		ldrh	r3, [r2]
 301 000e 0133     		adds	r3, r3, #1
 302 0010 9BB2     		uxth	r3, r3
 303 0012 1380     		strh	r3, [r2]	@ movhi
 446:Src/main.c    **** 		if(count_ms == 100){
 304              		.loc 1 446 0
 305 0014 642B     		cmp	r3, #100
 306 0016 F7D1     		bne	.L10
 447:Src/main.c    **** 			count_ms = 0;
 307              		.loc 1 447 0
 308 0018 0022     		movs	r2, #0
 309 001a 264B     		ldr	r3, .L20+4
 310 001c 1A80     		strh	r2, [r3]	@ movhi
 448:Src/main.c    **** 			count_dec++;
 311              		.loc 1 448 0
 312 001e 264A     		ldr	r2, .L20+8
 313 0020 1388     		ldrh	r3, [r2]
 314 0022 0133     		adds	r3, r3, #1
 315 0024 1380     		strh	r3, [r2]	@ movhi
 449:Src/main.c    **** 			//--- put your counter here (count each 0,1 sec) ---//
 450:Src/main.c    **** 			count_inverter++;
 316              		.loc 1 450 0
 317 0026 254B     		ldr	r3, .L20+12
 318 0028 1A88     		ldrh	r2, [r3]
 319 002a 0132     		adds	r2, r2, #1
 320 002c 92B2     		uxth	r2, r2
 321 002e 1A80     		strh	r2, [r3]	@ movhi
 451:Src/main.c    **** 			count_imu++;
 322              		.loc 1 451 0
 323 0030 2349     		ldr	r1, .L20+16
 324 0032 0B88     		ldrh	r3, [r1]
 325 0034 0133     		adds	r3, r3, #1
 326 0036 9BB2     		uxth	r3, r3
 327 0038 0B80     		strh	r3, [r1]	@ movhi
 452:Src/main.c    **** 			if(count_inverter == 10){
 328              		.loc 1 452 0
 329 003a 0A2A     		cmp	r2, #10
 330 003c 01D0     		beq	.L12
 453:Src/main.c    **** 				//TODO: implementare funzione
 454:Src/main.c    **** 			}else if(count_inverter == 11){
 331              		.loc 1 454 0
 332 003e 0B2A     		cmp	r2, #11
 333 0040 23D0     		beq	.L17
 334              	.L12:
 455:Src/main.c    **** 				count_inverter = 10;
 456:Src/main.c    **** 			}
ARM GAS  /tmp/ccEC78z9.s 			page 15


 457:Src/main.c    **** 			if(count_imu == 10){
 335              		.loc 1 457 0
 336 0042 0A2B     		cmp	r3, #10
 337 0044 25D0     		beq	.L18
 458:Src/main.c    **** 				// imu non presente //
 459:Src/main.c    **** 				imu_connected = 0; //imu not connected
 460:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 10
 461:Src/main.c    **** 			}else if(count_imu == 11){
 338              		.loc 1 461 0
 339 0046 0B2B     		cmp	r3, #11
 340 0048 2DD0     		beq	.L19
 341              	.LVL20:
 342              	.L14:
 462:Src/main.c    **** 				count_imu = 10;
 463:Src/main.c    **** 			}
 464:Src/main.c    **** 			if(count_dec == 10){
 343              		.loc 1 464 0
 344 004a 1B4B     		ldr	r3, .L20+8
 345 004c 1B88     		ldrh	r3, [r3]
 346 004e 0A2B     		cmp	r3, #10
 347 0050 DAD1     		bne	.L10
 465:Src/main.c    **** 				count_dec = 0;
 348              		.loc 1 465 0
 349 0052 0022     		movs	r2, #0
 350 0054 184B     		ldr	r3, .L20+8
 351 0056 1A80     		strh	r2, [r3]	@ movhi
 466:Src/main.c    **** 				count_sec++;
 352              		.loc 1 466 0
 353 0058 1A4A     		ldr	r2, .L20+20
 354 005a 1388     		ldrh	r3, [r2]
 355 005c 0133     		adds	r3, r3, #1
 356 005e 9BB2     		uxth	r3, r3
 357 0060 1380     		strh	r3, [r2]	@ movhi
 467:Src/main.c    **** 				if(count_sec == 60){
 358              		.loc 1 467 0
 359 0062 3C2B     		cmp	r3, #60
 360 0064 D0D1     		bne	.L10
 468:Src/main.c    **** 					count_sec = 0;
 361              		.loc 1 468 0
 362 0066 0022     		movs	r2, #0
 363 0068 164B     		ldr	r3, .L20+20
 364 006a 1A80     		strh	r2, [r3]	@ movhi
 469:Src/main.c    **** 					count_min++;
 365              		.loc 1 469 0
 366 006c 164A     		ldr	r2, .L20+24
 367 006e 1388     		ldrh	r3, [r2]
 368 0070 0133     		adds	r3, r3, #1
 369 0072 9BB2     		uxth	r3, r3
 370 0074 1380     		strh	r3, [r2]	@ movhi
 470:Src/main.c    **** 					if(count_min == 60){
 371              		.loc 1 470 0
 372 0076 3C2B     		cmp	r3, #60
 373 0078 C6D1     		bne	.L10
 471:Src/main.c    **** 						count_min = 0;
 374              		.loc 1 471 0
 375 007a 0022     		movs	r2, #0
 376 007c 124B     		ldr	r3, .L20+24
ARM GAS  /tmp/ccEC78z9.s 			page 16


 377 007e 1A80     		strh	r2, [r3]	@ movhi
 472:Src/main.c    **** 						count_hour++;
 378              		.loc 1 472 0
 379 0080 124A     		ldr	r2, .L20+28
 380 0082 1388     		ldrh	r3, [r2]
 381 0084 0133     		adds	r3, r3, #1
 382 0086 1380     		strh	r3, [r2]	@ movhi
 473:Src/main.c    **** 					}
 474:Src/main.c    **** 				}
 475:Src/main.c    **** 			}
 476:Src/main.c    **** 		}
 477:Src/main.c    **** 	}
 478:Src/main.c    **** }
 383              		.loc 1 478 0
 384 0088 BEE7     		b	.L10
 385              	.LVL21:
 386              	.L17:
 455:Src/main.c    **** 			}
 387              		.loc 1 455 0
 388 008a 0A21     		movs	r1, #10
 389 008c 0B4A     		ldr	r2, .L20+12
 390 008e 1180     		strh	r1, [r2]	@ movhi
 391 0090 D7E7     		b	.L12
 392              	.L18:
 459:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)"IMU non presente\r\n", strlen("IMU non presente\r\n"), 10
 393              		.loc 1 459 0
 394 0092 0022     		movs	r2, #0
 395 0094 0E4B     		ldr	r3, .L20+32
 396 0096 1A70     		strb	r2, [r3]
 460:Src/main.c    **** 			}else if(count_imu == 11){
 397              		.loc 1 460 0
 398 0098 0A23     		movs	r3, #10
 399 009a 1222     		movs	r2, #18
 400 009c 0D49     		ldr	r1, .L20+36
 401 009e 0E48     		ldr	r0, .L20+40
 402              	.LVL22:
 403 00a0 FFF7FEFF 		bl	HAL_UART_Transmit
 404              	.LVL23:
 405 00a4 D1E7     		b	.L14
 406              	.LVL24:
 407              	.L19:
 462:Src/main.c    **** 			}
 408              		.loc 1 462 0
 409 00a6 0A22     		movs	r2, #10
 410 00a8 054B     		ldr	r3, .L20+16
 411 00aa 1A80     		strh	r2, [r3]	@ movhi
 412 00ac CDE7     		b	.L14
 413              	.L21:
 414 00ae 00BF     		.align	2
 415              	.L20:
 416 00b0 00000000 		.word	htim2
 417 00b4 00000000 		.word	count_ms
 418 00b8 00000000 		.word	count_dec
 419 00bc 00000000 		.word	count_inverter
 420 00c0 00000000 		.word	count_imu
 421 00c4 00000000 		.word	count_sec
 422 00c8 00000000 		.word	count_min
ARM GAS  /tmp/ccEC78z9.s 			page 17


 423 00cc 00000000 		.word	count_hour
 424 00d0 00000000 		.word	imu_connected
 425 00d4 00000000 		.word	.LC0
 426 00d8 00000000 		.word	huart3
 427              		.cfi_endproc
 428              	.LFE150:
 430              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
 431              		.align	1
 432              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu fpv5-d16
 438              	HAL_CAN_RxFifo0MsgPendingCallback:
 439              	.LFB151:
 479:Src/main.c    **** 
 480:Src/main.c    **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 440              		.loc 1 480 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 32
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              	.LVL25:
 445 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 446              	.LCFI5:
 447              		.cfi_def_cfa_offset 20
 448              		.cfi_offset 4, -20
 449              		.cfi_offset 5, -16
 450              		.cfi_offset 6, -12
 451              		.cfi_offset 7, -8
 452              		.cfi_offset 14, -4
 453 0002 8FB0     		sub	sp, sp, #60
 454              	.LCFI6:
 455              		.cfi_def_cfa_offset 80
 456 0004 0446     		mov	r4, r0
 481:Src/main.c    **** 	/*sprintf(txt, "%d\r\n", HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 482:Src/main.c    **** 	HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 10);*/
 483:Src/main.c    **** 
 484:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 457              		.loc 1 484 0
 458 0006 8021     		movs	r1, #128
 459 0008 1E48     		ldr	r0, .L26
 460              	.LVL26:
 461 000a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 462              	.LVL27:
 485:Src/main.c    **** 	if (hcan == &hcan1){
 463              		.loc 1 485 0
 464 000e 1E4B     		ldr	r3, .L26+4
 465 0010 9C42     		cmp	r4, r3
 466 0012 01D0     		beq	.L25
 467              	.LVL28:
 468              	.L22:
 486:Src/main.c    **** 		//HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO0\r\n", strlen("rx on FIFO0\r\n"), 10);
 487:Src/main.c    **** 		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 488:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 489:Src/main.c    **** 			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &header, can1.dataRx);
 490:Src/main.c    **** 			can1.rx_id = header.StdId;
 491:Src/main.c    **** 			can1.rx_size = header.DLC;
ARM GAS  /tmp/ccEC78z9.s 			page 18


 492:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 493:Src/main.c    **** 			sprintf(txt,"DATA: %d %d %d %d %d %d %d %d\r\n",can1.dataRx[0],can1.dataRx[1],can1.dataRx[2],can
 494:Src/main.c    **** 			HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 100);
 495:Src/main.c    **** 			//HAL_UART_Transmit(&huart3, (uint8_t*)"ciao2\r\n", strlen("ciao2\r\n"), 10);
 496:Src/main.c    **** 
 497:Src/main.c    **** 
 498:Src/main.c    **** 		}
 499:Src/main.c    **** 	}
 500:Src/main.c    **** }
 469              		.loc 1 500 0
 470 0014 0FB0     		add	sp, sp, #60
 471              	.LCFI7:
 472              		.cfi_remember_state
 473              		.cfi_def_cfa_offset 20
 474              		@ sp needed
 475 0016 F0BD     		pop	{r4, r5, r6, r7, pc}
 476              	.LVL29:
 477              	.L25:
 478              	.LCFI8:
 479              		.cfi_restore_state
 487:Src/main.c    **** 			CAN_RxHeaderTypeDef header;
 480              		.loc 1 487 0
 481 0018 0021     		movs	r1, #0
 482 001a 1846     		mov	r0, r3
 483 001c FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 484              	.LVL30:
 485 0020 0028     		cmp	r0, #0
 486 0022 F7D0     		beq	.L22
 487              	.LBB6:
 489:Src/main.c    **** 			can1.rx_id = header.StdId;
 488              		.loc 1 489 0
 489 0024 194C     		ldr	r4, .L26+8
 490              	.LVL31:
 491 0026 2346     		mov	r3, r4
 492 0028 07AA     		add	r2, sp, #28
 493 002a 0021     		movs	r1, #0
 494 002c 1648     		ldr	r0, .L26+4
 495 002e FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 496              	.LVL32:
 490:Src/main.c    **** 			can1.rx_size = header.DLC;
 497              		.loc 1 490 0
 498 0032 079B     		ldr	r3, [sp, #28]
 499 0034 6361     		str	r3, [r4, #20]
 491:Src/main.c    **** 			fifoRxDataCAN_push(&can1);
 500              		.loc 1 491 0
 501 0036 0B9B     		ldr	r3, [sp, #44]
 502 0038 44F80C3C 		str	r3, [r4, #-12]
 490:Src/main.c    **** 			can1.rx_size = header.DLC;
 503              		.loc 1 490 0
 504 003c 103C     		subs	r4, r4, #16
 492:Src/main.c    **** 			sprintf(txt,"DATA: %d %d %d %d %d %d %d %d\r\n",can1.dataRx[0],can1.dataRx[1],can1.dataRx[2],can
 505              		.loc 1 492 0
 506 003e 2046     		mov	r0, r4
 507 0040 FFF7FEFF 		bl	fifoRxDataCAN_push
 508              	.LVL33:
 493:Src/main.c    **** 			HAL_UART_Transmit(&huart3, (uint8_t*)txt, strlen(txt), 100);
 509              		.loc 1 493 0
ARM GAS  /tmp/ccEC78z9.s 			page 19


 510 0044 227C     		ldrb	r2, [r4, #16]	@ zero_extendqisi2
 511 0046 637C     		ldrb	r3, [r4, #17]	@ zero_extendqisi2
 512 0048 A17C     		ldrb	r1, [r4, #18]	@ zero_extendqisi2
 513 004a E07C     		ldrb	r0, [r4, #19]	@ zero_extendqisi2
 514 004c 257D     		ldrb	r5, [r4, #20]	@ zero_extendqisi2
 515 004e 667D     		ldrb	r6, [r4, #21]	@ zero_extendqisi2
 516 0050 A77D     		ldrb	r7, [r4, #22]	@ zero_extendqisi2
 517 0052 94F817E0 		ldrb	lr, [r4, #23]	@ zero_extendqisi2
 518 0056 0E4C     		ldr	r4, .L26+12
 519 0058 CDF814E0 		str	lr, [sp, #20]
 520 005c 0497     		str	r7, [sp, #16]
 521 005e 0396     		str	r6, [sp, #12]
 522 0060 0295     		str	r5, [sp, #8]
 523 0062 0190     		str	r0, [sp, #4]
 524 0064 0091     		str	r1, [sp]
 525 0066 0B49     		ldr	r1, .L26+16
 526 0068 2046     		mov	r0, r4
 527 006a FFF7FEFF 		bl	sprintf
 528              	.LVL34:
 494:Src/main.c    **** 			//HAL_UART_Transmit(&huart3, (uint8_t*)"ciao2\r\n", strlen("ciao2\r\n"), 10);
 529              		.loc 1 494 0
 530 006e 2046     		mov	r0, r4
 531 0070 FFF7FEFF 		bl	strlen
 532              	.LVL35:
 533 0074 6423     		movs	r3, #100
 534 0076 82B2     		uxth	r2, r0
 535 0078 2146     		mov	r1, r4
 536 007a 0748     		ldr	r0, .L26+20
 537 007c FFF7FEFF 		bl	HAL_UART_Transmit
 538              	.LVL36:
 539              	.LBE6:
 540              		.loc 1 500 0
 541 0080 C8E7     		b	.L22
 542              	.L27:
 543 0082 00BF     		.align	2
 544              	.L26:
 545 0084 00040240 		.word	1073873920
 546 0088 00000000 		.word	hcan1
 547 008c 10000000 		.word	can1+16
 548 0090 00000000 		.word	txt
 549 0094 00000000 		.word	.LC1
 550 0098 00000000 		.word	huart3
 551              		.cfi_endproc
 552              	.LFE151:
 554              		.section	.text.HAL_CAN_RxFifo1MsgPendingCallback,"ax",%progbits
 555              		.align	1
 556              		.global	HAL_CAN_RxFifo1MsgPendingCallback
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu fpv5-d16
 562              	HAL_CAN_RxFifo1MsgPendingCallback:
 563              	.LFB152:
 501:Src/main.c    **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 564              		.loc 1 501 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccEC78z9.s 			page 20


 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              	.LVL37:
 569 0000 08B5     		push	{r3, lr}
 570              	.LCFI9:
 571              		.cfi_def_cfa_offset 8
 572              		.cfi_offset 3, -8
 573              		.cfi_offset 14, -4
 502:Src/main.c    **** 	if (hcan == &hcan1){
 574              		.loc 1 502 0
 575 0002 054B     		ldr	r3, .L32
 576 0004 8342     		cmp	r3, r0
 577 0006 00D0     		beq	.L31
 578              	.LVL38:
 579              	.L28:
 580 0008 08BD     		pop	{r3, pc}
 581              	.LVL39:
 582              	.L31:
 503:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"rx on FIFO1\r\n", strlen("rx on FIFO1\r\n"), 10);
 583              		.loc 1 503 0
 584 000a 0A23     		movs	r3, #10
 585 000c 0D22     		movs	r2, #13
 586 000e 0349     		ldr	r1, .L32+4
 587 0010 0348     		ldr	r0, .L32+8
 588              	.LVL40:
 589 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 590              	.LVL41:
 504:Src/main.c    **** 	}
 505:Src/main.c    **** }
 591              		.loc 1 505 0
 592 0016 F7E7     		b	.L28
 593              	.L33:
 594              		.align	2
 595              	.L32:
 596 0018 00000000 		.word	hcan1
 597 001c 00000000 		.word	.LC2
 598 0020 00000000 		.word	huart3
 599              		.cfi_endproc
 600              	.LFE152:
 602              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 603              		.align	1
 604              		.global	HAL_CAN_RxFifo0FullCallback
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu fpv5-d16
 610              	HAL_CAN_RxFifo0FullCallback:
 611              	.LFB153:
 506:Src/main.c    **** 
 507:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 612              		.loc 1 507 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              	.LVL42:
 617 0000 08B5     		push	{r3, lr}
 618              	.LCFI10:
 619              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccEC78z9.s 			page 21


 620              		.cfi_offset 3, -8
 621              		.cfi_offset 14, -4
 508:Src/main.c    **** 	if (hcan == &hcan1){
 622              		.loc 1 508 0
 623 0002 054B     		ldr	r3, .L38
 624 0004 8342     		cmp	r3, r0
 625 0006 00D0     		beq	.L37
 626              	.LVL43:
 627              	.L34:
 628 0008 08BD     		pop	{r3, pc}
 629              	.LVL44:
 630              	.L37:
 509:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO0 FULL\r\n", strlen("FIFO0 FULL\r\n"), 10);
 631              		.loc 1 509 0
 632 000a 0A23     		movs	r3, #10
 633 000c 0C22     		movs	r2, #12
 634 000e 0349     		ldr	r1, .L38+4
 635 0010 0348     		ldr	r0, .L38+8
 636              	.LVL45:
 637 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 638              	.LVL46:
 510:Src/main.c    **** 	}
 511:Src/main.c    **** }
 639              		.loc 1 511 0
 640 0016 F7E7     		b	.L34
 641              	.L39:
 642              		.align	2
 643              	.L38:
 644 0018 00000000 		.word	hcan1
 645 001c 00000000 		.word	.LC3
 646 0020 00000000 		.word	huart3
 647              		.cfi_endproc
 648              	.LFE153:
 650              		.section	.text.HAL_CAN_RxFifo1FullCallback,"ax",%progbits
 651              		.align	1
 652              		.global	HAL_CAN_RxFifo1FullCallback
 653              		.syntax unified
 654              		.thumb
 655              		.thumb_func
 656              		.fpu fpv5-d16
 658              	HAL_CAN_RxFifo1FullCallback:
 659              	.LFB154:
 512:Src/main.c    **** void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan){
 660              		.loc 1 512 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              	.LVL47:
 665 0000 08B5     		push	{r3, lr}
 666              	.LCFI11:
 667              		.cfi_def_cfa_offset 8
 668              		.cfi_offset 3, -8
 669              		.cfi_offset 14, -4
 513:Src/main.c    **** 	if (hcan == &hcan1){
 670              		.loc 1 513 0
 671 0002 054B     		ldr	r3, .L44
 672 0004 8342     		cmp	r3, r0
ARM GAS  /tmp/ccEC78z9.s 			page 22


 673 0006 00D0     		beq	.L43
 674              	.LVL48:
 675              	.L40:
 676 0008 08BD     		pop	{r3, pc}
 677              	.LVL49:
 678              	.L43:
 514:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"FIFO1 FULL\r\n", strlen("FIFO1 FULL\r\n"), 10);
 679              		.loc 1 514 0
 680 000a 0A23     		movs	r3, #10
 681 000c 0C22     		movs	r2, #12
 682 000e 0349     		ldr	r1, .L44+4
 683 0010 0348     		ldr	r0, .L44+8
 684              	.LVL50:
 685 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 686              	.LVL51:
 515:Src/main.c    **** 	}
 516:Src/main.c    **** }
 687              		.loc 1 516 0
 688 0016 F7E7     		b	.L40
 689              	.L45:
 690              		.align	2
 691              	.L44:
 692 0018 00000000 		.word	hcan1
 693 001c 00000000 		.word	.LC4
 694 0020 00000000 		.word	huart3
 695              		.cfi_endproc
 696              	.LFE154:
 698              		.section	.text.HAL_CAN_TxMailbox0CompleteCallback,"ax",%progbits
 699              		.align	1
 700              		.global	HAL_CAN_TxMailbox0CompleteCallback
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv5-d16
 706              	HAL_CAN_TxMailbox0CompleteCallback:
 707              	.LFB155:
 517:Src/main.c    **** 
 518:Src/main.c    **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 708              		.loc 1 518 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712              	.LVL52:
 713 0000 38B5     		push	{r3, r4, r5, lr}
 714              	.LCFI12:
 715              		.cfi_def_cfa_offset 16
 716              		.cfi_offset 3, -16
 717              		.cfi_offset 4, -12
 718              		.cfi_offset 5, -8
 719              		.cfi_offset 14, -4
 720 0002 0546     		mov	r5, r0
 519:Src/main.c    **** 	sprintf(txt,"mb0: %d\r\n", (int)can1.idBck);
 721              		.loc 1 519 0
 722 0004 184C     		ldr	r4, .L51
 723 0006 194B     		ldr	r3, .L51+4
 724 0008 9A6A     		ldr	r2, [r3, #40]
 725 000a 1949     		ldr	r1, .L51+8
ARM GAS  /tmp/ccEC78z9.s 			page 23


 726 000c 2046     		mov	r0, r4
 727              	.LVL53:
 728 000e FFF7FEFF 		bl	sprintf
 729              	.LVL54:
 520:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 730              		.loc 1 520 0
 731 0012 2046     		mov	r0, r4
 732 0014 FFF7FEFF 		bl	strlen
 733              	.LVL55:
 734 0018 0A23     		movs	r3, #10
 735 001a 82B2     		uxth	r2, r0
 736 001c 2146     		mov	r1, r4
 737 001e 1548     		ldr	r0, .L51+12
 738 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 739              	.LVL56:
 521:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 740              		.loc 1 521 0
 741 0024 0121     		movs	r1, #1
 742 0026 1448     		ldr	r0, .L51+16
 743 0028 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 744              	.LVL57:
 522:Src/main.c    **** 	if(hcan == &hcan1){
 745              		.loc 1 522 0
 746 002c 134B     		ldr	r3, .L51+20
 747 002e 9D42     		cmp	r5, r3
 748 0030 00D0     		beq	.L50
 749              	.L46:
 750 0032 38BD     		pop	{r3, r4, r5, pc}
 751              	.LVL58:
 752              	.L50:
 523:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 753              		.loc 1 523 0
 754 0034 0D48     		ldr	r0, .L51+4
 755 0036 FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 756              	.LVL59:
 757 003a 58B1     		cbz	r0, .L48
 524:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 758              		.loc 1 524 0
 759 003c 0B48     		ldr	r0, .L51+4
 760 003e FFF7FEFF 		bl	CAN_Send_IT
 761              	.LVL60:
 762 0042 0028     		cmp	r0, #0
 763 0044 F5D0     		beq	.L46
 525:Src/main.c    **** 				//TODO: implementare errore
 526:Src/main.c    **** 			}else{
 527:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 764              		.loc 1 527 0
 765 0046 0A23     		movs	r3, #10
 766 0048 0622     		movs	r2, #6
 767 004a 0D49     		ldr	r1, .L51+24
 768 004c 0948     		ldr	r0, .L51+12
 769 004e FFF7FEFF 		bl	HAL_UART_Transmit
 770              	.LVL61:
 771 0052 38BD     		pop	{r3, r4, r5, pc}
 772              	.LVL62:
 773              	.L48:
 528:Src/main.c    **** 			}
ARM GAS  /tmp/ccEC78z9.s 			page 24


 529:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 774              		.loc 1 529 0
 775 0054 0548     		ldr	r0, .L51+4
 776 0056 FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 777              	.LVL63:
 778 005a 0028     		cmp	r0, #0
 779 005c E9D0     		beq	.L46
 530:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 531:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 780              		.loc 1 531 0
 781 005e 0348     		ldr	r0, .L51+4
 782 0060 FFF7FEFF 		bl	CAN_Send_IT
 783              	.LVL64:
 532:Src/main.c    **** 				//TODO: implementare errore
 533:Src/main.c    **** 			}
 534:Src/main.c    **** 		}else{
 535:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 536:Src/main.c    **** 		}
 537:Src/main.c    **** 	}/*else{
 538:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)("Messaggio trasmesso\r\n"), strlen("Messaggio trasmesso\r\n")
 539:Src/main.c    **** 		//HAL_GPIO_TogglePin(USER_LED_4_GPIO_Port, USER_LED_4_Pin);
 540:Src/main.c    **** 		fifoDataType fifodata;
 541:Src/main.c    **** 		if(fifoTxDataCAN3_high_pop(&fifoCAN3, &fifodata)){
 542:Src/main.c    **** 			for(int i = 0; i < 8; i++){
 543:Src/main.c    **** 				can3.dataTx[i] = fifodata.data[i];
 544:Src/main.c    **** 			}
 545:Src/main.c    **** 			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 546:Src/main.c    **** 				//TODO: implementare errore
 547:Src/main.c    **** 			}
 548:Src/main.c    **** 		}else if(fifoTxDataCAN3_normal_pop(&fifoCAN3, &fifodata)){
 549:Src/main.c    **** 			HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n"), 
 550:Src/main.c    **** 			for(int i = 0; i < 8; i++){
 551:Src/main.c    **** 				can3.dataTx[i] = fifodata.data[i];
 552:Src/main.c    **** 			}
 553:Src/main.c    **** 			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 554:Src/main.c    **** 				//TODO: implementare errore
 555:Src/main.c    **** 			}
 556:Src/main.c    **** 		}else{
 557:Src/main.c    **** 			//TODO: riattivare interrupt
 558:Src/main.c    **** 			HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 559:Src/main.c    **** 		}*/
 560:Src/main.c    **** 	//}
 561:Src/main.c    **** }
 784              		.loc 1 561 0
 785 0064 E5E7     		b	.L46
 786              	.L52:
 787 0066 00BF     		.align	2
 788              	.L51:
 789 0068 00000000 		.word	txt
 790 006c 00000000 		.word	can1
 791 0070 00000000 		.word	.LC5
 792 0074 00000000 		.word	huart3
 793 0078 00040240 		.word	1073873920
 794 007c 00000000 		.word	hcan1
 795 0080 0C000000 		.word	.LC6
 796              		.cfi_endproc
 797              	.LFE155:
ARM GAS  /tmp/ccEC78z9.s 			page 25


 799              		.section	.text.HAL_CAN_TxMailbox1CompleteCallback,"ax",%progbits
 800              		.align	1
 801              		.global	HAL_CAN_TxMailbox1CompleteCallback
 802              		.syntax unified
 803              		.thumb
 804              		.thumb_func
 805              		.fpu fpv5-d16
 807              	HAL_CAN_TxMailbox1CompleteCallback:
 808              	.LFB156:
 562:Src/main.c    **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 809              		.loc 1 562 0
 810              		.cfi_startproc
 811              		@ args = 0, pretend = 0, frame = 0
 812              		@ frame_needed = 0, uses_anonymous_args = 0
 813              	.LVL65:
 814 0000 38B5     		push	{r3, r4, r5, lr}
 815              	.LCFI13:
 816              		.cfi_def_cfa_offset 16
 817              		.cfi_offset 3, -16
 818              		.cfi_offset 4, -12
 819              		.cfi_offset 5, -8
 820              		.cfi_offset 14, -4
 821 0002 0546     		mov	r5, r0
 563:Src/main.c    **** 	sprintf(txt,"mb1: %d %d\r\n" ,can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
 822              		.loc 1 563 0
 823 0004 194A     		ldr	r2, .L58
 824 0006 1A4C     		ldr	r4, .L58+4
 825 0008 92F86230 		ldrb	r3, [r2, #98]	@ zero_extendqisi2
 826 000c 92F86320 		ldrb	r2, [r2, #99]	@ zero_extendqisi2
 827 0010 1849     		ldr	r1, .L58+8
 828 0012 2046     		mov	r0, r4
 829              	.LVL66:
 830 0014 FFF7FEFF 		bl	sprintf
 831              	.LVL67:
 564:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 832              		.loc 1 564 0
 833 0018 2046     		mov	r0, r4
 834 001a FFF7FEFF 		bl	strlen
 835              	.LVL68:
 836 001e 0A23     		movs	r3, #10
 837 0020 82B2     		uxth	r2, r0
 838 0022 2146     		mov	r1, r4
 839 0024 1448     		ldr	r0, .L58+12
 840 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 841              	.LVL69:
 565:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 842              		.loc 1 565 0
 843 002a 0121     		movs	r1, #1
 844 002c 1348     		ldr	r0, .L58+16
 845 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
 846              	.LVL70:
 566:Src/main.c    **** 	if(hcan == &hcan1){
 847              		.loc 1 566 0
 848 0032 134B     		ldr	r3, .L58+20
 849 0034 9D42     		cmp	r5, r3
 850 0036 00D0     		beq	.L57
 851              	.L53:
ARM GAS  /tmp/ccEC78z9.s 			page 26


 852 0038 38BD     		pop	{r3, r4, r5, pc}
 853              	.LVL71:
 854              	.L57:
 567:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 855              		.loc 1 567 0
 856 003a 0C48     		ldr	r0, .L58
 857 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 858              	.LVL72:
 859 0040 58B1     		cbz	r0, .L55
 568:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 860              		.loc 1 568 0
 861 0042 0A48     		ldr	r0, .L58
 862 0044 FFF7FEFF 		bl	CAN_Send_IT
 863              	.LVL73:
 864 0048 0028     		cmp	r0, #0
 865 004a F5D0     		beq	.L53
 569:Src/main.c    **** 				//TODO: implementare errore
 570:Src/main.c    **** 			}else{
 571:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 866              		.loc 1 571 0
 867 004c 0A23     		movs	r3, #10
 868 004e 0622     		movs	r2, #6
 869 0050 0C49     		ldr	r1, .L58+24
 870 0052 0948     		ldr	r0, .L58+12
 871 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 872              	.LVL74:
 873 0058 38BD     		pop	{r3, r4, r5, pc}
 874              	.LVL75:
 875              	.L55:
 572:Src/main.c    **** 			}
 573:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 876              		.loc 1 573 0
 877 005a 0448     		ldr	r0, .L58
 878 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 879              	.LVL76:
 880 0060 0028     		cmp	r0, #0
 881 0062 E9D0     		beq	.L53
 574:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 575:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 882              		.loc 1 575 0
 883 0064 0148     		ldr	r0, .L58
 884 0066 FFF7FEFF 		bl	CAN_Send_IT
 885              	.LVL77:
 576:Src/main.c    **** 				//TODO: implementare errore
 577:Src/main.c    **** 			}
 578:Src/main.c    **** 		}else{
 579:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 580:Src/main.c    **** 		}
 581:Src/main.c    **** 	}
 582:Src/main.c    **** }
 886              		.loc 1 582 0
 887 006a E5E7     		b	.L53
 888              	.L59:
 889              		.align	2
 890              	.L58:
 891 006c 00000000 		.word	can1
 892 0070 00000000 		.word	txt
ARM GAS  /tmp/ccEC78z9.s 			page 27


 893 0074 00000000 		.word	.LC7
 894 0078 00000000 		.word	huart3
 895 007c 00040240 		.word	1073873920
 896 0080 00000000 		.word	hcan1
 897 0084 0C000000 		.word	.LC6
 898              		.cfi_endproc
 899              	.LFE156:
 901              		.section	.text.HAL_CAN_TxMailbox2CompleteCallback,"ax",%progbits
 902              		.align	1
 903              		.global	HAL_CAN_TxMailbox2CompleteCallback
 904              		.syntax unified
 905              		.thumb
 906              		.thumb_func
 907              		.fpu fpv5-d16
 909              	HAL_CAN_TxMailbox2CompleteCallback:
 910              	.LFB157:
 583:Src/main.c    **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 911              		.loc 1 583 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              	.LVL78:
 916 0000 38B5     		push	{r3, r4, r5, lr}
 917              	.LCFI14:
 918              		.cfi_def_cfa_offset 16
 919              		.cfi_offset 3, -16
 920              		.cfi_offset 4, -12
 921              		.cfi_offset 5, -8
 922              		.cfi_offset 14, -4
 923 0002 0546     		mov	r5, r0
 584:Src/main.c    **** 	sprintf(txt,"mb2: %d %d\r\n", can1.fifo.txTailNormal, can1.fifo.txHeadNormal);
 924              		.loc 1 584 0
 925 0004 194A     		ldr	r2, .L65
 926 0006 1A4C     		ldr	r4, .L65+4
 927 0008 92F86230 		ldrb	r3, [r2, #98]	@ zero_extendqisi2
 928 000c 92F86320 		ldrb	r2, [r2, #99]	@ zero_extendqisi2
 929 0010 1849     		ldr	r1, .L65+8
 930 0012 2046     		mov	r0, r4
 931              	.LVL79:
 932 0014 FFF7FEFF 		bl	sprintf
 933              	.LVL80:
 585:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 934              		.loc 1 585 0
 935 0018 2046     		mov	r0, r4
 936 001a FFF7FEFF 		bl	strlen
 937              	.LVL81:
 938 001e 0A23     		movs	r3, #10
 939 0020 82B2     		uxth	r2, r0
 940 0022 2146     		mov	r1, r4
 941 0024 1448     		ldr	r0, .L65+12
 942 0026 FFF7FEFF 		bl	HAL_UART_Transmit
 943              	.LVL82:
 586:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 944              		.loc 1 586 0
 945 002a 0121     		movs	r1, #1
 946 002c 1348     		ldr	r0, .L65+16
 947 002e FFF7FEFF 		bl	HAL_GPIO_TogglePin
ARM GAS  /tmp/ccEC78z9.s 			page 28


 948              	.LVL83:
 587:Src/main.c    **** 	if(hcan == &hcan1){
 949              		.loc 1 587 0
 950 0032 134B     		ldr	r3, .L65+20
 951 0034 9D42     		cmp	r5, r3
 952 0036 00D0     		beq	.L64
 953              	.L60:
 954 0038 38BD     		pop	{r3, r4, r5, pc}
 955              	.LVL84:
 956              	.L64:
 588:Src/main.c    **** 		if(fifoTxDataCAN_high_pop(&can1)){
 957              		.loc 1 588 0
 958 003a 0C48     		ldr	r0, .L65
 959 003c FFF7FEFF 		bl	fifoTxDataCAN_high_pop
 960              	.LVL85:
 961 0040 58B1     		cbz	r0, .L62
 589:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 962              		.loc 1 589 0
 963 0042 0A48     		ldr	r0, .L65
 964 0044 FFF7FEFF 		bl	CAN_Send_IT
 965              	.LVL86:
 966 0048 0028     		cmp	r0, #0
 967 004a F5D0     		beq	.L60
 590:Src/main.c    **** 				//TODO: implementare errore
 591:Src/main.c    **** 			}else{
 592:Src/main.c    **** 				HAL_UART_Transmit(&huart3,(uint8_t*)("high\r\n"), strlen("high\r\n"), 10);
 968              		.loc 1 592 0
 969 004c 0A23     		movs	r3, #10
 970 004e 0622     		movs	r2, #6
 971 0050 0C49     		ldr	r1, .L65+24
 972 0052 0948     		ldr	r0, .L65+12
 973 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 974              	.LVL87:
 975 0058 38BD     		pop	{r3, r4, r5, pc}
 976              	.LVL88:
 977              	.L62:
 593:Src/main.c    **** 			}
 594:Src/main.c    **** 		}else if(fifoTxDataCAN_normal_pop(&can1)){
 978              		.loc 1 594 0
 979 005a 0448     		ldr	r0, .L65
 980 005c FFF7FEFF 		bl	fifoTxDataCAN_normal_pop
 981              	.LVL89:
 982 0060 0028     		cmp	r0, #0
 983 0062 E9D0     		beq	.L60
 595:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Prendo dalla fifo\r\n"), strlen("Prendo dalla fifo\r\n")
 596:Src/main.c    **** 			if(CAN_Send_IT(&can1) == 0){
 984              		.loc 1 596 0
 985 0064 0148     		ldr	r0, .L65
 986 0066 FFF7FEFF 		bl	CAN_Send_IT
 987              	.LVL90:
 597:Src/main.c    **** 				//TODO: implementare errore
 598:Src/main.c    **** 			}
 599:Src/main.c    **** 		}else{
 600:Src/main.c    **** 			//HAL_UART_Transmit(&huart3,(uint8_t*)("Fifo vuota\r\n"), strlen("Fifo vuota\r\n"), 10);
 601:Src/main.c    **** 		}
 602:Src/main.c    **** 	}
 603:Src/main.c    **** }
ARM GAS  /tmp/ccEC78z9.s 			page 29


 988              		.loc 1 603 0
 989 006a E5E7     		b	.L60
 990              	.L66:
 991              		.align	2
 992              	.L65:
 993 006c 00000000 		.word	can1
 994 0070 00000000 		.word	txt
 995 0074 00000000 		.word	.LC8
 996 0078 00000000 		.word	huart3
 997 007c 00040240 		.word	1073873920
 998 0080 00000000 		.word	hcan1
 999 0084 0C000000 		.word	.LC6
 1000              		.cfi_endproc
 1001              	.LFE157:
 1003              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1004              		.align	1
 1005              		.global	HAL_CAN_ErrorCallback
 1006              		.syntax unified
 1007              		.thumb
 1008              		.thumb_func
 1009              		.fpu fpv5-d16
 1011              	HAL_CAN_ErrorCallback:
 1012              	.LFB158:
 604:Src/main.c    **** void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 1013              		.loc 1 604 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 0
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017              	.LVL91:
 1018 0000 38B5     		push	{r3, r4, r5, lr}
 1019              	.LCFI15:
 1020              		.cfi_def_cfa_offset 16
 1021              		.cfi_offset 3, -16
 1022              		.cfi_offset 4, -12
 1023              		.cfi_offset 5, -8
 1024              		.cfi_offset 14, -4
 1025 0002 0546     		mov	r5, r0
 605:Src/main.c    **** 	sprintf(txt,"--- Errore ---: %d\r\n",(int)hcan->ErrorCode);
 1026              		.loc 1 605 0
 1027 0004 426A     		ldr	r2, [r0, #36]
 1028 0006 0B4C     		ldr	r4, .L71
 1029 0008 0B49     		ldr	r1, .L71+4
 1030 000a 2046     		mov	r0, r4
 1031              	.LVL92:
 1032 000c FFF7FEFF 		bl	sprintf
 1033              	.LVL93:
 606:Src/main.c    **** 	HAL_UART_Transmit(&huart3,(uint8_t*)(txt), strlen(txt), 10);
 1034              		.loc 1 606 0
 1035 0010 2046     		mov	r0, r4
 1036 0012 FFF7FEFF 		bl	strlen
 1037              	.LVL94:
 1038 0016 0A23     		movs	r3, #10
 1039 0018 82B2     		uxth	r2, r0
 1040 001a 2146     		mov	r1, r4
 1041 001c 0748     		ldr	r0, .L71+8
 1042 001e FFF7FEFF 		bl	HAL_UART_Transmit
 1043              	.LVL95:
ARM GAS  /tmp/ccEC78z9.s 			page 30


 607:Src/main.c    **** 	if(hcan == &hcan1){
 1044              		.loc 1 607 0
 1045 0022 074B     		ldr	r3, .L71+12
 1046 0024 9D42     		cmp	r5, r3
 1047 0026 00D0     		beq	.L70
 1048              	.L67:
 1049 0028 38BD     		pop	{r3, r4, r5, pc}
 1050              	.LVL96:
 1051              	.L70:
 608:Src/main.c    **** 		CAN_Send_Bck(&can1);
 1052              		.loc 1 608 0
 1053 002a 0648     		ldr	r0, .L71+16
 1054 002c FFF7FEFF 		bl	CAN_Send_Bck
 1055              	.LVL97:
 609:Src/main.c    **** 	}
 610:Src/main.c    **** }
 1056              		.loc 1 610 0
 1057 0030 FAE7     		b	.L67
 1058              	.L72:
 1059 0032 00BF     		.align	2
 1060              	.L71:
 1061 0034 00000000 		.word	txt
 1062 0038 00000000 		.word	.LC9
 1063 003c 00000000 		.word	huart3
 1064 0040 00000000 		.word	hcan1
 1065 0044 00000000 		.word	can1
 1066              		.cfi_endproc
 1067              	.LFE158:
 1069              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1070              		.align	1
 1071              		.global	HAL_UART_RxCpltCallback
 1072              		.syntax unified
 1073              		.thumb
 1074              		.thumb_func
 1075              		.fpu fpv5-d16
 1077              	HAL_UART_RxCpltCallback:
 1078              	.LFB159:
 611:Src/main.c    **** 
 612:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 1079              		.loc 1 612 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 0
 1082              		@ frame_needed = 0, uses_anonymous_args = 0
 1083              	.LVL98:
 1084 0000 08B5     		push	{r3, lr}
 1085              	.LCFI16:
 1086              		.cfi_def_cfa_offset 8
 1087              		.cfi_offset 3, -8
 1088              		.cfi_offset 14, -4
 613:Src/main.c    **** 	if(huart == &huart3){
 1089              		.loc 1 613 0
 1090 0002 174B     		ldr	r3, .L81
 1091 0004 8342     		cmp	r3, r0
 1092 0006 00D0     		beq	.L79
 1093              	.LVL99:
 1094              	.L73:
 1095 0008 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccEC78z9.s 			page 31


 1096              	.LVL100:
 1097              	.L79:
 614:Src/main.c    **** 		if((debug_rx[debug_rx_count] == '\r') | (debug_rx[debug_rx_count] == '\n')){
 1098              		.loc 1 614 0
 1099 000a 164B     		ldr	r3, .L81+4
 1100 000c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1101 000e 164B     		ldr	r3, .L81+8
 1102 0010 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 1103 0012 0A2B     		cmp	r3, #10
 1104 0014 18BF     		it	ne
 1105 0016 0D2B     		cmpne	r3, #13
 1106 0018 10D1     		bne	.L75
 615:Src/main.c    **** 			debug_msg_arrived = 1; //set flag
 1107              		.loc 1 615 0
 1108 001a 0122     		movs	r2, #1
 1109 001c 134B     		ldr	r3, .L81+12
 1110 001e 1A70     		strb	r2, [r3]
 616:Src/main.c    **** 			debug_rx[debug_rx_count] = 0; //set end of the string
 1111              		.loc 1 616 0
 1112 0020 0023     		movs	r3, #0
 1113 0022 114A     		ldr	r2, .L81+8
 1114 0024 5354     		strb	r3, [r2, r1]
 617:Src/main.c    **** 			debug_rx_count = 0; //reset counter
 1115              		.loc 1 617 0
 1116 0026 0F4A     		ldr	r2, .L81+4
 1117 0028 1370     		strb	r3, [r2]
 1118              	.LVL101:
 1119              	.L76:
 618:Src/main.c    **** 		}else{
 619:Src/main.c    **** 			if(debug_rx_count == MAX_DEBUG_RX_L){
 620:Src/main.c    **** 				//overflow
 621:Src/main.c    **** 				debug_rx_count = 0; //reset counter for overflow
 622:Src/main.c    **** 			}else{
 623:Src/main.c    **** 				HAL_UART_Transmit(&huart3, (uint8_t*)&debug_rx[debug_rx_count], 1, 10); //retransmit char
 624:Src/main.c    **** 				debug_rx_count++;
 625:Src/main.c    **** 			}
 626:Src/main.c    **** 		}
 627:Src/main.c    **** 		HAL_UART_Receive_IT(&huart3,(uint8_t*) &debug_rx[debug_rx_count], 1); //activate rx interrupt for
 1120              		.loc 1 627 0
 1121 002a 0E4B     		ldr	r3, .L81+4
 1122 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1123 002e 0122     		movs	r2, #1
 1124 0030 0D49     		ldr	r1, .L81+8
 1125 0032 1944     		add	r1, r1, r3
 1126 0034 0A48     		ldr	r0, .L81
 1127 0036 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1128              	.LVL102:
 628:Src/main.c    **** 	}
 629:Src/main.c    **** }
 1129              		.loc 1 629 0
 1130 003a E5E7     		b	.L73
 1131              	.LVL103:
 1132              	.L75:
 619:Src/main.c    **** 				//overflow
 1133              		.loc 1 619 0
 1134 003c 1429     		cmp	r1, #20
 1135 003e 0BD0     		beq	.L80
ARM GAS  /tmp/ccEC78z9.s 			page 32


 623:Src/main.c    **** 				debug_rx_count++;
 1136              		.loc 1 623 0
 1137 0040 0A23     		movs	r3, #10
 1138 0042 0122     		movs	r2, #1
 1139 0044 0848     		ldr	r0, .L81+8
 1140              	.LVL104:
 1141 0046 0144     		add	r1, r1, r0
 1142 0048 0548     		ldr	r0, .L81
 1143 004a FFF7FEFF 		bl	HAL_UART_Transmit
 1144              	.LVL105:
 624:Src/main.c    **** 			}
 1145              		.loc 1 624 0
 1146 004e 054A     		ldr	r2, .L81+4
 1147 0050 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1148 0052 0133     		adds	r3, r3, #1
 1149 0054 1370     		strb	r3, [r2]
 1150 0056 E8E7     		b	.L76
 1151              	.LVL106:
 1152              	.L80:
 621:Src/main.c    **** 			}else{
 1153              		.loc 1 621 0
 1154 0058 0022     		movs	r2, #0
 1155 005a 024B     		ldr	r3, .L81+4
 1156 005c 1A70     		strb	r2, [r3]
 1157 005e E4E7     		b	.L76
 1158              	.L82:
 1159              		.align	2
 1160              	.L81:
 1161 0060 00000000 		.word	huart3
 1162 0064 00000000 		.word	debug_rx_count
 1163 0068 00000000 		.word	debug_rx
 1164 006c 00000000 		.word	debug_msg_arrived
 1165              		.cfi_endproc
 1166              	.LFE159:
 1168              		.section	.text.Error_Handler,"ax",%progbits
 1169              		.align	1
 1170              		.global	Error_Handler
 1171              		.syntax unified
 1172              		.thumb
 1173              		.thumb_func
 1174              		.fpu fpv5-d16
 1176              	Error_Handler:
 1177              	.LFB160:
 630:Src/main.c    **** /* USER CODE END 4 */
 631:Src/main.c    **** 
 632:Src/main.c    **** /**
 633:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 634:Src/main.c    ****   * @retval None
 635:Src/main.c    ****   */
 636:Src/main.c    **** void Error_Handler(void)
 637:Src/main.c    **** {
 1178              		.loc 1 637 0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182 0000 10B5     		push	{r4, lr}
 1183              	.LCFI17:
ARM GAS  /tmp/ccEC78z9.s 			page 33


 1184              		.cfi_def_cfa_offset 8
 1185              		.cfi_offset 4, -8
 1186              		.cfi_offset 14, -4
 638:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 639:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 640:Src/main.c    ****   HAL_GPIO_TogglePin(LED_blue_GPIO_Port,LED_blue_Pin);
 1187              		.loc 1 640 0
 1188 0002 094C     		ldr	r4, .L85
 1189 0004 8021     		movs	r1, #128
 1190 0006 2046     		mov	r0, r4
 1191 0008 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1192              	.LVL107:
 641:Src/main.c    **** 	HAL_GPIO_TogglePin(LED_green_GPIO_Port, LED_green_Pin);
 1193              		.loc 1 641 0
 1194 000c 0121     		movs	r1, #1
 1195 000e 2046     		mov	r0, r4
 1196 0010 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1197              	.LVL108:
 642:Src/main.c    ****   HAL_GPIO_TogglePin(LED_red_GPIO_Port, LED_red_Pin);
 1198              		.loc 1 642 0
 1199 0014 4FF48041 		mov	r1, #16384
 1200 0018 2046     		mov	r0, r4
 1201 001a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1202              	.LVL109:
 643:Src/main.c    **** 
 644:Src/main.c    **** 	HAL_Delay(100);
 1203              		.loc 1 644 0
 1204 001e 6420     		movs	r0, #100
 1205 0020 FFF7FEFF 		bl	HAL_Delay
 1206              	.LVL110:
 1207 0024 10BD     		pop	{r4, pc}
 1208              	.L86:
 1209 0026 00BF     		.align	2
 1210              	.L85:
 1211 0028 00040240 		.word	1073873920
 1212              		.cfi_endproc
 1213              	.LFE160:
 1215              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 1216              		.align	1
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1220              		.fpu fpv5-d16
 1222              	MX_USART3_UART_Init:
 1223              	.LFB148:
 380:Src/main.c    **** 
 1224              		.loc 1 380 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 0
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228 0000 08B5     		push	{r3, lr}
 1229              	.LCFI18:
 1230              		.cfi_def_cfa_offset 8
 1231              		.cfi_offset 3, -8
 1232              		.cfi_offset 14, -4
 389:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 1233              		.loc 1 389 0
ARM GAS  /tmp/ccEC78z9.s 			page 34


 1234 0002 0B48     		ldr	r0, .L91
 1235 0004 0B4B     		ldr	r3, .L91+4
 1236 0006 0360     		str	r3, [r0]
 390:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 1237              		.loc 1 390 0
 1238 0008 0B4B     		ldr	r3, .L91+8
 1239 000a 4360     		str	r3, [r0, #4]
 391:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 1240              		.loc 1 391 0
 1241 000c 0023     		movs	r3, #0
 1242 000e 8360     		str	r3, [r0, #8]
 392:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 1243              		.loc 1 392 0
 1244 0010 C360     		str	r3, [r0, #12]
 393:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 1245              		.loc 1 393 0
 1246 0012 0361     		str	r3, [r0, #16]
 394:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1247              		.loc 1 394 0
 1248 0014 0C22     		movs	r2, #12
 1249 0016 4261     		str	r2, [r0, #20]
 395:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 1250              		.loc 1 395 0
 1251 0018 8361     		str	r3, [r0, #24]
 396:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1252              		.loc 1 396 0
 1253 001a C361     		str	r3, [r0, #28]
 397:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1254              		.loc 1 397 0
 1255 001c 0362     		str	r3, [r0, #32]
 398:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 1256              		.loc 1 398 0
 1257 001e 4362     		str	r3, [r0, #36]
 399:Src/main.c    ****   {
 1258              		.loc 1 399 0
 1259 0020 FFF7FEFF 		bl	HAL_UART_Init
 1260              	.LVL111:
 1261 0024 00B9     		cbnz	r0, .L90
 1262              	.L87:
 1263 0026 08BD     		pop	{r3, pc}
 1264              	.L90:
 401:Src/main.c    ****   }
 1265              		.loc 1 401 0
 1266 0028 FFF7FEFF 		bl	Error_Handler
 1267              	.LVL112:
 407:Src/main.c    **** 
 1268              		.loc 1 407 0
 1269 002c FBE7     		b	.L87
 1270              	.L92:
 1271 002e 00BF     		.align	2
 1272              	.L91:
 1273 0030 00000000 		.word	huart3
 1274 0034 00480040 		.word	1073760256
 1275 0038 80841E00 		.word	2000000
 1276              		.cfi_endproc
 1277              	.LFE148:
 1279              		.section	.text.MX_CAN1_Init,"ax",%progbits
ARM GAS  /tmp/ccEC78z9.s 			page 35


 1280              		.align	1
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1284              		.fpu fpv5-d16
 1286              	MX_CAN1_Init:
 1287              	.LFB145:
 270:Src/main.c    **** 
 1288              		.loc 1 270 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 0
 1291              		@ frame_needed = 0, uses_anonymous_args = 0
 1292 0000 08B5     		push	{r3, lr}
 1293              	.LCFI19:
 1294              		.cfi_def_cfa_offset 8
 1295              		.cfi_offset 3, -8
 1296              		.cfi_offset 14, -4
 279:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 1297              		.loc 1 279 0
 1298 0002 0E48     		ldr	r0, .L97
 1299 0004 0E4B     		ldr	r3, .L97+4
 1300 0006 0360     		str	r3, [r0]
 280:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 1301              		.loc 1 280 0
 1302 0008 0323     		movs	r3, #3
 1303 000a 4360     		str	r3, [r0, #4]
 281:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1304              		.loc 1 281 0
 1305 000c 0023     		movs	r3, #0
 1306 000e 8360     		str	r3, [r0, #8]
 282:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 1307              		.loc 1 282 0
 1308 0010 C360     		str	r3, [r0, #12]
 283:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 1309              		.loc 1 283 0
 1310 0012 4FF46022 		mov	r2, #917504
 1311 0016 0261     		str	r2, [r0, #16]
 284:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 1312              		.loc 1 284 0
 1313 0018 4FF48012 		mov	r2, #1048576
 1314 001c 4261     		str	r2, [r0, #20]
 285:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 1315              		.loc 1 285 0
 1316 001e 0376     		strb	r3, [r0, #24]
 286:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 1317              		.loc 1 286 0
 1318 0020 4376     		strb	r3, [r0, #25]
 287:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 1319              		.loc 1 287 0
 1320 0022 0122     		movs	r2, #1
 1321 0024 8276     		strb	r2, [r0, #26]
 288:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 1322              		.loc 1 288 0
 1323 0026 C276     		strb	r2, [r0, #27]
 289:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 1324              		.loc 1 289 0
 1325 0028 0377     		strb	r3, [r0, #28]
ARM GAS  /tmp/ccEC78z9.s 			page 36


 290:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1326              		.loc 1 290 0
 1327 002a 4377     		strb	r3, [r0, #29]
 291:Src/main.c    ****   {
 1328              		.loc 1 291 0
 1329 002c FFF7FEFF 		bl	HAL_CAN_Init
 1330              	.LVL113:
 1331 0030 00B9     		cbnz	r0, .L96
 1332              	.L93:
 1333 0032 08BD     		pop	{r3, pc}
 1334              	.L96:
 293:Src/main.c    ****   }
 1335              		.loc 1 293 0
 1336 0034 FFF7FEFF 		bl	Error_Handler
 1337              	.LVL114:
 299:Src/main.c    **** 
 1338              		.loc 1 299 0
 1339 0038 FBE7     		b	.L93
 1340              	.L98:
 1341 003a 00BF     		.align	2
 1342              	.L97:
 1343 003c 00000000 		.word	hcan1
 1344 0040 00640040 		.word	1073767424
 1345              		.cfi_endproc
 1346              	.LFE145:
 1348              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1349              		.align	1
 1350              		.syntax unified
 1351              		.thumb
 1352              		.thumb_func
 1353              		.fpu fpv5-d16
 1355              	MX_TIM2_Init:
 1356              	.LFB147:
 335:Src/main.c    **** 
 1357              		.loc 1 335 0
 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 32
 1360              		@ frame_needed = 0, uses_anonymous_args = 0
 1361 0000 00B5     		push	{lr}
 1362              	.LCFI20:
 1363              		.cfi_def_cfa_offset 4
 1364              		.cfi_offset 14, -4
 1365 0002 89B0     		sub	sp, sp, #36
 1366              	.LCFI21:
 1367              		.cfi_def_cfa_offset 40
 341:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1368              		.loc 1 341 0
 1369 0004 0023     		movs	r3, #0
 1370 0006 0493     		str	r3, [sp, #16]
 1371 0008 0593     		str	r3, [sp, #20]
 1372 000a 0693     		str	r3, [sp, #24]
 1373 000c 0793     		str	r3, [sp, #28]
 342:Src/main.c    **** 
 1374              		.loc 1 342 0
 1375 000e 0193     		str	r3, [sp, #4]
 1376 0010 0293     		str	r3, [sp, #8]
 1377 0012 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccEC78z9.s 			page 37


 347:Src/main.c    ****   htim2.Init.Prescaler = 108;
 1378              		.loc 1 347 0
 1379 0014 1548     		ldr	r0, .L107
 1380 0016 4FF08042 		mov	r2, #1073741824
 1381 001a 0260     		str	r2, [r0]
 348:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1382              		.loc 1 348 0
 1383 001c 6C22     		movs	r2, #108
 1384 001e 4260     		str	r2, [r0, #4]
 349:Src/main.c    ****   htim2.Init.Period = 1000;
 1385              		.loc 1 349 0
 1386 0020 8360     		str	r3, [r0, #8]
 350:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1387              		.loc 1 350 0
 1388 0022 4FF47A72 		mov	r2, #1000
 1389 0026 C260     		str	r2, [r0, #12]
 351:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1390              		.loc 1 351 0
 1391 0028 0361     		str	r3, [r0, #16]
 352:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1392              		.loc 1 352 0
 1393 002a 8361     		str	r3, [r0, #24]
 353:Src/main.c    ****   {
 1394              		.loc 1 353 0
 1395 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 1396              	.LVL115:
 1397 0030 98B9     		cbnz	r0, .L104
 1398              	.L100:
 357:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1399              		.loc 1 357 0
 1400 0032 08A9     		add	r1, sp, #32
 1401 0034 4FF48053 		mov	r3, #4096
 1402 0038 41F8103D 		str	r3, [r1, #-16]!
 358:Src/main.c    ****   {
 1403              		.loc 1 358 0
 1404 003c 0B48     		ldr	r0, .L107
 1405 003e FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1406              	.LVL116:
 1407 0042 68B9     		cbnz	r0, .L105
 1408              	.L101:
 362:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1409              		.loc 1 362 0
 1410 0044 0023     		movs	r3, #0
 1411 0046 0193     		str	r3, [sp, #4]
 363:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1412              		.loc 1 363 0
 1413 0048 0393     		str	r3, [sp, #12]
 364:Src/main.c    ****   {
 1414              		.loc 1 364 0
 1415 004a 01A9     		add	r1, sp, #4
 1416 004c 0748     		ldr	r0, .L107
 1417 004e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1418              	.LVL117:
 1419 0052 40B9     		cbnz	r0, .L106
 1420              	.L99:
 372:Src/main.c    **** 
 1421              		.loc 1 372 0
ARM GAS  /tmp/ccEC78z9.s 			page 38


 1422 0054 09B0     		add	sp, sp, #36
 1423              	.LCFI22:
 1424              		.cfi_remember_state
 1425              		.cfi_def_cfa_offset 4
 1426              		@ sp needed
 1427 0056 5DF804FB 		ldr	pc, [sp], #4
 1428              	.L104:
 1429              	.LCFI23:
 1430              		.cfi_restore_state
 355:Src/main.c    ****   }
 1431              		.loc 1 355 0
 1432 005a FFF7FEFF 		bl	Error_Handler
 1433              	.LVL118:
 1434 005e E8E7     		b	.L100
 1435              	.L105:
 360:Src/main.c    ****   }
 1436              		.loc 1 360 0
 1437 0060 FFF7FEFF 		bl	Error_Handler
 1438              	.LVL119:
 1439 0064 EEE7     		b	.L101
 1440              	.L106:
 366:Src/main.c    ****   }
 1441              		.loc 1 366 0
 1442 0066 FFF7FEFF 		bl	Error_Handler
 1443              	.LVL120:
 372:Src/main.c    **** 
 1444              		.loc 1 372 0
 1445 006a F3E7     		b	.L99
 1446              	.L108:
 1447              		.align	2
 1448              	.L107:
 1449 006c 00000000 		.word	htim2
 1450              		.cfi_endproc
 1451              	.LFE147:
 1453              		.section	.text.SystemClock_Config,"ax",%progbits
 1454              		.align	1
 1455              		.global	SystemClock_Config
 1456              		.syntax unified
 1457              		.thumb
 1458              		.thumb_func
 1459              		.fpu fpv5-d16
 1461              	SystemClock_Config:
 1462              	.LFB143:
 181:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1463              		.loc 1 181 0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 224
 1466              		@ frame_needed = 0, uses_anonymous_args = 0
 1467 0000 10B5     		push	{r4, lr}
 1468              	.LCFI24:
 1469              		.cfi_def_cfa_offset 8
 1470              		.cfi_offset 4, -8
 1471              		.cfi_offset 14, -4
 1472 0002 B8B0     		sub	sp, sp, #224
 1473              	.LCFI25:
 1474              		.cfi_def_cfa_offset 232
 182:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
ARM GAS  /tmp/ccEC78z9.s 			page 39


 1475              		.loc 1 182 0
 1476 0004 3422     		movs	r2, #52
 1477 0006 0021     		movs	r1, #0
 1478 0008 2BA8     		add	r0, sp, #172
 1479 000a FFF7FEFF 		bl	memset
 1480              	.LVL121:
 183:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 1481              		.loc 1 183 0
 1482 000e 0024     		movs	r4, #0
 1483 0010 2694     		str	r4, [sp, #152]
 1484 0012 2794     		str	r4, [sp, #156]
 1485 0014 2894     		str	r4, [sp, #160]
 1486 0016 2994     		str	r4, [sp, #164]
 1487 0018 2A94     		str	r4, [sp, #168]
 184:Src/main.c    **** 
 1488              		.loc 1 184 0
 1489 001a 9022     		movs	r2, #144
 1490 001c 2146     		mov	r1, r4
 1491 001e 02A8     		add	r0, sp, #8
 1492 0020 FFF7FEFF 		bl	memset
 1493              	.LVL122:
 1494              	.LBB7:
 188:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 1495              		.loc 1 188 0
 1496 0024 294B     		ldr	r3, .L119
 1497 0026 1A6C     		ldr	r2, [r3, #64]
 1498 0028 42F08052 		orr	r2, r2, #268435456
 1499 002c 1A64     		str	r2, [r3, #64]
 1500 002e 1B6C     		ldr	r3, [r3, #64]
 1501 0030 03F08053 		and	r3, r3, #268435456
 1502 0034 0093     		str	r3, [sp]
 1503 0036 009B     		ldr	r3, [sp]
 1504              	.LBE7:
 1505              	.LBB8:
 189:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 1506              		.loc 1 189 0
 1507 0038 254B     		ldr	r3, .L119+4
 1508 003a 1A68     		ldr	r2, [r3]
 1509 003c 42F44042 		orr	r2, r2, #49152
 1510 0040 1A60     		str	r2, [r3]
 1511 0042 1B68     		ldr	r3, [r3]
 1512 0044 03F44043 		and	r3, r3, #49152
 1513 0048 0193     		str	r3, [sp, #4]
 1514 004a 019B     		ldr	r3, [sp, #4]
 1515              	.LBE8:
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 1516              		.loc 1 192 0
 1517 004c 0223     		movs	r3, #2
 1518 004e 2B93     		str	r3, [sp, #172]
 193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 1519              		.loc 1 193 0
 1520 0050 0122     		movs	r2, #1
 1521 0052 2E92     		str	r2, [sp, #184]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1522              		.loc 1 194 0
 1523 0054 1022     		movs	r2, #16
 1524 0056 2F92     		str	r2, [sp, #188]
ARM GAS  /tmp/ccEC78z9.s 			page 40


 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 1525              		.loc 1 195 0
 1526 0058 3193     		str	r3, [sp, #196]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 1527              		.loc 1 196 0
 1528 005a 3294     		str	r4, [sp, #200]
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 1529              		.loc 1 197 0
 1530 005c 0822     		movs	r2, #8
 1531 005e 3392     		str	r2, [sp, #204]
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 1532              		.loc 1 198 0
 1533 0060 D822     		movs	r2, #216
 1534 0062 3492     		str	r2, [sp, #208]
 199:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 1535              		.loc 1 199 0
 1536 0064 3593     		str	r3, [sp, #212]
 200:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1537              		.loc 1 200 0
 1538 0066 0923     		movs	r3, #9
 1539 0068 3693     		str	r3, [sp, #216]
 201:Src/main.c    ****   {
 1540              		.loc 1 201 0
 1541 006a 2BA8     		add	r0, sp, #172
 1542 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 1543              	.LVL123:
 1544 0070 F8B9     		cbnz	r0, .L115
 1545              	.L110:
 207:Src/main.c    ****   {
 1546              		.loc 1 207 0
 1547 0072 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 1548              	.LVL124:
 1549 0076 F8B9     		cbnz	r0, .L116
 1550              	.L111:
 213:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1551              		.loc 1 213 0
 1552 0078 0F23     		movs	r3, #15
 1553 007a 2693     		str	r3, [sp, #152]
 215:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1554              		.loc 1 215 0
 1555 007c 0223     		movs	r3, #2
 1556 007e 2793     		str	r3, [sp, #156]
 216:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 1557              		.loc 1 216 0
 1558 0080 0023     		movs	r3, #0
 1559 0082 2893     		str	r3, [sp, #160]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 1560              		.loc 1 217 0
 1561 0084 4FF4A053 		mov	r3, #5120
 1562 0088 2993     		str	r3, [sp, #164]
 218:Src/main.c    **** 
 1563              		.loc 1 218 0
 1564 008a 4FF48053 		mov	r3, #4096
 1565 008e 2A93     		str	r3, [sp, #168]
 220:Src/main.c    ****   {
 1566              		.loc 1 220 0
 1567 0090 0721     		movs	r1, #7
ARM GAS  /tmp/ccEC78z9.s 			page 41


 1568 0092 26A8     		add	r0, sp, #152
 1569 0094 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1570              	.LVL125:
 1571 0098 88B9     		cbnz	r0, .L117
 1572              	.L112:
 224:Src/main.c    ****                               |RCC_PERIPHCLK_CLK48;
 1573              		.loc 1 224 0
 1574 009a 0E4B     		ldr	r3, .L119+8
 1575 009c 0293     		str	r3, [sp, #8]
 226:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 1576              		.loc 1 226 0
 1577 009e 0023     		movs	r3, #0
 1578 00a0 1593     		str	r3, [sp, #84]
 227:Src/main.c    ****   PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 1579              		.loc 1 227 0
 1580 00a2 2193     		str	r3, [sp, #132]
 228:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 1581              		.loc 1 228 0
 1582 00a4 2293     		str	r3, [sp, #136]
 229:Src/main.c    ****   {
 1583              		.loc 1 229 0
 1584 00a6 02A8     		add	r0, sp, #8
 1585 00a8 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1586              	.LVL126:
 1587 00ac 50B9     		cbnz	r0, .L118
 1588              	.L109:
 233:Src/main.c    **** 
 1589              		.loc 1 233 0
 1590 00ae 38B0     		add	sp, sp, #224
 1591              	.LCFI26:
 1592              		.cfi_remember_state
 1593              		.cfi_def_cfa_offset 8
 1594              		@ sp needed
 1595 00b0 10BD     		pop	{r4, pc}
 1596              	.L115:
 1597              	.LCFI27:
 1598              		.cfi_restore_state
 203:Src/main.c    ****   }
 1599              		.loc 1 203 0
 1600 00b2 FFF7FEFF 		bl	Error_Handler
 1601              	.LVL127:
 1602 00b6 DCE7     		b	.L110
 1603              	.L116:
 209:Src/main.c    ****   }
 1604              		.loc 1 209 0
 1605 00b8 FFF7FEFF 		bl	Error_Handler
 1606              	.LVL128:
 1607 00bc DCE7     		b	.L111
 1608              	.L117:
 222:Src/main.c    ****   }
 1609              		.loc 1 222 0
 1610 00be FFF7FEFF 		bl	Error_Handler
 1611              	.LVL129:
 1612 00c2 EAE7     		b	.L112
 1613              	.L118:
 231:Src/main.c    ****   }
 1614              		.loc 1 231 0
ARM GAS  /tmp/ccEC78z9.s 			page 42


 1615 00c4 FFF7FEFF 		bl	Error_Handler
 1616              	.LVL130:
 233:Src/main.c    **** 
 1617              		.loc 1 233 0
 1618 00c8 F1E7     		b	.L109
 1619              	.L120:
 1620 00ca 00BF     		.align	2
 1621              	.L119:
 1622 00cc 00380240 		.word	1073887232
 1623 00d0 00700040 		.word	1073770496
 1624 00d4 0001A000 		.word	10486016
 1625              		.cfi_endproc
 1626              	.LFE143:
 1628              		.section	.text.main,"ax",%progbits
 1629              		.align	1
 1630              		.global	main
 1631              		.syntax unified
 1632              		.thumb
 1633              		.thumb_func
 1634              		.fpu fpv5-d16
 1636              	main:
 1637              	.LFB142:
  90:Src/main.c    ****   /* USER CODE BEGIN 1 */
 1638              		.loc 1 90 0
 1639              		.cfi_startproc
 1640              		@ Volatile: function does not return.
 1641              		@ args = 0, pretend = 0, frame = 0
 1642              		@ frame_needed = 0, uses_anonymous_args = 0
 1643 0000 08B5     		push	{r3, lr}
 1644              	.LCFI28:
 1645              		.cfi_def_cfa_offset 8
 1646              		.cfi_offset 3, -8
 1647              		.cfi_offset 14, -4
  99:Src/main.c    **** 
 1648              		.loc 1 99 0
 1649 0002 FFF7FEFF 		bl	HAL_Init
 1650              	.LVL131:
 106:Src/main.c    **** 
 1651              		.loc 1 106 0
 1652 0006 FFF7FEFF 		bl	SystemClock_Config
 1653              	.LVL132:
 113:Src/main.c    ****   MX_SDMMC1_SD_Init();
 1654              		.loc 1 113 0
 1655 000a FFF7FEFF 		bl	MX_GPIO_Init
 1656              	.LVL133:
 114:Src/main.c    ****   MX_USART3_UART_Init();
 1657              		.loc 1 114 0
 1658 000e FFF7FEFF 		bl	MX_SDMMC1_SD_Init
 1659              	.LVL134:
 115:Src/main.c    ****   MX_FATFS_Init();
 1660              		.loc 1 115 0
 1661 0012 FFF7FEFF 		bl	MX_USART3_UART_Init
 1662              	.LVL135:
 116:Src/main.c    ****   MX_CAN1_Init();
 1663              		.loc 1 116 0
 1664 0016 FFF7FEFF 		bl	MX_FATFS_Init
 1665              	.LVL136:
ARM GAS  /tmp/ccEC78z9.s 			page 43


 117:Src/main.c    ****   MX_TIM2_Init();
 1666              		.loc 1 117 0
 1667 001a FFF7FEFF 		bl	MX_CAN1_Init
 1668              	.LVL137:
 118:Src/main.c    **** 
 1669              		.loc 1 118 0
 1670 001e FFF7FEFF 		bl	MX_TIM2_Init
 1671              	.LVL138:
 121:Src/main.c    ****   /* USER CODE BEGIN 2 */
 1672              		.loc 1 121 0
 1673 0022 FFF7FEFF 		bl	MX_NVIC_Init
 1674              	.LVL139:
 123:Src/main.c    **** 
 1675              		.loc 1 123 0
 1676 0026 2548     		ldr	r0, .L133
 1677 0028 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1678              	.LVL140:
 125:Src/main.c    ****   can1.tx_interrupt = CAN1_TX_IRQn;
 1679              		.loc 1 125 0
 1680 002c 244B     		ldr	r3, .L133+4
 1681 002e 1422     		movs	r2, #20
 1682 0030 83F8882D 		strb	r2, [r3, #3464]
 126:Src/main.c    ****   can1.hcan = &hcan1;
 1683              		.loc 1 126 0
 1684 0034 1322     		movs	r2, #19
 1685 0036 83F8892D 		strb	r2, [r3, #3465]
 127:Src/main.c    **** 
 1686              		.loc 1 127 0
 1687 003a 224A     		ldr	r2, .L133+8
 1688 003c 1A63     		str	r2, [r3, #48]
 129:Src/main.c    **** 
 1689              		.loc 1 129 0
 1690 003e FFF7FEFF 		bl	can_init
 1691              	.LVL141:
 131:Src/main.c    **** 
 1692              		.loc 1 131 0
 1693 0042 214B     		ldr	r3, .L133+12
 1694 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1695 0046 0122     		movs	r2, #1
 1696 0048 2049     		ldr	r1, .L133+16
 1697 004a 1944     		add	r1, r1, r3
 1698 004c 2048     		ldr	r0, .L133+20
 1699 004e FFF7FEFF 		bl	HAL_UART_Receive_IT
 1700              	.LVL142:
 133:Src/main.c    **** 
 1701              		.loc 1 133 0
 1702 0052 0022     		movs	r2, #0
 1703 0054 1F4B     		ldr	r3, .L133+24
 1704 0056 1A70     		strb	r2, [r3]
 1705 0058 01E0     		b	.L122
 1706              	.L129:
 159:Src/main.c    **** 	  }else if(current_state == STATE_IDLE){
 1707              		.loc 1 159 0
 1708 005a FFF7FEFF 		bl	init
 1709              	.LVL143:
 1710              	.L122:
 142:Src/main.c    **** 	  can1.dataTx[1] = 0;
ARM GAS  /tmp/ccEC78z9.s 			page 44


 1711              		.loc 1 142 0
 1712 005e 184A     		ldr	r2, .L133+4
 1713 0060 0023     		movs	r3, #0
 1714 0062 1372     		strb	r3, [r2, #8]
 143:Src/main.c    **** 	  can1.dataTx[2] = 0;
 1715              		.loc 1 143 0
 1716 0064 5372     		strb	r3, [r2, #9]
 144:Src/main.c    **** 	  can1.dataTx[3] = 0;
 1717              		.loc 1 144 0
 1718 0066 9372     		strb	r3, [r2, #10]
 145:Src/main.c    **** 	  can1.dataTx[4] = counter >> 24;
 1719              		.loc 1 145 0
 1720 0068 D372     		strb	r3, [r2, #11]
 146:Src/main.c    **** 	  can1.dataTx[5] = counter >> 16;
 1721              		.loc 1 146 0
 1722 006a 1B4B     		ldr	r3, .L133+28
 1723 006c 1B68     		ldr	r3, [r3]
 1724 006e 1916     		asrs	r1, r3, #24
 1725 0070 1173     		strb	r1, [r2, #12]
 147:Src/main.c    **** 	  can1.dataTx[6] = counter >> 8;
 1726              		.loc 1 147 0
 1727 0072 1914     		asrs	r1, r3, #16
 1728 0074 5173     		strb	r1, [r2, #13]
 148:Src/main.c    **** 	  can1.dataTx[7] = counter % 256;
 1729              		.loc 1 148 0
 1730 0076 1912     		asrs	r1, r3, #8
 1731 0078 9173     		strb	r1, [r2, #14]
 149:Src/main.c    **** 
 1732              		.loc 1 149 0
 1733 007a 5942     		rsbs	r1, r3, #0
 1734 007c DBB2     		uxtb	r3, r3
 1735 007e C9B2     		uxtb	r1, r1
 1736 0080 58BF     		it	pl
 1737 0082 4B42     		rsbpl	r3, r1, #0
 1738 0084 D373     		strb	r3, [r2, #15]
 151:Src/main.c    **** 
 1739              		.loc 1 151 0
 1740 0086 A023     		movs	r3, #160
 1741 0088 1362     		str	r3, [r2, #32]
 158:Src/main.c    **** 		  init();
 1742              		.loc 1 158 0
 1743 008a 124B     		ldr	r3, .L133+24
 1744 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1745 008e 002B     		cmp	r3, #0
 1746 0090 E3D0     		beq	.L129
 160:Src/main.c    **** 		  idle();
 1747              		.loc 1 160 0
 1748 0092 012B     		cmp	r3, #1
 1749 0094 08D0     		beq	.L130
 162:Src/main.c    **** 		  calib();
 1750              		.loc 1 162 0
 1751 0096 022B     		cmp	r3, #2
 1752 0098 09D0     		beq	.L131
 164:Src/main.c    **** 		  setup();
 1753              		.loc 1 164 0
 1754 009a 032B     		cmp	r3, #3
 1755 009c 0AD0     		beq	.L132
ARM GAS  /tmp/ccEC78z9.s 			page 45


 166:Src/main.c    **** 		  run();
 1756              		.loc 1 166 0
 1757 009e 042B     		cmp	r3, #4
 1758 00a0 DDD1     		bne	.L122
 167:Src/main.c    **** 	  }
 1759              		.loc 1 167 0
 1760 00a2 FFF7FEFF 		bl	run
 1761              	.LVL144:
 1762 00a6 DAE7     		b	.L122
 1763              	.L130:
 161:Src/main.c    **** 	  }else if(current_state == STATE_CALIB){
 1764              		.loc 1 161 0
 1765 00a8 FFF7FEFF 		bl	idle
 1766              	.LVL145:
 1767 00ac D7E7     		b	.L122
 1768              	.L131:
 163:Src/main.c    **** 	  }else if(current_state == STATE_SETUP){
 1769              		.loc 1 163 0
 1770 00ae FFF7FEFF 		bl	calib
 1771              	.LVL146:
 1772 00b2 D4E7     		b	.L122
 1773              	.L132:
 165:Src/main.c    **** 	  }else if(current_state == STATE_RUN){
 1774              		.loc 1 165 0
 1775 00b4 FFF7FEFF 		bl	setup
 1776              	.LVL147:
 1777 00b8 D1E7     		b	.L122
 1778              	.L134:
 1779 00ba 00BF     		.align	2
 1780              	.L133:
 1781 00bc 00000000 		.word	htim2
 1782 00c0 00000000 		.word	can1
 1783 00c4 00000000 		.word	hcan1
 1784 00c8 00000000 		.word	debug_rx_count
 1785 00cc 00000000 		.word	debug_rx
 1786 00d0 00000000 		.word	huart3
 1787 00d4 00000000 		.word	current_state
 1788 00d8 00000000 		.word	.LANCHOR0
 1789              		.cfi_endproc
 1790              	.LFE142:
 1792              		.global	counter
 1793              		.comm	sFilter,40,4
 1794              		.comm	i_debug,1,1
 1795              		.comm	huart3,128,4
 1796              		.comm	htim2,64,4
 1797              		.comm	hsd1,132,4
 1798              		.comm	hcan1,40,4
 1799              		.comm	current_state,1,1
 1800              		.section	.bss.counter,"aw",%nobits
 1801              		.align	2
 1802              		.set	.LANCHOR0,. + 0
 1805              	counter:
 1806 0000 00000000 		.space	4
 1807              		.section	.rodata.HAL_CAN_ErrorCallback.str1.4,"aMS",%progbits,1
 1808              		.align	2
 1809              	.LC9:
 1810 0000 2D2D2D20 		.ascii	"--- Errore ---: %d\015\012\000"
ARM GAS  /tmp/ccEC78z9.s 			page 46


 1810      4572726F 
 1810      7265202D 
 1810      2D2D3A20 
 1810      25640D0A 
 1811              		.section	.rodata.HAL_CAN_RxFifo0FullCallback.str1.4,"aMS",%progbits,1
 1812              		.align	2
 1813              	.LC3:
 1814 0000 4649464F 		.ascii	"FIFO0 FULL\015\012\000"
 1814      30204655 
 1814      4C4C0D0A 
 1814      00
 1815              		.section	.rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4,"aMS",%progbits,1
 1816              		.align	2
 1817              	.LC1:
 1818 0000 44415441 		.ascii	"DATA: %d %d %d %d %d %d %d %d\015\012\000"
 1818      3A202564 
 1818      20256420 
 1818      25642025 
 1818      64202564 
 1819              		.section	.rodata.HAL_CAN_RxFifo1FullCallback.str1.4,"aMS",%progbits,1
 1820              		.align	2
 1821              	.LC4:
 1822 0000 4649464F 		.ascii	"FIFO1 FULL\015\012\000"
 1822      31204655 
 1822      4C4C0D0A 
 1822      00
 1823              		.section	.rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4,"aMS",%progbits,1
 1824              		.align	2
 1825              	.LC2:
 1826 0000 7278206F 		.ascii	"rx on FIFO1\015\012\000"
 1826      6E204649 
 1826      464F310D 
 1826      0A00
 1827              		.section	.rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4,"aMS",%progbits,1
 1828              		.align	2
 1829              	.LC5:
 1830 0000 6D62303A 		.ascii	"mb0: %d\015\012\000"
 1830      2025640D 
 1830      0A00
 1831 000a 0000     		.space	2
 1832              	.LC6:
 1833 000c 68696768 		.ascii	"high\015\012\000"
 1833      0D0A00
 1834              		.section	.rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4,"aMS",%progbits,1
 1835              		.align	2
 1836              	.LC7:
 1837 0000 6D62313A 		.ascii	"mb1: %d %d\015\012\000"
 1837      20256420 
 1837      25640D0A 
 1837      00
 1838              		.section	.rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4,"aMS",%progbits,1
 1839              		.align	2
 1840              	.LC8:
 1841 0000 6D62323A 		.ascii	"mb2: %d %d\015\012\000"
 1841      20256420 
 1841      25640D0A 
 1841      00
ARM GAS  /tmp/ccEC78z9.s 			page 47


 1842              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 1843              		.align	2
 1844              	.LC0:
 1845 0000 494D5520 		.ascii	"IMU non presente\015\012\000"
 1845      6E6F6E20 
 1845      70726573 
 1845      656E7465 
 1845      0D0A00
 1846              		.text
 1847              	.Letext0:
 1848              		.file 2 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1849              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 1850              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 1851              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 1852              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1853              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1854              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1855              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1856              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1857              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1858              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1859              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1860              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 1861              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 1862              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1863              		.file 17 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1864              		.file 18 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1865              		.file 19 "Middlewares/Third_Party/FatFs/src/integer.h"
 1866              		.file 20 "/usr/include/newlib/sys/lock.h"
 1867              		.file 21 "/usr/include/newlib/sys/_types.h"
 1868              		.file 22 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1869              		.file 23 "/usr/include/newlib/sys/reent.h"
 1870              		.file 24 "/usr/include/newlib/stdlib.h"
 1871              		.file 25 "Middlewares/Third_Party/FatFs/src/ff.h"
 1872              		.file 26 "Middlewares/Third_Party/FatFs/src/diskio.h"
 1873              		.file 27 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 1874              		.file 28 "Inc/sd_diskio.h"
 1875              		.file 29 "Inc/fatfs.h"
 1876              		.file 30 "Inc/state.h"
 1877              		.file 31 "Inc/can.h"
 1878              		.file 32 "Inc/global_variables.h"
 1879              		.file 33 "/usr/include/newlib/stdio.h"
 1880              		.file 34 "/usr/include/newlib/string.h"
 1881              		.file 35 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1882              		.file 36 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1883              		.file 37 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
ARM GAS  /tmp/ccEC78z9.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccEC78z9.s:17     .text.MX_SDMMC1_SD_Init:0000000000000000 $t
     /tmp/ccEC78z9.s:23     .text.MX_SDMMC1_SD_Init:0000000000000000 MX_SDMMC1_SD_Init
     /tmp/ccEC78z9.s:53     .text.MX_SDMMC1_SD_Init:0000000000000018 $d
                            *COM*:0000000000000084 hsd1
     /tmp/ccEC78z9.s:59     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccEC78z9.s:65     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccEC78z9.s:171    .text.MX_GPIO_Init:0000000000000094 $d
     /tmp/ccEC78z9.s:178    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccEC78z9.s:184    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccEC78z9.s:270    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:277    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccEC78z9.s:416    .text.HAL_TIM_PeriodElapsedCallback:00000000000000b0 $d
                            *COM*:0000000000000040 htim2
                            *COM*:0000000000000080 huart3
     /tmp/ccEC78z9.s:431    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:438    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccEC78z9.s:545    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000084 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccEC78z9.s:555    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:562    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo1MsgPendingCallback
     /tmp/ccEC78z9.s:596    .text.HAL_CAN_RxFifo1MsgPendingCallback:0000000000000018 $d
     /tmp/ccEC78z9.s:603    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:610    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccEC78z9.s:644    .text.HAL_CAN_RxFifo0FullCallback:0000000000000018 $d
     /tmp/ccEC78z9.s:651    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:658    .text.HAL_CAN_RxFifo1FullCallback:0000000000000000 HAL_CAN_RxFifo1FullCallback
     /tmp/ccEC78z9.s:692    .text.HAL_CAN_RxFifo1FullCallback:0000000000000018 $d
     /tmp/ccEC78z9.s:699    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:706    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000000 HAL_CAN_TxMailbox0CompleteCallback
     /tmp/ccEC78z9.s:789    .text.HAL_CAN_TxMailbox0CompleteCallback:0000000000000068 $d
     /tmp/ccEC78z9.s:800    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:807    .text.HAL_CAN_TxMailbox1CompleteCallback:0000000000000000 HAL_CAN_TxMailbox1CompleteCallback
     /tmp/ccEC78z9.s:891    .text.HAL_CAN_TxMailbox1CompleteCallback:000000000000006c $d
     /tmp/ccEC78z9.s:902    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:909    .text.HAL_CAN_TxMailbox2CompleteCallback:0000000000000000 HAL_CAN_TxMailbox2CompleteCallback
     /tmp/ccEC78z9.s:993    .text.HAL_CAN_TxMailbox2CompleteCallback:000000000000006c $d
     /tmp/ccEC78z9.s:1004   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:1011   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccEC78z9.s:1061   .text.HAL_CAN_ErrorCallback:0000000000000034 $d
     /tmp/ccEC78z9.s:1070   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccEC78z9.s:1077   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccEC78z9.s:1161   .text.HAL_UART_RxCpltCallback:0000000000000060 $d
     /tmp/ccEC78z9.s:1169   .text.Error_Handler:0000000000000000 $t
     /tmp/ccEC78z9.s:1176   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccEC78z9.s:1211   .text.Error_Handler:0000000000000028 $d
     /tmp/ccEC78z9.s:1216   .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccEC78z9.s:1222   .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccEC78z9.s:1273   .text.MX_USART3_UART_Init:0000000000000030 $d
     /tmp/ccEC78z9.s:1280   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccEC78z9.s:1286   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccEC78z9.s:1343   .text.MX_CAN1_Init:000000000000003c $d
     /tmp/ccEC78z9.s:1349   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccEC78z9.s:1355   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccEC78z9.s:1449   .text.MX_TIM2_Init:000000000000006c $d
     /tmp/ccEC78z9.s:1454   .text.SystemClock_Config:0000000000000000 $t
ARM GAS  /tmp/ccEC78z9.s 			page 49


     /tmp/ccEC78z9.s:1461   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccEC78z9.s:1622   .text.SystemClock_Config:00000000000000cc $d
     /tmp/ccEC78z9.s:1629   .text.main:0000000000000000 $t
     /tmp/ccEC78z9.s:1636   .text.main:0000000000000000 main
     /tmp/ccEC78z9.s:1781   .text.main:00000000000000bc $d
                            *COM*:0000000000000001 current_state
     /tmp/ccEC78z9.s:1805   .bss.counter:0000000000000000 counter
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000001 i_debug
     /tmp/ccEC78z9.s:1801   .bss.counter:0000000000000000 $d
     /tmp/ccEC78z9.s:1808   .rodata.HAL_CAN_ErrorCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1812   .rodata.HAL_CAN_RxFifo0FullCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1816   .rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1820   .rodata.HAL_CAN_RxFifo1FullCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1824   .rodata.HAL_CAN_RxFifo1MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1828   .rodata.HAL_CAN_TxMailbox0CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1835   .rodata.HAL_CAN_TxMailbox1CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1839   .rodata.HAL_CAN_TxMailbox2CompleteCallback.str1.4:0000000000000000 $d
     /tmp/ccEC78z9.s:1843   .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Transmit
count_ms
count_dec
count_inverter
count_imu
count_sec
count_min
count_hour
imu_connected
HAL_GPIO_TogglePin
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
fifoRxDataCAN_push
sprintf
strlen
can1
txt
fifoTxDataCAN_high_pop
CAN_Send_IT
fifoTxDataCAN_normal_pop
CAN_Send_Bck
HAL_UART_Receive_IT
debug_rx_count
debug_rx
debug_msg_arrived
HAL_Delay
HAL_UART_Init
HAL_CAN_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccEC78z9.s 			page 50


memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
MX_FATFS_Init
HAL_TIM_Base_Start_IT
can_init
init
run
idle
calib
setup
