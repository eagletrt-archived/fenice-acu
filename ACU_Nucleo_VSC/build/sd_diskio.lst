ARM GAS  /tmp/cc1sx1cg.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"sd_diskio.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.SD_CheckStatus,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	SD_CheckStatus:
  24              	.LFB141:
  25              		.file 1 "Src/sd_diskio.c"
   1:Src/sd_diskio.c **** /* USER CODE BEGIN Header */
   2:Src/sd_diskio.c **** /**
   3:Src/sd_diskio.c ****   ******************************************************************************
   4:Src/sd_diskio.c ****   * @file    sd_diskio.c
   5:Src/sd_diskio.c ****   * @brief   SD Disk I/O driver
   6:Src/sd_diskio.c ****   ******************************************************************************
   7:Src/sd_diskio.c ****   * @attention
   8:Src/sd_diskio.c ****   *
   9:Src/sd_diskio.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/sd_diskio.c ****   * All rights reserved.</center></h2>
  11:Src/sd_diskio.c ****   *
  12:Src/sd_diskio.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/sd_diskio.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/sd_diskio.c ****   * the License. You may obtain a copy of the License at:
  15:Src/sd_diskio.c ****   *                             www.st.com/SLA0044
  16:Src/sd_diskio.c ****   *
  17:Src/sd_diskio.c ****   ******************************************************************************
  18:Src/sd_diskio.c ****   */
  19:Src/sd_diskio.c **** /* USER CODE END Header */
  20:Src/sd_diskio.c **** 
  21:Src/sd_diskio.c **** /* Note: code generation based on sd_diskio_template.c v2.1.1 as "Use dma template" is disabled. */
  22:Src/sd_diskio.c **** 
  23:Src/sd_diskio.c **** /* USER CODE BEGIN firstSection */
  24:Src/sd_diskio.c **** /* can be used to modify / undefine following code or add new definitions */
  25:Src/sd_diskio.c **** /* USER CODE END firstSection*/
  26:Src/sd_diskio.c **** 
  27:Src/sd_diskio.c **** /* Includes ------------------------------------------------------------------*/
  28:Src/sd_diskio.c **** 
  29:Src/sd_diskio.c **** #include "ff_gen_drv.h"
  30:Src/sd_diskio.c **** #include "sd_diskio.h"
  31:Src/sd_diskio.c **** 
  32:Src/sd_diskio.c **** /* Private typedef -----------------------------------------------------------*/
  33:Src/sd_diskio.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /tmp/cc1sx1cg.s 			page 2


  34:Src/sd_diskio.c **** /* use the default SD timout as defined in the platform BSP driver*/
  35:Src/sd_diskio.c **** #if defined(SDMMC_DATATIMEOUT)
  36:Src/sd_diskio.c **** #define SD_TIMEOUT SDMMC_DATATIMEOUT
  37:Src/sd_diskio.c **** #elif defined(SD_DATATIMEOUT)
  38:Src/sd_diskio.c **** #define SD_TIMEOUT SD_DATATIMEOUT
  39:Src/sd_diskio.c **** #else
  40:Src/sd_diskio.c **** #define SD_TIMEOUT 30 * 1000
  41:Src/sd_diskio.c **** #endif
  42:Src/sd_diskio.c **** 
  43:Src/sd_diskio.c **** #define SD_DEFAULT_BLOCK_SIZE 512
  44:Src/sd_diskio.c **** 
  45:Src/sd_diskio.c **** /*
  46:Src/sd_diskio.c ****  * Depending on the use case, the SD card initialization could be done at the
  47:Src/sd_diskio.c ****  * application level: if it is the case define the flag below to disable
  48:Src/sd_diskio.c ****  * the BSP_SD_Init() call in the SD_Initialize() and add a call to 
  49:Src/sd_diskio.c ****  * BSP_SD_Init() elsewhere in the application.
  50:Src/sd_diskio.c ****  */
  51:Src/sd_diskio.c **** /* USER CODE BEGIN disableSDInit */
  52:Src/sd_diskio.c **** /* #define DISABLE_SD_INIT */
  53:Src/sd_diskio.c **** /* USER CODE END disableSDInit */
  54:Src/sd_diskio.c **** 
  55:Src/sd_diskio.c **** /* Disk status */
  56:Src/sd_diskio.c **** static volatile DSTATUS Stat = STA_NOINIT;
  57:Src/sd_diskio.c **** 
  58:Src/sd_diskio.c **** /* Private function prototypes -----------------------------------------------*/
  59:Src/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun);
  60:Src/sd_diskio.c **** DSTATUS SD_initialize (BYTE);
  61:Src/sd_diskio.c **** DSTATUS SD_status (BYTE);
  62:Src/sd_diskio.c **** DRESULT SD_read (BYTE, BYTE*, DWORD, UINT);
  63:Src/sd_diskio.c **** #if _USE_WRITE == 1
  64:Src/sd_diskio.c ****   DRESULT SD_write (BYTE, const BYTE*, DWORD, UINT);
  65:Src/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
  66:Src/sd_diskio.c **** #if _USE_IOCTL == 1
  67:Src/sd_diskio.c ****   DRESULT SD_ioctl (BYTE, BYTE, void*);
  68:Src/sd_diskio.c **** #endif  /* _USE_IOCTL == 1 */
  69:Src/sd_diskio.c **** 
  70:Src/sd_diskio.c **** const Diskio_drvTypeDef  SD_Driver =
  71:Src/sd_diskio.c **** {
  72:Src/sd_diskio.c ****   SD_initialize,
  73:Src/sd_diskio.c ****   SD_status,
  74:Src/sd_diskio.c ****   SD_read,
  75:Src/sd_diskio.c **** #if  _USE_WRITE == 1
  76:Src/sd_diskio.c ****   SD_write,
  77:Src/sd_diskio.c **** #endif /* _USE_WRITE == 1 */
  78:Src/sd_diskio.c **** 
  79:Src/sd_diskio.c **** #if  _USE_IOCTL == 1
  80:Src/sd_diskio.c ****   SD_ioctl,
  81:Src/sd_diskio.c **** #endif /* _USE_IOCTL == 1 */
  82:Src/sd_diskio.c **** };
  83:Src/sd_diskio.c **** 
  84:Src/sd_diskio.c **** /* USER CODE BEGIN beforeFunctionSection */
  85:Src/sd_diskio.c **** /* can be used to modify / undefine following code or add new code */
  86:Src/sd_diskio.c **** /* USER CODE END beforeFunctionSection */
  87:Src/sd_diskio.c **** 
  88:Src/sd_diskio.c **** /* Private functions ---------------------------------------------------------*/
  89:Src/sd_diskio.c **** 
  90:Src/sd_diskio.c **** static DSTATUS SD_CheckStatus(BYTE lun)
ARM GAS  /tmp/cc1sx1cg.s 			page 3


  91:Src/sd_diskio.c **** {
  26              		.loc 1 91 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 08B5     		push	{r3, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 3, -8
  35              		.cfi_offset 14, -4
  92:Src/sd_diskio.c ****   Stat = STA_NOINIT;
  36              		.loc 1 92 0
  37 0002 0122     		movs	r2, #1
  38 0004 064B     		ldr	r3, .L4
  39 0006 1A70     		strb	r2, [r3]
  93:Src/sd_diskio.c **** 
  94:Src/sd_diskio.c ****   if(BSP_SD_GetCardState() == MSD_OK)
  40              		.loc 1 94 0
  41 0008 FFF7FEFF 		bl	BSP_SD_GetCardState
  42              	.LVL1:
  43 000c 20B9     		cbnz	r0, .L2
  95:Src/sd_diskio.c ****   {
  96:Src/sd_diskio.c ****     Stat &= ~STA_NOINIT;
  44              		.loc 1 96 0
  45 000e 044A     		ldr	r2, .L4
  46 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  47 0012 03F0FE03 		and	r3, r3, #254
  48 0016 1370     		strb	r3, [r2]
  49              	.L2:
  97:Src/sd_diskio.c ****   }
  98:Src/sd_diskio.c **** 
  99:Src/sd_diskio.c ****   return Stat;
  50              		.loc 1 99 0
  51 0018 014B     		ldr	r3, .L4
  52 001a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 100:Src/sd_diskio.c **** }
  53              		.loc 1 100 0
  54 001c 08BD     		pop	{r3, pc}
  55              	.L5:
  56 001e 00BF     		.align	2
  57              	.L4:
  58 0020 00000000 		.word	.LANCHOR0
  59              		.cfi_endproc
  60              	.LFE141:
  62              		.section	.text.SD_initialize,"ax",%progbits
  63              		.align	1
  64              		.global	SD_initialize
  65              		.syntax unified
  66              		.thumb
  67              		.thumb_func
  68              		.fpu fpv5-d16
  70              	SD_initialize:
  71              	.LFB142:
 101:Src/sd_diskio.c **** 
 102:Src/sd_diskio.c **** /**
 103:Src/sd_diskio.c ****   * @brief  Initializes a Drive
ARM GAS  /tmp/cc1sx1cg.s 			page 4


 104:Src/sd_diskio.c ****   * @param  lun : not used
 105:Src/sd_diskio.c ****   * @retval DSTATUS: Operation status
 106:Src/sd_diskio.c ****   */
 107:Src/sd_diskio.c **** DSTATUS SD_initialize(BYTE lun)
 108:Src/sd_diskio.c **** {
  72              		.loc 1 108 0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              	.LVL2:
  77 0000 10B5     		push	{r4, lr}
  78              	.LCFI1:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 4, -8
  81              		.cfi_offset 14, -4
  82 0002 0446     		mov	r4, r0
 109:Src/sd_diskio.c **** Stat = STA_NOINIT;  
  83              		.loc 1 109 0
  84 0004 0122     		movs	r2, #1
  85 0006 074B     		ldr	r3, .L10
  86 0008 1A70     		strb	r2, [r3]
 110:Src/sd_diskio.c **** 
 111:Src/sd_diskio.c **** #if !defined(DISABLE_SD_INIT)
 112:Src/sd_diskio.c **** 
 113:Src/sd_diskio.c ****   if(BSP_SD_Init() == MSD_OK)
  87              		.loc 1 113 0
  88 000a FFF7FEFF 		bl	BSP_SD_Init
  89              	.LVL3:
  90 000e 10B1     		cbz	r0, .L9
  91              	.L7:
 114:Src/sd_diskio.c ****   {
 115:Src/sd_diskio.c ****     Stat = SD_CheckStatus(lun);
 116:Src/sd_diskio.c ****   }
 117:Src/sd_diskio.c **** 
 118:Src/sd_diskio.c **** #else
 119:Src/sd_diskio.c ****   Stat = SD_CheckStatus(lun);
 120:Src/sd_diskio.c **** #endif
 121:Src/sd_diskio.c ****   return Stat;
  92              		.loc 1 121 0
  93 0010 044B     		ldr	r3, .L10
  94 0012 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 122:Src/sd_diskio.c **** }
  95              		.loc 1 122 0
  96 0014 10BD     		pop	{r4, pc}
  97              	.L9:
 115:Src/sd_diskio.c ****   }
  98              		.loc 1 115 0
  99 0016 2046     		mov	r0, r4
 100 0018 FFF7FEFF 		bl	SD_CheckStatus
 101              	.LVL4:
 102 001c 014B     		ldr	r3, .L10
 103 001e 1870     		strb	r0, [r3]
 104 0020 F6E7     		b	.L7
 105              	.L11:
 106 0022 00BF     		.align	2
 107              	.L10:
 108 0024 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/cc1sx1cg.s 			page 5


 109              		.cfi_endproc
 110              	.LFE142:
 112              		.section	.text.SD_status,"ax",%progbits
 113              		.align	1
 114              		.global	SD_status
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu fpv5-d16
 120              	SD_status:
 121              	.LFB143:
 123:Src/sd_diskio.c **** 
 124:Src/sd_diskio.c **** /**
 125:Src/sd_diskio.c ****   * @brief  Gets Disk Status
 126:Src/sd_diskio.c ****   * @param  lun : not used
 127:Src/sd_diskio.c ****   * @retval DSTATUS: Operation status
 128:Src/sd_diskio.c ****   */
 129:Src/sd_diskio.c **** DSTATUS SD_status(BYTE lun)
 130:Src/sd_diskio.c **** {
 122              		.loc 1 130 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 0
 125              		@ frame_needed = 0, uses_anonymous_args = 0
 126              	.LVL5:
 127 0000 08B5     		push	{r3, lr}
 128              	.LCFI2:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 3, -8
 131              		.cfi_offset 14, -4
 131:Src/sd_diskio.c ****   return SD_CheckStatus(lun);
 132              		.loc 1 131 0
 133 0002 FFF7FEFF 		bl	SD_CheckStatus
 134              	.LVL6:
 132:Src/sd_diskio.c **** }
 135              		.loc 1 132 0
 136 0006 08BD     		pop	{r3, pc}
 137              		.cfi_endproc
 138              	.LFE143:
 140              		.section	.text.SD_read,"ax",%progbits
 141              		.align	1
 142              		.global	SD_read
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv5-d16
 148              	SD_read:
 149              	.LFB144:
 133:Src/sd_diskio.c **** 
 134:Src/sd_diskio.c **** /* USER CODE BEGIN beforeReadSection */
 135:Src/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 136:Src/sd_diskio.c **** /* USER CODE END beforeReadSection */
 137:Src/sd_diskio.c **** /**
 138:Src/sd_diskio.c ****   * @brief  Reads Sector(s)
 139:Src/sd_diskio.c ****   * @param  lun : not used
 140:Src/sd_diskio.c ****   * @param  *buff: Data buffer to store read data
 141:Src/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 142:Src/sd_diskio.c ****   * @param  count: Number of sectors to read (1..128)
ARM GAS  /tmp/cc1sx1cg.s 			page 6


 143:Src/sd_diskio.c ****   * @retval DRESULT: Operation result
 144:Src/sd_diskio.c ****   */
 145:Src/sd_diskio.c ****               
 146:Src/sd_diskio.c **** DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
 147:Src/sd_diskio.c **** {
 150              		.loc 1 147 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              	.LVL7:
 155 0000 08B5     		push	{r3, lr}
 156              	.LCFI3:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 3, -8
 159              		.cfi_offset 14, -4
 160 0002 0846     		mov	r0, r1
 161              	.LVL8:
 162 0004 1146     		mov	r1, r2
 163              	.LVL9:
 164 0006 1A46     		mov	r2, r3
 165              	.LVL10:
 148:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 149:Src/sd_diskio.c **** 
 150:Src/sd_diskio.c ****   if(BSP_SD_ReadBlocks((uint32_t*)buff,
 166              		.loc 1 150 0
 167 0008 4FF0FF33 		mov	r3, #-1
 168              	.LVL11:
 169 000c FFF7FEFF 		bl	BSP_SD_ReadBlocks
 170              	.LVL12:
 171 0010 20B9     		cbnz	r0, .L17
 172              	.L16:
 151:Src/sd_diskio.c ****                        (uint32_t) (sector),
 152:Src/sd_diskio.c ****                        count, SD_TIMEOUT) == MSD_OK)
 153:Src/sd_diskio.c ****   {
 154:Src/sd_diskio.c ****     /* wait until the read operation is finished */
 155:Src/sd_diskio.c ****     while(BSP_SD_GetCardState()!= MSD_OK)
 173              		.loc 1 155 0 discriminator 1
 174 0012 FFF7FEFF 		bl	BSP_SD_GetCardState
 175              	.LVL13:
 176 0016 0028     		cmp	r0, #0
 177 0018 FBD1     		bne	.L16
 178 001a 08BD     		pop	{r3, pc}
 179              	.L17:
 148:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 180              		.loc 1 148 0
 181 001c 0120     		movs	r0, #1
 182              	.LVL14:
 156:Src/sd_diskio.c ****     {
 157:Src/sd_diskio.c ****     }
 158:Src/sd_diskio.c ****     res = RES_OK;
 159:Src/sd_diskio.c ****   }
 160:Src/sd_diskio.c **** 
 161:Src/sd_diskio.c ****   return res;
 162:Src/sd_diskio.c **** }
 183              		.loc 1 162 0
 184 001e 08BD     		pop	{r3, pc}
 185              		.cfi_endproc
ARM GAS  /tmp/cc1sx1cg.s 			page 7


 186              	.LFE144:
 188              		.section	.text.SD_write,"ax",%progbits
 189              		.align	1
 190              		.global	SD_write
 191              		.syntax unified
 192              		.thumb
 193              		.thumb_func
 194              		.fpu fpv5-d16
 196              	SD_write:
 197              	.LFB145:
 163:Src/sd_diskio.c **** 
 164:Src/sd_diskio.c **** /* USER CODE BEGIN beforeWriteSection */
 165:Src/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 166:Src/sd_diskio.c **** /* USER CODE END beforeWriteSection */
 167:Src/sd_diskio.c **** /**
 168:Src/sd_diskio.c ****   * @brief  Writes Sector(s)
 169:Src/sd_diskio.c ****   * @param  lun : not used
 170:Src/sd_diskio.c ****   * @param  *buff: Data to be written
 171:Src/sd_diskio.c ****   * @param  sector: Sector address (LBA)
 172:Src/sd_diskio.c ****   * @param  count: Number of sectors to write (1..128)
 173:Src/sd_diskio.c ****   * @retval DRESULT: Operation result
 174:Src/sd_diskio.c ****   */
 175:Src/sd_diskio.c **** #if _USE_WRITE == 1
 176:Src/sd_diskio.c ****               
 177:Src/sd_diskio.c **** DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 178:Src/sd_diskio.c **** {
 198              		.loc 1 178 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 0, uses_anonymous_args = 0
 202              	.LVL15:
 203 0000 08B5     		push	{r3, lr}
 204              	.LCFI4:
 205              		.cfi_def_cfa_offset 8
 206              		.cfi_offset 3, -8
 207              		.cfi_offset 14, -4
 208 0002 0846     		mov	r0, r1
 209              	.LVL16:
 210 0004 1146     		mov	r1, r2
 211              	.LVL17:
 212 0006 1A46     		mov	r2, r3
 213              	.LVL18:
 179:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 180:Src/sd_diskio.c **** 
 181:Src/sd_diskio.c ****   if(BSP_SD_WriteBlocks((uint32_t*)buff,
 214              		.loc 1 181 0
 215 0008 4FF0FF33 		mov	r3, #-1
 216              	.LVL19:
 217 000c FFF7FEFF 		bl	BSP_SD_WriteBlocks
 218              	.LVL20:
 219 0010 20B9     		cbnz	r0, .L22
 220              	.L21:
 182:Src/sd_diskio.c ****                         (uint32_t)(sector),
 183:Src/sd_diskio.c ****                         count, SD_TIMEOUT) == MSD_OK)
 184:Src/sd_diskio.c ****   {
 185:Src/sd_diskio.c **** 	/* wait until the Write operation is finished */
 186:Src/sd_diskio.c ****     while(BSP_SD_GetCardState() != MSD_OK)
ARM GAS  /tmp/cc1sx1cg.s 			page 8


 221              		.loc 1 186 0 discriminator 1
 222 0012 FFF7FEFF 		bl	BSP_SD_GetCardState
 223              	.LVL21:
 224 0016 0028     		cmp	r0, #0
 225 0018 FBD1     		bne	.L21
 226 001a 08BD     		pop	{r3, pc}
 227              	.L22:
 179:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 228              		.loc 1 179 0
 229 001c 0120     		movs	r0, #1
 230              	.LVL22:
 187:Src/sd_diskio.c ****     {
 188:Src/sd_diskio.c ****     }
 189:Src/sd_diskio.c ****     res = RES_OK;
 190:Src/sd_diskio.c ****   }
 191:Src/sd_diskio.c **** 
 192:Src/sd_diskio.c ****   return res;
 193:Src/sd_diskio.c **** }
 231              		.loc 1 193 0
 232 001e 08BD     		pop	{r3, pc}
 233              		.cfi_endproc
 234              	.LFE145:
 236              		.section	.text.SD_ioctl,"ax",%progbits
 237              		.align	1
 238              		.global	SD_ioctl
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu fpv5-d16
 244              	SD_ioctl:
 245              	.LFB146:
 194:Src/sd_diskio.c **** #endif /* _USE_WRITE == 1 */  
 195:Src/sd_diskio.c **** 
 196:Src/sd_diskio.c **** /* USER CODE BEGIN beforeIoctlSection */
 197:Src/sd_diskio.c **** /* can be used to modify previous code / undefine following code / add new code */
 198:Src/sd_diskio.c **** /* USER CODE END beforeIoctlSection */
 199:Src/sd_diskio.c **** /**
 200:Src/sd_diskio.c ****   * @brief  I/O control operation
 201:Src/sd_diskio.c ****   * @param  lun : not used
 202:Src/sd_diskio.c ****   * @param  cmd: Control code
 203:Src/sd_diskio.c ****   * @param  *buff: Buffer to send/receive control data
 204:Src/sd_diskio.c ****   * @retval DRESULT: Operation result
 205:Src/sd_diskio.c ****   */
 206:Src/sd_diskio.c **** #if _USE_IOCTL == 1
 207:Src/sd_diskio.c **** DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
 208:Src/sd_diskio.c **** {
 246              		.loc 1 208 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 32
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              	.LVL23:
 209:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 210:Src/sd_diskio.c ****   BSP_SD_CardInfo CardInfo;
 211:Src/sd_diskio.c **** 
 212:Src/sd_diskio.c ****   if (Stat & STA_NOINIT) return RES_NOTRDY;
 251              		.loc 1 212 0
 252 0000 154B     		ldr	r3, .L38
ARM GAS  /tmp/cc1sx1cg.s 			page 9


 253 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 254 0004 13F0010F 		tst	r3, #1
 255 0008 01D0     		beq	.L37
 256 000a 0320     		movs	r0, #3
 257              	.LVL24:
 258 000c 7047     		bx	lr
 259              	.LVL25:
 260              	.L37:
 208:Src/sd_diskio.c ****   DRESULT res = RES_ERROR;
 261              		.loc 1 208 0
 262 000e 10B5     		push	{r4, lr}
 263              	.LCFI5:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 4, -8
 266              		.cfi_offset 14, -4
 267 0010 88B0     		sub	sp, sp, #32
 268              	.LCFI6:
 269              		.cfi_def_cfa_offset 40
 270 0012 1446     		mov	r4, r2
 213:Src/sd_diskio.c **** 
 214:Src/sd_diskio.c ****   switch (cmd)
 271              		.loc 1 214 0
 272 0014 0329     		cmp	r1, #3
 273 0016 1CD8     		bhi	.L32
 274 0018 DFE801F0 		tbb	[pc, r1]
 275              	.L27:
 276 001c 02       		.byte	(.L26-.L27)/2
 277 001d 05       		.byte	(.L28-.L27)/2
 278 001e 0C       		.byte	(.L29-.L27)/2
 279 001f 13       		.byte	(.L30-.L27)/2
 280              		.p2align 1
 281              	.L26:
 215:Src/sd_diskio.c ****   {
 216:Src/sd_diskio.c ****   /* Make sure that no pending write process */
 217:Src/sd_diskio.c ****   case CTRL_SYNC :
 218:Src/sd_diskio.c ****     res = RES_OK;
 282              		.loc 1 218 0
 283 0020 0020     		movs	r0, #0
 284              	.LVL26:
 285              	.L25:
 219:Src/sd_diskio.c ****     break;
 220:Src/sd_diskio.c **** 
 221:Src/sd_diskio.c ****   /* Get number of sectors on the disk (DWORD) */
 222:Src/sd_diskio.c ****   case GET_SECTOR_COUNT :
 223:Src/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 224:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 225:Src/sd_diskio.c ****     res = RES_OK;
 226:Src/sd_diskio.c ****     break;
 227:Src/sd_diskio.c **** 
 228:Src/sd_diskio.c ****   /* Get R/W sector size (WORD) */
 229:Src/sd_diskio.c ****   case GET_SECTOR_SIZE :
 230:Src/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 231:Src/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 232:Src/sd_diskio.c ****     res = RES_OK;
 233:Src/sd_diskio.c ****     break;
 234:Src/sd_diskio.c **** 
 235:Src/sd_diskio.c ****   /* Get erase block size in unit of sector (DWORD) */
ARM GAS  /tmp/cc1sx1cg.s 			page 10


 236:Src/sd_diskio.c ****   case GET_BLOCK_SIZE :
 237:Src/sd_diskio.c ****     BSP_SD_GetCardInfo(&CardInfo);
 238:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 239:Src/sd_diskio.c ****     res = RES_OK;
 240:Src/sd_diskio.c ****     break;
 241:Src/sd_diskio.c **** 
 242:Src/sd_diskio.c ****   default:
 243:Src/sd_diskio.c ****     res = RES_PARERR;
 244:Src/sd_diskio.c ****   }
 245:Src/sd_diskio.c **** 
 246:Src/sd_diskio.c ****   return res;
 247:Src/sd_diskio.c **** }
 286              		.loc 1 247 0
 287 0022 08B0     		add	sp, sp, #32
 288              	.LCFI7:
 289              		.cfi_remember_state
 290              		.cfi_def_cfa_offset 8
 291              		@ sp needed
 292 0024 10BD     		pop	{r4, pc}
 293              	.LVL27:
 294              	.L28:
 295              	.LCFI8:
 296              		.cfi_restore_state
 223:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockNbr;
 297              		.loc 1 223 0
 298 0026 6846     		mov	r0, sp
 299              	.LVL28:
 300 0028 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 301              	.LVL29:
 224:Src/sd_diskio.c ****     res = RES_OK;
 302              		.loc 1 224 0
 303 002c 069B     		ldr	r3, [sp, #24]
 304 002e 2360     		str	r3, [r4]
 305              	.LVL30:
 225:Src/sd_diskio.c ****     break;
 306              		.loc 1 225 0
 307 0030 0020     		movs	r0, #0
 226:Src/sd_diskio.c **** 
 308              		.loc 1 226 0
 309 0032 F6E7     		b	.L25
 310              	.LVL31:
 311              	.L29:
 230:Src/sd_diskio.c ****     *(WORD*)buff = CardInfo.LogBlockSize;
 312              		.loc 1 230 0
 313 0034 6846     		mov	r0, sp
 314              	.LVL32:
 315 0036 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 316              	.LVL33:
 231:Src/sd_diskio.c ****     res = RES_OK;
 317              		.loc 1 231 0
 318 003a 079B     		ldr	r3, [sp, #28]
 319 003c 2380     		strh	r3, [r4]	@ movhi
 320              	.LVL34:
 232:Src/sd_diskio.c ****     break;
 321              		.loc 1 232 0
 322 003e 0020     		movs	r0, #0
 233:Src/sd_diskio.c **** 
ARM GAS  /tmp/cc1sx1cg.s 			page 11


 323              		.loc 1 233 0
 324 0040 EFE7     		b	.L25
 325              	.LVL35:
 326              	.L30:
 237:Src/sd_diskio.c ****     *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 327              		.loc 1 237 0
 328 0042 6846     		mov	r0, sp
 329              	.LVL36:
 330 0044 FFF7FEFF 		bl	BSP_SD_GetCardInfo
 331              	.LVL37:
 238:Src/sd_diskio.c ****     res = RES_OK;
 332              		.loc 1 238 0
 333 0048 079B     		ldr	r3, [sp, #28]
 334 004a 5B0A     		lsrs	r3, r3, #9
 335 004c 2360     		str	r3, [r4]
 336              	.LVL38:
 239:Src/sd_diskio.c ****     break;
 337              		.loc 1 239 0
 338 004e 0020     		movs	r0, #0
 240:Src/sd_diskio.c **** 
 339              		.loc 1 240 0
 340 0050 E7E7     		b	.L25
 341              	.LVL39:
 342              	.L32:
 243:Src/sd_diskio.c ****   }
 343              		.loc 1 243 0
 344 0052 0420     		movs	r0, #4
 345              	.LVL40:
 346 0054 E5E7     		b	.L25
 347              	.L39:
 348 0056 00BF     		.align	2
 349              	.L38:
 350 0058 00000000 		.word	.LANCHOR0
 351              		.cfi_endproc
 352              	.LFE146:
 354              		.global	SD_Driver
 355              		.section	.data.Stat,"aw",%progbits
 356              		.set	.LANCHOR0,. + 0
 359              	Stat:
 360 0000 01       		.byte	1
 361              		.section	.rodata.SD_Driver,"a",%progbits
 362              		.align	2
 365              	SD_Driver:
 366 0000 00000000 		.word	SD_initialize
 367 0004 00000000 		.word	SD_status
 368 0008 00000000 		.word	SD_read
 369 000c 00000000 		.word	SD_write
 370 0010 00000000 		.word	SD_ioctl
 371              		.text
 372              	.Letext0:
 373              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 374              		.file 3 "Middlewares/Third_Party/FatFs/src/diskio.h"
 375              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 376              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 377              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 378              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 379              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
ARM GAS  /tmp/cc1sx1cg.s 			page 12


 380              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 381              		.file 10 "/usr/include/newlib/sys/lock.h"
 382              		.file 11 "/usr/include/newlib/sys/_types.h"
 383              		.file 12 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 384              		.file 13 "/usr/include/newlib/sys/reent.h"
 385              		.file 14 "/usr/include/newlib/stdlib.h"
 386              		.file 15 "Middlewares/Third_Party/FatFs/src/ff_gen_drv.h"
 387              		.file 16 "Inc/sd_diskio.h"
 388              		.file 17 "Inc/bsp_driver_sd.h"
ARM GAS  /tmp/cc1sx1cg.s 			page 13


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sd_diskio.c
     /tmp/cc1sx1cg.s:17     .text.SD_CheckStatus:0000000000000000 $t
     /tmp/cc1sx1cg.s:23     .text.SD_CheckStatus:0000000000000000 SD_CheckStatus
     /tmp/cc1sx1cg.s:58     .text.SD_CheckStatus:0000000000000020 $d
     /tmp/cc1sx1cg.s:63     .text.SD_initialize:0000000000000000 $t
     /tmp/cc1sx1cg.s:70     .text.SD_initialize:0000000000000000 SD_initialize
     /tmp/cc1sx1cg.s:108    .text.SD_initialize:0000000000000024 $d
     /tmp/cc1sx1cg.s:113    .text.SD_status:0000000000000000 $t
     /tmp/cc1sx1cg.s:120    .text.SD_status:0000000000000000 SD_status
     /tmp/cc1sx1cg.s:141    .text.SD_read:0000000000000000 $t
     /tmp/cc1sx1cg.s:148    .text.SD_read:0000000000000000 SD_read
     /tmp/cc1sx1cg.s:189    .text.SD_write:0000000000000000 $t
     /tmp/cc1sx1cg.s:196    .text.SD_write:0000000000000000 SD_write
     /tmp/cc1sx1cg.s:237    .text.SD_ioctl:0000000000000000 $t
     /tmp/cc1sx1cg.s:244    .text.SD_ioctl:0000000000000000 SD_ioctl
     /tmp/cc1sx1cg.s:276    .text.SD_ioctl:000000000000001c $d
     /tmp/cc1sx1cg.s:280    .text.SD_ioctl:0000000000000020 $t
     /tmp/cc1sx1cg.s:350    .text.SD_ioctl:0000000000000058 $d
     /tmp/cc1sx1cg.s:365    .rodata.SD_Driver:0000000000000000 SD_Driver
     /tmp/cc1sx1cg.s:359    .data.Stat:0000000000000000 Stat
     /tmp/cc1sx1cg.s:362    .rodata.SD_Driver:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
BSP_SD_GetCardState
BSP_SD_Init
BSP_SD_ReadBlocks
BSP_SD_WriteBlocks
BSP_SD_GetCardInfo
