ARM GAS  /tmp/cc9yE63l.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"bsp_driver_sd.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.BSP_SD_ITConfig,"ax",%progbits
  17              		.align	1
  18              		.global	BSP_SD_ITConfig
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	BSP_SD_ITConfig:
  25              	.LFB142:
  26              		.file 1 "Src/bsp_driver_sd.c"
   1:Src/bsp_driver_sd.c **** /**
   2:Src/bsp_driver_sd.c ****  ******************************************************************************
   3:Src/bsp_driver_sd.c ****   * @file    bsp_driver_sd.c for F7 (based on stm32756g_eval_sd.c)
   4:Src/bsp_driver_sd.c ****   * @brief   This file includes a generic uSD card driver.
   5:Src/bsp_driver_sd.c ****   ******************************************************************************
   6:Src/bsp_driver_sd.c ****   * @attention
   7:Src/bsp_driver_sd.c ****   *
   8:Src/bsp_driver_sd.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
   9:Src/bsp_driver_sd.c ****   * All rights reserved.</center></h2>
  10:Src/bsp_driver_sd.c ****   *
  11:Src/bsp_driver_sd.c ****   * This software component is licensed by ST under Ultimate Liberty license
  12:Src/bsp_driver_sd.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  13:Src/bsp_driver_sd.c ****   * the License. You may obtain a copy of the License at:
  14:Src/bsp_driver_sd.c ****   *                             www.st.com/SLA0044
  15:Src/bsp_driver_sd.c ****   *
  16:Src/bsp_driver_sd.c ****   ******************************************************************************
  17:Src/bsp_driver_sd.c ****   */
  18:Src/bsp_driver_sd.c **** 
  19:Src/bsp_driver_sd.c **** #ifdef OLD_API
  20:Src/bsp_driver_sd.c **** /* kept to avoid issue when migrating old projects. */
  21:Src/bsp_driver_sd.c **** /* USER CODE BEGIN 0 */
  22:Src/bsp_driver_sd.c **** 
  23:Src/bsp_driver_sd.c **** /* USER CODE END 0 */
  24:Src/bsp_driver_sd.c **** #else
  25:Src/bsp_driver_sd.c **** /* USER CODE BEGIN FirstSection */
  26:Src/bsp_driver_sd.c **** /* can be used to modify / undefine following code or add new definitions */
  27:Src/bsp_driver_sd.c **** /* USER CODE END FirstSection */
  28:Src/bsp_driver_sd.c **** /* Includes ------------------------------------------------------------------*/
  29:Src/bsp_driver_sd.c **** #include "bsp_driver_sd.h"
  30:Src/bsp_driver_sd.c **** 
  31:Src/bsp_driver_sd.c **** /* Extern variables ---------------------------------------------------------*/ 
  32:Src/bsp_driver_sd.c ****   
ARM GAS  /tmp/cc9yE63l.s 			page 2


  33:Src/bsp_driver_sd.c **** extern SD_HandleTypeDef hsd1;
  34:Src/bsp_driver_sd.c **** 
  35:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeInitSection */
  36:Src/bsp_driver_sd.c **** /* can be used to modify / undefine following code or add code */
  37:Src/bsp_driver_sd.c **** /* USER CODE END BeforeInitSection */
  38:Src/bsp_driver_sd.c **** /**
  39:Src/bsp_driver_sd.c ****   * @brief  Initializes the SD card device.
  40:Src/bsp_driver_sd.c ****   * @retval SD status
  41:Src/bsp_driver_sd.c ****   */
  42:Src/bsp_driver_sd.c **** uint8_t BSP_SD_Init(void)
  43:Src/bsp_driver_sd.c **** {
  44:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
  45:Src/bsp_driver_sd.c ****   /* Check if the SD card is plugged in the slot */
  46:Src/bsp_driver_sd.c ****   if (BSP_SD_IsDetected() != SD_PRESENT)
  47:Src/bsp_driver_sd.c ****   {
  48:Src/bsp_driver_sd.c ****     return MSD_ERROR_SD_NOT_PRESENT;
  49:Src/bsp_driver_sd.c ****   }
  50:Src/bsp_driver_sd.c ****   /* HAL SD initialization */
  51:Src/bsp_driver_sd.c ****   sd_state = HAL_SD_Init(&hsd1);
  52:Src/bsp_driver_sd.c **** 
  53:Src/bsp_driver_sd.c ****   return sd_state;
  54:Src/bsp_driver_sd.c **** }
  55:Src/bsp_driver_sd.c **** /* USER CODE BEGIN AfterInitSection */
  56:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
  57:Src/bsp_driver_sd.c **** /* USER CODE END AfterInitSection */
  58:Src/bsp_driver_sd.c **** 
  59:Src/bsp_driver_sd.c **** /**
  60:Src/bsp_driver_sd.c ****   * @brief  Configures Interrupt mode for SD detection pin.
  61:Src/bsp_driver_sd.c ****   * @retval Returns 0 in success otherwise 1. 
  62:Src/bsp_driver_sd.c ****   */
  63:Src/bsp_driver_sd.c **** uint8_t BSP_SD_ITConfig(void)
  64:Src/bsp_driver_sd.c **** {  
  27              		.loc 1 64 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  65:Src/bsp_driver_sd.c ****   /* TBI: add user code here depending on the hardware configuration used */
  66:Src/bsp_driver_sd.c ****   
  67:Src/bsp_driver_sd.c ****   return (uint8_t)0;
  68:Src/bsp_driver_sd.c **** }
  32              		.loc 1 68 0
  33 0000 0020     		movs	r0, #0
  34 0002 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE142:
  38              		.section	.text.BSP_SD_ReadBlocks,"ax",%progbits
  39              		.align	1
  40              		.global	BSP_SD_ReadBlocks
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv5-d16
  46              	BSP_SD_ReadBlocks:
  47              	.LFB143:
  69:Src/bsp_driver_sd.c **** 
  70:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeReadBlocksSection */
ARM GAS  /tmp/cc9yE63l.s 			page 3


  71:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
  72:Src/bsp_driver_sd.c **** /* USER CODE END BeforeReadBlocksSection */
  73:Src/bsp_driver_sd.c **** /**
  74:Src/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in polling mode.
  75:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
  76:Src/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read
  77:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
  78:Src/bsp_driver_sd.c ****   * @param  Timeout: Timeout for read operation
  79:Src/bsp_driver_sd.c ****   * @retval SD status
  80:Src/bsp_driver_sd.c ****   */
  81:Src/bsp_driver_sd.c **** uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeou
  82:Src/bsp_driver_sd.c **** {
  48              		.loc 1 82 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LVL0:
  53 0000 00B5     		push	{lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 4
  56              		.cfi_offset 14, -4
  57 0002 83B0     		sub	sp, sp, #12
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 16
  60              	.LVL1:
  83:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
  84:Src/bsp_driver_sd.c **** 
  85:Src/bsp_driver_sd.c ****   if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
  61              		.loc 1 85 0
  62 0004 0093     		str	r3, [sp]
  63 0006 1346     		mov	r3, r2
  64              	.LVL2:
  65 0008 0A46     		mov	r2, r1
  66              	.LVL3:
  67 000a 0146     		mov	r1, r0
  68              	.LVL4:
  69 000c 0348     		ldr	r0, .L6
  70              	.LVL5:
  71 000e FFF7FEFF 		bl	HAL_SD_ReadBlocks
  72              	.LVL6:
  73 0012 00B1     		cbz	r0, .L3
  86:Src/bsp_driver_sd.c ****   {
  87:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
  74              		.loc 1 87 0
  75 0014 0120     		movs	r0, #1
  76              	.L3:
  77              	.LVL7:
  88:Src/bsp_driver_sd.c ****   }
  89:Src/bsp_driver_sd.c **** 
  90:Src/bsp_driver_sd.c ****   return sd_state;  
  91:Src/bsp_driver_sd.c **** }
  78              		.loc 1 91 0
  79 0016 03B0     		add	sp, sp, #12
  80              	.LCFI2:
  81              		.cfi_def_cfa_offset 4
  82              		@ sp needed
  83 0018 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cc9yE63l.s 			page 4


  84              	.L7:
  85              		.align	2
  86              	.L6:
  87 001c 00000000 		.word	hsd1
  88              		.cfi_endproc
  89              	.LFE143:
  91              		.section	.text.BSP_SD_WriteBlocks,"ax",%progbits
  92              		.align	1
  93              		.global	BSP_SD_WriteBlocks
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv5-d16
  99              	BSP_SD_WriteBlocks:
 100              	.LFB144:
  92:Src/bsp_driver_sd.c **** 
  93:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeWriteBlocksSection */
  94:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
  95:Src/bsp_driver_sd.c **** /* USER CODE END BeforeWriteBlocksSection */
  96:Src/bsp_driver_sd.c **** /**
  97:Src/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in polling mode. 
  98:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
  99:Src/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 100:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 101:Src/bsp_driver_sd.c ****   * @param  Timeout: Timeout for write operation
 102:Src/bsp_driver_sd.c ****   * @retval SD status
 103:Src/bsp_driver_sd.c ****   */
 104:Src/bsp_driver_sd.c **** uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Time
 105:Src/bsp_driver_sd.c **** {
 101              		.loc 1 105 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              	.LVL8:
 106 0000 00B5     		push	{lr}
 107              	.LCFI3:
 108              		.cfi_def_cfa_offset 4
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12
 111              	.LCFI4:
 112              		.cfi_def_cfa_offset 16
 113              	.LVL9:
 106:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 107:Src/bsp_driver_sd.c **** 
 108:Src/bsp_driver_sd.c ****   if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 114              		.loc 1 108 0
 115 0004 0093     		str	r3, [sp]
 116 0006 1346     		mov	r3, r2
 117              	.LVL10:
 118 0008 0A46     		mov	r2, r1
 119              	.LVL11:
 120 000a 0146     		mov	r1, r0
 121              	.LVL12:
 122 000c 0348     		ldr	r0, .L12
 123              	.LVL13:
 124 000e FFF7FEFF 		bl	HAL_SD_WriteBlocks
 125              	.LVL14:
ARM GAS  /tmp/cc9yE63l.s 			page 5


 126 0012 00B1     		cbz	r0, .L9
 109:Src/bsp_driver_sd.c ****   {
 110:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 127              		.loc 1 110 0
 128 0014 0120     		movs	r0, #1
 129              	.L9:
 130              	.LVL15:
 111:Src/bsp_driver_sd.c ****   }
 112:Src/bsp_driver_sd.c **** 
 113:Src/bsp_driver_sd.c ****   return sd_state;  
 114:Src/bsp_driver_sd.c **** }
 131              		.loc 1 114 0
 132 0016 03B0     		add	sp, sp, #12
 133              	.LCFI5:
 134              		.cfi_def_cfa_offset 4
 135              		@ sp needed
 136 0018 5DF804FB 		ldr	pc, [sp], #4
 137              	.L13:
 138              		.align	2
 139              	.L12:
 140 001c 00000000 		.word	hsd1
 141              		.cfi_endproc
 142              	.LFE144:
 144              		.section	.text.BSP_SD_ReadBlocks_DMA,"ax",%progbits
 145              		.align	1
 146              		.global	BSP_SD_ReadBlocks_DMA
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv5-d16
 152              	BSP_SD_ReadBlocks_DMA:
 153              	.LFB145:
 115:Src/bsp_driver_sd.c **** 
 116:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeReadDMABlocksSection */
 117:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 118:Src/bsp_driver_sd.c **** /* USER CODE END BeforeReadDMABlocksSection */
 119:Src/bsp_driver_sd.c **** /**
 120:Src/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in DMA mode.
 121:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 122:Src/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read
 123:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read 
 124:Src/bsp_driver_sd.c ****   * @retval SD status
 125:Src/bsp_driver_sd.c ****   */
 126:Src/bsp_driver_sd.c **** uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
 127:Src/bsp_driver_sd.c **** {
 154              		.loc 1 127 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL16:
 159 0000 08B5     		push	{r3, lr}
 160              	.LCFI6:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 3, -8
 163              		.cfi_offset 14, -4
 164              	.LVL17:
 128:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
ARM GAS  /tmp/cc9yE63l.s 			page 6


 129:Src/bsp_driver_sd.c ****   
 130:Src/bsp_driver_sd.c ****   /* Read block(s) in DMA transfer mode */
 131:Src/bsp_driver_sd.c ****   if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 165              		.loc 1 131 0
 166 0002 1346     		mov	r3, r2
 167 0004 0A46     		mov	r2, r1
 168              	.LVL18:
 169 0006 0146     		mov	r1, r0
 170              	.LVL19:
 171 0008 0248     		ldr	r0, .L18
 172              	.LVL20:
 173 000a FFF7FEFF 		bl	HAL_SD_ReadBlocks_DMA
 174              	.LVL21:
 175 000e 00B1     		cbz	r0, .L15
 132:Src/bsp_driver_sd.c ****   {
 133:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 176              		.loc 1 133 0
 177 0010 0120     		movs	r0, #1
 178              	.L15:
 179              	.LVL22:
 134:Src/bsp_driver_sd.c ****   }
 135:Src/bsp_driver_sd.c ****   
 136:Src/bsp_driver_sd.c ****   return sd_state; 
 137:Src/bsp_driver_sd.c **** }
 180              		.loc 1 137 0
 181 0012 08BD     		pop	{r3, pc}
 182              	.L19:
 183              		.align	2
 184              	.L18:
 185 0014 00000000 		.word	hsd1
 186              		.cfi_endproc
 187              	.LFE145:
 189              		.section	.text.BSP_SD_WriteBlocks_DMA,"ax",%progbits
 190              		.align	1
 191              		.global	BSP_SD_WriteBlocks_DMA
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv5-d16
 197              	BSP_SD_WriteBlocks_DMA:
 198              	.LFB146:
 138:Src/bsp_driver_sd.c **** 
 139:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeWriteDMABlocksSection */
 140:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 141:Src/bsp_driver_sd.c **** /* USER CODE END BeforeWriteDMABlocksSection */
 142:Src/bsp_driver_sd.c **** /**
 143:Src/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in DMA mode.
 144:Src/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 145:Src/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 146:Src/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write 
 147:Src/bsp_driver_sd.c ****   * @retval SD status
 148:Src/bsp_driver_sd.c ****   */
 149:Src/bsp_driver_sd.c **** uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
 150:Src/bsp_driver_sd.c **** {
 199              		.loc 1 150 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc9yE63l.s 			page 7


 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL23:
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI7:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 209              	.LVL24:
 151:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 152:Src/bsp_driver_sd.c ****   
 153:Src/bsp_driver_sd.c ****   /* Write block(s) in DMA transfer mode */
 154:Src/bsp_driver_sd.c ****   if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 210              		.loc 1 154 0
 211 0002 1346     		mov	r3, r2
 212 0004 0A46     		mov	r2, r1
 213              	.LVL25:
 214 0006 0146     		mov	r1, r0
 215              	.LVL26:
 216 0008 0248     		ldr	r0, .L24
 217              	.LVL27:
 218 000a FFF7FEFF 		bl	HAL_SD_WriteBlocks_DMA
 219              	.LVL28:
 220 000e 00B1     		cbz	r0, .L21
 155:Src/bsp_driver_sd.c ****   {
 156:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 221              		.loc 1 156 0
 222 0010 0120     		movs	r0, #1
 223              	.L21:
 224              	.LVL29:
 157:Src/bsp_driver_sd.c ****   }
 158:Src/bsp_driver_sd.c ****   
 159:Src/bsp_driver_sd.c ****   return sd_state; 
 160:Src/bsp_driver_sd.c **** }
 225              		.loc 1 160 0
 226 0012 08BD     		pop	{r3, pc}
 227              	.L25:
 228              		.align	2
 229              	.L24:
 230 0014 00000000 		.word	hsd1
 231              		.cfi_endproc
 232              	.LFE146:
 234              		.section	.text.BSP_SD_Erase,"ax",%progbits
 235              		.align	1
 236              		.global	BSP_SD_Erase
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv5-d16
 242              	BSP_SD_Erase:
 243              	.LFB147:
 161:Src/bsp_driver_sd.c **** 
 162:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeEraseSection */
 163:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 164:Src/bsp_driver_sd.c **** /* USER CODE END BeforeEraseSection */
 165:Src/bsp_driver_sd.c **** /**
 166:Src/bsp_driver_sd.c ****   * @brief  Erases the specified memory area of the given SD card. 
 167:Src/bsp_driver_sd.c ****   * @param  StartAddr: Start byte address
ARM GAS  /tmp/cc9yE63l.s 			page 8


 168:Src/bsp_driver_sd.c ****   * @param  EndAddr: End byte address
 169:Src/bsp_driver_sd.c ****   * @retval SD status
 170:Src/bsp_driver_sd.c ****   */
 171:Src/bsp_driver_sd.c **** uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
 172:Src/bsp_driver_sd.c **** {
 244              		.loc 1 172 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              	.LVL30:
 249 0000 08B5     		push	{r3, lr}
 250              	.LCFI8:
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              	.LVL31:
 173:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 174:Src/bsp_driver_sd.c **** 
 175:Src/bsp_driver_sd.c ****   if (HAL_SD_Erase(&hsd1, StartAddr, EndAddr) != HAL_OK)  
 255              		.loc 1 175 0
 256 0002 0A46     		mov	r2, r1
 257 0004 0146     		mov	r1, r0
 258              	.LVL32:
 259 0006 0348     		ldr	r0, .L30
 260              	.LVL33:
 261 0008 FFF7FEFF 		bl	HAL_SD_Erase
 262              	.LVL34:
 263 000c 00B1     		cbz	r0, .L27
 176:Src/bsp_driver_sd.c ****   {
 177:Src/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 264              		.loc 1 177 0
 265 000e 0120     		movs	r0, #1
 266              	.L27:
 267              	.LVL35:
 178:Src/bsp_driver_sd.c ****   }
 179:Src/bsp_driver_sd.c **** 
 180:Src/bsp_driver_sd.c ****   return sd_state; 
 181:Src/bsp_driver_sd.c **** }
 268              		.loc 1 181 0
 269 0010 08BD     		pop	{r3, pc}
 270              	.L31:
 271 0012 00BF     		.align	2
 272              	.L30:
 273 0014 00000000 		.word	hsd1
 274              		.cfi_endproc
 275              	.LFE147:
 277              		.section	.text.BSP_SD_GetCardState,"ax",%progbits
 278              		.align	1
 279              		.global	BSP_SD_GetCardState
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 283              		.fpu fpv5-d16
 285              	BSP_SD_GetCardState:
 286              	.LFB148:
 182:Src/bsp_driver_sd.c **** 
 183:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeGetCardStateSection */
ARM GAS  /tmp/cc9yE63l.s 			page 9


 184:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 185:Src/bsp_driver_sd.c **** /* USER CODE END BeforeGetCardStateSection */
 186:Src/bsp_driver_sd.c **** /**
 187:Src/bsp_driver_sd.c ****   * @brief  Gets the current SD card data status.
 188:Src/bsp_driver_sd.c ****   * @param  None
 189:Src/bsp_driver_sd.c ****   * @retval Data transfer state.
 190:Src/bsp_driver_sd.c ****   *          This value can be one of the following values:
 191:Src/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_OK: No data transfer is acting
 192:Src/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 193:Src/bsp_driver_sd.c ****   */
 194:Src/bsp_driver_sd.c **** uint8_t BSP_SD_GetCardState(void)
 195:Src/bsp_driver_sd.c **** {
 287              		.loc 1 195 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291 0000 08B5     		push	{r3, lr}
 292              	.LCFI9:
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 3, -8
 295              		.cfi_offset 14, -4
 196:Src/bsp_driver_sd.c ****   return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY
 296              		.loc 1 196 0
 297 0002 0348     		ldr	r0, .L34
 298 0004 FFF7FEFF 		bl	HAL_SD_GetCardState
 299              	.LVL36:
 197:Src/bsp_driver_sd.c **** }
 300              		.loc 1 197 0
 301 0008 0438     		subs	r0, r0, #4
 302 000a 18BF     		it	ne
 303 000c 0120     		movne	r0, #1
 304 000e 08BD     		pop	{r3, pc}
 305              	.L35:
 306              		.align	2
 307              	.L34:
 308 0010 00000000 		.word	hsd1
 309              		.cfi_endproc
 310              	.LFE148:
 312              		.section	.text.BSP_SD_GetCardInfo,"ax",%progbits
 313              		.align	1
 314              		.global	BSP_SD_GetCardInfo
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv5-d16
 320              	BSP_SD_GetCardInfo:
 321              	.LFB149:
 198:Src/bsp_driver_sd.c **** 
 199:Src/bsp_driver_sd.c **** /**
 200:Src/bsp_driver_sd.c ****   * @brief  Get SD information about specific SD card.
 201:Src/bsp_driver_sd.c ****   * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 202:Src/bsp_driver_sd.c ****   * @retval None 
 203:Src/bsp_driver_sd.c ****   */
 204:Src/bsp_driver_sd.c **** void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
 205:Src/bsp_driver_sd.c **** {
 322              		.loc 1 205 0
 323              		.cfi_startproc
ARM GAS  /tmp/cc9yE63l.s 			page 10


 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              	.LVL37:
 327 0000 08B5     		push	{r3, lr}
 328              	.LCFI10:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
 206:Src/bsp_driver_sd.c ****   /* Get SD card Information */
 207:Src/bsp_driver_sd.c ****   HAL_SD_GetCardInfo(&hsd1, CardInfo);
 332              		.loc 1 207 0
 333 0002 0146     		mov	r1, r0
 334 0004 0148     		ldr	r0, .L38
 335              	.LVL38:
 336 0006 FFF7FEFF 		bl	HAL_SD_GetCardInfo
 337              	.LVL39:
 338 000a 08BD     		pop	{r3, pc}
 339              	.L39:
 340              		.align	2
 341              	.L38:
 342 000c 00000000 		.word	hsd1
 343              		.cfi_endproc
 344              	.LFE149:
 346              		.section	.text.BSP_SD_AbortCallback,"ax",%progbits
 347              		.align	1
 348              		.weak	BSP_SD_AbortCallback
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 352              		.fpu fpv5-d16
 354              	BSP_SD_AbortCallback:
 355              	.LFB153:
 208:Src/bsp_driver_sd.c **** }
 209:Src/bsp_driver_sd.c **** 
 210:Src/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeCallBacksSection */
 211:Src/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 212:Src/bsp_driver_sd.c **** /* USER CODE END BeforeCallBacksSection */
 213:Src/bsp_driver_sd.c **** /**
 214:Src/bsp_driver_sd.c ****   * @brief SD Abort callbacks
 215:Src/bsp_driver_sd.c ****   * @param hsd: SD handle
 216:Src/bsp_driver_sd.c ****   * @retval None
 217:Src/bsp_driver_sd.c ****   */
 218:Src/bsp_driver_sd.c **** void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
 219:Src/bsp_driver_sd.c **** {
 220:Src/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 221:Src/bsp_driver_sd.c **** }
 222:Src/bsp_driver_sd.c **** 
 223:Src/bsp_driver_sd.c **** /**
 224:Src/bsp_driver_sd.c ****   * @brief Tx Transfer completed callback
 225:Src/bsp_driver_sd.c ****   * @param hsd: SD handle
 226:Src/bsp_driver_sd.c ****   * @retval None
 227:Src/bsp_driver_sd.c ****   */
 228:Src/bsp_driver_sd.c **** void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
 229:Src/bsp_driver_sd.c **** {
 230:Src/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 231:Src/bsp_driver_sd.c **** }
 232:Src/bsp_driver_sd.c **** 
ARM GAS  /tmp/cc9yE63l.s 			page 11


 233:Src/bsp_driver_sd.c **** /**
 234:Src/bsp_driver_sd.c ****   * @brief Rx Transfer completed callback
 235:Src/bsp_driver_sd.c ****   * @param hsd: SD handle
 236:Src/bsp_driver_sd.c ****   * @retval None
 237:Src/bsp_driver_sd.c ****   */
 238:Src/bsp_driver_sd.c **** void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
 239:Src/bsp_driver_sd.c **** {
 240:Src/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 241:Src/bsp_driver_sd.c **** }
 242:Src/bsp_driver_sd.c **** 
 243:Src/bsp_driver_sd.c **** /* USER CODE BEGIN CallBacksSection_C */
 244:Src/bsp_driver_sd.c **** /**
 245:Src/bsp_driver_sd.c ****   * @brief BSP SD Abort callback
 246:Src/bsp_driver_sd.c ****   * @retval None
 247:Src/bsp_driver_sd.c ****   */
 248:Src/bsp_driver_sd.c **** __weak void BSP_SD_AbortCallback(void)
 249:Src/bsp_driver_sd.c **** {
 356              		.loc 1 249 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361 0000 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE153:
 365              		.section	.text.HAL_SD_AbortCallback,"ax",%progbits
 366              		.align	1
 367              		.global	HAL_SD_AbortCallback
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu fpv5-d16
 373              	HAL_SD_AbortCallback:
 374              	.LFB150:
 219:Src/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 375              		.loc 1 219 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 0, uses_anonymous_args = 0
 379              	.LVL40:
 219:Src/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 380              		.loc 1 219 0
 381 0000 08B5     		push	{r3, lr}
 382              	.LCFI11:
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 3, -8
 385              		.cfi_offset 14, -4
 220:Src/bsp_driver_sd.c **** }
 386              		.loc 1 220 0
 387 0002 FFF7FEFF 		bl	BSP_SD_AbortCallback
 388              	.LVL41:
 389 0006 08BD     		pop	{r3, pc}
 390              		.cfi_endproc
 391              	.LFE150:
 393              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 394              		.align	1
 395              		.weak	BSP_SD_WriteCpltCallback
ARM GAS  /tmp/cc9yE63l.s 			page 12


 396              		.syntax unified
 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv5-d16
 401              	BSP_SD_WriteCpltCallback:
 402              	.LFB154:
 250:Src/bsp_driver_sd.c **** 
 251:Src/bsp_driver_sd.c **** }
 252:Src/bsp_driver_sd.c **** 
 253:Src/bsp_driver_sd.c **** /**
 254:Src/bsp_driver_sd.c ****   * @brief BSP Tx Transfer completed callback
 255:Src/bsp_driver_sd.c ****   * @retval None
 256:Src/bsp_driver_sd.c ****   */
 257:Src/bsp_driver_sd.c **** __weak void BSP_SD_WriteCpltCallback(void)
 258:Src/bsp_driver_sd.c **** {
 403              		.loc 1 258 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 7047     		bx	lr
 409              		.cfi_endproc
 410              	.LFE154:
 412              		.section	.text.HAL_SD_TxCpltCallback,"ax",%progbits
 413              		.align	1
 414              		.global	HAL_SD_TxCpltCallback
 415              		.syntax unified
 416              		.thumb
 417              		.thumb_func
 418              		.fpu fpv5-d16
 420              	HAL_SD_TxCpltCallback:
 421              	.LFB151:
 229:Src/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 422              		.loc 1 229 0
 423              		.cfi_startproc
 424              		@ args = 0, pretend = 0, frame = 0
 425              		@ frame_needed = 0, uses_anonymous_args = 0
 426              	.LVL42:
 229:Src/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 427              		.loc 1 229 0
 428 0000 08B5     		push	{r3, lr}
 429              	.LCFI12:
 430              		.cfi_def_cfa_offset 8
 431              		.cfi_offset 3, -8
 432              		.cfi_offset 14, -4
 230:Src/bsp_driver_sd.c **** }
 433              		.loc 1 230 0
 434 0002 FFF7FEFF 		bl	BSP_SD_WriteCpltCallback
 435              	.LVL43:
 436 0006 08BD     		pop	{r3, pc}
 437              		.cfi_endproc
 438              	.LFE151:
 440              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 441              		.align	1
 442              		.weak	BSP_SD_ReadCpltCallback
 443              		.syntax unified
 444              		.thumb
ARM GAS  /tmp/cc9yE63l.s 			page 13


 445              		.thumb_func
 446              		.fpu fpv5-d16
 448              	BSP_SD_ReadCpltCallback:
 449              	.LFB155:
 259:Src/bsp_driver_sd.c **** 
 260:Src/bsp_driver_sd.c **** }
 261:Src/bsp_driver_sd.c **** 
 262:Src/bsp_driver_sd.c **** /**
 263:Src/bsp_driver_sd.c ****   * @brief BSP Rx Transfer completed callback
 264:Src/bsp_driver_sd.c ****   * @retval None
 265:Src/bsp_driver_sd.c ****   */
 266:Src/bsp_driver_sd.c **** __weak void BSP_SD_ReadCpltCallback(void)
 267:Src/bsp_driver_sd.c **** {
 450              		.loc 1 267 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455 0000 7047     		bx	lr
 456              		.cfi_endproc
 457              	.LFE155:
 459              		.section	.text.HAL_SD_RxCpltCallback,"ax",%progbits
 460              		.align	1
 461              		.global	HAL_SD_RxCpltCallback
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 465              		.fpu fpv5-d16
 467              	HAL_SD_RxCpltCallback:
 468              	.LFB152:
 239:Src/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 469              		.loc 1 239 0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              	.LVL44:
 239:Src/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 474              		.loc 1 239 0
 475 0000 08B5     		push	{r3, lr}
 476              	.LCFI13:
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 3, -8
 479              		.cfi_offset 14, -4
 240:Src/bsp_driver_sd.c **** }
 480              		.loc 1 240 0
 481 0002 FFF7FEFF 		bl	BSP_SD_ReadCpltCallback
 482              	.LVL45:
 483 0006 08BD     		pop	{r3, pc}
 484              		.cfi_endproc
 485              	.LFE152:
 487              		.section	.text.BSP_SD_IsDetected,"ax",%progbits
 488              		.align	1
 489              		.global	BSP_SD_IsDetected
 490              		.syntax unified
 491              		.thumb
 492              		.thumb_func
 493              		.fpu fpv5-d16
ARM GAS  /tmp/cc9yE63l.s 			page 14


 495              	BSP_SD_IsDetected:
 496              	.LFB156:
 268:Src/bsp_driver_sd.c **** 
 269:Src/bsp_driver_sd.c **** }
 270:Src/bsp_driver_sd.c **** /* USER CODE END CallBacksSection_C */
 271:Src/bsp_driver_sd.c **** #endif
 272:Src/bsp_driver_sd.c **** 
 273:Src/bsp_driver_sd.c **** /**
 274:Src/bsp_driver_sd.c ****  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 275:Src/bsp_driver_sd.c ****  * @param  None
 276:Src/bsp_driver_sd.c ****  * @retval Returns if SD is detected or not
 277:Src/bsp_driver_sd.c ****  */
 278:Src/bsp_driver_sd.c **** uint8_t BSP_SD_IsDetected(void)
 279:Src/bsp_driver_sd.c **** {
 497              		.loc 1 279 0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 8
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501 0000 00B5     		push	{lr}
 502              	.LCFI14:
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 14, -4
 505 0002 83B0     		sub	sp, sp, #12
 506              	.LCFI15:
 507              		.cfi_def_cfa_offset 16
 280:Src/bsp_driver_sd.c ****   __IO uint8_t status = SD_PRESENT;
 508              		.loc 1 280 0
 509 0004 0123     		movs	r3, #1
 510 0006 8DF80730 		strb	r3, [sp, #7]
 281:Src/bsp_driver_sd.c **** 
 282:Src/bsp_driver_sd.c ****   if (BSP_PlatformIsDetected() == 0x0) 
 511              		.loc 1 282 0
 512 000a FFF7FEFF 		bl	BSP_PlatformIsDetected
 513              	.LVL46:
 514 000e 10B9     		cbnz	r0, .L50
 283:Src/bsp_driver_sd.c ****   {
 284:Src/bsp_driver_sd.c ****     status = SD_NOT_PRESENT;
 515              		.loc 1 284 0
 516 0010 0023     		movs	r3, #0
 517 0012 8DF80730 		strb	r3, [sp, #7]
 518              	.L50:
 285:Src/bsp_driver_sd.c ****   }
 286:Src/bsp_driver_sd.c **** 
 287:Src/bsp_driver_sd.c ****   return status;
 519              		.loc 1 287 0
 520 0016 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 288:Src/bsp_driver_sd.c **** }
 521              		.loc 1 288 0
 522 001a 03B0     		add	sp, sp, #12
 523              	.LCFI16:
 524              		.cfi_def_cfa_offset 4
 525              		@ sp needed
 526 001c 5DF804FB 		ldr	pc, [sp], #4
 527              		.cfi_endproc
 528              	.LFE156:
 530              		.section	.text.BSP_SD_Init,"ax",%progbits
 531              		.align	1
ARM GAS  /tmp/cc9yE63l.s 			page 15


 532              		.global	BSP_SD_Init
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv5-d16
 538              	BSP_SD_Init:
 539              	.LFB141:
  43:Src/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 540              		.loc 1 43 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544 0000 08B5     		push	{r3, lr}
 545              	.LCFI17:
 546              		.cfi_def_cfa_offset 8
 547              		.cfi_offset 3, -8
 548              		.cfi_offset 14, -4
 549              	.LVL47:
  46:Src/bsp_driver_sd.c ****   {
 550              		.loc 1 46 0
 551 0002 FFF7FEFF 		bl	BSP_SD_IsDetected
 552              	.LVL48:
 553 0006 0128     		cmp	r0, #1
 554 0008 01D0     		beq	.L56
  48:Src/bsp_driver_sd.c ****   }
 555              		.loc 1 48 0
 556 000a 0220     		movs	r0, #2
  54:Src/bsp_driver_sd.c **** /* USER CODE BEGIN AfterInitSection */
 557              		.loc 1 54 0
 558 000c 08BD     		pop	{r3, pc}
 559              	.L56:
  51:Src/bsp_driver_sd.c **** 
 560              		.loc 1 51 0
 561 000e 0248     		ldr	r0, .L57
 562 0010 FFF7FEFF 		bl	HAL_SD_Init
 563              	.LVL49:
  53:Src/bsp_driver_sd.c **** }
 564              		.loc 1 53 0
 565 0014 08BD     		pop	{r3, pc}
 566              	.L58:
 567 0016 00BF     		.align	2
 568              	.L57:
 569 0018 00000000 		.word	hsd1
 570              		.cfi_endproc
 571              	.LFE141:
 573              		.text
 574              	.Letext0:
 575              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 576              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 577              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 578              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 579              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 580              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 581              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 582              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_ll_sdmmc.h"
 583              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_sd.h"
 584              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
ARM GAS  /tmp/cc9yE63l.s 			page 16


 585              		.file 12 "Inc/fatfs_platform.h"
ARM GAS  /tmp/cc9yE63l.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bsp_driver_sd.c
     /tmp/cc9yE63l.s:17     .text.BSP_SD_ITConfig:0000000000000000 $t
     /tmp/cc9yE63l.s:24     .text.BSP_SD_ITConfig:0000000000000000 BSP_SD_ITConfig
     /tmp/cc9yE63l.s:39     .text.BSP_SD_ReadBlocks:0000000000000000 $t
     /tmp/cc9yE63l.s:46     .text.BSP_SD_ReadBlocks:0000000000000000 BSP_SD_ReadBlocks
     /tmp/cc9yE63l.s:87     .text.BSP_SD_ReadBlocks:000000000000001c $d
     /tmp/cc9yE63l.s:92     .text.BSP_SD_WriteBlocks:0000000000000000 $t
     /tmp/cc9yE63l.s:99     .text.BSP_SD_WriteBlocks:0000000000000000 BSP_SD_WriteBlocks
     /tmp/cc9yE63l.s:140    .text.BSP_SD_WriteBlocks:000000000000001c $d
     /tmp/cc9yE63l.s:145    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 $t
     /tmp/cc9yE63l.s:152    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 BSP_SD_ReadBlocks_DMA
     /tmp/cc9yE63l.s:185    .text.BSP_SD_ReadBlocks_DMA:0000000000000014 $d
     /tmp/cc9yE63l.s:190    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 $t
     /tmp/cc9yE63l.s:197    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 BSP_SD_WriteBlocks_DMA
     /tmp/cc9yE63l.s:230    .text.BSP_SD_WriteBlocks_DMA:0000000000000014 $d
     /tmp/cc9yE63l.s:235    .text.BSP_SD_Erase:0000000000000000 $t
     /tmp/cc9yE63l.s:242    .text.BSP_SD_Erase:0000000000000000 BSP_SD_Erase
     /tmp/cc9yE63l.s:273    .text.BSP_SD_Erase:0000000000000014 $d
     /tmp/cc9yE63l.s:278    .text.BSP_SD_GetCardState:0000000000000000 $t
     /tmp/cc9yE63l.s:285    .text.BSP_SD_GetCardState:0000000000000000 BSP_SD_GetCardState
     /tmp/cc9yE63l.s:308    .text.BSP_SD_GetCardState:0000000000000010 $d
     /tmp/cc9yE63l.s:313    .text.BSP_SD_GetCardInfo:0000000000000000 $t
     /tmp/cc9yE63l.s:320    .text.BSP_SD_GetCardInfo:0000000000000000 BSP_SD_GetCardInfo
     /tmp/cc9yE63l.s:342    .text.BSP_SD_GetCardInfo:000000000000000c $d
     /tmp/cc9yE63l.s:347    .text.BSP_SD_AbortCallback:0000000000000000 $t
     /tmp/cc9yE63l.s:354    .text.BSP_SD_AbortCallback:0000000000000000 BSP_SD_AbortCallback
     /tmp/cc9yE63l.s:366    .text.HAL_SD_AbortCallback:0000000000000000 $t
     /tmp/cc9yE63l.s:373    .text.HAL_SD_AbortCallback:0000000000000000 HAL_SD_AbortCallback
     /tmp/cc9yE63l.s:394    .text.BSP_SD_WriteCpltCallback:0000000000000000 $t
     /tmp/cc9yE63l.s:401    .text.BSP_SD_WriteCpltCallback:0000000000000000 BSP_SD_WriteCpltCallback
     /tmp/cc9yE63l.s:413    .text.HAL_SD_TxCpltCallback:0000000000000000 $t
     /tmp/cc9yE63l.s:420    .text.HAL_SD_TxCpltCallback:0000000000000000 HAL_SD_TxCpltCallback
     /tmp/cc9yE63l.s:441    .text.BSP_SD_ReadCpltCallback:0000000000000000 $t
     /tmp/cc9yE63l.s:448    .text.BSP_SD_ReadCpltCallback:0000000000000000 BSP_SD_ReadCpltCallback
     /tmp/cc9yE63l.s:460    .text.HAL_SD_RxCpltCallback:0000000000000000 $t
     /tmp/cc9yE63l.s:467    .text.HAL_SD_RxCpltCallback:0000000000000000 HAL_SD_RxCpltCallback
     /tmp/cc9yE63l.s:488    .text.BSP_SD_IsDetected:0000000000000000 $t
     /tmp/cc9yE63l.s:495    .text.BSP_SD_IsDetected:0000000000000000 BSP_SD_IsDetected
     /tmp/cc9yE63l.s:531    .text.BSP_SD_Init:0000000000000000 $t
     /tmp/cc9yE63l.s:538    .text.BSP_SD_Init:0000000000000000 BSP_SD_Init
     /tmp/cc9yE63l.s:569    .text.BSP_SD_Init:0000000000000018 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_SD_ReadBlocks
hsd1
HAL_SD_WriteBlocks
HAL_SD_ReadBlocks_DMA
HAL_SD_WriteBlocks_DMA
HAL_SD_Erase
HAL_SD_GetCardState
HAL_SD_GetCardInfo
BSP_PlatformIsDetected
HAL_SD_Init
