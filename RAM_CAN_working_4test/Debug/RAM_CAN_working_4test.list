
RAM_CAN_working_4test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000312c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  0800332c  0800332c  0001332c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003578  08003578  00013578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800357c  0800357c  0001357c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08003580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000028c  20000070  080035f0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200002fc  080035f0  000202fc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c868  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001cad  00000000  00000000  0002c906  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004122  00000000  00000000  0002e5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008e0  00000000  00000000  000326d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000868  00000000  00000000  00032fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002601b  00000000  00000000  00033820  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000790e  00000000  00000000  0005983b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000eaaa8  00000000  00000000  00061149  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0014bbf1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001950  00000000  00000000  0014bc6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003314 	.word	0x08003314

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003314 	.word	0x08003314

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f0:	b510      	push	{r4, lr}
 80005f2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_InitTick+0x40>)
 80005f6:	7818      	ldrb	r0, [r3, #0]
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <HAL_InitTick+0x44>)
 8000602:	6810      	ldr	r0, [r2, #0]
 8000604:	fbb0 f0f3 	udiv	r0, r0, r3
 8000608:	f000 fc00 	bl	8000e0c <HAL_SYSTICK_Config>
 800060c:	b968      	cbnz	r0, 800062a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800060e:	2c0f      	cmp	r4, #15
 8000610:	d901      	bls.n	8000616 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
 8000614:	e00a      	b.n	800062c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000616:	2200      	movs	r2, #0
 8000618:	4621      	mov	r1, r4
 800061a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800061e:	f000 fbb5 	bl	8000d8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <HAL_InitTick+0x40>)
 8000624:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000626:	2000      	movs	r0, #0
 8000628:	e000      	b.n	800062c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
}
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	20000000 	.word	0x20000000
 8000634:	20000008 	.word	0x20000008

08000638 <HAL_Init>:
{
 8000638:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063a:	2003      	movs	r0, #3
 800063c:	f000 fb94 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ffd5 	bl	80005f0 <HAL_InitTick>
  HAL_MspInit();
 8000646:	f002 f889 	bl	800275c <HAL_MspInit>
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd08      	pop	{r3, pc}
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	6811      	ldr	r1, [r2, #0]
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <HAL_IncTick+0x14>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000a0 	.word	0x200000a0
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200000a0 	.word	0x200000a0

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8000682:	d002      	beq.n	800068a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <HAL_Delay+0x24>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800068a:	f7ff ffed 	bl	8000668 <HAL_GetTick>
 800068e:	1b40      	subs	r0, r0, r5
 8000690:	42a0      	cmp	r0, r4
 8000692:	d3fa      	bcc.n	800068a <HAL_Delay+0x16>
  {
  }
}
 8000694:	bd38      	pop	{r3, r4, r5, pc}
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000

0800069c <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800069c:	2800      	cmp	r0, #0
 800069e:	f000 80a1 	beq.w	80007e4 <HAL_CAN_Init+0x148>
{
 80006a2:	b538      	push	{r3, r4, r5, lr}
 80006a4:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80006a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80006aa:	b1d3      	cbz	r3, 80006e2 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006ac:	6822      	ldr	r2, [r4, #0]
 80006ae:	6813      	ldr	r3, [r2, #0]
 80006b0:	f023 0302 	bic.w	r3, r3, #2
 80006b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006b6:	f7ff ffd7 	bl	8000668 <HAL_GetTick>
 80006ba:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006bc:	6823      	ldr	r3, [r4, #0]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	f012 0f02 	tst.w	r2, #2
 80006c4:	d010      	beq.n	80006e8 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006c6:	f7ff ffcf 	bl	8000668 <HAL_GetTick>
 80006ca:	1b40      	subs	r0, r0, r5
 80006cc:	280a      	cmp	r0, #10
 80006ce:	d9f5      	bls.n	80006bc <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80006d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d6:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006d8:	2305      	movs	r3, #5
 80006da:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 80006de:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80006e0:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 80006e2:	f002 f853 	bl	800278c <HAL_CAN_MspInit>
 80006e6:	e7e1      	b.n	80006ac <HAL_CAN_Init+0x10>
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	f042 0201 	orr.w	r2, r2, #1
 80006ee:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80006f0:	f7ff ffba 	bl	8000668 <HAL_GetTick>
 80006f4:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	f012 0f01 	tst.w	r2, #1
 80006fe:	d10d      	bne.n	800071c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000700:	f7ff ffb2 	bl	8000668 <HAL_GetTick>
 8000704:	1b40      	subs	r0, r0, r5
 8000706:	280a      	cmp	r0, #10
 8000708:	d9f5      	bls.n	80006f6 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800070a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000712:	2305      	movs	r3, #5
 8000714:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000718:	2001      	movs	r0, #1
 800071a:	e7e1      	b.n	80006e0 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800071c:	7e22      	ldrb	r2, [r4, #24]
 800071e:	2a01      	cmp	r2, #1
 8000720:	d03d      	beq.n	800079e <HAL_CAN_Init+0x102>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000728:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 800072a:	7e63      	ldrb	r3, [r4, #25]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d03b      	beq.n	80007a8 <HAL_CAN_Init+0x10c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000730:	6822      	ldr	r2, [r4, #0]
 8000732:	6813      	ldr	r3, [r2, #0]
 8000734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000738:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 800073a:	7ea3      	ldrb	r3, [r4, #26]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d039      	beq.n	80007b4 <HAL_CAN_Init+0x118>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000740:	6822      	ldr	r2, [r4, #0]
 8000742:	6813      	ldr	r3, [r2, #0]
 8000744:	f023 0320 	bic.w	r3, r3, #32
 8000748:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 800074a:	7ee3      	ldrb	r3, [r4, #27]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d037      	beq.n	80007c0 <HAL_CAN_Init+0x124>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000750:	6822      	ldr	r2, [r4, #0]
 8000752:	6813      	ldr	r3, [r2, #0]
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800075a:	7f23      	ldrb	r3, [r4, #28]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d035      	beq.n	80007cc <HAL_CAN_Init+0x130>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000760:	6822      	ldr	r2, [r4, #0]
 8000762:	6813      	ldr	r3, [r2, #0]
 8000764:	f023 0308 	bic.w	r3, r3, #8
 8000768:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800076a:	7f63      	ldrb	r3, [r4, #29]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d033      	beq.n	80007d8 <HAL_CAN_Init+0x13c>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000770:	6822      	ldr	r2, [r4, #0]
 8000772:	6813      	ldr	r3, [r2, #0]
 8000774:	f023 0304 	bic.w	r3, r3, #4
 8000778:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800077a:	68a3      	ldr	r3, [r4, #8]
 800077c:	68e2      	ldr	r2, [r4, #12]
 800077e:	4313      	orrs	r3, r2
 8000780:	6922      	ldr	r2, [r4, #16]
 8000782:	4313      	orrs	r3, r2
 8000784:	6962      	ldr	r2, [r4, #20]
 8000786:	4313      	orrs	r3, r2
 8000788:	6862      	ldr	r2, [r4, #4]
 800078a:	3a01      	subs	r2, #1
 800078c:	6821      	ldr	r1, [r4, #0]
 800078e:	4313      	orrs	r3, r2
 8000790:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000792:	2000      	movs	r0, #0
 8000794:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000796:	2301      	movs	r3, #1
 8000798:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 800079c:	e7a0      	b.n	80006e0 <HAL_CAN_Init+0x44>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	e7c0      	b.n	800072a <HAL_CAN_Init+0x8e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007a8:	6822      	ldr	r2, [r4, #0]
 80007aa:	6813      	ldr	r3, [r2, #0]
 80007ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b0:	6013      	str	r3, [r2, #0]
 80007b2:	e7c2      	b.n	800073a <HAL_CAN_Init+0x9e>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80007b4:	6822      	ldr	r2, [r4, #0]
 80007b6:	6813      	ldr	r3, [r2, #0]
 80007b8:	f043 0320 	orr.w	r3, r3, #32
 80007bc:	6013      	str	r3, [r2, #0]
 80007be:	e7c4      	b.n	800074a <HAL_CAN_Init+0xae>
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007c0:	6822      	ldr	r2, [r4, #0]
 80007c2:	6813      	ldr	r3, [r2, #0]
 80007c4:	f023 0310 	bic.w	r3, r3, #16
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	e7c6      	b.n	800075a <HAL_CAN_Init+0xbe>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	6813      	ldr	r3, [r2, #0]
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6013      	str	r3, [r2, #0]
 80007d6:	e7c8      	b.n	800076a <HAL_CAN_Init+0xce>
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007d8:	6822      	ldr	r2, [r4, #0]
 80007da:	6813      	ldr	r3, [r2, #0]
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	e7ca      	b.n	800077a <HAL_CAN_Init+0xde>
    return HAL_ERROR;
 80007e4:	2001      	movs	r0, #1
}
 80007e6:	4770      	bx	lr

080007e8 <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80007e8:	6803      	ldr	r3, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80007ea:	f890 2020 	ldrb.w	r2, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80007ee:	3a01      	subs	r2, #1
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	2a01      	cmp	r2, #1
 80007f4:	d905      	bls.n	8000802 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80007f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007fc:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80007fe:	2001      	movs	r0, #1
  }
}
 8000800:	4770      	bx	lr
{
 8000802:	b470      	push	{r4, r5, r6}
    if (hcan->Instance == CAN3)
 8000804:	4a43      	ldr	r2, [pc, #268]	; (8000914 <HAL_CAN_ConfigFilter+0x12c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d000      	beq.n	800080c <HAL_CAN_ConfigFilter+0x24>
      can_ip = CAN1;
 800080a:	4b43      	ldr	r3, [pc, #268]	; (8000918 <HAL_CAN_ConfigFilter+0x130>)
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800080c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000810:	f042 0201 	orr.w	r2, r2, #1
 8000814:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    if (can_ip == CAN1)
 8000818:	4a3f      	ldr	r2, [pc, #252]	; (8000918 <HAL_CAN_ConfigFilter+0x130>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d042      	beq.n	80008a4 <HAL_CAN_ConfigFilter+0xbc>
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800081e:	694a      	ldr	r2, [r1, #20]
 8000820:	f002 021f 	and.w	r2, r2, #31
 8000824:	2001      	movs	r0, #1
 8000826:	fa00 f202 	lsl.w	r2, r0, r2
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800082a:	f8d3 421c 	ldr.w	r4, [r3, #540]	; 0x21c
 800082e:	43d0      	mvns	r0, r2
 8000830:	4004      	ands	r4, r0
 8000832:	f8c3 421c 	str.w	r4, [r3, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000836:	69cc      	ldr	r4, [r1, #28]
 8000838:	b9ac      	cbnz	r4, 8000866 <HAL_CAN_ConfigFilter+0x7e>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800083a:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 800083e:	4004      	ands	r4, r0
 8000840:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000844:	68ce      	ldr	r6, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000846:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000848:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800084a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800084e:	3448      	adds	r4, #72	; 0x48
 8000850:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000854:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000856:	880d      	ldrh	r5, [r1, #0]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000858:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800085a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800085e:	3448      	adds	r4, #72	; 0x48
 8000860:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8000864:	6065      	str	r5, [r4, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000866:	69cc      	ldr	r4, [r1, #28]
 8000868:	2c01      	cmp	r4, #1
 800086a:	d029      	beq.n	80008c0 <HAL_CAN_ConfigFilter+0xd8>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800086c:	698c      	ldr	r4, [r1, #24]
 800086e:	2c00      	cmp	r4, #0
 8000870:	d13d      	bne.n	80008ee <HAL_CAN_ConfigFilter+0x106>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000872:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8000876:	4004      	ands	r4, r0
 8000878:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800087c:	690c      	ldr	r4, [r1, #16]
 800087e:	2c00      	cmp	r4, #0
 8000880:	d13b      	bne.n	80008fa <HAL_CAN_ConfigFilter+0x112>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000882:	f8d3 4214 	ldr.w	r4, [r3, #532]	; 0x214
 8000886:	4020      	ands	r0, r4
 8000888:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800088c:	6a09      	ldr	r1, [r1, #32]
 800088e:	2901      	cmp	r1, #1
 8000890:	d039      	beq.n	8000906 <HAL_CAN_ConfigFilter+0x11e>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000892:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000896:	f022 0201 	bic.w	r2, r2, #1
 800089a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    return HAL_OK;
 800089e:	2000      	movs	r0, #0
}
 80008a0:	bc70      	pop	{r4, r5, r6}
 80008a2:	4770      	bx	lr
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80008a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008a8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80008ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80008b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008b4:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80008b6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80008ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80008be:	e7ae      	b.n	800081e <HAL_CAN_ConfigFilter+0x36>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008c0:	f8d3 420c 	ldr.w	r4, [r3, #524]	; 0x20c
 80008c4:	4314      	orrs	r4, r2
 80008c6:	f8c3 420c 	str.w	r4, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008ca:	680e      	ldr	r6, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008cc:	888d      	ldrh	r5, [r1, #4]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008ce:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008d0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d4:	3448      	adds	r4, #72	; 0x48
 80008d6:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008da:	688e      	ldr	r6, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80008dc:	898d      	ldrh	r5, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008de:	694c      	ldr	r4, [r1, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e0:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008e4:	3448      	adds	r4, #72	; 0x48
 80008e6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80008ea:	6065      	str	r5, [r4, #4]
 80008ec:	e7be      	b.n	800086c <HAL_CAN_ConfigFilter+0x84>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80008ee:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80008f2:	4314      	orrs	r4, r2
 80008f4:	f8c3 4204 	str.w	r4, [r3, #516]	; 0x204
 80008f8:	e7c0      	b.n	800087c <HAL_CAN_ConfigFilter+0x94>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80008fa:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80008fe:	4310      	orrs	r0, r2
 8000900:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
 8000904:	e7c2      	b.n	800088c <HAL_CAN_ConfigFilter+0xa4>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000906:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800090a:	430a      	orrs	r2, r1
 800090c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000910:	e7bf      	b.n	8000892 <HAL_CAN_ConfigFilter+0xaa>
 8000912:	bf00      	nop
 8000914:	40003400 	.word	0x40003400
 8000918:	40006400 	.word	0x40006400

0800091c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800091c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800091e:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b01      	cmp	r3, #1
 8000926:	d005      	beq.n	8000934 <HAL_CAN_Start+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000928:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800092a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800092e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000930:	2001      	movs	r0, #1
  }
}
 8000932:	bd38      	pop	{r3, r4, r5, pc}
 8000934:	4604      	mov	r4, r0
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000936:	2302      	movs	r3, #2
 8000938:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800093c:	6802      	ldr	r2, [r0, #0]
 800093e:	6813      	ldr	r3, [r2, #0]
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000946:	f7ff fe8f 	bl	8000668 <HAL_GetTick>
 800094a:	4605      	mov	r5, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800094c:	6823      	ldr	r3, [r4, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f013 0f01 	tst.w	r3, #1
 8000954:	d00d      	beq.n	8000972 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000956:	f7ff fe87 	bl	8000668 <HAL_GetTick>
 800095a:	1b40      	subs	r0, r0, r5
 800095c:	280a      	cmp	r0, #10
 800095e:	d9f5      	bls.n	800094c <HAL_CAN_Start+0x30>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000960:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000966:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000968:	2305      	movs	r3, #5
 800096a:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 800096e:	2001      	movs	r0, #1
 8000970:	e7df      	b.n	8000932 <HAL_CAN_Start+0x16>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000972:	2000      	movs	r0, #0
 8000974:	6260      	str	r0, [r4, #36]	; 0x24
    return HAL_OK;
 8000976:	e7dc      	b.n	8000932 <HAL_CAN_Start+0x16>

08000978 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000978:	b430      	push	{r4, r5}
  HAL_CAN_StateTypeDef state = hcan->State;
 800097a:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800097e:	3c01      	subs	r4, #1
 8000980:	b2e4      	uxtb	r4, r4
 8000982:	2c01      	cmp	r4, #1
 8000984:	d906      	bls.n	8000994 <HAL_CAN_GetRxMessage+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000986:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800098c:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800098e:	2001      	movs	r0, #1
  }
}
 8000990:	bc30      	pop	{r4, r5}
 8000992:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000994:	2900      	cmp	r1, #0
 8000996:	d16f      	bne.n	8000a78 <HAL_CAN_GetRxMessage+0x100>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000998:	6804      	ldr	r4, [r0, #0]
 800099a:	68e4      	ldr	r4, [r4, #12]
 800099c:	f014 0f03 	tst.w	r4, #3
 80009a0:	d064      	beq.n	8000a6c <HAL_CAN_GetRxMessage+0xf4>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80009a2:	6805      	ldr	r5, [r0, #0]
 80009a4:	f101 041b 	add.w	r4, r1, #27
 80009a8:	0124      	lsls	r4, r4, #4
 80009aa:	592c      	ldr	r4, [r5, r4]
 80009ac:	f004 0404 	and.w	r4, r4, #4
 80009b0:	6094      	str	r4, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80009b2:	2c00      	cmp	r4, #0
 80009b4:	d16b      	bne.n	8000a8e <HAL_CAN_GetRxMessage+0x116>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80009b6:	6805      	ldr	r5, [r0, #0]
 80009b8:	f101 041b 	add.w	r4, r1, #27
 80009bc:	0124      	lsls	r4, r4, #4
 80009be:	592c      	ldr	r4, [r5, r4]
 80009c0:	0d64      	lsrs	r4, r4, #21
 80009c2:	6014      	str	r4, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80009c4:	6805      	ldr	r5, [r0, #0]
 80009c6:	f101 041b 	add.w	r4, r1, #27
 80009ca:	0124      	lsls	r4, r4, #4
 80009cc:	592d      	ldr	r5, [r5, r4]
 80009ce:	f3c5 0540 	ubfx	r5, r5, #1, #1
 80009d2:	60d5      	str	r5, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80009d4:	6805      	ldr	r5, [r0, #0]
 80009d6:	4425      	add	r5, r4
 80009d8:	686d      	ldr	r5, [r5, #4]
 80009da:	f005 050f 	and.w	r5, r5, #15
 80009de:	6115      	str	r5, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80009e0:	6805      	ldr	r5, [r0, #0]
 80009e2:	4425      	add	r5, r4
 80009e4:	686d      	ldr	r5, [r5, #4]
 80009e6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80009ea:	6195      	str	r5, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80009ec:	6805      	ldr	r5, [r0, #0]
 80009ee:	442c      	add	r4, r5
 80009f0:	6864      	ldr	r4, [r4, #4]
 80009f2:	0c24      	lsrs	r4, r4, #16
 80009f4:	6154      	str	r4, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80009f6:	6804      	ldr	r4, [r0, #0]
 80009f8:	010a      	lsls	r2, r1, #4
 80009fa:	4414      	add	r4, r2
 80009fc:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8000a00:	701c      	strb	r4, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000a02:	6804      	ldr	r4, [r0, #0]
 8000a04:	4414      	add	r4, r2
 8000a06:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8000a0a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000a0e:	705c      	strb	r4, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000a10:	6804      	ldr	r4, [r0, #0]
 8000a12:	4414      	add	r4, r2
 8000a14:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8000a18:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8000a1c:	709c      	strb	r4, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000a1e:	6804      	ldr	r4, [r0, #0]
 8000a20:	4414      	add	r4, r2
 8000a22:	f8d4 41b8 	ldr.w	r4, [r4, #440]	; 0x1b8
 8000a26:	0e24      	lsrs	r4, r4, #24
 8000a28:	70dc      	strb	r4, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000a2a:	6804      	ldr	r4, [r0, #0]
 8000a2c:	4414      	add	r4, r2
 8000a2e:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000a32:	711c      	strb	r4, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000a34:	6804      	ldr	r4, [r0, #0]
 8000a36:	4414      	add	r4, r2
 8000a38:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000a3c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000a40:	715c      	strb	r4, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000a42:	6804      	ldr	r4, [r0, #0]
 8000a44:	4414      	add	r4, r2
 8000a46:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000a4a:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8000a4e:	719c      	strb	r4, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000a50:	6804      	ldr	r4, [r0, #0]
 8000a52:	4422      	add	r2, r4
 8000a54:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000a58:	0e12      	lsrs	r2, r2, #24
 8000a5a:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000a5c:	b9f9      	cbnz	r1, 8000a9e <HAL_CAN_GetRxMessage+0x126>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000a5e:	6802      	ldr	r2, [r0, #0]
 8000a60:	68d3      	ldr	r3, [r2, #12]
 8000a62:	f043 0320 	orr.w	r3, r3, #32
 8000a66:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8000a68:	2000      	movs	r0, #0
 8000a6a:	e791      	b.n	8000990 <HAL_CAN_GetRxMessage+0x18>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a72:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000a74:	2001      	movs	r0, #1
 8000a76:	e78b      	b.n	8000990 <HAL_CAN_GetRxMessage+0x18>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000a78:	6804      	ldr	r4, [r0, #0]
 8000a7a:	6924      	ldr	r4, [r4, #16]
 8000a7c:	f014 0f03 	tst.w	r4, #3
 8000a80:	d18f      	bne.n	80009a2 <HAL_CAN_GetRxMessage+0x2a>
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000a82:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	6243      	str	r3, [r0, #36]	; 0x24
        return HAL_ERROR;
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	e780      	b.n	8000990 <HAL_CAN_GetRxMessage+0x18>
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000a8e:	6805      	ldr	r5, [r0, #0]
 8000a90:	f101 041b 	add.w	r4, r1, #27
 8000a94:	0124      	lsls	r4, r4, #4
 8000a96:	592c      	ldr	r4, [r5, r4]
 8000a98:	08e4      	lsrs	r4, r4, #3
 8000a9a:	6054      	str	r4, [r2, #4]
 8000a9c:	e792      	b.n	80009c4 <HAL_CAN_GetRxMessage+0x4c>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000a9e:	6802      	ldr	r2, [r0, #0]
 8000aa0:	6913      	ldr	r3, [r2, #16]
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6113      	str	r3, [r2, #16]
    return HAL_OK;
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e771      	b.n	8000990 <HAL_CAN_GetRxMessage+0x18>

08000aac <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aac:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d901      	bls.n	8000abc <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 8000ab8:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8000aba:	4770      	bx	lr
    if (RxFifo == CAN_RX_FIFO0)
 8000abc:	b121      	cbz	r1, 8000ac8 <HAL_CAN_GetRxFifoFillLevel+0x1c>
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000abe:	6803      	ldr	r3, [r0, #0]
 8000ac0:	6918      	ldr	r0, [r3, #16]
 8000ac2:	f000 0003 	and.w	r0, r0, #3
 8000ac6:	4770      	bx	lr
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	68d8      	ldr	r0, [r3, #12]
 8000acc:	f000 0003 	and.w	r0, r0, #3
 8000ad0:	4770      	bx	lr

08000ad2 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ad2:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d905      	bls.n	8000aea <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ade:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae4:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000ae6:	2001      	movs	r0, #1
  }
}
 8000ae8:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000aea:	6802      	ldr	r2, [r0, #0]
 8000aec:	6953      	ldr	r3, [r2, #20]
 8000aee:	4319      	orrs	r1, r3
 8000af0:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8000af2:	2000      	movs	r0, #0
 8000af4:	4770      	bx	lr

08000af6 <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000af6:	4770      	bx	lr

08000af8 <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000af8:	4770      	bx	lr

08000afa <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000afa:	4770      	bx	lr

08000afc <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000afc:	4770      	bx	lr

08000afe <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000afe:	4770      	bx	lr

08000b00 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000b00:	4770      	bx	lr

08000b02 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000b02:	4770      	bx	lr

08000b04 <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000b04:	4770      	bx	lr

08000b06 <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000b06:	4770      	bx	lr

08000b08 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000b08:	4770      	bx	lr

08000b0a <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000b0a:	4770      	bx	lr

08000b0c <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000b0c:	4770      	bx	lr

08000b0e <HAL_CAN_IRQHandler>:
{
 8000b0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b12:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000b14:	6803      	ldr	r3, [r0, #0]
 8000b16:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000b18:	685f      	ldr	r7, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000b1a:	689e      	ldr	r6, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000b1c:	f8d3 900c 	ldr.w	r9, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000b20:	f8d3 8010 	ldr.w	r8, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000b24:	f8d3 a018 	ldr.w	sl, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000b28:	f014 0f01 	tst.w	r4, #1
 8000b2c:	d05a      	beq.n	8000be4 <HAL_CAN_IRQHandler+0xd6>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000b2e:	f016 0f01 	tst.w	r6, #1
 8000b32:	d017      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b34:	2201      	movs	r2, #1
 8000b36:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b38:	f016 0f02 	tst.w	r6, #2
 8000b3c:	d108      	bne.n	8000b50 <HAL_CAN_IRQHandler+0x42>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b3e:	f016 0f04 	tst.w	r6, #4
 8000b42:	d130      	bne.n	8000ba6 <HAL_CAN_IRQHandler+0x98>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b44:	f016 0f08 	tst.w	r6, #8
 8000b48:	d007      	beq.n	8000b5a <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b4a:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8000b4e:	e00b      	b.n	8000b68 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b50:	f7ff ffd1 	bl	8000af6 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b54:	f04f 0b00 	mov.w	fp, #0
 8000b58:	e006      	b.n	8000b68 <HAL_CAN_IRQHandler+0x5a>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b5a:	f7ff ffcf 	bl	8000afc <HAL_CAN_TxMailbox0AbortCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000b5e:	f04f 0b00 	mov.w	fp, #0
 8000b62:	e001      	b.n	8000b68 <HAL_CAN_IRQHandler+0x5a>
 8000b64:	f04f 0b00 	mov.w	fp, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b68:	f416 7f80 	tst.w	r6, #256	; 0x100
 8000b6c:	d00b      	beq.n	8000b86 <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b6e:	682b      	ldr	r3, [r5, #0]
 8000b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b74:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b76:	f416 7f00 	tst.w	r6, #512	; 0x200
 8000b7a:	d117      	bne.n	8000bac <HAL_CAN_IRQHandler+0x9e>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b7c:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8000b80:	d018      	beq.n	8000bb4 <HAL_CAN_IRQHandler+0xa6>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b82:	f44b 5b00 	orr.w	fp, fp, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000b86:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8000b8a:	d02d      	beq.n	8000be8 <HAL_CAN_IRQHandler+0xda>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000b8c:	682b      	ldr	r3, [r5, #0]
 8000b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b92:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000b94:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000b98:	d116      	bne.n	8000bc8 <HAL_CAN_IRQHandler+0xba>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000b9a:	f416 2f80 	tst.w	r6, #262144	; 0x40000
 8000b9e:	d017      	beq.n	8000bd0 <HAL_CAN_IRQHandler+0xc2>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ba0:	f44b 4b00 	orr.w	fp, fp, #32768	; 0x8000
 8000ba4:	e020      	b.n	8000be8 <HAL_CAN_IRQHandler+0xda>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000ba6:	f44f 6b00 	mov.w	fp, #2048	; 0x800
 8000baa:	e7dd      	b.n	8000b68 <HAL_CAN_IRQHandler+0x5a>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000bac:	4628      	mov	r0, r5
 8000bae:	f7ff ffa3 	bl	8000af8 <HAL_CAN_TxMailbox1CompleteCallback>
 8000bb2:	e7e8      	b.n	8000b86 <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000bb4:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8000bb8:	d002      	beq.n	8000bc0 <HAL_CAN_IRQHandler+0xb2>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000bba:	f44b 4b80 	orr.w	fp, fp, #16384	; 0x4000
 8000bbe:	e7e2      	b.n	8000b86 <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f7ff ff9c 	bl	8000afe <HAL_CAN_TxMailbox1AbortCallback>
 8000bc6:	e7de      	b.n	8000b86 <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f7ff ff96 	bl	8000afa <HAL_CAN_TxMailbox2CompleteCallback>
 8000bce:	e00b      	b.n	8000be8 <HAL_CAN_IRQHandler+0xda>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bd0:	f416 2f00 	tst.w	r6, #524288	; 0x80000
 8000bd4:	d002      	beq.n	8000bdc <HAL_CAN_IRQHandler+0xce>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000bd6:	f44b 3b80 	orr.w	fp, fp, #65536	; 0x10000
 8000bda:	e005      	b.n	8000be8 <HAL_CAN_IRQHandler+0xda>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000bdc:	4628      	mov	r0, r5
 8000bde:	f7ff ff8f 	bl	8000b00 <HAL_CAN_TxMailbox2AbortCallback>
 8000be2:	e001      	b.n	8000be8 <HAL_CAN_IRQHandler+0xda>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000be4:	f04f 0b00 	mov.w	fp, #0
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000be8:	f014 0f08 	tst.w	r4, #8
 8000bec:	d007      	beq.n	8000bfe <HAL_CAN_IRQHandler+0xf0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000bee:	f019 0f10 	tst.w	r9, #16
 8000bf2:	d004      	beq.n	8000bfe <HAL_CAN_IRQHandler+0xf0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000bf4:	f44b 7b00 	orr.w	fp, fp, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000bf8:	682b      	ldr	r3, [r5, #0]
 8000bfa:	2210      	movs	r2, #16
 8000bfc:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000bfe:	f014 0f04 	tst.w	r4, #4
 8000c02:	d002      	beq.n	8000c0a <HAL_CAN_IRQHandler+0xfc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c04:	f019 0f08 	tst.w	r9, #8
 8000c08:	d160      	bne.n	8000ccc <HAL_CAN_IRQHandler+0x1be>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c0a:	f014 0f02 	tst.w	r4, #2
 8000c0e:	d004      	beq.n	8000c1a <HAL_CAN_IRQHandler+0x10c>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c10:	682b      	ldr	r3, [r5, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	f013 0f03 	tst.w	r3, #3
 8000c18:	d15f      	bne.n	8000cda <HAL_CAN_IRQHandler+0x1cc>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c1a:	f014 0f40 	tst.w	r4, #64	; 0x40
 8000c1e:	d007      	beq.n	8000c30 <HAL_CAN_IRQHandler+0x122>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c20:	f018 0f10 	tst.w	r8, #16
 8000c24:	d004      	beq.n	8000c30 <HAL_CAN_IRQHandler+0x122>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c26:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c2a:	682b      	ldr	r3, [r5, #0]
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c30:	f014 0f20 	tst.w	r4, #32
 8000c34:	d002      	beq.n	8000c3c <HAL_CAN_IRQHandler+0x12e>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c36:	f018 0f08 	tst.w	r8, #8
 8000c3a:	d152      	bne.n	8000ce2 <HAL_CAN_IRQHandler+0x1d4>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000c3c:	f014 0f10 	tst.w	r4, #16
 8000c40:	d004      	beq.n	8000c4c <HAL_CAN_IRQHandler+0x13e>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000c42:	682b      	ldr	r3, [r5, #0]
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	f013 0f03 	tst.w	r3, #3
 8000c4a:	d151      	bne.n	8000cf0 <HAL_CAN_IRQHandler+0x1e2>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000c4c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8000c50:	d002      	beq.n	8000c58 <HAL_CAN_IRQHandler+0x14a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000c52:	f017 0f10 	tst.w	r7, #16
 8000c56:	d14f      	bne.n	8000cf8 <HAL_CAN_IRQHandler+0x1ea>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000c58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8000c5c:	d002      	beq.n	8000c64 <HAL_CAN_IRQHandler+0x156>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000c5e:	f017 0f08 	tst.w	r7, #8
 8000c62:	d150      	bne.n	8000d06 <HAL_CAN_IRQHandler+0x1f8>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000c64:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000c68:	d067      	beq.n	8000d3a <HAL_CAN_IRQHandler+0x22c>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000c6a:	f017 0f04 	tst.w	r7, #4
 8000c6e:	d061      	beq.n	8000d34 <HAL_CAN_IRQHandler+0x226>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000c70:	f414 7f80 	tst.w	r4, #256	; 0x100
 8000c74:	d004      	beq.n	8000c80 <HAL_CAN_IRQHandler+0x172>
 8000c76:	f01a 0f01 	tst.w	sl, #1
 8000c7a:	d001      	beq.n	8000c80 <HAL_CAN_IRQHandler+0x172>
        errorcode |= HAL_CAN_ERROR_EWG;
 8000c7c:	f04b 0b01 	orr.w	fp, fp, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000c80:	f414 7f00 	tst.w	r4, #512	; 0x200
 8000c84:	d004      	beq.n	8000c90 <HAL_CAN_IRQHandler+0x182>
 8000c86:	f01a 0f02 	tst.w	sl, #2
 8000c8a:	d001      	beq.n	8000c90 <HAL_CAN_IRQHandler+0x182>
        errorcode |= HAL_CAN_ERROR_EPV;
 8000c8c:	f04b 0b02 	orr.w	fp, fp, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000c90:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8000c94:	d004      	beq.n	8000ca0 <HAL_CAN_IRQHandler+0x192>
 8000c96:	f01a 0f04 	tst.w	sl, #4
 8000c9a:	d001      	beq.n	8000ca0 <HAL_CAN_IRQHandler+0x192>
        errorcode |= HAL_CAN_ERROR_BOF;
 8000c9c:	f04b 0b04 	orr.w	fp, fp, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000ca0:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8000ca4:	d046      	beq.n	8000d34 <HAL_CAN_IRQHandler+0x226>
 8000ca6:	f01a 0a70 	ands.w	sl, sl, #112	; 0x70
 8000caa:	d043      	beq.n	8000d34 <HAL_CAN_IRQHandler+0x226>
        switch (esrflags & CAN_ESR_LEC)
 8000cac:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 8000cb0:	d048      	beq.n	8000d44 <HAL_CAN_IRQHandler+0x236>
 8000cb2:	d92f      	bls.n	8000d14 <HAL_CAN_IRQHandler+0x206>
 8000cb4:	f1ba 0f50 	cmp.w	sl, #80	; 0x50
 8000cb8:	d047      	beq.n	8000d4a <HAL_CAN_IRQHandler+0x23c>
 8000cba:	f1ba 0f60 	cmp.w	sl, #96	; 0x60
 8000cbe:	d047      	beq.n	8000d50 <HAL_CAN_IRQHandler+0x242>
 8000cc0:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8000cc4:	d131      	bne.n	8000d2a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BR;
 8000cc6:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
            break;
 8000cca:	e02e      	b.n	8000d2a <HAL_CAN_IRQHandler+0x21c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	2208      	movs	r2, #8
 8000cd0:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000cd2:	4628      	mov	r0, r5
 8000cd4:	f001 fc26 	bl	8002524 <HAL_CAN_RxFifo0FullCallback>
 8000cd8:	e797      	b.n	8000c0a <HAL_CAN_IRQHandler+0xfc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000cda:	4628      	mov	r0, r5
 8000cdc:	f7ff ff11 	bl	8000b02 <HAL_CAN_RxFifo0MsgPendingCallback>
 8000ce0:	e79b      	b.n	8000c1a <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ce2:	682b      	ldr	r3, [r5, #0]
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f7ff ff0c 	bl	8000b06 <HAL_CAN_RxFifo1FullCallback>
 8000cee:	e7a5      	b.n	8000c3c <HAL_CAN_IRQHandler+0x12e>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f7ff ff07 	bl	8000b04 <HAL_CAN_RxFifo1MsgPendingCallback>
 8000cf6:	e7a9      	b.n	8000c4c <HAL_CAN_IRQHandler+0x13e>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000cf8:	682b      	ldr	r3, [r5, #0]
 8000cfa:	2210      	movs	r2, #16
 8000cfc:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000cfe:	4628      	mov	r0, r5
 8000d00:	f7ff ff02 	bl	8000b08 <HAL_CAN_SleepCallback>
 8000d04:	e7a8      	b.n	8000c58 <HAL_CAN_IRQHandler+0x14a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d06:	682b      	ldr	r3, [r5, #0]
 8000d08:	2208      	movs	r2, #8
 8000d0a:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d0c:	4628      	mov	r0, r5
 8000d0e:	f7ff fefc 	bl	8000b0a <HAL_CAN_WakeUpFromRxMsgCallback>
 8000d12:	e7a7      	b.n	8000c64 <HAL_CAN_IRQHandler+0x156>
        switch (esrflags & CAN_ESR_LEC)
 8000d14:	f1ba 0f10 	cmp.w	sl, #16
 8000d18:	d005      	beq.n	8000d26 <HAL_CAN_IRQHandler+0x218>
 8000d1a:	f1ba 0f20 	cmp.w	sl, #32
 8000d1e:	d104      	bne.n	8000d2a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000d20:	f04b 0b10 	orr.w	fp, fp, #16
            break;
 8000d24:	e001      	b.n	8000d2a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_STF;
 8000d26:	f04b 0b08 	orr.w	fp, fp, #8
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000d2a:	682a      	ldr	r2, [r5, #0]
 8000d2c:	6993      	ldr	r3, [r2, #24]
 8000d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d32:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	2204      	movs	r2, #4
 8000d38:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000d3a:	f1bb 0f00 	cmp.w	fp, #0
 8000d3e:	d10a      	bne.n	8000d56 <HAL_CAN_IRQHandler+0x248>
}
 8000d40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_ACK;
 8000d44:	f04b 0b20 	orr.w	fp, fp, #32
            break;
 8000d48:	e7ef      	b.n	8000d2a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_BD;
 8000d4a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
            break;
 8000d4e:	e7ec      	b.n	8000d2a <HAL_CAN_IRQHandler+0x21c>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000d50:	f44b 7b80 	orr.w	fp, fp, #256	; 0x100
            break;
 8000d54:	e7e9      	b.n	8000d2a <HAL_CAN_IRQHandler+0x21c>
    hcan->ErrorCode |= errorcode;
 8000d56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000d58:	ea43 030b 	orr.w	r3, r3, fp
 8000d5c:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000d5e:	4628      	mov	r0, r5
 8000d60:	f7ff fed4 	bl	8000b0c <HAL_CAN_ErrorCallback>
}
 8000d64:	e7ec      	b.n	8000d40 <HAL_CAN_IRQHandler+0x232>
	...

08000d68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4906      	ldr	r1, [pc, #24]	; (8000d84 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000d6a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d70:	041b      	lsls	r3, r3, #16
 8000d72:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	0200      	lsls	r0, r0, #8
 8000d76:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000d7c:	4a02      	ldr	r2, [pc, #8]	; (8000d88 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d7e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000d80:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00
 8000d88:	05fa0000 	.word	0x05fa0000

08000d8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_NVIC_SetPriority+0x58>)
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d96:	f1c3 0407 	rsb	r4, r3, #7
 8000d9a:	2c04      	cmp	r4, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da0:	1d1d      	adds	r5, r3, #4
 8000da2:	2d06      	cmp	r5, #6
 8000da4:	d914      	bls.n	8000dd0 <HAL_NVIC_SetPriority+0x44>
 8000da6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000dac:	fa05 f404 	lsl.w	r4, r5, r4
 8000db0:	ea21 0104 	bic.w	r1, r1, r4
 8000db4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db6:	fa05 f303 	lsl.w	r3, r5, r3
 8000dba:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbe:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	db07      	blt.n	8000dd4 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	0109      	lsls	r1, r1, #4
 8000dc6:	b2c9      	uxtb	r1, r1
 8000dc8:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_NVIC_SetPriority+0x5c>)
 8000dca:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000dcc:	bc30      	pop	{r4, r5}
 8000dce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e7e9      	b.n	8000da8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	f000 000f 	and.w	r0, r0, #15
 8000dd8:	0109      	lsls	r1, r1, #4
 8000dda:	b2c9      	uxtb	r1, r1
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_NVIC_SetPriority+0x60>)
 8000dde:	5419      	strb	r1, [r3, r0]
 8000de0:	e7f4      	b.n	8000dcc <HAL_NVIC_SetPriority+0x40>
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	e000e400 	.word	0xe000e400
 8000dec:	e000ed14 	.word	0xe000ed14

08000df0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000df0:	2800      	cmp	r0, #0
 8000df2:	db07      	blt.n	8000e04 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df4:	f000 021f 	and.w	r2, r0, #31
 8000df8:	0940      	lsrs	r0, r0, #5
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4093      	lsls	r3, r2
 8000dfe:	4a02      	ldr	r2, [pc, #8]	; (8000e08 <HAL_NVIC_EnableIRQ+0x18>)
 8000e00:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100

08000e0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e0c:	3801      	subs	r0, #1
 8000e0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e12:	d20a      	bcs.n	8000e2a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_SYSTICK_Config+0x24>)
 8000e16:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_SYSTICK_Config+0x28>)
 8000e1a:	21f0      	movs	r1, #240	; 0xf0
 8000e1c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	2000      	movs	r0, #0
 8000e22:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	f200 80e2 	bhi.w	8001004 <HAL_GPIO_Init+0x1cc>
{
 8000e40:	b4f0      	push	{r4, r5, r6, r7}
 8000e42:	b082      	sub	sp, #8
 8000e44:	e039      	b.n	8000eba <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e46:	2209      	movs	r2, #9
 8000e48:	e000      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	40b2      	lsls	r2, r6
 8000e4e:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e50:	3402      	adds	r4, #2
 8000e52:	4e6d      	ldr	r6, [pc, #436]	; (8001008 <HAL_GPIO_Init+0x1d0>)
 8000e54:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e58:	4a6c      	ldr	r2, [pc, #432]	; (800100c <HAL_GPIO_Init+0x1d4>)
 8000e5a:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	43ea      	mvns	r2, r5
 8000e5e:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e62:	684f      	ldr	r7, [r1, #4]
 8000e64:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000e68:	d001      	beq.n	8000e6e <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000e6a:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8000e6e:	4c67      	ldr	r4, [pc, #412]	; (800100c <HAL_GPIO_Init+0x1d4>)
 8000e70:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8000e72:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e78:	684f      	ldr	r7, [r1, #4]
 8000e7a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000e7e:	d001      	beq.n	8000e84 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000e80:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8000e84:	4c61      	ldr	r4, [pc, #388]	; (800100c <HAL_GPIO_Init+0x1d4>)
 8000e86:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e88:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e8e:	684f      	ldr	r7, [r1, #4]
 8000e90:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000e94:	d001      	beq.n	8000e9a <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000e96:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 8000e9a:	4c5c      	ldr	r4, [pc, #368]	; (800100c <HAL_GPIO_Init+0x1d4>)
 8000e9c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8000e9e:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ea2:	684e      	ldr	r6, [r1, #4]
 8000ea4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ea8:	d001      	beq.n	8000eae <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000eaa:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8000eae:	4c57      	ldr	r4, [pc, #348]	; (800100c <HAL_GPIO_Init+0x1d4>)
 8000eb0:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	f200 80a2 	bhi.w	8000ffe <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	680c      	ldr	r4, [r1, #0]
 8000ec0:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000ec4:	42aa      	cmp	r2, r5
 8000ec6:	d1f4      	bne.n	8000eb2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec8:	684c      	ldr	r4, [r1, #4]
 8000eca:	2c12      	cmp	r4, #18
 8000ecc:	bf18      	it	ne
 8000ece:	2c02      	cmpne	r4, #2
 8000ed0:	d110      	bne.n	8000ef4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000ed2:	08de      	lsrs	r6, r3, #3
 8000ed4:	3608      	adds	r6, #8
 8000ed6:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eda:	f003 0407 	and.w	r4, r3, #7
 8000ede:	00a7      	lsls	r7, r4, #2
 8000ee0:	240f      	movs	r4, #15
 8000ee2:	40bc      	lsls	r4, r7
 8000ee4:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ee8:	690c      	ldr	r4, [r1, #16]
 8000eea:	40bc      	lsls	r4, r7
 8000eec:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000ef0:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000ef4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ef6:	005f      	lsls	r7, r3, #1
 8000ef8:	2603      	movs	r6, #3
 8000efa:	40be      	lsls	r6, r7
 8000efc:	43f6      	mvns	r6, r6
 8000efe:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f02:	684c      	ldr	r4, [r1, #4]
 8000f04:	f004 0403 	and.w	r4, r4, #3
 8000f08:	40bc      	lsls	r4, r7
 8000f0a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8000f0e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f10:	684c      	ldr	r4, [r1, #4]
 8000f12:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8000f16:	2c11      	cmp	r4, #17
 8000f18:	bf18      	it	ne
 8000f1a:	f1bc 0f01 	cmpne.w	ip, #1
 8000f1e:	d901      	bls.n	8000f24 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f20:	2c12      	cmp	r4, #18
 8000f22:	d111      	bne.n	8000f48 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000f24:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f26:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f2a:	68cc      	ldr	r4, [r1, #12]
 8000f2c:	40bc      	lsls	r4, r7
 8000f2e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000f32:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f34:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f3a:	684c      	ldr	r4, [r1, #4]
 8000f3c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000f40:	409a      	lsls	r2, r3
 8000f42:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 8000f46:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f48:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f4a:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f4c:	688a      	ldr	r2, [r1, #8]
 8000f4e:	40ba      	lsls	r2, r7
 8000f50:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 8000f52:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f54:	684a      	ldr	r2, [r1, #4]
 8000f56:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000f5a:	d0aa      	beq.n	8000eb2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	4a2c      	ldr	r2, [pc, #176]	; (8001010 <HAL_GPIO_Init+0x1d8>)
 8000f5e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000f60:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000f64:	6454      	str	r4, [r2, #68]	; 0x44
 8000f66:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000f68:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f6c:	9201      	str	r2, [sp, #4]
 8000f6e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 8000f70:	089c      	lsrs	r4, r3, #2
 8000f72:	1ca6      	adds	r6, r4, #2
 8000f74:	4a24      	ldr	r2, [pc, #144]	; (8001008 <HAL_GPIO_Init+0x1d0>)
 8000f76:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f7a:	f003 0203 	and.w	r2, r3, #3
 8000f7e:	0096      	lsls	r6, r2, #2
 8000f80:	220f      	movs	r2, #15
 8000f82:	40b2      	lsls	r2, r6
 8000f84:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f88:	4a22      	ldr	r2, [pc, #136]	; (8001014 <HAL_GPIO_Init+0x1dc>)
 8000f8a:	4290      	cmp	r0, r2
 8000f8c:	f43f af5d 	beq.w	8000e4a <HAL_GPIO_Init+0x12>
 8000f90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f94:	4290      	cmp	r0, r2
 8000f96:	d022      	beq.n	8000fde <HAL_GPIO_Init+0x1a6>
 8000f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f9c:	4290      	cmp	r0, r2
 8000f9e:	d020      	beq.n	8000fe2 <HAL_GPIO_Init+0x1aa>
 8000fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	d01e      	beq.n	8000fe6 <HAL_GPIO_Init+0x1ae>
 8000fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d01c      	beq.n	8000fea <HAL_GPIO_Init+0x1b2>
 8000fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fb4:	4290      	cmp	r0, r2
 8000fb6:	d01a      	beq.n	8000fee <HAL_GPIO_Init+0x1b6>
 8000fb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fbc:	4290      	cmp	r0, r2
 8000fbe:	d018      	beq.n	8000ff2 <HAL_GPIO_Init+0x1ba>
 8000fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d016      	beq.n	8000ff6 <HAL_GPIO_Init+0x1be>
 8000fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fcc:	4290      	cmp	r0, r2
 8000fce:	d014      	beq.n	8000ffa <HAL_GPIO_Init+0x1c2>
 8000fd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fd4:	4290      	cmp	r0, r2
 8000fd6:	f43f af36 	beq.w	8000e46 <HAL_GPIO_Init+0xe>
 8000fda:	220a      	movs	r2, #10
 8000fdc:	e736      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000fde:	2201      	movs	r2, #1
 8000fe0:	e734      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	e732      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	e730      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000fea:	2204      	movs	r2, #4
 8000fec:	e72e      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000fee:	2205      	movs	r2, #5
 8000ff0:	e72c      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	e72a      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	e728      	b.n	8000e4c <HAL_GPIO_Init+0x14>
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	e726      	b.n	8000e4c <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8000ffe:	b002      	add	sp, #8
 8001000:	bcf0      	pop	{r4, r5, r6, r7}
 8001002:	4770      	bx	lr
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40013800 	.word	0x40013800
 800100c:	40013c00 	.word	0x40013c00
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000

08001018 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001018:	b912      	cbnz	r2, 8001020 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	6181      	str	r1, [r0, #24]
  }
}
 800101e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001020:	6181      	str	r1, [r0, #24]
 8001022:	4770      	bx	lr

08001024 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001024:	b510      	push	{r4, lr}
 8001026:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_PWREx_EnableOverDrive+0x74>)
 800102a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800102c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_PWREx_EnableOverDrive+0x78>)
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001044:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001046:	f7ff fb0f 	bl	8000668 <HAL_GetTick>
 800104a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <HAL_PWREx_EnableOverDrive+0x78>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001054:	d108      	bne.n	8001068 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001056:	f7ff fb07 	bl	8000668 <HAL_GetTick>
 800105a:	1b00      	subs	r0, r0, r4
 800105c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001060:	d9f4      	bls.n	800104c <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 8001062:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 8001064:	b002      	add	sp, #8
 8001066:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_PWREx_EnableOverDrive+0x78>)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8001072:	f7ff faf9 	bl	8000668 <HAL_GetTick>
 8001076:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_PWREx_EnableOverDrive+0x78>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001080:	d107      	bne.n	8001092 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001082:	f7ff faf1 	bl	8000668 <HAL_GetTick>
 8001086:	1b00      	subs	r0, r0, r4
 8001088:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800108c:	d9f4      	bls.n	8001078 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 800108e:	2003      	movs	r0, #3
 8001090:	e7e8      	b.n	8001064 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8001092:	2000      	movs	r0, #0
 8001094:	e7e6      	b.n	8001064 <HAL_PWREx_EnableOverDrive+0x40>
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 81dc 	beq.w	800145e <HAL_RCC_OscConfig+0x3be>
{
 80010a6:	b570      	push	{r4, r5, r6, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ac:	6803      	ldr	r3, [r0, #0]
 80010ae:	f013 0f01 	tst.w	r3, #1
 80010b2:	d029      	beq.n	8001108 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010b4:	4ba2      	ldr	r3, [pc, #648]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	2b04      	cmp	r3, #4
 80010be:	d01a      	beq.n	80010f6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c0:	4b9f      	ldr	r3, [pc, #636]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d00f      	beq.n	80010ec <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d2:	d040      	beq.n	8001156 <HAL_RCC_OscConfig+0xb6>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d154      	bne.n	8001182 <HAL_RCC_OscConfig+0xe2>
 80010d8:	4b99      	ldr	r3, [pc, #612]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e039      	b.n	8001160 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ec:	4b94      	ldr	r3, [pc, #592]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80010f4:	d0ea      	beq.n	80010cc <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f6:	4b92      	ldr	r3, [pc, #584]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80010fe:	d003      	beq.n	8001108 <HAL_RCC_OscConfig+0x68>
 8001100:	6863      	ldr	r3, [r4, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 81ad 	beq.w	8001462 <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001108:	6823      	ldr	r3, [r4, #0]
 800110a:	f013 0f02 	tst.w	r3, #2
 800110e:	d075      	beq.n	80011fc <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001110:	4b8b      	ldr	r3, [pc, #556]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f013 0f0c 	tst.w	r3, #12
 8001118:	d05e      	beq.n	80011d8 <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111a:	4b89      	ldr	r3, [pc, #548]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b08      	cmp	r3, #8
 8001124:	d053      	beq.n	80011ce <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001126:	68e3      	ldr	r3, [r4, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 808a 	beq.w	8001242 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112e:	4a84      	ldr	r2, [pc, #528]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001130:	6813      	ldr	r3, [r2, #0]
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001138:	f7ff fa96 	bl	8000668 <HAL_GetTick>
 800113c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800113e:	4b80      	ldr	r3, [pc, #512]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f013 0f02 	tst.w	r3, #2
 8001146:	d173      	bne.n	8001230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fa8e 	bl	8000668 <HAL_GetTick>
 800114c:	1b40      	subs	r0, r0, r5
 800114e:	2802      	cmp	r0, #2
 8001150:	d9f5      	bls.n	800113e <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001152:	2003      	movs	r0, #3
 8001154:	e188      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001156:	4a7a      	ldr	r2, [pc, #488]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001158:	6813      	ldr	r3, [r2, #0]
 800115a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001160:	6863      	ldr	r3, [r4, #4]
 8001162:	b32b      	cbz	r3, 80011b0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001164:	f7ff fa80 	bl	8000668 <HAL_GetTick>
 8001168:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001172:	d1c9      	bne.n	8001108 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fa78 	bl	8000668 <HAL_GetTick>
 8001178:	1b40      	subs	r0, r0, r5
 800117a:	2864      	cmp	r0, #100	; 0x64
 800117c:	d9f5      	bls.n	800116a <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 800117e:	2003      	movs	r0, #3
 8001180:	e172      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001186:	d009      	beq.n	800119c <HAL_RCC_OscConfig+0xfc>
 8001188:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e7e1      	b.n	8001160 <HAL_RCC_OscConfig+0xc0>
 800119c:	4b68      	ldr	r3, [pc, #416]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e7d7      	b.n	8001160 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 80011b0:	f7ff fa5a 	bl	8000668 <HAL_GetTick>
 80011b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80011be:	d0a3      	beq.n	8001108 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fa52 	bl	8000668 <HAL_GetTick>
 80011c4:	1b40      	subs	r0, r0, r5
 80011c6:	2864      	cmp	r0, #100	; 0x64
 80011c8:	d9f5      	bls.n	80011b6 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
 80011cc:	e14c      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ce:	4b5c      	ldr	r3, [pc, #368]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80011d6:	d1a6      	bne.n	8001126 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f013 0f02 	tst.w	r3, #2
 80011e0:	d004      	beq.n	80011ec <HAL_RCC_OscConfig+0x14c>
 80011e2:	68e3      	ldr	r3, [r4, #12]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 80011e8:	2001      	movs	r0, #1
 80011ea:	e13d      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4a54      	ldr	r2, [pc, #336]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80011ee:	6813      	ldr	r3, [r2, #0]
 80011f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011f4:	6921      	ldr	r1, [r4, #16]
 80011f6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011fa:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	f013 0f08 	tst.w	r3, #8
 8001202:	d046      	beq.n	8001292 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001204:	6963      	ldr	r3, [r4, #20]
 8001206:	b383      	cbz	r3, 800126a <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001208:	4a4d      	ldr	r2, [pc, #308]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800120a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001212:	f7ff fa29 	bl	8000668 <HAL_GetTick>
 8001216:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001218:	4b49      	ldr	r3, [pc, #292]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800121a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121c:	f013 0f02 	tst.w	r3, #2
 8001220:	d137      	bne.n	8001292 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fa21 	bl	8000668 <HAL_GetTick>
 8001226:	1b40      	subs	r0, r0, r5
 8001228:	2802      	cmp	r0, #2
 800122a:	d9f5      	bls.n	8001218 <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
 800122e:	e11b      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4a43      	ldr	r2, [pc, #268]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001238:	6921      	ldr	r1, [r4, #16]
 800123a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e7dc      	b.n	80011fc <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8001242:	4a3f      	ldr	r2, [pc, #252]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	f023 0301 	bic.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800124c:	f7ff fa0c 	bl	8000668 <HAL_GetTick>
 8001250:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	4b3b      	ldr	r3, [pc, #236]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f013 0f02 	tst.w	r3, #2
 800125a:	d0cf      	beq.n	80011fc <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fa04 	bl	8000668 <HAL_GetTick>
 8001260:	1b40      	subs	r0, r0, r5
 8001262:	2802      	cmp	r0, #2
 8001264:	d9f5      	bls.n	8001252 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8001266:	2003      	movs	r0, #3
 8001268:	e0fe      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126a:	4a35      	ldr	r2, [pc, #212]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800126c:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800126e:	f023 0301 	bic.w	r3, r3, #1
 8001272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001274:	f7ff f9f8 	bl	8000668 <HAL_GetTick>
 8001278:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800127a:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127e:	f013 0f02 	tst.w	r3, #2
 8001282:	d006      	beq.n	8001292 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff f9f0 	bl	8000668 <HAL_GetTick>
 8001288:	1b40      	subs	r0, r0, r5
 800128a:	2802      	cmp	r0, #2
 800128c:	d9f5      	bls.n	800127a <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	e0ea      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	f013 0f04 	tst.w	r3, #4
 8001298:	d07e      	beq.n	8001398 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800129a:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80012a2:	d11e      	bne.n	80012e2 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80012a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012b8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <HAL_RCC_OscConfig+0x2a4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012c2:	d010      	beq.n	80012e6 <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	68a3      	ldr	r3, [r4, #8]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d021      	beq.n	800130e <HAL_RCC_OscConfig+0x26e>
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d13c      	bne.n	8001348 <HAL_RCC_OscConfig+0x2a8>
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 80012d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012d2:	f022 0201 	bic.w	r2, r2, #1
 80012d6:	671a      	str	r2, [r3, #112]	; 0x70
 80012d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012da:	f022 0204 	bic.w	r2, r2, #4
 80012de:	671a      	str	r2, [r3, #112]	; 0x70
 80012e0:	e01a      	b.n	8001318 <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 80012e2:	2500      	movs	r5, #0
 80012e4:	e7e9      	b.n	80012ba <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_RCC_OscConfig+0x2a4>)
 80012e8:	6813      	ldr	r3, [r2, #0]
 80012ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ee:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012f0:	f7ff f9ba 	bl	8000668 <HAL_GetTick>
 80012f4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_RCC_OscConfig+0x2a4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80012fe:	d1e1      	bne.n	80012c4 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001300:	f7ff f9b2 	bl	8000668 <HAL_GetTick>
 8001304:	1b80      	subs	r0, r0, r6
 8001306:	2864      	cmp	r0, #100	; 0x64
 8001308:	d9f5      	bls.n	80012f6 <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 800130a:	2003      	movs	r0, #3
 800130c:	e0ac      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001310:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001318:	68a3      	ldr	r3, [r4, #8]
 800131a:	b35b      	cbz	r3, 8001374 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff f9a4 	bl	8000668 <HAL_GetTick>
 8001320:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_RCC_OscConfig+0x2a0>)
 8001324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001326:	f013 0f02 	tst.w	r3, #2
 800132a:	d134      	bne.n	8001396 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f7ff f99c 	bl	8000668 <HAL_GetTick>
 8001330:	1b80      	subs	r0, r0, r6
 8001332:	f241 3388 	movw	r3, #5000	; 0x1388
 8001336:	4298      	cmp	r0, r3
 8001338:	d9f3      	bls.n	8001322 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
 800133c:	e094      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	2b05      	cmp	r3, #5
 800134a:	d009      	beq.n	8001360 <HAL_RCC_OscConfig+0x2c0>
 800134c:	4b48      	ldr	r3, [pc, #288]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 800134e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001350:	f022 0201 	bic.w	r2, r2, #1
 8001354:	671a      	str	r2, [r3, #112]	; 0x70
 8001356:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001358:	f022 0204 	bic.w	r2, r2, #4
 800135c:	671a      	str	r2, [r3, #112]	; 0x70
 800135e:	e7db      	b.n	8001318 <HAL_RCC_OscConfig+0x278>
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 8001362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001364:	f042 0204 	orr.w	r2, r2, #4
 8001368:	671a      	str	r2, [r3, #112]	; 0x70
 800136a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	671a      	str	r2, [r3, #112]	; 0x70
 8001372:	e7d1      	b.n	8001318 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001374:	f7ff f978 	bl	8000668 <HAL_GetTick>
 8001378:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800137a:	4b3d      	ldr	r3, [pc, #244]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	f013 0f02 	tst.w	r3, #2
 8001382:	d008      	beq.n	8001396 <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f7ff f970 	bl	8000668 <HAL_GetTick>
 8001388:	1b80      	subs	r0, r0, r6
 800138a:	f241 3388 	movw	r3, #5000	; 0x1388
 800138e:	4298      	cmp	r0, r3
 8001390:	d9f3      	bls.n	800137a <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8001392:	2003      	movs	r0, #3
 8001394:	e068      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001396:	b9f5      	cbnz	r5, 80013d6 <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001398:	69a3      	ldr	r3, [r4, #24]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800139e:	4a34      	ldr	r2, [pc, #208]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 80013a0:	6892      	ldr	r2, [r2, #8]
 80013a2:	f002 020c 	and.w	r2, r2, #12
 80013a6:	2a08      	cmp	r2, #8
 80013a8:	d060      	beq.n	800146c <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d019      	beq.n	80013e2 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4a30      	ldr	r2, [pc, #192]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 80013b0:	6813      	ldr	r3, [r2, #0]
 80013b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff f956 	bl	8000668 <HAL_GetTick>
 80013bc:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	4b2c      	ldr	r3, [pc, #176]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013c6:	d048      	beq.n	800145a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff f94e 	bl	8000668 <HAL_GetTick>
 80013cc:	1b00      	subs	r0, r0, r4
 80013ce:	2802      	cmp	r0, #2
 80013d0:	d9f5      	bls.n	80013be <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80013d2:	2003      	movs	r0, #3
 80013d4:	e048      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013d6:	4a26      	ldr	r2, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 80013d8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80013da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013de:	6413      	str	r3, [r2, #64]	; 0x40
 80013e0:	e7da      	b.n	8001398 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4a23      	ldr	r2, [pc, #140]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 80013e4:	6813      	ldr	r3, [r2, #0]
 80013e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80013ec:	f7ff f93c 	bl	8000668 <HAL_GetTick>
 80013f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013fa:	d006      	beq.n	800140a <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff f934 	bl	8000668 <HAL_GetTick>
 8001400:	1b40      	subs	r0, r0, r5
 8001402:	2802      	cmp	r0, #2
 8001404:	d9f5      	bls.n	80013f2 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8001406:	2003      	movs	r0, #3
 8001408:	e02e      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140a:	69e3      	ldr	r3, [r4, #28]
 800140c:	6a22      	ldr	r2, [r4, #32]
 800140e:	4313      	orrs	r3, r2
 8001410:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001412:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001416:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001418:	0852      	lsrs	r2, r2, #1
 800141a:	3a01      	subs	r2, #1
 800141c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001422:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001426:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001428:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800142c:	4a10      	ldr	r2, [pc, #64]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 800142e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001436:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001438:	f7ff f916 	bl	8000668 <HAL_GetTick>
 800143c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_RCC_OscConfig+0x3d0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001448:	f7ff f90e 	bl	8000668 <HAL_GetTick>
 800144c:	1b00      	subs	r0, r0, r4
 800144e:	2802      	cmp	r0, #2
 8001450:	d9f5      	bls.n	800143e <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8001452:	2003      	movs	r0, #3
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001456:	2000      	movs	r0, #0
 8001458:	e006      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
 800145a:	2000      	movs	r0, #0
 800145c:	e004      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
}
 8001460:	4770      	bx	lr
        return HAL_ERROR;
 8001462:	2001      	movs	r0, #1
 8001464:	e000      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8001466:	2000      	movs	r0, #0
}
 8001468:	b002      	add	sp, #8
 800146a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
 800146e:	e7fb      	b.n	8001468 <HAL_RCC_OscConfig+0x3c8>
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b04      	cmp	r3, #4
 800147e:	d044      	beq.n	800150a <HAL_RCC_GetSysClockFreq+0x96>
 8001480:	2b08      	cmp	r3, #8
 8001482:	d001      	beq.n	8001488 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001484:	4823      	ldr	r0, [pc, #140]	; (8001514 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001486:	4770      	bx	lr
{
 8001488:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_GetSysClockFreq+0x9c>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <HAL_RCC_GetSysClockFreq+0x9c>)
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014a4:	2300      	movs	r3, #0
 80014a6:	481c      	ldr	r0, [pc, #112]	; (8001518 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014a8:	fba1 0100 	umull	r0, r1, r1, r0
 80014ac:	f7fe ff20 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014b8:	3301      	adds	r3, #1
 80014ba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80014bc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014c0:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80014cc:	461e      	mov	r6, r3
 80014ce:	2700      	movs	r7, #0
 80014d0:	015c      	lsls	r4, r3, #5
 80014d2:	2500      	movs	r5, #0
 80014d4:	1ae4      	subs	r4, r4, r3
 80014d6:	eb65 0507 	sbc.w	r5, r5, r7
 80014da:	01a9      	lsls	r1, r5, #6
 80014dc:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80014e0:	01a0      	lsls	r0, r4, #6
 80014e2:	1b00      	subs	r0, r0, r4
 80014e4:	eb61 0105 	sbc.w	r1, r1, r5
 80014e8:	00cb      	lsls	r3, r1, #3
 80014ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014ee:	00c4      	lsls	r4, r0, #3
 80014f0:	19a0      	adds	r0, r4, r6
 80014f2:	eb43 0107 	adc.w	r1, r3, r7
 80014f6:	028b      	lsls	r3, r1, #10
 80014f8:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80014fc:	0284      	lsls	r4, r0, #10
 80014fe:	4620      	mov	r0, r4
 8001500:	4619      	mov	r1, r3
 8001502:	2300      	movs	r3, #0
 8001504:	f7fe fef4 	bl	80002f0 <__aeabi_uldivmod>
 8001508:	e7d2      	b.n	80014b0 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 800150a:	4803      	ldr	r0, [pc, #12]	; (8001518 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	00f42400 	.word	0x00f42400
 8001518:	017d7840 	.word	0x017d7840

0800151c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800151c:	2800      	cmp	r0, #0
 800151e:	f000 80a2 	beq.w	8001666 <HAL_RCC_ClockConfig+0x14a>
{
 8001522:	b570      	push	{r4, r5, r6, lr}
 8001524:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001526:	4b52      	ldr	r3, [pc, #328]	; (8001670 <HAL_RCC_ClockConfig+0x154>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	428b      	cmp	r3, r1
 8001530:	d20c      	bcs.n	800154c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4a4f      	ldr	r2, [pc, #316]	; (8001670 <HAL_RCC_ClockConfig+0x154>)
 8001534:	6813      	ldr	r3, [r2, #0]
 8001536:	f023 030f 	bic.w	r3, r3, #15
 800153a:	430b      	orrs	r3, r1
 800153c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	428b      	cmp	r3, r1
 8001546:	d001      	beq.n	800154c <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8001548:	2001      	movs	r0, #1
}
 800154a:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800154c:	6823      	ldr	r3, [r4, #0]
 800154e:	f013 0f02 	tst.w	r3, #2
 8001552:	d017      	beq.n	8001584 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	f013 0f04 	tst.w	r3, #4
 8001558:	d004      	beq.n	8001564 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800155a:	4a46      	ldr	r2, [pc, #280]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 800155c:	6893      	ldr	r3, [r2, #8]
 800155e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001562:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001564:	6823      	ldr	r3, [r4, #0]
 8001566:	f013 0f08 	tst.w	r3, #8
 800156a:	d004      	beq.n	8001576 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	4a41      	ldr	r2, [pc, #260]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 800156e:	6893      	ldr	r3, [r2, #8]
 8001570:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001574:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001576:	4a3f      	ldr	r2, [pc, #252]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 8001578:	6893      	ldr	r3, [r2, #8]
 800157a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800157e:	68a0      	ldr	r0, [r4, #8]
 8001580:	4303      	orrs	r3, r0
 8001582:	6093      	str	r3, [r2, #8]
 8001584:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	f013 0f01 	tst.w	r3, #1
 800158c:	d031      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158e:	6863      	ldr	r3, [r4, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001594:	2b02      	cmp	r3, #2
 8001596:	d025      	beq.n	80015e4 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4a36      	ldr	r2, [pc, #216]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	f012 0f02 	tst.w	r2, #2
 80015a0:	d063      	beq.n	800166a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a2:	4934      	ldr	r1, [pc, #208]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 80015a4:	688a      	ldr	r2, [r1, #8]
 80015a6:	f022 0203 	bic.w	r2, r2, #3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80015ae:	f7ff f85b 	bl	8000668 <HAL_GetTick>
 80015b2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b4:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	6862      	ldr	r2, [r4, #4]
 80015be:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015c2:	d016      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff f850 	bl	8000668 <HAL_GetTick>
 80015c8:	1b80      	subs	r0, r0, r6
 80015ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80015ce:	4298      	cmp	r0, r3
 80015d0:	d9f0      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
 80015d4:	e7b9      	b.n	800154a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4a27      	ldr	r2, [pc, #156]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80015de:	d1e0      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
 80015e2:	e7b2      	b.n	800154a <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e4:	4a23      	ldr	r2, [pc, #140]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015ec:	d1d9      	bne.n	80015a2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	e7ab      	b.n	800154a <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_RCC_ClockConfig+0x154>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	42ab      	cmp	r3, r5
 80015fc:	d90c      	bls.n	8001618 <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_RCC_ClockConfig+0x154>)
 8001600:	6813      	ldr	r3, [r2, #0]
 8001602:	f023 030f 	bic.w	r3, r3, #15
 8001606:	432b      	orrs	r3, r5
 8001608:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f003 030f 	and.w	r3, r3, #15
 8001610:	42ab      	cmp	r3, r5
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8001614:	2001      	movs	r0, #1
 8001616:	e798      	b.n	800154a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	f013 0f04 	tst.w	r3, #4
 800161e:	d006      	beq.n	800162e <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001620:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 8001622:	6893      	ldr	r3, [r2, #8]
 8001624:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001628:	68e1      	ldr	r1, [r4, #12]
 800162a:	430b      	orrs	r3, r1
 800162c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	f013 0f08 	tst.w	r3, #8
 8001634:	d007      	beq.n	8001646 <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 8001638:	6893      	ldr	r3, [r2, #8]
 800163a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800163e:	6921      	ldr	r1, [r4, #16]
 8001640:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001644:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001646:	f7ff ff15 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_RCC_ClockConfig+0x158>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001652:	4a09      	ldr	r2, [pc, #36]	; (8001678 <HAL_RCC_ClockConfig+0x15c>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	40d8      	lsrs	r0, r3
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_RCC_ClockConfig+0x160>)
 800165a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800165c:	2000      	movs	r0, #0
 800165e:	f7fe ffc7 	bl	80005f0 <HAL_InitTick>
  return HAL_OK;
 8001662:	2000      	movs	r0, #0
 8001664:	e771      	b.n	800154a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001666:	2001      	movs	r0, #1
}
 8001668:	4770      	bx	lr
        return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
 800166c:	e76d      	b.n	800154a <HAL_RCC_ClockConfig+0x2e>
 800166e:	bf00      	nop
 8001670:	40023c00 	.word	0x40023c00
 8001674:	40023800 	.word	0x40023800
 8001678:	0800332c 	.word	0x0800332c
 800167c:	20000008 	.word	0x20000008

08001680 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001680:	4b01      	ldr	r3, [pc, #4]	; (8001688 <HAL_RCC_GetHCLKFreq+0x8>)
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000008 	.word	0x20000008

0800168c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800168c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800168e:	f7ff fff7 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800169a:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800169c:	5cd3      	ldrb	r3, [r2, r3]
}
 800169e:	40d8      	lsrs	r0, r3
 80016a0:	bd08      	pop	{r3, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	0800333c 	.word	0x0800333c

080016ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016ae:	f7ff ffe7 	bl	8001680 <HAL_RCC_GetHCLKFreq>
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80016ba:	4a03      	ldr	r2, [pc, #12]	; (80016c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80016be:	40d8      	lsrs	r0, r3
 80016c0:	bd08      	pop	{r3, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	0800333c 	.word	0x0800333c

080016cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ce:	b083      	sub	sp, #12
 80016d0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80016d2:	6803      	ldr	r3, [r0, #0]
 80016d4:	f013 0f01 	tst.w	r3, #1
 80016d8:	d00c      	beq.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016da:	4bb3      	ldr	r3, [pc, #716]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80016e8:	430a      	orrs	r2, r1
 80016ea:	609a      	str	r2, [r3, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80016ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80016ee:	b1c3      	cbz	r3, 8001722 <HAL_RCCEx_PeriphCLKConfig+0x56>
  uint32_t plli2sused = 0;
 80016f0:	2600      	movs	r6, #0
 80016f2:	e000      	b.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
 80016f4:	2600      	movs	r6, #0
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80016fc:	d015      	beq.n	800172a <HAL_RCCEx_PeriphCLKConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016fe:	4aaa      	ldr	r2, [pc, #680]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001700:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001704:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001708:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800170a:	430b      	orrs	r3, r1
 800170c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001710:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001716:	d006      	beq.n	8001726 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8141 	beq.w	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  uint32_t pllsaiused = 0;
 800171e:	2500      	movs	r5, #0
 8001720:	e004      	b.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 8001722:	2601      	movs	r6, #1
 8001724:	e7e7      	b.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      plli2sused = 1;
 8001726:	2601      	movs	r6, #1
 8001728:	e7f6      	b.n	8001718 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  uint32_t pllsaiused = 0;
 800172a:	2500      	movs	r5, #0
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001732:	d00f      	beq.n	8001754 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001734:	4a9c      	ldr	r2, [pc, #624]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001736:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800173a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800173e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001740:	430b      	orrs	r3, r1
 8001742:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800174c:	f000 812a 	beq.w	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001750:	b903      	cbnz	r3, 8001754 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      pllsaiused = 1;
 8001752:	2501      	movs	r5, #1
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800175a:	d000      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
      plli2sused = 1;
 800175c:	2601      	movs	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800175e:	f013 0f20 	tst.w	r3, #32
 8001762:	f040 8123 	bne.w	80019ac <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	f013 0f10 	tst.w	r3, #16
 800176c:	d00c      	beq.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800176e:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001770:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001774:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800177c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001782:	430a      	orrs	r2, r1
 8001784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001788:	6823      	ldr	r3, [r4, #0]
 800178a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800178e:	d008      	beq.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001790:	4a85      	ldr	r2, [pc, #532]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001792:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001796:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800179a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800179c:	430b      	orrs	r3, r1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80017a8:	d008      	beq.n	80017bc <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017aa:	4a7f      	ldr	r2, [pc, #508]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80017ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017b0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80017b4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80017b6:	430b      	orrs	r3, r1
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017bc:	6823      	ldr	r3, [r4, #0]
 80017be:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017c2:	d008      	beq.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017c4:	4a78      	ldr	r2, [pc, #480]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80017c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017ca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80017ce:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80017d0:	430b      	orrs	r3, r1
 80017d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017dc:	d008      	beq.n	80017f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80017de:	4a72      	ldr	r2, [pc, #456]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80017e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017e4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80017e8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80017ea:	430b      	orrs	r3, r1
 80017ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017f6:	d008      	beq.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017f8:	4a6b      	ldr	r2, [pc, #428]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80017fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80017fe:	f023 0303 	bic.w	r3, r3, #3
 8001802:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001804:	430b      	orrs	r3, r1
 8001806:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001810:	d008      	beq.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001812:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001814:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001818:	f023 030c 	bic.w	r3, r3, #12
 800181c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800181e:	430b      	orrs	r3, r1
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001824:	6823      	ldr	r3, [r4, #0]
 8001826:	f413 7f80 	tst.w	r3, #256	; 0x100
 800182a:	d008      	beq.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800182c:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800182e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001832:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001836:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001838:	430b      	orrs	r3, r1
 800183a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001844:	d008      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001846:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001848:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800184c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001850:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001852:	430b      	orrs	r3, r1
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800185e:	d008      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001860:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001862:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800186a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800186c:	430b      	orrs	r3, r1
 800186e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001878:	d008      	beq.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800187a:	4a4b      	ldr	r2, [pc, #300]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800187c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001880:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001884:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001886:	430b      	orrs	r3, r1
 8001888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001892:	d008      	beq.n	80018a6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001894:	4a44      	ldr	r2, [pc, #272]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001896:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800189a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80018a0:	430b      	orrs	r3, r1
 80018a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80018ac:	d008      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80018ae:	4a3e      	ldr	r2, [pc, #248]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018b8:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80018ba:	430b      	orrs	r3, r1
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80018c6:	d008      	beq.n	80018da <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018c8:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80018d2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80018d4:	430b      	orrs	r3, r1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80018e0:	d00d      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018e2:	4a31      	ldr	r2, [pc, #196]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80018e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80018e8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80018ec:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80018ee:	430b      	orrs	r3, r1
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80018f4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80018f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018fa:	f000 80bd 	beq.w	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001904:	d008      	beq.n	8001918 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001906:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001908:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800190c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001910:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001912:	430b      	orrs	r3, r1
 8001914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001918:	6823      	ldr	r3, [r4, #0]
 800191a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800191e:	d009      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x268>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001920:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001922:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800192e:	430b      	orrs	r3, r1
 8001930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001934:	6823      	ldr	r3, [r4, #0]
 8001936:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800193a:	d009      	beq.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800193c:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800193e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001942:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001946:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800194a:	430b      	orrs	r3, r1
 800194c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001956:	d009      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001958:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800195a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800195e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001962:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8001966:	430b      	orrs	r3, r1
 8001968:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001972:	d009      	beq.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001974:	4a0c      	ldr	r2, [pc, #48]	; (80019a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001976:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800197a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800197e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8001982:	430b      	orrs	r3, r1
 8001984:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001988:	2e00      	cmp	r6, #0
 800198a:	d177      	bne.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001992:	d073      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001994:	2d00      	cmp	r5, #0
 8001996:	f040 8104 	bne.w	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800199a:	2000      	movs	r0, #0
}
 800199c:	b003      	add	sp, #12
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pllsaiused = 1;
 80019a0:	2501      	movs	r5, #1
 80019a2:	e6c3      	b.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x60>
      plli2sused = 1;
 80019a4:	2601      	movs	r6, #1
 80019a6:	e6d3      	b.n	8001750 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80019a8:	40023800 	.word	0x40023800
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	4bb3      	ldr	r3, [pc, #716]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 80019ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80019c0:	4aaf      	ldr	r2, [pc, #700]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80019c2:	6813      	ldr	r3, [r2, #0]
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80019ca:	f7fe fe4d 	bl	8000668 <HAL_GetTick>
 80019ce:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80019d0:	4bab      	ldr	r3, [pc, #684]	; (8001c80 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80019d8:	d106      	bne.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7fe fe45 	bl	8000668 <HAL_GetTick>
 80019de:	1bc0      	subs	r0, r0, r7
 80019e0:	2864      	cmp	r0, #100	; 0x64
 80019e2:	d9f5      	bls.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
        return HAL_TIMEOUT;
 80019e4:	2003      	movs	r0, #3
 80019e6:	e7d9      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80019e8:	4ba4      	ldr	r3, [pc, #656]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80019ec:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80019f0:	d015      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x352>
 80019f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019f4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d010      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x352>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019fc:	4b9f      	ldr	r3, [pc, #636]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 80019fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a00:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a04:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a06:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001a0a:	6719      	str	r1, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a0c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001a0e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001a12:	6719      	str	r1, [r3, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001a14:	671a      	str	r2, [r3, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a18:	f013 0f01 	tst.w	r3, #1
 8001a1c:	d112      	bne.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x378>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a20:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001a24:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001a28:	d01d      	beq.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8001a2a:	4a94      	ldr	r2, [pc, #592]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001a2c:	6893      	ldr	r3, [r2, #8]
 8001a2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a32:	6093      	str	r3, [r2, #8]
 8001a34:	4991      	ldr	r1, [pc, #580]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001a36:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001a38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a3a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	670b      	str	r3, [r1, #112]	; 0x70
 8001a42:	e690      	b.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 8001a44:	f7fe fe10 	bl	8000668 <HAL_GetTick>
 8001a48:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4a:	4b8c      	ldr	r3, [pc, #560]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	f013 0f02 	tst.w	r3, #2
 8001a52:	d1e4      	bne.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x352>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7fe fe08 	bl	8000668 <HAL_GetTick>
 8001a58:	1bc0      	subs	r0, r0, r7
 8001a5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a5e:	4298      	cmp	r0, r3
 8001a60:	d9f3      	bls.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x37e>
            return HAL_TIMEOUT;
 8001a62:	2003      	movs	r0, #3
 8001a64:	e79a      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a66:	4885      	ldr	r0, [pc, #532]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001a68:	6882      	ldr	r2, [r0, #8]
 8001a6a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001a6e:	4985      	ldr	r1, [pc, #532]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x5b8>)
 8001a70:	4019      	ands	r1, r3
 8001a72:	430a      	orrs	r2, r1
 8001a74:	6082      	str	r2, [r0, #8]
 8001a76:	e7dd      	b.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x368>
      pllsaiused = 1;
 8001a78:	2501      	movs	r5, #1
 8001a7a:	e740      	b.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x232>
    __HAL_RCC_PLLI2S_DISABLE();
 8001a7c:	4a7f      	ldr	r2, [pc, #508]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001a7e:	6813      	ldr	r3, [r2, #0]
 8001a80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001a86:	f7fe fdef 	bl	8000668 <HAL_GetTick>
 8001a8a:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a8c:	4b7b      	ldr	r3, [pc, #492]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001a94:	d006      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a96:	f7fe fde7 	bl	8000668 <HAL_GetTick>
 8001a9a:	1b80      	subs	r0, r0, r6
 8001a9c:	2864      	cmp	r0, #100	; 0x64
 8001a9e:	d9f5      	bls.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
        return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	e77b      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001aa4:	6823      	ldr	r3, [r4, #0]
 8001aa6:	f013 0f01 	tst.w	r3, #1
 8001aaa:	d013      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8001aac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001aae:	b98b      	cbnz	r3, 8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ab0:	4a72      	ldr	r2, [pc, #456]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001ab2:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ab6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001aba:	6860      	ldr	r0, [r4, #4]
 8001abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ac0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ac4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	68a1      	ldr	r1, [r4, #8]
 8001acc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ad0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001ada:	d003      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8001adc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001ade:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8001ae2:	d006      	beq.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8001ae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001ae8:	d01e      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001aea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af0:	d11a      	bne.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001af2:	4a62      	ldr	r2, [pc, #392]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001af4:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001af8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001afc:	6860      	ldr	r0, [r4, #4]
 8001afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b02:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b06:	68e0      	ldr	r0, [r4, #12]
 8001b08:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001b0c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001b10:	430b      	orrs	r3, r1
 8001b12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b16:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001b1a:	f023 031f 	bic.w	r3, r3, #31
 8001b1e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b20:	3901      	subs	r1, #1
 8001b22:	430b      	orrs	r3, r1
 8001b24:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001b2e:	d011      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x488>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001b32:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b36:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001b3a:	6866      	ldr	r6, [r4, #4]
 8001b3c:	6923      	ldr	r3, [r4, #16]
 8001b3e:	041b      	lsls	r3, r3, #16
 8001b40:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 8001b44:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001b48:	4303      	orrs	r3, r0
 8001b4a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b54:	6823      	ldr	r3, [r4, #0]
 8001b56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b5a:	d00d      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b5c:	6862      	ldr	r2, [r4, #4]
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b66:	68e2      	ldr	r2, [r4, #12]
 8001b68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b6c:	68a2      	ldr	r2, [r4, #8]
 8001b6e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b72:	4a42      	ldr	r2, [pc, #264]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001b74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b78:	4a40      	ldr	r2, [pc, #256]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b80:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001b82:	f7fe fd71 	bl	8000668 <HAL_GetTick>
 8001b86:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b88:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b90:	f47f af00 	bne.w	8001994 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b94:	f7fe fd68 	bl	8000668 <HAL_GetTick>
 8001b98:	1b80      	subs	r0, r0, r6
 8001b9a:	2864      	cmp	r0, #100	; 0x64
 8001b9c:	d9f4      	bls.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
        return HAL_TIMEOUT;
 8001b9e:	2003      	movs	r0, #3
 8001ba0:	e6fc      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    __HAL_RCC_PLLSAI_DISABLE();
 8001ba2:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001ba4:	6813      	ldr	r3, [r2, #0]
 8001ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001bac:	f7fe fd5c 	bl	8000668 <HAL_GetTick>
 8001bb0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001bb2:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001bba:	d006      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bbc:	f7fe fd54 	bl	8000668 <HAL_GetTick>
 8001bc0:	1b40      	subs	r0, r0, r5
 8001bc2:	2864      	cmp	r0, #100	; 0x64
 8001bc4:	d9f5      	bls.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        return HAL_TIMEOUT;
 8001bc6:	2003      	movs	r0, #3
 8001bc8:	e6e8      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8001bd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001bd4:	b122      	cbz	r2, 8001be0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001bd6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001bda:	d01d      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bde:	b9db      	cbnz	r3, 8001c18 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001be0:	4a26      	ldr	r2, [pc, #152]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001be2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001be6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001bea:	6960      	ldr	r0, [r4, #20]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001bf4:	69a0      	ldr	r0, [r4, #24]
 8001bf6:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001bfa:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001bfe:	430b      	orrs	r3, r1
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c04:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001c08:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001c0c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001c0e:	3901      	subs	r1, #1
 8001c10:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001c14:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001c18:	6823      	ldr	r3, [r4, #0]
 8001c1a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001c1e:	d003      	beq.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8001c20:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c26:	d013      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_PLLSAI_ENABLE();
 8001c28:	4a14      	ldr	r2, [pc, #80]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001c32:	f7fe fd19 	bl	8000668 <HAL_GetTick>
 8001c36:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001c40:	d119      	bne.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001c42:	f7fe fd11 	bl	8000668 <HAL_GetTick>
 8001c46:	1b00      	subs	r0, r0, r4
 8001c48:	2864      	cmp	r0, #100	; 0x64
 8001c4a:	d9f5      	bls.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        return HAL_TIMEOUT;
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	e6a5      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c50:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x5b0>)
 8001c52:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c56:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001c5a:	6965      	ldr	r5, [r4, #20]
 8001c5c:	6a23      	ldr	r3, [r4, #32]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001c64:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001c68:	4303      	orrs	r3, r0
 8001c6a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c74:	e7d8      	b.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
  return HAL_OK;
 8001c76:	2000      	movs	r0, #0
 8001c78:	e690      	b.n	800199c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
 8001c84:	0ffffcff 	.word	0x0ffffcff

08001c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c88:	b510      	push	{r4, lr}
 8001c8a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c8c:	6883      	ldr	r3, [r0, #8]
 8001c8e:	6902      	ldr	r2, [r0, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	6942      	ldr	r2, [r0, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	69c2      	ldr	r2, [r0, #28]
 8001c98:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c9a:	6801      	ldr	r1, [r0, #0]
 8001c9c:	6808      	ldr	r0, [r1, #0]
 8001c9e:	4a99      	ldr	r2, [pc, #612]	; (8001f04 <UART_SetConfig+0x27c>)
 8001ca0:	4002      	ands	r2, r0
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	600b      	str	r3, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	6853      	ldr	r3, [r2, #4]
 8001caa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cae:	68e1      	ldr	r1, [r4, #12]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001cb4:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8001cb6:	6a23      	ldr	r3, [r4, #32]
 8001cb8:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001cba:	6821      	ldr	r1, [r4, #0]
 8001cbc:	688b      	ldr	r3, [r1, #8]
 8001cbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cc6:	6823      	ldr	r3, [r4, #0]
 8001cc8:	4a8f      	ldr	r2, [pc, #572]	; (8001f08 <UART_SetConfig+0x280>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d018      	beq.n	8001d00 <UART_SetConfig+0x78>
 8001cce:	4a8f      	ldr	r2, [pc, #572]	; (8001f0c <UART_SetConfig+0x284>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d028      	beq.n	8001d26 <UART_SetConfig+0x9e>
 8001cd4:	4a8e      	ldr	r2, [pc, #568]	; (8001f10 <UART_SetConfig+0x288>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d03d      	beq.n	8001d56 <UART_SetConfig+0xce>
 8001cda:	4a8e      	ldr	r2, [pc, #568]	; (8001f14 <UART_SetConfig+0x28c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d050      	beq.n	8001d82 <UART_SetConfig+0xfa>
 8001ce0:	4a8d      	ldr	r2, [pc, #564]	; (8001f18 <UART_SetConfig+0x290>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d062      	beq.n	8001dac <UART_SetConfig+0x124>
 8001ce6:	4a8d      	ldr	r2, [pc, #564]	; (8001f1c <UART_SetConfig+0x294>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d077      	beq.n	8001ddc <UART_SetConfig+0x154>
 8001cec:	4a8c      	ldr	r2, [pc, #560]	; (8001f20 <UART_SetConfig+0x298>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	f000 808c 	beq.w	8001e0c <UART_SetConfig+0x184>
 8001cf4:	4a8b      	ldr	r2, [pc, #556]	; (8001f24 <UART_SetConfig+0x29c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	f000 80a0 	beq.w	8001e3c <UART_SetConfig+0x1b4>
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	e0b6      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d00:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d809      	bhi.n	8001d22 <UART_SetConfig+0x9a>
 8001d0e:	e8df f003 	tbb	[pc, r3]
 8001d12:	0402      	.short	0x0402
 8001d14:	06ad      	.short	0x06ad
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0a9      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e0a7      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d1e:	2308      	movs	r3, #8
 8001d20:	e0a5      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d22:	2310      	movs	r3, #16
 8001d24:	e0a3      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d26:	4b80      	ldr	r3, [pc, #512]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2c:	f003 030c 	and.w	r3, r3, #12
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	d80e      	bhi.n	8001d52 <UART_SetConfig+0xca>
 8001d34:	e8df f003 	tbb	[pc, r3]
 8001d38:	0d0d0d07 	.word	0x0d0d0d07
 8001d3c:	0d0d0d09 	.word	0x0d0d0d09
 8001d40:	0d0d0da9 	.word	0x0d0d0da9
 8001d44:	0b          	.byte	0x0b
 8001d45:	00          	.byte	0x00
 8001d46:	2300      	movs	r3, #0
 8001d48:	e091      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e08f      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d4e:	2308      	movs	r3, #8
 8001d50:	e08d      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d52:	2310      	movs	r3, #16
 8001d54:	e08b      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d56:	4b74      	ldr	r3, [pc, #464]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d00a      	beq.n	8001d7a <UART_SetConfig+0xf2>
 8001d64:	d906      	bls.n	8001d74 <UART_SetConfig+0xec>
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	f000 8091 	beq.w	8001e8e <UART_SetConfig+0x206>
 8001d6c:	2b30      	cmp	r3, #48	; 0x30
 8001d6e:	d106      	bne.n	8001d7e <UART_SetConfig+0xf6>
 8001d70:	2308      	movs	r3, #8
 8001d72:	e07c      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d74:	b91b      	cbnz	r3, 8001d7e <UART_SetConfig+0xf6>
 8001d76:	2300      	movs	r3, #0
 8001d78:	e079      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e077      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d7e:	2310      	movs	r3, #16
 8001d80:	e075      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d82:	4b69      	ldr	r3, [pc, #420]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d009      	beq.n	8001da4 <UART_SetConfig+0x11c>
 8001d90:	d905      	bls.n	8001d9e <UART_SetConfig+0x116>
 8001d92:	2b80      	cmp	r3, #128	; 0x80
 8001d94:	d07d      	beq.n	8001e92 <UART_SetConfig+0x20a>
 8001d96:	2bc0      	cmp	r3, #192	; 0xc0
 8001d98:	d106      	bne.n	8001da8 <UART_SetConfig+0x120>
 8001d9a:	2308      	movs	r3, #8
 8001d9c:	e067      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001d9e:	b91b      	cbnz	r3, 8001da8 <UART_SetConfig+0x120>
 8001da0:	2300      	movs	r3, #0
 8001da2:	e064      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001da4:	2304      	movs	r3, #4
 8001da6:	e062      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001da8:	2310      	movs	r3, #16
 8001daa:	e060      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001dac:	4b5e      	ldr	r3, [pc, #376]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dba:	d00b      	beq.n	8001dd4 <UART_SetConfig+0x14c>
 8001dbc:	d907      	bls.n	8001dce <UART_SetConfig+0x146>
 8001dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dc2:	d068      	beq.n	8001e96 <UART_SetConfig+0x20e>
 8001dc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dc8:	d106      	bne.n	8001dd8 <UART_SetConfig+0x150>
 8001dca:	2308      	movs	r3, #8
 8001dcc:	e04f      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001dce:	b91b      	cbnz	r3, 8001dd8 <UART_SetConfig+0x150>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e04c      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	e04a      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001dd8:	2310      	movs	r3, #16
 8001dda:	e048      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001ddc:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dea:	d00b      	beq.n	8001e04 <UART_SetConfig+0x17c>
 8001dec:	d907      	bls.n	8001dfe <UART_SetConfig+0x176>
 8001dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001df2:	d052      	beq.n	8001e9a <UART_SetConfig+0x212>
 8001df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001df8:	d106      	bne.n	8001e08 <UART_SetConfig+0x180>
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	e037      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001dfe:	b91b      	cbnz	r3, 8001e08 <UART_SetConfig+0x180>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e034      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e032      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e08:	2310      	movs	r3, #16
 8001e0a:	e030      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e0c:	4b46      	ldr	r3, [pc, #280]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1a:	d00b      	beq.n	8001e34 <UART_SetConfig+0x1ac>
 8001e1c:	d907      	bls.n	8001e2e <UART_SetConfig+0x1a6>
 8001e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e22:	d03c      	beq.n	8001e9e <UART_SetConfig+0x216>
 8001e24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001e28:	d106      	bne.n	8001e38 <UART_SetConfig+0x1b0>
 8001e2a:	2308      	movs	r3, #8
 8001e2c:	e01f      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e2e:	b91b      	cbnz	r3, 8001e38 <UART_SetConfig+0x1b0>
 8001e30:	2300      	movs	r3, #0
 8001e32:	e01c      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e01a      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e38:	2310      	movs	r3, #16
 8001e3a:	e018      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e3c:	4b3a      	ldr	r3, [pc, #232]	; (8001f28 <UART_SetConfig+0x2a0>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e4a:	d00b      	beq.n	8001e64 <UART_SetConfig+0x1dc>
 8001e4c:	d907      	bls.n	8001e5e <UART_SetConfig+0x1d6>
 8001e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e52:	d026      	beq.n	8001ea2 <UART_SetConfig+0x21a>
 8001e54:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e58:	d106      	bne.n	8001e68 <UART_SetConfig+0x1e0>
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	e007      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e5e:	b91b      	cbnz	r3, 8001e68 <UART_SetConfig+0x1e0>
 8001e60:	2300      	movs	r3, #0
 8001e62:	e004      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e64:	2304      	movs	r3, #4
 8001e66:	e002      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e68:	2310      	movs	r3, #16
 8001e6a:	e000      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e6c:	2302      	movs	r3, #2

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e6e:	69e2      	ldr	r2, [r4, #28]
 8001e70:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e74:	d017      	beq.n	8001ea6 <UART_SetConfig+0x21e>
      ret = HAL_ERROR;
    }
  }
  else
  {
    switch (clocksource)
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	f200 80b3 	bhi.w	8001fe2 <UART_SetConfig+0x35a>
 8001e7c:	e8df f003 	tbb	[pc, r3]
 8001e80:	b1958b76 	.word	0xb1958b76
 8001e84:	b1b1b19e 	.word	0xb1b1b19e
 8001e88:	a8          	.byte	0xa8
 8001e89:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e7ef      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e7ed      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e7eb      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e7e9      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e7e7      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e7e5      	b.n	8001e6e <UART_SetConfig+0x1e6>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e7e3      	b.n	8001e6e <UART_SetConfig+0x1e6>
    switch (clocksource)
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d85d      	bhi.n	8001f66 <UART_SetConfig+0x2de>
 8001eaa:	e8df f003 	tbb	[pc, r3]
 8001eae:	1f05      	.short	0x1f05
 8001eb0:	5c485c3f 	.word	0x5c485c3f
 8001eb4:	5c5c      	.short	0x5c5c
 8001eb6:	53          	.byte	0x53
 8001eb7:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001eb8:	f7ff fbe8 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8001ebc:	6862      	ldr	r2, [r4, #4]
 8001ebe:	0853      	lsrs	r3, r2, #1
 8001ec0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ec8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001eca:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001ecc:	f1a3 0110 	sub.w	r1, r3, #16
 8001ed0:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001ed4:	4291      	cmp	r1, r2
 8001ed6:	f200 8087 	bhi.w	8001fe8 <UART_SetConfig+0x360>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ee0:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001ee4:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	60d3      	str	r3, [r2, #12]
 8001eea:	e050      	b.n	8001f8e <UART_SetConfig+0x306>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001eec:	f7ff fbde 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001ef0:	6862      	ldr	r2, [r4, #4]
 8001ef2:	0853      	lsrs	r3, r2, #1
 8001ef4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001efc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001efe:	2000      	movs	r0, #0
        break;
 8001f00:	e7e4      	b.n	8001ecc <UART_SetConfig+0x244>
 8001f02:	bf00      	nop
 8001f04:	efff69f3 	.word	0xefff69f3
 8001f08:	40011000 	.word	0x40011000
 8001f0c:	40004400 	.word	0x40004400
 8001f10:	40004800 	.word	0x40004800
 8001f14:	40004c00 	.word	0x40004c00
 8001f18:	40005000 	.word	0x40005000
 8001f1c:	40011400 	.word	0x40011400
 8001f20:	40007800 	.word	0x40007800
 8001f24:	40007c00 	.word	0x40007c00
 8001f28:	40023800 	.word	0x40023800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001f2c:	6862      	ldr	r2, [r4, #4]
 8001f2e:	4b30      	ldr	r3, [pc, #192]	; (8001ff0 <UART_SetConfig+0x368>)
 8001f30:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001f34:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f38:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f3a:	2000      	movs	r0, #0
        break;
 8001f3c:	e7c6      	b.n	8001ecc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001f3e:	f7ff fa99 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8001f42:	6862      	ldr	r2, [r4, #4]
 8001f44:	0853      	lsrs	r3, r2, #1
 8001f46:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f4e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f50:	2000      	movs	r0, #0
        break;
 8001f52:	e7bb      	b.n	8001ecc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001f54:	6862      	ldr	r2, [r4, #4]
 8001f56:	0853      	lsrs	r3, r2, #1
 8001f58:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f60:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f62:	2000      	movs	r0, #0
        break;
 8001f64:	e7b2      	b.n	8001ecc <UART_SetConfig+0x244>
        ret = HAL_ERROR;
 8001f66:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e7af      	b.n	8001ecc <UART_SetConfig+0x244>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f6c:	f7ff fb8e 	bl	800168c <HAL_RCC_GetPCLK1Freq>
 8001f70:	6862      	ldr	r2, [r4, #4]
 8001f72:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001f76:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f7a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f7c:	2000      	movs	r0, #0
        ret = HAL_ERROR;
        break;
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f7e:	f1a3 0110 	sub.w	r1, r3, #16
 8001f82:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8001f86:	4291      	cmp	r1, r2
 8001f88:	d830      	bhi.n	8001fec <UART_SetConfig+0x364>
    {
      huart->Instance->BRR = usartdiv;
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	60d3      	str	r3, [r2, #12]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001f92:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8001f94:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001f96:	f7ff fb89 	bl	80016ac <HAL_RCC_GetPCLK2Freq>
 8001f9a:	6862      	ldr	r2, [r4, #4]
 8001f9c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001fa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fa4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fa6:	2000      	movs	r0, #0
        break;
 8001fa8:	e7e9      	b.n	8001f7e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001faa:	6862      	ldr	r2, [r4, #4]
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <UART_SetConfig+0x36c>)
 8001fae:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8001fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fb6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fb8:	2000      	movs	r0, #0
        break;
 8001fba:	e7e0      	b.n	8001f7e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fbc:	f7ff fa5a 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8001fc0:	6862      	ldr	r2, [r4, #4]
 8001fc2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fca:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fcc:	2000      	movs	r0, #0
        break;
 8001fce:	e7d6      	b.n	8001f7e <UART_SetConfig+0x2f6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001fd0:	6862      	ldr	r2, [r4, #4]
 8001fd2:	0853      	lsrs	r3, r2, #1
 8001fd4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fdc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fde:	2000      	movs	r0, #0
        break;
 8001fe0:	e7cd      	b.n	8001f7e <UART_SetConfig+0x2f6>
        ret = HAL_ERROR;
 8001fe2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e7ca      	b.n	8001f7e <UART_SetConfig+0x2f6>
      ret = HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
 8001fea:	e7d0      	b.n	8001f8e <UART_SetConfig+0x306>
      ret = HAL_ERROR;
 8001fec:	2001      	movs	r0, #1
 8001fee:	e7ce      	b.n	8001f8e <UART_SetConfig+0x306>
 8001ff0:	01e84800 	.word	0x01e84800
 8001ff4:	00f42400 	.word	0x00f42400

08001ff8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ffa:	f013 0f01 	tst.w	r3, #1
 8001ffe:	d006      	beq.n	800200e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002000:	6802      	ldr	r2, [r0, #0]
 8002002:	6853      	ldr	r3, [r2, #4]
 8002004:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002008:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800200a:	430b      	orrs	r3, r1
 800200c:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800200e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002010:	f013 0f02 	tst.w	r3, #2
 8002014:	d006      	beq.n	8002024 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002016:	6802      	ldr	r2, [r0, #0]
 8002018:	6853      	ldr	r3, [r2, #4]
 800201a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800201e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002020:	430b      	orrs	r3, r1
 8002022:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002026:	f013 0f04 	tst.w	r3, #4
 800202a:	d006      	beq.n	800203a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800202c:	6802      	ldr	r2, [r0, #0]
 800202e:	6853      	ldr	r3, [r2, #4]
 8002030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002034:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002036:	430b      	orrs	r3, r1
 8002038:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800203a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800203c:	f013 0f08 	tst.w	r3, #8
 8002040:	d006      	beq.n	8002050 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002042:	6802      	ldr	r2, [r0, #0]
 8002044:	6853      	ldr	r3, [r2, #4]
 8002046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800204a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800204c:	430b      	orrs	r3, r1
 800204e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002050:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002052:	f013 0f10 	tst.w	r3, #16
 8002056:	d006      	beq.n	8002066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002058:	6802      	ldr	r2, [r0, #0]
 800205a:	6893      	ldr	r3, [r2, #8]
 800205c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002060:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002062:	430b      	orrs	r3, r1
 8002064:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002066:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002068:	f013 0f20 	tst.w	r3, #32
 800206c:	d006      	beq.n	800207c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800206e:	6802      	ldr	r2, [r0, #0]
 8002070:	6893      	ldr	r3, [r2, #8]
 8002072:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002076:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002078:	430b      	orrs	r3, r1
 800207a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800207c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800207e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002082:	d00a      	beq.n	800209a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002084:	6802      	ldr	r2, [r0, #0]
 8002086:	6853      	ldr	r3, [r2, #4]
 8002088:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800208c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800208e:	430b      	orrs	r3, r1
 8002090:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002092:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002098:	d00b      	beq.n	80020b2 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800209a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800209c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80020a0:	d006      	beq.n	80020b0 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020a2:	6802      	ldr	r2, [r0, #0]
 80020a4:	6853      	ldr	r3, [r2, #4]
 80020a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80020aa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6053      	str	r3, [r2, #4]
  }
}
 80020b0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020b2:	6802      	ldr	r2, [r0, #0]
 80020b4:	6853      	ldr	r3, [r2, #4]
 80020b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80020ba:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80020bc:	430b      	orrs	r3, r1
 80020be:	6053      	str	r3, [r2, #4]
 80020c0:	e7eb      	b.n	800209a <UART_AdvFeatureConfig+0xa2>

080020c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c6:	4605      	mov	r5, r0
 80020c8:	460f      	mov	r7, r1
 80020ca:	4616      	mov	r6, r2
 80020cc:	4698      	mov	r8, r3
 80020ce:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	ea37 0303 	bics.w	r3, r7, r3
 80020d8:	bf0c      	ite	eq
 80020da:	2301      	moveq	r3, #1
 80020dc:	2300      	movne	r3, #0
 80020de:	42b3      	cmp	r3, r6
 80020e0:	d11c      	bne.n	800211c <UART_WaitOnFlagUntilTimeout+0x5a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80020e6:	d0f3      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0xe>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e8:	f7fe fabe 	bl	8000668 <HAL_GetTick>
 80020ec:	eba0 0008 	sub.w	r0, r0, r8
 80020f0:	42a0      	cmp	r0, r4
 80020f2:	d801      	bhi.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x36>
 80020f4:	2c00      	cmp	r4, #0
 80020f6:	d1eb      	bne.n	80020d0 <UART_WaitOnFlagUntilTimeout+0xe>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020f8:	682a      	ldr	r2, [r5, #0]
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002100:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002102:	682a      	ldr	r2, [r5, #0]
 8002104:	6893      	ldr	r3, [r2, #8]
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6093      	str	r3, [r2, #8]

        huart->gState = HAL_UART_STATE_READY;
 800210c:	2320      	movs	r3, #32
 800210e:	676b      	str	r3, [r5, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002110:	67ab      	str	r3, [r5, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002112:	2300      	movs	r3, #0
 8002114:	f885 3070 	strb.w	r3, [r5, #112]	; 0x70

        return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
 800211a:	e000      	b.n	800211e <UART_WaitOnFlagUntilTimeout+0x5c>
      }
    }
  }
  return HAL_OK;
 800211c:	2000      	movs	r0, #0
}
 800211e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002122 <HAL_UART_Transmit>:
{
 8002122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800212a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800212c:	2b20      	cmp	r3, #32
 800212e:	d159      	bne.n	80021e4 <HAL_UART_Transmit+0xc2>
 8002130:	4604      	mov	r4, r0
 8002132:	460d      	mov	r5, r1
 8002134:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002136:	fab2 f382 	clz	r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2900      	cmp	r1, #0
 800213e:	bf08      	it	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d153      	bne.n	80021ee <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8002146:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800214a:	2b01      	cmp	r3, #1
 800214c:	d051      	beq.n	80021f2 <HAL_UART_Transmit+0xd0>
 800214e:	2301      	movs	r3, #1
 8002150:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002154:	2300      	movs	r3, #0
 8002156:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002158:	2321      	movs	r3, #33	; 0x21
 800215a:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800215c:	f7fe fa84 	bl	8000668 <HAL_GetTick>
 8002160:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8002162:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    huart->TxXferCount = Size;
 8002166:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800216a:	68a3      	ldr	r3, [r4, #8]
 800216c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002170:	d002      	beq.n	8002178 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002172:	f04f 0800 	mov.w	r8, #0
 8002176:	e010      	b.n	800219a <HAL_UART_Transmit+0x78>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002178:	6923      	ldr	r3, [r4, #16]
 800217a:	b30b      	cbz	r3, 80021c0 <HAL_UART_Transmit+0x9e>
      pdata16bits = NULL;
 800217c:	f04f 0800 	mov.w	r8, #0
 8002180:	e00b      	b.n	800219a <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002182:	f838 3b02 	ldrh.w	r3, [r8], #2
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800218c:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800218e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002192:	3b01      	subs	r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800219a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800219e:	b29b      	uxth	r3, r3
 80021a0:	b18b      	cbz	r3, 80021c6 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a2:	9600      	str	r6, [sp, #0]
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	4620      	mov	r0, r4
 80021ac:	f7ff ff89 	bl	80020c2 <UART_WaitOnFlagUntilTimeout>
 80021b0:	bb08      	cbnz	r0, 80021f6 <HAL_UART_Transmit+0xd4>
      if (pdata8bits == NULL)
 80021b2:	2d00      	cmp	r5, #0
 80021b4:	d0e5      	beq.n	8002182 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021b6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
 80021be:	e7e6      	b.n	800218e <HAL_UART_Transmit+0x6c>
      pdata16bits = (uint16_t *) pData;
 80021c0:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80021c2:	2500      	movs	r5, #0
 80021c4:	e7e9      	b.n	800219a <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021c6:	9600      	str	r6, [sp, #0]
 80021c8:	463b      	mov	r3, r7
 80021ca:	2200      	movs	r2, #0
 80021cc:	2140      	movs	r1, #64	; 0x40
 80021ce:	4620      	mov	r0, r4
 80021d0:	f7ff ff77 	bl	80020c2 <UART_WaitOnFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	b980      	cbnz	r0, 80021fa <HAL_UART_Transmit+0xd8>
    huart->gState = HAL_UART_STATE_READY;
 80021d8:	2220      	movs	r2, #32
 80021da:	6762      	str	r2, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 80021dc:	2200      	movs	r2, #0
 80021de:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    return HAL_OK;
 80021e2:	e000      	b.n	80021e6 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 80021e4:	2302      	movs	r3, #2
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	b002      	add	sp, #8
 80021ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e7f9      	b.n	80021e6 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80021f2:	2302      	movs	r3, #2
 80021f4:	e7f7      	b.n	80021e6 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e7f5      	b.n	80021e6 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e7f3      	b.n	80021e6 <HAL_UART_Transmit+0xc4>

080021fe <UART_CheckIdleState>:
{
 80021fe:	b510      	push	{r4, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002204:	2300      	movs	r3, #0
 8002206:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002208:	f7fe fa2e 	bl	8000668 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800220c:	6822      	ldr	r2, [r4, #0]
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	f012 0f08 	tst.w	r2, #8
 8002214:	d107      	bne.n	8002226 <UART_CheckIdleState+0x28>
  huart->gState = HAL_UART_STATE_READY;
 8002216:	2320      	movs	r3, #32
 8002218:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800221a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800221c:	2000      	movs	r0, #0
 800221e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8002222:	b002      	add	sp, #8
 8002224:	bd10      	pop	{r4, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	4603      	mov	r3, r0
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002234:	4620      	mov	r0, r4
 8002236:	f7ff ff44 	bl	80020c2 <UART_WaitOnFlagUntilTimeout>
 800223a:	2800      	cmp	r0, #0
 800223c:	d0eb      	beq.n	8002216 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 800223e:	2003      	movs	r0, #3
 8002240:	e7ef      	b.n	8002222 <UART_CheckIdleState+0x24>

08002242 <HAL_UART_Init>:
  if (huart == NULL)
 8002242:	b368      	cbz	r0, 80022a0 <HAL_UART_Init+0x5e>
{
 8002244:	b510      	push	{r4, lr}
 8002246:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002248:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800224a:	b303      	cbz	r3, 800228e <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 800224c:	2324      	movs	r3, #36	; 0x24
 800224e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002250:	6822      	ldr	r2, [r4, #0]
 8002252:	6813      	ldr	r3, [r2, #0]
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800225a:	4620      	mov	r0, r4
 800225c:	f7ff fd14 	bl	8001c88 <UART_SetConfig>
 8002260:	2801      	cmp	r0, #1
 8002262:	d013      	beq.n	800228c <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002266:	b9bb      	cbnz	r3, 8002298 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002268:	6822      	ldr	r2, [r4, #0]
 800226a:	6853      	ldr	r3, [r2, #4]
 800226c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002270:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	6893      	ldr	r3, [r2, #8]
 8002276:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800227a:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800227c:	6822      	ldr	r2, [r4, #0]
 800227e:	6813      	ldr	r3, [r2, #0]
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002286:	4620      	mov	r0, r4
 8002288:	f7ff ffb9 	bl	80021fe <UART_CheckIdleState>
}
 800228c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800228e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002292:	f000 fb13 	bl	80028bc <HAL_UART_MspInit>
 8002296:	e7d9      	b.n	800224c <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff fead 	bl	8001ff8 <UART_AdvFeatureConfig>
 800229e:	e7e3      	b.n	8002268 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80022a0:	2001      	movs	r0, #1
}
 80022a2:	4770      	bx	lr

080022a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a6:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	2400      	movs	r4, #0
 80022aa:	9405      	str	r4, [sp, #20]
 80022ac:	9406      	str	r4, [sp, #24]
 80022ae:	9407      	str	r4, [sp, #28]
 80022b0:	9408      	str	r4, [sp, #32]
 80022b2:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <MX_GPIO_Init+0xa0>)
 80022b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b8:	f042 0210 	orr.w	r2, r2, #16
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
 80022be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c0:	f002 0210 	and.w	r2, r2, #16
 80022c4:	9201      	str	r2, [sp, #4]
 80022c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ca:	f042 0202 	orr.w	r2, r2, #2
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
 80022d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d2:	f002 0202 	and.w	r2, r2, #2
 80022d6:	9202      	str	r2, [sp, #8]
 80022d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
 80022e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e4:	f002 0201 	and.w	r2, r2, #1
 80022e8:	9203      	str	r2, [sp, #12]
 80022ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ee:	f042 0208 	orr.w	r2, r2, #8
 80022f2:	631a      	str	r2, [r3, #48]	; 0x30
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	9304      	str	r3, [sp, #16]
 80022fc:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80022fe:	4f12      	ldr	r7, [pc, #72]	; (8002348 <MX_GPIO_Init+0xa4>)
 8002300:	4622      	mov	r2, r4
 8002302:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002306:	4638      	mov	r0, r7
 8002308:	f7fe fe86 	bl	8001018 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 800230c:	4d0f      	ldr	r5, [pc, #60]	; (800234c <MX_GPIO_Init+0xa8>)
 800230e:	4622      	mov	r2, r4
 8002310:	2108      	movs	r1, #8
 8002312:	4628      	mov	r0, r5
 8002314:	f7fe fe80 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002318:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800231c:	9305      	str	r3, [sp, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800231e:	2601      	movs	r6, #1
 8002320:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002322:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002326:	a905      	add	r1, sp, #20
 8002328:	4638      	mov	r0, r7
 800232a:	f7fe fd85 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800232e:	2308      	movs	r3, #8
 8002330:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002332:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002336:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002338:	a905      	add	r1, sp, #20
 800233a:	4628      	mov	r0, r5
 800233c:	f7fe fd7c 	bl	8000e38 <HAL_GPIO_Init>

}
 8002340:	b00b      	add	sp, #44	; 0x2c
 8002342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	40021000 	.word	0x40021000
 800234c:	40020c00 	.word	0x40020c00

08002350 <MX_USART1_UART_Init>:
{
 8002350:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002352:	4809      	ldr	r0, [pc, #36]	; (8002378 <MX_USART1_UART_Init+0x28>)
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <MX_USART1_UART_Init+0x2c>)
 8002356:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002358:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800235c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800235e:	2300      	movs	r3, #0
 8002360:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002362:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002364:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002366:	220c      	movs	r2, #12
 8002368:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800236c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002370:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002372:	f7ff ff66 	bl	8002242 <HAL_UART_Init>
}
 8002376:	bd08      	pop	{r3, pc}
 8002378:	20000210 	.word	0x20000210
 800237c:	40011000 	.word	0x40011000

08002380 <MX_CAN3_Init>:
{
 8002380:	b508      	push	{r3, lr}
  hcan3.Instance = CAN3;
 8002382:	480c      	ldr	r0, [pc, #48]	; (80023b4 <MX_CAN3_Init+0x34>)
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_CAN3_Init+0x38>)
 8002386:	6003      	str	r3, [r0, #0]
  hcan3.Init.Prescaler = 3;
 8002388:	2303      	movs	r3, #3
 800238a:	6043      	str	r3, [r0, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 800238c:	2300      	movs	r3, #0
 800238e:	6083      	str	r3, [r0, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002390:	60c3      	str	r3, [r0, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002392:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002396:	6102      	str	r2, [r0, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002398:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800239c:	6142      	str	r2, [r0, #20]
  hcan3.Init.TimeTriggeredMode = ENABLE;
 800239e:	2201      	movs	r2, #1
 80023a0:	7602      	strb	r2, [r0, #24]
  hcan3.Init.AutoBusOff = ENABLE;
 80023a2:	7642      	strb	r2, [r0, #25]
  hcan3.Init.AutoWakeUp = ENABLE;
 80023a4:	7682      	strb	r2, [r0, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80023a6:	76c3      	strb	r3, [r0, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80023a8:	7703      	strb	r3, [r0, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80023aa:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80023ac:	f7fe f976 	bl	800069c <HAL_CAN_Init>
}
 80023b0:	bd08      	pop	{r3, pc}
 80023b2:	bf00      	nop
 80023b4:	200001e8 	.word	0x200001e8
 80023b8:	40003400 	.word	0x40003400

080023bc <MX_CAN1_Init>:
{
 80023bc:	b508      	push	{r3, lr}
  hcan1.Instance = CAN1;
 80023be:	480c      	ldr	r0, [pc, #48]	; (80023f0 <MX_CAN1_Init+0x34>)
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <MX_CAN1_Init+0x38>)
 80023c2:	6003      	str	r3, [r0, #0]
  hcan1.Init.Prescaler = 3;
 80023c4:	2303      	movs	r3, #3
 80023c6:	6043      	str	r3, [r0, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	6083      	str	r3, [r0, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023cc:	60c3      	str	r3, [r0, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 80023ce:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80023d2:	6102      	str	r2, [r0, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80023d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023d8:	6142      	str	r2, [r0, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80023da:	7603      	strb	r3, [r0, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80023dc:	7643      	strb	r3, [r0, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80023de:	2201      	movs	r2, #1
 80023e0:	7682      	strb	r2, [r0, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80023e2:	76c3      	strb	r3, [r0, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80023e4:	7703      	strb	r3, [r0, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80023e6:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80023e8:	f7fe f958 	bl	800069c <HAL_CAN_Init>
}
 80023ec:	bd08      	pop	{r3, pc}
 80023ee:	bf00      	nop
 80023f0:	200002a8 	.word	0x200002a8
 80023f4:	40006400 	.word	0x40006400

080023f8 <MX_NVIC_Init>:
{
 80023f8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	4611      	mov	r1, r2
 80023fe:	2013      	movs	r0, #19
 8002400:	f7fe fcc4 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002404:	2013      	movs	r0, #19
 8002406:	f7fe fcf3 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	4611      	mov	r1, r2
 800240e:	2014      	movs	r0, #20
 8002410:	f7fe fcbc 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002414:	2014      	movs	r0, #20
 8002416:	f7fe fceb 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	4611      	mov	r1, r2
 800241e:	2015      	movs	r0, #21
 8002420:	f7fe fcb4 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002424:	2015      	movs	r0, #21
 8002426:	f7fe fce3 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	4611      	mov	r1, r2
 800242e:	2016      	movs	r0, #22
 8002430:	f7fe fcac 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002434:	2016      	movs	r0, #22
 8002436:	f7fe fcdb 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN3_TX_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	4611      	mov	r1, r2
 800243e:	2068      	movs	r0, #104	; 0x68
 8002440:	f7fe fca4 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_TX_IRQn);
 8002444:	2068      	movs	r0, #104	; 0x68
 8002446:	f7fe fcd3 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	4611      	mov	r1, r2
 800244e:	2069      	movs	r0, #105	; 0x69
 8002450:	f7fe fc9c 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8002454:	2069      	movs	r0, #105	; 0x69
 8002456:	f7fe fccb 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	4611      	mov	r1, r2
 800245e:	206a      	movs	r0, #106	; 0x6a
 8002460:	f7fe fc94 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 8002464:	206a      	movs	r0, #106	; 0x6a
 8002466:	f7fe fcc3 	bl	8000df0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(CAN3_SCE_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	4611      	mov	r1, r2
 800246e:	206b      	movs	r0, #107	; 0x6b
 8002470:	f7fe fc8c 	bl	8000d8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_SCE_IRQn);
 8002474:	206b      	movs	r0, #107	; 0x6b
 8002476:	f7fe fcbb 	bl	8000df0 <HAL_NVIC_EnableIRQ>
}
 800247a:	bd08      	pop	{r3, pc}

0800247c <SystemClock_Config>:
{
 800247c:	b530      	push	{r4, r5, lr}
 800247e:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002480:	2234      	movs	r2, #52	; 0x34
 8002482:	2100      	movs	r1, #0
 8002484:	a82b      	add	r0, sp, #172	; 0xac
 8002486:	f000 fb40 	bl	8002b0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800248a:	2400      	movs	r4, #0
 800248c:	9426      	str	r4, [sp, #152]	; 0x98
 800248e:	9427      	str	r4, [sp, #156]	; 0x9c
 8002490:	9428      	str	r4, [sp, #160]	; 0xa0
 8002492:	9429      	str	r4, [sp, #164]	; 0xa4
 8002494:	942a      	str	r4, [sp, #168]	; 0xa8
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002496:	2290      	movs	r2, #144	; 0x90
 8002498:	4621      	mov	r1, r4
 800249a:	a802      	add	r0, sp, #8
 800249c:	f000 fb35 	bl	8002b0a <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <SystemClock_Config+0xa0>)
 80024a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <SystemClock_Config+0xa4>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c8:	2502      	movs	r5, #2
 80024ca:	952b      	str	r5, [sp, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024cc:	2301      	movs	r3, #1
 80024ce:	932e      	str	r3, [sp, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d0:	2310      	movs	r3, #16
 80024d2:	932f      	str	r3, [sp, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d4:	9531      	str	r5, [sp, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d6:	9432      	str	r4, [sp, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024d8:	2308      	movs	r3, #8
 80024da:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 80024dc:	23d8      	movs	r3, #216	; 0xd8
 80024de:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024e0:	9535      	str	r5, [sp, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80024e2:	9536      	str	r5, [sp, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e4:	a82b      	add	r0, sp, #172	; 0xac
 80024e6:	f7fe fddb 	bl	80010a0 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80024ea:	f7fe fd9b 	bl	8001024 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ee:	230f      	movs	r3, #15
 80024f0:	9326      	str	r3, [sp, #152]	; 0x98
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f2:	9527      	str	r5, [sp, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024f4:	9428      	str	r4, [sp, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024fa:	9329      	str	r3, [sp, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002500:	932a      	str	r3, [sp, #168]	; 0xa8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002502:	2107      	movs	r1, #7
 8002504:	a826      	add	r0, sp, #152	; 0x98
 8002506:	f7ff f809 	bl	800151c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800250a:	2340      	movs	r3, #64	; 0x40
 800250c:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800250e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002510:	a802      	add	r0, sp, #8
 8002512:	f7ff f8db 	bl	80016cc <HAL_RCCEx_PeriphCLKConfig>
}
 8002516:	b039      	add	sp, #228	; 0xe4
 8002518:	bd30      	pop	{r4, r5, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	40007000 	.word	0x40007000

08002524 <HAL_CAN_RxFifo0FullCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 8002524:	b510      	push	{r4, lr}
 8002526:	b088      	sub	sp, #32
	CAN_RxHeaderTypeDef RxHeader;
	if(hcan == &hcan1){
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_CAN_RxFifo0FullCallback+0x50>)
 800252a:	4283      	cmp	r3, r0
 800252c:	d006      	beq.n	800253c <HAL_CAN_RxFifo0FullCallback+0x18>
		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, can1.dataTx);
			can1.id = RxHeader.StdId;
		}
	}else{
		if (HAL_CAN_GetRxFifoFillLevel(&hcan3, CAN_RX_FIFO0) != 0){
 800252e:	2100      	movs	r1, #0
 8002530:	4811      	ldr	r0, [pc, #68]	; (8002578 <HAL_CAN_RxFifo0FullCallback+0x54>)
 8002532:	f7fe fabb 	bl	8000aac <HAL_CAN_GetRxFifoFillLevel>
 8002536:	b990      	cbnz	r0, 800255e <HAL_CAN_RxFifo0FullCallback+0x3a>
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxHeader, can3.dataTx);
			can3.id = RxHeader.StdId;
		}
	}
}
 8002538:	b008      	add	sp, #32
 800253a:	bd10      	pop	{r4, pc}
		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0){
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fab4 	bl	8000aac <HAL_CAN_GetRxFifoFillLevel>
 8002544:	2800      	cmp	r0, #0
 8002546:	d0f7      	beq.n	8002538 <HAL_CAN_RxFifo0FullCallback+0x14>
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, can1.dataTx);
 8002548:	4c0c      	ldr	r4, [pc, #48]	; (800257c <HAL_CAN_RxFifo0FullCallback+0x58>)
 800254a:	4623      	mov	r3, r4
 800254c:	aa01      	add	r2, sp, #4
 800254e:	2100      	movs	r1, #0
 8002550:	4808      	ldr	r0, [pc, #32]	; (8002574 <HAL_CAN_RxFifo0FullCallback+0x50>)
 8002552:	f7fe fa11 	bl	8000978 <HAL_CAN_GetRxMessage>
			can1.id = RxHeader.StdId;
 8002556:	9b01      	ldr	r3, [sp, #4]
 8002558:	f844 3c0b 	str.w	r3, [r4, #-11]
 800255c:	e7ec      	b.n	8002538 <HAL_CAN_RxFifo0FullCallback+0x14>
			HAL_CAN_GetRxMessage(&hcan3, CAN_RX_FIFO0, &RxHeader, can3.dataTx);
 800255e:	4c08      	ldr	r4, [pc, #32]	; (8002580 <HAL_CAN_RxFifo0FullCallback+0x5c>)
 8002560:	4623      	mov	r3, r4
 8002562:	aa01      	add	r2, sp, #4
 8002564:	2100      	movs	r1, #0
 8002566:	4804      	ldr	r0, [pc, #16]	; (8002578 <HAL_CAN_RxFifo0FullCallback+0x54>)
 8002568:	f7fe fa06 	bl	8000978 <HAL_CAN_GetRxMessage>
			can3.id = RxHeader.StdId;
 800256c:	9b01      	ldr	r3, [sp, #4]
 800256e:	f844 3c0b 	str.w	r3, [r4, #-11]
}
 8002572:	e7e1      	b.n	8002538 <HAL_CAN_RxFifo0FullCallback+0x14>
 8002574:	200002a8 	.word	0x200002a8
 8002578:	200001e8 	.word	0x200001e8
 800257c:	2000029b 	.word	0x2000029b
 8002580:	200001db 	.word	0x200001db

08002584 <CAN_initialization>:
void CAN_initialization(void){
 8002584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002588:	b082      	sub	sp, #8
	//CAN filter initialization
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800258a:	4c31      	ldr	r4, [pc, #196]	; (8002650 <CAN_initialization+0xcc>)
 800258c:	2300      	movs	r3, #0
 800258e:	61a3      	str	r3, [r4, #24]
	canFilter.FilterIdLow = 0;
 8002590:	6063      	str	r3, [r4, #4]
	canFilter.FilterIdHigh = 0;
 8002592:	6023      	str	r3, [r4, #0]
	canFilter.FilterMaskIdHigh = 0;
 8002594:	60a3      	str	r3, [r4, #8]
	canFilter.FilterMaskIdLow = 0;
 8002596:	60e3      	str	r3, [r4, #12]
	canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002598:	6123      	str	r3, [r4, #16]
	canFilter.FilterBank = 0;
 800259a:	6163      	str	r3, [r4, #20]
	canFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 800259c:	61e3      	str	r3, [r4, #28]
	canFilter.FilterActivation = ENABLE;
 800259e:	2301      	movs	r3, #1
 80025a0:	6223      	str	r3, [r4, #32]

	//CAN filter configuration
	can1.configFilter_status = HAL_CAN_ConfigFilter(&hcan1, &canFilter);
 80025a2:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002674 <CAN_initialization+0xf0>
 80025a6:	4621      	mov	r1, r4
 80025a8:	4640      	mov	r0, r8
 80025aa:	f7fe f91d 	bl	80007e8 <HAL_CAN_ConfigFilter>
 80025ae:	4e29      	ldr	r6, [pc, #164]	; (8002654 <CAN_initialization+0xd0>)
 80025b0:	7230      	strb	r0, [r6, #8]
	can3.configFilter_status = HAL_CAN_ConfigFilter(&hcan3, &canFilter);
 80025b2:	4f29      	ldr	r7, [pc, #164]	; (8002658 <CAN_initialization+0xd4>)
 80025b4:	4621      	mov	r1, r4
 80025b6:	4638      	mov	r0, r7
 80025b8:	f7fe f916 	bl	80007e8 <HAL_CAN_ConfigFilter>
 80025bc:	4d27      	ldr	r5, [pc, #156]	; (800265c <CAN_initialization+0xd8>)
 80025be:	7228      	strb	r0, [r5, #8]

	//CAN interrupt activation
	can1.activateNotif_status = HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 80025c0:	2114      	movs	r1, #20
 80025c2:	4640      	mov	r0, r8
 80025c4:	f7fe fa85 	bl	8000ad2 <HAL_CAN_ActivateNotification>
 80025c8:	7270      	strb	r0, [r6, #9]
	can3.activateNotif_status = HAL_CAN_ActivateNotification(&hcan3, CAN3_RX0_IRQn);
 80025ca:	2169      	movs	r1, #105	; 0x69
 80025cc:	4638      	mov	r0, r7
 80025ce:	f7fe fa80 	bl	8000ad2 <HAL_CAN_ActivateNotification>
 80025d2:	7268      	strb	r0, [r5, #9]

	//CAN start
	can1.canStart_status = HAL_CAN_Start(&hcan1);
 80025d4:	4640      	mov	r0, r8
 80025d6:	f7fe f9a1 	bl	800091c <HAL_CAN_Start>
 80025da:	72b0      	strb	r0, [r6, #10]
	can3.canStart_status = HAL_CAN_Start(&hcan3);
 80025dc:	4638      	mov	r0, r7
 80025de:	f7fe f99d 	bl	800091c <HAL_CAN_Start>
 80025e2:	72a8      	strb	r0, [r5, #10]

	//Initialization report
	sprintf(huart_text,
 80025e4:	4c1e      	ldr	r4, [pc, #120]	; (8002660 <CAN_initialization+0xdc>)
 80025e6:	228d      	movs	r2, #141	; 0x8d
 80025e8:	491e      	ldr	r1, [pc, #120]	; (8002664 <CAN_initialization+0xe0>)
 80025ea:	4620      	mov	r0, r4
 80025ec:	f000 fa82 	bl	8002af4 <memcpy>
			"Next example explain the type of status:\r\n"
			"\t HAL_OK       = 0x00U\r\n"
			"\t HAL_ERROR    = 0x01U\r\n"
			"\t HAL_BUSY     = 0x02U\r\n"
			"\t HAL_TIMEOUT  = 0x03U\r\n\r\n");
	HAL_UART_Transmit(&huart1,(uint8_t*)huart_text, strlen(huart_text), 10);
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7fd fe25 	bl	8000240 <strlen>
 80025f6:	4f1c      	ldr	r7, [pc, #112]	; (8002668 <CAN_initialization+0xe4>)
 80025f8:	230a      	movs	r3, #10
 80025fa:	b282      	uxth	r2, r0
 80025fc:	4621      	mov	r1, r4
 80025fe:	4638      	mov	r0, r7
 8002600:	f7ff fd8f 	bl	8002122 <HAL_UART_Transmit>
	sprintf(huart_text,
			"CAN1:"
			"\t CAN filter configuration status    = %d\r\n"
			"\t CAN activation notification status = %d\r\n"
			"\t CAN start status                   = %d\r\n"
			,can1.configFilter_status, can1.activateNotif_status, can1.canStart_status);
 8002604:	7a32      	ldrb	r2, [r6, #8]
 8002606:	7a73      	ldrb	r3, [r6, #9]
 8002608:	7ab1      	ldrb	r1, [r6, #10]
	sprintf(huart_text,
 800260a:	9100      	str	r1, [sp, #0]
 800260c:	4917      	ldr	r1, [pc, #92]	; (800266c <CAN_initialization+0xe8>)
 800260e:	4620      	mov	r0, r4
 8002610:	f000 fa84 	bl	8002b1c <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)huart_text, strlen(huart_text), 10);
 8002614:	4620      	mov	r0, r4
 8002616:	f7fd fe13 	bl	8000240 <strlen>
 800261a:	230a      	movs	r3, #10
 800261c:	b282      	uxth	r2, r0
 800261e:	4621      	mov	r1, r4
 8002620:	4638      	mov	r0, r7
 8002622:	f7ff fd7e 	bl	8002122 <HAL_UART_Transmit>
	sprintf(huart_text,
			"CAN3:"
			"\t CAN filter configuration status    = %d\r\n"
			"\t CAN activation notification status = %d\r\n"
			"\t CAN start status                   = %d\r\n"
			,can3.configFilter_status, can3.activateNotif_status, can3.canStart_status);
 8002626:	7a2a      	ldrb	r2, [r5, #8]
 8002628:	7a6b      	ldrb	r3, [r5, #9]
 800262a:	7aa9      	ldrb	r1, [r5, #10]
	sprintf(huart_text,
 800262c:	9100      	str	r1, [sp, #0]
 800262e:	4910      	ldr	r1, [pc, #64]	; (8002670 <CAN_initialization+0xec>)
 8002630:	4620      	mov	r0, r4
 8002632:	f000 fa73 	bl	8002b1c <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)huart_text, strlen(huart_text), 10);
 8002636:	4620      	mov	r0, r4
 8002638:	f7fd fe02 	bl	8000240 <strlen>
 800263c:	230a      	movs	r3, #10
 800263e:	b282      	uxth	r2, r0
 8002640:	4621      	mov	r1, r4
 8002642:	4638      	mov	r0, r7
 8002644:	f7ff fd6d 	bl	8002122 <HAL_UART_Transmit>
}
 8002648:	b002      	add	sp, #8
 800264a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800264e:	bf00      	nop
 8002650:	200002d0 	.word	0x200002d0
 8002654:	20000290 	.word	0x20000290
 8002658:	200001e8 	.word	0x200001e8
 800265c:	200001d0 	.word	0x200001d0
 8002660:	200000a4 	.word	0x200000a4
 8002664:	08003344 	.word	0x08003344
 8002668:	20000210 	.word	0x20000210
 800266c:	080033d4 	.word	0x080033d4
 8002670:	0800345c 	.word	0x0800345c
 8002674:	200002a8 	.word	0x200002a8

08002678 <main>:
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
  HAL_Init();
 800267c:	f7fd ffdc 	bl	8000638 <HAL_Init>
  SystemClock_Config();
 8002680:	f7ff fefc 	bl	800247c <SystemClock_Config>
  MX_GPIO_Init();
 8002684:	f7ff fe0e 	bl	80022a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002688:	f7ff fe62 	bl	8002350 <MX_USART1_UART_Init>
  MX_CAN3_Init();
 800268c:	f7ff fe78 	bl	8002380 <MX_CAN3_Init>
  MX_CAN1_Init();
 8002690:	f7ff fe94 	bl	80023bc <MX_CAN1_Init>
  MX_NVIC_Init();
 8002694:	f7ff feb0 	bl	80023f8 <MX_NVIC_Init>
  CAN_initialization();
 8002698:	f7ff ff74 	bl	8002584 <CAN_initialization>
  HAL_Delay(5000);
 800269c:	f241 3088 	movw	r0, #5000	; 0x1388
 80026a0:	f7fd ffe8 	bl	8000674 <HAL_Delay>
	  sprintf(huart_text,"can1: %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",can1.id, can1.dataTx[0], can1.dataTx[1], can1.dataTx[2], can1.dataTx[3], can1.dataTx[4],can1.dataTx[5], can1.dataTx[6], can1.dataTx[7]);
 80026a4:	4a27      	ldr	r2, [pc, #156]	; (8002744 <main+0xcc>)
 80026a6:	7ad3      	ldrb	r3, [r2, #11]
 80026a8:	7b11      	ldrb	r1, [r2, #12]
 80026aa:	7b50      	ldrb	r0, [r2, #13]
 80026ac:	7b95      	ldrb	r5, [r2, #14]
 80026ae:	7bd6      	ldrb	r6, [r2, #15]
 80026b0:	7c17      	ldrb	r7, [r2, #16]
 80026b2:	f892 c011 	ldrb.w	ip, [r2, #17]
 80026b6:	f892 e012 	ldrb.w	lr, [r2, #18]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4c22      	ldr	r4, [pc, #136]	; (8002748 <main+0xd0>)
 80026be:	f8cd e018 	str.w	lr, [sp, #24]
 80026c2:	f8cd c014 	str.w	ip, [sp, #20]
 80026c6:	9704      	str	r7, [sp, #16]
 80026c8:	9603      	str	r6, [sp, #12]
 80026ca:	9502      	str	r5, [sp, #8]
 80026cc:	9001      	str	r0, [sp, #4]
 80026ce:	9100      	str	r1, [sp, #0]
 80026d0:	491e      	ldr	r1, [pc, #120]	; (800274c <main+0xd4>)
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 fa22 	bl	8002b1c <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t*)huart_text, strlen(huart_text), 10);
 80026d8:	4620      	mov	r0, r4
 80026da:	f7fd fdb1 	bl	8000240 <strlen>
 80026de:	4d1c      	ldr	r5, [pc, #112]	; (8002750 <main+0xd8>)
 80026e0:	230a      	movs	r3, #10
 80026e2:	b282      	uxth	r2, r0
 80026e4:	4621      	mov	r1, r4
 80026e6:	4628      	mov	r0, r5
 80026e8:	f7ff fd1b 	bl	8002122 <HAL_UART_Transmit>
	  HAL_Delay(50);
 80026ec:	2032      	movs	r0, #50	; 0x32
 80026ee:	f7fd ffc1 	bl	8000674 <HAL_Delay>
	  sprintf(huart_text,"can3: %d, %d, %d, %d, %d, %d, %d, %d, %d\r\n",can3.id, can3.dataTx[0], can3.dataTx[1], can3.dataTx[2], can3.dataTx[3], can3.dataTx[4],can3.dataTx[5], can3.dataTx[6], can3.dataTx[7]);
 80026f2:	4a18      	ldr	r2, [pc, #96]	; (8002754 <main+0xdc>)
 80026f4:	7ad3      	ldrb	r3, [r2, #11]
 80026f6:	7b11      	ldrb	r1, [r2, #12]
 80026f8:	7b50      	ldrb	r0, [r2, #13]
 80026fa:	7b96      	ldrb	r6, [r2, #14]
 80026fc:	7bd7      	ldrb	r7, [r2, #15]
 80026fe:	f892 c010 	ldrb.w	ip, [r2, #16]
 8002702:	f892 e011 	ldrb.w	lr, [r2, #17]
 8002706:	f892 8012 	ldrb.w	r8, [r2, #18]
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002710:	f8cd e014 	str.w	lr, [sp, #20]
 8002714:	f8cd c010 	str.w	ip, [sp, #16]
 8002718:	9703      	str	r7, [sp, #12]
 800271a:	9602      	str	r6, [sp, #8]
 800271c:	9001      	str	r0, [sp, #4]
 800271e:	9100      	str	r1, [sp, #0]
 8002720:	490d      	ldr	r1, [pc, #52]	; (8002758 <main+0xe0>)
 8002722:	4620      	mov	r0, r4
 8002724:	f000 f9fa 	bl	8002b1c <siprintf>
	  HAL_UART_Transmit(&huart1,(uint8_t*)huart_text, strlen(huart_text), 10);
 8002728:	4620      	mov	r0, r4
 800272a:	f7fd fd89 	bl	8000240 <strlen>
 800272e:	230a      	movs	r3, #10
 8002730:	b282      	uxth	r2, r0
 8002732:	4621      	mov	r1, r4
 8002734:	4628      	mov	r0, r5
 8002736:	f7ff fcf4 	bl	8002122 <HAL_UART_Transmit>
	  HAL_Delay(50);
 800273a:	2032      	movs	r0, #50	; 0x32
 800273c:	f7fd ff9a 	bl	8000674 <HAL_Delay>
 8002740:	e7b0      	b.n	80026a4 <main+0x2c>
 8002742:	bf00      	nop
 8002744:	20000290 	.word	0x20000290
 8002748:	200000a4 	.word	0x200000a4
 800274c:	080034e4 	.word	0x080034e4
 8002750:	20000210 	.word	0x20000210
 8002754:	200001d0 	.word	0x200001d0
 8002758:	08003510 	.word	0x08003510

0800275c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800275c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800275e:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <HAL_MspInit+0x2c>)
 8002760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002762:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
 8002768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800276a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800276e:	9200      	str	r2, [sp, #0]
 8002770:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002778:	645a      	str	r2, [r3, #68]	; 0x44
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002784:	b002      	add	sp, #8
 8002786:	4770      	bx	lr
 8002788:	40023800 	.word	0x40023800

0800278c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	2300      	movs	r3, #0
 8002792:	9307      	str	r3, [sp, #28]
 8002794:	9308      	str	r3, [sp, #32]
 8002796:	9309      	str	r3, [sp, #36]	; 0x24
 8002798:	930a      	str	r3, [sp, #40]	; 0x28
 800279a:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hcan->Instance==CAN1)
 800279c:	6803      	ldr	r3, [r0, #0]
 800279e:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_CAN_MspInit+0x118>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_CAN_MspInit+0x22>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
  else if(hcan->Instance==CAN3)
 80027a4:	4a40      	ldr	r2, [pc, #256]	; (80028a8 <HAL_CAN_MspInit+0x11c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d02c      	beq.n	8002804 <HAL_CAN_MspInit+0x78>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 80027aa:	b00c      	add	sp, #48	; 0x30
 80027ac:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_CAN1_CLK_ENABLED++;
 80027ae:	4a3f      	ldr	r2, [pc, #252]	; (80028ac <HAL_CAN_MspInit+0x120>)
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d019      	beq.n	80027ee <HAL_CAN_MspInit+0x62>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	4b3d      	ldr	r3, [pc, #244]	; (80028b0 <HAL_CAN_MspInit+0x124>)
 80027bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027d2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d8:	2301      	movs	r3, #1
 80027da:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027dc:	2303      	movs	r3, #3
 80027de:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80027e0:	2309      	movs	r3, #9
 80027e2:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e4:	a907      	add	r1, sp, #28
 80027e6:	4833      	ldr	r0, [pc, #204]	; (80028b4 <HAL_CAN_MspInit+0x128>)
 80027e8:	f7fe fb26 	bl	8000e38 <HAL_GPIO_Init>
 80027ec:	e7dd      	b.n	80027aa <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80027ee:	4b30      	ldr	r3, [pc, #192]	; (80028b0 <HAL_CAN_MspInit+0x124>)
 80027f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	9b00      	ldr	r3, [sp, #0]
 8002802:	e7da      	b.n	80027ba <HAL_CAN_MspInit+0x2e>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8002804:	4b2a      	ldr	r3, [pc, #168]	; (80028b0 <HAL_CAN_MspInit+0x124>)
 8002806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
 800280e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002810:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002814:	9202      	str	r2, [sp, #8]
 8002816:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800281e:	641a      	str	r2, [r3, #64]	; 0x40
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002826:	9303      	str	r3, [sp, #12]
 8002828:	9b03      	ldr	r3, [sp, #12]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800282a:	4a20      	ldr	r2, [pc, #128]	; (80028ac <HAL_CAN_MspInit+0x120>)
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002832:	2b01      	cmp	r3, #1
 8002834:	d02b      	beq.n	800288e <HAL_CAN_MspInit+0x102>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_CAN_MspInit+0x124>)
 8002838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
 8002840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002842:	f002 0201 	and.w	r2, r2, #1
 8002846:	9205      	str	r2, [sp, #20]
 8002848:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800284c:	f042 0202 	orr.w	r2, r2, #2
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	9306      	str	r3, [sp, #24]
 800285a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800285c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002860:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002862:	2602      	movs	r6, #2
 8002864:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2503      	movs	r5, #3
 8002868:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800286a:	240b      	movs	r4, #11
 800286c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800286e:	a907      	add	r1, sp, #28
 8002870:	4810      	ldr	r0, [pc, #64]	; (80028b4 <HAL_CAN_MspInit+0x128>)
 8002872:	f7fe fae1 	bl	8000e38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002876:	2310      	movs	r3, #16
 8002878:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8002882:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002884:	a907      	add	r1, sp, #28
 8002886:	480c      	ldr	r0, [pc, #48]	; (80028b8 <HAL_CAN_MspInit+0x12c>)
 8002888:	f7fe fad6 	bl	8000e38 <HAL_GPIO_Init>
}
 800288c:	e78d      	b.n	80027aa <HAL_CAN_MspInit+0x1e>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <HAL_CAN_MspInit+0x124>)
 8002890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002892:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289e:	9304      	str	r3, [sp, #16]
 80028a0:	9b04      	ldr	r3, [sp, #16]
 80028a2:	e7c8      	b.n	8002836 <HAL_CAN_MspInit+0xaa>
 80028a4:	40006400 	.word	0x40006400
 80028a8:	40003400 	.word	0x40003400
 80028ac:	2000008c 	.word	0x2000008c
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40020000 	.word	0x40020000
 80028b8:	40020400 	.word	0x40020400

080028bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028bc:	b500      	push	{lr}
 80028be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	2300      	movs	r3, #0
 80028c2:	9303      	str	r3, [sp, #12]
 80028c4:	9304      	str	r3, [sp, #16]
 80028c6:	9305      	str	r3, [sp, #20]
 80028c8:	9306      	str	r3, [sp, #24]
 80028ca:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80028cc:	6802      	ldr	r2, [r0, #0]
 80028ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028d2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d002      	beq.n	80028e0 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028da:	b009      	add	sp, #36	; 0x24
 80028dc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80028e0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80028e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028e6:	f042 0210 	orr.w	r2, r2, #16
 80028ea:	645a      	str	r2, [r3, #68]	; 0x44
 80028ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ee:	f002 0210 	and.w	r2, r2, #16
 80028f2:	9201      	str	r2, [sp, #4]
 80028f4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f8:	f042 0202 	orr.w	r2, r2, #2
 80028fc:	631a      	str	r2, [r3, #48]	; 0x30
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	9302      	str	r3, [sp, #8]
 8002906:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002908:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800290c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002916:	2304      	movs	r3, #4
 8002918:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	a903      	add	r1, sp, #12
 800291c:	4801      	ldr	r0, [pc, #4]	; (8002924 <HAL_UART_MspInit+0x68>)
 800291e:	f7fe fa8b 	bl	8000e38 <HAL_GPIO_Init>
}
 8002922:	e7da      	b.n	80028da <HAL_UART_MspInit+0x1e>
 8002924:	40020400 	.word	0x40020400

08002928 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002928:	4770      	bx	lr

0800292a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800292a:	e7fe      	b.n	800292a <HardFault_Handler>

0800292c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800292c:	e7fe      	b.n	800292c <MemManage_Handler>

0800292e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800292e:	e7fe      	b.n	800292e <BusFault_Handler>

08002930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002930:	e7fe      	b.n	8002930 <UsageFault_Handler>

08002932 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	4770      	bx	lr

08002934 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	4770      	bx	lr

08002936 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293a:	f7fd fe89 	bl	8000650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293e:	bd08      	pop	{r3, pc}

08002940 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002942:	4802      	ldr	r0, [pc, #8]	; (800294c <CAN1_TX_IRQHandler+0xc>)
 8002944:	f7fe f8e3 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002948:	bd08      	pop	{r3, pc}
 800294a:	bf00      	nop
 800294c:	200002a8 	.word	0x200002a8

08002950 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002952:	4802      	ldr	r0, [pc, #8]	; (800295c <CAN1_RX0_IRQHandler+0xc>)
 8002954:	f7fe f8db 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002958:	bd08      	pop	{r3, pc}
 800295a:	bf00      	nop
 800295c:	200002a8 	.word	0x200002a8

08002960 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002962:	4802      	ldr	r0, [pc, #8]	; (800296c <CAN1_RX1_IRQHandler+0xc>)
 8002964:	f7fe f8d3 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002968:	bd08      	pop	{r3, pc}
 800296a:	bf00      	nop
 800296c:	200002a8 	.word	0x200002a8

08002970 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002970:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002972:	4802      	ldr	r0, [pc, #8]	; (800297c <CAN1_SCE_IRQHandler+0xc>)
 8002974:	f7fe f8cb 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002978:	bd08      	pop	{r3, pc}
 800297a:	bf00      	nop
 800297c:	200002a8 	.word	0x200002a8

08002980 <CAN3_TX_IRQHandler>:

/**
  * @brief This function handles CAN3 TX interrupt.
  */
void CAN3_TX_IRQHandler(void)
{
 8002980:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN3_TX_IRQn 0 */

  /* USER CODE END CAN3_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002982:	4802      	ldr	r0, [pc, #8]	; (800298c <CAN3_TX_IRQHandler+0xc>)
 8002984:	f7fe f8c3 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_TX_IRQn 1 */

  /* USER CODE END CAN3_TX_IRQn 1 */
}
 8002988:	bd08      	pop	{r3, pc}
 800298a:	bf00      	nop
 800298c:	200001e8 	.word	0x200001e8

08002990 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8002990:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002992:	4802      	ldr	r0, [pc, #8]	; (800299c <CAN3_RX0_IRQHandler+0xc>)
 8002994:	f7fe f8bb 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002998:	bd08      	pop	{r3, pc}
 800299a:	bf00      	nop
 800299c:	200001e8 	.word	0x200001e8

080029a0 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80029a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80029a2:	4802      	ldr	r0, [pc, #8]	; (80029ac <CAN3_RX1_IRQHandler+0xc>)
 80029a4:	f7fe f8b3 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80029a8:	bd08      	pop	{r3, pc}
 80029aa:	bf00      	nop
 80029ac:	200001e8 	.word	0x200001e8

080029b0 <CAN3_SCE_IRQHandler>:

/**
  * @brief This function handles CAN3 SCE interrupt.
  */
void CAN3_SCE_IRQHandler(void)
{
 80029b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN CAN3_SCE_IRQn 0 */

  /* USER CODE END CAN3_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80029b2:	4802      	ldr	r0, [pc, #8]	; (80029bc <CAN3_SCE_IRQHandler+0xc>)
 80029b4:	f7fe f8ab 	bl	8000b0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_SCE_IRQn 1 */

  /* USER CODE END CAN3_SCE_IRQn 1 */
}
 80029b8:	bd08      	pop	{r3, pc}
 80029ba:	bf00      	nop
 80029bc:	200001e8 	.word	0x200001e8

080029c0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80029c0:	b508      	push	{r3, lr}
 80029c2:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029c4:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <_sbrk+0x34>)
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	b142      	cbz	r2, 80029dc <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <_sbrk+0x34>)
 80029cc:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80029ce:	4403      	add	r3, r0
 80029d0:	466a      	mov	r2, sp
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d806      	bhi.n	80029e4 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <_sbrk+0x34>)
 80029d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80029da:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <_sbrk+0x34>)
 80029de:	4906      	ldr	r1, [pc, #24]	; (80029f8 <_sbrk+0x38>)
 80029e0:	6011      	str	r1, [r2, #0]
 80029e2:	e7f2      	b.n	80029ca <_sbrk+0xa>
		errno = ENOMEM;
 80029e4:	f000 f85c 	bl	8002aa0 <__errno>
 80029e8:	230c      	movs	r3, #12
 80029ea:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029f0:	e7f3      	b.n	80029da <_sbrk+0x1a>
 80029f2:	bf00      	nop
 80029f4:	20000090 	.word	0x20000090
 80029f8:	20000300 	.word	0x20000300

080029fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029fc:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029fe:	4a0f      	ldr	r2, [pc, #60]	; (8002a3c <SystemInit+0x40>)
 8002a00:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <SystemInit+0x44>)
 8002a0e:	6819      	ldr	r1, [r3, #0]
 8002a10:	f041 0101 	orr.w	r1, r1, #1
 8002a14:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a16:	2000      	movs	r0, #0
 8002a18:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a1a:	681c      	ldr	r4, [r3, #0]
 8002a1c:	4909      	ldr	r1, [pc, #36]	; (8002a44 <SystemInit+0x48>)
 8002a1e:	4021      	ands	r1, r4
 8002a20:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a22:	4909      	ldr	r1, [pc, #36]	; (8002a48 <SystemInit+0x4c>)
 8002a24:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a26:	6819      	ldr	r1, [r3, #0]
 8002a28:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002a2c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a2e:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a34:	6093      	str	r3, [r2, #8]
#endif
}
 8002a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	40023800 	.word	0x40023800
 8002a44:	fef6ffff 	.word	0xfef6ffff
 8002a48:	24003010 	.word	0x24003010

08002a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a52:	e003      	b.n	8002a5c <LoopCopyDataInit>

08002a54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a54:	4b0c      	ldr	r3, [pc, #48]	; (8002a88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a5a:	3104      	adds	r1, #4

08002a5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a5c:	480b      	ldr	r0, [pc, #44]	; (8002a8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a64:	d3f6      	bcc.n	8002a54 <CopyDataInit>
  ldr  r2, =_sbss
 8002a66:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a68:	e002      	b.n	8002a70 <LoopFillZerobss>

08002a6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a6c:	f842 3b04 	str.w	r3, [r2], #4

08002a70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a74:	d3f9      	bcc.n	8002a6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a76:	f7ff ffc1 	bl	80029fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a7a:	f000 f817 	bl	8002aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a7e:	f7ff fdfb 	bl	8002678 <main>
  bx  lr    
 8002a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a84:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002a88:	08003580 	.word	0x08003580
  ldr  r0, =_sdata
 8002a8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a90:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002a94:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002a98:	200002fc 	.word	0x200002fc

08002a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a9c:	e7fe      	b.n	8002a9c <ADC_IRQHandler>
	...

08002aa0 <__errno>:
 8002aa0:	4b01      	ldr	r3, [pc, #4]	; (8002aa8 <__errno+0x8>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	2000000c 	.word	0x2000000c

08002aac <__libc_init_array>:
 8002aac:	b570      	push	{r4, r5, r6, lr}
 8002aae:	4e0d      	ldr	r6, [pc, #52]	; (8002ae4 <__libc_init_array+0x38>)
 8002ab0:	4c0d      	ldr	r4, [pc, #52]	; (8002ae8 <__libc_init_array+0x3c>)
 8002ab2:	1ba4      	subs	r4, r4, r6
 8002ab4:	10a4      	asrs	r4, r4, #2
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	42a5      	cmp	r5, r4
 8002aba:	d109      	bne.n	8002ad0 <__libc_init_array+0x24>
 8002abc:	4e0b      	ldr	r6, [pc, #44]	; (8002aec <__libc_init_array+0x40>)
 8002abe:	4c0c      	ldr	r4, [pc, #48]	; (8002af0 <__libc_init_array+0x44>)
 8002ac0:	f000 fc28 	bl	8003314 <_init>
 8002ac4:	1ba4      	subs	r4, r4, r6
 8002ac6:	10a4      	asrs	r4, r4, #2
 8002ac8:	2500      	movs	r5, #0
 8002aca:	42a5      	cmp	r5, r4
 8002acc:	d105      	bne.n	8002ada <__libc_init_array+0x2e>
 8002ace:	bd70      	pop	{r4, r5, r6, pc}
 8002ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad4:	4798      	blx	r3
 8002ad6:	3501      	adds	r5, #1
 8002ad8:	e7ee      	b.n	8002ab8 <__libc_init_array+0xc>
 8002ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ade:	4798      	blx	r3
 8002ae0:	3501      	adds	r5, #1
 8002ae2:	e7f2      	b.n	8002aca <__libc_init_array+0x1e>
 8002ae4:	08003578 	.word	0x08003578
 8002ae8:	08003578 	.word	0x08003578
 8002aec:	08003578 	.word	0x08003578
 8002af0:	0800357c 	.word	0x0800357c

08002af4 <memcpy>:
 8002af4:	b510      	push	{r4, lr}
 8002af6:	1e43      	subs	r3, r0, #1
 8002af8:	440a      	add	r2, r1
 8002afa:	4291      	cmp	r1, r2
 8002afc:	d100      	bne.n	8002b00 <memcpy+0xc>
 8002afe:	bd10      	pop	{r4, pc}
 8002b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b08:	e7f7      	b.n	8002afa <memcpy+0x6>

08002b0a <memset>:
 8002b0a:	4402      	add	r2, r0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d100      	bne.n	8002b14 <memset+0xa>
 8002b12:	4770      	bx	lr
 8002b14:	f803 1b01 	strb.w	r1, [r3], #1
 8002b18:	e7f9      	b.n	8002b0e <memset+0x4>
	...

08002b1c <siprintf>:
 8002b1c:	b40e      	push	{r1, r2, r3}
 8002b1e:	b500      	push	{lr}
 8002b20:	b09c      	sub	sp, #112	; 0x70
 8002b22:	ab1d      	add	r3, sp, #116	; 0x74
 8002b24:	9002      	str	r0, [sp, #8]
 8002b26:	9006      	str	r0, [sp, #24]
 8002b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b2c:	4809      	ldr	r0, [pc, #36]	; (8002b54 <siprintf+0x38>)
 8002b2e:	9107      	str	r1, [sp, #28]
 8002b30:	9104      	str	r1, [sp, #16]
 8002b32:	4909      	ldr	r1, [pc, #36]	; (8002b58 <siprintf+0x3c>)
 8002b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b38:	9105      	str	r1, [sp, #20]
 8002b3a:	6800      	ldr	r0, [r0, #0]
 8002b3c:	9301      	str	r3, [sp, #4]
 8002b3e:	a902      	add	r1, sp, #8
 8002b40:	f000 f866 	bl	8002c10 <_svfiprintf_r>
 8002b44:	9b02      	ldr	r3, [sp, #8]
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	b01c      	add	sp, #112	; 0x70
 8002b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b50:	b003      	add	sp, #12
 8002b52:	4770      	bx	lr
 8002b54:	2000000c 	.word	0x2000000c
 8002b58:	ffff0208 	.word	0xffff0208

08002b5c <__ssputs_r>:
 8002b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b60:	688e      	ldr	r6, [r1, #8]
 8002b62:	429e      	cmp	r6, r3
 8002b64:	4682      	mov	sl, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	4690      	mov	r8, r2
 8002b6a:	4699      	mov	r9, r3
 8002b6c:	d837      	bhi.n	8002bde <__ssputs_r+0x82>
 8002b6e:	898a      	ldrh	r2, [r1, #12]
 8002b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b74:	d031      	beq.n	8002bda <__ssputs_r+0x7e>
 8002b76:	6825      	ldr	r5, [r4, #0]
 8002b78:	6909      	ldr	r1, [r1, #16]
 8002b7a:	1a6f      	subs	r7, r5, r1
 8002b7c:	6965      	ldr	r5, [r4, #20]
 8002b7e:	2302      	movs	r3, #2
 8002b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b84:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b88:	f109 0301 	add.w	r3, r9, #1
 8002b8c:	443b      	add	r3, r7
 8002b8e:	429d      	cmp	r5, r3
 8002b90:	bf38      	it	cc
 8002b92:	461d      	movcc	r5, r3
 8002b94:	0553      	lsls	r3, r2, #21
 8002b96:	d530      	bpl.n	8002bfa <__ssputs_r+0x9e>
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f000 fb21 	bl	80031e0 <_malloc_r>
 8002b9e:	4606      	mov	r6, r0
 8002ba0:	b950      	cbnz	r0, 8002bb8 <__ssputs_r+0x5c>
 8002ba2:	230c      	movs	r3, #12
 8002ba4:	f8ca 3000 	str.w	r3, [sl]
 8002ba8:	89a3      	ldrh	r3, [r4, #12]
 8002baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bae:	81a3      	strh	r3, [r4, #12]
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bb8:	463a      	mov	r2, r7
 8002bba:	6921      	ldr	r1, [r4, #16]
 8002bbc:	f7ff ff9a 	bl	8002af4 <memcpy>
 8002bc0:	89a3      	ldrh	r3, [r4, #12]
 8002bc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bca:	81a3      	strh	r3, [r4, #12]
 8002bcc:	6126      	str	r6, [r4, #16]
 8002bce:	6165      	str	r5, [r4, #20]
 8002bd0:	443e      	add	r6, r7
 8002bd2:	1bed      	subs	r5, r5, r7
 8002bd4:	6026      	str	r6, [r4, #0]
 8002bd6:	60a5      	str	r5, [r4, #8]
 8002bd8:	464e      	mov	r6, r9
 8002bda:	454e      	cmp	r6, r9
 8002bdc:	d900      	bls.n	8002be0 <__ssputs_r+0x84>
 8002bde:	464e      	mov	r6, r9
 8002be0:	4632      	mov	r2, r6
 8002be2:	4641      	mov	r1, r8
 8002be4:	6820      	ldr	r0, [r4, #0]
 8002be6:	f000 fa93 	bl	8003110 <memmove>
 8002bea:	68a3      	ldr	r3, [r4, #8]
 8002bec:	1b9b      	subs	r3, r3, r6
 8002bee:	60a3      	str	r3, [r4, #8]
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	441e      	add	r6, r3
 8002bf4:	6026      	str	r6, [r4, #0]
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	e7dc      	b.n	8002bb4 <__ssputs_r+0x58>
 8002bfa:	462a      	mov	r2, r5
 8002bfc:	f000 fb4a 	bl	8003294 <_realloc_r>
 8002c00:	4606      	mov	r6, r0
 8002c02:	2800      	cmp	r0, #0
 8002c04:	d1e2      	bne.n	8002bcc <__ssputs_r+0x70>
 8002c06:	6921      	ldr	r1, [r4, #16]
 8002c08:	4650      	mov	r0, sl
 8002c0a:	f000 fa9b 	bl	8003144 <_free_r>
 8002c0e:	e7c8      	b.n	8002ba2 <__ssputs_r+0x46>

08002c10 <_svfiprintf_r>:
 8002c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c14:	461d      	mov	r5, r3
 8002c16:	898b      	ldrh	r3, [r1, #12]
 8002c18:	061f      	lsls	r7, r3, #24
 8002c1a:	b09d      	sub	sp, #116	; 0x74
 8002c1c:	4680      	mov	r8, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	4616      	mov	r6, r2
 8002c22:	d50f      	bpl.n	8002c44 <_svfiprintf_r+0x34>
 8002c24:	690b      	ldr	r3, [r1, #16]
 8002c26:	b96b      	cbnz	r3, 8002c44 <_svfiprintf_r+0x34>
 8002c28:	2140      	movs	r1, #64	; 0x40
 8002c2a:	f000 fad9 	bl	80031e0 <_malloc_r>
 8002c2e:	6020      	str	r0, [r4, #0]
 8002c30:	6120      	str	r0, [r4, #16]
 8002c32:	b928      	cbnz	r0, 8002c40 <_svfiprintf_r+0x30>
 8002c34:	230c      	movs	r3, #12
 8002c36:	f8c8 3000 	str.w	r3, [r8]
 8002c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c3e:	e0c8      	b.n	8002dd2 <_svfiprintf_r+0x1c2>
 8002c40:	2340      	movs	r3, #64	; 0x40
 8002c42:	6163      	str	r3, [r4, #20]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9309      	str	r3, [sp, #36]	; 0x24
 8002c48:	2320      	movs	r3, #32
 8002c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c4e:	2330      	movs	r3, #48	; 0x30
 8002c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c54:	9503      	str	r5, [sp, #12]
 8002c56:	f04f 0b01 	mov.w	fp, #1
 8002c5a:	4637      	mov	r7, r6
 8002c5c:	463d      	mov	r5, r7
 8002c5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c62:	b10b      	cbz	r3, 8002c68 <_svfiprintf_r+0x58>
 8002c64:	2b25      	cmp	r3, #37	; 0x25
 8002c66:	d13e      	bne.n	8002ce6 <_svfiprintf_r+0xd6>
 8002c68:	ebb7 0a06 	subs.w	sl, r7, r6
 8002c6c:	d00b      	beq.n	8002c86 <_svfiprintf_r+0x76>
 8002c6e:	4653      	mov	r3, sl
 8002c70:	4632      	mov	r2, r6
 8002c72:	4621      	mov	r1, r4
 8002c74:	4640      	mov	r0, r8
 8002c76:	f7ff ff71 	bl	8002b5c <__ssputs_r>
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	f000 80a4 	beq.w	8002dc8 <_svfiprintf_r+0x1b8>
 8002c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c82:	4453      	add	r3, sl
 8002c84:	9309      	str	r3, [sp, #36]	; 0x24
 8002c86:	783b      	ldrb	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 809d 	beq.w	8002dc8 <_svfiprintf_r+0x1b8>
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c98:	9304      	str	r3, [sp, #16]
 8002c9a:	9307      	str	r3, [sp, #28]
 8002c9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ca2:	462f      	mov	r7, r5
 8002ca4:	2205      	movs	r2, #5
 8002ca6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002caa:	4850      	ldr	r0, [pc, #320]	; (8002dec <_svfiprintf_r+0x1dc>)
 8002cac:	f7fd fad0 	bl	8000250 <memchr>
 8002cb0:	9b04      	ldr	r3, [sp, #16]
 8002cb2:	b9d0      	cbnz	r0, 8002cea <_svfiprintf_r+0xda>
 8002cb4:	06d9      	lsls	r1, r3, #27
 8002cb6:	bf44      	itt	mi
 8002cb8:	2220      	movmi	r2, #32
 8002cba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cbe:	071a      	lsls	r2, r3, #28
 8002cc0:	bf44      	itt	mi
 8002cc2:	222b      	movmi	r2, #43	; 0x2b
 8002cc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cc8:	782a      	ldrb	r2, [r5, #0]
 8002cca:	2a2a      	cmp	r2, #42	; 0x2a
 8002ccc:	d015      	beq.n	8002cfa <_svfiprintf_r+0xea>
 8002cce:	9a07      	ldr	r2, [sp, #28]
 8002cd0:	462f      	mov	r7, r5
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	250a      	movs	r5, #10
 8002cd6:	4639      	mov	r1, r7
 8002cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cdc:	3b30      	subs	r3, #48	; 0x30
 8002cde:	2b09      	cmp	r3, #9
 8002ce0:	d94d      	bls.n	8002d7e <_svfiprintf_r+0x16e>
 8002ce2:	b1b8      	cbz	r0, 8002d14 <_svfiprintf_r+0x104>
 8002ce4:	e00f      	b.n	8002d06 <_svfiprintf_r+0xf6>
 8002ce6:	462f      	mov	r7, r5
 8002ce8:	e7b8      	b.n	8002c5c <_svfiprintf_r+0x4c>
 8002cea:	4a40      	ldr	r2, [pc, #256]	; (8002dec <_svfiprintf_r+0x1dc>)
 8002cec:	1a80      	subs	r0, r0, r2
 8002cee:	fa0b f000 	lsl.w	r0, fp, r0
 8002cf2:	4318      	orrs	r0, r3
 8002cf4:	9004      	str	r0, [sp, #16]
 8002cf6:	463d      	mov	r5, r7
 8002cf8:	e7d3      	b.n	8002ca2 <_svfiprintf_r+0x92>
 8002cfa:	9a03      	ldr	r2, [sp, #12]
 8002cfc:	1d11      	adds	r1, r2, #4
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	9103      	str	r1, [sp, #12]
 8002d02:	2a00      	cmp	r2, #0
 8002d04:	db01      	blt.n	8002d0a <_svfiprintf_r+0xfa>
 8002d06:	9207      	str	r2, [sp, #28]
 8002d08:	e004      	b.n	8002d14 <_svfiprintf_r+0x104>
 8002d0a:	4252      	negs	r2, r2
 8002d0c:	f043 0302 	orr.w	r3, r3, #2
 8002d10:	9207      	str	r2, [sp, #28]
 8002d12:	9304      	str	r3, [sp, #16]
 8002d14:	783b      	ldrb	r3, [r7, #0]
 8002d16:	2b2e      	cmp	r3, #46	; 0x2e
 8002d18:	d10c      	bne.n	8002d34 <_svfiprintf_r+0x124>
 8002d1a:	787b      	ldrb	r3, [r7, #1]
 8002d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d1e:	d133      	bne.n	8002d88 <_svfiprintf_r+0x178>
 8002d20:	9b03      	ldr	r3, [sp, #12]
 8002d22:	1d1a      	adds	r2, r3, #4
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	9203      	str	r2, [sp, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bfb8      	it	lt
 8002d2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d30:	3702      	adds	r7, #2
 8002d32:	9305      	str	r3, [sp, #20]
 8002d34:	4d2e      	ldr	r5, [pc, #184]	; (8002df0 <_svfiprintf_r+0x1e0>)
 8002d36:	7839      	ldrb	r1, [r7, #0]
 8002d38:	2203      	movs	r2, #3
 8002d3a:	4628      	mov	r0, r5
 8002d3c:	f7fd fa88 	bl	8000250 <memchr>
 8002d40:	b138      	cbz	r0, 8002d52 <_svfiprintf_r+0x142>
 8002d42:	2340      	movs	r3, #64	; 0x40
 8002d44:	1b40      	subs	r0, r0, r5
 8002d46:	fa03 f000 	lsl.w	r0, r3, r0
 8002d4a:	9b04      	ldr	r3, [sp, #16]
 8002d4c:	4303      	orrs	r3, r0
 8002d4e:	3701      	adds	r7, #1
 8002d50:	9304      	str	r3, [sp, #16]
 8002d52:	7839      	ldrb	r1, [r7, #0]
 8002d54:	4827      	ldr	r0, [pc, #156]	; (8002df4 <_svfiprintf_r+0x1e4>)
 8002d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d5a:	2206      	movs	r2, #6
 8002d5c:	1c7e      	adds	r6, r7, #1
 8002d5e:	f7fd fa77 	bl	8000250 <memchr>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d038      	beq.n	8002dd8 <_svfiprintf_r+0x1c8>
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <_svfiprintf_r+0x1e8>)
 8002d68:	bb13      	cbnz	r3, 8002db0 <_svfiprintf_r+0x1a0>
 8002d6a:	9b03      	ldr	r3, [sp, #12]
 8002d6c:	3307      	adds	r3, #7
 8002d6e:	f023 0307 	bic.w	r3, r3, #7
 8002d72:	3308      	adds	r3, #8
 8002d74:	9303      	str	r3, [sp, #12]
 8002d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d78:	444b      	add	r3, r9
 8002d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d7c:	e76d      	b.n	8002c5a <_svfiprintf_r+0x4a>
 8002d7e:	fb05 3202 	mla	r2, r5, r2, r3
 8002d82:	2001      	movs	r0, #1
 8002d84:	460f      	mov	r7, r1
 8002d86:	e7a6      	b.n	8002cd6 <_svfiprintf_r+0xc6>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	3701      	adds	r7, #1
 8002d8c:	9305      	str	r3, [sp, #20]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	250a      	movs	r5, #10
 8002d92:	4638      	mov	r0, r7
 8002d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d98:	3a30      	subs	r2, #48	; 0x30
 8002d9a:	2a09      	cmp	r2, #9
 8002d9c:	d903      	bls.n	8002da6 <_svfiprintf_r+0x196>
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0c8      	beq.n	8002d34 <_svfiprintf_r+0x124>
 8002da2:	9105      	str	r1, [sp, #20]
 8002da4:	e7c6      	b.n	8002d34 <_svfiprintf_r+0x124>
 8002da6:	fb05 2101 	mla	r1, r5, r1, r2
 8002daa:	2301      	movs	r3, #1
 8002dac:	4607      	mov	r7, r0
 8002dae:	e7f0      	b.n	8002d92 <_svfiprintf_r+0x182>
 8002db0:	ab03      	add	r3, sp, #12
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4622      	mov	r2, r4
 8002db6:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <_svfiprintf_r+0x1ec>)
 8002db8:	a904      	add	r1, sp, #16
 8002dba:	4640      	mov	r0, r8
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002dc4:	4681      	mov	r9, r0
 8002dc6:	d1d6      	bne.n	8002d76 <_svfiprintf_r+0x166>
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	065b      	lsls	r3, r3, #25
 8002dcc:	f53f af35 	bmi.w	8002c3a <_svfiprintf_r+0x2a>
 8002dd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dd2:	b01d      	add	sp, #116	; 0x74
 8002dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dd8:	ab03      	add	r3, sp, #12
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	4622      	mov	r2, r4
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <_svfiprintf_r+0x1ec>)
 8002de0:	a904      	add	r1, sp, #16
 8002de2:	4640      	mov	r0, r8
 8002de4:	f000 f882 	bl	8002eec <_printf_i>
 8002de8:	e7ea      	b.n	8002dc0 <_svfiprintf_r+0x1b0>
 8002dea:	bf00      	nop
 8002dec:	0800353c 	.word	0x0800353c
 8002df0:	08003542 	.word	0x08003542
 8002df4:	08003546 	.word	0x08003546
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	08002b5d 	.word	0x08002b5d

08002e00 <_printf_common>:
 8002e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e04:	4691      	mov	r9, r2
 8002e06:	461f      	mov	r7, r3
 8002e08:	688a      	ldr	r2, [r1, #8]
 8002e0a:	690b      	ldr	r3, [r1, #16]
 8002e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bfb8      	it	lt
 8002e14:	4613      	movlt	r3, r2
 8002e16:	f8c9 3000 	str.w	r3, [r9]
 8002e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e1e:	4606      	mov	r6, r0
 8002e20:	460c      	mov	r4, r1
 8002e22:	b112      	cbz	r2, 8002e2a <_printf_common+0x2a>
 8002e24:	3301      	adds	r3, #1
 8002e26:	f8c9 3000 	str.w	r3, [r9]
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	0699      	lsls	r1, r3, #26
 8002e2e:	bf42      	ittt	mi
 8002e30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e34:	3302      	addmi	r3, #2
 8002e36:	f8c9 3000 	strmi.w	r3, [r9]
 8002e3a:	6825      	ldr	r5, [r4, #0]
 8002e3c:	f015 0506 	ands.w	r5, r5, #6
 8002e40:	d107      	bne.n	8002e52 <_printf_common+0x52>
 8002e42:	f104 0a19 	add.w	sl, r4, #25
 8002e46:	68e3      	ldr	r3, [r4, #12]
 8002e48:	f8d9 2000 	ldr.w	r2, [r9]
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	42ab      	cmp	r3, r5
 8002e50:	dc28      	bgt.n	8002ea4 <_printf_common+0xa4>
 8002e52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e56:	6822      	ldr	r2, [r4, #0]
 8002e58:	3300      	adds	r3, #0
 8002e5a:	bf18      	it	ne
 8002e5c:	2301      	movne	r3, #1
 8002e5e:	0692      	lsls	r2, r2, #26
 8002e60:	d42d      	bmi.n	8002ebe <_printf_common+0xbe>
 8002e62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e66:	4639      	mov	r1, r7
 8002e68:	4630      	mov	r0, r6
 8002e6a:	47c0      	blx	r8
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	d020      	beq.n	8002eb2 <_printf_common+0xb2>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	68e5      	ldr	r5, [r4, #12]
 8002e74:	f8d9 2000 	ldr.w	r2, [r9]
 8002e78:	f003 0306 	and.w	r3, r3, #6
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	bf08      	it	eq
 8002e80:	1aad      	subeq	r5, r5, r2
 8002e82:	68a3      	ldr	r3, [r4, #8]
 8002e84:	6922      	ldr	r2, [r4, #16]
 8002e86:	bf0c      	ite	eq
 8002e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e8c:	2500      	movne	r5, #0
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	bfc4      	itt	gt
 8002e92:	1a9b      	subgt	r3, r3, r2
 8002e94:	18ed      	addgt	r5, r5, r3
 8002e96:	f04f 0900 	mov.w	r9, #0
 8002e9a:	341a      	adds	r4, #26
 8002e9c:	454d      	cmp	r5, r9
 8002e9e:	d11a      	bne.n	8002ed6 <_printf_common+0xd6>
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	e008      	b.n	8002eb6 <_printf_common+0xb6>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	4652      	mov	r2, sl
 8002ea8:	4639      	mov	r1, r7
 8002eaa:	4630      	mov	r0, r6
 8002eac:	47c0      	blx	r8
 8002eae:	3001      	adds	r0, #1
 8002eb0:	d103      	bne.n	8002eba <_printf_common+0xba>
 8002eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eba:	3501      	adds	r5, #1
 8002ebc:	e7c3      	b.n	8002e46 <_printf_common+0x46>
 8002ebe:	18e1      	adds	r1, r4, r3
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	2030      	movs	r0, #48	; 0x30
 8002ec4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ec8:	4422      	add	r2, r4
 8002eca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ece:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ed2:	3302      	adds	r3, #2
 8002ed4:	e7c5      	b.n	8002e62 <_printf_common+0x62>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4622      	mov	r2, r4
 8002eda:	4639      	mov	r1, r7
 8002edc:	4630      	mov	r0, r6
 8002ede:	47c0      	blx	r8
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d0e6      	beq.n	8002eb2 <_printf_common+0xb2>
 8002ee4:	f109 0901 	add.w	r9, r9, #1
 8002ee8:	e7d8      	b.n	8002e9c <_printf_common+0x9c>
	...

08002eec <_printf_i>:
 8002eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ef0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ef4:	460c      	mov	r4, r1
 8002ef6:	7e09      	ldrb	r1, [r1, #24]
 8002ef8:	b085      	sub	sp, #20
 8002efa:	296e      	cmp	r1, #110	; 0x6e
 8002efc:	4617      	mov	r7, r2
 8002efe:	4606      	mov	r6, r0
 8002f00:	4698      	mov	r8, r3
 8002f02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f04:	f000 80b3 	beq.w	800306e <_printf_i+0x182>
 8002f08:	d822      	bhi.n	8002f50 <_printf_i+0x64>
 8002f0a:	2963      	cmp	r1, #99	; 0x63
 8002f0c:	d036      	beq.n	8002f7c <_printf_i+0x90>
 8002f0e:	d80a      	bhi.n	8002f26 <_printf_i+0x3a>
 8002f10:	2900      	cmp	r1, #0
 8002f12:	f000 80b9 	beq.w	8003088 <_printf_i+0x19c>
 8002f16:	2958      	cmp	r1, #88	; 0x58
 8002f18:	f000 8083 	beq.w	8003022 <_printf_i+0x136>
 8002f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f24:	e032      	b.n	8002f8c <_printf_i+0xa0>
 8002f26:	2964      	cmp	r1, #100	; 0x64
 8002f28:	d001      	beq.n	8002f2e <_printf_i+0x42>
 8002f2a:	2969      	cmp	r1, #105	; 0x69
 8002f2c:	d1f6      	bne.n	8002f1c <_printf_i+0x30>
 8002f2e:	6820      	ldr	r0, [r4, #0]
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	0605      	lsls	r5, r0, #24
 8002f34:	f103 0104 	add.w	r1, r3, #4
 8002f38:	d52a      	bpl.n	8002f90 <_printf_i+0xa4>
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6011      	str	r1, [r2, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da03      	bge.n	8002f4a <_printf_i+0x5e>
 8002f42:	222d      	movs	r2, #45	; 0x2d
 8002f44:	425b      	negs	r3, r3
 8002f46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f4a:	486f      	ldr	r0, [pc, #444]	; (8003108 <_printf_i+0x21c>)
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	e039      	b.n	8002fc4 <_printf_i+0xd8>
 8002f50:	2973      	cmp	r1, #115	; 0x73
 8002f52:	f000 809d 	beq.w	8003090 <_printf_i+0x1a4>
 8002f56:	d808      	bhi.n	8002f6a <_printf_i+0x7e>
 8002f58:	296f      	cmp	r1, #111	; 0x6f
 8002f5a:	d020      	beq.n	8002f9e <_printf_i+0xb2>
 8002f5c:	2970      	cmp	r1, #112	; 0x70
 8002f5e:	d1dd      	bne.n	8002f1c <_printf_i+0x30>
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	f043 0320 	orr.w	r3, r3, #32
 8002f66:	6023      	str	r3, [r4, #0]
 8002f68:	e003      	b.n	8002f72 <_printf_i+0x86>
 8002f6a:	2975      	cmp	r1, #117	; 0x75
 8002f6c:	d017      	beq.n	8002f9e <_printf_i+0xb2>
 8002f6e:	2978      	cmp	r1, #120	; 0x78
 8002f70:	d1d4      	bne.n	8002f1c <_printf_i+0x30>
 8002f72:	2378      	movs	r3, #120	; 0x78
 8002f74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f78:	4864      	ldr	r0, [pc, #400]	; (800310c <_printf_i+0x220>)
 8002f7a:	e055      	b.n	8003028 <_printf_i+0x13c>
 8002f7c:	6813      	ldr	r3, [r2, #0]
 8002f7e:	1d19      	adds	r1, r3, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6011      	str	r1, [r2, #0]
 8002f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e08c      	b.n	80030aa <_printf_i+0x1be>
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6011      	str	r1, [r2, #0]
 8002f94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f98:	bf18      	it	ne
 8002f9a:	b21b      	sxthne	r3, r3
 8002f9c:	e7cf      	b.n	8002f3e <_printf_i+0x52>
 8002f9e:	6813      	ldr	r3, [r2, #0]
 8002fa0:	6825      	ldr	r5, [r4, #0]
 8002fa2:	1d18      	adds	r0, r3, #4
 8002fa4:	6010      	str	r0, [r2, #0]
 8002fa6:	0628      	lsls	r0, r5, #24
 8002fa8:	d501      	bpl.n	8002fae <_printf_i+0xc2>
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	e002      	b.n	8002fb4 <_printf_i+0xc8>
 8002fae:	0668      	lsls	r0, r5, #25
 8002fb0:	d5fb      	bpl.n	8002faa <_printf_i+0xbe>
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	4854      	ldr	r0, [pc, #336]	; (8003108 <_printf_i+0x21c>)
 8002fb6:	296f      	cmp	r1, #111	; 0x6f
 8002fb8:	bf14      	ite	ne
 8002fba:	220a      	movne	r2, #10
 8002fbc:	2208      	moveq	r2, #8
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fc4:	6865      	ldr	r5, [r4, #4]
 8002fc6:	60a5      	str	r5, [r4, #8]
 8002fc8:	2d00      	cmp	r5, #0
 8002fca:	f2c0 8095 	blt.w	80030f8 <_printf_i+0x20c>
 8002fce:	6821      	ldr	r1, [r4, #0]
 8002fd0:	f021 0104 	bic.w	r1, r1, #4
 8002fd4:	6021      	str	r1, [r4, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d13d      	bne.n	8003056 <_printf_i+0x16a>
 8002fda:	2d00      	cmp	r5, #0
 8002fdc:	f040 808e 	bne.w	80030fc <_printf_i+0x210>
 8002fe0:	4665      	mov	r5, ip
 8002fe2:	2a08      	cmp	r2, #8
 8002fe4:	d10b      	bne.n	8002ffe <_printf_i+0x112>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	07db      	lsls	r3, r3, #31
 8002fea:	d508      	bpl.n	8002ffe <_printf_i+0x112>
 8002fec:	6923      	ldr	r3, [r4, #16]
 8002fee:	6862      	ldr	r2, [r4, #4]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	bfde      	ittt	le
 8002ff4:	2330      	movle	r3, #48	; 0x30
 8002ff6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ffa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002ffe:	ebac 0305 	sub.w	r3, ip, r5
 8003002:	6123      	str	r3, [r4, #16]
 8003004:	f8cd 8000 	str.w	r8, [sp]
 8003008:	463b      	mov	r3, r7
 800300a:	aa03      	add	r2, sp, #12
 800300c:	4621      	mov	r1, r4
 800300e:	4630      	mov	r0, r6
 8003010:	f7ff fef6 	bl	8002e00 <_printf_common>
 8003014:	3001      	adds	r0, #1
 8003016:	d14d      	bne.n	80030b4 <_printf_i+0x1c8>
 8003018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800301c:	b005      	add	sp, #20
 800301e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003022:	4839      	ldr	r0, [pc, #228]	; (8003108 <_printf_i+0x21c>)
 8003024:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003028:	6813      	ldr	r3, [r2, #0]
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	1d1d      	adds	r5, r3, #4
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6015      	str	r5, [r2, #0]
 8003032:	060a      	lsls	r2, r1, #24
 8003034:	d50b      	bpl.n	800304e <_printf_i+0x162>
 8003036:	07ca      	lsls	r2, r1, #31
 8003038:	bf44      	itt	mi
 800303a:	f041 0120 	orrmi.w	r1, r1, #32
 800303e:	6021      	strmi	r1, [r4, #0]
 8003040:	b91b      	cbnz	r3, 800304a <_printf_i+0x15e>
 8003042:	6822      	ldr	r2, [r4, #0]
 8003044:	f022 0220 	bic.w	r2, r2, #32
 8003048:	6022      	str	r2, [r4, #0]
 800304a:	2210      	movs	r2, #16
 800304c:	e7b7      	b.n	8002fbe <_printf_i+0xd2>
 800304e:	064d      	lsls	r5, r1, #25
 8003050:	bf48      	it	mi
 8003052:	b29b      	uxthmi	r3, r3
 8003054:	e7ef      	b.n	8003036 <_printf_i+0x14a>
 8003056:	4665      	mov	r5, ip
 8003058:	fbb3 f1f2 	udiv	r1, r3, r2
 800305c:	fb02 3311 	mls	r3, r2, r1, r3
 8003060:	5cc3      	ldrb	r3, [r0, r3]
 8003062:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003066:	460b      	mov	r3, r1
 8003068:	2900      	cmp	r1, #0
 800306a:	d1f5      	bne.n	8003058 <_printf_i+0x16c>
 800306c:	e7b9      	b.n	8002fe2 <_printf_i+0xf6>
 800306e:	6813      	ldr	r3, [r2, #0]
 8003070:	6825      	ldr	r5, [r4, #0]
 8003072:	6961      	ldr	r1, [r4, #20]
 8003074:	1d18      	adds	r0, r3, #4
 8003076:	6010      	str	r0, [r2, #0]
 8003078:	0628      	lsls	r0, r5, #24
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	d501      	bpl.n	8003082 <_printf_i+0x196>
 800307e:	6019      	str	r1, [r3, #0]
 8003080:	e002      	b.n	8003088 <_printf_i+0x19c>
 8003082:	066a      	lsls	r2, r5, #25
 8003084:	d5fb      	bpl.n	800307e <_printf_i+0x192>
 8003086:	8019      	strh	r1, [r3, #0]
 8003088:	2300      	movs	r3, #0
 800308a:	6123      	str	r3, [r4, #16]
 800308c:	4665      	mov	r5, ip
 800308e:	e7b9      	b.n	8003004 <_printf_i+0x118>
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	1d19      	adds	r1, r3, #4
 8003094:	6011      	str	r1, [r2, #0]
 8003096:	681d      	ldr	r5, [r3, #0]
 8003098:	6862      	ldr	r2, [r4, #4]
 800309a:	2100      	movs	r1, #0
 800309c:	4628      	mov	r0, r5
 800309e:	f7fd f8d7 	bl	8000250 <memchr>
 80030a2:	b108      	cbz	r0, 80030a8 <_printf_i+0x1bc>
 80030a4:	1b40      	subs	r0, r0, r5
 80030a6:	6060      	str	r0, [r4, #4]
 80030a8:	6863      	ldr	r3, [r4, #4]
 80030aa:	6123      	str	r3, [r4, #16]
 80030ac:	2300      	movs	r3, #0
 80030ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b2:	e7a7      	b.n	8003004 <_printf_i+0x118>
 80030b4:	6923      	ldr	r3, [r4, #16]
 80030b6:	462a      	mov	r2, r5
 80030b8:	4639      	mov	r1, r7
 80030ba:	4630      	mov	r0, r6
 80030bc:	47c0      	blx	r8
 80030be:	3001      	adds	r0, #1
 80030c0:	d0aa      	beq.n	8003018 <_printf_i+0x12c>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	079b      	lsls	r3, r3, #30
 80030c6:	d413      	bmi.n	80030f0 <_printf_i+0x204>
 80030c8:	68e0      	ldr	r0, [r4, #12]
 80030ca:	9b03      	ldr	r3, [sp, #12]
 80030cc:	4298      	cmp	r0, r3
 80030ce:	bfb8      	it	lt
 80030d0:	4618      	movlt	r0, r3
 80030d2:	e7a3      	b.n	800301c <_printf_i+0x130>
 80030d4:	2301      	movs	r3, #1
 80030d6:	464a      	mov	r2, r9
 80030d8:	4639      	mov	r1, r7
 80030da:	4630      	mov	r0, r6
 80030dc:	47c0      	blx	r8
 80030de:	3001      	adds	r0, #1
 80030e0:	d09a      	beq.n	8003018 <_printf_i+0x12c>
 80030e2:	3501      	adds	r5, #1
 80030e4:	68e3      	ldr	r3, [r4, #12]
 80030e6:	9a03      	ldr	r2, [sp, #12]
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	42ab      	cmp	r3, r5
 80030ec:	dcf2      	bgt.n	80030d4 <_printf_i+0x1e8>
 80030ee:	e7eb      	b.n	80030c8 <_printf_i+0x1dc>
 80030f0:	2500      	movs	r5, #0
 80030f2:	f104 0919 	add.w	r9, r4, #25
 80030f6:	e7f5      	b.n	80030e4 <_printf_i+0x1f8>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ac      	bne.n	8003056 <_printf_i+0x16a>
 80030fc:	7803      	ldrb	r3, [r0, #0]
 80030fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003102:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003106:	e76c      	b.n	8002fe2 <_printf_i+0xf6>
 8003108:	0800354d 	.word	0x0800354d
 800310c:	0800355e 	.word	0x0800355e

08003110 <memmove>:
 8003110:	4288      	cmp	r0, r1
 8003112:	b510      	push	{r4, lr}
 8003114:	eb01 0302 	add.w	r3, r1, r2
 8003118:	d807      	bhi.n	800312a <memmove+0x1a>
 800311a:	1e42      	subs	r2, r0, #1
 800311c:	4299      	cmp	r1, r3
 800311e:	d00a      	beq.n	8003136 <memmove+0x26>
 8003120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003124:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003128:	e7f8      	b.n	800311c <memmove+0xc>
 800312a:	4283      	cmp	r3, r0
 800312c:	d9f5      	bls.n	800311a <memmove+0xa>
 800312e:	1881      	adds	r1, r0, r2
 8003130:	1ad2      	subs	r2, r2, r3
 8003132:	42d3      	cmn	r3, r2
 8003134:	d100      	bne.n	8003138 <memmove+0x28>
 8003136:	bd10      	pop	{r4, pc}
 8003138:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800313c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003140:	e7f7      	b.n	8003132 <memmove+0x22>
	...

08003144 <_free_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4605      	mov	r5, r0
 8003148:	2900      	cmp	r1, #0
 800314a:	d045      	beq.n	80031d8 <_free_r+0x94>
 800314c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003150:	1f0c      	subs	r4, r1, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	bfb8      	it	lt
 8003156:	18e4      	addlt	r4, r4, r3
 8003158:	f000 f8d2 	bl	8003300 <__malloc_lock>
 800315c:	4a1f      	ldr	r2, [pc, #124]	; (80031dc <_free_r+0x98>)
 800315e:	6813      	ldr	r3, [r2, #0]
 8003160:	4610      	mov	r0, r2
 8003162:	b933      	cbnz	r3, 8003172 <_free_r+0x2e>
 8003164:	6063      	str	r3, [r4, #4]
 8003166:	6014      	str	r4, [r2, #0]
 8003168:	4628      	mov	r0, r5
 800316a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800316e:	f000 b8c8 	b.w	8003302 <__malloc_unlock>
 8003172:	42a3      	cmp	r3, r4
 8003174:	d90c      	bls.n	8003190 <_free_r+0x4c>
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	1862      	adds	r2, r4, r1
 800317a:	4293      	cmp	r3, r2
 800317c:	bf04      	itt	eq
 800317e:	681a      	ldreq	r2, [r3, #0]
 8003180:	685b      	ldreq	r3, [r3, #4]
 8003182:	6063      	str	r3, [r4, #4]
 8003184:	bf04      	itt	eq
 8003186:	1852      	addeq	r2, r2, r1
 8003188:	6022      	streq	r2, [r4, #0]
 800318a:	6004      	str	r4, [r0, #0]
 800318c:	e7ec      	b.n	8003168 <_free_r+0x24>
 800318e:	4613      	mov	r3, r2
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	b10a      	cbz	r2, 8003198 <_free_r+0x54>
 8003194:	42a2      	cmp	r2, r4
 8003196:	d9fa      	bls.n	800318e <_free_r+0x4a>
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	1858      	adds	r0, r3, r1
 800319c:	42a0      	cmp	r0, r4
 800319e:	d10b      	bne.n	80031b8 <_free_r+0x74>
 80031a0:	6820      	ldr	r0, [r4, #0]
 80031a2:	4401      	add	r1, r0
 80031a4:	1858      	adds	r0, r3, r1
 80031a6:	4282      	cmp	r2, r0
 80031a8:	6019      	str	r1, [r3, #0]
 80031aa:	d1dd      	bne.n	8003168 <_free_r+0x24>
 80031ac:	6810      	ldr	r0, [r2, #0]
 80031ae:	6852      	ldr	r2, [r2, #4]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	4401      	add	r1, r0
 80031b4:	6019      	str	r1, [r3, #0]
 80031b6:	e7d7      	b.n	8003168 <_free_r+0x24>
 80031b8:	d902      	bls.n	80031c0 <_free_r+0x7c>
 80031ba:	230c      	movs	r3, #12
 80031bc:	602b      	str	r3, [r5, #0]
 80031be:	e7d3      	b.n	8003168 <_free_r+0x24>
 80031c0:	6820      	ldr	r0, [r4, #0]
 80031c2:	1821      	adds	r1, r4, r0
 80031c4:	428a      	cmp	r2, r1
 80031c6:	bf04      	itt	eq
 80031c8:	6811      	ldreq	r1, [r2, #0]
 80031ca:	6852      	ldreq	r2, [r2, #4]
 80031cc:	6062      	str	r2, [r4, #4]
 80031ce:	bf04      	itt	eq
 80031d0:	1809      	addeq	r1, r1, r0
 80031d2:	6021      	streq	r1, [r4, #0]
 80031d4:	605c      	str	r4, [r3, #4]
 80031d6:	e7c7      	b.n	8003168 <_free_r+0x24>
 80031d8:	bd38      	pop	{r3, r4, r5, pc}
 80031da:	bf00      	nop
 80031dc:	20000098 	.word	0x20000098

080031e0 <_malloc_r>:
 80031e0:	b570      	push	{r4, r5, r6, lr}
 80031e2:	1ccd      	adds	r5, r1, #3
 80031e4:	f025 0503 	bic.w	r5, r5, #3
 80031e8:	3508      	adds	r5, #8
 80031ea:	2d0c      	cmp	r5, #12
 80031ec:	bf38      	it	cc
 80031ee:	250c      	movcc	r5, #12
 80031f0:	2d00      	cmp	r5, #0
 80031f2:	4606      	mov	r6, r0
 80031f4:	db01      	blt.n	80031fa <_malloc_r+0x1a>
 80031f6:	42a9      	cmp	r1, r5
 80031f8:	d903      	bls.n	8003202 <_malloc_r+0x22>
 80031fa:	230c      	movs	r3, #12
 80031fc:	6033      	str	r3, [r6, #0]
 80031fe:	2000      	movs	r0, #0
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	f000 f87d 	bl	8003300 <__malloc_lock>
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <_malloc_r+0xac>)
 8003208:	6814      	ldr	r4, [r2, #0]
 800320a:	4621      	mov	r1, r4
 800320c:	b991      	cbnz	r1, 8003234 <_malloc_r+0x54>
 800320e:	4c20      	ldr	r4, [pc, #128]	; (8003290 <_malloc_r+0xb0>)
 8003210:	6823      	ldr	r3, [r4, #0]
 8003212:	b91b      	cbnz	r3, 800321c <_malloc_r+0x3c>
 8003214:	4630      	mov	r0, r6
 8003216:	f000 f863 	bl	80032e0 <_sbrk_r>
 800321a:	6020      	str	r0, [r4, #0]
 800321c:	4629      	mov	r1, r5
 800321e:	4630      	mov	r0, r6
 8003220:	f000 f85e 	bl	80032e0 <_sbrk_r>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d124      	bne.n	8003272 <_malloc_r+0x92>
 8003228:	230c      	movs	r3, #12
 800322a:	6033      	str	r3, [r6, #0]
 800322c:	4630      	mov	r0, r6
 800322e:	f000 f868 	bl	8003302 <__malloc_unlock>
 8003232:	e7e4      	b.n	80031fe <_malloc_r+0x1e>
 8003234:	680b      	ldr	r3, [r1, #0]
 8003236:	1b5b      	subs	r3, r3, r5
 8003238:	d418      	bmi.n	800326c <_malloc_r+0x8c>
 800323a:	2b0b      	cmp	r3, #11
 800323c:	d90f      	bls.n	800325e <_malloc_r+0x7e>
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	50cd      	str	r5, [r1, r3]
 8003242:	18cc      	adds	r4, r1, r3
 8003244:	4630      	mov	r0, r6
 8003246:	f000 f85c 	bl	8003302 <__malloc_unlock>
 800324a:	f104 000b 	add.w	r0, r4, #11
 800324e:	1d23      	adds	r3, r4, #4
 8003250:	f020 0007 	bic.w	r0, r0, #7
 8003254:	1ac3      	subs	r3, r0, r3
 8003256:	d0d3      	beq.n	8003200 <_malloc_r+0x20>
 8003258:	425a      	negs	r2, r3
 800325a:	50e2      	str	r2, [r4, r3]
 800325c:	e7d0      	b.n	8003200 <_malloc_r+0x20>
 800325e:	428c      	cmp	r4, r1
 8003260:	684b      	ldr	r3, [r1, #4]
 8003262:	bf16      	itet	ne
 8003264:	6063      	strne	r3, [r4, #4]
 8003266:	6013      	streq	r3, [r2, #0]
 8003268:	460c      	movne	r4, r1
 800326a:	e7eb      	b.n	8003244 <_malloc_r+0x64>
 800326c:	460c      	mov	r4, r1
 800326e:	6849      	ldr	r1, [r1, #4]
 8003270:	e7cc      	b.n	800320c <_malloc_r+0x2c>
 8003272:	1cc4      	adds	r4, r0, #3
 8003274:	f024 0403 	bic.w	r4, r4, #3
 8003278:	42a0      	cmp	r0, r4
 800327a:	d005      	beq.n	8003288 <_malloc_r+0xa8>
 800327c:	1a21      	subs	r1, r4, r0
 800327e:	4630      	mov	r0, r6
 8003280:	f000 f82e 	bl	80032e0 <_sbrk_r>
 8003284:	3001      	adds	r0, #1
 8003286:	d0cf      	beq.n	8003228 <_malloc_r+0x48>
 8003288:	6025      	str	r5, [r4, #0]
 800328a:	e7db      	b.n	8003244 <_malloc_r+0x64>
 800328c:	20000098 	.word	0x20000098
 8003290:	2000009c 	.word	0x2000009c

08003294 <_realloc_r>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	4607      	mov	r7, r0
 8003298:	4614      	mov	r4, r2
 800329a:	460e      	mov	r6, r1
 800329c:	b921      	cbnz	r1, 80032a8 <_realloc_r+0x14>
 800329e:	4611      	mov	r1, r2
 80032a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032a4:	f7ff bf9c 	b.w	80031e0 <_malloc_r>
 80032a8:	b922      	cbnz	r2, 80032b4 <_realloc_r+0x20>
 80032aa:	f7ff ff4b 	bl	8003144 <_free_r>
 80032ae:	4625      	mov	r5, r4
 80032b0:	4628      	mov	r0, r5
 80032b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032b4:	f000 f826 	bl	8003304 <_malloc_usable_size_r>
 80032b8:	42a0      	cmp	r0, r4
 80032ba:	d20f      	bcs.n	80032dc <_realloc_r+0x48>
 80032bc:	4621      	mov	r1, r4
 80032be:	4638      	mov	r0, r7
 80032c0:	f7ff ff8e 	bl	80031e0 <_malloc_r>
 80032c4:	4605      	mov	r5, r0
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d0f2      	beq.n	80032b0 <_realloc_r+0x1c>
 80032ca:	4631      	mov	r1, r6
 80032cc:	4622      	mov	r2, r4
 80032ce:	f7ff fc11 	bl	8002af4 <memcpy>
 80032d2:	4631      	mov	r1, r6
 80032d4:	4638      	mov	r0, r7
 80032d6:	f7ff ff35 	bl	8003144 <_free_r>
 80032da:	e7e9      	b.n	80032b0 <_realloc_r+0x1c>
 80032dc:	4635      	mov	r5, r6
 80032de:	e7e7      	b.n	80032b0 <_realloc_r+0x1c>

080032e0 <_sbrk_r>:
 80032e0:	b538      	push	{r3, r4, r5, lr}
 80032e2:	4c06      	ldr	r4, [pc, #24]	; (80032fc <_sbrk_r+0x1c>)
 80032e4:	2300      	movs	r3, #0
 80032e6:	4605      	mov	r5, r0
 80032e8:	4608      	mov	r0, r1
 80032ea:	6023      	str	r3, [r4, #0]
 80032ec:	f7ff fb68 	bl	80029c0 <_sbrk>
 80032f0:	1c43      	adds	r3, r0, #1
 80032f2:	d102      	bne.n	80032fa <_sbrk_r+0x1a>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	b103      	cbz	r3, 80032fa <_sbrk_r+0x1a>
 80032f8:	602b      	str	r3, [r5, #0]
 80032fa:	bd38      	pop	{r3, r4, r5, pc}
 80032fc:	200002f8 	.word	0x200002f8

08003300 <__malloc_lock>:
 8003300:	4770      	bx	lr

08003302 <__malloc_unlock>:
 8003302:	4770      	bx	lr

08003304 <_malloc_usable_size_r>:
 8003304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003308:	1f18      	subs	r0, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	bfbc      	itt	lt
 800330e:	580b      	ldrlt	r3, [r1, r0]
 8003310:	18c0      	addlt	r0, r0, r3
 8003312:	4770      	bx	lr

08003314 <_init>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr

08003320 <_fini>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	bf00      	nop
 8003324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003326:	bc08      	pop	{r3}
 8003328:	469e      	mov	lr, r3
 800332a:	4770      	bx	lr
