
test_led_ram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001040  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001238  08001238  00011238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001250  08001250  00011250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001258  08001258  00011258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  2000000c  0800126c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000002c  0800126c  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000051ba  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001084  00000000  00000000  000251f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001318  00000000  00000000  00026278  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000420  00000000  00000000  00027590  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000003e8  00000000  00000000  000279b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000236a9  00000000  00000000  00027d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000454e  00000000  00000000  0004b441  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000dd876  00000000  00000000  0004f98f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0012d205  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000958  00000000  00000000  0012d280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001220 	.word	0x08001220

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001220 	.word	0x08001220

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b510      	push	{r4, lr}
 800053a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_InitTick+0x40>)
 800053e:	7818      	ldrb	r0, [r3, #0]
 8000540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000544:	fbb3 f3f0 	udiv	r3, r3, r0
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <HAL_InitTick+0x44>)
 800054a:	6810      	ldr	r0, [r2, #0]
 800054c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000550:	f000 f88c 	bl	800066c <HAL_SYSTICK_Config>
 8000554:	b968      	cbnz	r0, 8000572 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000556:	2c0f      	cmp	r4, #15
 8000558:	d901      	bls.n	800055e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800055a:	2001      	movs	r0, #1
 800055c:	e00a      	b.n	8000574 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800055e:	2200      	movs	r2, #0
 8000560:	4621      	mov	r1, r4
 8000562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000566:	f000 f84f 	bl	8000608 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800056a:	4b03      	ldr	r3, [pc, #12]	; (8000578 <HAL_InitTick+0x40>)
 800056c:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 800056e:	2000      	movs	r0, #0
 8000570:	e000      	b.n	8000574 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000572:	2001      	movs	r0, #1
}
 8000574:	bd10      	pop	{r4, pc}
 8000576:	bf00      	nop
 8000578:	20000000 	.word	0x20000000
 800057c:	20000008 	.word	0x20000008

08000580 <HAL_Init>:
{
 8000580:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000582:	2003      	movs	r0, #3
 8000584:	f000 f82e 	bl	80005e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff ffd5 	bl	8000538 <HAL_InitTick>
  HAL_MspInit();
 800058e:	f000 fda5 	bl	80010dc <HAL_MspInit>
}
 8000592:	2000      	movs	r0, #0
 8000594:	bd08      	pop	{r3, pc}
	...

08000598 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000598:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x10>)
 800059a:	6811      	ldr	r1, [r2, #0]
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_IncTick+0x14>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	440b      	add	r3, r1
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005b0:	4b01      	ldr	r3, [pc, #4]	; (80005b8 <HAL_GetTick+0x8>)
 80005b2:	6818      	ldr	r0, [r3, #0]
}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000028 	.word	0x20000028

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b538      	push	{r3, r4, r5, lr}
 80005be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff fff6 	bl	80005b0 <HAL_GetTick>
 80005c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80005ca:	d002      	beq.n	80005d2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80005cc:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <HAL_Delay+0x24>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d2:	f7ff ffed 	bl	80005b0 <HAL_GetTick>
 80005d6:	1b40      	subs	r0, r0, r5
 80005d8:	42a0      	cmp	r0, r4
 80005da:	d3fa      	bcc.n	80005d2 <HAL_Delay+0x16>
  {
  }
}
 80005dc:	bd38      	pop	{r3, r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	20000000 	.word	0x20000000

080005e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e4:	4906      	ldr	r1, [pc, #24]	; (8000600 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80005e6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005ec:	041b      	lsls	r3, r3, #16
 80005ee:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f0:	0200      	lsls	r0, r0, #8
 80005f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80005f8:	4a02      	ldr	r2, [pc, #8]	; (8000604 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005fa:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80005fc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	05fa0000 	.word	0x05fa0000

08000608 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000608:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <HAL_NVIC_SetPriority+0x58>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000612:	f1c3 0407 	rsb	r4, r3, #7
 8000616:	2c04      	cmp	r4, #4
 8000618:	bf28      	it	cs
 800061a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061c:	1d1d      	adds	r5, r3, #4
 800061e:	2d06      	cmp	r5, #6
 8000620:	d914      	bls.n	800064c <HAL_NVIC_SetPriority+0x44>
 8000622:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000624:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000628:	fa05 f404 	lsl.w	r4, r5, r4
 800062c:	ea21 0104 	bic.w	r1, r1, r4
 8000630:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000632:	fa05 f303 	lsl.w	r3, r5, r3
 8000636:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800063a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800063c:	2800      	cmp	r0, #0
 800063e:	db07      	blt.n	8000650 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	0109      	lsls	r1, r1, #4
 8000642:	b2c9      	uxtb	r1, r1
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <HAL_NVIC_SetPriority+0x5c>)
 8000646:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000648:	bc30      	pop	{r4, r5}
 800064a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800064c:	2300      	movs	r3, #0
 800064e:	e7e9      	b.n	8000624 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	f000 000f 	and.w	r0, r0, #15
 8000654:	0109      	lsls	r1, r1, #4
 8000656:	b2c9      	uxtb	r1, r1
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_NVIC_SetPriority+0x60>)
 800065a:	5419      	strb	r1, [r3, r0]
 800065c:	e7f4      	b.n	8000648 <HAL_NVIC_SetPriority+0x40>
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	e000e400 	.word	0xe000e400
 8000668:	e000ed14 	.word	0xe000ed14

0800066c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800066c:	3801      	subs	r0, #1
 800066e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000672:	d20a      	bcs.n	800068a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_SYSTICK_Config+0x24>)
 8000676:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <HAL_SYSTICK_Config+0x28>)
 800067a:	21f0      	movs	r1, #240	; 0xf0
 800067c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000680:	2000      	movs	r0, #0
 8000682:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000684:	2207      	movs	r2, #7
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e010 	.word	0xe000e010
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000698:	2300      	movs	r3, #0
 800069a:	2b0f      	cmp	r3, #15
 800069c:	f200 80e2 	bhi.w	8000864 <HAL_GPIO_Init+0x1cc>
{
 80006a0:	b4f0      	push	{r4, r5, r6, r7}
 80006a2:	b082      	sub	sp, #8
 80006a4:	e039      	b.n	800071a <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006a6:	2209      	movs	r2, #9
 80006a8:	e000      	b.n	80006ac <HAL_GPIO_Init+0x14>
 80006aa:	2200      	movs	r2, #0
 80006ac:	40b2      	lsls	r2, r6
 80006ae:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80006b0:	3402      	adds	r4, #2
 80006b2:	4e6d      	ldr	r6, [pc, #436]	; (8000868 <HAL_GPIO_Init+0x1d0>)
 80006b4:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006b8:	4a6c      	ldr	r2, [pc, #432]	; (800086c <HAL_GPIO_Init+0x1d4>)
 80006ba:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80006bc:	43ea      	mvns	r2, r5
 80006be:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c2:	684f      	ldr	r7, [r1, #4]
 80006c4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80006c8:	d001      	beq.n	80006ce <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80006ca:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 80006ce:	4c67      	ldr	r4, [pc, #412]	; (800086c <HAL_GPIO_Init+0x1d4>)
 80006d0:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 80006d2:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80006d4:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006d8:	684f      	ldr	r7, [r1, #4]
 80006da:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80006de:	d001      	beq.n	80006e4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80006e0:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 80006e4:	4c61      	ldr	r4, [pc, #388]	; (800086c <HAL_GPIO_Init+0x1d4>)
 80006e6:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006e8:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80006ea:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006ee:	684f      	ldr	r7, [r1, #4]
 80006f0:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80006f4:	d001      	beq.n	80006fa <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80006f6:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 80006fa:	4c5c      	ldr	r4, [pc, #368]	; (800086c <HAL_GPIO_Init+0x1d4>)
 80006fc:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 80006fe:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000700:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000702:	684e      	ldr	r6, [r1, #4]
 8000704:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000708:	d001      	beq.n	800070e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800070a:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 800070e:	4c57      	ldr	r4, [pc, #348]	; (800086c <HAL_GPIO_Init+0x1d4>)
 8000710:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000712:	3301      	adds	r3, #1
 8000714:	2b0f      	cmp	r3, #15
 8000716:	f200 80a2 	bhi.w	800085e <HAL_GPIO_Init+0x1c6>
    ioposition = ((uint32_t)0x01) << position;
 800071a:	2201      	movs	r2, #1
 800071c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800071e:	680c      	ldr	r4, [r1, #0]
 8000720:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8000724:	42aa      	cmp	r2, r5
 8000726:	d1f4      	bne.n	8000712 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000728:	684c      	ldr	r4, [r1, #4]
 800072a:	2c12      	cmp	r4, #18
 800072c:	bf18      	it	ne
 800072e:	2c02      	cmpne	r4, #2
 8000730:	d110      	bne.n	8000754 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8000732:	08de      	lsrs	r6, r3, #3
 8000734:	3608      	adds	r6, #8
 8000736:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800073a:	f003 0407 	and.w	r4, r3, #7
 800073e:	00a7      	lsls	r7, r4, #2
 8000740:	240f      	movs	r4, #15
 8000742:	40bc      	lsls	r4, r7
 8000744:	ea2c 0c04 	bic.w	ip, ip, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000748:	690c      	ldr	r4, [r1, #16]
 800074a:	40bc      	lsls	r4, r7
 800074c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->AFR[position >> 3] = temp;
 8000750:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8000754:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000756:	005f      	lsls	r7, r3, #1
 8000758:	2603      	movs	r6, #3
 800075a:	40be      	lsls	r6, r7
 800075c:	43f6      	mvns	r6, r6
 800075e:	ea06 0c04 	and.w	ip, r6, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000762:	684c      	ldr	r4, [r1, #4]
 8000764:	f004 0403 	and.w	r4, r4, #3
 8000768:	40bc      	lsls	r4, r7
 800076a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800076e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000770:	684c      	ldr	r4, [r1, #4]
 8000772:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8000776:	2c11      	cmp	r4, #17
 8000778:	bf18      	it	ne
 800077a:	f1bc 0f01 	cmpne.w	ip, #1
 800077e:	d901      	bls.n	8000784 <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000780:	2c12      	cmp	r4, #18
 8000782:	d111      	bne.n	80007a8 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8000784:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000786:	ea06 0c04 	and.w	ip, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800078a:	68cc      	ldr	r4, [r1, #12]
 800078c:	40bc      	lsls	r4, r7
 800078e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OSPEEDR = temp;
 8000792:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000794:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000796:	ea24 0c02 	bic.w	ip, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800079a:	684c      	ldr	r4, [r1, #4]
 800079c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80007a0:	409a      	lsls	r2, r3
 80007a2:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->OTYPER = temp;
 80007a6:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80007a8:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007aa:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007ac:	688a      	ldr	r2, [r1, #8]
 80007ae:	40ba      	lsls	r2, r7
 80007b0:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80007b2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007b4:	684a      	ldr	r2, [r1, #4]
 80007b6:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80007ba:	d0aa      	beq.n	8000712 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007bc:	4a2c      	ldr	r2, [pc, #176]	; (8000870 <HAL_GPIO_Init+0x1d8>)
 80007be:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80007c0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80007c4:	6454      	str	r4, [r2, #68]	; 0x44
 80007c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007c8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007cc:	9201      	str	r2, [sp, #4]
 80007ce:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 80007d0:	089c      	lsrs	r4, r3, #2
 80007d2:	1ca6      	adds	r6, r4, #2
 80007d4:	4a24      	ldr	r2, [pc, #144]	; (8000868 <HAL_GPIO_Init+0x1d0>)
 80007d6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007da:	f003 0203 	and.w	r2, r3, #3
 80007de:	0096      	lsls	r6, r2, #2
 80007e0:	220f      	movs	r2, #15
 80007e2:	40b2      	lsls	r2, r6
 80007e4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80007e8:	4a22      	ldr	r2, [pc, #136]	; (8000874 <HAL_GPIO_Init+0x1dc>)
 80007ea:	4290      	cmp	r0, r2
 80007ec:	f43f af5d 	beq.w	80006aa <HAL_GPIO_Init+0x12>
 80007f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007f4:	4290      	cmp	r0, r2
 80007f6:	d022      	beq.n	800083e <HAL_GPIO_Init+0x1a6>
 80007f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80007fc:	4290      	cmp	r0, r2
 80007fe:	d020      	beq.n	8000842 <HAL_GPIO_Init+0x1aa>
 8000800:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000804:	4290      	cmp	r0, r2
 8000806:	d01e      	beq.n	8000846 <HAL_GPIO_Init+0x1ae>
 8000808:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800080c:	4290      	cmp	r0, r2
 800080e:	d01c      	beq.n	800084a <HAL_GPIO_Init+0x1b2>
 8000810:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000814:	4290      	cmp	r0, r2
 8000816:	d01a      	beq.n	800084e <HAL_GPIO_Init+0x1b6>
 8000818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800081c:	4290      	cmp	r0, r2
 800081e:	d018      	beq.n	8000852 <HAL_GPIO_Init+0x1ba>
 8000820:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000824:	4290      	cmp	r0, r2
 8000826:	d016      	beq.n	8000856 <HAL_GPIO_Init+0x1be>
 8000828:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800082c:	4290      	cmp	r0, r2
 800082e:	d014      	beq.n	800085a <HAL_GPIO_Init+0x1c2>
 8000830:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000834:	4290      	cmp	r0, r2
 8000836:	f43f af36 	beq.w	80006a6 <HAL_GPIO_Init+0xe>
 800083a:	220a      	movs	r2, #10
 800083c:	e736      	b.n	80006ac <HAL_GPIO_Init+0x14>
 800083e:	2201      	movs	r2, #1
 8000840:	e734      	b.n	80006ac <HAL_GPIO_Init+0x14>
 8000842:	2202      	movs	r2, #2
 8000844:	e732      	b.n	80006ac <HAL_GPIO_Init+0x14>
 8000846:	2203      	movs	r2, #3
 8000848:	e730      	b.n	80006ac <HAL_GPIO_Init+0x14>
 800084a:	2204      	movs	r2, #4
 800084c:	e72e      	b.n	80006ac <HAL_GPIO_Init+0x14>
 800084e:	2205      	movs	r2, #5
 8000850:	e72c      	b.n	80006ac <HAL_GPIO_Init+0x14>
 8000852:	2206      	movs	r2, #6
 8000854:	e72a      	b.n	80006ac <HAL_GPIO_Init+0x14>
 8000856:	2207      	movs	r2, #7
 8000858:	e728      	b.n	80006ac <HAL_GPIO_Init+0x14>
 800085a:	2208      	movs	r2, #8
 800085c:	e726      	b.n	80006ac <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 800085e:	b002      	add	sp, #8
 8000860:	bcf0      	pop	{r4, r5, r6, r7}
 8000862:	4770      	bx	lr
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40013800 	.word	0x40013800
 800086c:	40013c00 	.word	0x40013c00
 8000870:	40023800 	.word	0x40023800
 8000874:	40020000 	.word	0x40020000

08000878 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000878:	b912      	cbnz	r2, 8000880 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800087a:	0409      	lsls	r1, r1, #16
 800087c:	6181      	str	r1, [r0, #24]
  }
}
 800087e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000880:	6181      	str	r1, [r0, #24]
 8000882:	4770      	bx	lr

08000884 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000884:	6943      	ldr	r3, [r0, #20]
 8000886:	ea31 0303 	bics.w	r3, r1, r3
 800088a:	d001      	beq.n	8000890 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800088c:	6181      	str	r1, [r0, #24]
  }
}
 800088e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000890:	0409      	lsls	r1, r1, #16
 8000892:	6181      	str	r1, [r0, #24]
 8000894:	4770      	bx	lr
	...

08000898 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000898:	b510      	push	{r4, lr}
 800089a:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_PWREx_EnableOverDrive+0x74>)
 800089e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008a4:	641a      	str	r2, [r3, #64]	; 0x40
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_PWREx_EnableOverDrive+0x78>)
 80008b2:	6813      	ldr	r3, [r2, #0]
 80008b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008ba:	f7ff fe79 	bl	80005b0 <HAL_GetTick>
 80008be:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <HAL_PWREx_EnableOverDrive+0x78>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008c8:	d108      	bne.n	80008dc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008ca:	f7ff fe71 	bl	80005b0 <HAL_GetTick>
 80008ce:	1b00      	subs	r0, r0, r4
 80008d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008d4:	d9f4      	bls.n	80008c0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80008d6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80008d8:	b002      	add	sp, #8
 80008da:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008dc:	4a0c      	ldr	r2, [pc, #48]	; (8000910 <HAL_PWREx_EnableOverDrive+0x78>)
 80008de:	6813      	ldr	r3, [r2, #0]
 80008e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80008e6:	f7ff fe63 	bl	80005b0 <HAL_GetTick>
 80008ea:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_PWREx_EnableOverDrive+0x78>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008f4:	d107      	bne.n	8000906 <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008f6:	f7ff fe5b 	bl	80005b0 <HAL_GetTick>
 80008fa:	1b00      	subs	r0, r0, r4
 80008fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000900:	d9f4      	bls.n	80008ec <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8000902:	2003      	movs	r0, #3
 8000904:	e7e8      	b.n	80008d8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8000906:	2000      	movs	r0, #0
 8000908:	e7e6      	b.n	80008d8 <HAL_PWREx_EnableOverDrive+0x40>
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000914:	2800      	cmp	r0, #0
 8000916:	f000 81dc 	beq.w	8000cd2 <HAL_RCC_OscConfig+0x3be>
{
 800091a:	b570      	push	{r4, r5, r6, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000920:	6803      	ldr	r3, [r0, #0]
 8000922:	f013 0f01 	tst.w	r3, #1
 8000926:	d029      	beq.n	800097c <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000928:	4ba2      	ldr	r3, [pc, #648]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	f003 030c 	and.w	r3, r3, #12
 8000930:	2b04      	cmp	r3, #4
 8000932:	d01a      	beq.n	800096a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000934:	4b9f      	ldr	r3, [pc, #636]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f003 030c 	and.w	r3, r3, #12
 800093c:	2b08      	cmp	r3, #8
 800093e:	d00f      	beq.n	8000960 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000940:	6863      	ldr	r3, [r4, #4]
 8000942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000946:	d040      	beq.n	80009ca <HAL_RCC_OscConfig+0xb6>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d154      	bne.n	80009f6 <HAL_RCC_OscConfig+0xe2>
 800094c:	4b99      	ldr	r3, [pc, #612]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e039      	b.n	80009d4 <HAL_RCC_OscConfig+0xc0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000960:	4b94      	ldr	r3, [pc, #592]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000968:	d0ea      	beq.n	8000940 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800096a:	4b92      	ldr	r3, [pc, #584]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000972:	d003      	beq.n	800097c <HAL_RCC_OscConfig+0x68>
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	f000 81ad 	beq.w	8000cd6 <HAL_RCC_OscConfig+0x3c2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800097c:	6823      	ldr	r3, [r4, #0]
 800097e:	f013 0f02 	tst.w	r3, #2
 8000982:	d075      	beq.n	8000a70 <HAL_RCC_OscConfig+0x15c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000984:	4b8b      	ldr	r3, [pc, #556]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f013 0f0c 	tst.w	r3, #12
 800098c:	d05e      	beq.n	8000a4c <HAL_RCC_OscConfig+0x138>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800098e:	4b89      	ldr	r3, [pc, #548]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 030c 	and.w	r3, r3, #12
 8000996:	2b08      	cmp	r3, #8
 8000998:	d053      	beq.n	8000a42 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800099a:	68e3      	ldr	r3, [r4, #12]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 808a 	beq.w	8000ab6 <HAL_RCC_OscConfig+0x1a2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009a2:	4a84      	ldr	r2, [pc, #528]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 80009a4:	6813      	ldr	r3, [r2, #0]
 80009a6:	f043 0301 	orr.w	r3, r3, #1
 80009aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009ac:	f7ff fe00 	bl	80005b0 <HAL_GetTick>
 80009b0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b2:	4b80      	ldr	r3, [pc, #512]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f013 0f02 	tst.w	r3, #2
 80009ba:	d173      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009bc:	f7ff fdf8 	bl	80005b0 <HAL_GetTick>
 80009c0:	1b40      	subs	r0, r0, r5
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9f5      	bls.n	80009b2 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 80009c6:	2003      	movs	r0, #3
 80009c8:	e188      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ca:	4a7a      	ldr	r2, [pc, #488]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 80009cc:	6813      	ldr	r3, [r2, #0]
 80009ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	b32b      	cbz	r3, 8000a24 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80009d8:	f7ff fdea 	bl	80005b0 <HAL_GetTick>
 80009dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009de:	4b75      	ldr	r3, [pc, #468]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80009e6:	d1c9      	bne.n	800097c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e8:	f7ff fde2 	bl	80005b0 <HAL_GetTick>
 80009ec:	1b40      	subs	r0, r0, r5
 80009ee:	2864      	cmp	r0, #100	; 0x64
 80009f0:	d9f5      	bls.n	80009de <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80009f2:	2003      	movs	r0, #3
 80009f4:	e172      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009fa:	d009      	beq.n	8000a10 <HAL_RCC_OscConfig+0xfc>
 80009fc:	4b6d      	ldr	r3, [pc, #436]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	e7e1      	b.n	80009d4 <HAL_RCC_OscConfig+0xc0>
 8000a10:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	e7d7      	b.n	80009d4 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8000a24:	f7ff fdc4 	bl	80005b0 <HAL_GetTick>
 8000a28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a2a:	4b62      	ldr	r3, [pc, #392]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000a32:	d0a3      	beq.n	800097c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a34:	f7ff fdbc 	bl	80005b0 <HAL_GetTick>
 8000a38:	1b40      	subs	r0, r0, r5
 8000a3a:	2864      	cmp	r0, #100	; 0x64
 8000a3c:	d9f5      	bls.n	8000a2a <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000a3e:	2003      	movs	r0, #3
 8000a40:	e14c      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a42:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000a4a:	d1a6      	bne.n	800099a <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a4c:	4b59      	ldr	r3, [pc, #356]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f013 0f02 	tst.w	r3, #2
 8000a54:	d004      	beq.n	8000a60 <HAL_RCC_OscConfig+0x14c>
 8000a56:	68e3      	ldr	r3, [r4, #12]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d001      	beq.n	8000a60 <HAL_RCC_OscConfig+0x14c>
        return HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	e13d      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a60:	4a54      	ldr	r2, [pc, #336]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a68:	6921      	ldr	r1, [r4, #16]
 8000a6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a6e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a70:	6823      	ldr	r3, [r4, #0]
 8000a72:	f013 0f08 	tst.w	r3, #8
 8000a76:	d046      	beq.n	8000b06 <HAL_RCC_OscConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a78:	6963      	ldr	r3, [r4, #20]
 8000a7a:	b383      	cbz	r3, 8000ade <HAL_RCC_OscConfig+0x1ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a7c:	4a4d      	ldr	r2, [pc, #308]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000a7e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a86:	f7ff fd93 	bl	80005b0 <HAL_GetTick>
 8000a8a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8c:	4b49      	ldr	r3, [pc, #292]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a90:	f013 0f02 	tst.w	r3, #2
 8000a94:	d137      	bne.n	8000b06 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a96:	f7ff fd8b 	bl	80005b0 <HAL_GetTick>
 8000a9a:	1b40      	subs	r0, r0, r5
 8000a9c:	2802      	cmp	r0, #2
 8000a9e:	d9f5      	bls.n	8000a8c <HAL_RCC_OscConfig+0x178>
        {
          return HAL_TIMEOUT;
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	e11b      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aa4:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000aa6:	6813      	ldr	r3, [r2, #0]
 8000aa8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000aac:	6921      	ldr	r1, [r4, #16]
 8000aae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e7dc      	b.n	8000a70 <HAL_RCC_OscConfig+0x15c>
        __HAL_RCC_HSI_DISABLE();
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000ab8:	6813      	ldr	r3, [r2, #0]
 8000aba:	f023 0301 	bic.w	r3, r3, #1
 8000abe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000ac0:	f7ff fd76 	bl	80005b0 <HAL_GetTick>
 8000ac4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ac6:	4b3b      	ldr	r3, [pc, #236]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f013 0f02 	tst.w	r3, #2
 8000ace:	d0cf      	beq.n	8000a70 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ad0:	f7ff fd6e 	bl	80005b0 <HAL_GetTick>
 8000ad4:	1b40      	subs	r0, r0, r5
 8000ad6:	2802      	cmp	r0, #2
 8000ad8:	d9f5      	bls.n	8000ac6 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000ada:	2003      	movs	r0, #3
 8000adc:	e0fe      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ade:	4a35      	ldr	r2, [pc, #212]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000ae0:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000ae2:	f023 0301 	bic.w	r3, r3, #1
 8000ae6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fd62 	bl	80005b0 <HAL_GetTick>
 8000aec:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000af2:	f013 0f02 	tst.w	r3, #2
 8000af6:	d006      	beq.n	8000b06 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000af8:	f7ff fd5a 	bl	80005b0 <HAL_GetTick>
 8000afc:	1b40      	subs	r0, r0, r5
 8000afe:	2802      	cmp	r0, #2
 8000b00:	d9f5      	bls.n	8000aee <HAL_RCC_OscConfig+0x1da>
        {
          return HAL_TIMEOUT;
 8000b02:	2003      	movs	r0, #3
 8000b04:	e0ea      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	f013 0f04 	tst.w	r3, #4
 8000b0c:	d07e      	beq.n	8000c0c <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000b16:	d11e      	bne.n	8000b56 <HAL_RCC_OscConfig+0x242>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b20:	641a      	str	r2, [r3, #64]	; 0x40
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b2c:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b2e:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <HAL_RCC_OscConfig+0x2a4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b36:	d010      	beq.n	8000b5a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b38:	68a3      	ldr	r3, [r4, #8]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d021      	beq.n	8000b82 <HAL_RCC_OscConfig+0x26e>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d13c      	bne.n	8000bbc <HAL_RCC_OscConfig+0x2a8>
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000b44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b46:	f022 0201 	bic.w	r2, r2, #1
 8000b4a:	671a      	str	r2, [r3, #112]	; 0x70
 8000b4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000b4e:	f022 0204 	bic.w	r2, r2, #4
 8000b52:	671a      	str	r2, [r3, #112]	; 0x70
 8000b54:	e01a      	b.n	8000b8c <HAL_RCC_OscConfig+0x278>
  FlagStatus pwrclkchanged = RESET;
 8000b56:	2500      	movs	r5, #0
 8000b58:	e7e9      	b.n	8000b2e <HAL_RCC_OscConfig+0x21a>
      PWR->CR1 |= PWR_CR1_DBP;
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_RCC_OscConfig+0x2a4>)
 8000b5c:	6813      	ldr	r3, [r2, #0]
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b62:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000b64:	f7ff fd24 	bl	80005b0 <HAL_GetTick>
 8000b68:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_RCC_OscConfig+0x2a4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000b72:	d1e1      	bne.n	8000b38 <HAL_RCC_OscConfig+0x224>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000b74:	f7ff fd1c 	bl	80005b0 <HAL_GetTick>
 8000b78:	1b80      	subs	r0, r0, r6
 8000b7a:	2864      	cmp	r0, #100	; 0x64
 8000b7c:	d9f5      	bls.n	8000b6a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8000b7e:	2003      	movs	r0, #3
 8000b80:	e0ac      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000b84:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b8c:	68a3      	ldr	r3, [r4, #8]
 8000b8e:	b35b      	cbz	r3, 8000be8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b90:	f7ff fd0e 	bl	80005b0 <HAL_GetTick>
 8000b94:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <HAL_RCC_OscConfig+0x2a0>)
 8000b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b9a:	f013 0f02 	tst.w	r3, #2
 8000b9e:	d134      	bne.n	8000c0a <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ba0:	f7ff fd06 	bl	80005b0 <HAL_GetTick>
 8000ba4:	1b80      	subs	r0, r0, r6
 8000ba6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d9f3      	bls.n	8000b96 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 8000bae:	2003      	movs	r0, #3
 8000bb0:	e094      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d009      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x2c0>
 8000bc0:	4b48      	ldr	r3, [pc, #288]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000bc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000bc4:	f022 0201 	bic.w	r2, r2, #1
 8000bc8:	671a      	str	r2, [r3, #112]	; 0x70
 8000bca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000bcc:	f022 0204 	bic.w	r2, r2, #4
 8000bd0:	671a      	str	r2, [r3, #112]	; 0x70
 8000bd2:	e7db      	b.n	8000b8c <HAL_RCC_OscConfig+0x278>
 8000bd4:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000bd8:	f042 0204 	orr.w	r2, r2, #4
 8000bdc:	671a      	str	r2, [r3, #112]	; 0x70
 8000bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000be0:	f042 0201 	orr.w	r2, r2, #1
 8000be4:	671a      	str	r2, [r3, #112]	; 0x70
 8000be6:	e7d1      	b.n	8000b8c <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000be8:	f7ff fce2 	bl	80005b0 <HAL_GetTick>
 8000bec:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bf2:	f013 0f02 	tst.w	r3, #2
 8000bf6:	d008      	beq.n	8000c0a <HAL_RCC_OscConfig+0x2f6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf8:	f7ff fcda 	bl	80005b0 <HAL_GetTick>
 8000bfc:	1b80      	subs	r0, r0, r6
 8000bfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d9f3      	bls.n	8000bee <HAL_RCC_OscConfig+0x2da>
        {
          return HAL_TIMEOUT;
 8000c06:	2003      	movs	r0, #3
 8000c08:	e068      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c0a:	b9f5      	cbnz	r5, 8000c4a <HAL_RCC_OscConfig+0x336>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c0c:	69a3      	ldr	r3, [r4, #24]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d063      	beq.n	8000cda <HAL_RCC_OscConfig+0x3c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c12:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000c14:	6892      	ldr	r2, [r2, #8]
 8000c16:	f002 020c 	and.w	r2, r2, #12
 8000c1a:	2a08      	cmp	r2, #8
 8000c1c:	d060      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x3cc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d019      	beq.n	8000c56 <HAL_RCC_OscConfig+0x342>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c22:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000c24:	6813      	ldr	r3, [r2, #0]
 8000c26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fcc0 	bl	80005b0 <HAL_GetTick>
 8000c30:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c3a:	d048      	beq.n	8000cce <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c3c:	f7ff fcb8 	bl	80005b0 <HAL_GetTick>
 8000c40:	1b00      	subs	r0, r0, r4
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9f5      	bls.n	8000c32 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8000c46:	2003      	movs	r0, #3
 8000c48:	e048      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c4a:	4a26      	ldr	r2, [pc, #152]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000c4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
 8000c54:	e7da      	b.n	8000c0c <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000c58:	6813      	ldr	r3, [r2, #0]
 8000c5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c5e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c60:	f7ff fca6 	bl	80005b0 <HAL_GetTick>
 8000c64:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c6e:	d006      	beq.n	8000c7e <HAL_RCC_OscConfig+0x36a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c70:	f7ff fc9e 	bl	80005b0 <HAL_GetTick>
 8000c74:	1b40      	subs	r0, r0, r5
 8000c76:	2802      	cmp	r0, #2
 8000c78:	d9f5      	bls.n	8000c66 <HAL_RCC_OscConfig+0x352>
            return HAL_TIMEOUT;
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	e02e      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c7e:	69e3      	ldr	r3, [r4, #28]
 8000c80:	6a22      	ldr	r2, [r4, #32]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000c8a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c8c:	0852      	lsrs	r2, r2, #1
 8000c8e:	3a01      	subs	r2, #1
 8000c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c96:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000c9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c9c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000ca0:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000ca2:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ca4:	6813      	ldr	r3, [r2, #0]
 8000ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000caa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000cac:	f7ff fc80 	bl	80005b0 <HAL_GetTick>
 8000cb0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <HAL_RCC_OscConfig+0x3d0>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000cba:	d106      	bne.n	8000cca <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cbc:	f7ff fc78 	bl	80005b0 <HAL_GetTick>
 8000cc0:	1b00      	subs	r0, r0, r4
 8000cc2:	2802      	cmp	r0, #2
 8000cc4:	d9f5      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x39e>
            return HAL_TIMEOUT;
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	e008      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000cca:	2000      	movs	r0, #0
 8000ccc:	e006      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e004      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
    return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
}
 8000cd4:	4770      	bx	lr
        return HAL_ERROR;
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	e000      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
  return HAL_OK;
 8000cda:	2000      	movs	r0, #0
}
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	e7fb      	b.n	8000cdc <HAL_RCC_OscConfig+0x3c8>
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	f003 030c 	and.w	r3, r3, #12
 8000cf0:	2b04      	cmp	r3, #4
 8000cf2:	d044      	beq.n	8000d7e <HAL_RCC_GetSysClockFreq+0x96>
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d001      	beq.n	8000cfc <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000cf8:	4823      	ldr	r0, [pc, #140]	; (8000d88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000cfa:	4770      	bx	lr
{
 8000cfc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d0e:	d013      	beq.n	8000d38 <HAL_RCC_GetSysClockFreq+0x50>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d12:	6859      	ldr	r1, [r3, #4]
 8000d14:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000d18:	2300      	movs	r3, #0
 8000d1a:	481c      	ldr	r0, [pc, #112]	; (8000d8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8000d1c:	fba1 0100 	umull	r0, r1, r1, r0
 8000d20:	f7ff fa8a 	bl	8000238 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000d30:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d34:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8000d40:	461e      	mov	r6, r3
 8000d42:	2700      	movs	r7, #0
 8000d44:	015c      	lsls	r4, r3, #5
 8000d46:	2500      	movs	r5, #0
 8000d48:	1ae4      	subs	r4, r4, r3
 8000d4a:	eb65 0507 	sbc.w	r5, r5, r7
 8000d4e:	01a9      	lsls	r1, r5, #6
 8000d50:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8000d54:	01a0      	lsls	r0, r4, #6
 8000d56:	1b00      	subs	r0, r0, r4
 8000d58:	eb61 0105 	sbc.w	r1, r1, r5
 8000d5c:	00cb      	lsls	r3, r1, #3
 8000d5e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000d62:	00c4      	lsls	r4, r0, #3
 8000d64:	19a0      	adds	r0, r4, r6
 8000d66:	eb43 0107 	adc.w	r1, r3, r7
 8000d6a:	028b      	lsls	r3, r1, #10
 8000d6c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8000d70:	0284      	lsls	r4, r0, #10
 8000d72:	4620      	mov	r0, r4
 8000d74:	4619      	mov	r1, r3
 8000d76:	2300      	movs	r3, #0
 8000d78:	f7ff fa5e 	bl	8000238 <__aeabi_uldivmod>
 8000d7c:	e7d2      	b.n	8000d24 <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = HSE_VALUE;
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	00f42400 	.word	0x00f42400
 8000d8c:	018cba80 	.word	0x018cba80

08000d90 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000d90:	2800      	cmp	r0, #0
 8000d92:	f000 80a2 	beq.w	8000eda <HAL_RCC_ClockConfig+0x14a>
{
 8000d96:	b570      	push	{r4, r5, r6, lr}
 8000d98:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d9a:	4b52      	ldr	r3, [pc, #328]	; (8000ee4 <HAL_RCC_ClockConfig+0x154>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d20c      	bcs.n	8000dc0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000da6:	4a4f      	ldr	r2, [pc, #316]	; (8000ee4 <HAL_RCC_ClockConfig+0x154>)
 8000da8:	6813      	ldr	r3, [r2, #0]
 8000daa:	f023 030f 	bic.w	r3, r3, #15
 8000dae:	430b      	orrs	r3, r1
 8000db0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f003 030f 	and.w	r3, r3, #15
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d001      	beq.n	8000dc0 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8000dbc:	2001      	movs	r0, #1
}
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	f013 0f02 	tst.w	r3, #2
 8000dc6:	d017      	beq.n	8000df8 <HAL_RCC_ClockConfig+0x68>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc8:	f013 0f04 	tst.w	r3, #4
 8000dcc:	d004      	beq.n	8000dd8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000dce:	4a46      	ldr	r2, [pc, #280]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000dd0:	6893      	ldr	r3, [r2, #8]
 8000dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000dd6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd8:	6823      	ldr	r3, [r4, #0]
 8000dda:	f013 0f08 	tst.w	r3, #8
 8000dde:	d004      	beq.n	8000dea <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000de0:	4a41      	ldr	r2, [pc, #260]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000de2:	6893      	ldr	r3, [r2, #8]
 8000de4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000de8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dea:	4a3f      	ldr	r2, [pc, #252]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000dec:	6893      	ldr	r3, [r2, #8]
 8000dee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000df2:	68a0      	ldr	r0, [r4, #8]
 8000df4:	4303      	orrs	r3, r0
 8000df6:	6093      	str	r3, [r2, #8]
 8000df8:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	f013 0f01 	tst.w	r3, #1
 8000e00:	d031      	beq.n	8000e66 <HAL_RCC_ClockConfig+0xd6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e02:	6863      	ldr	r3, [r4, #4]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d020      	beq.n	8000e4a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d025      	beq.n	8000e58 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	4a36      	ldr	r2, [pc, #216]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	f012 0f02 	tst.w	r2, #2
 8000e14:	d063      	beq.n	8000ede <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e16:	4934      	ldr	r1, [pc, #208]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000e18:	688a      	ldr	r2, [r1, #8]
 8000e1a:	f022 0203 	bic.w	r2, r2, #3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000e22:	f7ff fbc5 	bl	80005b0 <HAL_GetTick>
 8000e26:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e28:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	6862      	ldr	r2, [r4, #4]
 8000e32:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e36:	d016      	beq.n	8000e66 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f7ff fbba 	bl	80005b0 <HAL_GetTick>
 8000e3c:	1b80      	subs	r0, r0, r6
 8000e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e42:	4298      	cmp	r0, r3
 8000e44:	d9f0      	bls.n	8000e28 <HAL_RCC_ClockConfig+0x98>
        return HAL_TIMEOUT;
 8000e46:	2003      	movs	r0, #3
 8000e48:	e7b9      	b.n	8000dbe <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4a:	4a27      	ldr	r2, [pc, #156]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000e52:	d1e0      	bne.n	8000e16 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000e54:	2001      	movs	r0, #1
 8000e56:	e7b2      	b.n	8000dbe <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e60:	d1d9      	bne.n	8000e16 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8000e62:	2001      	movs	r0, #1
 8000e64:	e7ab      	b.n	8000dbe <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_RCC_ClockConfig+0x154>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	42ab      	cmp	r3, r5
 8000e70:	d90c      	bls.n	8000e8c <HAL_RCC_ClockConfig+0xfc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e72:	4a1c      	ldr	r2, [pc, #112]	; (8000ee4 <HAL_RCC_ClockConfig+0x154>)
 8000e74:	6813      	ldr	r3, [r2, #0]
 8000e76:	f023 030f 	bic.w	r3, r3, #15
 8000e7a:	432b      	orrs	r3, r5
 8000e7c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	42ab      	cmp	r3, r5
 8000e86:	d001      	beq.n	8000e8c <HAL_RCC_ClockConfig+0xfc>
      return HAL_ERROR;
 8000e88:	2001      	movs	r0, #1
 8000e8a:	e798      	b.n	8000dbe <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	f013 0f04 	tst.w	r3, #4
 8000e92:	d006      	beq.n	8000ea2 <HAL_RCC_ClockConfig+0x112>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000e96:	6893      	ldr	r3, [r2, #8]
 8000e98:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000e9c:	68e1      	ldr	r1, [r4, #12]
 8000e9e:	430b      	orrs	r3, r1
 8000ea0:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	f013 0f08 	tst.w	r3, #8
 8000ea8:	d007      	beq.n	8000eba <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000eac:	6893      	ldr	r3, [r2, #8]
 8000eae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000eb2:	6921      	ldr	r1, [r4, #16]
 8000eb4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000eb8:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000eba:	f7ff ff15 	bl	8000ce8 <HAL_RCC_GetSysClockFreq>
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_RCC_ClockConfig+0x158>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ec6:	4a09      	ldr	r2, [pc, #36]	; (8000eec <HAL_RCC_ClockConfig+0x15c>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	40d8      	lsrs	r0, r3
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_RCC_ClockConfig+0x160>)
 8000ece:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fb31 	bl	8000538 <HAL_InitTick>
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e771      	b.n	8000dbe <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
}
 8000edc:	4770      	bx	lr
        return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	e76d      	b.n	8000dbe <HAL_RCC_ClockConfig+0x2e>
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	08001238 	.word	0x08001238
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b530      	push	{r4, r5, lr}
 8000ef6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	2400      	movs	r4, #0
 8000efa:	9403      	str	r4, [sp, #12]
 8000efc:	9404      	str	r4, [sp, #16]
 8000efe:	9405      	str	r4, [sp, #20]
 8000f00:	9406      	str	r4, [sp, #24]
 8000f02:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_GPIO_Init+0x60>)
 8000f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f10:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f14:	9201      	str	r2, [sp, #4]
 8000f16:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f1a:	f042 0210 	orr.w	r2, r2, #16
 8000f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000f2a:	4d0b      	ldr	r5, [pc, #44]	; (8000f58 <MX_GPIO_Init+0x64>)
 8000f2c:	4622      	mov	r2, r4
 8000f2e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000f32:	4628      	mov	r0, r5
 8000f34:	f7ff fca0 	bl	8000878 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE11 PE12 PE13 PE14 
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000f38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f3c:	9303      	str	r3, [sp, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f46:	a903      	add	r1, sp, #12
 8000f48:	4628      	mov	r0, r5
 8000f4a:	f7ff fba5 	bl	8000698 <HAL_GPIO_Init>

}
 8000f4e:	b009      	add	sp, #36	; 0x24
 8000f50:	bd30      	pop	{r4, r5, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40021000 	.word	0x40021000

08000f5c <SystemClock_Config>:
{
 8000f5c:	b530      	push	{r4, r5, lr}
 8000f5e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f60:	2234      	movs	r2, #52	; 0x34
 8000f62:	2100      	movs	r1, #0
 8000f64:	a807      	add	r0, sp, #28
 8000f66:	f000 f953 	bl	8001210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f6a:	2400      	movs	r4, #0
 8000f6c:	9402      	str	r4, [sp, #8]
 8000f6e:	9403      	str	r4, [sp, #12]
 8000f70:	9404      	str	r4, [sp, #16]
 8000f72:	9405      	str	r4, [sp, #20]
 8000f74:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <SystemClock_Config+0x8c>)
 8000f78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8a:	4b18      	ldr	r3, [pc, #96]	; (8000fec <SystemClock_Config+0x90>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fa2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fa6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa8:	2502      	movs	r5, #2
 8000faa:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000fb2:	230d      	movs	r3, #13
 8000fb4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fb6:	23d8      	movs	r3, #216	; 0xd8
 8000fb8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fba:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fbc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbe:	a807      	add	r0, sp, #28
 8000fc0:	f7ff fca8 	bl	8000914 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc4:	f7ff fc68 	bl	8000898 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fda:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fdc:	2107      	movs	r1, #7
 8000fde:	a802      	add	r0, sp, #8
 8000fe0:	f7ff fed6 	bl	8000d90 <HAL_RCC_ClockConfig>
}
 8000fe4:	b015      	add	sp, #84	; 0x54
 8000fe6:	bd30      	pop	{r4, r5, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <main>:
{
 8000ff0:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 8000ff2:	f7ff fac5 	bl	8000580 <HAL_Init>
  SystemClock_Config();
 8000ff6:	f7ff ffb1 	bl	8000f5c <SystemClock_Config>
  MX_GPIO_Init();
 8000ffa:	f7ff ff7b 	bl	8000ef4 <MX_GPIO_Init>
  for(int i = 0; i < 10; i++){
 8000ffe:	2500      	movs	r5, #0
 8001000:	e01d      	b.n	800103e <main+0x4e>
  		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_11);
 8001002:	4c35      	ldr	r4, [pc, #212]	; (80010d8 <main+0xe8>)
 8001004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001008:	4620      	mov	r0, r4
 800100a:	f7ff fc3b 	bl	8000884 <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_12);
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	4620      	mov	r0, r4
 8001014:	f7ff fc36 	bl	8000884 <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_13);
 8001018:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800101c:	4620      	mov	r0, r4
 800101e:	f7ff fc31 	bl	8000884 <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_14);
 8001022:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001026:	4620      	mov	r0, r4
 8001028:	f7ff fc2c 	bl	8000884 <HAL_GPIO_TogglePin>
  		HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 800102c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001030:	4620      	mov	r0, r4
 8001032:	f7ff fc27 	bl	8000884 <HAL_GPIO_TogglePin>
  		HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	; 0x64
 8001038:	f7ff fac0 	bl	80005bc <HAL_Delay>
  for(int i = 0; i < 10; i++){
 800103c:	3501      	adds	r5, #1
 800103e:	2d09      	cmp	r5, #9
 8001040:	dddf      	ble.n	8001002 <main+0x12>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13, GPIO_PIN_SET);
 8001042:	4c25      	ldr	r4, [pc, #148]	; (80010d8 <main+0xe8>)
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104a:	4620      	mov	r0, r4
 800104c:	f7ff fc14 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 8001050:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001054:	f7ff fab2 	bl	80005bc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105e:	4620      	mov	r0, r4
 8001060:	f7ff fc0a 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106a:	4620      	mov	r0, r4
 800106c:	f7ff fc04 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	4620      	mov	r0, r4
 8001078:	f7ff fbfe 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 800107c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001080:	f7ff fa9c 	bl	80005bc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800108a:	4620      	mov	r0, r4
 800108c:	f7ff fbf4 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_14, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001096:	4620      	mov	r0, r4
 8001098:	f7ff fbee 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010a2:	4620      	mov	r0, r4
 80010a4:	f7ff fbe8 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff fbe2 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_Delay(300);
 80010b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010b8:	f7ff fa80 	bl	80005bc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff fbd8 	bl	8000878 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ce:	4620      	mov	r0, r4
 80010d0:	f7ff fbd2 	bl	8000878 <HAL_GPIO_WritePin>
 80010d4:	e7b5      	b.n	8001042 <main+0x52>
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010dc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_MspInit+0x2c>)
 80010e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40
 80010e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ea:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010ee:	9200      	str	r2, [sp, #0]
 80010f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
 80010fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001104:	b002      	add	sp, #8
 8001106:	4770      	bx	lr
 8001108:	40023800 	.word	0x40023800

0800110c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800110c:	4770      	bx	lr

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	e7fe      	b.n	800110e <HardFault_Handler>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler>

08001116 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	4770      	bx	lr

08001118 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001118:	4770      	bx	lr

0800111a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f7ff fa3b 	bl	8000598 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bd08      	pop	{r3, pc}

08001124 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001124:	b410      	push	{r4}
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <SystemInit+0x40>)
 8001128:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <SystemInit+0x44>)
 8001136:	6819      	ldr	r1, [r3, #0]
 8001138:	f041 0101 	orr.w	r1, r1, #1
 800113c:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800113e:	2000      	movs	r0, #0
 8001140:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	4909      	ldr	r1, [pc, #36]	; (800116c <SystemInit+0x48>)
 8001146:	4021      	ands	r1, r4
 8001148:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800114a:	4909      	ldr	r1, [pc, #36]	; (8001170 <SystemInit+0x4c>)
 800114c:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001154:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001156:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001158:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800115c:	6093      	str	r3, [r2, #8]
#endif
}
 800115e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000ed00 	.word	0xe000ed00
 8001168:	40023800 	.word	0x40023800
 800116c:	fef6ffff 	.word	0xfef6ffff
 8001170:	24003010 	.word	0x24003010

08001174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800117a:	e003      	b.n	8001184 <LoopCopyDataInit>

0800117c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800117e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001182:	3104      	adds	r1, #4

08001184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001184:	480b      	ldr	r0, [pc, #44]	; (80011b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800118a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800118c:	d3f6      	bcc.n	800117c <CopyDataInit>
  ldr  r2, =_sbss
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001190:	e002      	b.n	8001198 <LoopFillZerobss>

08001192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001194:	f842 3b04 	str.w	r3, [r2], #4

08001198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800119a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800119c:	d3f9      	bcc.n	8001192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119e:	f7ff ffc1 	bl	8001124 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a2:	f000 f811 	bl	80011c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a6:	f7ff ff23 	bl	8000ff0 <main>
  bx  lr    
 80011aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80011b0:	08001260 	.word	0x08001260
  ldr  r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011b8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80011bc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80011c0:	2000002c 	.word	0x2000002c

080011c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC_IRQHandler>
	...

080011c8 <__libc_init_array>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	4e0d      	ldr	r6, [pc, #52]	; (8001200 <__libc_init_array+0x38>)
 80011cc:	4c0d      	ldr	r4, [pc, #52]	; (8001204 <__libc_init_array+0x3c>)
 80011ce:	1ba4      	subs	r4, r4, r6
 80011d0:	10a4      	asrs	r4, r4, #2
 80011d2:	2500      	movs	r5, #0
 80011d4:	42a5      	cmp	r5, r4
 80011d6:	d109      	bne.n	80011ec <__libc_init_array+0x24>
 80011d8:	4e0b      	ldr	r6, [pc, #44]	; (8001208 <__libc_init_array+0x40>)
 80011da:	4c0c      	ldr	r4, [pc, #48]	; (800120c <__libc_init_array+0x44>)
 80011dc:	f000 f820 	bl	8001220 <_init>
 80011e0:	1ba4      	subs	r4, r4, r6
 80011e2:	10a4      	asrs	r4, r4, #2
 80011e4:	2500      	movs	r5, #0
 80011e6:	42a5      	cmp	r5, r4
 80011e8:	d105      	bne.n	80011f6 <__libc_init_array+0x2e>
 80011ea:	bd70      	pop	{r4, r5, r6, pc}
 80011ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011f0:	4798      	blx	r3
 80011f2:	3501      	adds	r5, #1
 80011f4:	e7ee      	b.n	80011d4 <__libc_init_array+0xc>
 80011f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011fa:	4798      	blx	r3
 80011fc:	3501      	adds	r5, #1
 80011fe:	e7f2      	b.n	80011e6 <__libc_init_array+0x1e>
 8001200:	08001258 	.word	0x08001258
 8001204:	08001258 	.word	0x08001258
 8001208:	08001258 	.word	0x08001258
 800120c:	0800125c 	.word	0x0800125c

08001210 <memset>:
 8001210:	4402      	add	r2, r0
 8001212:	4603      	mov	r3, r0
 8001214:	4293      	cmp	r3, r2
 8001216:	d100      	bne.n	800121a <memset+0xa>
 8001218:	4770      	bx	lr
 800121a:	f803 1b01 	strb.w	r1, [r3], #1
 800121e:	e7f9      	b.n	8001214 <memset+0x4>

08001220 <_init>:
 8001220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001222:	bf00      	nop
 8001224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001226:	bc08      	pop	{r3}
 8001228:	469e      	mov	lr, r3
 800122a:	4770      	bx	lr

0800122c <_fini>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr
