
ACU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080037a0  080037a0  000137a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037b0  080037b0  000137b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037b8  080037b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001594  2000000c  080037cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015a0  080037cc  000215a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdfb  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d06  00000000  00000000  0002ce35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002eb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025030  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e9e  00000000  00000000  000553c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9757  00000000  00000000  0005e266  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001479bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033dc  00000000  00000000  00147a38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003788 	.word	0x08003788

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003788 	.word	0x08003788

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fe7f 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f002 fef2 	bl	8003330 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fe99 	bl	80012aa <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 fe61 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000030 	.word	0x20000030

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000030 	.word	0x20000030

080005f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e0ed      	b.n	80007e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d102      	bne.n	8000618 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f002 feb0 	bl	8003378 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f022 0202 	bic.w	r2, r2, #2
 8000626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000628:	f7ff ffd8 	bl	80005dc <HAL_GetTick>
 800062c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800062e:	e012      	b.n	8000656 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000630:	f7ff ffd4 	bl	80005dc <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b0a      	cmp	r3, #10
 800063c:	d90b      	bls.n	8000656 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2205      	movs	r2, #5
 800064e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e0c5      	b.n	80007e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1e5      	bne.n	8000630 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f042 0201 	orr.w	r2, r2, #1
 8000672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000674:	f7ff ffb2 	bl	80005dc <HAL_GetTick>
 8000678:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800067a:	e012      	b.n	80006a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800067c:	f7ff ffae 	bl	80005dc <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	2b0a      	cmp	r3, #10
 8000688:	d90b      	bls.n	80006a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2205      	movs	r2, #5
 800069a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e09f      	b.n	80007e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0e5      	beq.n	800067c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7e1b      	ldrb	r3, [r3, #24]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d108      	bne.n	80006ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	e007      	b.n	80006da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7e5b      	ldrb	r3, [r3, #25]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d108      	bne.n	80006f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	e007      	b.n	8000704 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000702:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7e9b      	ldrb	r3, [r3, #26]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d108      	bne.n	800071e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f042 0220 	orr.w	r2, r2, #32
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	e007      	b.n	800072e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f022 0220 	bic.w	r2, r2, #32
 800072c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7edb      	ldrb	r3, [r3, #27]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d108      	bne.n	8000748 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f022 0210 	bic.w	r2, r2, #16
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	e007      	b.n	8000758 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0210 	orr.w	r2, r2, #16
 8000756:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7f1b      	ldrb	r3, [r3, #28]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d108      	bne.n	8000772 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0208 	orr.w	r2, r2, #8
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	e007      	b.n	8000782 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f022 0208 	bic.w	r2, r2, #8
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7f5b      	ldrb	r3, [r3, #29]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d108      	bne.n	800079c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 0204 	orr.w	r2, r2, #4
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e007      	b.n	80007ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 0204 	bic.w	r2, r2, #4
 80007aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	ea42 0103 	orr.w	r1, r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000802:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000804:	7cfb      	ldrb	r3, [r7, #19]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d003      	beq.n	8000812 <HAL_CAN_ConfigFilter+0x26>
 800080a:	7cfb      	ldrb	r3, [r7, #19]
 800080c:	2b02      	cmp	r3, #2
 800080e:	f040 80c7 	bne.w	80009a0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a69      	ldr	r2, [pc, #420]	; (80009bc <HAL_CAN_ConfigFilter+0x1d0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d001      	beq.n	8000820 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800081c:	4b68      	ldr	r3, [pc, #416]	; (80009c0 <HAL_CAN_ConfigFilter+0x1d4>)
 800081e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000826:	f043 0201 	orr.w	r2, r3, #1
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	4a63      	ldr	r2, [pc, #396]	; (80009c0 <HAL_CAN_ConfigFilter+0x1d4>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d111      	bne.n	800085c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800083e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	021b      	lsls	r3, r3, #8
 8000854:	431a      	orrs	r2, r3
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	f003 031f 	and.w	r3, r3, #31
 8000864:	2201      	movs	r2, #1
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	43db      	mvns	r3, r3
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d123      	bne.n	80008ce <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	43db      	mvns	r3, r3
 8000890:	401a      	ands	r2, r3
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008a4:	683a      	ldr	r2, [r7, #0]
 80008a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3248      	adds	r2, #72	; 0x48
 80008ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008c4:	6979      	ldr	r1, [r7, #20]
 80008c6:	3348      	adds	r3, #72	; 0x48
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	440b      	add	r3, r1
 80008cc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d122      	bne.n	800091c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	431a      	orrs	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008f6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	3248      	adds	r2, #72	; 0x48
 80008fc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000910:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000912:	6979      	ldr	r1, [r7, #20]
 8000914:	3348      	adds	r3, #72	; 0x48
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	440b      	add	r3, r1
 800091a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	43db      	mvns	r3, r3
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000936:	e007      	b.n	8000948 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	431a      	orrs	r2, r3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	691b      	ldr	r3, [r3, #16]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d109      	bne.n	8000964 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	43db      	mvns	r3, r3
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000962:	e007      	b.n	8000974 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	431a      	orrs	r2, r3
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	6a1b      	ldr	r3, [r3, #32]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d107      	bne.n	800098c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	431a      	orrs	r2, r3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000992:	f023 0201 	bic.w	r2, r3, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	e006      	b.n	80009ae <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
  }
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40003400 	.word	0x40003400
 80009c0:	40006400 	.word	0x40006400

080009c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d12e      	bne.n	8000a36 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2202      	movs	r2, #2
 80009dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0201 	bic.w	r2, r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009f0:	f7ff fdf4 	bl	80005dc <HAL_GetTick>
 80009f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80009f6:	e012      	b.n	8000a1e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009f8:	f7ff fdf0 	bl	80005dc <HAL_GetTick>
 80009fc:	4602      	mov	r2, r0
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	2b0a      	cmp	r3, #10
 8000a04:	d90b      	bls.n	8000a1e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2205      	movs	r2, #5
 8000a16:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e012      	b.n	8000a44 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1e5      	bne.n	80009f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a32:	2300      	movs	r3, #0
 8000a34:	e006      	b.n	8000a44 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
  }
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	; 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
 8000a58:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a60:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a6a:	7ffb      	ldrb	r3, [r7, #31]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d003      	beq.n	8000a78 <HAL_CAN_AddTxMessage+0x2c>
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	f040 80b8 	bne.w	8000be8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10a      	bne.n	8000a98 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d105      	bne.n	8000a98 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 80a0 	beq.w	8000bd8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	0e1b      	lsrs	r3, r3, #24
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d907      	bls.n	8000ab8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e09e      	b.n	8000bf6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ab8:	2201      	movs	r2, #1
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	409a      	lsls	r2, r3
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d10d      	bne.n	8000ae6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ad4:	68f9      	ldr	r1, [r7, #12]
 8000ad6:	6809      	ldr	r1, [r1, #0]
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3318      	adds	r3, #24
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	440b      	add	r3, r1
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e00f      	b.n	8000b06 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000af0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000af6:	68f9      	ldr	r1, [r7, #12]
 8000af8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000afa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3318      	adds	r3, #24
 8000b00:	011b      	lsls	r3, r3, #4
 8000b02:	440b      	add	r3, r1
 8000b04:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6819      	ldr	r1, [r3, #0]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3318      	adds	r3, #24
 8000b12:	011b      	lsls	r3, r3, #4
 8000b14:	440b      	add	r3, r1
 8000b16:	3304      	adds	r3, #4
 8000b18:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	7d1b      	ldrb	r3, [r3, #20]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d111      	bne.n	8000b46 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3318      	adds	r3, #24
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3304      	adds	r3, #4
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	6811      	ldr	r1, [r2, #0]
 8000b36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3318      	adds	r3, #24
 8000b3e:	011b      	lsls	r3, r3, #4
 8000b40:	440b      	add	r3, r1
 8000b42:	3304      	adds	r3, #4
 8000b44:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3307      	adds	r3, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	061a      	lsls	r2, r3, #24
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	3306      	adds	r3, #6
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3305      	adds	r3, #5
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	4313      	orrs	r3, r2
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	3204      	adds	r2, #4
 8000b66:	7812      	ldrb	r2, [r2, #0]
 8000b68:	4610      	mov	r0, r2
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	6811      	ldr	r1, [r2, #0]
 8000b6e:	ea43 0200 	orr.w	r2, r3, r0
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	440b      	add	r3, r1
 8000b78:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b7c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	3303      	adds	r3, #3
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	061a      	lsls	r2, r3, #24
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	3302      	adds	r3, #2
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	041b      	lsls	r3, r3, #16
 8000b8e:	431a      	orrs	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3301      	adds	r3, #1
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	7812      	ldrb	r2, [r2, #0]
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	6811      	ldr	r1, [r2, #0]
 8000ba4:	ea43 0200 	orr.w	r2, r3, r0
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	440b      	add	r3, r1
 8000bae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000bb2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3318      	adds	r3, #24
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	4413      	add	r3, r2
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	6811      	ldr	r1, [r2, #0]
 8000bc6:	f043 0201 	orr.w	r2, r3, #1
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3318      	adds	r3, #24
 8000bce:	011b      	lsls	r3, r3, #4
 8000bd0:	440b      	add	r3, r1
 8000bd2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	e00e      	b.n	8000bf6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bdc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e006      	b.n	8000bf6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
  }
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c12:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d002      	beq.n	8000c20 <HAL_CAN_ActivateNotification+0x1e>
 8000c1a:	7bfb      	ldrb	r3, [r7, #15]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d109      	bne.n	8000c34 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6959      	ldr	r1, [r3, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e006      	b.n	8000c42 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
  }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b08a      	sub	sp, #40	; 0x28
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d07c      	beq.n	8000d8e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d023      	beq.n	8000ce6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	f003 0302 	and.w	r3, r3, #2
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f002 fa71 	bl	8003198 <HAL_CAN_TxMailbox0CompleteCallback>
 8000cb6:	e016      	b.n	8000ce6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cca:	e00c      	b.n	8000ce6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cde:	e002      	b.n	8000ce6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f000 f979 	bl	8000fd8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d024      	beq.n	8000d3a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 f953 	bl	8000fb0 <HAL_CAN_TxMailbox1CompleteCallback>
 8000d0a:	e016      	b.n	8000d3a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d1e:	e00c      	b.n	8000d3a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d004      	beq.n	8000d34 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
 8000d32:	e002      	b.n	8000d3a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f959 	bl	8000fec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d024      	beq.n	8000d8e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f933 	bl	8000fc4 <HAL_CAN_TxMailbox2CompleteCallback>
 8000d5e:	e016      	b.n	8000d8e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d004      	beq.n	8000d74 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
 8000d72:	e00c      	b.n	8000d8e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d004      	beq.n	8000d88 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
 8000d86:	e002      	b.n	8000d8e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f939 	bl	8001000 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00c      	beq.n	8000db2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0310 	and.w	r3, r3, #16
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d007      	beq.n	8000db2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2210      	movs	r2, #16
 8000db0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00b      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2208      	movs	r2, #8
 8000dcc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f92a 	bl	8001028 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000dd4:	6a3b      	ldr	r3, [r7, #32]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d009      	beq.n	8000df2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d002      	beq.n	8000df2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f911 	bl	8001014 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000df2:	6a3b      	ldr	r3, [r7, #32]
 8000df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d00c      	beq.n	8000e16 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	f003 0310 	and.w	r3, r3, #16
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d007      	beq.n	8000e16 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2210      	movs	r2, #16
 8000e14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000e16:	6a3b      	ldr	r3, [r7, #32]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d00b      	beq.n	8000e38 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	f003 0308 	and.w	r3, r3, #8
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2208      	movs	r2, #8
 8000e30:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f90c 	bl	8001050 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000e38:	6a3b      	ldr	r3, [r7, #32]
 8000e3a:	f003 0310 	and.w	r3, r3, #16
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d009      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d002      	beq.n	8000e56 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 f8f3 	bl	800103c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00b      	beq.n	8000e78 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d006      	beq.n	8000e78 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2210      	movs	r2, #16
 8000e70:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f8f6 	bl	8001064 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00b      	beq.n	8000e9a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0308 	and.w	r3, r3, #8
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d006      	beq.n	8000e9a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2208      	movs	r2, #8
 8000e92:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f8ef 	bl	8001078 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d075      	beq.n	8000f90 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d06c      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000eae:	6a3b      	ldr	r3, [r7, #32]
 8000eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d008      	beq.n	8000eca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d008      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ee6:	6a3b      	ldr	r3, [r7, #32]
 8000ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d008      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d03d      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d038      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000f1c:	2b30      	cmp	r3, #48	; 0x30
 8000f1e:	d017      	beq.n	8000f50 <HAL_CAN_IRQHandler+0x302>
 8000f20:	2b30      	cmp	r3, #48	; 0x30
 8000f22:	d804      	bhi.n	8000f2e <HAL_CAN_IRQHandler+0x2e0>
 8000f24:	2b10      	cmp	r3, #16
 8000f26:	d009      	beq.n	8000f3c <HAL_CAN_IRQHandler+0x2ee>
 8000f28:	2b20      	cmp	r3, #32
 8000f2a:	d00c      	beq.n	8000f46 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000f2c:	e024      	b.n	8000f78 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000f2e:	2b50      	cmp	r3, #80	; 0x50
 8000f30:	d018      	beq.n	8000f64 <HAL_CAN_IRQHandler+0x316>
 8000f32:	2b60      	cmp	r3, #96	; 0x60
 8000f34:	d01b      	beq.n	8000f6e <HAL_CAN_IRQHandler+0x320>
 8000f36:	2b40      	cmp	r3, #64	; 0x40
 8000f38:	d00f      	beq.n	8000f5a <HAL_CAN_IRQHandler+0x30c>
            break;
 8000f3a:	e01d      	b.n	8000f78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f44:	e018      	b.n	8000f78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	f043 0310 	orr.w	r3, r3, #16
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f4e:	e013      	b.n	8000f78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f58:	e00e      	b.n	8000f78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f62:	e009      	b.n	8000f78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f6c:	e004      	b.n	8000f78 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000f76:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	699a      	ldr	r2, [r3, #24]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f86:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f872 	bl	800108c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <__NVIC_SetPriorityGrouping+0x40>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x40>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00
 80010e4:	05fa0000 	.word	0x05fa0000

080010e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db0b      	blt.n	800112e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <__NVIC_EnableIRQ+0x38>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001220:	f7ff ff8e 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff29 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff3e 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff8e 	bl	8001194 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5d 	bl	8001140 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff31 	bl	8001104 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa2 	bl	80011fc <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80012d2:	2300      	movs	r3, #0
 80012d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80012da:	2300      	movs	r3, #0
 80012dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	e175      	b.n	80015d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80012e4:	2201      	movs	r2, #1
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8164 	bne.w	80015ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x4e>
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b12      	cmp	r3, #18
 8001310:	d123      	bne.n	800135a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	69b9      	ldr	r1, [r7, #24]
 8001356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4013      	ands	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d00b      	beq.n	80013ae <HAL_GPIO_Init+0xea>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d007      	beq.n	80013ae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a2:	2b11      	cmp	r3, #17
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d130      	bne.n	8001410 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	68da      	ldr	r2, [r3, #12]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e4:	2201      	movs	r2, #1
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 0201 	and.w	r2, r3, #1
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80be 	beq.w	80015ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_GPIO_Init+0x320>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a64      	ldr	r2, [pc, #400]	; (80015e4 <HAL_GPIO_Init+0x320>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b62      	ldr	r3, [pc, #392]	; (80015e4 <HAL_GPIO_Init+0x320>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001466:	4a60      	ldr	r2, [pc, #384]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a57      	ldr	r2, [pc, #348]	; (80015ec <HAL_GPIO_Init+0x328>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d037      	beq.n	8001502 <HAL_GPIO_Init+0x23e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a56      	ldr	r2, [pc, #344]	; (80015f0 <HAL_GPIO_Init+0x32c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_GPIO_Init+0x23a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <HAL_GPIO_Init+0x330>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02b      	beq.n	80014fa <HAL_GPIO_Init+0x236>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a54      	ldr	r2, [pc, #336]	; (80015f8 <HAL_GPIO_Init+0x334>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d025      	beq.n	80014f6 <HAL_GPIO_Init+0x232>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a53      	ldr	r2, [pc, #332]	; (80015fc <HAL_GPIO_Init+0x338>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01f      	beq.n	80014f2 <HAL_GPIO_Init+0x22e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a52      	ldr	r2, [pc, #328]	; (8001600 <HAL_GPIO_Init+0x33c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x22a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_GPIO_Init+0x340>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x226>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a50      	ldr	r2, [pc, #320]	; (8001608 <HAL_GPIO_Init+0x344>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x222>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4f      	ldr	r2, [pc, #316]	; (800160c <HAL_GPIO_Init+0x348>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x21e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4e      	ldr	r2, [pc, #312]	; (8001610 <HAL_GPIO_Init+0x34c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x21a>
 80014da:	2309      	movs	r3, #9
 80014dc:	e012      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014de:	230a      	movs	r3, #10
 80014e0:	e010      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e2:	2308      	movs	r3, #8
 80014e4:	e00e      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e00c      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ea:	2306      	movs	r3, #6
 80014ec:	e00a      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014ee:	2305      	movs	r3, #5
 80014f0:	e008      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f2:	2304      	movs	r3, #4
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014f6:	2303      	movs	r3, #3
 80014f8:	e004      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e002      	b.n	8001504 <HAL_GPIO_Init+0x240>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <HAL_GPIO_Init+0x240>
 8001502:	2300      	movs	r3, #0
 8001504:	69fa      	ldr	r2, [r7, #28]
 8001506:	f002 0203 	and.w	r2, r2, #3
 800150a:	0092      	lsls	r2, r2, #2
 800150c:	4093      	lsls	r3, r2
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001514:	4934      	ldr	r1, [pc, #208]	; (80015e8 <HAL_GPIO_Init+0x324>)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	3302      	adds	r3, #2
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001522:	4b3c      	ldr	r3, [pc, #240]	; (8001614 <HAL_GPIO_Init+0x350>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001546:	4a33      	ldr	r2, [pc, #204]	; (8001614 <HAL_GPIO_Init+0x350>)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_GPIO_Init+0x350>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001570:	4a28      	ldr	r2, [pc, #160]	; (8001614 <HAL_GPIO_Init+0x350>)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001576:	4b27      	ldr	r3, [pc, #156]	; (8001614 <HAL_GPIO_Init+0x350>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_GPIO_Init+0x350>)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_GPIO_Init+0x350>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c4:	4a13      	ldr	r2, [pc, #76]	; (8001614 <HAL_GPIO_Init+0x350>)
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	2b0f      	cmp	r3, #15
 80015d4:	f67f ae86 	bls.w	80012e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80015d8:	bf00      	nop
 80015da:	3724      	adds	r7, #36	; 0x24
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40013800 	.word	0x40013800
 80015ec:	40020000 	.word	0x40020000
 80015f0:	40020400 	.word	0x40020400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40020c00 	.word	0x40020c00
 80015fc:	40021000 	.word	0x40021000
 8001600:	40021400 	.word	0x40021400
 8001604:	40021800 	.word	0x40021800
 8001608:	40021c00 	.word	0x40021c00
 800160c:	40022000 	.word	0x40022000
 8001610:	40022400 	.word	0x40022400
 8001614:	40013c00 	.word	0x40013c00

08001618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001628:	787b      	ldrb	r3, [r7, #1]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001634:	e003      	b.n	800163e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	041a      	lsls	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b23      	ldr	r3, [pc, #140]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x98>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800166e:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001678:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800167a:	f7fe ffaf 	bl	80005dc <HAL_GetTick>
 800167e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001680:	e009      	b.n	8001696 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001682:	f7fe ffab 	bl	80005dc <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001690:	d901      	bls.n	8001696 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e022      	b.n	80016dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001696:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a2:	d1ee      	bne.n	8001682 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80016a4:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016b0:	f7fe ff94 	bl	80005dc <HAL_GetTick>
 80016b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016b6:	e009      	b.n	80016cc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80016b8:	f7fe ff90 	bl	80005dc <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016c6:	d901      	bls.n	80016cc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e007      	b.n	80016dc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016d8:	d1ee      	bne.n	80016b8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000

080016ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e25e      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8087 	beq.w	800181e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001710:	4b96      	ldr	r3, [pc, #600]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b04      	cmp	r3, #4
 800171a:	d00c      	beq.n	8001736 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800171c:	4b93      	ldr	r3, [pc, #588]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	d112      	bne.n	800174e <HAL_RCC_OscConfig+0x62>
 8001728:	4b90      	ldr	r3, [pc, #576]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001734:	d10b      	bne.n	800174e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001736:	4b8d      	ldr	r3, [pc, #564]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d06c      	beq.n	800181c <HAL_RCC_OscConfig+0x130>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d168      	bne.n	800181c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e238      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x7a>
 8001758:	4b84      	ldr	r3, [pc, #528]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a83      	ldr	r2, [pc, #524]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800175e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e02e      	b.n	80017c4 <HAL_RCC_OscConfig+0xd8>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0x9c>
 800176e:	4b7f      	ldr	r3, [pc, #508]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a7e      	ldr	r2, [pc, #504]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b7c      	ldr	r3, [pc, #496]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a7b      	ldr	r2, [pc, #492]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e01d      	b.n	80017c4 <HAL_RCC_OscConfig+0xd8>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0xc0>
 8001792:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a75      	ldr	r2, [pc, #468]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b73      	ldr	r3, [pc, #460]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a72      	ldr	r2, [pc, #456]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xd8>
 80017ac:	4b6f      	ldr	r3, [pc, #444]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a6e      	ldr	r2, [pc, #440]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b6c      	ldr	r3, [pc, #432]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6b      	ldr	r2, [pc, #428]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7fe ff06 	bl	80005dc <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d4:	f7fe ff02 	bl	80005dc <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1ec      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b61      	ldr	r3, [pc, #388]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0xe8>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7fe fef2 	bl	80005dc <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fc:	f7fe feee 	bl	80005dc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1d8      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	4b57      	ldr	r3, [pc, #348]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x110>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d069      	beq.n	80018fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182a:	4b50      	ldr	r3, [pc, #320]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b08      	cmp	r3, #8
 8001840:	d11c      	bne.n	800187c <HAL_RCC_OscConfig+0x190>
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d116      	bne.n	800187c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_RCC_OscConfig+0x17a>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e1ac      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	493d      	ldr	r1, [pc, #244]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	e040      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	4b39      	ldr	r3, [pc, #228]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a38      	ldr	r2, [pc, #224]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7fe fea4 	bl	80005dc <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001898:	f7fe fea0 	bl	80005dc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e18a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4929      	ldr	r1, [pc, #164]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	600b      	str	r3, [r1, #0]
 80018ca:	e018      	b.n	80018fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7fe fe80 	bl	80005dc <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e0:	f7fe fe7c 	bl	80005dc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e166      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_RCC_OscConfig+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d038      	beq.n	800197c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d019      	beq.n	8001946 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191e:	f7fe fe5d 	bl	80005dc <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7fe fe59 	bl	80005dc <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e143      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800193a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x23a>
 8001944:	e01a      	b.n	800197c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_RCC_OscConfig+0x280>)
 8001948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_RCC_OscConfig+0x280>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7fe fe43 	bl	80005dc <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800195a:	f7fe fe3f 	bl	80005dc <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d903      	bls.n	8001970 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e129      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
 800196c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a4 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10d      	bne.n	80019b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a8b      	ldr	r2, [pc, #556]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019b2:	4b86      	ldr	r3, [pc, #536]	; (8001bcc <HAL_RCC_OscConfig+0x4e0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80019be:	4b83      	ldr	r3, [pc, #524]	; (8001bcc <HAL_RCC_OscConfig+0x4e0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a82      	ldr	r2, [pc, #520]	; (8001bcc <HAL_RCC_OscConfig+0x4e0>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7fe fe07 	bl	80005dc <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7fe fe03 	bl	80005dc <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	; 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0ed      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e4:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <HAL_RCC_OscConfig+0x4e0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x31a>
 80019f8:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fc:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	; 0x70
 8001a04:	e02d      	b.n	8001a62 <HAL_RCC_OscConfig+0x376>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x33c>
 8001a0e:	4b6e      	ldr	r3, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a12:	4a6d      	ldr	r2, [pc, #436]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1a:	4b6b      	ldr	r3, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1e:	4a6a      	ldr	r2, [pc, #424]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6713      	str	r3, [r2, #112]	; 0x70
 8001a26:	e01c      	b.n	8001a62 <HAL_RCC_OscConfig+0x376>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b05      	cmp	r3, #5
 8001a2e:	d10c      	bne.n	8001a4a <HAL_RCC_OscConfig+0x35e>
 8001a30:	4b65      	ldr	r3, [pc, #404]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a34:	4a64      	ldr	r2, [pc, #400]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a36:	f043 0304 	orr.w	r3, r3, #4
 8001a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a3c:	4b62      	ldr	r3, [pc, #392]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a40:	4a61      	ldr	r2, [pc, #388]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6713      	str	r3, [r2, #112]	; 0x70
 8001a48:	e00b      	b.n	8001a62 <HAL_RCC_OscConfig+0x376>
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	4a5e      	ldr	r2, [pc, #376]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6713      	str	r3, [r2, #112]	; 0x70
 8001a56:	4b5c      	ldr	r3, [pc, #368]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	f023 0304 	bic.w	r3, r3, #4
 8001a60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d015      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7fe fdb7 	bl	80005dc <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7fe fdb3 	bl	80005dc <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e09b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a88:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ee      	beq.n	8001a72 <HAL_RCC_OscConfig+0x386>
 8001a94:	e014      	b.n	8001ac0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7fe fda1 	bl	80005dc <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f7fe fd9d 	bl	80005dc <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e085      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ee      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d105      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac6:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a3f      	ldr	r2, [pc, #252]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d071      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ada:	4b3b      	ldr	r3, [pc, #236]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d069      	beq.n	8001bba <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d14b      	bne.n	8001b86 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a35      	ldr	r2, [pc, #212]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7fe fd6f 	bl	80005dc <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe fd6b 	bl	80005dc <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e055      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69da      	ldr	r2, [r3, #28]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	019b      	lsls	r3, r3, #6
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041b      	lsls	r3, r3, #16
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b42:	061b      	lsls	r3, r3, #24
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	071b      	lsls	r3, r3, #28
 8001b4c:	491e      	ldr	r1, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1c      	ldr	r2, [pc, #112]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001b58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7fe fd3d 	bl	80005dc <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe fd39 	bl	80005dc <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e023      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x47a>
 8001b84:	e01b      	b.n	8001bbe <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b92:	f7fe fd23 	bl	80005dc <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe fd1f 	bl	80005dc <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e009      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_RCC_OscConfig+0x4dc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4ae>
 8001bb8:	e001      	b.n	8001bbe <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000

08001bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0ce      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d910      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b66      	ldr	r3, [pc, #408]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 020f 	bic.w	r2, r3, #15
 8001bfe:	4964      	ldr	r1, [pc, #400]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0b6      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d020      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c30:	4b58      	ldr	r3, [pc, #352]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	4a57      	ldr	r2, [pc, #348]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d005      	beq.n	8001c54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c48:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	494c      	ldr	r1, [pc, #304]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d040      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d115      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e07d      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d107      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c92:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e071      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca2:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e069      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f023 0203 	bic.w	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	4935      	ldr	r1, [pc, #212]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc4:	f7fe fc8a 	bl	80005dc <HAL_GetTick>
 8001cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7fe fc86 	bl	80005dc <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e051      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 020c 	and.w	r2, r3, #12
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1eb      	bne.n	8001ccc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 030f 	and.w	r3, r3, #15
 8001cfc:	683a      	ldr	r2, [r7, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d210      	bcs.n	8001d24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 020f 	bic.w	r2, r3, #15
 8001d0a:	4921      	ldr	r1, [pc, #132]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_RCC_ClockConfig+0x1c0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e030      	b.n	8001d86 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d008      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4915      	ldr	r1, [pc, #84]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d4e:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	490d      	ldr	r1, [pc, #52]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d62:	f000 f81d 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d66:	4601      	mov	r1, r0
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	091b      	lsrs	r3, r3, #4
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1c8>)
 8001d74:	5cd3      	ldrb	r3, [r2, r3]
 8001d76:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_RCC_ClockConfig+0x1cc>)
 8001d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7fe fbe8 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00
 8001d94:	40023800 	.word	0x40023800
 8001d98:	080037a0 	.word	0x080037a0
 8001d9c:	20000008 	.word	0x20000008

08001da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001db6:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d007      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0x32>
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d008      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x38>
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f040 808d 	bne.w	8001ee6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dcc:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001dce:	60bb      	str	r3, [r7, #8]
       break;
 8001dd0:	e08c      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dd2:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001dd4:	60bb      	str	r3, [r7, #8]
      break;
 8001dd6:	e089      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dd8:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001de0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001de2:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d023      	beq.n	8001e36 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dee:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	f04f 0400 	mov.w	r4, #0
 8001df8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	ea03 0501 	and.w	r5, r3, r1
 8001e04:	ea04 0602 	and.w	r6, r4, r2
 8001e08:	4a3d      	ldr	r2, [pc, #244]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e0a:	fb02 f106 	mul.w	r1, r2, r6
 8001e0e:	2200      	movs	r2, #0
 8001e10:	fb02 f205 	mul.w	r2, r2, r5
 8001e14:	440a      	add	r2, r1
 8001e16:	493a      	ldr	r1, [pc, #232]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e18:	fba5 0101 	umull	r0, r1, r5, r1
 8001e1c:	1853      	adds	r3, r2, r1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f04f 0400 	mov.w	r4, #0
 8001e26:	461a      	mov	r2, r3
 8001e28:	4623      	mov	r3, r4
 8001e2a:	f7fe fa05 	bl	8000238 <__aeabi_uldivmod>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	e049      	b.n	8001eca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	099b      	lsrs	r3, r3, #6
 8001e3c:	f04f 0400 	mov.w	r4, #0
 8001e40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	ea03 0501 	and.w	r5, r3, r1
 8001e4c:	ea04 0602 	and.w	r6, r4, r2
 8001e50:	4629      	mov	r1, r5
 8001e52:	4632      	mov	r2, r6
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	0154      	lsls	r4, r2, #5
 8001e5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e62:	014b      	lsls	r3, r1, #5
 8001e64:	4619      	mov	r1, r3
 8001e66:	4622      	mov	r2, r4
 8001e68:	1b49      	subs	r1, r1, r5
 8001e6a:	eb62 0206 	sbc.w	r2, r2, r6
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	0194      	lsls	r4, r2, #6
 8001e78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e7c:	018b      	lsls	r3, r1, #6
 8001e7e:	1a5b      	subs	r3, r3, r1
 8001e80:	eb64 0402 	sbc.w	r4, r4, r2
 8001e84:	f04f 0100 	mov.w	r1, #0
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	00e2      	lsls	r2, r4, #3
 8001e8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e92:	00d9      	lsls	r1, r3, #3
 8001e94:	460b      	mov	r3, r1
 8001e96:	4614      	mov	r4, r2
 8001e98:	195b      	adds	r3, r3, r5
 8001e9a:	eb44 0406 	adc.w	r4, r4, r6
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	02a2      	lsls	r2, r4, #10
 8001ea8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001eac:	0299      	lsls	r1, r3, #10
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4614      	mov	r4, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f04f 0400 	mov.w	r4, #0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	f7fe f9ba 	bl	8000238 <__aeabi_uldivmod>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	460c      	mov	r4, r1
 8001ec8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001eca:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	60bb      	str	r3, [r7, #8]
      break;
 8001ee4:	e002      	b.n	8001eec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ee8:	60bb      	str	r3, [r7, #8]
      break;
 8001eea:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eec:	68bb      	ldr	r3, [r7, #8]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	018cba80 	.word	0x018cba80

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01d      	b.n	8001f52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f001 fae4 	bl	80034f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 fa36 	bl	80023b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <HAL_TIM_Base_Start_IT+0x50>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	d00b      	beq.n	8001f9e <HAL_TIM_Base_Start_IT+0x42>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d007      	beq.n	8001f9e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	00010007 	.word	0x00010007

08001fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d122      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d11b      	bne.n	800200c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f06f 0202 	mvn.w	r2, #2
 8001fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9c0 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 8001ff8:	e005      	b.n	8002006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f9b2 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f9c3 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d122      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b04      	cmp	r3, #4
 8002026:	d11b      	bne.n	8002060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0204 	mvn.w	r2, #4
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f996 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f988 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f999 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d122      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b08      	cmp	r3, #8
 800207a:	d11b      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0208 	mvn.w	r2, #8
 8002084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2204      	movs	r2, #4
 800208a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f96c 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 80020a0:	e005      	b.n	80020ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f95e 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 f96f 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d122      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b10      	cmp	r3, #16
 80020ce:	d11b      	bne.n	8002108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0210 	mvn.w	r2, #16
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2208      	movs	r2, #8
 80020de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f942 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e005      	b.n	8002102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f934 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f945 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10e      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b01      	cmp	r3, #1
 8002122:	d107      	bne.n	8002134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0201 	mvn.w	r2, #1
 800212c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 ffe2 	bl	80030f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d10e      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214c:	2b80      	cmp	r3, #128	; 0x80
 800214e:	d107      	bne.n	8002160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 faca 	bl	80026f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800216e:	d10e      	bne.n	800218e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d107      	bne.n	800218e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 fabd 	bl	8002708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b40      	cmp	r3, #64	; 0x40
 800219a:	d10e      	bne.n	80021ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a6:	2b40      	cmp	r3, #64	; 0x40
 80021a8:	d107      	bne.n	80021ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f8f3 	bl	80023a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	f003 0320 	and.w	r3, r3, #32
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	d10e      	bne.n	80021e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d107      	bne.n	80021e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f06f 0220 	mvn.w	r2, #32
 80021de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fa7d 	bl	80026e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_TIM_ConfigClockSource+0x18>
 8002204:	2302      	movs	r3, #2
 8002206:	e0a6      	b.n	8002356 <HAL_TIM_ConfigClockSource+0x166>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_TIM_ConfigClockSource+0x170>)
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800222e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d067      	beq.n	8002310 <HAL_TIM_ConfigClockSource+0x120>
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d80b      	bhi.n	800225c <HAL_TIM_ConfigClockSource+0x6c>
 8002244:	2b10      	cmp	r3, #16
 8002246:	d073      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x140>
 8002248:	2b10      	cmp	r3, #16
 800224a:	d802      	bhi.n	8002252 <HAL_TIM_ConfigClockSource+0x62>
 800224c:	2b00      	cmp	r3, #0
 800224e:	d06f      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002250:	e078      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002252:	2b20      	cmp	r3, #32
 8002254:	d06c      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x140>
 8002256:	2b30      	cmp	r3, #48	; 0x30
 8002258:	d06a      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800225a:	e073      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800225c:	2b70      	cmp	r3, #112	; 0x70
 800225e:	d00d      	beq.n	800227c <HAL_TIM_ConfigClockSource+0x8c>
 8002260:	2b70      	cmp	r3, #112	; 0x70
 8002262:	d804      	bhi.n	800226e <HAL_TIM_ConfigClockSource+0x7e>
 8002264:	2b50      	cmp	r3, #80	; 0x50
 8002266:	d033      	beq.n	80022d0 <HAL_TIM_ConfigClockSource+0xe0>
 8002268:	2b60      	cmp	r3, #96	; 0x60
 800226a:	d041      	beq.n	80022f0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800226c:	e06a      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	d066      	beq.n	8002342 <HAL_TIM_ConfigClockSource+0x152>
 8002274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002278:	d017      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800227a:	e063      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6818      	ldr	r0, [r3, #0]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f000 f9ac 	bl	80025e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800229e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	609a      	str	r2, [r3, #8]
      break;
 80022a8:	e04c      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f000 f995 	bl	80025e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022cc:	609a      	str	r2, [r3, #8]
      break;
 80022ce:	e039      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6818      	ldr	r0, [r3, #0]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	461a      	mov	r2, r3
 80022de:	f000 f909 	bl	80024f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2150      	movs	r1, #80	; 0x50
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 f962 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 80022ee:	e029      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	461a      	mov	r2, r3
 80022fe:	f000 f928 	bl	8002552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2160      	movs	r1, #96	; 0x60
 8002308:	4618      	mov	r0, r3
 800230a:	f000 f952 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 800230e:	e019      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6818      	ldr	r0, [r3, #0]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	461a      	mov	r2, r3
 800231e:	f000 f8e9 	bl	80024f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2140      	movs	r1, #64	; 0x40
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f942 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 800232e:	e009      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f000 f939 	bl	80025b2 <TIM_ITRx_SetConfig>
      break;
 8002340:	e000      	b.n	8002344 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	fffeff88 	.word	0xfffeff88

08002364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a40      	ldr	r2, [pc, #256]	; (80024c8 <TIM_Base_SetConfig+0x114>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d00f      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a3d      	ldr	r2, [pc, #244]	; (80024cc <TIM_Base_SetConfig+0x118>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00b      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a3c      	ldr	r2, [pc, #240]	; (80024d0 <TIM_Base_SetConfig+0x11c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a3b      	ldr	r2, [pc, #236]	; (80024d4 <TIM_Base_SetConfig+0x120>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3a      	ldr	r2, [pc, #232]	; (80024d8 <TIM_Base_SetConfig+0x124>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a2f      	ldr	r2, [pc, #188]	; (80024c8 <TIM_Base_SetConfig+0x114>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d027      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <TIM_Base_SetConfig+0x118>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d023      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a2b      	ldr	r2, [pc, #172]	; (80024d0 <TIM_Base_SetConfig+0x11c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01f      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a2a      	ldr	r2, [pc, #168]	; (80024d4 <TIM_Base_SetConfig+0x120>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01b      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <TIM_Base_SetConfig+0x124>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d017      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a28      	ldr	r2, [pc, #160]	; (80024dc <TIM_Base_SetConfig+0x128>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <TIM_Base_SetConfig+0x12c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00f      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <TIM_Base_SetConfig+0x130>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00b      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <TIM_Base_SetConfig+0x134>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d007      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a24      	ldr	r2, [pc, #144]	; (80024ec <TIM_Base_SetConfig+0x138>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d003      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a23      	ldr	r2, [pc, #140]	; (80024f0 <TIM_Base_SetConfig+0x13c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d108      	bne.n	8002478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <TIM_Base_SetConfig+0x114>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <TIM_Base_SetConfig+0xf8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <TIM_Base_SetConfig+0x124>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	615a      	str	r2, [r3, #20]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40000800 	.word	0x40000800
 80024d4:	40000c00 	.word	0x40000c00
 80024d8:	40010400 	.word	0x40010400
 80024dc:	40014000 	.word	0x40014000
 80024e0:	40014400 	.word	0x40014400
 80024e4:	40014800 	.word	0x40014800
 80024e8:	40001800 	.word	0x40001800
 80024ec:	40001c00 	.word	0x40001c00
 80024f0:	40002000 	.word	0x40002000

080024f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0201 	bic.w	r2, r3, #1
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f023 030a 	bic.w	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	621a      	str	r2, [r3, #32]
}
 8002546:	bf00      	nop
 8002548:	371c      	adds	r7, #28
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002552:	b480      	push	{r7}
 8002554:	b087      	sub	sp, #28
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f023 0210 	bic.w	r2, r3, #16
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800257c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	031b      	lsls	r3, r3, #12
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800258e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	621a      	str	r2, [r3, #32]
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f043 0307 	orr.w	r3, r3, #7
 80025d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	021a      	lsls	r2, r3, #8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	431a      	orrs	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4313      	orrs	r3, r2
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	609a      	str	r2, [r3, #8]
}
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800263c:	2302      	movs	r3, #2
 800263e:	e045      	b.n	80026cc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1c      	ldr	r2, [pc, #112]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d004      	beq.n	8002674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d108      	bne.n	8002686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800267a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	4313      	orrs	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800269e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <CAN_Send_IT>:
	}
	return 1;
}


uint8_t CAN_Send_IT(canStruct* can, uint32_t id){
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]

	uint32_t mailbox = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
	//CAN_TxMailBox_TypeDef mailbox;
	//mailbox.TIR = 0; //set to mailbox 0
	uint8_t flag = 0; //error
 800272a:	2300      	movs	r3, #0
 800272c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = id;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = can->size;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	773b      	strb	r3, [r7, #28]

	if(HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx,&mailbox) == HAL_OK){
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6958      	ldr	r0, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	1d1a      	adds	r2, r3, #4
 800274e:	f107 0320 	add.w	r3, r7, #32
 8002752:	f107 0108 	add.w	r1, r7, #8
 8002756:	f7fe f979 	bl	8000a4c <HAL_CAN_AddTxMessage>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <CAN_Send_IT+0x4a>
		flag = 1; //ok
 8002760:	2301      	movs	r3, #1
 8002762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return flag;
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800276a:	4618      	mov	r0, r3
 800276c:	3728      	adds	r7, #40	; 0x28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <CAN1_initialization>:

uint8_t CAN1_initialization(canStruct *can){
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]

	//CAN filter initialization
	can->canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
	can->canFilter.FilterIdLow = 0;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
	can->canFilter.FilterIdHigh = 0;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
	can->canFilter.FilterMaskIdHigh = 0;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
	can->canFilter.FilterMaskIdLow = 0;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
	can->canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	629a      	str	r2, [r3, #40]	; 0x28
	can->canFilter.FilterBank = 0;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c
	can->canFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34
	can->canFilter.FilterActivation = ENABLE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	639a      	str	r2, [r3, #56]	; 0x38

	//CAN filter configuration
	can->configFilter_status = HAL_CAN_ConfigFilter(can->hcan, &can->canFilter);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3318      	adds	r3, #24
 80027b8:	4619      	mov	r1, r3
 80027ba:	4610      	mov	r0, r2
 80027bc:	f7fe f816 	bl	80007ec <HAL_CAN_ConfigFilter>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	//CAN interrupt activation
	can->activateNotif_status = HAL_CAN_ActivateNotification(can->hcan, CAN1_RX0_IRQn);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2114      	movs	r1, #20
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fa16 	bl	8000c02 <HAL_CAN_ActivateNotification>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	//CAN start
	can->canStart_status = HAL_CAN_Start(can->hcan);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fe f8ed 	bl	80009c4 <HAL_CAN_Start>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	if(can->configFilter_status == HAL_OK && can->activateNotif_status == HAL_OK && can->canStart_status == HAL_OK) return 0; // no errors occurred
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10b      	bne.n	8002816 <CAN1_initialization+0xa4>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002804:	2b00      	cmp	r3, #0
 8002806:	d106      	bne.n	8002816 <CAN1_initialization+0xa4>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <CAN1_initialization+0xa4>
 8002812:	2300      	movs	r3, #0
 8002814:	e000      	b.n	8002818 <CAN1_initialization+0xa6>
	else return 1;
 8002816:	2301      	movs	r3, #1

}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <CAN3_initialization>:

uint8_t CAN3_initialization(canStruct *can){
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

	//CAN filter initialization
	can->canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	631a      	str	r2, [r3, #48]	; 0x30
	can->canFilter.FilterIdLow = 0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	61da      	str	r2, [r3, #28]
	can->canFilter.FilterIdHigh = 0;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	619a      	str	r2, [r3, #24]
	can->canFilter.FilterMaskIdHigh = 0;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	621a      	str	r2, [r3, #32]
	can->canFilter.FilterMaskIdLow = 0;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
	can->canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	629a      	str	r2, [r3, #40]	; 0x28
	can->canFilter.FilterBank = 0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	62da      	str	r2, [r3, #44]	; 0x2c
	can->canFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	635a      	str	r2, [r3, #52]	; 0x34
	can->canFilter.FilterActivation = ENABLE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	639a      	str	r2, [r3, #56]	; 0x38

	//CAN filter configuration
	can->configFilter_status = HAL_CAN_ConfigFilter(can->hcan, &can->canFilter);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695a      	ldr	r2, [r3, #20]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3318      	adds	r3, #24
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f7fd ffbf 	bl	80007ec <HAL_CAN_ConfigFilter>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	//CAN interrupt activation
	can->activateNotif_status = HAL_CAN_ActivateNotification(can->hcan, CAN3_RX0_IRQn);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	2169      	movs	r1, #105	; 0x69
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f9bf 	bl	8000c02 <HAL_CAN_ActivateNotification>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	//CAN start
	can->canStart_status = HAL_CAN_Start(can->hcan);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe f896 	bl	80009c4 <HAL_CAN_Start>
 8002898:	4603      	mov	r3, r0
 800289a:	461a      	mov	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	if(can->configFilter_status == HAL_OK && can->activateNotif_status == HAL_OK && can->canStart_status == HAL_OK) return 0; // no errors occurred
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <CAN3_initialization+0xa4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <CAN3_initialization+0xa4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <CAN3_initialization+0xa4>
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <CAN3_initialization+0xa6>
	else return 1;
 80028c4:	2301      	movs	r3, #1

}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <report_error_can1>:

void report_error_can1(){
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0

}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <report_error_can3>:
void report_error_can3(){
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0

}
 80028e0:	bf00      	nop
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <fifoTxDataCAN1_normal_pop>:
		_fifoCAN->rxHead = (_fifoCAN->rxHead + 1) % fifoLengthN;
		return 1;
	}
}

uint8_t fifoTxDataCAN1_normal_pop(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 80028ec:	b490      	push	{r4, r7}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
	if(_fifoCAN->txHeadNormal ==_fifoCAN->txTailNormal){
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	789a      	ldrb	r2, [r3, #2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	78db      	ldrb	r3, [r3, #3]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d101      	bne.n	8002906 <fifoTxDataCAN1_normal_pop+0x1a>
		return 0;
 8002902:	2300      	movs	r3, #0
 8002904:	e03a      	b.n	800297c <fifoTxDataCAN1_normal_pop+0x90>
	}else{
		_txData->id = _fifoCAN->txNormal[_fifoCAN->txTailNormal].id;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	4619      	mov	r1, r3
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	440b      	add	r3, r1
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
 8002926:	e015      	b.n	8002954 <fifoTxDataCAN1_normal_pop+0x68>
			_txData->data[i] = _fifoCAN->txNormal[_fifoCAN->txTailNormal].data[i];
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	78db      	ldrb	r3, [r3, #3]
 800292c:	461c      	mov	r4, r3
 800292e:	7bf9      	ldrb	r1, [r7, #15]
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4623      	mov	r3, r4
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4423      	add	r3, r4
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4403      	add	r3, r0
 800293e:	440b      	add	r3, r1
 8002940:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8002944:	7819      	ldrb	r1, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	460a      	mov	r2, r1
 800294c:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	3301      	adds	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b07      	cmp	r3, #7
 8002958:	d9e6      	bls.n	8002928 <fifoTxDataCAN1_normal_pop+0x3c>
		}
		_fifoCAN->txTailNormal = (_fifoCAN->txTailNormal + 1) % fifoLengthN;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	78db      	ldrb	r3, [r3, #3]
 800295e:	3301      	adds	r3, #1
 8002960:	4a09      	ldr	r2, [pc, #36]	; (8002988 <fifoTxDataCAN1_normal_pop+0x9c>)
 8002962:	fb82 1203 	smull	r1, r2, r2, r3
 8002966:	1151      	asrs	r1, r2, #5
 8002968:	17da      	asrs	r2, r3, #31
 800296a:	1a8a      	subs	r2, r1, r2
 800296c:	2164      	movs	r1, #100	; 0x64
 800296e:	fb01 f202 	mul.w	r2, r1, r2
 8002972:	1a9a      	subs	r2, r3, r2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	70da      	strb	r2, [r3, #3]
		return 1;
 800297a:	2301      	movs	r3, #1
	}
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bc90      	pop	{r4, r7}
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	51eb851f 	.word	0x51eb851f

0800298c <fifoTxDataCAN1_high_pop>:
uint8_t fifoTxDataCAN1_high_pop(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 800298c:	b490      	push	{r4, r7}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
	if(_fifoCAN->txHeadHigh ==_fifoCAN->txTailHigh){
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	791a      	ldrb	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	795b      	ldrb	r3, [r3, #5]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d101      	bne.n	80029a6 <fifoTxDataCAN1_high_pop+0x1a>
		return 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e03b      	b.n	8002a1e <fifoTxDataCAN1_high_pop+0x92>
	}else{
		_txData->id = _fifoCAN->txHigh[_fifoCAN->txTailHigh].id;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	795b      	ldrb	r3, [r3, #5]
 80029aa:	4619      	mov	r1, r3
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	460b      	mov	r3, r1
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	440b      	add	r3, r1
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e015      	b.n	80029f4 <fifoTxDataCAN1_high_pop+0x68>
			_txData->data[i] = _fifoCAN->txHigh[_fifoCAN->txTailHigh].data[i];
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	795b      	ldrb	r3, [r3, #5]
 80029cc:	461c      	mov	r4, r3
 80029ce:	7bf9      	ldrb	r1, [r7, #15]
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4623      	mov	r3, r4
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4423      	add	r3, r4
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4403      	add	r3, r0
 80029de:	440b      	add	r3, r1
 80029e0:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80029e4:	7819      	ldrb	r1, [r3, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	460a      	mov	r2, r1
 80029ec:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	3301      	adds	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	2b07      	cmp	r3, #7
 80029f8:	d9e6      	bls.n	80029c8 <fifoTxDataCAN1_high_pop+0x3c>
		}
		_fifoCAN->txTailHigh = (_fifoCAN->txTailHigh + 1) % fifoLengthH;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	795b      	ldrb	r3, [r3, #5]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <fifoTxDataCAN1_high_pop+0x9c>)
 8002a02:	fb83 1302 	smull	r1, r3, r3, r2
 8002a06:	1099      	asrs	r1, r3, #2
 8002a08:	17d3      	asrs	r3, r2, #31
 8002a0a:	1ac9      	subs	r1, r1, r3
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	1ad1      	subs	r1, r2, r3
 8002a16:	b2ca      	uxtb	r2, r1
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	715a      	strb	r2, [r3, #5]
		return 1;
 8002a1c:	2301      	movs	r3, #1
	}
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc90      	pop	{r4, r7}
 8002a26:	4770      	bx	lr
 8002a28:	66666667 	.word	0x66666667

08002a2c <fifoTxDataCAN3_normal_pop>:
		_fifoCAN->txHeadHigh = (_fifoCAN->txHeadHigh + 1) % fifoLengthH;
		return 1;
	}
}

uint8_t fifoTxDataCAN3_normal_pop(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 8002a2c:	b490      	push	{r4, r7}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
	if(_fifoCAN->txHeadNormal ==_fifoCAN->txTailNormal){
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	789a      	ldrb	r2, [r3, #2]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	78db      	ldrb	r3, [r3, #3]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d101      	bne.n	8002a46 <fifoTxDataCAN3_normal_pop+0x1a>
		return 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	e03a      	b.n	8002abc <fifoTxDataCAN3_normal_pop+0x90>
	}else{
		_txData->id = _fifoCAN->txNormal[_fifoCAN->txTailNormal].id;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	78db      	ldrb	r3, [r3, #3]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	440b      	add	r3, r1
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e015      	b.n	8002a94 <fifoTxDataCAN3_normal_pop+0x68>
			_txData->data[i] = _fifoCAN->txNormal[_fifoCAN->txTailNormal].data[i];
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	78db      	ldrb	r3, [r3, #3]
 8002a6c:	461c      	mov	r4, r3
 8002a6e:	7bf9      	ldrb	r1, [r7, #15]
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4623      	mov	r3, r4
 8002a76:	005b      	lsls	r3, r3, #1
 8002a78:	4423      	add	r3, r4
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4403      	add	r3, r0
 8002a7e:	440b      	add	r3, r1
 8002a80:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8002a84:	7819      	ldrb	r1, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	3301      	adds	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	2b07      	cmp	r3, #7
 8002a98:	d9e6      	bls.n	8002a68 <fifoTxDataCAN3_normal_pop+0x3c>
		}
		_fifoCAN->txTailNormal = (_fifoCAN->txTailNormal + 1) % fifoLengthN;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	78db      	ldrb	r3, [r3, #3]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <fifoTxDataCAN3_normal_pop+0x9c>)
 8002aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa6:	1151      	asrs	r1, r2, #5
 8002aa8:	17da      	asrs	r2, r3, #31
 8002aaa:	1a8a      	subs	r2, r1, r2
 8002aac:	2164      	movs	r1, #100	; 0x64
 8002aae:	fb01 f202 	mul.w	r2, r1, r2
 8002ab2:	1a9a      	subs	r2, r3, r2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	70da      	strb	r2, [r3, #3]
		return 1;
 8002aba:	2301      	movs	r3, #1
	}
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc90      	pop	{r4, r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	51eb851f 	.word	0x51eb851f

08002acc <fifoTxDataCAN3_high_pop>:
uint8_t fifoTxDataCAN3_high_pop(fifoCanDataType* _fifoCAN,fifoDataType* _txData){
 8002acc:	b490      	push	{r4, r7}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	if(_fifoCAN->txHeadHigh ==_fifoCAN->txTailHigh){
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	791a      	ldrb	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	795b      	ldrb	r3, [r3, #5]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d101      	bne.n	8002ae6 <fifoTxDataCAN3_high_pop+0x1a>
		return 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e03b      	b.n	8002b5e <fifoTxDataCAN3_high_pop+0x92>
	}else{
		_txData->id = _fifoCAN->txHigh[_fifoCAN->txTailHigh].id;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	795b      	ldrb	r3, [r3, #5]
 8002aea:	4619      	mov	r1, r3
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	460b      	mov	r3, r1
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	440b      	add	r3, r1
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	601a      	str	r2, [r3, #0]
		for(uint8_t i = 0; i < 8; i++){
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
 8002b06:	e015      	b.n	8002b34 <fifoTxDataCAN3_high_pop+0x68>
			_txData->data[i] = _fifoCAN->txHigh[_fifoCAN->txTailHigh].data[i];
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	795b      	ldrb	r3, [r3, #5]
 8002b0c:	461c      	mov	r4, r3
 8002b0e:	7bf9      	ldrb	r1, [r7, #15]
 8002b10:	7bfa      	ldrb	r2, [r7, #15]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4623      	mov	r3, r4
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4423      	add	r3, r4
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4403      	add	r3, r0
 8002b1e:	440b      	add	r3, r1
 8002b20:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8002b24:	7819      	ldrb	r1, [r3, #0]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4413      	add	r3, r2
 8002b2a:	460a      	mov	r2, r1
 8002b2c:	711a      	strb	r2, [r3, #4]
		for(uint8_t i = 0; i < 8; i++){
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	3301      	adds	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b07      	cmp	r3, #7
 8002b38:	d9e6      	bls.n	8002b08 <fifoTxDataCAN3_high_pop+0x3c>
		}
		_fifoCAN->txTailHigh = (_fifoCAN->txTailHigh + 1) % fifoLengthH;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	795b      	ldrb	r3, [r3, #5]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	4b09      	ldr	r3, [pc, #36]	; (8002b68 <fifoTxDataCAN3_high_pop+0x9c>)
 8002b42:	fb83 1302 	smull	r1, r3, r3, r2
 8002b46:	1099      	asrs	r1, r3, #2
 8002b48:	17d3      	asrs	r3, r2, #31
 8002b4a:	1ac9      	subs	r1, r1, r3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	1ad1      	subs	r1, r2, r3
 8002b56:	b2ca      	uxtb	r2, r1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	715a      	strb	r2, [r3, #5]
		return 1;
 8002b5c:	2301      	movs	r3, #1
	}
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc90      	pop	{r4, r7}
 8002b66:	4770      	bx	lr
 8002b68:	66666667 	.word	0x66666667

08002b6c <ID_intit>:
#include "id.h"

void ID_intit(ID* _ID){
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
	_ID->imu_angular_rate = 0x4EC;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8002b7a:	601a      	str	r2, [r3, #0]
	_ID->imu_acceleration = 0x4ED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f240 42ed 	movw	r2, #1261	; 0x4ed
 8002b82:	605a      	str	r2, [r3, #4]
	_ID->ITS_1_0 = 0x5B0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8002b8a:	609a      	str	r2, [r3, #8]
	_ID->ITS_1_1 = 0x5B1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f240 52b1 	movw	r2, #1457	; 0x5b1
 8002b92:	60da      	str	r2, [r3, #12]
	_ID->ITS_1_2 = 0x5B2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f240 52b2 	movw	r2, #1458	; 0x5b2
 8002b9a:	611a      	str	r2, [r3, #16]
	_ID->ITS_1_3 = 0x5B3;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8002ba2:	615a      	str	r2, [r3, #20]
	_ID->ITS_2_0 = 0x5B4;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8002baa:	619a      	str	r2, [r3, #24]
	_ID->ITS_2_1 = 0x5B5;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8002bb2:	61da      	str	r2, [r3, #28]
	_ID->ITS_2_2 = 0x5B6;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f240 52b6 	movw	r2, #1462	; 0x5b6
 8002bba:	621a      	str	r2, [r3, #32]
	_ID->ITS_2_3 = 0x5B7;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
	_ID->ITS_3_0 = 0x5B8;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
	_ID->ITS_3_1 = 0x5B9;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8002bd2:	62da      	str	r2, [r3, #44]	; 0x2c
	_ID->ITS_3_2 = 0x5BA;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
	_ID->ITS_3_3 = 0x5BB;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f240 52bb 	movw	r2, #1467	; 0x5bb
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34
	_ID->ITS_4_0 = 0x5BC;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f240 52bc 	movw	r2, #1468	; 0x5bc
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
	_ID->ITS_4_1 = 0x5BD;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f240 52bd 	movw	r2, #1469	; 0x5bd
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
	_ID->ITS_4_2 = 0x5BE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f240 52be 	movw	r2, #1470	; 0x5be
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
	_ID->ITS_4_3 = 0x5BF;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f240 52bf 	movw	r2, #1471	; 0x5bf
 8002c02:	645a      	str	r2, [r3, #68]	; 0x44

}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ID_intit(&id);
 8002c14:	4825      	ldr	r0, [pc, #148]	; (8002cac <main+0x9c>)
 8002c16:	f7ff ffa9 	bl	8002b6c <ID_intit>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c1a:	f7fd fc8d 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c1e:	f000 f84f 	bl	8002cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c22:	f000 fa11 	bl	8003048 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002c26:	f000 f903 	bl	8002e30 <MX_CAN1_Init>
  MX_CAN3_Init();
 8002c2a:	f000 f937 	bl	8002e9c <MX_CAN3_Init>
  MX_TIM1_Init();
 8002c2e:	f000 f96b 	bl	8002f08 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002c32:	f000 f9bb 	bl	8002fac <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002c36:	f000 f8af 	bl	8002d98 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002c3a:	481d      	ldr	r0, [pc, #116]	; (8002cb0 <main+0xa0>)
 8002c3c:	f7ff f98e 	bl	8001f5c <HAL_TIM_Base_Start_IT>


  if(CAN1_initialization(&can1)){
 8002c40:	481c      	ldr	r0, [pc, #112]	; (8002cb4 <main+0xa4>)
 8002c42:	f7ff fd96 	bl	8002772 <CAN1_initialization>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <main+0x40>
	  report_error_can1();
 8002c4c:	f7ff fe3f 	bl	80028ce <report_error_can1>
  }
  if(CAN3_initialization(&can3)){
 8002c50:	4819      	ldr	r0, [pc, #100]	; (8002cb8 <main+0xa8>)
 8002c52:	f7ff fde5 	bl	8002820 <CAN3_initialization>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <main+0x50>
	  report_error_can3();
 8002c5c:	f7ff fe3e 	bl	80028dc <report_error_can3>
  }

  current_state = STATE_INIT;
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <main+0xac>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(current_state == STATE_INIT){
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <main+0xac>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <main+0x64>
		  init();
 8002c6e:	f000 fb3c 	bl	80032ea <init>
 8002c72:	e7f8      	b.n	8002c66 <main+0x56>
	  }else if(current_state == STATE_IDLE){
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <main+0xac>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d102      	bne.n	8002c82 <main+0x72>
		  idle();
 8002c7c:	f000 fb3c 	bl	80032f8 <idle>
 8002c80:	e7f1      	b.n	8002c66 <main+0x56>
	  }else if(current_state == STATE_CALIB){
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <main+0xac>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d102      	bne.n	8002c90 <main+0x80>
		  calib();
 8002c8a:	f000 fb3c 	bl	8003306 <calib>
 8002c8e:	e7ea      	b.n	8002c66 <main+0x56>
	  }else if(current_state == STATE_SETUP){
 8002c90:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <main+0xac>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d102      	bne.n	8002c9e <main+0x8e>
		  setup();
 8002c98:	f000 fb3c 	bl	8003314 <setup>
 8002c9c:	e7e3      	b.n	8002c66 <main+0x56>
	  }else if(current_state == STATE_RUN){
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <main+0xac>)
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d1df      	bne.n	8002c66 <main+0x56>
		  run();
 8002ca6:	f000 fb3c 	bl	8003322 <run>
	  if(current_state == STATE_INIT){
 8002caa:	e7dc      	b.n	8002c66 <main+0x56>
 8002cac:	2000147c 	.word	0x2000147c
 8002cb0:	2000143c 	.word	0x2000143c
 8002cb4:	200014f0 	.word	0x200014f0
 8002cb8:	200013f8 	.word	0x200013f8
 8002cbc:	200013f4 	.word	0x200013f4

08002cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b094      	sub	sp, #80	; 0x50
 8002cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	2234      	movs	r2, #52	; 0x34
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fd52 	bl	8003778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <SystemClock_Config+0xd0>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4a29      	ldr	r2, [pc, #164]	; (8002d90 <SystemClock_Config+0xd0>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf0:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <SystemClock_Config+0xd0>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfc:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <SystemClock_Config+0xd4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <SystemClock_Config+0xd4>)
 8002d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <SystemClock_Config+0xd4>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d14:	2301      	movs	r3, #1
 8002d16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002d18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002d1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d1e:	2302      	movs	r3, #2
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002d28:	230d      	movs	r3, #13
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d2c:	23d8      	movs	r3, #216	; 0xd8
 8002d2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d30:	2302      	movs	r3, #2
 8002d32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d34:	2302      	movs	r3, #2
 8002d36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fcd5 	bl	80016ec <HAL_RCC_OscConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002d48:	f000 fac8 	bl	80032dc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d4c:	f7fe fc7e 	bl	800164c <HAL_PWREx_EnableOverDrive>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002d56:	f000 fac1 	bl	80032dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d5a:	230f      	movs	r3, #15
 8002d5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002d72:	f107 0308 	add.w	r3, r7, #8
 8002d76:	2107      	movs	r1, #7
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe ff29 	bl	8001bd0 <HAL_RCC_ClockConfig>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002d84:	f000 faaa 	bl	80032dc <Error_Handler>
  }
}
 8002d88:	bf00      	nop
 8002d8a:	3750      	adds	r7, #80	; 0x50
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40007000 	.word	0x40007000

08002d98 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	2013      	movs	r0, #19
 8002da2:	f7fe fa58 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002da6:	2013      	movs	r0, #19
 8002da8:	f7fe fa71 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2100      	movs	r1, #0
 8002db0:	2014      	movs	r0, #20
 8002db2:	f7fe fa50 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002db6:	2014      	movs	r0, #20
 8002db8:	f7fe fa69 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2015      	movs	r0, #21
 8002dc2:	f7fe fa48 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002dc6:	2015      	movs	r0, #21
 8002dc8:	f7fe fa61 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* CAN3_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_TX_IRQn, 0, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2068      	movs	r0, #104	; 0x68
 8002dd2:	f7fe fa40 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_TX_IRQn);
 8002dd6:	2068      	movs	r0, #104	; 0x68
 8002dd8:	f7fe fa59 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* CAN3_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2100      	movs	r1, #0
 8002de0:	2069      	movs	r0, #105	; 0x69
 8002de2:	f7fe fa38 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8002de6:	2069      	movs	r0, #105	; 0x69
 8002de8:	f7fe fa51 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* CAN3_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	206a      	movs	r0, #106	; 0x6a
 8002df2:	f7fe fa30 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 8002df6:	206a      	movs	r0, #106	; 0x6a
 8002df8:	f7fe fa49 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* CAN3_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_SCE_IRQn, 0, 0);
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	206b      	movs	r0, #107	; 0x6b
 8002e02:	f7fe fa28 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_SCE_IRQn);
 8002e06:	206b      	movs	r0, #107	; 0x6b
 8002e08:	f7fe fa41 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2016      	movs	r0, #22
 8002e12:	f7fe fa20 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002e16:	2016      	movs	r0, #22
 8002e18:	f7fe fa39 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	201d      	movs	r0, #29
 8002e22:	f7fe fa18 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002e26:	201d      	movs	r0, #29
 8002e28:	f7fe fa31 	bl	800128e <HAL_NVIC_EnableIRQ>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002e34:	4b17      	ldr	r3, [pc, #92]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e36:	4a18      	ldr	r2, [pc, #96]	; (8002e98 <MX_CAN1_Init+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8002e3a:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002e52:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e5a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002e80:	4804      	ldr	r0, [pc, #16]	; (8002e94 <MX_CAN1_Init+0x64>)
 8002e82:	f7fd fbb7 	bl	80005f4 <HAL_CAN_Init>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002e8c:	f000 fa26 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20001578 	.word	0x20001578
 8002e98:	40006400 	.word	0x40006400

08002e9c <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002ea2:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <MX_CAN3_Init+0x68>)
 8002ea4:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 3;
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8002eac:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002eb2:	4b13      	ldr	r3, [pc, #76]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002eba:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002ebe:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ec6:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8002ec8:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8002ece:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8002eec:	4804      	ldr	r0, [pc, #16]	; (8002f00 <MX_CAN3_Init+0x64>)
 8002eee:	f7fd fb81 	bl	80005f4 <HAL_CAN_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 8002ef8:	f000 f9f0 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8002efc:	bf00      	nop
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	200014c4 	.word	0x200014c4
 8002f04:	40003400 	.word	0x40003400

08002f08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f28:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <MX_TIM1_Init+0xa0>)
 8002f2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002f38:	4b1a      	ldr	r3, [pc, #104]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f3a:	2264      	movs	r2, #100	; 0x64
 8002f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f44:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f4a:	4b16      	ldr	r3, [pc, #88]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f50:	4814      	ldr	r0, [pc, #80]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f52:	f7fe ffd7 	bl	8001f04 <HAL_TIM_Base_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002f5c:	f000 f9be 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f66:	f107 0310 	add.w	r3, r7, #16
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f6e:	f7ff f93f 	bl	80021f0 <HAL_TIM_ConfigClockSource>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002f78:	f000 f9b0 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4805      	ldr	r0, [pc, #20]	; (8002fa4 <MX_TIM1_Init+0x9c>)
 8002f8e:	f7ff fb4b 	bl	8002628 <HAL_TIMEx_MasterConfigSynchronization>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8002f98:	f000 f9a0 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	3720      	adds	r7, #32
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20001538 	.word	0x20001538
 8002fa8:	40010000 	.word	0x40010000

08002fac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fb2:	f107 0310 	add.w	r3, r7, #16
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fca:	4b1d      	ldr	r3, [pc, #116]	; (8003040 <MX_TIM3_Init+0x94>)
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <MX_TIM3_Init+0x98>)
 8002fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 54;
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <MX_TIM3_Init+0x94>)
 8002fd2:	2236      	movs	r2, #54	; 0x36
 8002fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <MX_TIM3_Init+0x94>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <MX_TIM3_Init+0x94>)
 8002fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fe2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe4:	4b16      	ldr	r3, [pc, #88]	; (8003040 <MX_TIM3_Init+0x94>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <MX_TIM3_Init+0x94>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ff0:	4813      	ldr	r0, [pc, #76]	; (8003040 <MX_TIM3_Init+0x94>)
 8002ff2:	f7fe ff87 	bl	8001f04 <HAL_TIM_Base_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002ffc:	f000 f96e 	bl	80032dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003004:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003006:	f107 0310 	add.w	r3, r7, #16
 800300a:	4619      	mov	r1, r3
 800300c:	480c      	ldr	r0, [pc, #48]	; (8003040 <MX_TIM3_Init+0x94>)
 800300e:	f7ff f8ef 	bl	80021f0 <HAL_TIM_ConfigClockSource>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003018:	f000 f960 	bl	80032dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800301c:	2300      	movs	r3, #0
 800301e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4805      	ldr	r0, [pc, #20]	; (8003040 <MX_TIM3_Init+0x94>)
 800302a:	f7ff fafd 	bl	8002628 <HAL_TIMEx_MasterConfigSynchronization>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003034:	f000 f952 	bl	80032dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	2000143c 	.word	0x2000143c
 8003044:	40000400 	.word	0x40000400

08003048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304e:	f107 0314 	add.w	r3, r7, #20
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <MX_GPIO_Init+0xa8>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a23      	ldr	r2, [pc, #140]	; (80030f0 <MX_GPIO_Init+0xa8>)
 8003064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <MX_GPIO_Init+0xa8>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003076:	4b1e      	ldr	r3, [pc, #120]	; (80030f0 <MX_GPIO_Init+0xa8>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <MX_GPIO_Init+0xa8>)
 800307c:	f043 0310 	orr.w	r3, r3, #16
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b1b      	ldr	r3, [pc, #108]	; (80030f0 <MX_GPIO_Init+0xa8>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800308e:	4b18      	ldr	r3, [pc, #96]	; (80030f0 <MX_GPIO_Init+0xa8>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	4a17      	ldr	r2, [pc, #92]	; (80030f0 <MX_GPIO_Init+0xa8>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6313      	str	r3, [r2, #48]	; 0x30
 800309a:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <MX_GPIO_Init+0xa8>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <MX_GPIO_Init+0xa8>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a11      	ldr	r2, [pc, #68]	; (80030f0 <MX_GPIO_Init+0xa8>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <MX_GPIO_Init+0xa8>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	607b      	str	r3, [r7, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80030be:	2200      	movs	r2, #0
 80030c0:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <MX_GPIO_Init+0xac>)
 80030c6:	f7fe faa7 	bl	8001618 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE11 PE12 PE13 PE14 
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 80030ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80030ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d0:	2301      	movs	r3, #1
 80030d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	4619      	mov	r1, r3
 80030e2:	4804      	ldr	r0, [pc, #16]	; (80030f4 <MX_GPIO_Init+0xac>)
 80030e4:	f7fe f8ee 	bl	80012c4 <HAL_GPIO_Init>

}
 80030e8:	bf00      	nop
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d137      	bne.n	8003178 <HAL_TIM_PeriodElapsedCallback+0x80>
		count_ms += 10;
 8003108:	4b1f      	ldr	r3, [pc, #124]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	330a      	adds	r3, #10
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003112:	801a      	strh	r2, [r3, #0]
		if(count_ms == 10){
 8003114:	4b1c      	ldr	r3, [pc, #112]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	2b0a      	cmp	r3, #10
 800311a:	d12d      	bne.n	8003178 <HAL_TIM_PeriodElapsedCallback+0x80>
			count_ms = 0;
 800311c:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800311e:	2200      	movs	r2, #0
 8003120:	801a      	strh	r2, [r3, #0]
			count_dec++;
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	3301      	adds	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	4b18      	ldr	r3, [pc, #96]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800312c:	801a      	strh	r2, [r3, #0]
			count_inverter++;
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003138:	801a      	strh	r2, [r3, #0]
			if(count_inverter == 10){
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	2b0a      	cmp	r3, #10
 8003140:	d006      	beq.n	8003150 <HAL_TIM_PeriodElapsedCallback+0x58>
				//TODO: implementare funzione
			}else if(count_inverter == 11){
 8003142:	4b13      	ldr	r3, [pc, #76]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	2b0b      	cmp	r3, #11
 8003148:	d102      	bne.n	8003150 <HAL_TIM_PeriodElapsedCallback+0x58>
				count_inverter = 10;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800314c:	220a      	movs	r2, #10
 800314e:	801a      	strh	r2, [r3, #0]
			}
			if(count_dec == 10){
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	2b0a      	cmp	r3, #10
 8003156:	d10f      	bne.n	8003178 <HAL_TIM_PeriodElapsedCallback+0x80>
				count_dec = 0;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800315a:	2200      	movs	r2, #0
 800315c:	801a      	strh	r2, [r3, #0]
				count_sec++;
 800315e:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	3301      	adds	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003168:	801a      	strh	r2, [r3, #0]
				if(count_sec == 100){
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d102      	bne.n	8003178 <HAL_TIM_PeriodElapsedCallback+0x80>
					count_sec = 0;
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003174:	2200      	movs	r2, #0
 8003176:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	2000143c 	.word	0x2000143c
 8003188:	200014ec 	.word	0x200014ec
 800318c:	20001534 	.word	0x20001534
 8003190:	2000002a 	.word	0x2000002a
 8003194:	20000028 	.word	0x20000028

08003198 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8003198:	b580      	push	{r7, lr}
 800319a:	b08c      	sub	sp, #48	; 0x30
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	if(hcan == &hcan1){
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a49      	ldr	r2, [pc, #292]	; (80032c8 <HAL_CAN_TxMailbox0CompleteCallback+0x130>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d145      	bne.n	8003234 <HAL_CAN_TxMailbox0CompleteCallback+0x9c>
		fifoDataType fifodata;
		if(fifoTxDataCAN1_high_pop(&fifoCAN1, &fifodata)){
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4619      	mov	r1, r3
 80031ae:	4847      	ldr	r0, [pc, #284]	; (80032cc <HAL_CAN_TxMailbox0CompleteCallback+0x134>)
 80031b0:	f7ff fbec 	bl	800298c <fifoTxDataCAN1_high_pop>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d019      	beq.n	80031ee <HAL_CAN_TxMailbox0CompleteCallback+0x56>
			for(int i = 0; i < 8; i++){
 80031ba:	2300      	movs	r3, #0
 80031bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031be:	e00d      	b.n	80031dc <HAL_CAN_TxMailbox0CompleteCallback+0x44>
				can1.dataTx[i] = fifodata.data[i];
 80031c0:	f107 0218 	add.w	r2, r7, #24
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	4413      	add	r3, r2
 80031c8:	7819      	ldrb	r1, [r3, #0]
 80031ca:	4a41      	ldr	r2, [pc, #260]	; (80032d0 <HAL_CAN_TxMailbox0CompleteCallback+0x138>)
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	4413      	add	r3, r2
 80031d0:	3304      	adds	r3, #4
 80031d2:	460a      	mov	r2, r1
 80031d4:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++){
 80031d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d8:	3301      	adds	r3, #1
 80031da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031de:	2b07      	cmp	r3, #7
 80031e0:	ddee      	ble.n	80031c0 <HAL_CAN_TxMailbox0CompleteCallback+0x28>
			}
			if(CAN_Send_IT(&can1, fifodata.id) == 0){
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4619      	mov	r1, r3
 80031e6:	483a      	ldr	r0, [pc, #232]	; (80032d0 <HAL_CAN_TxMailbox0CompleteCallback+0x138>)
 80031e8:	f7ff fa98 	bl	800271c <CAN_Send_IT>
			}
		}else{
			//TODO: riattivare interrupt
		}
	}
}
 80031ec:	e067      	b.n	80032be <HAL_CAN_TxMailbox0CompleteCallback+0x126>
		}else if(fifoTxDataCAN1_normal_pop(&fifoCAN1, &fifodata)){
 80031ee:	f107 0314 	add.w	r3, r7, #20
 80031f2:	4619      	mov	r1, r3
 80031f4:	4835      	ldr	r0, [pc, #212]	; (80032cc <HAL_CAN_TxMailbox0CompleteCallback+0x134>)
 80031f6:	f7ff fb79 	bl	80028ec <fifoTxDataCAN1_normal_pop>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05e      	beq.n	80032be <HAL_CAN_TxMailbox0CompleteCallback+0x126>
			for(int i = 0; i < 8; i++){
 8003200:	2300      	movs	r3, #0
 8003202:	62bb      	str	r3, [r7, #40]	; 0x28
 8003204:	e00d      	b.n	8003222 <HAL_CAN_TxMailbox0CompleteCallback+0x8a>
				can1.dataTx[i] = fifodata.data[i];
 8003206:	f107 0218 	add.w	r2, r7, #24
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	4413      	add	r3, r2
 800320e:	7819      	ldrb	r1, [r3, #0]
 8003210:	4a2f      	ldr	r2, [pc, #188]	; (80032d0 <HAL_CAN_TxMailbox0CompleteCallback+0x138>)
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	4413      	add	r3, r2
 8003216:	3304      	adds	r3, #4
 8003218:	460a      	mov	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++){
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	3301      	adds	r3, #1
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2b07      	cmp	r3, #7
 8003226:	ddee      	ble.n	8003206 <HAL_CAN_TxMailbox0CompleteCallback+0x6e>
			if(CAN_Send_IT(&can1, fifodata.id) == 0){
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	4619      	mov	r1, r3
 800322c:	4828      	ldr	r0, [pc, #160]	; (80032d0 <HAL_CAN_TxMailbox0CompleteCallback+0x138>)
 800322e:	f7ff fa75 	bl	800271c <CAN_Send_IT>
}
 8003232:	e044      	b.n	80032be <HAL_CAN_TxMailbox0CompleteCallback+0x126>
		if(fifoTxDataCAN3_high_pop(&fifoCAN3, &fifodata)){
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	4619      	mov	r1, r3
 800323a:	4826      	ldr	r0, [pc, #152]	; (80032d4 <HAL_CAN_TxMailbox0CompleteCallback+0x13c>)
 800323c:	f7ff fc46 	bl	8002acc <fifoTxDataCAN3_high_pop>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d019      	beq.n	800327a <HAL_CAN_TxMailbox0CompleteCallback+0xe2>
			for(int i = 0; i < 8; i++){
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
 800324a:	e00d      	b.n	8003268 <HAL_CAN_TxMailbox0CompleteCallback+0xd0>
				can3.dataTx[i] = fifodata.data[i];
 800324c:	f107 020c 	add.w	r2, r7, #12
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	4413      	add	r3, r2
 8003254:	7819      	ldrb	r1, [r3, #0]
 8003256:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <HAL_CAN_TxMailbox0CompleteCallback+0x140>)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	4413      	add	r3, r2
 800325c:	3304      	adds	r3, #4
 800325e:	460a      	mov	r2, r1
 8003260:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++){
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	3301      	adds	r3, #1
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	2b07      	cmp	r3, #7
 800326c:	ddee      	ble.n	800324c <HAL_CAN_TxMailbox0CompleteCallback+0xb4>
			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4619      	mov	r1, r3
 8003272:	4819      	ldr	r0, [pc, #100]	; (80032d8 <HAL_CAN_TxMailbox0CompleteCallback+0x140>)
 8003274:	f7ff fa52 	bl	800271c <CAN_Send_IT>
}
 8003278:	e021      	b.n	80032be <HAL_CAN_TxMailbox0CompleteCallback+0x126>
		}else if(fifoTxDataCAN3_normal_pop(&fifoCAN3, &fifodata)){
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	4619      	mov	r1, r3
 8003280:	4814      	ldr	r0, [pc, #80]	; (80032d4 <HAL_CAN_TxMailbox0CompleteCallback+0x13c>)
 8003282:	f7ff fbd3 	bl	8002a2c <fifoTxDataCAN3_normal_pop>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d018      	beq.n	80032be <HAL_CAN_TxMailbox0CompleteCallback+0x126>
			for(int i = 0; i < 8; i++){
 800328c:	2300      	movs	r3, #0
 800328e:	623b      	str	r3, [r7, #32]
 8003290:	e00d      	b.n	80032ae <HAL_CAN_TxMailbox0CompleteCallback+0x116>
				can3.dataTx[i] = fifodata.data[i];
 8003292:	f107 020c 	add.w	r2, r7, #12
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	4413      	add	r3, r2
 800329a:	7819      	ldrb	r1, [r3, #0]
 800329c:	4a0e      	ldr	r2, [pc, #56]	; (80032d8 <HAL_CAN_TxMailbox0CompleteCallback+0x140>)
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	460a      	mov	r2, r1
 80032a6:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 8; i++){
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	3301      	adds	r3, #1
 80032ac:	623b      	str	r3, [r7, #32]
 80032ae:	6a3b      	ldr	r3, [r7, #32]
 80032b0:	2b07      	cmp	r3, #7
 80032b2:	ddee      	ble.n	8003292 <HAL_CAN_TxMailbox0CompleteCallback+0xfa>
			if(CAN_Send_IT(&can3, fifodata.id) == 0){
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	4619      	mov	r1, r3
 80032b8:	4807      	ldr	r0, [pc, #28]	; (80032d8 <HAL_CAN_TxMailbox0CompleteCallback+0x140>)
 80032ba:	f7ff fa2f 	bl	800271c <CAN_Send_IT>
}
 80032be:	bf00      	nop
 80032c0:	3730      	adds	r7, #48	; 0x30
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20001578 	.word	0x20001578
 80032cc:	20000a14 	.word	0x20000a14
 80032d0:	200014f0 	.word	0x200014f0
 80032d4:	20000034 	.word	0x20000034
 80032d8:	200013f8 	.word	0x200013f8

080032dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <init>:
#include "state.h"


// Default state
// Init variables
void init(){
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0

}
 80032ee:	bf00      	nop
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <idle>:
void idle(){
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0

}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <calib>:
void calib(){
 8003306:	b480      	push	{r7}
 8003308:	af00      	add	r7, sp, #0

}
 800330a:	bf00      	nop
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <setup>:
void setup(){
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0

}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <run>:
void run(){
 8003322:	b480      	push	{r7}
 8003324:	af00      	add	r7, sp, #0

}
 8003326:	bf00      	nop
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003336:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <HAL_MspInit+0x44>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	4a0e      	ldr	r2, [pc, #56]	; (8003374 <HAL_MspInit+0x44>)
 800333c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003340:	6413      	str	r3, [r2, #64]	; 0x40
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <HAL_MspInit+0x44>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_MspInit+0x44>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_MspInit+0x44>)
 8003354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003358:	6453      	str	r3, [r2, #68]	; 0x44
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_MspInit+0x44>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40023800 	.word	0x40023800

08003378 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_CAN_MspInit+0x168>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d132      	bne.n	8003400 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800339a:	4b52      	ldr	r3, [pc, #328]	; (80034e4 <HAL_CAN_MspInit+0x16c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_CAN_MspInit+0x16c>)
 80033a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80033a4:	4b4f      	ldr	r3, [pc, #316]	; (80034e4 <HAL_CAN_MspInit+0x16c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d10b      	bne.n	80033c4 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80033ac:	4b4e      	ldr	r3, [pc, #312]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	4a4d      	ldr	r2, [pc, #308]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 80033b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033b6:	6413      	str	r3, [r2, #64]	; 0x40
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c4:	4b48      	ldr	r3, [pc, #288]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	4a47      	ldr	r2, [pc, #284]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6313      	str	r3, [r2, #48]	; 0x30
 80033d0:	4b45      	ldr	r3, [pc, #276]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 80033d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e2:	2302      	movs	r3, #2
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ea:	2303      	movs	r3, #3
 80033ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80033ee:	2309      	movs	r3, #9
 80033f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f6:	4619      	mov	r1, r3
 80033f8:	483c      	ldr	r0, [pc, #240]	; (80034ec <HAL_CAN_MspInit+0x174>)
 80033fa:	f7fd ff63 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 80033fe:	e06a      	b.n	80034d6 <HAL_CAN_MspInit+0x15e>
  else if(hcan->Instance==CAN3)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3a      	ldr	r2, [pc, #232]	; (80034f0 <HAL_CAN_MspInit+0x178>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d165      	bne.n	80034d6 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800340a:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	4a36      	ldr	r2, [pc, #216]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003410:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003414:	6413      	str	r3, [r2, #64]	; 0x40
 8003416:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a30      	ldr	r2, [pc, #192]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003428:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b2e      	ldr	r3, [pc, #184]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_CAN_MspInit+0x16c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <HAL_CAN_MspInit+0x16c>)
 8003442:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003444:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <HAL_CAN_MspInit+0x16c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10b      	bne.n	8003464 <HAL_CAN_MspInit+0xec>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	4a25      	ldr	r2, [pc, #148]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003456:	6413      	str	r3, [r2, #64]	; 0x40
 8003458:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 800345a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6313      	str	r3, [r2, #48]	; 0x30
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	6313      	str	r3, [r2, #48]	; 0x30
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_CAN_MspInit+0x170>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	2302      	movs	r3, #2
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a2:	2303      	movs	r3, #3
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80034a6:	230b      	movs	r3, #11
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ae:	4619      	mov	r1, r3
 80034b0:	480e      	ldr	r0, [pc, #56]	; (80034ec <HAL_CAN_MspInit+0x174>)
 80034b2:	f7fd ff07 	bl	80012c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034b6:	2310      	movs	r3, #16
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80034c6:	230b      	movs	r3, #11
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ce:	4619      	mov	r1, r3
 80034d0:	4808      	ldr	r0, [pc, #32]	; (80034f4 <HAL_CAN_MspInit+0x17c>)
 80034d2:	f7fd fef7 	bl	80012c4 <HAL_GPIO_Init>
}
 80034d6:	bf00      	nop
 80034d8:	3738      	adds	r7, #56	; 0x38
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40006400 	.word	0x40006400
 80034e4:	2000002c 	.word	0x2000002c
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020000 	.word	0x40020000
 80034f0:	40003400 	.word	0x40003400
 80034f4:	40020400 	.word	0x40020400

080034f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a13      	ldr	r2, [pc, #76]	; (8003554 <HAL_TIM_Base_MspInit+0x5c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d10c      	bne.n	8003524 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_TIM_Base_MspInit+0x60>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_TIM_Base_MspInit+0x60>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6453      	str	r3, [r2, #68]	; 0x44
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_TIM_Base_MspInit+0x60>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003522:	e010      	b.n	8003546 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a0c      	ldr	r2, [pc, #48]	; (800355c <HAL_TIM_Base_MspInit+0x64>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d10b      	bne.n	8003546 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800352e:	4b0a      	ldr	r3, [pc, #40]	; (8003558 <HAL_TIM_Base_MspInit+0x60>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_TIM_Base_MspInit+0x60>)
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_TIM_Base_MspInit+0x60>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40010000 	.word	0x40010000
 8003558:	40023800 	.word	0x40023800
 800355c:	40000400 	.word	0x40000400

08003560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <MemManage_Handler+0x4>

0800357a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <BusFault_Handler+0x4>

08003580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <UsageFault_Handler+0x4>

08003586 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035b4:	f7fc fffe 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035b8:	bf00      	nop
 80035ba:	bd80      	pop	{r7, pc}

080035bc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <CAN1_TX_IRQHandler+0x10>)
 80035c2:	f7fd fb44 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20001578 	.word	0x20001578

080035d0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <CAN1_RX0_IRQHandler+0x10>)
 80035d6:	f7fd fb3a 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20001578 	.word	0x20001578

080035e4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <CAN1_RX1_IRQHandler+0x10>)
 80035ea:	f7fd fb30 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	20001578 	.word	0x20001578

080035f8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <CAN1_SCE_IRQHandler+0x10>)
 80035fe:	f7fd fb26 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20001578 	.word	0x20001578

0800360c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <TIM3_IRQHandler+0x10>)
 8003612:	f7fe fccd 	bl	8001fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	2000143c 	.word	0x2000143c

08003620 <CAN3_TX_IRQHandler>:

/**
  * @brief This function handles CAN3 TX interrupt.
  */
void CAN3_TX_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_TX_IRQn 0 */

  /* USER CODE END CAN3_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <CAN3_TX_IRQHandler+0x10>)
 8003626:	f7fd fb12 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_TX_IRQn 1 */

  /* USER CODE END CAN3_TX_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200014c4 	.word	0x200014c4

08003634 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <CAN3_RX0_IRQHandler+0x10>)
 800363a:	f7fd fb08 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200014c4 	.word	0x200014c4

08003648 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <CAN3_RX1_IRQHandler+0x10>)
 800364e:	f7fd fafe 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200014c4 	.word	0x200014c4

0800365c <CAN3_SCE_IRQHandler>:

/**
  * @brief This function handles CAN3 SCE interrupt.
  */
void CAN3_SCE_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_SCE_IRQn 0 */

  /* USER CODE END CAN3_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <CAN3_SCE_IRQHandler+0x10>)
 8003662:	f7fd faf4 	bl	8000c4e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_SCE_IRQn 1 */

  /* USER CODE END CAN3_SCE_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200014c4 	.word	0x200014c4

08003670 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003674:	4b15      	ldr	r3, [pc, #84]	; (80036cc <SystemInit+0x5c>)
 8003676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367a:	4a14      	ldr	r2, [pc, #80]	; (80036cc <SystemInit+0x5c>)
 800367c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003684:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <SystemInit+0x60>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <SystemInit+0x60>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003690:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <SystemInit+0x60>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <SystemInit+0x60>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	490d      	ldr	r1, [pc, #52]	; (80036d0 <SystemInit+0x60>)
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <SystemInit+0x64>)
 800369e:	4013      	ands	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <SystemInit+0x60>)
 80036a4:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <SystemInit+0x68>)
 80036a6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <SystemInit+0x60>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <SystemInit+0x60>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <SystemInit+0x60>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <SystemInit+0x5c>)
 80036bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036c0:	609a      	str	r2, [r3, #8]
#endif
}
 80036c2:	bf00      	nop
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00
 80036d0:	40023800 	.word	0x40023800
 80036d4:	fef6ffff 	.word	0xfef6ffff
 80036d8:	24003010 	.word	0x24003010

080036dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003714 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036e2:	e003      	b.n	80036ec <LoopCopyDataInit>

080036e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036ea:	3104      	adds	r1, #4

080036ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036ec:	480b      	ldr	r0, [pc, #44]	; (800371c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036ee:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036f4:	d3f6      	bcc.n	80036e4 <CopyDataInit>
  ldr  r2, =_sbss
 80036f6:	4a0b      	ldr	r2, [pc, #44]	; (8003724 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036f8:	e002      	b.n	8003700 <LoopFillZerobss>

080036fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80036fc:	f842 3b04 	str.w	r3, [r2], #4

08003700 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003702:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003704:	d3f9      	bcc.n	80036fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003706:	f7ff ffb3 	bl	8003670 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800370a:	f000 f811 	bl	8003730 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800370e:	f7ff fa7f 	bl	8002c10 <main>
  bx  lr    
 8003712:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003714:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003718:	080037c0 	.word	0x080037c0
  ldr  r0, =_sdata
 800371c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003720:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003724:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003728:	200015a0 	.word	0x200015a0

0800372c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800372c:	e7fe      	b.n	800372c <ADC_IRQHandler>
	...

08003730 <__libc_init_array>:
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	4e0d      	ldr	r6, [pc, #52]	; (8003768 <__libc_init_array+0x38>)
 8003734:	4c0d      	ldr	r4, [pc, #52]	; (800376c <__libc_init_array+0x3c>)
 8003736:	1ba4      	subs	r4, r4, r6
 8003738:	10a4      	asrs	r4, r4, #2
 800373a:	2500      	movs	r5, #0
 800373c:	42a5      	cmp	r5, r4
 800373e:	d109      	bne.n	8003754 <__libc_init_array+0x24>
 8003740:	4e0b      	ldr	r6, [pc, #44]	; (8003770 <__libc_init_array+0x40>)
 8003742:	4c0c      	ldr	r4, [pc, #48]	; (8003774 <__libc_init_array+0x44>)
 8003744:	f000 f820 	bl	8003788 <_init>
 8003748:	1ba4      	subs	r4, r4, r6
 800374a:	10a4      	asrs	r4, r4, #2
 800374c:	2500      	movs	r5, #0
 800374e:	42a5      	cmp	r5, r4
 8003750:	d105      	bne.n	800375e <__libc_init_array+0x2e>
 8003752:	bd70      	pop	{r4, r5, r6, pc}
 8003754:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003758:	4798      	blx	r3
 800375a:	3501      	adds	r5, #1
 800375c:	e7ee      	b.n	800373c <__libc_init_array+0xc>
 800375e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003762:	4798      	blx	r3
 8003764:	3501      	adds	r5, #1
 8003766:	e7f2      	b.n	800374e <__libc_init_array+0x1e>
 8003768:	080037b8 	.word	0x080037b8
 800376c:	080037b8 	.word	0x080037b8
 8003770:	080037b8 	.word	0x080037b8
 8003774:	080037bc 	.word	0x080037bc

08003778 <memset>:
 8003778:	4402      	add	r2, r0
 800377a:	4603      	mov	r3, r0
 800377c:	4293      	cmp	r3, r2
 800377e:	d100      	bne.n	8003782 <memset+0xa>
 8003780:	4770      	bx	lr
 8003782:	f803 1b01 	strb.w	r1, [r3], #1
 8003786:	e7f9      	b.n	800377c <memset+0x4>

08003788 <_init>:
 8003788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378a:	bf00      	nop
 800378c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800378e:	bc08      	pop	{r3}
 8003790:	469e      	mov	lr, r3
 8003792:	4770      	bx	lr

08003794 <_fini>:
 8003794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003796:	bf00      	nop
 8003798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800379a:	bc08      	pop	{r3}
 800379c:	469e      	mov	lr, r3
 800379e:	4770      	bx	lr
