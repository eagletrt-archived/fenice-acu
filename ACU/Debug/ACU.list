
ACU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080028d8  080028d8  000128d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e8  080028e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080028f0  080028f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f0  080028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  08002904  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002904  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b56d  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019b1  00000000  00000000  0002b5a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002cf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  0002db20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024e19  00000000  00000000  0002e600  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008461  00000000  00000000  00053419  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e93d9  00000000  00000000  0005b87a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144c53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003064  00000000  00000000  00144cd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080028c0 	.word	0x080028c0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080028c0 	.word	0x080028c0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fc57 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f001 ffac 	bl	80024a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fc71 	bl	8000e5a <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 fc39 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	2000002c 	.word	0x2000002c

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	2000002c 	.word	0x2000002c

080005f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e0ed      	b.n	80007e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d102      	bne.n	8000618 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f001 ff6a 	bl	80024ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f022 0202 	bic.w	r2, r2, #2
 8000626:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000628:	f7ff ffd8 	bl	80005dc <HAL_GetTick>
 800062c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800062e:	e012      	b.n	8000656 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000630:	f7ff ffd4 	bl	80005dc <HAL_GetTick>
 8000634:	4602      	mov	r2, r0
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	2b0a      	cmp	r3, #10
 800063c:	d90b      	bls.n	8000656 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000642:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2205      	movs	r2, #5
 800064e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e0c5      	b.n	80007e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	2b00      	cmp	r3, #0
 8000662:	d1e5      	bne.n	8000630 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f042 0201 	orr.w	r2, r2, #1
 8000672:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000674:	f7ff ffb2 	bl	80005dc <HAL_GetTick>
 8000678:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800067a:	e012      	b.n	80006a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800067c:	f7ff ffae 	bl	80005dc <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	2b0a      	cmp	r3, #10
 8000688:	d90b      	bls.n	80006a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800068e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2205      	movs	r2, #5
 800069a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e09f      	b.n	80007e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0e5      	beq.n	800067c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7e1b      	ldrb	r3, [r3, #24]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d108      	bne.n	80006ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	e007      	b.n	80006da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	7e5b      	ldrb	r3, [r3, #25]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d108      	bne.n	80006f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	e007      	b.n	8000704 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000702:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7e9b      	ldrb	r3, [r3, #26]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d108      	bne.n	800071e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f042 0220 	orr.w	r2, r2, #32
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	e007      	b.n	800072e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f022 0220 	bic.w	r2, r2, #32
 800072c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	7edb      	ldrb	r3, [r3, #27]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d108      	bne.n	8000748 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f022 0210 	bic.w	r2, r2, #16
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	e007      	b.n	8000758 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0210 	orr.w	r2, r2, #16
 8000756:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7f1b      	ldrb	r3, [r3, #28]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d108      	bne.n	8000772 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0208 	orr.w	r2, r2, #8
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	e007      	b.n	8000782 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f022 0208 	bic.w	r2, r2, #8
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	7f5b      	ldrb	r3, [r3, #29]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d108      	bne.n	800079c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 0204 	orr.w	r2, r2, #4
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	e007      	b.n	80007ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 0204 	bic.w	r2, r2, #4
 80007aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689a      	ldr	r2, [r3, #8]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	431a      	orrs	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	ea42 0103 	orr.w	r1, r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2201      	movs	r2, #1
 80007dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3710      	adds	r7, #16
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b08a      	sub	sp, #40	; 0x28
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68db      	ldr	r3, [r3, #12]
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	691b      	ldr	r3, [r3, #16]
 800081c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000826:	6a3b      	ldr	r3, [r7, #32]
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	2b00      	cmp	r3, #0
 800082e:	d07c      	beq.n	800092a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d023      	beq.n	8000882 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2201      	movs	r2, #1
 8000840:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000842:	69bb      	ldr	r3, [r7, #24]
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	2b00      	cmp	r3, #0
 800084a:	d003      	beq.n	8000854 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f97d 	bl	8000b4c <HAL_CAN_TxMailbox0CompleteCallback>
 8000852:	e016      	b.n	8000882 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	2b00      	cmp	r3, #0
 800085c:	d004      	beq.n	8000868 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
 8000866:	e00c      	b.n	8000882 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	2b00      	cmp	r3, #0
 8000870:	d004      	beq.n	800087c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
 800087a:	e002      	b.n	8000882 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f983 	bl	8000b88 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000888:	2b00      	cmp	r3, #0
 800088a:	d024      	beq.n	80008d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000894:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000896:	69bb      	ldr	r3, [r7, #24]
 8000898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800089c:	2b00      	cmp	r3, #0
 800089e:	d003      	beq.n	80008a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f95d 	bl	8000b60 <HAL_CAN_TxMailbox1CompleteCallback>
 80008a6:	e016      	b.n	80008d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d004      	beq.n	80008bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
 80008ba:	e00c      	b.n	80008d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d004      	beq.n	80008d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
 80008ce:	e002      	b.n	80008d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 f963 	bl	8000b9c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d024      	beq.n	800092a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d003      	beq.n	80008fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 f93d 	bl	8000b74 <HAL_CAN_TxMailbox2CompleteCallback>
 80008fa:	e016      	b.n	800092a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d004      	beq.n	8000910 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
 800090e:	e00c      	b.n	800092a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000916:	2b00      	cmp	r3, #0
 8000918:	d004      	beq.n	8000924 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800091a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f000 f943 	bl	8000bb0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800092a:	6a3b      	ldr	r3, [r7, #32]
 800092c:	f003 0308 	and.w	r3, r3, #8
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00c      	beq.n	800094e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	2b00      	cmp	r3, #0
 800093c:	d007      	beq.n	800094e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000944:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2210      	movs	r2, #16
 800094c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	2b00      	cmp	r3, #0
 8000956:	d00b      	beq.n	8000970 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d006      	beq.n	8000970 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2208      	movs	r2, #8
 8000968:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 f934 	bl	8000bd8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000970:	6a3b      	ldr	r3, [r7, #32]
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	2b00      	cmp	r3, #0
 8000978:	d009      	beq.n	800098e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	f003 0303 	and.w	r3, r3, #3
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f91b 	bl	8000bc4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00c      	beq.n	80009b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d007      	beq.n	80009b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	2210      	movs	r2, #16
 80009b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00b      	beq.n	80009d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2208      	movs	r2, #8
 80009cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 f916 	bl	8000c00 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	f003 0310 	and.w	r3, r3, #16
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d009      	beq.n	80009f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	691b      	ldr	r3, [r3, #16]
 80009e4:	f003 0303 	and.w	r3, r3, #3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d002      	beq.n	80009f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f8fd 	bl	8000bec <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d00b      	beq.n	8000a14 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	f000 f900 	bl	8000c14 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00b      	beq.n	8000a36 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 f8f9 	bl	8000c28 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d075      	beq.n	8000b2c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d06c      	beq.n	8000b24 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d008      	beq.n	8000a66 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d008      	beq.n	8000a82 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d003      	beq.n	8000a82 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	f043 0304 	orr.w	r3, r3, #4
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d03d      	beq.n	8000b24 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d038      	beq.n	8000b24 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000ab8:	2b30      	cmp	r3, #48	; 0x30
 8000aba:	d017      	beq.n	8000aec <HAL_CAN_IRQHandler+0x302>
 8000abc:	2b30      	cmp	r3, #48	; 0x30
 8000abe:	d804      	bhi.n	8000aca <HAL_CAN_IRQHandler+0x2e0>
 8000ac0:	2b10      	cmp	r3, #16
 8000ac2:	d009      	beq.n	8000ad8 <HAL_CAN_IRQHandler+0x2ee>
 8000ac4:	2b20      	cmp	r3, #32
 8000ac6:	d00c      	beq.n	8000ae2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000ac8:	e024      	b.n	8000b14 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000aca:	2b50      	cmp	r3, #80	; 0x50
 8000acc:	d018      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x316>
 8000ace:	2b60      	cmp	r3, #96	; 0x60
 8000ad0:	d01b      	beq.n	8000b0a <HAL_CAN_IRQHandler+0x320>
 8000ad2:	2b40      	cmp	r3, #64	; 0x40
 8000ad4:	d00f      	beq.n	8000af6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000ad6:	e01d      	b.n	8000b14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000ae0:	e018      	b.n	8000b14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	f043 0310 	orr.w	r3, r3, #16
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000aea:	e013      	b.n	8000b14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aee:	f043 0320 	orr.w	r3, r3, #32
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000af4:	e00e      	b.n	8000b14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000afe:	e009      	b.n	8000b14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b08:	e004      	b.n	8000b14 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000b12:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	699a      	ldr	r2, [r3, #24]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000b22:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2204      	movs	r2, #4
 8000b2a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	431a      	orrs	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f87c 	bl	8000c3c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7e:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <__NVIC_SetPriorityGrouping+0x40>)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	60d3      	str	r3, [r2, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00
 8000c94:	05fa0000 	.word	0x05fa0000

08000c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	f003 0307 	and.w	r3, r3, #7
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	db0b      	blt.n	8000cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	f003 021f 	and.w	r2, r3, #31
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <__NVIC_EnableIRQ+0x38>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	095b      	lsrs	r3, r3, #5
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff29 	bl	8000c50 <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff3e 	bl	8000c98 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff8e 	bl	8000d44 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5d 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff31 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffa2 	bl	8000dac <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	; 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e175      	b.n	8001180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8164 	bne.w	800117a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x4e>
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b12      	cmp	r3, #18
 8000ec0:	d123      	bne.n	8000f0a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	691a      	ldr	r2, [r3, #16]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	08da      	lsrs	r2, r3, #3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3208      	adds	r2, #8
 8000f04:	69b9      	ldr	r1, [r7, #24]
 8000f06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0203 	and.w	r2, r3, #3
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d00b      	beq.n	8000f5e <HAL_GPIO_Init+0xea>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f52:	2b11      	cmp	r3, #17
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d130      	bne.n	8000fc0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	2203      	movs	r2, #3
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f94:	2201      	movs	r2, #1
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	091b      	lsrs	r3, r3, #4
 8000faa:	f003 0201 	and.w	r2, r3, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80be 	beq.w	800117a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b65      	ldr	r3, [pc, #404]	; (8001194 <HAL_GPIO_Init+0x320>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a64      	ldr	r2, [pc, #400]	; (8001194 <HAL_GPIO_Init+0x320>)
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b62      	ldr	r3, [pc, #392]	; (8001194 <HAL_GPIO_Init+0x320>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001016:	4a60      	ldr	r2, [pc, #384]	; (8001198 <HAL_GPIO_Init+0x324>)
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a57      	ldr	r2, [pc, #348]	; (800119c <HAL_GPIO_Init+0x328>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d037      	beq.n	80010b2 <HAL_GPIO_Init+0x23e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a56      	ldr	r2, [pc, #344]	; (80011a0 <HAL_GPIO_Init+0x32c>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d031      	beq.n	80010ae <HAL_GPIO_Init+0x23a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a55      	ldr	r2, [pc, #340]	; (80011a4 <HAL_GPIO_Init+0x330>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d02b      	beq.n	80010aa <HAL_GPIO_Init+0x236>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a54      	ldr	r2, [pc, #336]	; (80011a8 <HAL_GPIO_Init+0x334>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d025      	beq.n	80010a6 <HAL_GPIO_Init+0x232>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a53      	ldr	r2, [pc, #332]	; (80011ac <HAL_GPIO_Init+0x338>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d01f      	beq.n	80010a2 <HAL_GPIO_Init+0x22e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a52      	ldr	r2, [pc, #328]	; (80011b0 <HAL_GPIO_Init+0x33c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d019      	beq.n	800109e <HAL_GPIO_Init+0x22a>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <HAL_GPIO_Init+0x340>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d013      	beq.n	800109a <HAL_GPIO_Init+0x226>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a50      	ldr	r2, [pc, #320]	; (80011b8 <HAL_GPIO_Init+0x344>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d00d      	beq.n	8001096 <HAL_GPIO_Init+0x222>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a4f      	ldr	r2, [pc, #316]	; (80011bc <HAL_GPIO_Init+0x348>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d007      	beq.n	8001092 <HAL_GPIO_Init+0x21e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a4e      	ldr	r2, [pc, #312]	; (80011c0 <HAL_GPIO_Init+0x34c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d101      	bne.n	800108e <HAL_GPIO_Init+0x21a>
 800108a:	2309      	movs	r3, #9
 800108c:	e012      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800108e:	230a      	movs	r3, #10
 8001090:	e010      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001092:	2308      	movs	r3, #8
 8001094:	e00e      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 8001096:	2307      	movs	r3, #7
 8001098:	e00c      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109a:	2306      	movs	r3, #6
 800109c:	e00a      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 800109e:	2305      	movs	r3, #5
 80010a0:	e008      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a2:	2304      	movs	r3, #4
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e004      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010aa:	2302      	movs	r3, #2
 80010ac:	e002      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <HAL_GPIO_Init+0x240>
 80010b2:	2300      	movs	r3, #0
 80010b4:	69fa      	ldr	r2, [r7, #28]
 80010b6:	f002 0203 	and.w	r2, r2, #3
 80010ba:	0092      	lsls	r2, r2, #2
 80010bc:	4093      	lsls	r3, r2
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010c4:	4934      	ldr	r1, [pc, #208]	; (8001198 <HAL_GPIO_Init+0x324>)
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	3302      	adds	r3, #2
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_GPIO_Init+0x350>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f6:	4a33      	ldr	r2, [pc, #204]	; (80011c4 <HAL_GPIO_Init+0x350>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010fc:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <HAL_GPIO_Init+0x350>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001120:	4a28      	ldr	r2, [pc, #160]	; (80011c4 <HAL_GPIO_Init+0x350>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_GPIO_Init+0x350>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a1e      	ldr	r2, [pc, #120]	; (80011c4 <HAL_GPIO_Init+0x350>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_GPIO_Init+0x350>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a13      	ldr	r2, [pc, #76]	; (80011c4 <HAL_GPIO_Init+0x350>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3301      	adds	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	2b0f      	cmp	r3, #15
 8001184:	f67f ae86 	bls.w	8000e94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001188:	bf00      	nop
 800118a:	3724      	adds	r7, #36	; 0x24
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40023800 	.word	0x40023800
 8001198:	40013800 	.word	0x40013800
 800119c:	40020000 	.word	0x40020000
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021800 	.word	0x40021800
 80011b8:	40021c00 	.word	0x40021c00
 80011bc:	40022000 	.word	0x40022000
 80011c0:	40022400 	.word	0x40022400
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
 80011d4:	4613      	mov	r3, r2
 80011d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011d8:	787b      	ldrb	r3, [r7, #1]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011de:	887a      	ldrh	r2, [r7, #2]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011e4:	e003      	b.n	80011ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	041a      	lsls	r2, r3, #16
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	619a      	str	r2, [r3, #24]
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_PWREx_EnableOverDrive+0x98>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <HAL_PWREx_EnableOverDrive+0x98>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_PWREx_EnableOverDrive+0x98>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800122a:	f7ff f9d7 	bl	80005dc <HAL_GetTick>
 800122e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001230:	e009      	b.n	8001246 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001232:	f7ff f9d3 	bl	80005dc <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001240:	d901      	bls.n	8001246 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e022      	b.n	800128c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001252:	d1ee      	bne.n	8001232 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800125a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001260:	f7ff f9bc 	bl	80005dc <HAL_GetTick>
 8001264:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001266:	e009      	b.n	800127c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001268:	f7ff f9b8 	bl	80005dc <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001276:	d901      	bls.n	800127c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e007      	b.n	800128c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_PWREx_EnableOverDrive+0x9c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001288:	d1ee      	bne.n	8001268 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40007000 	.word	0x40007000

0800129c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80012a4:	2300      	movs	r3, #0
 80012a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e25e      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c0:	4b96      	ldr	r3, [pc, #600]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d00c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012cc:	4b93      	ldr	r3, [pc, #588]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d112      	bne.n	80012fe <HAL_RCC_OscConfig+0x62>
 80012d8:	4b90      	ldr	r3, [pc, #576]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e4:	d10b      	bne.n	80012fe <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e6:	4b8d      	ldr	r3, [pc, #564]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d06c      	beq.n	80013cc <HAL_RCC_OscConfig+0x130>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d168      	bne.n	80013cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e238      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x7a>
 8001308:	4b84      	ldr	r3, [pc, #528]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a83      	ldr	r2, [pc, #524]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e02e      	b.n	8001374 <HAL_RCC_OscConfig+0xd8>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x9c>
 800131e:	4b7f      	ldr	r3, [pc, #508]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7e      	ldr	r2, [pc, #504]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b7c      	ldr	r3, [pc, #496]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a7b      	ldr	r2, [pc, #492]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xd8>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0xc0>
 8001342:	4b76      	ldr	r3, [pc, #472]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a75      	ldr	r2, [pc, #468]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b73      	ldr	r3, [pc, #460]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a72      	ldr	r2, [pc, #456]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xd8>
 800135c:	4b6f      	ldr	r3, [pc, #444]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6e      	ldr	r2, [pc, #440]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b6c      	ldr	r3, [pc, #432]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a6b      	ldr	r2, [pc, #428]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff f92e 	bl	80005dc <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff f92a 	bl	80005dc <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e1ec      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b61      	ldr	r3, [pc, #388]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xe8>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a4:	f7ff f91a 	bl	80005dc <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff f916 	bl	80005dc <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1d8      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b57      	ldr	r3, [pc, #348]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x110>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d069      	beq.n	80014ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013da:	4b50      	ldr	r3, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x190>
 80013f2:	4b4a      	ldr	r3, [pc, #296]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x17a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1ac      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	493d      	ldr	r1, [pc, #244]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e040      	b.n	80014ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d023      	beq.n	800147c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b39      	ldr	r3, [pc, #228]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a38      	ldr	r2, [pc, #224]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff f8cc 	bl	80005dc <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff f8c8 	bl	80005dc <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e18a      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	4929      	ldr	r1, [pc, #164]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001476:	4313      	orrs	r3, r2
 8001478:	600b      	str	r3, [r1, #0]
 800147a:	e018      	b.n	80014ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800147c:	4b27      	ldr	r3, [pc, #156]	; (800151c <HAL_RCC_OscConfig+0x280>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a26      	ldr	r2, [pc, #152]	; (800151c <HAL_RCC_OscConfig+0x280>)
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff f8a8 	bl	80005dc <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff f8a4 	bl	80005dc <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e166      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d038      	beq.n	800152c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d019      	beq.n	80014f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	4a15      	ldr	r2, [pc, #84]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ce:	f7ff f885 	bl	80005dc <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff f881 	bl	80005dc <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e143      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x23a>
 80014f4:	e01a      	b.n	800152c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_RCC_OscConfig+0x280>)
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff f86b 	bl	80005dc <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800150a:	f7ff f867 	bl	80005dc <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d903      	bls.n	8001520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e129      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
 800151c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	4b95      	ldr	r3, [pc, #596]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ee      	bne.n	800150a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a4 	beq.w	8001682 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b8f      	ldr	r3, [pc, #572]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10d      	bne.n	8001562 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b8c      	ldr	r3, [pc, #560]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a8b      	ldr	r2, [pc, #556]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b89      	ldr	r3, [pc, #548]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800155e:	2301      	movs	r3, #1
 8001560:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001562:	4b86      	ldr	r3, [pc, #536]	; (800177c <HAL_RCC_OscConfig+0x4e0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	2b00      	cmp	r3, #0
 800156c:	d118      	bne.n	80015a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800156e:	4b83      	ldr	r3, [pc, #524]	; (800177c <HAL_RCC_OscConfig+0x4e0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a82      	ldr	r2, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x4e0>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157a:	f7ff f82f 	bl	80005dc <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001582:	f7ff f82b 	bl	80005dc <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b64      	cmp	r3, #100	; 0x64
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0ed      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001594:	4b79      	ldr	r3, [pc, #484]	; (800177c <HAL_RCC_OscConfig+0x4e0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0f0      	beq.n	8001582 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x31a>
 80015a8:	4b73      	ldr	r3, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a72      	ldr	r2, [pc, #456]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	e02d      	b.n	8001612 <HAL_RCC_OscConfig+0x376>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x33c>
 80015be:	4b6e      	ldr	r3, [pc, #440]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a6d      	ldr	r2, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	4b6b      	ldr	r3, [pc, #428]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a6a      	ldr	r2, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
 80015d6:	e01c      	b.n	8001612 <HAL_RCC_OscConfig+0x376>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x35e>
 80015e0:	4b65      	ldr	r3, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a64      	ldr	r2, [pc, #400]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	4b62      	ldr	r3, [pc, #392]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a61      	ldr	r2, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
 80015f8:	e00b      	b.n	8001612 <HAL_RCC_OscConfig+0x376>
 80015fa:	4b5f      	ldr	r3, [pc, #380]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a5e      	ldr	r2, [pc, #376]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	4a5b      	ldr	r2, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d015      	beq.n	8001646 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7fe ffdf 	bl	80005dc <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f7fe ffdb 	bl	80005dc <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e09b      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ee      	beq.n	8001622 <HAL_RCC_OscConfig+0x386>
 8001644:	e014      	b.n	8001670 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001646:	f7fe ffc9 	bl	80005dc <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7fe ffc5 	bl	80005dc <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e085      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ee      	bne.n	800164e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d105      	bne.n	8001682 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001676:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a3f      	ldr	r2, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800167c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d071      	beq.n	800176e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	2b08      	cmp	r3, #8
 8001694:	d069      	beq.n	800176a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d14b      	bne.n	8001736 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169e:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a35      	ldr	r2, [pc, #212]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80016a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016aa:	f7fe ff97 	bl	80005dc <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b2:	f7fe ff93 	bl	80005dc <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e055      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f0      	bne.n	80016b2 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	019b      	lsls	r3, r3, #6
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	041b      	lsls	r3, r3, #16
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	061b      	lsls	r3, r3, #24
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	071b      	lsls	r3, r3, #28
 80016fc:	491e      	ldr	r1, [pc, #120]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001708:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7fe ff65 	bl	80005dc <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001716:	f7fe ff61 	bl	80005dc <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e023      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x47a>
 8001734:	e01b      	b.n	800176e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800173c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7fe ff4b 	bl	80005dc <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7fe ff47 	bl	80005dc <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e009      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_RCC_OscConfig+0x4dc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x4ae>
 8001768:	e001      	b.n	800176e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0ce      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b69      	ldr	r3, [pc, #420]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d910      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 020f 	bic.w	r2, r3, #15
 80017ae:	4964      	ldr	r1, [pc, #400]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b62      	ldr	r3, [pc, #392]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b6      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b58      	ldr	r3, [pc, #352]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a57      	ldr	r2, [pc, #348]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b52      	ldr	r3, [pc, #328]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a51      	ldr	r2, [pc, #324]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001802:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494c      	ldr	r1, [pc, #304]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07d      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e071      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e069      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4935      	ldr	r1, [pc, #212]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001874:	f7fe feb2 	bl	80005dc <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7fe feae 	bl	80005dc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e051      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d210      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 020f 	bic.w	r2, r3, #15
 80018ba:	4921      	ldr	r1, [pc, #132]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e030      	b.n	8001936 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b18      	ldr	r3, [pc, #96]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4915      	ldr	r1, [pc, #84]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490d      	ldr	r1, [pc, #52]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f81d 	bl	8001950 <HAL_RCC_GetSysClockFreq>
 8001916:	4601      	mov	r1, r0
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	fa21 f303 	lsr.w	r3, r1, r3
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800192e:	2000      	movs	r0, #0
 8001930:	f7fe fe10 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00
 8001944:	40023800 	.word	0x40023800
 8001948:	080028d8 	.word	0x080028d8
 800194c:	20000008 	.word	0x20000008

08001950 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	2300      	movs	r3, #0
 8001960:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001966:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 030c 	and.w	r3, r3, #12
 800196e:	2b04      	cmp	r3, #4
 8001970:	d007      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x32>
 8001972:	2b08      	cmp	r3, #8
 8001974:	d008      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x38>
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 808d 	bne.w	8001a96 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_RCC_GetSysClockFreq+0x15c>)
 800197e:	60bb      	str	r3, [r7, #8]
       break;
 8001980:	e08c      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001982:	4b4b      	ldr	r3, [pc, #300]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001984:	60bb      	str	r3, [r7, #8]
      break;
 8001986:	e089      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x158>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001990:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d023      	beq.n	80019e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x158>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	f04f 0400 	mov.w	r4, #0
 80019a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	ea03 0501 	and.w	r5, r3, r1
 80019b4:	ea04 0602 	and.w	r6, r4, r2
 80019b8:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ba:	fb02 f106 	mul.w	r1, r2, r6
 80019be:	2200      	movs	r2, #0
 80019c0:	fb02 f205 	mul.w	r2, r2, r5
 80019c4:	440a      	add	r2, r1
 80019c6:	493a      	ldr	r1, [pc, #232]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x160>)
 80019c8:	fba5 0101 	umull	r0, r1, r5, r1
 80019cc:	1853      	adds	r3, r2, r1
 80019ce:	4619      	mov	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f04f 0400 	mov.w	r4, #0
 80019d6:	461a      	mov	r2, r3
 80019d8:	4623      	mov	r3, r4
 80019da:	f7fe fc2d 	bl	8000238 <__aeabi_uldivmod>
 80019de:	4603      	mov	r3, r0
 80019e0:	460c      	mov	r4, r1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e049      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e6:	4b30      	ldr	r3, [pc, #192]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x158>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	099b      	lsrs	r3, r3, #6
 80019ec:	f04f 0400 	mov.w	r4, #0
 80019f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	ea03 0501 	and.w	r5, r3, r1
 80019fc:	ea04 0602 	and.w	r6, r4, r2
 8001a00:	4629      	mov	r1, r5
 8001a02:	4632      	mov	r2, r6
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	f04f 0400 	mov.w	r4, #0
 8001a0c:	0154      	lsls	r4, r2, #5
 8001a0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a12:	014b      	lsls	r3, r1, #5
 8001a14:	4619      	mov	r1, r3
 8001a16:	4622      	mov	r2, r4
 8001a18:	1b49      	subs	r1, r1, r5
 8001a1a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	f04f 0400 	mov.w	r4, #0
 8001a26:	0194      	lsls	r4, r2, #6
 8001a28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a2c:	018b      	lsls	r3, r1, #6
 8001a2e:	1a5b      	subs	r3, r3, r1
 8001a30:	eb64 0402 	sbc.w	r4, r4, r2
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	00e2      	lsls	r2, r4, #3
 8001a3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a42:	00d9      	lsls	r1, r3, #3
 8001a44:	460b      	mov	r3, r1
 8001a46:	4614      	mov	r4, r2
 8001a48:	195b      	adds	r3, r3, r5
 8001a4a:	eb44 0406 	adc.w	r4, r4, r6
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	02a2      	lsls	r2, r4, #10
 8001a58:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a5c:	0299      	lsls	r1, r3, #10
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4614      	mov	r4, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	4621      	mov	r1, r4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f04f 0400 	mov.w	r4, #0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4623      	mov	r3, r4
 8001a70:	f7fe fbe2 	bl	8000238 <__aeabi_uldivmod>
 8001a74:	4603      	mov	r3, r0
 8001a76:	460c      	mov	r4, r1
 8001a78:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	0c1b      	lsrs	r3, r3, #16
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	3301      	adds	r3, #1
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	60bb      	str	r3, [r7, #8]
      break;
 8001a94:	e002      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a98:	60bb      	str	r3, [r7, #8]
      break;
 8001a9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	018cba80 	.word	0x018cba80

08001ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e01d      	b.n	8001b02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fdc6 	bl	800266c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f000 f8c4 	bl	8001c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_TIM_ConfigClockSource+0x18>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0a6      	b.n	8001c72 <HAL_TIM_ConfigClockSource+0x166>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4b4f      	ldr	r3, [pc, #316]	; (8001c7c <HAL_TIM_ConfigClockSource+0x170>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b40      	cmp	r3, #64	; 0x40
 8001b5a:	d067      	beq.n	8001c2c <HAL_TIM_ConfigClockSource+0x120>
 8001b5c:	2b40      	cmp	r3, #64	; 0x40
 8001b5e:	d80b      	bhi.n	8001b78 <HAL_TIM_ConfigClockSource+0x6c>
 8001b60:	2b10      	cmp	r3, #16
 8001b62:	d073      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0x140>
 8001b64:	2b10      	cmp	r3, #16
 8001b66:	d802      	bhi.n	8001b6e <HAL_TIM_ConfigClockSource+0x62>
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d06f      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001b6c:	e078      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b6e:	2b20      	cmp	r3, #32
 8001b70:	d06c      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0x140>
 8001b72:	2b30      	cmp	r3, #48	; 0x30
 8001b74:	d06a      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001b76:	e073      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b78:	2b70      	cmp	r3, #112	; 0x70
 8001b7a:	d00d      	beq.n	8001b98 <HAL_TIM_ConfigClockSource+0x8c>
 8001b7c:	2b70      	cmp	r3, #112	; 0x70
 8001b7e:	d804      	bhi.n	8001b8a <HAL_TIM_ConfigClockSource+0x7e>
 8001b80:	2b50      	cmp	r3, #80	; 0x50
 8001b82:	d033      	beq.n	8001bec <HAL_TIM_ConfigClockSource+0xe0>
 8001b84:	2b60      	cmp	r3, #96	; 0x60
 8001b86:	d041      	beq.n	8001c0c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001b88:	e06a      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8e:	d066      	beq.n	8001c5e <HAL_TIM_ConfigClockSource+0x152>
 8001b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b94:	d017      	beq.n	8001bc6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001b96:	e063      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f000 f984 	bl	8001eb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001bba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	609a      	str	r2, [r3, #8]
      break;
 8001bc4:	e04c      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6899      	ldr	r1, [r3, #8]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f000 f96d 	bl	8001eb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001be8:	609a      	str	r2, [r3, #8]
      break;
 8001bea:	e039      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f000 f8e1 	bl	8001dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2150      	movs	r1, #80	; 0x50
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f93a 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c0a:	e029      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f000 f900 	bl	8001e1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2160      	movs	r1, #96	; 0x60
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 f92a 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c2a:	e019      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	f000 f8c1 	bl	8001dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2140      	movs	r1, #64	; 0x40
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f91a 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c4a:	e009      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4619      	mov	r1, r3
 8001c56:	4610      	mov	r0, r2
 8001c58:	f000 f911 	bl	8001e7e <TIM_ITRx_SetConfig>
      break;
 8001c5c:	e000      	b.n	8001c60 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001c5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	fffeff88 	.word	0xfffeff88

08001c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a40      	ldr	r2, [pc, #256]	; (8001d94 <TIM_Base_SetConfig+0x114>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9e:	d00f      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3d      	ldr	r2, [pc, #244]	; (8001d98 <TIM_Base_SetConfig+0x118>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00b      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3c      	ldr	r2, [pc, #240]	; (8001d9c <TIM_Base_SetConfig+0x11c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <TIM_Base_SetConfig+0x120>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3a      	ldr	r2, [pc, #232]	; (8001da4 <TIM_Base_SetConfig+0x124>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d108      	bne.n	8001cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <TIM_Base_SetConfig+0x114>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d027      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a2c      	ldr	r2, [pc, #176]	; (8001d98 <TIM_Base_SetConfig+0x118>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d023      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <TIM_Base_SetConfig+0x11c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a2a      	ldr	r2, [pc, #168]	; (8001da0 <TIM_Base_SetConfig+0x120>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <TIM_Base_SetConfig+0x124>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d017      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a28      	ldr	r2, [pc, #160]	; (8001da8 <TIM_Base_SetConfig+0x128>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <TIM_Base_SetConfig+0x12c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00f      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <TIM_Base_SetConfig+0x130>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <TIM_Base_SetConfig+0x134>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a24      	ldr	r2, [pc, #144]	; (8001db8 <TIM_Base_SetConfig+0x138>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <TIM_Base_SetConfig+0x13c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d108      	bne.n	8001d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <TIM_Base_SetConfig+0x114>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d003      	beq.n	8001d78 <TIM_Base_SetConfig+0xf8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <TIM_Base_SetConfig+0x124>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d103      	bne.n	8001d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691a      	ldr	r2, [r3, #16]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	615a      	str	r2, [r3, #20]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40000800 	.word	0x40000800
 8001da0:	40000c00 	.word	0x40000c00
 8001da4:	40010400 	.word	0x40010400
 8001da8:	40014000 	.word	0x40014000
 8001dac:	40014400 	.word	0x40014400
 8001db0:	40014800 	.word	0x40014800
 8001db4:	40001800 	.word	0x40001800
 8001db8:	40001c00 	.word	0x40001c00
 8001dbc:	40002000 	.word	0x40002000

08001dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	f023 0201 	bic.w	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f023 030a 	bic.w	r3, r3, #10
 8001dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	621a      	str	r2, [r3, #32]
}
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b087      	sub	sp, #28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	f023 0210 	bic.w	r2, r3, #16
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	031b      	lsls	r3, r3, #12
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	621a      	str	r2, [r3, #32]
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	f043 0307 	orr.w	r3, r3, #7
 8001ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	021a      	lsls	r2, r3, #8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	609a      	str	r2, [r3, #8]
}
 8001ee8:	bf00      	nop
 8001eea:	371c      	adds	r7, #28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e045      	b.n	8001f98 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d108      	bne.n	8001f52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001f46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f6a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40010400 	.word	0x40010400

08001fac <ID_intit>:
#include "id.h"

void ID_intit(ID* _ID){
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	_ID->imu_angular_rate = 0x4EC;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f240 42ec 	movw	r2, #1260	; 0x4ec
 8001fba:	601a      	str	r2, [r3, #0]
	_ID->imu_acceleration = 0x4ED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f240 42ed 	movw	r2, #1261	; 0x4ed
 8001fc2:	605a      	str	r2, [r3, #4]
	_ID->ITS_1_0 = 0x5B0;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f44f 62b6 	mov.w	r2, #1456	; 0x5b0
 8001fca:	609a      	str	r2, [r3, #8]
	_ID->ITS_1_1 = 0x5B1;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f240 52b1 	movw	r2, #1457	; 0x5b1
 8001fd2:	60da      	str	r2, [r3, #12]
	_ID->ITS_1_2 = 0x5B2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f240 52b2 	movw	r2, #1458	; 0x5b2
 8001fda:	611a      	str	r2, [r3, #16]
	_ID->ITS_1_3 = 0x5B3;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8001fe2:	615a      	str	r2, [r3, #20]
	_ID->ITS_2_0 = 0x5B4;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8001fea:	619a      	str	r2, [r3, #24]
	_ID->ITS_2_1 = 0x5B5;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f240 52b5 	movw	r2, #1461	; 0x5b5
 8001ff2:	61da      	str	r2, [r3, #28]
	_ID->ITS_2_2 = 0x5B6;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f240 52b6 	movw	r2, #1462	; 0x5b6
 8001ffa:	621a      	str	r2, [r3, #32]
	_ID->ITS_2_3 = 0x5B7;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8002002:	625a      	str	r2, [r3, #36]	; 0x24
	_ID->ITS_3_0 = 0x5B8;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
	_ID->ITS_3_1 = 0x5B9;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c
	_ID->ITS_3_2 = 0x5BA;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
	_ID->ITS_3_3 = 0x5BB;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f240 52bb 	movw	r2, #1467	; 0x5bb
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
	_ID->ITS_4_0 = 0x5BC;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f240 52bc 	movw	r2, #1468	; 0x5bc
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
	_ID->ITS_4_1 = 0x5BD;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f240 52bd 	movw	r2, #1469	; 0x5bd
 8002032:	63da      	str	r2, [r3, #60]	; 0x3c
	_ID->ITS_4_2 = 0x5BE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f240 52be 	movw	r2, #1470	; 0x5be
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
	_ID->ITS_4_3 = 0x5BF;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f240 52bf 	movw	r2, #1471	; 0x5bf
 8002042:	645a      	str	r2, [r3, #68]	; 0x44

}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ID_intit(&id);
 8002054:	4819      	ldr	r0, [pc, #100]	; (80020bc <main+0x6c>)
 8002056:	f7ff ffa9 	bl	8001fac <ID_intit>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800205a:	f7fe fa6d 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800205e:	f000 f831 	bl	80020c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002062:	f000 f99d 	bl	80023a0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002066:	f000 f8dd 	bl	8002224 <MX_CAN1_Init>
  MX_CAN3_Init();
 800206a:	f000 f911 	bl	8002290 <MX_CAN3_Init>
  MX_TIM1_Init();
 800206e:	f000 f945 	bl	80022fc <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002072:	f000 f893 	bl	800219c <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(current_state == STATE_INIT){
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <main+0x70>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <main+0x34>
		  init();
 800207e:	f000 f9ee 	bl	800245e <init>
 8002082:	e7f8      	b.n	8002076 <main+0x26>
	  }else if(current_state == STATE_IDLE){
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <main+0x70>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d102      	bne.n	8002092 <main+0x42>
		  idle();
 800208c:	f000 f9ee 	bl	800246c <idle>
 8002090:	e7f1      	b.n	8002076 <main+0x26>
	  }else if(current_state == STATE_CALIB){
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <main+0x70>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d102      	bne.n	80020a0 <main+0x50>
		  calib();
 800209a:	f000 f9ee 	bl	800247a <calib>
 800209e:	e7ea      	b.n	8002076 <main+0x26>
	  }else if(current_state == STATE_SETUP){
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <main+0x70>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d102      	bne.n	80020ae <main+0x5e>
		  setup();
 80020a8:	f000 f9ee 	bl	8002488 <setup>
 80020ac:	e7e3      	b.n	8002076 <main+0x26>
	  }else if(current_state == STATE_RUN){
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <main+0x70>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d1df      	bne.n	8002076 <main+0x26>
		  run();
 80020b6:	f000 f9ee 	bl	8002496 <run>
	  if(current_state == STATE_INIT){
 80020ba:	e7dc      	b.n	8002076 <main+0x26>
 80020bc:	20000034 	.word	0x20000034
 80020c0:	20000030 	.word	0x20000030

080020c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b094      	sub	sp, #80	; 0x50
 80020c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ca:	f107 031c 	add.w	r3, r7, #28
 80020ce:	2234      	movs	r2, #52	; 0x34
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 fbec 	bl	80028b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e8:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <SystemClock_Config+0xd0>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a29      	ldr	r2, [pc, #164]	; (8002194 <SystemClock_Config+0xd0>)
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <SystemClock_Config+0xd0>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002100:	4b25      	ldr	r3, [pc, #148]	; (8002198 <SystemClock_Config+0xd4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <SystemClock_Config+0xd4>)
 8002106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <SystemClock_Config+0xd4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002118:	2301      	movs	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800211c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002120:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002122:	2302      	movs	r3, #2
 8002124:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800212a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 13;
 800212c:	230d      	movs	r3, #13
 800212e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002130:	23d8      	movs	r3, #216	; 0xd8
 8002132:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002134:	2302      	movs	r3, #2
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002138:	2302      	movs	r3, #2
 800213a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213c:	f107 031c 	add.w	r3, r7, #28
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff f8ab 	bl	800129c <HAL_RCC_OscConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800214c:	f000 f980 	bl	8002450 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002150:	f7ff f854 	bl	80011fc <HAL_PWREx_EnableOverDrive>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800215a:	f000 f979 	bl	8002450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215e:	230f      	movs	r3, #15
 8002160:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002162:	2302      	movs	r3, #2
 8002164:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800216a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800216e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002174:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	2107      	movs	r1, #7
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff faff 	bl	8001780 <HAL_RCC_ClockConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002188:	f000 f962 	bl	8002450 <Error_Handler>
  }
}
 800218c:	bf00      	nop
 800218e:	3750      	adds	r7, #80	; 0x50
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	40007000 	.word	0x40007000

0800219c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	2013      	movs	r0, #19
 80021a6:	f7fe fe2e 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80021aa:	2013      	movs	r0, #19
 80021ac:	f7fe fe47 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2100      	movs	r1, #0
 80021b4:	2014      	movs	r0, #20
 80021b6:	f7fe fe26 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80021ba:	2014      	movs	r0, #20
 80021bc:	f7fe fe3f 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	2015      	movs	r0, #21
 80021c6:	f7fe fe1e 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80021ca:	2015      	movs	r0, #21
 80021cc:	f7fe fe37 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* CAN3_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_TX_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	2068      	movs	r0, #104	; 0x68
 80021d6:	f7fe fe16 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_TX_IRQn);
 80021da:	2068      	movs	r0, #104	; 0x68
 80021dc:	f7fe fe2f 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* CAN3_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	2069      	movs	r0, #105	; 0x69
 80021e6:	f7fe fe0e 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80021ea:	2069      	movs	r0, #105	; 0x69
 80021ec:	f7fe fe27 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* CAN3_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	206a      	movs	r0, #106	; 0x6a
 80021f6:	f7fe fe06 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 80021fa:	206a      	movs	r0, #106	; 0x6a
 80021fc:	f7fe fe1f 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* CAN3_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN3_SCE_IRQn, 0, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	2100      	movs	r1, #0
 8002204:	206b      	movs	r0, #107	; 0x6b
 8002206:	f7fe fdfe 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN3_SCE_IRQn);
 800220a:	206b      	movs	r0, #107	; 0x6b
 800220c:	f7fe fe17 	bl	8000e3e <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2016      	movs	r0, #22
 8002216:	f7fe fdf6 	bl	8000e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800221a:	2016      	movs	r0, #22
 800221c:	f7fe fe0f 	bl	8000e3e <HAL_NVIC_EnableIRQ>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_CAN1_Init+0x64>)
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <MX_CAN1_Init+0x68>)
 800222c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <MX_CAN1_Init+0x64>)
 8002230:	2203      	movs	r2, #3
 8002232:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <MX_CAN1_Init+0x64>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_CAN1_Init+0x64>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_CAN1_Init+0x64>)
 8002242:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002246:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <MX_CAN1_Init+0x64>)
 800224a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800224e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002250:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <MX_CAN1_Init+0x64>)
 8002252:	2200      	movs	r2, #0
 8002254:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_CAN1_Init+0x64>)
 8002258:	2200      	movs	r2, #0
 800225a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800225c:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MX_CAN1_Init+0x64>)
 800225e:	2200      	movs	r2, #0
 8002260:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_CAN1_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <MX_CAN1_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_CAN1_Init+0x64>)
 8002270:	2200      	movs	r2, #0
 8002272:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002274:	4804      	ldr	r0, [pc, #16]	; (8002288 <MX_CAN1_Init+0x64>)
 8002276:	f7fe f9bd 	bl	80005f4 <HAL_CAN_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002280:	f000 f8e6 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200000e4 	.word	0x200000e4
 800228c:	40006400 	.word	0x40006400

08002290 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <MX_CAN3_Init+0x64>)
 8002296:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <MX_CAN3_Init+0x68>)
 8002298:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 3;
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <MX_CAN3_Init+0x64>)
 800229c:	2203      	movs	r2, #3
 800229e:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 80022a0:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_15TQ;
 80022ac:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022b2:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80022b4:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ba:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022be:	2200      	movs	r2, #0
 80022c0:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022dc:	2200      	movs	r2, #0
 80022de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80022e0:	4804      	ldr	r0, [pc, #16]	; (80022f4 <MX_CAN3_Init+0x64>)
 80022e2:	f7fe f987 	bl	80005f4 <HAL_CAN_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80022ec:	f000 f8b0 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000007c 	.word	0x2000007c
 80022f8:	40003400 	.word	0x40003400

080022fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b088      	sub	sp, #32
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	609a      	str	r2, [r3, #8]
 800230e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <MX_TIM1_Init+0x9c>)
 800231c:	4a1f      	ldr	r2, [pc, #124]	; (800239c <MX_TIM1_Init+0xa0>)
 800231e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216;
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <MX_TIM1_Init+0x9c>)
 8002322:	22d8      	movs	r2, #216	; 0xd8
 8002324:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002326:	4b1c      	ldr	r3, [pc, #112]	; (8002398 <MX_TIM1_Init+0x9c>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <MX_TIM1_Init+0x9c>)
 800232e:	2264      	movs	r2, #100	; 0x64
 8002330:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <MX_TIM1_Init+0x9c>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002338:	4b17      	ldr	r3, [pc, #92]	; (8002398 <MX_TIM1_Init+0x9c>)
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <MX_TIM1_Init+0x9c>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002344:	4814      	ldr	r0, [pc, #80]	; (8002398 <MX_TIM1_Init+0x9c>)
 8002346:	f7ff fbb5 	bl	8001ab4 <HAL_TIM_Base_Init>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002350:	f000 f87e 	bl	8002450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002358:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800235a:	f107 0310 	add.w	r3, r7, #16
 800235e:	4619      	mov	r1, r3
 8002360:	480d      	ldr	r0, [pc, #52]	; (8002398 <MX_TIM1_Init+0x9c>)
 8002362:	f7ff fbd3 	bl	8001b0c <HAL_TIM_ConfigClockSource>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800236c:	f000 f870 	bl	8002450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002370:	2300      	movs	r3, #0
 8002372:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_TIM1_Init+0x9c>)
 8002382:	f7ff fdb7 	bl	8001ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800238c:	f000 f860 	bl	8002450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200000a4 	.word	0x200000a4
 800239c:	40010000 	.word	0x40010000

080023a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
 80023b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a1d      	ldr	r2, [pc, #116]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023d4:	f043 0310 	orr.w	r3, r3, #16
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a17      	ldr	r2, [pc, #92]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <MX_GPIO_Init+0xa8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_GPIO_Init+0xa8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a11      	ldr	r2, [pc, #68]	; (8002448 <MX_GPIO_Init+0xa8>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_GPIO_Init+0xa8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800241c:	480b      	ldr	r0, [pc, #44]	; (800244c <MX_GPIO_Init+0xac>)
 800241e:	f7fe fed3 	bl	80011c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE11 PE12 PE13 PE14 
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8002422:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002426:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	2301      	movs	r3, #1
 800242a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	4619      	mov	r1, r3
 800243a:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_GPIO_Init+0xac>)
 800243c:	f7fe fd1a 	bl	8000e74 <HAL_GPIO_Init>

}
 8002440:	bf00      	nop
 8002442:	3728      	adds	r7, #40	; 0x28
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40023800 	.word	0x40023800
 800244c:	40021000 	.word	0x40021000

08002450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <init>:
#include "state.h"


void init(){
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0

}
 8002462:	bf00      	nop
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <idle>:
void idle(){
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0

}
 8002470:	bf00      	nop
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <calib>:
void calib(){
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <setup>:
void setup(){
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0

}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <run>:
void run(){
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <HAL_MspInit+0x44>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <HAL_MspInit+0x44>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_MspInit+0x44>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_MspInit+0x44>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <HAL_MspInit+0x44>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_MspInit+0x44>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	; 0x38
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a52      	ldr	r2, [pc, #328]	; (8002654 <HAL_CAN_MspInit+0x168>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d132      	bne.n	8002574 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800250e:	4b52      	ldr	r3, [pc, #328]	; (8002658 <HAL_CAN_MspInit+0x16c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	4a50      	ldr	r2, [pc, #320]	; (8002658 <HAL_CAN_MspInit+0x16c>)
 8002516:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002518:	4b4f      	ldr	r3, [pc, #316]	; (8002658 <HAL_CAN_MspInit+0x16c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d10b      	bne.n	8002538 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <HAL_CAN_MspInit+0x170>)
 8002522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002524:	4a4d      	ldr	r2, [pc, #308]	; (800265c <HAL_CAN_MspInit+0x170>)
 8002526:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800252a:	6413      	str	r3, [r2, #64]	; 0x40
 800252c:	4b4b      	ldr	r3, [pc, #300]	; (800265c <HAL_CAN_MspInit+0x170>)
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002538:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_CAN_MspInit+0x170>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_CAN_MspInit+0x170>)
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	6313      	str	r3, [r2, #48]	; 0x30
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <HAL_CAN_MspInit+0x170>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002550:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002556:	2302      	movs	r3, #2
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002562:	2309      	movs	r3, #9
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256a:	4619      	mov	r1, r3
 800256c:	483c      	ldr	r0, [pc, #240]	; (8002660 <HAL_CAN_MspInit+0x174>)
 800256e:	f7fe fc81 	bl	8000e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8002572:	e06a      	b.n	800264a <HAL_CAN_MspInit+0x15e>
  else if(hcan->Instance==CAN3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3a      	ldr	r2, [pc, #232]	; (8002664 <HAL_CAN_MspInit+0x178>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d165      	bne.n	800264a <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN3_CLK_ENABLE();
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_CAN_MspInit+0x170>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a36      	ldr	r2, [pc, #216]	; (800265c <HAL_CAN_MspInit+0x170>)
 8002584:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_CAN_MspInit+0x170>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_CAN_MspInit+0x170>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_CAN_MspInit+0x170>)
 800259c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025aa:	617b      	str	r3, [r7, #20]
 80025ac:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_CAN_MspInit+0x16c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a28      	ldr	r2, [pc, #160]	; (8002658 <HAL_CAN_MspInit+0x16c>)
 80025b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_CAN_MspInit+0x16c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10b      	bne.n	80025d8 <HAL_CAN_MspInit+0xec>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025c0:	4b26      	ldr	r3, [pc, #152]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	4a25      	ldr	r2, [pc, #148]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025ca:	6413      	str	r3, [r2, #64]	; 0x40
 80025cc:	4b23      	ldr	r3, [pc, #140]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f0:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	6313      	str	r3, [r2, #48]	; 0x30
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_CAN_MspInit+0x170>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002608:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800261a:	230b      	movs	r3, #11
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	480e      	ldr	r0, [pc, #56]	; (8002660 <HAL_CAN_MspInit+0x174>)
 8002626:	f7fe fc25 	bl	8000e74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800262a:	2310      	movs	r3, #16
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800263a:	230b      	movs	r3, #11
 800263c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800263e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002642:	4619      	mov	r1, r3
 8002644:	4808      	ldr	r0, [pc, #32]	; (8002668 <HAL_CAN_MspInit+0x17c>)
 8002646:	f7fe fc15 	bl	8000e74 <HAL_GPIO_Init>
}
 800264a:	bf00      	nop
 800264c:	3738      	adds	r7, #56	; 0x38
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40006400 	.word	0x40006400
 8002658:	20000028 	.word	0x20000028
 800265c:	40023800 	.word	0x40023800
 8002660:	40020000 	.word	0x40020000
 8002664:	40003400 	.word	0x40003400
 8002668:	40020400 	.word	0x40020400

0800266c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_TIM_Base_MspInit+0x38>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d10b      	bne.n	8002696 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800267e:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <HAL_TIM_Base_MspInit+0x3c>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <HAL_TIM_Base_MspInit+0x3c>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002696:	bf00      	nop
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40023800 	.word	0x40023800

080026ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002700:	f7fd ff58 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <CAN1_TX_IRQHandler+0x10>)
 800270e:	f7fe f86c 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200000e4 	.word	0x200000e4

0800271c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <CAN1_RX0_IRQHandler+0x10>)
 8002722:	f7fe f862 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200000e4 	.word	0x200000e4

08002730 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002734:	4802      	ldr	r0, [pc, #8]	; (8002740 <CAN1_RX1_IRQHandler+0x10>)
 8002736:	f7fe f858 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	200000e4 	.word	0x200000e4

08002744 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <CAN1_SCE_IRQHandler+0x10>)
 800274a:	f7fe f84e 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200000e4 	.word	0x200000e4

08002758 <CAN3_TX_IRQHandler>:

/**
  * @brief This function handles CAN3 TX interrupt.
  */
void CAN3_TX_IRQHandler(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_TX_IRQn 0 */

  /* USER CODE END CAN3_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <CAN3_TX_IRQHandler+0x10>)
 800275e:	f7fe f844 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_TX_IRQn 1 */

  /* USER CODE END CAN3_TX_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000007c 	.word	0x2000007c

0800276c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <CAN3_RX0_IRQHandler+0x10>)
 8002772:	f7fe f83a 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	2000007c 	.word	0x2000007c

08002780 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <CAN3_RX1_IRQHandler+0x10>)
 8002786:	f7fe f830 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000007c 	.word	0x2000007c

08002794 <CAN3_SCE_IRQHandler>:

/**
  * @brief This function handles CAN3 SCE interrupt.
  */
void CAN3_SCE_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_SCE_IRQn 0 */

  /* USER CODE END CAN3_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <CAN3_SCE_IRQHandler+0x10>)
 800279a:	f7fe f826 	bl	80007ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_SCE_IRQn 1 */

  /* USER CODE END CAN3_SCE_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	2000007c 	.word	0x2000007c

080027a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <SystemInit+0x5c>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	4a14      	ldr	r2, [pc, #80]	; (8002804 <SystemInit+0x5c>)
 80027b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <SystemInit+0x60>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a11      	ldr	r2, [pc, #68]	; (8002808 <SystemInit+0x60>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <SystemInit+0x60>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <SystemInit+0x60>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	490d      	ldr	r1, [pc, #52]	; (8002808 <SystemInit+0x60>)
 80027d4:	4b0d      	ldr	r3, [pc, #52]	; (800280c <SystemInit+0x64>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <SystemInit+0x60>)
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <SystemInit+0x68>)
 80027de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80027e0:	4b09      	ldr	r3, [pc, #36]	; (8002808 <SystemInit+0x60>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a08      	ldr	r2, [pc, #32]	; (8002808 <SystemInit+0x60>)
 80027e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <SystemInit+0x60>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <SystemInit+0x5c>)
 80027f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027f8:	609a      	str	r2, [r3, #8]
#endif
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00
 8002808:	40023800 	.word	0x40023800
 800280c:	fef6ffff 	.word	0xfef6ffff
 8002810:	24003010 	.word	0x24003010

08002814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002814:	f8df d034 	ldr.w	sp, [pc, #52]	; 800284c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002818:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800281a:	e003      	b.n	8002824 <LoopCopyDataInit>

0800281c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800281e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002820:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002822:	3104      	adds	r1, #4

08002824 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002828:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800282a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800282c:	d3f6      	bcc.n	800281c <CopyDataInit>
  ldr  r2, =_sbss
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002830:	e002      	b.n	8002838 <LoopFillZerobss>

08002832 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002832:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002834:	f842 3b04 	str.w	r3, [r2], #4

08002838 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800283a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800283c:	d3f9      	bcc.n	8002832 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800283e:	f7ff ffb3 	bl	80027a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002842:	f000 f811 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002846:	f7ff fc03 	bl	8002050 <main>
  bx  lr    
 800284a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800284c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002850:	080028f8 	.word	0x080028f8
  ldr  r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002858:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800285c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002860:	2000010c 	.word	0x2000010c

08002864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002864:	e7fe      	b.n	8002864 <ADC_IRQHandler>
	...

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4e0d      	ldr	r6, [pc, #52]	; (80028a0 <__libc_init_array+0x38>)
 800286c:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 800286e:	1ba4      	subs	r4, r4, r6
 8002870:	10a4      	asrs	r4, r4, #2
 8002872:	2500      	movs	r5, #0
 8002874:	42a5      	cmp	r5, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	4e0b      	ldr	r6, [pc, #44]	; (80028a8 <__libc_init_array+0x40>)
 800287a:	4c0c      	ldr	r4, [pc, #48]	; (80028ac <__libc_init_array+0x44>)
 800287c:	f000 f820 	bl	80028c0 <_init>
 8002880:	1ba4      	subs	r4, r4, r6
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	2500      	movs	r5, #0
 8002886:	42a5      	cmp	r5, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002890:	4798      	blx	r3
 8002892:	3501      	adds	r5, #1
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800289a:	4798      	blx	r3
 800289c:	3501      	adds	r5, #1
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	080028f0 	.word	0x080028f0
 80028a4:	080028f0 	.word	0x080028f0
 80028a8:	080028f0 	.word	0x080028f0
 80028ac:	080028f4 	.word	0x080028f4

080028b0 <memset>:
 80028b0:	4402      	add	r2, r0
 80028b2:	4603      	mov	r3, r0
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d100      	bne.n	80028ba <memset+0xa>
 80028b8:	4770      	bx	lr
 80028ba:	f803 1b01 	strb.w	r1, [r3], #1
 80028be:	e7f9      	b.n	80028b4 <memset+0x4>

080028c0 <_init>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	bf00      	nop
 80028c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028c6:	bc08      	pop	{r3}
 80028c8:	469e      	mov	lr, r3
 80028ca:	4770      	bx	lr

080028cc <_fini>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	bf00      	nop
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr
