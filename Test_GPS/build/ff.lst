ARM GAS  /tmp/ccBYTIZg.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"ff.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.ld_word,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	ld_word:
  24              	.LFB141:
  25              		.file 1 "Middlewares/Third_Party/FatFs/src/ff.c"
   1:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------------------------------------------/
   2:Middlewares/Third_Party/FatFs/src/ff.c **** /  FatFs - Generic FAT file system module  R0.12c                             /
   3:Middlewares/Third_Party/FatFs/src/ff.c **** /-----------------------------------------------------------------------------/
   4:Middlewares/Third_Party/FatFs/src/ff.c **** /
   5:Middlewares/Third_Party/FatFs/src/ff.c **** / Copyright (C) 2017, ChaN, all right reserved.
   6:Middlewares/Third_Party/FatFs/src/ff.c **** /
   7:Middlewares/Third_Party/FatFs/src/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:Middlewares/Third_Party/FatFs/src/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:Middlewares/Third_Party/FatFs/src/ff.c **** / that the following condition is met:
  10:Middlewares/Third_Party/FatFs/src/ff.c **** /
  11:Middlewares/Third_Party/FatFs/src/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:Middlewares/Third_Party/FatFs/src/ff.c **** /    this condition and the following disclaimer.
  13:Middlewares/Third_Party/FatFs/src/ff.c **** /
  14:Middlewares/Third_Party/FatFs/src/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:Middlewares/Third_Party/FatFs/src/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:Middlewares/Third_Party/FatFs/src/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:Middlewares/Third_Party/FatFs/src/ff.c **** / by use of this software.
  18:Middlewares/Third_Party/FatFs/src/ff.c **** /----------------------------------------------------------------------------*/
  19:Middlewares/Third_Party/FatFs/src/ff.c **** 
  20:Middlewares/Third_Party/FatFs/src/ff.c **** 
  21:Middlewares/Third_Party/FatFs/src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  22:Middlewares/Third_Party/FatFs/src/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  23:Middlewares/Third_Party/FatFs/src/ff.c **** 
  24:Middlewares/Third_Party/FatFs/src/ff.c **** 
  25:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
  26:Middlewares/Third_Party/FatFs/src/ff.c **** 
  27:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Definitions
  28:Middlewares/Third_Party/FatFs/src/ff.c **** 
  29:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
  30:Middlewares/Third_Party/FatFs/src/ff.c **** 
  31:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FATFS != 68300	/* Revision ID */
  32:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong include file (ff.h).
  33:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccBYTIZg.s 			page 2


  34:Middlewares/Third_Party/FatFs/src/ff.c **** 
  35:Middlewares/Third_Party/FatFs/src/ff.c **** 
  36:Middlewares/Third_Party/FatFs/src/ff.c **** /* DBCS code ranges and SBCS upper conversion tables */
  37:Middlewares/Third_Party/FatFs/src/ff.c **** 
  38:Middlewares/Third_Party/FatFs/src/ff.c **** #if _CODE_PAGE == 932	/* Japanese Shift-JIS */
  39:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81	/* DBC 1st byte range 1 start */
  40:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0x9F	/* DBC 1st byte range 1 end */
  41:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF2S	0xE0	/* DBC 1st byte range 2 start */
  42:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF2E	0xFC	/* DBC 1st byte range 2 end */
  43:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40	/* DBC 2nd byte range 1 start */
  44:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
  45:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x80	/* DBC 2nd byte range 2 start */
  46:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
  47:Middlewares/Third_Party/FatFs/src/ff.c **** 
  48:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
  49:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  50:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  51:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40
  52:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E
  53:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x80
  54:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFE
  55:Middlewares/Third_Party/FatFs/src/ff.c **** 
  56:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 949	/* Korean */
  57:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  58:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  59:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x41
  60:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x5A
  61:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0x61
  62:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0x7A
  63:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS3S	0x81
  64:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS3E	0xFE
  65:Middlewares/Third_Party/FatFs/src/ff.c **** 
  66:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
  67:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0x81
  68:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1E	0xFE
  69:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1S	0x40
  70:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS1E	0x7E
  71:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2S	0xA1
  72:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DS2E	0xFE
  73:Middlewares/Third_Party/FatFs/src/ff.c **** 
  74:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 437	/* U.S. */
  75:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  76:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
  77:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  78:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  79:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
  80:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  81:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  82:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  83:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  84:Middlewares/Third_Party/FatFs/src/ff.c **** 
  85:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 720	/* Arabic */
  86:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  87:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  88:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
  89:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
  90:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
ARM GAS  /tmp/ccBYTIZg.s 			page 3


  91:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
  92:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
  93:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
  94:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
  95:Middlewares/Third_Party/FatFs/src/ff.c **** 
  96:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 737	/* Greek */
  97:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
  98:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
  99:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 100:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 101:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 102:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 103:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 104:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 105:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 106:Middlewares/Third_Party/FatFs/src/ff.c **** 
 107:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 771	/* KBL */
 108:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 109:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 110:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 111:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 112:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 113:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 114:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 115:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 116:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 117:Middlewares/Third_Party/FatFs/src/ff.c **** 
 118:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 775	/* Baltic */
 119:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 120:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F, \
 121:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 122:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 123:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 124:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 125:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 126:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 127:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 128:Middlewares/Third_Party/FatFs/src/ff.c **** 
 129:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 850	/* Latin 1 */
 130:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 131:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41, \
 132:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 133:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 134:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 135:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 136:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 137:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 138:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 139:Middlewares/Third_Party/FatFs/src/ff.c **** 
 140:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 852	/* Latin 2 */
 141:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 142:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F, \
 143:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 144:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 145:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 146:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 147:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
ARM GAS  /tmp/ccBYTIZg.s 			page 4


 148:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 149:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 150:Middlewares/Third_Party/FatFs/src/ff.c **** 
 151:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 855	/* Cyrillic */
 152:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 153:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F, \
 154:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 155:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 156:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 157:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 158:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 159:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 160:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 161:Middlewares/Third_Party/FatFs/src/ff.c **** 
 162:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 857	/* Turkish */
 163:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 164:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F, \
 165:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 166:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 167:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 168:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 169:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 170:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 171:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 172:Middlewares/Third_Party/FatFs/src/ff.c **** 
 173:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 860	/* Portuguese */
 174:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 175:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F, \
 176:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 177:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 178:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 179:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 180:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 181:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 182:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 183:Middlewares/Third_Party/FatFs/src/ff.c **** 
 184:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 861	/* Icelandic */
 185:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 186:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F, \
 187:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 188:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 189:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 190:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 191:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 192:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 193:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 194:Middlewares/Third_Party/FatFs/src/ff.c **** 
 195:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 862	/* Hebrew */
 196:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 197:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 198:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 199:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 200:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 201:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 202:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 203:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 204:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
ARM GAS  /tmp/ccBYTIZg.s 			page 5


 205:Middlewares/Third_Party/FatFs/src/ff.c **** 
 206:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 863	/* Canadian-French */
 207:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 208:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F, \
 209:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 210:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 211:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 212:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 213:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 214:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 215:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 216:Middlewares/Third_Party/FatFs/src/ff.c **** 
 217:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 864	/* Arabic */
 218:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 219:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 220:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 221:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 222:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 223:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 224:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 225:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 226:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 227:Middlewares/Third_Party/FatFs/src/ff.c **** 
 228:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 865	/* Nordic */
 229:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 230:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F, \
 231:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 232:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 233:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 234:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 235:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 236:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 237:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 238:Middlewares/Third_Party/FatFs/src/ff.c **** 
 239:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 866	/* Russian */
 240:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 241:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 242:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 243:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 244:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 245:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 246:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 247:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 248:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 249:Middlewares/Third_Party/FatFs/src/ff.c **** 
 250:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 869	/* Greek 2 */
 251:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 252:Middlewares/Third_Party/FatFs/src/ff.c **** #define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 253:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 254:Middlewares/Third_Party/FatFs/src/ff.c **** 				0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 255:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 256:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 257:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 258:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 259:Middlewares/Third_Party/FatFs/src/ff.c **** 				0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 260:Middlewares/Third_Party/FatFs/src/ff.c **** 
 261:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
ARM GAS  /tmp/ccBYTIZg.s 			page 6


 262:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
 263:Middlewares/Third_Party/FatFs/src/ff.c **** #error Cannot enable LFN without valid code page.
 264:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 265:Middlewares/Third_Party/FatFs/src/ff.c **** #define _DF1S	0
 266:Middlewares/Third_Party/FatFs/src/ff.c **** 
 267:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 268:Middlewares/Third_Party/FatFs/src/ff.c **** #error Unknown code page
 269:Middlewares/Third_Party/FatFs/src/ff.c **** 
 270:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 271:Middlewares/Third_Party/FatFs/src/ff.c **** 
 272:Middlewares/Third_Party/FatFs/src/ff.c **** 
 273:Middlewares/Third_Party/FatFs/src/ff.c **** /* Character code support macros */
 274:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 275:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 276:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 277:Middlewares/Third_Party/FatFs/src/ff.c **** 
 278:Middlewares/Third_Party/FatFs/src/ff.c **** #if _DF1S != 0	/* Code page is DBCS */
 279:Middlewares/Third_Party/FatFs/src/ff.c **** 
 280:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 281:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 282:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* One 1st byte area */
 283:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 284:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 285:Middlewares/Third_Party/FatFs/src/ff.c **** 
 286:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 287:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 288:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Two 2nd byte areas */
 289:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 290:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 291:Middlewares/Third_Party/FatFs/src/ff.c **** 
 292:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Code page is SBCS */
 293:Middlewares/Third_Party/FatFs/src/ff.c **** 
 294:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS1(c)	0
 295:Middlewares/Third_Party/FatFs/src/ff.c **** #define IsDBCS2(c)	0
 296:Middlewares/Third_Party/FatFs/src/ff.c **** 
 297:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _DF1S */
 298:Middlewares/Third_Party/FatFs/src/ff.c **** 
 299:Middlewares/Third_Party/FatFs/src/ff.c **** 
 300:Middlewares/Third_Party/FatFs/src/ff.c **** /* Additional file attribute bits for internal use */
 301:Middlewares/Third_Party/FatFs/src/ff.c **** #define	AM_VOL		0x08	/* Volume label */
 302:Middlewares/Third_Party/FatFs/src/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
 303:Middlewares/Third_Party/FatFs/src/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
 304:Middlewares/Third_Party/FatFs/src/ff.c **** 
 305:Middlewares/Third_Party/FatFs/src/ff.c **** 
 306:Middlewares/Third_Party/FatFs/src/ff.c **** /* Additional file access control and file status flags for internal use */
 307:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
 308:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
 309:Middlewares/Third_Party/FatFs/src/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
 310:Middlewares/Third_Party/FatFs/src/ff.c **** 
 311:Middlewares/Third_Party/FatFs/src/ff.c **** 
 312:Middlewares/Third_Party/FatFs/src/ff.c **** /* Name status flags in fn[] */
 313:Middlewares/Third_Party/FatFs/src/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
 314:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 315:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 316:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_LAST		0x04	/* Last segment */
 317:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 318:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
ARM GAS  /tmp/ccBYTIZg.s 			page 7


 319:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 320:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
 321:Middlewares/Third_Party/FatFs/src/ff.c **** #define NS_NONAME	0x80	/* Not followed */
 322:Middlewares/Third_Party/FatFs/src/ff.c **** 
 323:Middlewares/Third_Party/FatFs/src/ff.c **** 
 324:Middlewares/Third_Party/FatFs/src/ff.c **** /* Limits and boundaries */
 325:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
 326:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
 327:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but correct for real DOS/Windo
 328:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but correct for real DOS/Wind
 329:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
 330:Middlewares/Third_Party/FatFs/src/ff.c **** #define	MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
 331:Middlewares/Third_Party/FatFs/src/ff.c **** 
 332:Middlewares/Third_Party/FatFs/src/ff.c **** 
 333:Middlewares/Third_Party/FatFs/src/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
 334:Middlewares/Third_Party/FatFs/src/ff.c **** / because the C structure is not binary compatible between different platforms */
 335:Middlewares/Third_Party/FatFs/src/ff.c **** 
 336:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
 337:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
 338:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
 339:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
 340:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
 341:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
 342:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT12/16 [entry] (WORD) */
 343:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
 344:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 345:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 346:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerTrk		24		/* Track size for int13h [sector] (WORD) */
 347:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 348:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 349:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 350:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 351:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_NTres			37		/* Error flag (BYTE) */
 352:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 353:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 354:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 355:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_FilSysType		54		/* File system type string (8-byte) */
 356:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 357:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 359:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 360:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 361:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSVer32			42		/* FAT32: File system version (WORD) */
 362:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 363:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 364:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 365:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 366:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 367:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 368:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 369:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 370:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_FilSysType32		82		/* FAT32: File system type string (8-byte) */
 371:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 372:Middlewares/Third_Party/FatFs/src/ff.c **** 
 373:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 374:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 375:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
ARM GAS  /tmp/ccBYTIZg.s 			page 8


 376:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 377:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 378:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 379:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 380:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 381:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 382:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_FSVerEx			104		/* exFAT: File system version (WORD) */
 383:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (BYTE) */
 384:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_ActFatEx		107		/* exFAT: Active FAT flags (BYTE) */
 385:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 386:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 387:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 388:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 389:Middlewares/Third_Party/FatFs/src/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 390:Middlewares/Third_Party/FatFs/src/ff.c **** #define	BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 391:Middlewares/Third_Party/FatFs/src/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 392:Middlewares/Third_Party/FatFs/src/ff.c **** 
 393:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_Name			0		/* Short file name (11-byte) */
 394:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_Attr			11		/* Attribute (BYTE) */
 395:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_NTres			12		/* Lower case flag (BYTE) */
 396:Middlewares/Third_Party/FatFs/src/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 397:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_CrtTime			14		/* Created time (DWORD) */
 398:Middlewares/Third_Party/FatFs/src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 399:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 400:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_ModTime			22		/* Modified time (DWORD) */
 401:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 402:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DIR_FileSize		28		/* File size (DWORD) */
 403:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 404:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 405:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Type			12		/* LFN: Entry type (BYTE) */
 406:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 407:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 408:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 409:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 410:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 411:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 412:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 413:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 414:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 415:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 416:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 417:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 418:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 419:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 420:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 421:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 422:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 423:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_GenFlags		33		/* exFAT: General secondary flags (WORD) */
 424:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 425:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 426:Middlewares/Third_Party/FatFs/src/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 427:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 428:Middlewares/Third_Party/FatFs/src/ff.c **** #define	XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 429:Middlewares/Third_Party/FatFs/src/ff.c **** 
 430:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SZDIRE				32		/* Size of a directory entry */
 431:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 432:Middlewares/Third_Party/FatFs/src/ff.c **** #define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
ARM GAS  /tmp/ccBYTIZg.s 			page 9


 433:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 434:Middlewares/Third_Party/FatFs/src/ff.c **** 
 435:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 436:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 437:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 438:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 439:Middlewares/Third_Party/FatFs/src/ff.c **** 
 440:Middlewares/Third_Party/FatFs/src/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 441:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SZ_PTE				16		/* MBR: Size of a partition table entry */
 442:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 443:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 444:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 445:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 446:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 447:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 448:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 449:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 450:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 451:Middlewares/Third_Party/FatFs/src/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 452:Middlewares/Third_Party/FatFs/src/ff.c **** 
 453:Middlewares/Third_Party/FatFs/src/ff.c **** 
 454:Middlewares/Third_Party/FatFs/src/ff.c **** /* Post process after fatal error on file operation */
 455:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 456:Middlewares/Third_Party/FatFs/src/ff.c **** 
 457:Middlewares/Third_Party/FatFs/src/ff.c **** 
 458:Middlewares/Third_Party/FatFs/src/ff.c **** /* Reentrancy related */
 459:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 460:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
 461:Middlewares/Third_Party/FatFs/src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 462:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 463:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 464:Middlewares/Third_Party/FatFs/src/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 465:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 466:Middlewares/Third_Party/FatFs/src/ff.c **** #define	ENTER_FF(fs)
 467:Middlewares/Third_Party/FatFs/src/ff.c **** #define LEAVE_FF(fs, res)	return res
 468:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 469:Middlewares/Third_Party/FatFs/src/ff.c **** 
 470:Middlewares/Third_Party/FatFs/src/ff.c **** 
 471:Middlewares/Third_Party/FatFs/src/ff.c **** /* Definitions of volume - partition conversion */
 472:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MULTI_PARTITION
 473:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 474:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 475:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 476:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
 477:Middlewares/Third_Party/FatFs/src/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 479:Middlewares/Third_Party/FatFs/src/ff.c **** 
 480:Middlewares/Third_Party/FatFs/src/ff.c **** 
 481:Middlewares/Third_Party/FatFs/src/ff.c **** /* Definitions of sector size */
 482:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 483:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong sector size configuration
 484:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 485:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS == _MIN_SS
 486:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
 487:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 488:Middlewares/Third_Party/FatFs/src/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Variable sector size */
 489:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccBYTIZg.s 			page 10


 490:Middlewares/Third_Party/FatFs/src/ff.c **** 
 491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 492:Middlewares/Third_Party/FatFs/src/ff.c **** /* Timestamp */
 493:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_NORTC == 1
 494:Middlewares/Third_Party/FatFs/src/ff.c **** #if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 
 495:Middlewares/Third_Party/FatFs/src/ff.c **** #error Invalid _FS_NORTC settings
 496:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 497:Middlewares/Third_Party/FatFs/src/ff.c **** #define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_
 498:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 499:Middlewares/Third_Party/FatFs/src/ff.c **** #define GET_FATTIME()	get_fattime()
 500:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 501:Middlewares/Third_Party/FatFs/src/ff.c **** 
 502:Middlewares/Third_Party/FatFs/src/ff.c **** 
 503:Middlewares/Third_Party/FatFs/src/ff.c **** /* File lock controls */
 504:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 505:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_READONLY
 506:Middlewares/Third_Party/FatFs/src/ff.c **** #error _FS_LOCK must be 0 at read-only configuration
 507:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 508:Middlewares/Third_Party/FatFs/src/ff.c **** typedef struct {
 509:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 510:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 511:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 512:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 513:Middlewares/Third_Party/FatFs/src/ff.c **** } FILESEM;
 514:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 515:Middlewares/Third_Party/FatFs/src/ff.c **** 
 516:Middlewares/Third_Party/FatFs/src/ff.c **** 
 517:Middlewares/Third_Party/FatFs/src/ff.c **** 
 518:Middlewares/Third_Party/FatFs/src/ff.c **** 
 519:Middlewares/Third_Party/FatFs/src/ff.c **** 
 520:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
 521:Middlewares/Third_Party/FatFs/src/ff.c **** 
 522:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Work Area
 523:Middlewares/Third_Party/FatFs/src/ff.c **** 
 524:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
 525:Middlewares/Third_Party/FatFs/src/ff.c **** 
 526:Middlewares/Third_Party/FatFs/src/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 527:Middlewares/Third_Party/FatFs/src/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 528:Middlewares/Third_Party/FatFs/src/ff.c **** /  not compliance with C standard. */
 529:Middlewares/Third_Party/FatFs/src/ff.c **** 
 530:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES < 1 || _VOLUMES > 10
 531:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _VOLUMES setting
 532:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 533:Middlewares/Third_Party/FatFs/src/ff.c **** static FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 534:Middlewares/Third_Party/FatFs/src/ff.c **** static WORD Fsid;				/* File system mount ID */
 535:Middlewares/Third_Party/FatFs/src/ff.c **** 
 536:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
 537:Middlewares/Third_Party/FatFs/src/ff.c **** static BYTE CurrVol;			/* Current drive */
 538:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 539:Middlewares/Third_Party/FatFs/src/ff.c **** 
 540:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 541:Middlewares/Third_Party/FatFs/src/ff.c **** static FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
 542:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 543:Middlewares/Third_Party/FatFs/src/ff.c **** 
 544:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 0		/* Non-LFN configuration */
 545:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF
 546:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)
ARM GAS  /tmp/ccBYTIZg.s 			page 11


 547:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 548:Middlewares/Third_Party/FatFs/src/ff.c **** 
 549:Middlewares/Third_Party/FatFs/src/ff.c **** #else					/* LFN configuration */
 550:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_LFN < 12 || _MAX_LFN > 255
 551:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _MAX_LFN value
 552:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 553:Middlewares/Third_Party/FatFs/src/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)
 554:Middlewares/Third_Party/FatFs/src/ff.c **** 
 555:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1		/* LFN enabled with static working buffer */
 556:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 557:Middlewares/Third_Party/FatFs/src/ff.c **** static BYTE	DirBuf[MAXDIRB(_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 558:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 559:Middlewares/Third_Party/FatFs/src/ff.c **** static WCHAR LfnBuf[_MAX_LFN + 1];	/* LFN enabled with static working buffer */
 560:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF
 561:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)
 562:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 563:Middlewares/Third_Party/FatFs/src/ff.c **** 
 564:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 565:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 566:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1]; BYTE dbuf[MAXDIRB(_MAX_LFN)];
 567:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 568:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 569:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 570:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR lbuf[_MAX_LFN+1];
 571:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 572:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()
 573:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 574:Middlewares/Third_Party/FatFs/src/ff.c **** 
 575:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 576:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 577:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 578:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2 + MAXDIRB(_MAX_LFN)); if (!lfn) LEAVE_FF
 579:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 580:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 581:Middlewares/Third_Party/FatFs/src/ff.c **** #define	DEF_NAMBUF		WCHAR *lfn;
 582:Middlewares/Third_Party/FatFs/src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH_C
 583:Middlewares/Third_Party/FatFs/src/ff.c **** #define	FREE_NAMBUF()	ff_memfree(lfn)
 584:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 585:Middlewares/Third_Party/FatFs/src/ff.c **** 
 586:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 587:Middlewares/Third_Party/FatFs/src/ff.c **** #error Wrong _USE_LFN setting
 588:Middlewares/Third_Party/FatFs/src/ff.c **** 
 589:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 590:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* else _USE_LFN == 0 */
 591:Middlewares/Third_Party/FatFs/src/ff.c **** 
 592:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
 593:Middlewares/Third_Party/FatFs/src/ff.c **** static const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for SBCS extended characters */
 594:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 595:Middlewares/Third_Party/FatFs/src/ff.c **** 
 596:Middlewares/Third_Party/FatFs/src/ff.c **** 
 597:Middlewares/Third_Party/FatFs/src/ff.c **** 
 598:Middlewares/Third_Party/FatFs/src/ff.c **** 
 599:Middlewares/Third_Party/FatFs/src/ff.c **** 
 600:Middlewares/Third_Party/FatFs/src/ff.c **** 
 601:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------------------------
 602:Middlewares/Third_Party/FatFs/src/ff.c **** 
 603:Middlewares/Third_Party/FatFs/src/ff.c ****    Module Private Functions
ARM GAS  /tmp/ccBYTIZg.s 			page 12


 604:Middlewares/Third_Party/FatFs/src/ff.c **** 
 605:Middlewares/Third_Party/FatFs/src/ff.c **** ---------------------------------------------------------------------------*/
 606:Middlewares/Third_Party/FatFs/src/ff.c **** 
 607:Middlewares/Third_Party/FatFs/src/ff.c **** 
 608:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 609:Middlewares/Third_Party/FatFs/src/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 610:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 611:Middlewares/Third_Party/FatFs/src/ff.c **** 
 612:Middlewares/Third_Party/FatFs/src/ff.c **** static
 613:Middlewares/Third_Party/FatFs/src/ff.c **** WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 614:Middlewares/Third_Party/FatFs/src/ff.c **** {
  26              		.loc 1 614 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
 615:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD rv;
 616:Middlewares/Third_Party/FatFs/src/ff.c **** 
 617:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[1];
  32              		.loc 1 617 0
  33 0000 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
  34              	.LVL1:
 618:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
  35              		.loc 1 618 0
  36 0002 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  37              	.LVL2:
 619:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 620:Middlewares/Third_Party/FatFs/src/ff.c **** }
  38              		.loc 1 620 0
  39 0004 40EA0220 		orr	r0, r0, r2, lsl #8
  40              	.LVL3:
  41 0008 7047     		bx	lr
  42              		.cfi_endproc
  43              	.LFE141:
  45              		.section	.text.ld_dword,"ax",%progbits
  46              		.align	1
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu fpv5-d16
  52              	ld_dword:
  53              	.LFB142:
 621:Middlewares/Third_Party/FatFs/src/ff.c **** 
 622:Middlewares/Third_Party/FatFs/src/ff.c **** static
 623:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 624:Middlewares/Third_Party/FatFs/src/ff.c **** {
  54              		.loc 1 624 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
  59              	.LVL4:
 625:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD rv;
 626:Middlewares/Third_Party/FatFs/src/ff.c **** 
 627:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[3];
  60              		.loc 1 627 0
ARM GAS  /tmp/ccBYTIZg.s 			page 13


  61 0000 C278     		ldrb	r2, [r0, #3]	@ zero_extendqisi2
  62              	.LVL5:
 628:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[2];
  63              		.loc 1 628 0
  64 0002 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
  65 0004 43EA0222 		orr	r2, r3, r2, lsl #8
  66              	.LVL6:
 629:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[1];
  67              		.loc 1 629 0
  68 0008 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
  69 000a 43EA0223 		orr	r3, r3, r2, lsl #8
  70              	.LVL7:
 630:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
  71              		.loc 1 630 0
  72 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
  73              	.LVL8:
 631:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 632:Middlewares/Third_Party/FatFs/src/ff.c **** }
  74              		.loc 1 632 0
  75 0010 40EA0320 		orr	r0, r0, r3, lsl #8
  76              	.LVL9:
  77 0014 7047     		bx	lr
  78              		.cfi_endproc
  79              	.LFE142:
  81              		.section	.text.st_word,"ax",%progbits
  82              		.align	1
  83              		.syntax unified
  84              		.thumb
  85              		.thumb_func
  86              		.fpu fpv5-d16
  88              	st_word:
  89              	.LFB143:
 633:Middlewares/Third_Party/FatFs/src/ff.c **** 
 634:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 635:Middlewares/Third_Party/FatFs/src/ff.c **** static
 636:Middlewares/Third_Party/FatFs/src/ff.c **** QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 637:Middlewares/Third_Party/FatFs/src/ff.c **** {
 638:Middlewares/Third_Party/FatFs/src/ff.c **** 	QWORD rv;
 639:Middlewares/Third_Party/FatFs/src/ff.c **** 
 640:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = ptr[7];
 641:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[6];
 642:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[5];
 643:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[4];
 644:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[3];
 645:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[2];
 646:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[1];
 647:Middlewares/Third_Party/FatFs/src/ff.c **** 	rv = rv << 8 | ptr[0];
 648:Middlewares/Third_Party/FatFs/src/ff.c **** 	return rv;
 649:Middlewares/Third_Party/FatFs/src/ff.c **** }
 650:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 651:Middlewares/Third_Party/FatFs/src/ff.c **** 
 652:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 653:Middlewares/Third_Party/FatFs/src/ff.c **** static
 654:Middlewares/Third_Party/FatFs/src/ff.c **** void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 655:Middlewares/Third_Party/FatFs/src/ff.c **** {
  90              		.loc 1 655 0
  91              		.cfi_startproc
ARM GAS  /tmp/ccBYTIZg.s 			page 14


  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
  95              	.LVL10:
 656:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
  96              		.loc 1 656 0
  97 0000 0170     		strb	r1, [r0]
  98              	.LVL11:
 657:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
  99              		.loc 1 657 0
 100 0002 090A     		lsrs	r1, r1, #8
 101              	.LVL12:
 102 0004 4170     		strb	r1, [r0, #1]
 103 0006 7047     		bx	lr
 104              		.cfi_endproc
 105              	.LFE143:
 107              		.section	.text.st_dword,"ax",%progbits
 108              		.align	1
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu fpv5-d16
 114              	st_dword:
 115              	.LFB144:
 658:Middlewares/Third_Party/FatFs/src/ff.c **** }
 659:Middlewares/Third_Party/FatFs/src/ff.c **** 
 660:Middlewares/Third_Party/FatFs/src/ff.c **** static
 661:Middlewares/Third_Party/FatFs/src/ff.c **** void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 662:Middlewares/Third_Party/FatFs/src/ff.c **** {
 116              		.loc 1 662 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121              	.LVL13:
 663:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 122              		.loc 1 663 0
 123 0000 0170     		strb	r1, [r0]
 124              	.LVL14:
 664:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 125              		.loc 1 664 0
 126 0002 C1F30723 		ubfx	r3, r1, #8, #8
 127 0006 4370     		strb	r3, [r0, #1]
 128              	.LVL15:
 665:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 129              		.loc 1 665 0
 130 0008 C1F30743 		ubfx	r3, r1, #16, #8
 131 000c 8370     		strb	r3, [r0, #2]
 132              	.LVL16:
 666:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 133              		.loc 1 666 0
 134 000e 090E     		lsrs	r1, r1, #24
 135              	.LVL17:
 136 0010 C170     		strb	r1, [r0, #3]
 137 0012 7047     		bx	lr
 138              		.cfi_endproc
 139              	.LFE144:
ARM GAS  /tmp/ccBYTIZg.s 			page 15


 141              		.section	.text.mem_cpy,"ax",%progbits
 142              		.align	1
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv5-d16
 148              	mem_cpy:
 149              	.LFB145:
 667:Middlewares/Third_Party/FatFs/src/ff.c **** }
 668:Middlewares/Third_Party/FatFs/src/ff.c **** 
 669:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 670:Middlewares/Third_Party/FatFs/src/ff.c **** static
 671:Middlewares/Third_Party/FatFs/src/ff.c **** void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 672:Middlewares/Third_Party/FatFs/src/ff.c **** {
 673:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 674:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 675:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 676:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 677:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 678:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 679:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 680:Middlewares/Third_Party/FatFs/src/ff.c **** 	*ptr++ = (BYTE)val;
 681:Middlewares/Third_Party/FatFs/src/ff.c **** }
 682:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 683:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
 684:Middlewares/Third_Party/FatFs/src/ff.c **** 
 685:Middlewares/Third_Party/FatFs/src/ff.c **** 
 686:Middlewares/Third_Party/FatFs/src/ff.c **** 
 687:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 688:Middlewares/Third_Party/FatFs/src/ff.c **** /* String functions                                                      */
 689:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 690:Middlewares/Third_Party/FatFs/src/ff.c **** 
 691:Middlewares/Third_Party/FatFs/src/ff.c **** /* Copy memory to memory */
 692:Middlewares/Third_Party/FatFs/src/ff.c **** static
 693:Middlewares/Third_Party/FatFs/src/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 150              		.loc 1 693 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155              	.LVL18:
 694:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 695:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 696:Middlewares/Third_Party/FatFs/src/ff.c **** 
 697:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (cnt) {
 156              		.loc 1 697 0
 157 0000 1346     		mov	r3, r2
 158 0002 2AB1     		cbz	r2, .L5
 159              	.LVL19:
 160              	.L7:
 698:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 699:Middlewares/Third_Party/FatFs/src/ff.c **** 			*d++ = *s++;
 161              		.loc 1 699 0 discriminator 1
 162 0004 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 163 0006 0270     		strb	r2, [r0]
 164              	.LVL20:
 165 0008 0130     		adds	r0, r0, #1
ARM GAS  /tmp/ccBYTIZg.s 			page 16


 166              	.LVL21:
 167 000a 0131     		adds	r1, r1, #1
 168              	.LVL22:
 700:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (--cnt);
 169              		.loc 1 700 0 discriminator 1
 170 000c 013B     		subs	r3, r3, #1
 171              	.LVL23:
 172 000e F9D1     		bne	.L7
 173              	.L5:
 174 0010 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE145:
 178              		.section	.text.mem_set,"ax",%progbits
 179              		.align	1
 180              		.syntax unified
 181              		.thumb
 182              		.thumb_func
 183              		.fpu fpv5-d16
 185              	mem_set:
 186              	.LFB146:
 701:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 702:Middlewares/Third_Party/FatFs/src/ff.c **** }
 703:Middlewares/Third_Party/FatFs/src/ff.c **** 
 704:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill memory block */
 705:Middlewares/Third_Party/FatFs/src/ff.c **** static
 706:Middlewares/Third_Party/FatFs/src/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 187              		.loc 1 706 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
 192              	.LVL24:
 193              	.L9:
 707:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 708:Middlewares/Third_Party/FatFs/src/ff.c **** 
 709:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
 710:Middlewares/Third_Party/FatFs/src/ff.c **** 		*d++ = (BYTE)val;
 194              		.loc 1 710 0 discriminator 1
 195 0000 0170     		strb	r1, [r0]
 196              	.LVL25:
 197 0002 0130     		adds	r0, r0, #1
 198              	.LVL26:
 711:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt);
 199              		.loc 1 711 0 discriminator 1
 200 0004 013A     		subs	r2, r2, #1
 201              	.LVL27:
 202 0006 FBD1     		bne	.L9
 712:Middlewares/Third_Party/FatFs/src/ff.c **** }
 203              		.loc 1 712 0
 204 0008 7047     		bx	lr
 205              		.cfi_endproc
 206              	.LFE146:
 208              		.section	.text.mem_cmp,"ax",%progbits
 209              		.align	1
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
ARM GAS  /tmp/ccBYTIZg.s 			page 17


 213              		.fpu fpv5-d16
 215              	mem_cmp:
 216              	.LFB147:
 713:Middlewares/Third_Party/FatFs/src/ff.c **** 
 714:Middlewares/Third_Party/FatFs/src/ff.c **** /* Compare memory block */
 715:Middlewares/Third_Party/FatFs/src/ff.c **** static
 716:Middlewares/Third_Party/FatFs/src/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 217              		.loc 1 716 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 222              	.LVL28:
 223 0000 30B4     		push	{r4, r5}
 224              	.LCFI0:
 225              		.cfi_def_cfa_offset 8
 226              		.cfi_offset 4, -8
 227              		.cfi_offset 5, -4
 228              	.LVL29:
 229              	.L12:
 717:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 718:Middlewares/Third_Party/FatFs/src/ff.c **** 	int r = 0;
 719:Middlewares/Third_Party/FatFs/src/ff.c **** 
 720:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
 721:Middlewares/Third_Party/FatFs/src/ff.c **** 		r = *d++ - *s++;
 230              		.loc 1 721 0 discriminator 2
 231 0002 451C     		adds	r5, r0, #1
 232              	.LVL30:
 233 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 234              	.LVL31:
 235 0006 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 236 0008 1B1A     		subs	r3, r3, r0
 237              	.LVL32:
 722:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt && r == 0);
 238              		.loc 1 722 0 discriminator 2
 239 000a 013A     		subs	r2, r2, #1
 240              	.LVL33:
 241 000c 04D0     		beq	.L10
 242 000e 4C1C     		adds	r4, r1, #1
 243              	.LVL34:
 721:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--cnt && r == 0);
 244              		.loc 1 721 0 discriminator 1
 245 0010 2846     		mov	r0, r5
 246 0012 2146     		mov	r1, r4
 247              		.loc 1 722 0 discriminator 1
 248 0014 002B     		cmp	r3, #0
 249 0016 F4D0     		beq	.L12
 250              	.LVL35:
 251              	.L10:
 723:Middlewares/Third_Party/FatFs/src/ff.c **** 
 724:Middlewares/Third_Party/FatFs/src/ff.c **** 	return r;
 725:Middlewares/Third_Party/FatFs/src/ff.c **** }
 252              		.loc 1 725 0
 253 0018 1846     		mov	r0, r3
 254 001a 30BC     		pop	{r4, r5}
 255              	.LCFI1:
 256              		.cfi_restore 5
ARM GAS  /tmp/ccBYTIZg.s 			page 18


 257              		.cfi_restore 4
 258              		.cfi_def_cfa_offset 0
 259              	.LVL36:
 260 001c 7047     		bx	lr
 261              		.cfi_endproc
 262              	.LFE147:
 264              		.section	.text.chk_chr,"ax",%progbits
 265              		.align	1
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu fpv5-d16
 271              	chk_chr:
 272              	.LFB148:
 726:Middlewares/Third_Party/FatFs/src/ff.c **** 
 727:Middlewares/Third_Party/FatFs/src/ff.c **** /* Check if chr is contained in the string */
 728:Middlewares/Third_Party/FatFs/src/ff.c **** static
 729:Middlewares/Third_Party/FatFs/src/ff.c **** int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 273              		.loc 1 729 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278              	.LVL37:
 730:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (*str && *str != chr) str++;
 279              		.loc 1 730 0
 280 0000 00E0     		b	.L15
 281              	.L17:
 282              		.loc 1 730 0 is_stmt 0 discriminator 3
 283 0002 0130     		adds	r0, r0, #1
 284              	.LVL38:
 285              	.L15:
 286              		.loc 1 730 0 discriminator 1
 287 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 288 0006 0BB1     		cbz	r3, .L16
 289              		.loc 1 730 0 discriminator 2
 290 0008 8B42     		cmp	r3, r1
 291 000a FAD1     		bne	.L17
 292              	.L16:
 731:Middlewares/Third_Party/FatFs/src/ff.c **** 	return *str;
 732:Middlewares/Third_Party/FatFs/src/ff.c **** }
 293              		.loc 1 732 0 is_stmt 1
 294 000c 1846     		mov	r0, r3
 295              	.LVL39:
 296 000e 7047     		bx	lr
 297              		.cfi_endproc
 298              	.LFE148:
 300              		.section	.text.chk_lock,"ax",%progbits
 301              		.align	1
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv5-d16
 307              	chk_lock:
 308              	.LFB149:
 733:Middlewares/Third_Party/FatFs/src/ff.c **** 
 734:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 19


 735:Middlewares/Third_Party/FatFs/src/ff.c **** 
 736:Middlewares/Third_Party/FatFs/src/ff.c **** 
 737:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 738:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 739:Middlewares/Third_Party/FatFs/src/ff.c **** /* Request/Release grant to access the volume                            */
 740:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 741:Middlewares/Third_Party/FatFs/src/ff.c **** static
 742:Middlewares/Third_Party/FatFs/src/ff.c **** int lock_fs (
 743:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs		/* File system object */
 744:Middlewares/Third_Party/FatFs/src/ff.c **** )
 745:Middlewares/Third_Party/FatFs/src/ff.c **** {
 746:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 747:Middlewares/Third_Party/FatFs/src/ff.c **** }
 748:Middlewares/Third_Party/FatFs/src/ff.c **** 
 749:Middlewares/Third_Party/FatFs/src/ff.c **** 
 750:Middlewares/Third_Party/FatFs/src/ff.c **** static
 751:Middlewares/Third_Party/FatFs/src/ff.c **** void unlock_fs (
 752:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* File system object */
 753:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res		/* Result code to be returned */
 754:Middlewares/Third_Party/FatFs/src/ff.c **** )
 755:Middlewares/Third_Party/FatFs/src/ff.c **** {
 756:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 757:Middlewares/Third_Party/FatFs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 758:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 759:Middlewares/Third_Party/FatFs/src/ff.c **** }
 760:Middlewares/Third_Party/FatFs/src/ff.c **** 
 761:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 762:Middlewares/Third_Party/FatFs/src/ff.c **** 
 763:Middlewares/Third_Party/FatFs/src/ff.c **** 
 764:Middlewares/Third_Party/FatFs/src/ff.c **** 
 765:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 766:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 767:Middlewares/Third_Party/FatFs/src/ff.c **** /* File lock control functions                                           */
 768:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 769:Middlewares/Third_Party/FatFs/src/ff.c **** 
 770:Middlewares/Third_Party/FatFs/src/ff.c **** static
 771:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 772:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 773:Middlewares/Third_Party/FatFs/src/ff.c **** 	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
 774:Middlewares/Third_Party/FatFs/src/ff.c **** )
 775:Middlewares/Third_Party/FatFs/src/ff.c **** {
 309              		.loc 1 775 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 314              	.LVL40:
 315 0000 30B4     		push	{r4, r5}
 316              	.LCFI2:
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 4, -8
 319              		.cfi_offset 5, -4
 320              	.LVL41:
 776:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, be;
 777:Middlewares/Third_Party/FatFs/src/ff.c **** 
 778:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Search file semaphore table */
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = be = 0; i < _FS_LOCK; i++) {
ARM GAS  /tmp/ccBYTIZg.s 			page 20


 321              		.loc 1 779 0
 322 0002 0025     		movs	r5, #0
 323 0004 2B46     		mov	r3, r5
 324 0006 01E0     		b	.L19
 325              	.LVL42:
 326              	.L25:
 780:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 783:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 784:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* Blank entry */
 785:Middlewares/Third_Party/FatFs/src/ff.c **** 			be = 1;
 327              		.loc 1 785 0
 328 0008 0125     		movs	r5, #1
 329              	.LVL43:
 330              	.L20:
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 331              		.loc 1 779 0 discriminator 2
 332 000a 0133     		adds	r3, r3, #1
 333              	.LVL44:
 334              	.L19:
 779:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 335              		.loc 1 779 0 is_stmt 0 discriminator 1
 336 000c 012B     		cmp	r3, #1
 337 000e 15D8     		bhi	.L21
 780:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 338              		.loc 1 780 0 is_stmt 1
 339 0010 1A01     		lsls	r2, r3, #4
 340 0012 174C     		ldr	r4, .L34
 341 0014 A258     		ldr	r2, [r4, r2]
 342 0016 002A     		cmp	r2, #0
 343 0018 F6D0     		beq	.L25
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 344              		.loc 1 781 0
 345 001a 0468     		ldr	r4, [r0]
 346 001c A242     		cmp	r2, r4
 347 001e F4D1     		bne	.L20
 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 348              		.loc 1 782 0 discriminator 1
 349 0020 134A     		ldr	r2, .L34
 350 0022 02EB0312 		add	r2, r2, r3, lsl #4
 351 0026 5468     		ldr	r4, [r2, #4]
 352 0028 8268     		ldr	r2, [r0, #8]
 781:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 353              		.loc 1 781 0 discriminator 1
 354 002a 9442     		cmp	r4, r2
 355 002c EDD1     		bne	.L20
 783:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* Blank entry */
 356              		.loc 1 783 0
 357 002e 104A     		ldr	r2, .L34
 358 0030 02EB0312 		add	r2, r2, r3, lsl #4
 359 0034 9468     		ldr	r4, [r2, #8]
 360 0036 4269     		ldr	r2, [r0, #20]
 782:Middlewares/Third_Party/FatFs/src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 361              		.loc 1 782 0
 362 0038 9442     		cmp	r4, r2
 363 003a E6D1     		bne	.L20
ARM GAS  /tmp/ccBYTIZg.s 			page 21


 364              	.L21:
 786:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 787:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 788:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == _FS_LOCK) {	/* The object is not opened */
 365              		.loc 1 788 0
 366 003c 022B     		cmp	r3, #2
 367 003e 03D0     		beq	.L30
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 790:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 791:Middlewares/Third_Party/FatFs/src/ff.c **** 
 792:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* The object has been opened. Reject any open against writing file and all write mode open */
 793:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 368              		.loc 1 793 0
 369 0040 59B1     		cbz	r1, .L31
 370 0042 1020     		movs	r0, #16
 371              	.LVL45:
 372              	.L24:
 794:Middlewares/Third_Party/FatFs/src/ff.c **** }
 373              		.loc 1 794 0
 374 0044 30BC     		pop	{r4, r5}
 375              	.LCFI3:
 376              		.cfi_remember_state
 377              		.cfi_restore 5
 378              		.cfi_restore 4
 379              		.cfi_def_cfa_offset 0
 380 0046 7047     		bx	lr
 381              	.LVL46:
 382              	.L30:
 383              	.LCFI4:
 384              		.cfi_restore_state
 789:Middlewares/Third_Party/FatFs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new objec
 385              		.loc 1 789 0
 386 0048 0229     		cmp	r1, #2
 387 004a 08BF     		it	eq
 388 004c 45F00105 		orreq	r5, r5, #1
 389              	.LVL47:
 390 0050 0DB9     		cbnz	r5, .L32
 391 0052 1220     		movs	r0, #18
 392              	.LVL48:
 393 0054 F6E7     		b	.L24
 394              	.LVL49:
 395              	.L32:
 396 0056 0020     		movs	r0, #0
 397              	.LVL50:
 398 0058 F4E7     		b	.L24
 399              	.LVL51:
 400              	.L31:
 793:Middlewares/Third_Party/FatFs/src/ff.c **** }
 401              		.loc 1 793 0 discriminator 2
 402 005a 054A     		ldr	r2, .L34
 403 005c 02EB0313 		add	r3, r2, r3, lsl #4
 404              	.LVL52:
 405 0060 9B89     		ldrh	r3, [r3, #12]
 406 0062 B3F5807F 		cmp	r3, #256
 407 0066 01D0     		beq	.L33
 793:Middlewares/Third_Party/FatFs/src/ff.c **** }
 408              		.loc 1 793 0 is_stmt 0
ARM GAS  /tmp/ccBYTIZg.s 			page 22


 409 0068 0020     		movs	r0, #0
 410              	.LVL53:
 411 006a EBE7     		b	.L24
 412              	.LVL54:
 413              	.L33:
 414 006c 1020     		movs	r0, #16
 415              	.LVL55:
 416 006e E9E7     		b	.L24
 417              	.L35:
 418              		.align	2
 419              	.L34:
 420 0070 00000000 		.word	.LANCHOR0
 421              		.cfi_endproc
 422              	.LFE149:
 424              		.section	.text.enq_lock,"ax",%progbits
 425              		.align	1
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
 429              		.fpu fpv5-d16
 431              	enq_lock:
 432              	.LFB150:
 795:Middlewares/Third_Party/FatFs/src/ff.c **** 
 796:Middlewares/Third_Party/FatFs/src/ff.c **** 
 797:Middlewares/Third_Party/FatFs/src/ff.c **** static
 798:Middlewares/Third_Party/FatFs/src/ff.c **** int enq_lock (void)	/* Check if an entry is available for a new object */
 799:Middlewares/Third_Party/FatFs/src/ff.c **** {
 433              		.loc 1 799 0 is_stmt 1
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437              		@ link register save eliminated.
 438              	.LVL56:
 800:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 801:Middlewares/Third_Party/FatFs/src/ff.c **** 
 802:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 439              		.loc 1 802 0
 440 0000 0020     		movs	r0, #0
 441 0002 00E0     		b	.L37
 442              	.LVL57:
 443              	.L39:
 444              		.loc 1 802 0 is_stmt 0 discriminator 4
 445 0004 0130     		adds	r0, r0, #1
 446              	.LVL58:
 447              	.L37:
 448              		.loc 1 802 0 discriminator 1
 449 0006 0128     		cmp	r0, #1
 450 0008 04D8     		bhi	.L38
 451              		.loc 1 802 0 discriminator 3
 452 000a 0301     		lsls	r3, r0, #4
 453 000c 034A     		ldr	r2, .L40
 454 000e D358     		ldr	r3, [r2, r3]
 455 0010 002B     		cmp	r3, #0
 456 0012 F7D1     		bne	.L39
 457              	.L38:
 803:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (i == _FS_LOCK) ? 0 : 1;
 804:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  /tmp/ccBYTIZg.s 			page 23


 458              		.loc 1 804 0 is_stmt 1
 459 0014 0238     		subs	r0, r0, #2
 460              	.LVL59:
 461 0016 18BF     		it	ne
 462 0018 0120     		movne	r0, #1
 463              	.LVL60:
 464 001a 7047     		bx	lr
 465              	.L41:
 466              		.align	2
 467              	.L40:
 468 001c 00000000 		.word	.LANCHOR0
 469              		.cfi_endproc
 470              	.LFE150:
 472              		.section	.text.inc_lock,"ax",%progbits
 473              		.align	1
 474              		.syntax unified
 475              		.thumb
 476              		.thumb_func
 477              		.fpu fpv5-d16
 479              	inc_lock:
 480              	.LFB151:
 805:Middlewares/Third_Party/FatFs/src/ff.c **** 
 806:Middlewares/Third_Party/FatFs/src/ff.c **** 
 807:Middlewares/Third_Party/FatFs/src/ff.c **** static
 808:Middlewares/Third_Party/FatFs/src/ff.c **** UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
 809:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
 810:Middlewares/Third_Party/FatFs/src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 811:Middlewares/Third_Party/FatFs/src/ff.c **** )
 812:Middlewares/Third_Party/FatFs/src/ff.c **** {
 481              		.loc 1 812 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 0
 484              		@ frame_needed = 0, uses_anonymous_args = 0
 485              		@ link register save eliminated.
 486              	.LVL61:
 487 0000 70B4     		push	{r4, r5, r6}
 488              	.LCFI5:
 489              		.cfi_def_cfa_offset 12
 490              		.cfi_offset 4, -12
 491              		.cfi_offset 5, -8
 492              		.cfi_offset 6, -4
 493              	.LVL62:
 813:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 814:Middlewares/Third_Party/FatFs/src/ff.c **** 
 815:Middlewares/Third_Party/FatFs/src/ff.c **** 
 816:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 494              		.loc 1 816 0
 495 0002 0023     		movs	r3, #0
 496 0004 00E0     		b	.L43
 497              	.LVL63:
 498              	.L44:
 499              		.loc 1 816 0 is_stmt 0 discriminator 2
 500 0006 0133     		adds	r3, r3, #1
 501              	.LVL64:
 502              	.L43:
 503              		.loc 1 816 0 discriminator 1
 504 0008 012B     		cmp	r3, #1
ARM GAS  /tmp/ccBYTIZg.s 			page 24


 505 000a 13D8     		bhi	.L45
 817:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 506              		.loc 1 817 0 is_stmt 1
 507 000c 1A01     		lsls	r2, r3, #4
 508 000e 244C     		ldr	r4, .L60
 509 0010 A458     		ldr	r4, [r4, r2]
 510 0012 0268     		ldr	r2, [r0]
 511 0014 9442     		cmp	r4, r2
 512 0016 F6D1     		bne	.L44
 818:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 513              		.loc 1 818 0 discriminator 1
 514 0018 214A     		ldr	r2, .L60
 515 001a 02EB0312 		add	r2, r2, r3, lsl #4
 516 001e 5468     		ldr	r4, [r2, #4]
 517 0020 8268     		ldr	r2, [r0, #8]
 817:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == dp->obj.fs &&
 518              		.loc 1 817 0 discriminator 1
 519 0022 9442     		cmp	r4, r2
 520 0024 EFD1     		bne	.L44
 819:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].ofs == dp->dptr) break;
 521              		.loc 1 819 0
 522 0026 1E4A     		ldr	r2, .L60
 523 0028 02EB0312 		add	r2, r2, r3, lsl #4
 524 002c 9468     		ldr	r4, [r2, #8]
 525 002e 4269     		ldr	r2, [r0, #20]
 818:Middlewares/Third_Party/FatFs/src/ff.c **** 			Files[i].clu == dp->obj.sclust &&
 526              		.loc 1 818 0
 527 0030 9442     		cmp	r4, r2
 528 0032 E8D1     		bne	.L44
 529              	.L45:
 820:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 821:Middlewares/Third_Party/FatFs/src/ff.c **** 
 822:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 530              		.loc 1 822 0
 531 0034 022B     		cmp	r3, #2
 532 0036 29D0     		beq	.L59
 533              	.LVL65:
 534              	.L48:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 825:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 826:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 827:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ofs = dp->dptr;
 828:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = 0;
 829:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 830:Middlewares/Third_Party/FatFs/src/ff.c **** 
 831:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 535              		.loc 1 831 0
 536 0038 21B1     		cbz	r1, .L52
 537              		.loc 1 831 0 is_stmt 0 discriminator 1
 538 003a 194A     		ldr	r2, .L60
 539 003c 02EB0312 		add	r2, r2, r3, lsl #4
 540 0040 9289     		ldrh	r2, [r2, #12]
 541 0042 52BB     		cbnz	r2, .L56
 542              	.L52:
 832:Middlewares/Third_Party/FatFs/src/ff.c **** 
 833:Middlewares/Third_Party/FatFs/src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
ARM GAS  /tmp/ccBYTIZg.s 			page 25


 543              		.loc 1 833 0 is_stmt 1
 544 0044 21BB     		cbnz	r1, .L57
 545              		.loc 1 833 0 is_stmt 0 discriminator 1
 546 0046 164A     		ldr	r2, .L60
 547 0048 02EB0312 		add	r2, r2, r3, lsl #4
 548 004c 9189     		ldrh	r1, [r2, #12]
 549              	.LVL66:
 550 004e 0131     		adds	r1, r1, #1
 551 0050 89B2     		uxth	r1, r1
 552              	.L53:
 553              		.loc 1 833 0 discriminator 4
 554 0052 134A     		ldr	r2, .L60
 555 0054 02EB0312 		add	r2, r2, r3, lsl #4
 556 0058 9181     		strh	r1, [r2, #12]	@ movhi
 834:Middlewares/Third_Party/FatFs/src/ff.c **** 
 835:Middlewares/Third_Party/FatFs/src/ff.c **** 	return i + 1;
 557              		.loc 1 835 0 is_stmt 1 discriminator 4
 558 005a 581C     		adds	r0, r3, #1
 559              	.L42:
 836:Middlewares/Third_Party/FatFs/src/ff.c **** }
 560              		.loc 1 836 0
 561 005c 70BC     		pop	{r4, r5, r6}
 562              	.LCFI6:
 563              		.cfi_remember_state
 564              		.cfi_restore 6
 565              		.cfi_restore 5
 566              		.cfi_restore 4
 567              		.cfi_def_cfa_offset 0
 568 005e 7047     		bx	lr
 569              	.LVL67:
 570              	.L50:
 571              	.LCFI7:
 572              		.cfi_restore_state
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 573              		.loc 1 823 0 discriminator 4
 574 0060 0133     		adds	r3, r3, #1
 575              	.LVL68:
 576              	.L47:
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 577              		.loc 1 823 0 is_stmt 0 discriminator 1
 578 0062 012B     		cmp	r3, #1
 579 0064 04D8     		bhi	.L49
 823:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 580              		.loc 1 823 0 discriminator 3
 581 0066 1A01     		lsls	r2, r3, #4
 582 0068 0D4C     		ldr	r4, .L60
 583 006a A258     		ldr	r2, [r4, r2]
 584 006c 002A     		cmp	r2, #0
 585 006e F7D1     		bne	.L50
 586              	.L49:
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 587              		.loc 1 824 0 is_stmt 1
 588 0070 022B     		cmp	r3, #2
 589 0072 10D0     		beq	.L55
 825:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 590              		.loc 1 825 0
 591 0074 0668     		ldr	r6, [r0]
ARM GAS  /tmp/ccBYTIZg.s 			page 26


 592 0076 0A4D     		ldr	r5, .L60
 593 0078 1C01     		lsls	r4, r3, #4
 594 007a 2A19     		adds	r2, r5, r4
 595 007c 2E51     		str	r6, [r5, r4]
 826:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ofs = dp->dptr;
 596              		.loc 1 826 0
 597 007e 8468     		ldr	r4, [r0, #8]
 598 0080 5460     		str	r4, [r2, #4]
 827:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = 0;
 599              		.loc 1 827 0
 600 0082 4069     		ldr	r0, [r0, #20]
 601              	.LVL69:
 602 0084 9060     		str	r0, [r2, #8]
 828:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 603              		.loc 1 828 0
 604 0086 0020     		movs	r0, #0
 605 0088 9081     		strh	r0, [r2, #12]	@ movhi
 606 008a D5E7     		b	.L48
 607              	.LVL70:
 608              	.L59:
 609 008c 0023     		movs	r3, #0
 610              	.LVL71:
 611 008e E8E7     		b	.L47
 612              	.LVL72:
 613              	.L57:
 833:Middlewares/Third_Party/FatFs/src/ff.c **** 
 614              		.loc 1 833 0
 615 0090 4FF48071 		mov	r1, #256
 616              	.LVL73:
 617 0094 DDE7     		b	.L53
 618              	.LVL74:
 619              	.L55:
 824:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].fs = dp->obj.fs;
 620              		.loc 1 824 0
 621 0096 0020     		movs	r0, #0
 622              	.LVL75:
 623 0098 E0E7     		b	.L42
 624              	.L56:
 831:Middlewares/Third_Party/FatFs/src/ff.c **** 
 625              		.loc 1 831 0
 626 009a 0020     		movs	r0, #0
 627 009c DEE7     		b	.L42
 628              	.L61:
 629 009e 00BF     		.align	2
 630              	.L60:
 631 00a0 00000000 		.word	.LANCHOR0
 632              		.cfi_endproc
 633              	.LFE151:
 635              		.section	.text.dec_lock,"ax",%progbits
 636              		.align	1
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu fpv5-d16
 642              	dec_lock:
 643              	.LFB152:
 837:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 27


 838:Middlewares/Third_Party/FatFs/src/ff.c **** 
 839:Middlewares/Third_Party/FatFs/src/ff.c **** static
 840:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dec_lock (	/* Decrement object open counter */
 841:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i			/* Semaphore index (1..) */
 842:Middlewares/Third_Party/FatFs/src/ff.c **** )
 843:Middlewares/Third_Party/FatFs/src/ff.c **** {
 644              		.loc 1 843 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              		@ link register save eliminated.
 649              	.LVL76:
 844:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD n;
 845:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 846:Middlewares/Third_Party/FatFs/src/ff.c **** 
 847:Middlewares/Third_Party/FatFs/src/ff.c **** 
 848:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 650              		.loc 1 848 0
 651 0000 0138     		subs	r0, r0, #1
 652              	.LVL77:
 653 0002 0128     		cmp	r0, #1
 654 0004 01D9     		bls	.L69
 849:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = Files[i].ctr;
 850:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 851:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 852:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = n;
 853:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 854:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;
 855:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 856:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 655              		.loc 1 856 0
 656 0006 0220     		movs	r0, #2
 657              	.LVL78:
 658 0008 7047     		bx	lr
 659              	.LVL79:
 660              	.L69:
 849:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = Files[i].ctr;
 661              		.loc 1 849 0
 662 000a 0C4B     		ldr	r3, .L71
 663 000c 03EB0013 		add	r3, r3, r0, lsl #4
 664 0010 9B89     		ldrh	r3, [r3, #12]
 665              	.LVL80:
 850:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 666              		.loc 1 850 0
 667 0012 B3F5807F 		cmp	r3, #256
 668 0016 0CD0     		beq	.L70
 669              	.LVL81:
 670              	.L64:
 851:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = n;
 671              		.loc 1 851 0
 672 0018 0BB1     		cbz	r3, .L65
 851:Middlewares/Third_Party/FatFs/src/ff.c **** 		Files[i].ctr = n;
 673              		.loc 1 851 0 is_stmt 0 discriminator 1
 674 001a 013B     		subs	r3, r3, #1
 675              	.LVL82:
 676 001c 9BB2     		uxth	r3, r3
 677              	.LVL83:
ARM GAS  /tmp/ccBYTIZg.s 			page 28


 678              	.L65:
 852:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 679              		.loc 1 852 0 is_stmt 1
 680 001e 074A     		ldr	r2, .L71
 681 0020 02EB0012 		add	r2, r2, r0, lsl #4
 682 0024 9381     		strh	r3, [r2, #12]	@ movhi
 853:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;
 683              		.loc 1 853 0
 684 0026 33B9     		cbnz	r3, .L68
 853:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = FR_OK;
 685              		.loc 1 853 0 is_stmt 0 discriminator 1
 686 0028 0301     		lsls	r3, r0, #4
 687              	.LVL84:
 688 002a 0020     		movs	r0, #0
 689              	.LVL85:
 690 002c 034A     		ldr	r2, .L71
 691              	.LVL86:
 692 002e D050     		str	r0, [r2, r3]
 693 0030 7047     		bx	lr
 694              	.LVL87:
 695              	.L70:
 850:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 696              		.loc 1 850 0 is_stmt 1
 697 0032 0023     		movs	r3, #0
 698              	.LVL88:
 699 0034 F0E7     		b	.L64
 700              	.LVL89:
 701              	.L68:
 854:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 702              		.loc 1 854 0
 703 0036 0020     		movs	r0, #0
 704              	.LVL90:
 857:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 858:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 859:Middlewares/Third_Party/FatFs/src/ff.c **** }
 705              		.loc 1 859 0
 706 0038 7047     		bx	lr
 707              	.L72:
 708 003a 00BF     		.align	2
 709              	.L71:
 710 003c 00000000 		.word	.LANCHOR0
 711              		.cfi_endproc
 712              	.LFE152:
 714              		.section	.text.clear_lock,"ax",%progbits
 715              		.align	1
 716              		.syntax unified
 717              		.thumb
 718              		.thumb_func
 719              		.fpu fpv5-d16
 721              	clear_lock:
 722              	.LFB153:
 860:Middlewares/Third_Party/FatFs/src/ff.c **** 
 861:Middlewares/Third_Party/FatFs/src/ff.c **** 
 862:Middlewares/Third_Party/FatFs/src/ff.c **** static
 863:Middlewares/Third_Party/FatFs/src/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 864:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs
 865:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  /tmp/ccBYTIZg.s 			page 29


 866:Middlewares/Third_Party/FatFs/src/ff.c **** {
 723              		.loc 1 866 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 0
 726              		@ frame_needed = 0, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 728              	.LVL91:
 867:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 868:Middlewares/Third_Party/FatFs/src/ff.c **** 
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < _FS_LOCK; i++) {
 729              		.loc 1 869 0
 730 0000 0023     		movs	r3, #0
 731 0002 03E0     		b	.L78
 732              	.LVL92:
 733              	.L84:
 734              	.LCFI8:
 735              		.cfi_def_cfa_offset 4
 736              		.cfi_offset 4, -4
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 871:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 872:Middlewares/Third_Party/FatFs/src/ff.c **** }
 737              		.loc 1 872 0
 738 0004 5DF8044B 		ldr	r4, [sp], #4
 739              	.LCFI9:
 740              		.cfi_restore 4
 741              		.cfi_def_cfa_offset 0
 742 0008 7047     		bx	lr
 743              	.L80:
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 744              		.loc 1 869 0
 745 000a 0133     		adds	r3, r3, #1
 746              	.LVL93:
 747              	.L78:
 748 000c 012B     		cmp	r3, #1
 749 000e 11D8     		bhi	.L83
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 750              		.loc 1 870 0
 751 0010 1A01     		lsls	r2, r3, #4
 752 0012 0949     		ldr	r1, .L85
 753 0014 8A58     		ldr	r2, [r1, r2]
 754 0016 8242     		cmp	r2, r0
 755 0018 F7D1     		bne	.L80
 866:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
 756              		.loc 1 866 0
 757 001a 10B4     		push	{r4}
 758              	.LCFI10:
 759              		.cfi_def_cfa_offset 4
 760              		.cfi_offset 4, -4
 761              	.L79:
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 762              		.loc 1 870 0 discriminator 1
 763 001c 1A01     		lsls	r2, r3, #4
 764 001e 0024     		movs	r4, #0
 765 0020 8C50     		str	r4, [r1, r2]
 766              	.L75:
 869:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 767              		.loc 1 869 0 discriminator 2
ARM GAS  /tmp/ccBYTIZg.s 			page 30


 768 0022 0133     		adds	r3, r3, #1
 769              	.LVL94:
 770 0024 012B     		cmp	r3, #1
 771 0026 EDD8     		bhi	.L84
 870:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 772              		.loc 1 870 0
 773 0028 1A01     		lsls	r2, r3, #4
 774 002a 0349     		ldr	r1, .L85
 775 002c 8A58     		ldr	r2, [r1, r2]
 776 002e 8242     		cmp	r2, r0
 777 0030 F7D1     		bne	.L75
 778 0032 F3E7     		b	.L79
 779              	.L83:
 780              	.LCFI11:
 781              		.cfi_def_cfa_offset 0
 782              		.cfi_restore 4
 783 0034 7047     		bx	lr
 784              	.L86:
 785 0036 00BF     		.align	2
 786              	.L85:
 787 0038 00000000 		.word	.LANCHOR0
 788              		.cfi_endproc
 789              	.LFE153:
 791              		.section	.text.clust2sect,"ax",%progbits
 792              		.align	1
 793              		.syntax unified
 794              		.thumb
 795              		.thumb_func
 796              		.fpu fpv5-d16
 798              	clust2sect:
 799              	.LFB157:
 873:Middlewares/Third_Party/FatFs/src/ff.c **** 
 874:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_LOCK != 0 */
 875:Middlewares/Third_Party/FatFs/src/ff.c **** 
 876:Middlewares/Third_Party/FatFs/src/ff.c **** 
 877:Middlewares/Third_Party/FatFs/src/ff.c **** 
 878:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 879:Middlewares/Third_Party/FatFs/src/ff.c **** /* Move/Flush disk access window in the file system object               */
 880:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 881:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 882:Middlewares/Third_Party/FatFs/src/ff.c **** static
 883:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 884:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs			/* File system object */
 885:Middlewares/Third_Party/FatFs/src/ff.c **** )
 886:Middlewares/Third_Party/FatFs/src/ff.c **** {
 887:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD wsect;
 888:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nf;
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 890:Middlewares/Third_Party/FatFs/src/ff.c **** 
 891:Middlewares/Third_Party/FatFs/src/ff.c **** 
 892:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->wflag) {	/* Write back the sector if it is dirty */
 893:Middlewares/Third_Party/FatFs/src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 894:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 895:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_DISK_ERR;
 896:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 897:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 0;
 898:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
ARM GAS  /tmp/ccBYTIZg.s 			page 31


 899:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 900:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 901:Middlewares/Third_Party/FatFs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 902:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 903:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 904:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 905:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 906:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 907:Middlewares/Third_Party/FatFs/src/ff.c **** }
 908:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 909:Middlewares/Third_Party/FatFs/src/ff.c **** 
 910:Middlewares/Third_Party/FatFs/src/ff.c **** 
 911:Middlewares/Third_Party/FatFs/src/ff.c **** static
 912:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 913:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,			/* File system object */
 914:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sector		/* Sector number to make appearance in the fs->win[] */
 915:Middlewares/Third_Party/FatFs/src/ff.c **** )
 916:Middlewares/Third_Party/FatFs/src/ff.c **** {
 917:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 918:Middlewares/Third_Party/FatFs/src/ff.c **** 
 919:Middlewares/Third_Party/FatFs/src/ff.c **** 
 920:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sector != fs->winsect) {	/* Window offset changed? */
 921:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 922:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = sync_window(fs);		/* Write-back changes */
 923:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 924:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 925:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 926:Middlewares/Third_Party/FatFs/src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 927:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 928:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 929:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->winsect = sector;
 930:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 931:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 932:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 933:Middlewares/Third_Party/FatFs/src/ff.c **** }
 934:Middlewares/Third_Party/FatFs/src/ff.c **** 
 935:Middlewares/Third_Party/FatFs/src/ff.c **** 
 936:Middlewares/Third_Party/FatFs/src/ff.c **** 
 937:Middlewares/Third_Party/FatFs/src/ff.c **** 
 938:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 939:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 940:Middlewares/Third_Party/FatFs/src/ff.c **** /* Synchronize file system and strage device                             */
 941:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 942:Middlewares/Third_Party/FatFs/src/ff.c **** 
 943:Middlewares/Third_Party/FatFs/src/ff.c **** static
 944:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
 945:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs		/* File system object */
 946:Middlewares/Third_Party/FatFs/src/ff.c **** )
 947:Middlewares/Third_Party/FatFs/src/ff.c **** {
 948:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 949:Middlewares/Third_Party/FatFs/src/ff.c **** 
 950:Middlewares/Third_Party/FatFs/src/ff.c **** 
 951:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = sync_window(fs);
 952:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 953:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update FSInfo sector if needed */
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 955:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
ARM GAS  /tmp/ccBYTIZg.s 			page 32


 956:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(fs->win, 0, SS(fs));
 957:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 958:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 959:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 960:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 961:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 962:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Write it into the FSInfo sector */
 963:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->winsect = fs->volbase + 1;
 964:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 965:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
 966:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 967:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 968:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 969:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 970:Middlewares/Third_Party/FatFs/src/ff.c **** 
 971:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 972:Middlewares/Third_Party/FatFs/src/ff.c **** }
 973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 974:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 975:Middlewares/Third_Party/FatFs/src/ff.c **** 
 976:Middlewares/Third_Party/FatFs/src/ff.c **** 
 977:Middlewares/Third_Party/FatFs/src/ff.c **** 
 978:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 979:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get sector# from cluster#                                             */
 980:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 981:Middlewares/Third_Party/FatFs/src/ff.c **** 
 982:Middlewares/Third_Party/FatFs/src/ff.c **** static
 983:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
 984:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* File system object */
 985:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 986:Middlewares/Third_Party/FatFs/src/ff.c **** )
 987:Middlewares/Third_Party/FatFs/src/ff.c **** {
 800              		.loc 1 987 0
 801              		.cfi_startproc
 802              		@ args = 0, pretend = 0, frame = 0
 803              		@ frame_needed = 0, uses_anonymous_args = 0
 804              		@ link register save eliminated.
 805              	.LVL95:
 988:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;
 806              		.loc 1 988 0
 807 0000 0239     		subs	r1, r1, #2
 808              	.LVL96:
 989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 809              		.loc 1 989 0
 810 0002 4369     		ldr	r3, [r0, #20]
 811 0004 023B     		subs	r3, r3, #2
 812 0006 9942     		cmp	r1, r3
 813 0008 04D2     		bcs	.L89
 990:Middlewares/Third_Party/FatFs/src/ff.c **** 	return clst * fs->csize + fs->database;
 814              		.loc 1 990 0
 815 000a 4389     		ldrh	r3, [r0, #10]
 816 000c 806A     		ldr	r0, [r0, #40]
 817              	.LVL97:
 818 000e 03FB0100 		mla	r0, r3, r1, r0
 819 0012 7047     		bx	lr
 820              	.LVL98:
 821              	.L89:
ARM GAS  /tmp/ccBYTIZg.s 			page 33


 989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 822              		.loc 1 989 0
 823 0014 0020     		movs	r0, #0
 824              	.LVL99:
 991:Middlewares/Third_Party/FatFs/src/ff.c **** }
 825              		.loc 1 991 0
 826 0016 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE157:
 830              		.section	.text.clmt_clust,"ax",%progbits
 831              		.align	1
 832              		.syntax unified
 833              		.thumb
 834              		.thumb_func
 835              		.fpu fpv5-d16
 837              	clmt_clust:
 838              	.LFB162:
 992:Middlewares/Third_Party/FatFs/src/ff.c **** 
 993:Middlewares/Third_Party/FatFs/src/ff.c **** 
 994:Middlewares/Third_Party/FatFs/src/ff.c **** 
 995:Middlewares/Third_Party/FatFs/src/ff.c **** 
 996:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 997:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT access - Read value of a FAT entry                                */
 998:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
 999:Middlewares/Third_Party/FatFs/src/ff.c **** 
1000:Middlewares/Third_Party/FatFs/src/ff.c **** static
1001:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1002:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,	/* Corresponding object */
1003:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst	/* Cluster number to get the value */
1004:Middlewares/Third_Party/FatFs/src/ff.c **** )
1005:Middlewares/Third_Party/FatFs/src/ff.c **** {
1006:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wc, bc;
1007:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val;
1008:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1009:Middlewares/Third_Party/FatFs/src/ff.c **** 
1010:Middlewares/Third_Party/FatFs/src/ff.c **** 
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
1013:Middlewares/Third_Party/FatFs/src/ff.c **** 
1014:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1016:Middlewares/Third_Party/FatFs/src/ff.c **** 
1017:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
1018:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :
1019:Middlewares/Third_Party/FatFs/src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
1020:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1021:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
1022:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1023:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1025:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1026:Middlewares/Third_Party/FatFs/src/ff.c **** 
1027:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT16 :
1028:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1029:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
1030:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1031:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 34


1032:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT32 :
1033:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1034:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1035:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1036:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1037:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_EXFAT :
1038:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->objsize) {
1039:Middlewares/Third_Party/FatFs/src/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1040:Middlewares/Third_Party/FatFs/src/ff.c **** 				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1041:Middlewares/Third_Party/FatFs/src/ff.c **** 
1042:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
1043:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (cofs <= clen) {
1044:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
1045:Middlewares/Third_Party/FatFs/src/ff.c **** 						break;
1046:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1047:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1048:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1049:Middlewares/Third_Party/FatFs/src/ff.c **** 					val = clst + 1; 	/* Generate the value */
1050:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
1051:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1052:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1053:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1054:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1055:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
1056:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1057:Middlewares/Third_Party/FatFs/src/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1058:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1059:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
1060:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1061:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1062:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* go to default */
1063:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1064:Middlewares/Third_Party/FatFs/src/ff.c **** 		default:
1065:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = 1;	/* Internal error */
1066:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1067:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1068:Middlewares/Third_Party/FatFs/src/ff.c **** 
1069:Middlewares/Third_Party/FatFs/src/ff.c **** 	return val;
1070:Middlewares/Third_Party/FatFs/src/ff.c **** }
1071:Middlewares/Third_Party/FatFs/src/ff.c **** 
1072:Middlewares/Third_Party/FatFs/src/ff.c **** 
1073:Middlewares/Third_Party/FatFs/src/ff.c **** 
1074:Middlewares/Third_Party/FatFs/src/ff.c **** 
1075:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1076:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1077:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT access - Change value of a FAT entry                              */
1078:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1079:Middlewares/Third_Party/FatFs/src/ff.c **** 
1080:Middlewares/Third_Party/FatFs/src/ff.c **** static
1081:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1082:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* Corresponding file system object */
1083:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1084:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val		/* New value to be set to the entry */
1085:Middlewares/Third_Party/FatFs/src/ff.c **** )
1086:Middlewares/Third_Party/FatFs/src/ff.c **** {
1087:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bc;
1088:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *p;
ARM GAS  /tmp/ccBYTIZg.s 			page 35


1089:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_INT_ERR;
1090:Middlewares/Third_Party/FatFs/src/ff.c **** 
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1092:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
1093:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
1094:Middlewares/Third_Party/FatFs/src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
1095:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1096:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1097:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc++ % SS(fs);
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1099:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1100:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1101:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1102:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc % SS(fs);
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1104:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1105:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1106:Middlewares/Third_Party/FatFs/src/ff.c **** 
1107:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT16 :	/* WORD aligned items */
1108:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1109:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1110:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1111:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1112:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1113:Middlewares/Third_Party/FatFs/src/ff.c **** 
1114:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT32 :	/* DWORD aligned items */
1115:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1116:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_EXFAT :
1117:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1118:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1119:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1120:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1121:Middlewares/Third_Party/FatFs/src/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1122:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1123:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
1124:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
1125:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
1126:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1127:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1128:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
1129:Middlewares/Third_Party/FatFs/src/ff.c **** }
1130:Middlewares/Third_Party/FatFs/src/ff.c **** 
1131:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
1132:Middlewares/Third_Party/FatFs/src/ff.c **** 
1133:Middlewares/Third_Party/FatFs/src/ff.c **** 
1134:Middlewares/Third_Party/FatFs/src/ff.c **** 
1135:Middlewares/Third_Party/FatFs/src/ff.c **** 
1136:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
1137:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1138:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1139:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1140:Middlewares/Third_Party/FatFs/src/ff.c **** 
1141:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------*/
1142:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find a contiguous free cluster block */
1143:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------*/
1144:Middlewares/Third_Party/FatFs/src/ff.c **** 
1145:Middlewares/Third_Party/FatFs/src/ff.c **** static
ARM GAS  /tmp/ccBYTIZg.s 			page 36


1146:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1147:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
1148:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1149:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1150:Middlewares/Third_Party/FatFs/src/ff.c **** )
1151:Middlewares/Third_Party/FatFs/src/ff.c **** {
1152:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE bm, bv;
1153:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
1154:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD val, scl, ctr;
1155:Middlewares/Third_Party/FatFs/src/ff.c **** 
1156:Middlewares/Third_Party/FatFs/src/ff.c **** 
1157:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1158:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1159:Middlewares/Third_Party/FatFs/src/ff.c **** 	scl = val = clst; ctr = 0;
1160:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
1161:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bi
1162:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1163:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
1164:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
1165:Middlewares/Third_Party/FatFs/src/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1166:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1167:Middlewares/Third_Party/FatFs/src/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1168:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1169:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!bv) {	/* Is it a free cluster? */
1170:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1171:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
1172:Middlewares/Third_Party/FatFs/src/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1173:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1174:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1175:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (bm);
1176:Middlewares/Third_Party/FatFs/src/ff.c **** 			bm = 1;
1177:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (++i < SS(fs));
1178:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1179:Middlewares/Third_Party/FatFs/src/ff.c **** }
1180:Middlewares/Third_Party/FatFs/src/ff.c **** 
1181:Middlewares/Third_Party/FatFs/src/ff.c **** 
1182:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------*/
1183:Middlewares/Third_Party/FatFs/src/ff.c **** /* Set/Clear a block of allocation bitmap */
1184:Middlewares/Third_Party/FatFs/src/ff.c **** /*----------------------------------------*/
1185:Middlewares/Third_Party/FatFs/src/ff.c **** 
1186:Middlewares/Third_Party/FatFs/src/ff.c **** static
1187:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT change_bitmap (
1188:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
1189:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1190:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1191:Middlewares/Third_Party/FatFs/src/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1192:Middlewares/Third_Party/FatFs/src/ff.c **** )
1193:Middlewares/Third_Party/FatFs/src/ff.c **** {
1194:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE bm;
1195:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
1196:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sect;
1197:Middlewares/Third_Party/FatFs/src/ff.c **** 
1198:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1199:Middlewares/Third_Party/FatFs/src/ff.c **** 	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the 
1200:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1201:Middlewares/Third_Party/FatFs/src/ff.c **** 	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1202:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
ARM GAS  /tmp/ccBYTIZg.s 			page 37


1203:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1204:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
1205:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
1206:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1207:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1208:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
1209:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1210:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1211:Middlewares/Third_Party/FatFs/src/ff.c **** 			bm = 1;
1212:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1213:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = 0;
1214:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1215:Middlewares/Third_Party/FatFs/src/ff.c **** }
1216:Middlewares/Third_Party/FatFs/src/ff.c **** 
1217:Middlewares/Third_Party/FatFs/src/ff.c **** 
1218:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1219:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill the first fragment of the FAT chain    */
1220:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1221:Middlewares/Third_Party/FatFs/src/ff.c **** 
1222:Middlewares/Third_Party/FatFs/src/ff.c **** static
1223:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT fill_first_frag (
1224:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj	/* Pointer to the corresponding object */
1225:Middlewares/Third_Party/FatFs/src/ff.c **** )
1226:Middlewares/Third_Party/FatFs/src/ff.c **** {
1227:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1228:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, n;
1229:Middlewares/Third_Party/FatFs/src/ff.c **** 
1230:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
1231:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1232:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1233:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
1234:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1235:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1236:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1237:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1238:Middlewares/Third_Party/FatFs/src/ff.c **** }
1239:Middlewares/Third_Party/FatFs/src/ff.c **** 
1240:Middlewares/Third_Party/FatFs/src/ff.c **** 
1241:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1242:Middlewares/Third_Party/FatFs/src/ff.c **** /* Fill the last fragment of the FAT chain     */
1243:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------*/
1244:Middlewares/Third_Party/FatFs/src/ff.c **** 
1245:Middlewares/Third_Party/FatFs/src/ff.c **** static
1246:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT fill_last_frag (
1247:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,	/* Pointer to the corresponding object */
1248:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD lcl,	/* Last cluster of the fragment */
1249:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD term	/* Value to set the last FAT entry */
1250:Middlewares/Third_Party/FatFs/src/ff.c **** )
1251:Middlewares/Third_Party/FatFs/src/ff.c **** {
1252:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1253:Middlewares/Third_Party/FatFs/src/ff.c **** 
1254:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
1255:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1256:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
1257:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->n_frag--;
1258:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1259:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
ARM GAS  /tmp/ccBYTIZg.s 			page 38


1260:Middlewares/Third_Party/FatFs/src/ff.c **** }
1261:Middlewares/Third_Party/FatFs/src/ff.c **** 
1262:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT && !_FS_READONLY */
1263:Middlewares/Third_Party/FatFs/src/ff.c **** 
1264:Middlewares/Third_Party/FatFs/src/ff.c **** 
1265:Middlewares/Third_Party/FatFs/src/ff.c **** 
1266:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1267:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1268:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1269:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1270:Middlewares/Third_Party/FatFs/src/ff.c **** static
1271:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1272:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1273:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1274:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
1275:Middlewares/Third_Party/FatFs/src/ff.c **** )
1276:Middlewares/Third_Party/FatFs/src/ff.c **** {
1277:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
1278:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD nxt;
1279:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1280:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1281:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD scl = clst, ecl = clst;
1282:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1283:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
1284:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD rt[2];
1285:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1286:Middlewares/Third_Party/FatFs/src/ff.c **** 
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1288:Middlewares/Third_Party/FatFs/src/ff.c **** 
1289:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1290:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1291:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
1292:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
1293:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1294:Middlewares/Third_Party/FatFs/src/ff.c **** 
1295:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Remove the chain */
1296:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1297:Middlewares/Third_Party/FatFs/src/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
1298:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1301:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1302:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1303:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
1304:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1305:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1306:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst++;
1307:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;
1308:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1309:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
1310:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1311:Middlewares/Third_Party/FatFs/src/ff.c **** 			ecl = nxt;
1312:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* End of contiguous cluster block */
1313:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1314:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1315:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1316:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) return res;
ARM GAS  /tmp/ccBYTIZg.s 			page 39


1317:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1318:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1319:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
1320:Middlewares/Third_Party/FatFs/src/ff.c **** 			rt[0] = clust2sect(fs, scl);					/* Start sector */
1321:Middlewares/Third_Party/FatFs/src/ff.c **** 			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
1322:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
1323:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1324:Middlewares/Third_Party/FatFs/src/ff.c **** 			scl = ecl = nxt;
1325:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1326:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1327:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = nxt;					/* Next cluster */
1328:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1329:Middlewares/Third_Party/FatFs/src/ff.c **** 
1330:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1331:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1332:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pclst == 0) {	/* Does the object have no chain? */
1333:Middlewares/Third_Party/FatFs/src/ff.c **** 			obj->stat = 0;		/* Change the object status 'initial' */
1334:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1335:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the c
1336:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = 2;	/* Change the object status 'contiguous' */
1337:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1338:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1339:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1340:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1341:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1342:Middlewares/Third_Party/FatFs/src/ff.c **** }
1343:Middlewares/Third_Party/FatFs/src/ff.c **** 
1344:Middlewares/Third_Party/FatFs/src/ff.c **** 
1345:Middlewares/Third_Party/FatFs/src/ff.c **** 
1346:Middlewares/Third_Party/FatFs/src/ff.c **** 
1347:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1348:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1349:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1350:Middlewares/Third_Party/FatFs/src/ff.c **** static
1351:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
1352:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,			/* Corresponding object */
1353:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1354:Middlewares/Third_Party/FatFs/src/ff.c **** )
1355:Middlewares/Third_Party/FatFs/src/ff.c **** {
1356:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cs, ncl, scl;
1357:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1358:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
1359:Middlewares/Third_Party/FatFs/src/ff.c **** 
1360:Middlewares/Third_Party/FatFs/src/ff.c **** 
1361:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0) {	/* Create a new chain */
1362:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1364:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1365:Middlewares/Third_Party/FatFs/src/ff.c **** 	else {				/* Stretch current chain */
1366:Middlewares/Third_Party/FatFs/src/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < 2) return 1;				/* Invalid FAT value */
1368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1369:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1370:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst;
1371:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1372:Middlewares/Third_Party/FatFs/src/ff.c **** 
1373:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
ARM GAS  /tmp/ccBYTIZg.s 			page 40


1374:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1375:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1376:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1377:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1378:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_INT_ERR) return 1;
1379:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1380:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1381:Middlewares/Third_Party/FatFs/src/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1382:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {									/* It is a stretched chain */
1383:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1384:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1385:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1386:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1387:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1388:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1389:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1390:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1391:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* New fragment */
1392:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1393:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1394:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1395:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1396:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1397:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
1398:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1399:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
1400:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = scl;	/* Start cluster */
1401:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
1402:Middlewares/Third_Party/FatFs/src/ff.c **** 			ncl++;							/* Next cluster */
1403:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1404:Middlewares/Third_Party/FatFs/src/ff.c **** 				ncl = 2;
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
1406:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1407:Middlewares/Third_Party/FatFs/src/ff.c **** 			cs = get_fat(obj, ncl);			/* Get the cluster status */
1408:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
1409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
1411:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1412:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
1413:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && clst != 0) {
1414:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
1415:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1416:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1417:Middlewares/Third_Party/FatFs/src/ff.c **** 
1418:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1419:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = ncl;
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1421:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
1422:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
1423:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1424:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1425:Middlewares/Third_Party/FatFs/src/ff.c **** 
1426:Middlewares/Third_Party/FatFs/src/ff.c **** 	return ncl;		/* Return new cluster number or error status */
1427:Middlewares/Third_Party/FatFs/src/ff.c **** }
1428:Middlewares/Third_Party/FatFs/src/ff.c **** 
1429:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
1430:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 41


1431:Middlewares/Third_Party/FatFs/src/ff.c **** 
1432:Middlewares/Third_Party/FatFs/src/ff.c **** 
1433:Middlewares/Third_Party/FatFs/src/ff.c **** 
1434:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
1435:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1436:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1437:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1438:Middlewares/Third_Party/FatFs/src/ff.c **** 
1439:Middlewares/Third_Party/FatFs/src/ff.c **** static
1440:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1441:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1442:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1443:Middlewares/Third_Party/FatFs/src/ff.c **** )
1444:Middlewares/Third_Party/FatFs/src/ff.c **** {
 839              		.loc 1 1444 0
 840              		.cfi_startproc
 841              		@ args = 0, pretend = 0, frame = 0
 842              		@ frame_needed = 0, uses_anonymous_args = 0
 843              		@ link register save eliminated.
 844              	.LVL100:
1445:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, ncl, *tbl;
1446:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = fp->obj.fs;
 845              		.loc 1 1446 0
 846 0000 0268     		ldr	r2, [r0]
 847              	.LVL101:
1447:Middlewares/Third_Party/FatFs/src/ff.c **** 
1448:Middlewares/Third_Party/FatFs/src/ff.c **** 
1449:Middlewares/Third_Party/FatFs/src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
 848              		.loc 1 1449 0
 849 0002 C36A     		ldr	r3, [r0, #44]
 850 0004 0433     		adds	r3, r3, #4
 851              	.LVL102:
1450:Middlewares/Third_Party/FatFs/src/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 852              		.loc 1 1450 0
 853 0006 490A     		lsrs	r1, r1, #9
 854              	.LVL103:
 855 0008 5289     		ldrh	r2, [r2, #10]
 856              	.LVL104:
 857 000a B1FBF2F1 		udiv	r1, r1, r2
 858              	.LVL105:
 859              	.L93:
1451:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
1452:Middlewares/Third_Party/FatFs/src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
 860              		.loc 1 1452 0
 861 000e 1868     		ldr	r0, [r3]
 862              	.LVL106:
1453:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 863              		.loc 1 1453 0
 864 0010 30B1     		cbz	r0, .L90
1454:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
 865              		.loc 1 1454 0
 866 0012 8142     		cmp	r1, r0
 867 0014 02D3     		bcc	.L92
1455:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
 868              		.loc 1 1455 0
 869 0016 091A     		subs	r1, r1, r0
 870              	.LVL107:
ARM GAS  /tmp/ccBYTIZg.s 			page 42


 871 0018 0833     		adds	r3, r3, #8
 872              	.LVL108:
1452:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
 873              		.loc 1 1452 0
 874 001a F8E7     		b	.L93
 875              	.LVL109:
 876              	.L92:
1456:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1457:Middlewares/Third_Party/FatFs/src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
 877              		.loc 1 1457 0
 878 001c 5868     		ldr	r0, [r3, #4]
 879              	.LVL110:
 880 001e 0844     		add	r0, r0, r1
 881              	.L90:
1458:Middlewares/Third_Party/FatFs/src/ff.c **** }
 882              		.loc 1 1458 0
 883 0020 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE162:
 887              		.section	.text.ld_clust,"ax",%progbits
 888              		.align	1
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu fpv5-d16
 894              	ld_clust:
 895              	.LFB166:
1459:Middlewares/Third_Party/FatFs/src/ff.c **** 
1460:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_FASTSEEK */
1461:Middlewares/Third_Party/FatFs/src/ff.c **** 
1462:Middlewares/Third_Party/FatFs/src/ff.c **** 
1463:Middlewares/Third_Party/FatFs/src/ff.c **** 
1464:Middlewares/Third_Party/FatFs/src/ff.c **** 
1465:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1466:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Set directory index                              */
1467:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1468:Middlewares/Third_Party/FatFs/src/ff.c **** 
1469:Middlewares/Third_Party/FatFs/src/ff.c **** static
1470:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1471:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1472:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs		/* Offset of directory table */
1473:Middlewares/Third_Party/FatFs/src/ff.c **** )
1474:Middlewares/Third_Party/FatFs/src/ff.c **** {
1475:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD csz, clst;
1476:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1477:Middlewares/Third_Party/FatFs/src/ff.c **** 
1478:Middlewares/Third_Party/FatFs/src/ff.c **** 
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE)
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
1481:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1482:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
1483:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1485:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
1486:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1487:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1488:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 43


1489:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1491:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
1492:Middlewares/Third_Party/FatFs/src/ff.c **** 
1493:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
1494:Middlewares/Third_Party/FatFs/src/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1495:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
1496:Middlewares/Third_Party/FatFs/src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
1499:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
1500:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1501:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = clust2sect(fs, clst);
1502:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1503:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->clust = clst;					/* Current cluster# */
1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
1505:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1506:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1507:Middlewares/Third_Party/FatFs/src/ff.c **** 
1508:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1509:Middlewares/Third_Party/FatFs/src/ff.c **** }
1510:Middlewares/Third_Party/FatFs/src/ff.c **** 
1511:Middlewares/Third_Party/FatFs/src/ff.c **** 
1512:Middlewares/Third_Party/FatFs/src/ff.c **** 
1513:Middlewares/Third_Party/FatFs/src/ff.c **** 
1514:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1515:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Move directory table index next                  */
1516:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1517:Middlewares/Third_Party/FatFs/src/ff.c **** 
1518:Middlewares/Third_Party/FatFs/src/ff.c **** static
1519:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
1520:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1521:Middlewares/Third_Party/FatFs/src/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
1522:Middlewares/Third_Party/FatFs/src/ff.c **** )
1523:Middlewares/Third_Party/FatFs/src/ff.c **** {
1524:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs, clst;
1525:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1526:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1527:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
1528:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1529:Middlewares/Third_Party/FatFs/src/ff.c **** 
1530:Middlewares/Third_Party/FatFs/src/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
1532:Middlewares/Third_Party/FatFs/src/ff.c **** 
1533:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1534:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect++;				/* Next sector */
1535:Middlewares/Third_Party/FatFs/src/ff.c **** 
1536:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!dp->clust) {		/* Static table */
1537:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1538:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
1539:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1540:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1541:Middlewares/Third_Party/FatFs/src/ff.c **** 		else {					/* Dynamic table */
1542:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
1543:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
ARM GAS  /tmp/ccBYTIZg.s 			page 44


1546:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
1547:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1548:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
1549:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
1550:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1551:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1555:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
1556:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
1557:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1558:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
1560:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1562:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
1563:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect -= n;							/* Restore window offset */
1564:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1565:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1566:Middlewares/Third_Party/FatFs/src/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1567:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1568:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
1569:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
1570:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = clust2sect(fs, clst);
1571:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1572:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1573:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1574:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dptr = ofs;						/* Current entry */
1575:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1576:Middlewares/Third_Party/FatFs/src/ff.c **** 
1577:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
1578:Middlewares/Third_Party/FatFs/src/ff.c **** }
1579:Middlewares/Third_Party/FatFs/src/ff.c **** 
1580:Middlewares/Third_Party/FatFs/src/ff.c **** 
1581:Middlewares/Third_Party/FatFs/src/ff.c **** 
1582:Middlewares/Third_Party/FatFs/src/ff.c **** 
1583:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1584:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1585:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1586:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1587:Middlewares/Third_Party/FatFs/src/ff.c **** 
1588:Middlewares/Third_Party/FatFs/src/ff.c **** static
1589:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1590:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
1591:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nent		/* Number of contiguous entries to allocate */
1592:Middlewares/Third_Party/FatFs/src/ff.c **** )
1593:Middlewares/Third_Party/FatFs/src/ff.c **** {
1594:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1595:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
1596:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
1597:Middlewares/Third_Party/FatFs/src/ff.c **** 
1598:Middlewares/Third_Party/FatFs/src/ff.c **** 
1599:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, 0);
1600:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
1601:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = 0;
1602:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
ARM GAS  /tmp/ccBYTIZg.s 			page 45


1603:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, dp->sect);
1604:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
1605:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1606:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1607:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1608:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1609:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1610:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++n == nent) break;	/* A block of contiguous free entries is found */
1611:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
1612:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = 0;					/* Not a blank entry. Restart to search */
1613:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1614:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_next(dp, 1);
1615:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1616:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1617:Middlewares/Third_Party/FatFs/src/ff.c **** 
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1619:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
1620:Middlewares/Third_Party/FatFs/src/ff.c **** }
1621:Middlewares/Third_Party/FatFs/src/ff.c **** 
1622:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
1623:Middlewares/Third_Party/FatFs/src/ff.c **** 
1624:Middlewares/Third_Party/FatFs/src/ff.c **** 
1625:Middlewares/Third_Party/FatFs/src/ff.c **** 
1626:Middlewares/Third_Party/FatFs/src/ff.c **** 
1627:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1628:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1629:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1630:Middlewares/Third_Party/FatFs/src/ff.c **** 
1631:Middlewares/Third_Party/FatFs/src/ff.c **** static
1632:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1633:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,		/* Pointer to the fs object */
1634:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir	/* Pointer to the key entry */
1635:Middlewares/Third_Party/FatFs/src/ff.c **** )
1636:Middlewares/Third_Party/FatFs/src/ff.c **** {
 896              		.loc 1 1636 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 0, uses_anonymous_args = 0
 900              	.LVL111:
 901 0000 70B5     		push	{r4, r5, r6, lr}
 902              	.LCFI12:
 903              		.cfi_def_cfa_offset 16
 904              		.cfi_offset 4, -16
 905              		.cfi_offset 5, -12
 906              		.cfi_offset 6, -8
 907              		.cfi_offset 14, -4
 908 0002 0646     		mov	r6, r0
 909 0004 0D46     		mov	r5, r1
1637:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl;
1638:Middlewares/Third_Party/FatFs/src/ff.c **** 
1639:Middlewares/Third_Party/FatFs/src/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 910              		.loc 1 1639 0
 911 0006 01F11A00 		add	r0, r1, #26
 912              	.LVL112:
 913 000a FFF7FEFF 		bl	ld_word
 914              	.LVL113:
 915 000e 0446     		mov	r4, r0
ARM GAS  /tmp/ccBYTIZg.s 			page 46


 916              	.LVL114:
1640:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 917              		.loc 1 1640 0
 918 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 919 0012 032B     		cmp	r3, #3
 920 0014 00D0     		beq	.L97
 921              	.L94:
1641:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1642:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1643:Middlewares/Third_Party/FatFs/src/ff.c **** 
1644:Middlewares/Third_Party/FatFs/src/ff.c **** 	return cl;
1645:Middlewares/Third_Party/FatFs/src/ff.c **** }
 922              		.loc 1 1645 0
 923 0016 70BD     		pop	{r4, r5, r6, pc}
 924              	.LVL115:
 925              	.L97:
1641:Middlewares/Third_Party/FatFs/src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 926              		.loc 1 1641 0
 927 0018 05F11400 		add	r0, r5, #20
 928              	.LVL116:
 929 001c FFF7FEFF 		bl	ld_word
 930              	.LVL117:
 931 0020 44EA0040 		orr	r0, r4, r0, lsl #16
 932              	.LVL118:
1644:Middlewares/Third_Party/FatFs/src/ff.c **** }
 933              		.loc 1 1644 0
 934 0024 F7E7     		b	.L94
 935              		.cfi_endproc
 936              	.LFE166:
 938              		.section	.text.st_clust,"ax",%progbits
 939              		.align	1
 940              		.syntax unified
 941              		.thumb
 942              		.thumb_func
 943              		.fpu fpv5-d16
 945              	st_clust:
 946              	.LFB167:
1646:Middlewares/Third_Party/FatFs/src/ff.c **** 
1647:Middlewares/Third_Party/FatFs/src/ff.c **** 
1648:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1649:Middlewares/Third_Party/FatFs/src/ff.c **** static
1650:Middlewares/Third_Party/FatFs/src/ff.c **** void st_clust (
1651:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1652:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1653:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl	/* Value to be set */
1654:Middlewares/Third_Party/FatFs/src/ff.c **** )
1655:Middlewares/Third_Party/FatFs/src/ff.c **** {
 947              		.loc 1 1655 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951              	.LVL119:
 952 0000 70B5     		push	{r4, r5, r6, lr}
 953              	.LCFI13:
 954              		.cfi_def_cfa_offset 16
 955              		.cfi_offset 4, -16
 956              		.cfi_offset 5, -12
ARM GAS  /tmp/ccBYTIZg.s 			page 47


 957              		.cfi_offset 6, -8
 958              		.cfi_offset 14, -4
 959 0002 0646     		mov	r6, r0
 960 0004 0C46     		mov	r4, r1
 961 0006 1546     		mov	r5, r2
1656:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 962              		.loc 1 1656 0
 963 0008 91B2     		uxth	r1, r2
 964              	.LVL120:
 965 000a 04F11A00 		add	r0, r4, #26
 966              	.LVL121:
 967 000e FFF7FEFF 		bl	st_word
 968              	.LVL122:
1657:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 969              		.loc 1 1657 0
 970 0012 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 971 0014 032B     		cmp	r3, #3
 972 0016 00D0     		beq	.L101
 973              	.L98:
 974 0018 70BD     		pop	{r4, r5, r6, pc}
 975              	.LVL123:
 976              	.L101:
1658:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 977              		.loc 1 1658 0
 978 001a 290C     		lsrs	r1, r5, #16
 979 001c 04F11400 		add	r0, r4, #20
 980 0020 FFF7FEFF 		bl	st_word
 981              	.LVL124:
1659:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1660:Middlewares/Third_Party/FatFs/src/ff.c **** }
 982              		.loc 1 1660 0
 983 0024 F8E7     		b	.L98
 984              		.cfi_endproc
 985              	.LFE167:
 987              		.section	.text.get_fileinfo,"ax",%progbits
 988              		.align	1
 989              		.syntax unified
 990              		.thumb
 991              		.thumb_func
 992              		.fpu fpv5-d16
 994              	get_fileinfo:
 995              	.LFB172:
1661:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1662:Middlewares/Third_Party/FatFs/src/ff.c **** 
1663:Middlewares/Third_Party/FatFs/src/ff.c **** 
1664:Middlewares/Third_Party/FatFs/src/ff.c **** 
1665:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
1666:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------------------------*/
1667:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: LFN handling                                                  */
1668:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------------------------*/
1669:Middlewares/Third_Party/FatFs/src/ff.c **** static
1670:Middlewares/Third_Party/FatFs/src/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the direc
1671:Middlewares/Third_Party/FatFs/src/ff.c **** 
1672:Middlewares/Third_Party/FatFs/src/ff.c **** 
1673:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------*/
1674:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1675:Middlewares/Third_Party/FatFs/src/ff.c **** /*--------------------------------------------------------*/
ARM GAS  /tmp/ccBYTIZg.s 			page 48


1676:Middlewares/Third_Party/FatFs/src/ff.c **** static
1677:Middlewares/Third_Party/FatFs/src/ff.c **** int cmp_lfn (				/* 1:matched, 0:not matched */
1678:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1679:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1680:Middlewares/Third_Party/FatFs/src/ff.c **** )
1681:Middlewares/Third_Party/FatFs/src/ff.c **** {
1682:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1683:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc, uc;
1684:Middlewares/Third_Party/FatFs/src/ff.c **** 
1685:Middlewares/Third_Party/FatFs/src/ff.c **** 
1686:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1687:Middlewares/Third_Party/FatFs/src/ff.c **** 
1688:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1689:Middlewares/Third_Party/FatFs/src/ff.c **** 
1690:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1691:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1692:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc) {
1693:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1694:Middlewares/Third_Party/FatFs/src/ff.c **** 				return 0;					/* Not matched */
1695:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1696:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = uc;
1697:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1698:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1699:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1700:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1701:Middlewares/Third_Party/FatFs/src/ff.c **** 
1702:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1703:Middlewares/Third_Party/FatFs/src/ff.c **** 
1704:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 1;		/* The part of LFN matched */
1705:Middlewares/Third_Party/FatFs/src/ff.c **** }
1706:Middlewares/Third_Party/FatFs/src/ff.c **** 
1707:Middlewares/Third_Party/FatFs/src/ff.c **** 
1708:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
1709:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------*/
1710:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1711:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------*/
1712:Middlewares/Third_Party/FatFs/src/ff.c **** static
1713:Middlewares/Third_Party/FatFs/src/ff.c **** int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1714:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1715:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1716:Middlewares/Third_Party/FatFs/src/ff.c **** )
1717:Middlewares/Third_Party/FatFs/src/ff.c **** {
1718:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1719:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc, uc;
1720:Middlewares/Third_Party/FatFs/src/ff.c **** 
1721:Middlewares/Third_Party/FatFs/src/ff.c **** 
1722:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1723:Middlewares/Third_Party/FatFs/src/ff.c **** 
1724:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1725:Middlewares/Third_Party/FatFs/src/ff.c **** 
1726:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1727:Middlewares/Third_Party/FatFs/src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1728:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc) {
1729:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
1730:Middlewares/Third_Party/FatFs/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1731:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1732:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
ARM GAS  /tmp/ccBYTIZg.s 			page 49


1733:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1734:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1735:Middlewares/Third_Party/FatFs/src/ff.c **** 
1736:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1737:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
1738:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfnbuf[i] = 0;
1739:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1740:Middlewares/Third_Party/FatFs/src/ff.c **** 
1741:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 1;		/* The part of LFN is valid */
1742:Middlewares/Third_Party/FatFs/src/ff.c **** }
1743:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1744:Middlewares/Third_Party/FatFs/src/ff.c **** 
1745:Middlewares/Third_Party/FatFs/src/ff.c **** 
1746:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
1747:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------*/
1748:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1749:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------*/
1750:Middlewares/Third_Party/FatFs/src/ff.c **** static
1751:Middlewares/Third_Party/FatFs/src/ff.c **** void put_lfn (
1752:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1753:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1754:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1755:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1756:Middlewares/Third_Party/FatFs/src/ff.c **** )
1757:Middlewares/Third_Party/FatFs/src/ff.c **** {
1758:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, s;
1759:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc;
1760:Middlewares/Third_Party/FatFs/src/ff.c **** 
1761:Middlewares/Third_Party/FatFs/src/ff.c **** 
1762:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1763:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1764:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Type] = 0;
1765:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
1766:Middlewares/Third_Party/FatFs/src/ff.c **** 
1767:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1768:Middlewares/Third_Party/FatFs/src/ff.c **** 	s = wc = 0;
1769:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1770:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1771:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1772:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1773:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (++s < 13);
1774:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1775:Middlewares/Third_Party/FatFs/src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1776:Middlewares/Third_Party/FatFs/src/ff.c **** }
1777:Middlewares/Third_Party/FatFs/src/ff.c **** 
1778:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
1779:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 */
1780:Middlewares/Third_Party/FatFs/src/ff.c **** 
1781:Middlewares/Third_Party/FatFs/src/ff.c **** 
1782:Middlewares/Third_Party/FatFs/src/ff.c **** 
1783:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0 && !_FS_READONLY
1784:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1785:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
1786:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1787:Middlewares/Third_Party/FatFs/src/ff.c **** 
1788:Middlewares/Third_Party/FatFs/src/ff.c **** static
1789:Middlewares/Third_Party/FatFs/src/ff.c **** void gen_numname (
ARM GAS  /tmp/ccBYTIZg.s 			page 50


1790:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
1791:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
1792:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
1793:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT seq			/* Sequence number */
1794:Middlewares/Third_Party/FatFs/src/ff.c **** )
1795:Middlewares/Third_Party/FatFs/src/ff.c **** {
1796:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ns[8], c;
1797:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
1798:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR wc;
1799:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sr;
1800:Middlewares/Third_Party/FatFs/src/ff.c **** 
1801:Middlewares/Third_Party/FatFs/src/ff.c **** 
1802:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dst, src, 11);
1803:Middlewares/Third_Party/FatFs/src/ff.c **** 
1804:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
1805:Middlewares/Third_Party/FatFs/src/ff.c **** 		sr = seq;
1806:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (*lfn) {	/* Create a CRC */
1807:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = *lfn++;
1808:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; i < 16; i++) {
1809:Middlewares/Third_Party/FatFs/src/ff.c **** 				sr = (sr << 1) + (wc & 1);
1810:Middlewares/Third_Party/FatFs/src/ff.c **** 				wc >>= 1;
1811:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (sr & 0x10000) sr ^= 0x11021;
1812:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
1813:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1814:Middlewares/Third_Party/FatFs/src/ff.c **** 		seq = (UINT)sr;
1815:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1816:Middlewares/Third_Party/FatFs/src/ff.c **** 
1817:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* itoa (hexdecimal) */
1818:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = 7;
1819:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1820:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (BYTE)((seq % 16) + '0');
1821:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c > '9') c += 7;
1822:Middlewares/Third_Party/FatFs/src/ff.c **** 		ns[i--] = c;
1823:Middlewares/Third_Party/FatFs/src/ff.c **** 		seq /= 16;
1824:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (seq);
1825:Middlewares/Third_Party/FatFs/src/ff.c **** 	ns[i] = '~';
1826:Middlewares/Third_Party/FatFs/src/ff.c **** 
1827:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Append the number */
1828:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1829:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(dst[j])) {
1830:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (j == i - 1) break;
1831:Middlewares/Third_Party/FatFs/src/ff.c **** 			j++;
1832:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1833:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1834:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1835:Middlewares/Third_Party/FatFs/src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1836:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (j < 8);
1837:Middlewares/Third_Party/FatFs/src/ff.c **** }
1838:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 && !_FS_READONLY */
1839:Middlewares/Third_Party/FatFs/src/ff.c **** 
1840:Middlewares/Third_Party/FatFs/src/ff.c **** 
1841:Middlewares/Third_Party/FatFs/src/ff.c **** 
1842:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
1843:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1844:Middlewares/Third_Party/FatFs/src/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
1845:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1846:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 51


1847:Middlewares/Third_Party/FatFs/src/ff.c **** static
1848:Middlewares/Third_Party/FatFs/src/ff.c **** BYTE sum_sfn (
1849:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
1850:Middlewares/Third_Party/FatFs/src/ff.c **** )
1851:Middlewares/Third_Party/FatFs/src/ff.c **** {
1852:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sum = 0;
1853:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n = 11;
1854:Middlewares/Third_Party/FatFs/src/ff.c **** 
1855:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
1856:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
1857:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (--n);
1858:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1859:Middlewares/Third_Party/FatFs/src/ff.c **** }
1860:Middlewares/Third_Party/FatFs/src/ff.c **** 
1861:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_LFN != 0 */
1862:Middlewares/Third_Party/FatFs/src/ff.c **** 
1863:Middlewares/Third_Party/FatFs/src/ff.c **** 
1864:Middlewares/Third_Party/FatFs/src/ff.c **** 
1865:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
1866:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1867:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Checksum                                                       */
1868:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
1869:Middlewares/Third_Party/FatFs/src/ff.c **** 
1870:Middlewares/Third_Party/FatFs/src/ff.c **** static
1871:Middlewares/Third_Party/FatFs/src/ff.c **** WORD xdir_sum (			/* Get checksum of the directoly block */
1872:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
1873:Middlewares/Third_Party/FatFs/src/ff.c **** )
1874:Middlewares/Third_Party/FatFs/src/ff.c **** {
1875:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, szblk;
1876:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD sum;
1877:Middlewares/Third_Party/FatFs/src/ff.c **** 
1878:Middlewares/Third_Party/FatFs/src/ff.c **** 
1879:Middlewares/Third_Party/FatFs/src/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
1880:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
1881:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip sum field */
1882:Middlewares/Third_Party/FatFs/src/ff.c **** 			i++;
1883:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
1884:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1885:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1886:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1887:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1888:Middlewares/Third_Party/FatFs/src/ff.c **** }
1889:Middlewares/Third_Party/FatFs/src/ff.c **** 
1890:Middlewares/Third_Party/FatFs/src/ff.c **** 
1891:Middlewares/Third_Party/FatFs/src/ff.c **** 
1892:Middlewares/Third_Party/FatFs/src/ff.c **** static
1893:Middlewares/Third_Party/FatFs/src/ff.c **** WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
1894:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* name	/* File name to be calculated */
1895:Middlewares/Third_Party/FatFs/src/ff.c **** )
1896:Middlewares/Third_Party/FatFs/src/ff.c **** {
1897:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
1898:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD sum = 0;
1899:Middlewares/Third_Party/FatFs/src/ff.c **** 
1900:Middlewares/Third_Party/FatFs/src/ff.c **** 
1901:Middlewares/Third_Party/FatFs/src/ff.c **** 	while ((chr = *name++) != 0) {
1902:Middlewares/Third_Party/FatFs/src/ff.c **** 		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
1903:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
ARM GAS  /tmp/ccBYTIZg.s 			page 52


1904:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1905:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1906:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1907:Middlewares/Third_Party/FatFs/src/ff.c **** }
1908:Middlewares/Third_Party/FatFs/src/ff.c **** 
1909:Middlewares/Third_Party/FatFs/src/ff.c **** 
1910:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _USE_MKFS
1911:Middlewares/Third_Party/FatFs/src/ff.c **** static
1912:Middlewares/Third_Party/FatFs/src/ff.c **** DWORD xsum32 (
1913:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE  dat,	/* Data to be sumed */
1914:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sum	/* Previous value */
1915:Middlewares/Third_Party/FatFs/src/ff.c **** )
1916:Middlewares/Third_Party/FatFs/src/ff.c **** {
1917:Middlewares/Third_Party/FatFs/src/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
1918:Middlewares/Third_Party/FatFs/src/ff.c **** 	return sum;
1919:Middlewares/Third_Party/FatFs/src/ff.c **** }
1920:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1921:Middlewares/Third_Party/FatFs/src/ff.c **** 
1922:Middlewares/Third_Party/FatFs/src/ff.c **** 
1923:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
1924:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------*/
1925:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Get object information from a directory block */
1926:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------------*/
1927:Middlewares/Third_Party/FatFs/src/ff.c **** 
1928:Middlewares/Third_Party/FatFs/src/ff.c **** static
1929:Middlewares/Third_Party/FatFs/src/ff.c **** void get_xdir_info (
1930:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
1931:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
1932:Middlewares/Third_Party/FatFs/src/ff.c **** )
1933:Middlewares/Third_Party/FatFs/src/ff.c **** {
1934:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT di, si;
1935:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
1936:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
1937:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nc;
1938:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1939:Middlewares/Third_Party/FatFs/src/ff.c **** 
1940:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get file name */
1941:Middlewares/Third_Party/FatFs/src/ff.c **** 	di = 0;
1942:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
1943:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = SZDIRE * 2; di < dirb[XDIR_NumName]; si += 2, di++) {
1944:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1945:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ld_word(dirb + si);					/* Get a character */
1946:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
1947:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[di] = w;						/* Store it */
1948:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1949:Middlewares/Third_Party/FatFs/src/ff.c **** #else
1950:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
1951:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
1952:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
1953:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
1954:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
1955:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
1956:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessi
1957:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[di++] = (char)w;
1958:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
1959:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
1960:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
ARM GAS  /tmp/ccBYTIZg.s 			page 53


1961:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[di] = 0;						/* Terminate file name */
1962:Middlewares/Third_Party/FatFs/src/ff.c **** 
1963:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->altname[0] = 0;							/* No SFN */
1964:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
1965:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
1966:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
1967:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
1968:Middlewares/Third_Party/FatFs/src/ff.c **** }
1969:Middlewares/Third_Party/FatFs/src/ff.c **** 
1970:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
1971:Middlewares/Third_Party/FatFs/src/ff.c **** 
1972:Middlewares/Third_Party/FatFs/src/ff.c **** 
1973:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------*/
1974:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Get a directry entry block */
1975:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------*/
1976:Middlewares/Third_Party/FatFs/src/ff.c **** 
1977:Middlewares/Third_Party/FatFs/src/ff.c **** static
1978:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
1979:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
1980:Middlewares/Third_Party/FatFs/src/ff.c **** )
1981:Middlewares/Third_Party/FatFs/src/ff.c **** {
1982:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
1983:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, sz_ent;
1984:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1985:Middlewares/Third_Party/FatFs/src/ff.c **** 
1986:Middlewares/Third_Party/FatFs/src/ff.c **** 
1987:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load 85 entry */
1988:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1989:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
1990:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
1991:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dirb + 0, dp->dir, SZDIRE);
1992:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1993:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1994:Middlewares/Third_Party/FatFs/src/ff.c **** 
1995:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load C0 entry */
1996:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_next(dp, 0);
1997:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
1998:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
1999:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
2000:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
2001:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
2002:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2003:Middlewares/Third_Party/FatFs/src/ff.c **** 
2004:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Load C1 entries */
2005:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = SZDIRE * 2;	/* C1 offset */
2006:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2007:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);
2008:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2009:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2010:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2011:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
2012:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2013:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2014:Middlewares/Third_Party/FatFs/src/ff.c **** 
2015:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Sanity check (do it when accessible object name) */
2016:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i <= MAXDIRB(_MAX_LFN)) {
2017:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
ARM GAS  /tmp/ccBYTIZg.s 			page 54


2018:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2019:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2020:Middlewares/Third_Party/FatFs/src/ff.c **** }
2021:Middlewares/Third_Party/FatFs/src/ff.c **** 
2022:Middlewares/Third_Party/FatFs/src/ff.c **** 
2023:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY || _FS_RPATH != 0
2024:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------*/
2025:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Load the object's directory entry block */
2026:Middlewares/Third_Party/FatFs/src/ff.c **** /*------------------------------------------------*/
2027:Middlewares/Third_Party/FatFs/src/ff.c **** static
2028:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT load_obj_dir (
2029:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2030:Middlewares/Third_Party/FatFs/src/ff.c **** 	const _FDID* obj	/* Object with its containing directory information */
2031:Middlewares/Third_Party/FatFs/src/ff.c **** )
2032:Middlewares/Third_Party/FatFs/src/ff.c **** {
2033:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2034:Middlewares/Third_Party/FatFs/src/ff.c **** 
2035:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Open object containing directory */
2036:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.fs = obj->fs;
2037:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.sclust = obj->c_scl;
2038:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2039:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2040:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2041:Middlewares/Third_Party/FatFs/src/ff.c **** 
2042:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2043:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2044:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2045:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2046:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2047:Middlewares/Third_Party/FatFs/src/ff.c **** }
2048:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2049:Middlewares/Third_Party/FatFs/src/ff.c **** 
2050:Middlewares/Third_Party/FatFs/src/ff.c **** 
2051:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
2052:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------*/
2053:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Store the directory block to the media */
2054:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------*/
2055:Middlewares/Third_Party/FatFs/src/ff.c **** static
2056:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT store_xdir (
2057:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2058:Middlewares/Third_Party/FatFs/src/ff.c **** )
2059:Middlewares/Third_Party/FatFs/src/ff.c **** {
2060:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2061:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nent;
2062:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2063:Middlewares/Third_Party/FatFs/src/ff.c **** 
2064:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create set sum */
2065:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2066:Middlewares/Third_Party/FatFs/src/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2067:Middlewares/Third_Party/FatFs/src/ff.c **** 
2068:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Store the set of directory to the volume */
2069:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2070:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (res == FR_OK) {
2071:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2072:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2073:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2074:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.fs->wflag = 1;
ARM GAS  /tmp/ccBYTIZg.s 			page 55


2075:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (--nent == 0) break;
2076:Middlewares/Third_Party/FatFs/src/ff.c **** 		dirb += SZDIRE;
2077:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);
2078:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2079:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2080:Middlewares/Third_Party/FatFs/src/ff.c **** }
2081:Middlewares/Third_Party/FatFs/src/ff.c **** 
2082:Middlewares/Third_Party/FatFs/src/ff.c **** 
2083:Middlewares/Third_Party/FatFs/src/ff.c **** 
2084:Middlewares/Third_Party/FatFs/src/ff.c **** /*-------------------------------------------*/
2085:Middlewares/Third_Party/FatFs/src/ff.c **** /* exFAT: Create a new directory enrty block */
2086:Middlewares/Third_Party/FatFs/src/ff.c **** /*-------------------------------------------*/
2087:Middlewares/Third_Party/FatFs/src/ff.c **** 
2088:Middlewares/Third_Party/FatFs/src/ff.c **** static
2089:Middlewares/Third_Party/FatFs/src/ff.c **** void create_xdir (
2090:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2091:Middlewares/Third_Party/FatFs/src/ff.c **** 	const WCHAR* lfn	/* Pointer to the nul terminated file name */
2092:Middlewares/Third_Party/FatFs/src/ff.c **** )
2093:Middlewares/Third_Party/FatFs/src/ff.c **** {
2094:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
2095:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE nb, nc;
2096:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
2097:Middlewares/Third_Party/FatFs/src/ff.c **** 
2098:Middlewares/Third_Party/FatFs/src/ff.c **** 
2099:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create 85+C0 entry */
2100:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2101:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_Type] = 0x85;
2102:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_Type + SZDIRE] = 0xC0;
2103:Middlewares/Third_Party/FatFs/src/ff.c **** 
2104:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create C1 entries */
2105:Middlewares/Third_Party/FatFs/src/ff.c **** 	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
2106:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2107:Middlewares/Third_Party/FatFs/src/ff.c **** 		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
2108:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {	/* Fill name field */
2109:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
2110:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(dirb + i, chr); 		/* Store it */
2111:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while ((i += 2) % SZDIRE != 0);
2112:Middlewares/Third_Party/FatFs/src/ff.c **** 		nb++;
2113:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (lfn[nc]);	/* Fill next entry if any char follows */
2114:Middlewares/Third_Party/FatFs/src/ff.c **** 
2115:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_NumName] = nc;	/* Set name length */
2116:Middlewares/Third_Party/FatFs/src/ff.c **** 	dirb[XDIR_NumSec] = nb;		/* Set block length */
2117:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2118:Middlewares/Third_Party/FatFs/src/ff.c **** }
2119:Middlewares/Third_Party/FatFs/src/ff.c **** 
2120:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
2121:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
2122:Middlewares/Third_Party/FatFs/src/ff.c **** 
2123:Middlewares/Third_Party/FatFs/src/ff.c **** 
2124:Middlewares/Third_Party/FatFs/src/ff.c **** 
2125:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 || _USE_LABEL || _FS_EXFAT
2126:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2127:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read an object from the directory                                     */
2128:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2129:Middlewares/Third_Party/FatFs/src/ff.c **** 
2130:Middlewares/Third_Party/FatFs/src/ff.c **** static
2131:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_read (
ARM GAS  /tmp/ccBYTIZg.s 			page 56


2132:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2133:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2134:Middlewares/Third_Party/FatFs/src/ff.c **** )
2135:Middlewares/Third_Party/FatFs/src/ff.c **** {
2136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_NO_FILE;
2137:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2138:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, c;
2139:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2140:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2141:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2142:Middlewares/Third_Party/FatFs/src/ff.c **** 
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (dp->sect) {
2144:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2145:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2146:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
2147:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) {
2148:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
2149:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2150:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2151:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2152:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_USE_LABEL && vol) {
2153:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c == 0x83) break;	/* Volume label entry? */
2154:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2155:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c == 0x85) {		/* Start of the file entry block? */
2156:Middlewares/Third_Party/FatFs/src/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2157:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2158:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
2159:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2160:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2161:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
2162:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2163:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2164:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else
2165:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2166:Middlewares/Third_Party/FatFs/src/ff.c **** 		{	/* On the FAT12/16/32 volume */
2167:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
2168:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2169:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid 
2170:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF;
2171:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2172:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (a == AM_LFN) {			/* An LFN entry is found */
2173:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {			/* Is it start of an LFN sequence? */
2174:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2175:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;
2176:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;
2177:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2178:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Check LFN validity and capture it */
2179:Middlewares/Third_Party/FatFs/src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2180:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* An SFN entry is found */
2181:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2182:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2183:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2184:Middlewares/Third_Party/FatFs/src/ff.c **** 					break;
2185:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2186:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2187:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* Non LFN configuration */
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a 
ARM GAS  /tmp/ccBYTIZg.s 			page 57


2189:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
2190:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2191:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2192:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2193:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
2194:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2195:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2196:Middlewares/Third_Party/FatFs/src/ff.c **** 
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
2198:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2199:Middlewares/Third_Party/FatFs/src/ff.c **** }
2200:Middlewares/Third_Party/FatFs/src/ff.c **** 
2201:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
2202:Middlewares/Third_Party/FatFs/src/ff.c **** 
2203:Middlewares/Third_Party/FatFs/src/ff.c **** 
2204:Middlewares/Third_Party/FatFs/src/ff.c **** 
2205:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2206:Middlewares/Third_Party/FatFs/src/ff.c **** /* Directory handling - Find an object in the directory                  */
2207:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2208:Middlewares/Third_Party/FatFs/src/ff.c **** 
2209:Middlewares/Third_Party/FatFs/src/ff.c **** static
2210:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2211:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp			/* Pointer to the directory object with the file name */
2212:Middlewares/Third_Party/FatFs/src/ff.c **** )
2213:Middlewares/Third_Party/FatFs/src/ff.c **** {
2214:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2215:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2216:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c;
2217:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2218:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, ord, sum;
2219:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2220:Middlewares/Third_Party/FatFs/src/ff.c **** 
2221:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
2222:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
2223:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2224:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2225:Middlewares/Third_Party/FatFs/src/ff.c **** 		BYTE nc;
2226:Middlewares/Third_Party/FatFs/src/ff.c **** 		UINT di, ni;
2227:Middlewares/Third_Party/FatFs/src/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2228:Middlewares/Third_Party/FatFs/src/ff.c **** 
2229:Middlewares/Third_Party/FatFs/src/ff.c **** 		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
2230:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_LFN < 255
2231:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object n
2232:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2233:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2234:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2235:Middlewares/Third_Party/FatFs/src/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2236:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2237:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2238:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2239:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2240:Middlewares/Third_Party/FatFs/src/ff.c **** 		return res;
2241:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2242:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2243:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* On the FAT12/16/32 volume */
2244:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2245:Middlewares/Third_Party/FatFs/src/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
ARM GAS  /tmp/ccBYTIZg.s 			page 58


2246:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2247:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2248:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2249:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
2250:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];
2251:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
2252:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2253:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2254:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2255:Middlewares/Third_Party/FatFs/src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2256:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
2257:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2258:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2259:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2260:Middlewares/Third_Party/FatFs/src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2261:Middlewares/Third_Party/FatFs/src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2262:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2263:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2264:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2265:Middlewares/Third_Party/FatFs/src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2266:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2267:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* An SFN entry is found */
2268:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2269:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2270:Middlewares/Third_Party/FatFs/src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2271:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2272:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2273:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* Non LFN configuration */
2274:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
2275:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
2276:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2277:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
2278:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (res == FR_OK);
2279:Middlewares/Third_Party/FatFs/src/ff.c **** 
2280:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2281:Middlewares/Third_Party/FatFs/src/ff.c **** }
2282:Middlewares/Third_Party/FatFs/src/ff.c **** 
2283:Middlewares/Third_Party/FatFs/src/ff.c **** 
2284:Middlewares/Third_Party/FatFs/src/ff.c **** 
2285:Middlewares/Third_Party/FatFs/src/ff.c **** 
2286:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
2287:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2288:Middlewares/Third_Party/FatFs/src/ff.c **** /* Register an object to the directory                                   */
2289:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2290:Middlewares/Third_Party/FatFs/src/ff.c **** 
2291:Middlewares/Third_Party/FatFs/src/ff.c **** static
2292:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DI
2293:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Target directory with object name to be created */
2294:Middlewares/Third_Party/FatFs/src/ff.c **** )
2295:Middlewares/Third_Party/FatFs/src/ff.c **** {
2296:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2297:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2298:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2299:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n, nlen, nent;
2300:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE sn[12], sum;
2301:Middlewares/Third_Party/FatFs/src/ff.c **** 
2302:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 59


2303:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2304:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
2305:Middlewares/Third_Party/FatFs/src/ff.c **** 
2306:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2307:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2308:Middlewares/Third_Party/FatFs/src/ff.c **** 		DIR dj;
2309:Middlewares/Third_Party/FatFs/src/ff.c **** 
2310:Middlewares/Third_Party/FatFs/src/ff.c **** 		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2311:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_alloc(dp, nent);		/* Allocate entries */
2312:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2313:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
2314:Middlewares/Third_Party/FatFs/src/ff.c **** 
2315:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
2316:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
2317:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
2318:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2319:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if neede
2320:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2321:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
2322:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2323:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
2324:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2325:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
2326:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = store_xdir(&dj);							/* Store the object status */
2327:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
2328:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2329:Middlewares/Third_Party/FatFs/src/ff.c **** 
2330:Middlewares/Third_Party/FatFs/src/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2331:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2332:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2333:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2334:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* On the FAT12/16/32 volume */
2335:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2336:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2337:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2338:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (n = 1; n < 100; n++) {
2339:Middlewares/Third_Party/FatFs/src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2340:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2341:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2342:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2343:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2344:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2345:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2346:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2347:Middlewares/Third_Party/FatFs/src/ff.c **** 
2348:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create an SFN with/without LFNs. */
2349:Middlewares/Third_Party/FatFs/src/ff.c **** 	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2350:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, nent);		/* Allocate entries */
2351:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
2352:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
2353:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
2354:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2355:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {					/* Store LFN entries in bottom first */
2356:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, dp->sect);
2357:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
2358:Middlewares/Third_Party/FatFs/src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
2359:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
ARM GAS  /tmp/ccBYTIZg.s 			page 60


2360:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2361:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (res == FR_OK && --nent);
2362:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2364:Middlewares/Third_Party/FatFs/src/ff.c **** 
2365:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* Non LFN configuration */
2366:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
2367:Middlewares/Third_Party/FatFs/src/ff.c **** 
2368:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2369:Middlewares/Third_Party/FatFs/src/ff.c **** 
2370:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Set SFN entry */
2371:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2372:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
2373:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
2374:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
2375:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
2376:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2377:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2378:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2379:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
2380:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2381:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2382:Middlewares/Third_Party/FatFs/src/ff.c **** 
2383:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2384:Middlewares/Third_Party/FatFs/src/ff.c **** }
2385:Middlewares/Third_Party/FatFs/src/ff.c **** 
2386:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
2387:Middlewares/Third_Party/FatFs/src/ff.c **** 
2388:Middlewares/Third_Party/FatFs/src/ff.c **** 
2389:Middlewares/Third_Party/FatFs/src/ff.c **** 
2390:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE == 0
2391:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2392:Middlewares/Third_Party/FatFs/src/ff.c **** /* Remove an object from the directory                                   */
2393:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2394:Middlewares/Third_Party/FatFs/src/ff.c **** 
2395:Middlewares/Third_Party/FatFs/src/ff.c **** static
2396:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2397:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp				/* Directory object pointing the entry to be removed */
2398:Middlewares/Third_Party/FatFs/src/ff.c **** )
2399:Middlewares/Third_Party/FatFs/src/ff.c **** {
2400:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2401:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2402:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2403:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD last = dp->dptr;
2404:Middlewares/Third_Party/FatFs/src/ff.c **** 
2405:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2406:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2407:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
2408:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, dp->sect);
2409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2410:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Mark an entry 'deleted' */
2411:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2412:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;
2413:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* On the FAT12/16/32 volume */
2414:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->dir[DIR_Name] = DDEM;
2415:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2416:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
ARM GAS  /tmp/ccBYTIZg.s 			page 61


2417:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2418:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2419:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);
2420:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2421:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2422:Middlewares/Third_Party/FatFs/src/ff.c **** #else			/* Non LFN configuration */
2423:Middlewares/Third_Party/FatFs/src/ff.c **** 
2424:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = move_window(fs, dp->sect);
2425:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
2426:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->dir[DIR_Name] = DDEM;
2427:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
2428:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2429:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2430:Middlewares/Third_Party/FatFs/src/ff.c **** 
2431:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2432:Middlewares/Third_Party/FatFs/src/ff.c **** }
2433:Middlewares/Third_Party/FatFs/src/ff.c **** 
2434:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY && _FS_MINIMIZE == 0 */
2435:Middlewares/Third_Party/FatFs/src/ff.c **** 
2436:Middlewares/Third_Party/FatFs/src/ff.c **** 
2437:Middlewares/Third_Party/FatFs/src/ff.c **** 
2438:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
2439:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2440:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get file information from directory entry                             */
2441:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2442:Middlewares/Third_Party/FatFs/src/ff.c **** 
2443:Middlewares/Third_Party/FatFs/src/ff.c **** static
2444:Middlewares/Third_Party/FatFs/src/ff.c **** void get_fileinfo (		/* No return code */
2445:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2446:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno	 	/* Pointer to the file information to be filled */
2447:Middlewares/Third_Party/FatFs/src/ff.c **** )
2448:Middlewares/Third_Party/FatFs/src/ff.c **** {
 996              		.loc 1 2448 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              	.LVL125:
2449:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
2450:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c;
2451:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tm;
2452:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
2453:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w, lfv;
2454:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
2455:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2456:Middlewares/Third_Party/FatFs/src/ff.c **** 
2457:Middlewares/Third_Party/FatFs/src/ff.c **** 
2458:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[0] = 0;		/* Invaidate file info */
 1001              		.loc 1 2458 0
 1002 0000 0023     		movs	r3, #0
 1003 0002 4B72     		strb	r3, [r1, #9]
2459:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 1004              		.loc 1 2459 0
 1005 0004 C369     		ldr	r3, [r0, #28]
 1006 0006 73B3     		cbz	r3, .L111
2448:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j;
 1007              		.loc 1 2448 0
 1008 0008 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccBYTIZg.s 			page 62


 1009              	.LCFI14:
 1010              		.cfi_def_cfa_offset 16
 1011              		.cfi_offset 4, -16
 1012              		.cfi_offset 5, -12
 1013              		.cfi_offset 6, -8
 1014              		.cfi_offset 14, -4
 1015 000a 0024     		movs	r4, #0
 1016 000c 2346     		mov	r3, r4
 1017 000e 05E0     		b	.L104
 1018              	.LVL126:
 1019              	.L106:
2460:Middlewares/Third_Party/FatFs/src/ff.c **** 
2461:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2462:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2463:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2464:Middlewares/Third_Party/FatFs/src/ff.c **** 		get_xdir_info(fs->dirbuf, fno);
2465:Middlewares/Third_Party/FatFs/src/ff.c **** 		return;
2466:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
2467:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2468:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
2469:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2470:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = j = 0;
2471:Middlewares/Third_Party/FatFs/src/ff.c **** 			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
2472:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2473:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(w, 0);		/* Unicode -> OEM */
2474:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
2475:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
2476:Middlewares/Third_Party/FatFs/src/ff.c **** 					fno->fname[i++] = (char)(w >> 8);
2477:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2478:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2479:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
2480:Middlewares/Third_Party/FatFs/src/ff.c **** 				fno->fname[i++] = (TCHAR)w;
2481:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2482:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[i] = 0;	/* Terminate the LFN */
2483:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2484:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2485:Middlewares/Third_Party/FatFs/src/ff.c **** 
2486:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = j = 0;
2487:Middlewares/Third_Party/FatFs/src/ff.c **** 	lfv = fno->fname[i];	/* LFN is exist if non-zero */
2488:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2489:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
2490:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2491:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2492:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) {						/* Insert a . if extension is exist */
2493:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!lfv) fno->fname[j] = '.';
2494:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->altname[j++] = '.';
2495:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2496:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
2497:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dp->dir[i])) {
2498:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = c << 8 | dp->dir[i++];
2499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2500:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
2501:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) c = '?';
2502:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2503:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->altname[j] = c;
2504:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!lfv) {
2505:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
ARM GAS  /tmp/ccBYTIZg.s 			page 63


2506:Middlewares/Third_Party/FatFs/src/ff.c **** 				c += 0x20;			/* To lower */
2507:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2508:Middlewares/Third_Party/FatFs/src/ff.c **** 			fno->fname[j] = c;
2509:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2510:Middlewares/Third_Party/FatFs/src/ff.c **** 		j++;
2511:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2512:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!lfv) {
2513:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j] = 0;
2514:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is ex
2515:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2516:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->altname[j] = 0;	/* Terminate the SFN */
2517:Middlewares/Third_Party/FatFs/src/ff.c **** 
2518:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* Non-LFN configuration */
2519:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = j = 0;
2520:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (i < 11) {		/* Copy name body and extension */
2521:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
2522:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
2523:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
2524:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 1020              		.loc 1 2524 0
 1021 0010 092A     		cmp	r2, #9
 1022 0012 0ED0     		beq	.L114
 1023              	.L107:
 1024              	.LVL127:
2525:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j++] = c;
 1025              		.loc 1 2525 0
 1026 0014 0D19     		adds	r5, r1, r4
 1027 0016 6B72     		strb	r3, [r5, #9]
 1028 0018 0134     		adds	r4, r4, #1
 1029              	.LVL128:
 1030              	.L105:
 1031 001a 1346     		mov	r3, r2
 1032              	.LVL129:
 1033              	.L104:
2520:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (TCHAR)dp->dir[i++];
 1034              		.loc 1 2520 0
 1035 001c 0A2B     		cmp	r3, #10
 1036 001e 0DD8     		bhi	.L115
2521:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == ' ') continue;				/* Skip padding spaces */
 1037              		.loc 1 2521 0
 1038 0020 056A     		ldr	r5, [r0, #32]
 1039 0022 5A1C     		adds	r2, r3, #1
 1040              	.LVL130:
 1041 0024 EB5C     		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1042              	.LVL131:
2522:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 1043              		.loc 1 2522 0
 1044 0026 202B     		cmp	r3, #32
 1045 0028 F7D0     		beq	.L105
2523:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 1046              		.loc 1 2523 0
 1047 002a 052B     		cmp	r3, #5
 1048 002c F0D1     		bne	.L106
 1049 002e E523     		movs	r3, #229
 1050              	.LVL132:
 1051 0030 EEE7     		b	.L106
 1052              	.LVL133:
ARM GAS  /tmp/ccBYTIZg.s 			page 64


 1053              	.L114:
2524:Middlewares/Third_Party/FatFs/src/ff.c **** 		fno->fname[j++] = c;
 1054              		.loc 1 2524 0 discriminator 1
 1055 0032 0D19     		adds	r5, r1, r4
 1056 0034 2E26     		movs	r6, #46
 1057 0036 6E72     		strb	r6, [r5, #9]
 1058 0038 0134     		adds	r4, r4, #1
 1059              	.LVL134:
 1060 003a EBE7     		b	.L107
 1061              	.LVL135:
 1062              	.L115:
 1063 003c 0E46     		mov	r6, r1
 1064 003e 0546     		mov	r5, r0
2526:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2527:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fname[j] = 0;
 1065              		.loc 1 2527 0
 1066 0040 0C44     		add	r4, r4, r1
 1067              	.LVL136:
 1068 0042 0023     		movs	r3, #0
 1069              	.LVL137:
 1070 0044 6372     		strb	r3, [r4, #9]
2528:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2529:Middlewares/Third_Party/FatFs/src/ff.c **** 
2530:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 1071              		.loc 1 2530 0
 1072 0046 036A     		ldr	r3, [r0, #32]
 1073 0048 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 1074 004a 0B72     		strb	r3, [r1, #8]
2531:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 1075              		.loc 1 2531 0
 1076 004c 006A     		ldr	r0, [r0, #32]
 1077              	.LVL138:
 1078 004e 1C30     		adds	r0, r0, #28
 1079 0050 FFF7FEFF 		bl	ld_dword
 1080              	.LVL139:
 1081 0054 3060     		str	r0, [r6]
2532:Middlewares/Third_Party/FatFs/src/ff.c **** 	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 1082              		.loc 1 2532 0
 1083 0056 286A     		ldr	r0, [r5, #32]
 1084 0058 1630     		adds	r0, r0, #22
 1085 005a FFF7FEFF 		bl	ld_dword
 1086              	.LVL140:
2533:Middlewares/Third_Party/FatFs/src/ff.c **** 	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 1087              		.loc 1 2533 0
 1088 005e F080     		strh	r0, [r6, #6]	@ movhi
 1089 0060 000C     		lsrs	r0, r0, #16
 1090              	.LVL141:
 1091 0062 B080     		strh	r0, [r6, #4]	@ movhi
 1092 0064 70BD     		pop	{r4, r5, r6, pc}
 1093              	.LVL142:
 1094              	.L111:
 1095              	.LCFI15:
 1096              		.cfi_def_cfa_offset 0
 1097              		.cfi_restore 4
 1098              		.cfi_restore 5
 1099              		.cfi_restore 6
 1100              		.cfi_restore 14
ARM GAS  /tmp/ccBYTIZg.s 			page 65


 1101 0066 7047     		bx	lr
 1102              		.cfi_endproc
 1103              	.LFE172:
 1105              		.section	.text.create_name,"ax",%progbits
 1106              		.align	1
 1107              		.syntax unified
 1108              		.thumb
 1109              		.thumb_func
 1110              		.fpu fpv5-d16
 1112              	create_name:
 1113              	.LFB173:
2534:Middlewares/Third_Party/FatFs/src/ff.c **** }
2535:Middlewares/Third_Party/FatFs/src/ff.c **** 
2536:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
2537:Middlewares/Third_Party/FatFs/src/ff.c **** 
2538:Middlewares/Third_Party/FatFs/src/ff.c **** 
2539:Middlewares/Third_Party/FatFs/src/ff.c **** 
2540:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FIND && _FS_MINIMIZE <= 1
2541:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2542:Middlewares/Third_Party/FatFs/src/ff.c **** /* Pattern matching                                                      */
2543:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2544:Middlewares/Third_Party/FatFs/src/ff.c **** 
2545:Middlewares/Third_Party/FatFs/src/ff.c **** static
2546:Middlewares/Third_Party/FatFs/src/ff.c **** WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
2547:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
2548:Middlewares/Third_Party/FatFs/src/ff.c **** )
2549:Middlewares/Third_Party/FatFs/src/ff.c **** {
2550:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2551:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR chr;
2552:Middlewares/Third_Party/FatFs/src/ff.c **** 
2553:Middlewares/Third_Party/FatFs/src/ff.c **** 	chr = (BYTE)*(*ptr)++;					/* Get a byte */
2554:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
2555:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2556:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2557:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2558:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
2559:Middlewares/Third_Party/FatFs/src/ff.c **** 		chr = chr << 8 | (BYTE)*(*ptr)++;
2560:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2561:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2562:Middlewares/Third_Party/FatFs/src/ff.c **** 	return chr;
2563:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2564:Middlewares/Third_Party/FatFs/src/ff.c **** 	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
2565:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2566:Middlewares/Third_Party/FatFs/src/ff.c **** }
2567:Middlewares/Third_Party/FatFs/src/ff.c **** 
2568:Middlewares/Third_Party/FatFs/src/ff.c **** 
2569:Middlewares/Third_Party/FatFs/src/ff.c **** static
2570:Middlewares/Third_Party/FatFs/src/ff.c **** int pattern_matching (	/* 0:not matched, 1:matched */
2571:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2572:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2573:Middlewares/Third_Party/FatFs/src/ff.c **** 	int skip,			/* Number of pre-skip chars (number of ?s) */
2574:Middlewares/Third_Party/FatFs/src/ff.c **** 	int inf				/* Infinite search (* specified) */
2575:Middlewares/Third_Party/FatFs/src/ff.c **** )
2576:Middlewares/Third_Party/FatFs/src/ff.c **** {
2577:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *pp, *np;
2578:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR pc, nc;
2579:Middlewares/Third_Party/FatFs/src/ff.c **** 	int nm, nx;
ARM GAS  /tmp/ccBYTIZg.s 			page 66


2580:Middlewares/Third_Party/FatFs/src/ff.c **** 
2581:Middlewares/Third_Party/FatFs/src/ff.c **** 
2582:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (skip--) {				/* Pre-skip name chars */
2583:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2584:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2585:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!*pat && inf) return 1;		/* (short circuit) */
2586:Middlewares/Third_Party/FatFs/src/ff.c **** 
2587:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
2588:Middlewares/Third_Party/FatFs/src/ff.c **** 		pp = pat; np = nam;			/* Top of pattern and name to match */
2589:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2590:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
2591:Middlewares/Third_Party/FatFs/src/ff.c **** 				nm = nx = 0;
2592:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {				/* Analyze the wildcard chars */
2593:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (*pp++ == '?') nm++; else nx = 1;
2594:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (*pp == '?' || *pp == '*');
2595:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildc
2596:Middlewares/Third_Party/FatFs/src/ff.c **** 				nc = *np; break;	/* Branch mismatched */
2597:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2598:Middlewares/Third_Party/FatFs/src/ff.c **** 			pc = get_achar(&pp);	/* Get a pattern char */
2599:Middlewares/Third_Party/FatFs/src/ff.c **** 			nc = get_achar(&np);	/* Get a name char */
2600:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (pc != nc) break;	/* Branch mismatched? */
2601:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2602:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2603:Middlewares/Third_Party/FatFs/src/ff.c **** 		get_achar(&nam);			/* nam++ */
2604:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
2605:Middlewares/Third_Party/FatFs/src/ff.c **** 
2606:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 0;
2607:Middlewares/Third_Party/FatFs/src/ff.c **** }
2608:Middlewares/Third_Party/FatFs/src/ff.c **** 
2609:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
2610:Middlewares/Third_Party/FatFs/src/ff.c **** 
2611:Middlewares/Third_Party/FatFs/src/ff.c **** 
2612:Middlewares/Third_Party/FatFs/src/ff.c **** 
2613:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2614:Middlewares/Third_Party/FatFs/src/ff.c **** /* Pick a top segment and create the object name in directory form       */
2615:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2616:Middlewares/Third_Party/FatFs/src/ff.c **** 
2617:Middlewares/Third_Party/FatFs/src/ff.c **** static
2618:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2619:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2620:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
2621:Middlewares/Third_Party/FatFs/src/ff.c **** )
2622:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1114              		.loc 1 2622 0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 0
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118              	.LVL143:
 1119 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1120              	.LCFI16:
 1121              		.cfi_def_cfa_offset 40
 1122              		.cfi_offset 3, -40
 1123              		.cfi_offset 4, -36
 1124              		.cfi_offset 5, -32
 1125              		.cfi_offset 6, -28
 1126              		.cfi_offset 7, -24
 1127              		.cfi_offset 8, -20
ARM GAS  /tmp/ccBYTIZg.s 			page 67


 1128              		.cfi_offset 9, -16
 1129              		.cfi_offset 10, -12
 1130              		.cfi_offset 11, -8
 1131              		.cfi_offset 14, -4
 1132 0004 8346     		mov	fp, r0
 1133 0006 8A46     		mov	r10, r1
2623:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
2624:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE b, cf;
2625:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w, *lfn;
2626:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, ni, si, di;
2627:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *p;
2628:Middlewares/Third_Party/FatFs/src/ff.c **** 
2629:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create LFN in Unicode */
2630:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
2631:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2632:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = p[si++];					/* Get a character */
2633:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w < ' ') break;				/* Break if end of the path name */
2634:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == '/' || w == '\\') {	/* Break if a separator is found */
2635:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
2636:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
2637:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2638:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2639:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
2640:Middlewares/Third_Party/FatFs/src/ff.c **** 		w &= 0xFF;
2641:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
2642:Middlewares/Third_Party/FatFs/src/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
2643:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
2644:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
2645:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2646:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
2647:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
2648:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2649:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters
2650:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode character */
2651:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2652:Middlewares/Third_Party/FatFs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
2653:Middlewares/Third_Party/FatFs/src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2654:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2655:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2656:Middlewares/Third_Party/FatFs/src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2657:Middlewares/Third_Party/FatFs/src/ff.c **** 		lfn[di] = 0;
2658:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
2659:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2660:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2661:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2662:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2663:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2664:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2665:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = lfn[di - 1];
2666:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w != ' ' && w != '.') break;
2667:Middlewares/Third_Party/FatFs/src/ff.c **** 		di--;
2668:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2669:Middlewares/Third_Party/FatFs/src/ff.c **** 	lfn[di] = 0;						/* LFN is created */
2670:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
2671:Middlewares/Third_Party/FatFs/src/ff.c **** 
2672:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create SFN in directory form */
2673:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(dp->fn, ' ', 11);
ARM GAS  /tmp/ccBYTIZg.s 			page 68


2674:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
2675:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
2676:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
2677:Middlewares/Third_Party/FatFs/src/ff.c **** 
2678:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = b = 0; ni = 8;
2679:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2680:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = lfn[si++];					/* Get an LFN character */
2681:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
2682:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
2683:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
2684:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2685:Middlewares/Third_Party/FatFs/src/ff.c **** 
2686:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
2687:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11) {				/* Long extension */
2688:Middlewares/Third_Party/FatFs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
2689:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2690:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
2691:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (si > di) break;			/* No extension */
2692:Middlewares/Third_Party/FatFs/src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
2693:Middlewares/Third_Party/FatFs/src/ff.c **** 			b <<= 2; continue;
2694:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2695:Middlewares/Third_Party/FatFs/src/ff.c **** 
2696:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (w >= 0x80) {				/* Non ASCII character */
2697:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2698:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
2699:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
2700:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2701:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
2702:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2703:Middlewares/Third_Party/FatFs/src/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
2704:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2705:Middlewares/Third_Party/FatFs/src/ff.c **** 
2706:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Is this DBC? (always false at SBCS cfg) */
2707:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i >= ni - 1) {
2708:Middlewares/Third_Party/FatFs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
2709:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2710:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->fn[i++] = (BYTE)(w >> 8);
2711:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* SBC */
2712:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
2713:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2714:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
2715:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
2716:Middlewares/Third_Party/FatFs/src/ff.c **** 					b |= 2;
2717:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
2718:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
2719:Middlewares/Third_Party/FatFs/src/ff.c **** 						b |= 1; w -= 0x20;
2720:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2721:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2722:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2723:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2724:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[i++] = (BYTE)w;
2725:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2726:Middlewares/Third_Party/FatFs/src/ff.c **** 
2727:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2728:Middlewares/Third_Party/FatFs/src/ff.c **** 
2729:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ni == 8) b <<= 2;
2730:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are com
ARM GAS  /tmp/ccBYTIZg.s 			page 69


2731:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are c
2732:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
2733:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
2734:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2735:Middlewares/Third_Party/FatFs/src/ff.c **** 
2736:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created */
2737:Middlewares/Third_Party/FatFs/src/ff.c **** 
2738:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2739:Middlewares/Third_Party/FatFs/src/ff.c **** 
2740:Middlewares/Third_Party/FatFs/src/ff.c **** 
2741:Middlewares/Third_Party/FatFs/src/ff.c **** #else	/* _USE_LFN != 0 : Non-LFN configuration */
2742:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c, d, *sfn;
2743:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT ni, si, i;
2744:Middlewares/Third_Party/FatFs/src/ff.c **** 	const char *p;
2745:Middlewares/Third_Party/FatFs/src/ff.c **** 
2746:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create file name in directory form */
2747:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = *path; sfn = dp->fn;
 1134              		.loc 1 2747 0
 1135 0008 D1F80080 		ldr	r8, [r1]
 1136              	.LVL144:
 1137 000c 00F12409 		add	r9, r0, #36
 1138              	.LVL145:
2748:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(sfn, ' ', 11);
 1139              		.loc 1 2748 0
 1140 0010 0B22     		movs	r2, #11
 1141 0012 2021     		movs	r1, #32
 1142              	.LVL146:
 1143 0014 4846     		mov	r0, r9
 1144              	.LVL147:
 1145 0016 FFF7FEFF 		bl	mem_set
 1146              	.LVL148:
2749:Middlewares/Third_Party/FatFs/src/ff.c **** 	si = i = 0; ni = 8;
 1147              		.loc 1 2749 0
 1148 001a 0025     		movs	r5, #0
 1149 001c 2B46     		mov	r3, r5
 1150 001e 0827     		movs	r7, #8
 1151 0020 25E0     		b	.L117
 1152              	.LVL149:
 1153              	.L121:
2750:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2751:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
2752:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2753:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = (BYTE)p[si++];
2754:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c != '.' || si >= 3) break;
2755:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2756:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2757:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
2758:Middlewares/Third_Party/FatFs/src/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
2759:Middlewares/Third_Party/FatFs/src/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
2760:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_OK;
2761:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2762:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2763:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
2764:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = (BYTE)p[si++];
2765:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
2766:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
2767:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
ARM GAS  /tmp/ccBYTIZg.s 			page 70


 1154              		.loc 1 2767 0 discriminator 2
 1155 0022 0136     		adds	r6, r6, #1
 1156              	.LVL150:
 1157              	.L119:
 1158              		.loc 1 2767 0 is_stmt 0 discriminator 1
 1159 0024 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 1160 0028 5C2B     		cmp	r3, #92
 1161 002a 18BF     		it	ne
 1162 002c 2F2B     		cmpne	r3, #47
 1163 002e F8D0     		beq	.L121
 1164              	.L118:
2768:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
2769:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2770:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or over size? */
2771:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
2772:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
2773:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
2774:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2775:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c >= 0x80) {				/* Extended character? */
2776:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
2777:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
2778:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2779:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_DF1S
2780:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
2781:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2782:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2783:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2784:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
2785:Middlewares/Third_Party/FatFs/src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
2786:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
2787:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2788:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = d;
2789:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* SBC */
2790:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
2791:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
2792:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
2793:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2794:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2795:Middlewares/Third_Party/FatFs/src/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
 1165              		.loc 1 2795 0 is_stmt 1
 1166 0030 4644     		add	r6, r6, r8
 1167              	.LVL151:
 1168 0032 CAF80060 		str	r6, [r10]
2796:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 1169              		.loc 1 2796 0
 1170 0036 002D     		cmp	r5, #0
 1171 0038 37D1     		bne	.L135
 1172 003a 0620     		movs	r0, #6
2797:Middlewares/Third_Party/FatFs/src/ff.c **** 
2798:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
2799:Middlewares/Third_Party/FatFs/src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
2800:Middlewares/Third_Party/FatFs/src/ff.c **** 
2801:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
2802:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_LFN != 0 */
2803:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1173              		.loc 1 2803 0
 1174 003c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccBYTIZg.s 			page 71


 1175              	.LVL152:
 1176              	.L137:
2772:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
 1177              		.loc 1 2772 0
 1178 0040 0825     		movs	r5, #8
 1179              	.LVL153:
 1180 0042 0B27     		movs	r7, #11
 1181 0044 12E0     		b	.L124
 1182              	.LVL154:
 1183              	.L122:
2775:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
 1184              		.loc 1 2775 0
 1185 0046 14F0800F 		tst	r4, #128
 1186 004a 2AD1     		bne	.L136
 1187              	.L125:
2790:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 1188              		.loc 1 2790 0
 1189 004c 2146     		mov	r1, r4
 1190 004e 2148     		ldr	r0, .L139
 1191 0050 FFF7FEFF 		bl	chk_chr
 1192              	.LVL155:
 1193 0054 0028     		cmp	r0, #0
 1194 0056 3AD1     		bne	.L130
2791:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
 1195              		.loc 1 2791 0
 1196 0058 A4F16103 		sub	r3, r4, #97
 1197 005c DBB2     		uxtb	r3, r3
 1198 005e 192B     		cmp	r3, #25
 1199 0060 01D8     		bhi	.L126
2791:Middlewares/Third_Party/FatFs/src/ff.c **** 			sfn[i++] = c;
 1200              		.loc 1 2791 0 is_stmt 0 discriminator 1
 1201 0062 203C     		subs	r4, r4, #32
 1202              	.LVL156:
 1203 0064 E4B2     		uxtb	r4, r4
 1204              	.LVL157:
 1205              	.L126:
2792:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1206              		.loc 1 2792 0 is_stmt 1
 1207 0066 09F80540 		strb	r4, [r9, r5]
 1208 006a 0135     		adds	r5, r5, #1
 1209              	.LVL158:
 1210              	.L124:
 1211 006c 3346     		mov	r3, r6
 1212              	.LVL159:
 1213              	.L117:
2764:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 1214              		.loc 1 2764 0
 1215 006e 5E1C     		adds	r6, r3, #1
 1216              	.LVL160:
 1217 0070 18F80340 		ldrb	r4, [r8, r3]	@ zero_extendqisi2
 1218              	.LVL161:
2765:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 1219              		.loc 1 2765 0
 1220 0074 202C     		cmp	r4, #32
 1221 0076 DBD9     		bls	.L118
2766:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 1222              		.loc 1 2766 0
ARM GAS  /tmp/ccBYTIZg.s 			page 72


 1223 0078 5C2C     		cmp	r4, #92
 1224 007a 18BF     		it	ne
 1225 007c 2F2C     		cmpne	r4, #47
 1226 007e D1D0     		beq	.L119
2770:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 1227              		.loc 1 2770 0
 1228 0080 2E2C     		cmp	r4, #46
 1229 0082 18BF     		it	ne
 1230 0084 AF42     		cmpne	r7, r5
 1231 0086 DED8     		bhi	.L122
2771:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = 8; ni = 11;				/* Goto extension */
 1232              		.loc 1 2771 0
 1233 0088 2E3C     		subs	r4, r4, #46
 1234              	.LVL162:
 1235 008a 18BF     		it	ne
 1236 008c 0124     		movne	r4, #1
 1237              	.LVL163:
 1238 008e 0B2F     		cmp	r7, #11
 1239 0090 14BF     		ite	ne
 1240 0092 2746     		movne	r7, r4
 1241 0094 44F00107 		orreq	r7, r4, #1
 1242              	.LVL164:
 1243 0098 002F     		cmp	r7, #0
 1244 009a D1D0     		beq	.L137
 1245 009c 0620     		movs	r0, #6
 1246 009e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1247              	.LVL165:
 1248              	.L136:
2777:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 1249              		.loc 1 2777 0
 1250 00a2 803C     		subs	r4, r4, #128
 1251              	.LVL166:
 1252 00a4 0C4B     		ldr	r3, .L139+4
 1253 00a6 1C5D     		ldrb	r4, [r3, r4]	@ zero_extendqisi2
 1254              	.LVL167:
 1255 00a8 D0E7     		b	.L125
 1256              	.LVL168:
 1257              	.L135:
2798:Middlewares/Third_Party/FatFs/src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 1258              		.loc 1 2798 0
 1259 00aa 9BF82430 		ldrb	r3, [fp, #36]	@ zero_extendqisi2
 1260 00ae E52B     		cmp	r3, #229
 1261 00b0 07D0     		beq	.L138
 1262              	.L127:
2799:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1263              		.loc 1 2799 0
 1264 00b2 202C     		cmp	r4, #32
 1265 00b4 09D8     		bhi	.L132
 1266 00b6 0423     		movs	r3, #4
 1267              	.L128:
2799:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1268              		.loc 1 2799 0 is_stmt 0 discriminator 4
 1269 00b8 8BF82F30 		strb	r3, [fp, #47]
2801:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_LFN != 0 */
 1270              		.loc 1 2801 0 is_stmt 1 discriminator 4
 1271 00bc 0020     		movs	r0, #0
 1272 00be BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccBYTIZg.s 			page 73


 1273              	.LVL169:
 1274              	.L138:
2798:Middlewares/Third_Party/FatFs/src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 1275              		.loc 1 2798 0 discriminator 1
 1276 00c2 0523     		movs	r3, #5
 1277 00c4 8BF82430 		strb	r3, [fp, #36]
 1278 00c8 F3E7     		b	.L127
 1279              	.L132:
2799:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1280              		.loc 1 2799 0
 1281 00ca 0023     		movs	r3, #0
 1282 00cc F4E7     		b	.L128
 1283              	.LVL170:
 1284              	.L130:
2790:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 1285              		.loc 1 2790 0
 1286 00ce 0620     		movs	r0, #6
 1287 00d0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1288              	.LVL171:
 1289              	.L140:
 1290              		.align	2
 1291              	.L139:
 1292 00d4 00000000 		.word	.LC0
 1293 00d8 00000000 		.word	.LANCHOR1
 1294              		.cfi_endproc
 1295              	.LFE173:
 1297              		.section	.text.get_ldnumber,"ax",%progbits
 1298              		.align	1
 1299              		.syntax unified
 1300              		.thumb
 1301              		.thumb_func
 1302              		.fpu fpv5-d16
 1304              	get_ldnumber:
 1305              	.LFB175:
2804:Middlewares/Third_Party/FatFs/src/ff.c **** 
2805:Middlewares/Third_Party/FatFs/src/ff.c **** 
2806:Middlewares/Third_Party/FatFs/src/ff.c **** 
2807:Middlewares/Third_Party/FatFs/src/ff.c **** 
2808:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2809:Middlewares/Third_Party/FatFs/src/ff.c **** /* Follow a file path                                                    */
2810:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2811:Middlewares/Third_Party/FatFs/src/ff.c **** 
2812:Middlewares/Third_Party/FatFs/src/ff.c **** static
2813:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
2814:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Directory object to return last directory and found object */
2815:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Full-path string to find a file or directory */
2816:Middlewares/Third_Party/FatFs/src/ff.c **** )
2817:Middlewares/Third_Party/FatFs/src/ff.c **** {
2818:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
2819:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE ns;
2820:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID *obj = &dp->obj;
2821:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = obj->fs;
2822:Middlewares/Third_Party/FatFs/src/ff.c **** 
2823:Middlewares/Third_Party/FatFs/src/ff.c **** 
2824:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2825:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
2826:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = fs->cdir;				/* Start from current directory */
ARM GAS  /tmp/ccBYTIZg.s 			page 74


2827:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
2828:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2829:Middlewares/Third_Party/FatFs/src/ff.c **** 	{										/* With heading separator */
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
2831:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
2832:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2833:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2834:Middlewares/Third_Party/FatFs/src/ff.c **** 	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
2835:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
2836:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT && obj->sclust) {	/* Retrieve the sub-directory status if needed */
2837:Middlewares/Third_Party/FatFs/src/ff.c **** 		DIR dj;
2838:Middlewares/Third_Party/FatFs/src/ff.c **** 
2839:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_scl = fs->cdc_scl;
2840:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_size = fs->cdc_size;
2841:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->c_ofs = fs->cdc_ofs;
2842:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = load_obj_dir(&dj, obj);
2843:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
2844:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
2845:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
2846:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2847:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2848:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2849:Middlewares/Third_Party/FatFs/src/ff.c **** 
2850:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
2851:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
2852:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, 0);
2853:Middlewares/Third_Party/FatFs/src/ff.c **** 
2854:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {								/* Follow path */
2855:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
2857:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
2859:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
2860:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
2861:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
2862:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
2863:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
2864:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
2865:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_OK;
2866:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {							/* Could not find the object */
2867:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
2868:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
2869:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2870:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
2871:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2872:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
2873:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get into the sub-directory */
2874:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
2875:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NO_PATH; break;
2876:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2877:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2878:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
2879:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_scl = obj->sclust;
2880:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
2881:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->c_ofs = dp->blk_ofs;
2882:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
2883:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
ARM GAS  /tmp/ccBYTIZg.s 			page 75


2884:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
2885:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
2886:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2887:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
2888:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
2889:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2890:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2891:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2892:Middlewares/Third_Party/FatFs/src/ff.c **** 
2893:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
2894:Middlewares/Third_Party/FatFs/src/ff.c **** }
2895:Middlewares/Third_Party/FatFs/src/ff.c **** 
2896:Middlewares/Third_Party/FatFs/src/ff.c **** 
2897:Middlewares/Third_Party/FatFs/src/ff.c **** 
2898:Middlewares/Third_Party/FatFs/src/ff.c **** 
2899:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2900:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get logical drive number from path name                               */
2901:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2902:Middlewares/Third_Party/FatFs/src/ff.c **** 
2903:Middlewares/Third_Party/FatFs/src/ff.c **** static
2904:Middlewares/Third_Party/FatFs/src/ff.c **** int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
2905:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path	/* Pointer to pointer to the path name */
2906:Middlewares/Third_Party/FatFs/src/ff.c **** )
2907:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1306              		.loc 1 2907 0
 1307              		.cfi_startproc
 1308              		@ args = 0, pretend = 0, frame = 0
 1309              		@ frame_needed = 0, uses_anonymous_args = 0
 1310              		@ link register save eliminated.
 1311              	.LVL172:
2908:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *tp, *tt;
2909:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
2910:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol = -1;
2911:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
2912:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const char* const volid[] = {_VOLUME_STRS};
2913:Middlewares/Third_Party/FatFs/src/ff.c **** 	const char *sp;
2914:Middlewares/Third_Party/FatFs/src/ff.c **** 	char c;
2915:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR tc;
2916:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2917:Middlewares/Third_Party/FatFs/src/ff.c **** 
2918:Middlewares/Third_Party/FatFs/src/ff.c **** 
2919:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (*path) {	/* If the pointer is not a null */
 1312              		.loc 1 2919 0
 1313 0000 0168     		ldr	r1, [r0]
 1314 0002 09B1     		cbz	r1, .L153
 1315 0004 0A46     		mov	r2, r1
 1316 0006 03E0     		b	.L142
 1317              	.L153:
2910:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 1318              		.loc 1 2910 0
 1319 0008 4FF0FF33 		mov	r3, #-1
 1320 000c 08E0     		b	.L150
 1321              	.LVL173:
 1322              	.L144:
2920:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the pa
 1323              		.loc 1 2920 0 discriminator 3
 1324 000e 0132     		adds	r2, r2, #1
ARM GAS  /tmp/ccBYTIZg.s 			page 76


 1325              	.LVL174:
 1326              	.L142:
 1327              		.loc 1 2920 0 is_stmt 0 discriminator 1
 1328 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 1329 0012 3A2B     		cmp	r3, #58
 1330 0014 18BF     		it	ne
 1331 0016 202B     		cmpne	r3, #32
 1332 0018 F9D8     		bhi	.L144
2921:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (*tt == ':') {	/* If a ':' is exist in the path name */
 1333              		.loc 1 2921 0 is_stmt 1
 1334 001a 3A2B     		cmp	r3, #58
 1335 001c 02D0     		beq	.L154
2922:Middlewares/Third_Party/FatFs/src/ff.c **** 			tp = *path;
2923:Middlewares/Third_Party/FatFs/src/ff.c **** 			i = *tp++ - '0';
2924:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
2925:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2926:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
2927:Middlewares/Third_Party/FatFs/src/ff.c **** 					*path = ++tt;
2928:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2929:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2930:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID
2931:Middlewares/Third_Party/FatFs/src/ff.c **** 			 else {	/* No numeric drive number, find string drive id */
2932:Middlewares/Third_Party/FatFs/src/ff.c **** 				i = 0; tt++;
2933:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
2934:Middlewares/Third_Party/FatFs/src/ff.c **** 					sp = volid[i]; tp = *path;
2935:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {	/* Compare a string drive id with path name */
2936:Middlewares/Third_Party/FatFs/src/ff.c **** 						c = *sp++; tc = *tp++;
2937:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (IsLower(tc)) tc -= 0x20;
2938:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (c && (TCHAR)c == tc);
2939:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
2940:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
2941:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
2942:Middlewares/Third_Party/FatFs/src/ff.c **** 					*path = tt;
2943:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
2944:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
2945:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2946:Middlewares/Third_Party/FatFs/src/ff.c **** 			return vol;
2947:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
2948:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0 && _VOLUMES >= 2
2949:Middlewares/Third_Party/FatFs/src/ff.c **** 		vol = CurrVol;	/* Current drive */
2950:Middlewares/Third_Party/FatFs/src/ff.c **** #else
2951:Middlewares/Third_Party/FatFs/src/ff.c **** 		vol = 0;		/* Drive 0 */
 1336              		.loc 1 2951 0
 1337 001e 0023     		movs	r3, #0
 1338              	.LVL175:
 1339              	.L150:
2952:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2953:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2954:Middlewares/Third_Party/FatFs/src/ff.c **** 	return vol;
2955:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1340              		.loc 1 2955 0
 1341 0020 1846     		mov	r0, r3
 1342              	.LVL176:
 1343 0022 7047     		bx	lr
 1344              	.LVL177:
 1345              	.L154:
2907:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *tp, *tt;
ARM GAS  /tmp/ccBYTIZg.s 			page 77


 1346              		.loc 1 2907 0
 1347 0024 10B4     		push	{r4}
 1348              	.LCFI17:
 1349              		.cfi_def_cfa_offset 4
 1350              		.cfi_offset 4, -4
 1351              	.LVL178:
2923:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 1352              		.loc 1 2923 0
 1353 0026 4C1C     		adds	r4, r1, #1
 1354              	.LVL179:
 1355 0028 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 1356 002a 303B     		subs	r3, r3, #48
 1357              	.LVL180:
2924:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 1358              		.loc 1 2924 0
 1359 002c 092B     		cmp	r3, #9
 1360 002e 98BF     		it	ls
 1361 0030 A242     		cmpls	r2, r4
 1362 0032 06D1     		bne	.L147
2925:Middlewares/Third_Party/FatFs/src/ff.c **** 					vol = (int)i;
 1363              		.loc 1 2925 0
 1364 0034 43B9     		cbnz	r3, .L148
 1365              	.LVL181:
2927:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 1366              		.loc 1 2927 0
 1367 0036 0132     		adds	r2, r2, #1
 1368              	.LVL182:
 1369 0038 0260     		str	r2, [r0]
 1370              	.LVL183:
 1371              	.L141:
 1372              		.loc 1 2955 0
 1373 003a 1846     		mov	r0, r3
 1374              	.LVL184:
 1375 003c 5DF8044B 		ldr	r4, [sp], #4
 1376              	.LCFI18:
 1377              		.cfi_remember_state
 1378              		.cfi_restore 4
 1379              		.cfi_def_cfa_offset 0
 1380              	.LVL185:
 1381 0040 7047     		bx	lr
 1382              	.LVL186:
 1383              	.L147:
 1384              	.LCFI19:
 1385              		.cfi_restore_state
2910:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STR_VOLUME_ID		/* Find string drive id */
 1386              		.loc 1 2910 0
 1387 0042 4FF0FF33 		mov	r3, #-1
 1388              	.LVL187:
 1389 0046 F8E7     		b	.L141
 1390              	.LVL188:
 1391              	.L148:
 1392 0048 4FF0FF33 		mov	r3, #-1
 1393              	.LVL189:
 1394 004c F5E7     		b	.L141
 1395              		.cfi_endproc
 1396              	.LFE175:
 1398              		.section	.text.putc_init,"ax",%progbits
ARM GAS  /tmp/ccBYTIZg.s 			page 78


 1399              		.align	1
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1403              		.fpu fpv5-d16
 1405              	putc_init:
 1406              	.LFB199:
2956:Middlewares/Third_Party/FatFs/src/ff.c **** 
2957:Middlewares/Third_Party/FatFs/src/ff.c **** 
2958:Middlewares/Third_Party/FatFs/src/ff.c **** 
2959:Middlewares/Third_Party/FatFs/src/ff.c **** 
2960:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2961:Middlewares/Third_Party/FatFs/src/ff.c **** /* Load a sector and check if it is an FAT boot sector                   */
2962:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2963:Middlewares/Third_Party/FatFs/src/ff.c **** 
2964:Middlewares/Third_Party/FatFs/src/ff.c **** static
2965:Middlewares/Third_Party/FatFs/src/ff.c **** BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
2966:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,	/* File system object */
2967:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
2968:Middlewares/Third_Party/FatFs/src/ff.c **** )
2969:Middlewares/Third_Party/FatFs/src/ff.c **** {
2970:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
2972:Middlewares/Third_Party/FatFs/src/ff.c **** 
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed 
2974:Middlewares/Third_Party/FatFs/src/ff.c **** 
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
2977:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
2978:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
2979:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
2980:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
2981:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
2982:Middlewares/Third_Party/FatFs/src/ff.c **** 	return 2;
2983:Middlewares/Third_Party/FatFs/src/ff.c **** }
2984:Middlewares/Third_Party/FatFs/src/ff.c **** 
2985:Middlewares/Third_Party/FatFs/src/ff.c **** 
2986:Middlewares/Third_Party/FatFs/src/ff.c **** 
2987:Middlewares/Third_Party/FatFs/src/ff.c **** 
2988:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2989:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find logical drive and check if the volume is mounted                 */
2990:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
2991:Middlewares/Third_Party/FatFs/src/ff.c **** 
2992:Middlewares/Third_Party/FatFs/src/ff.c **** static
2993:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
2994:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
2995:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** rfs,		/* Pointer to pointer to the found file system object */
2996:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mode			/* !=0: Check write protection for write access */
2997:Middlewares/Third_Party/FatFs/src/ff.c **** )
2998:Middlewares/Third_Party/FatFs/src/ff.c **** {
2999:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, *pt;
3000:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3001:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
3002:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
3003:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD nrsv;
3004:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3005:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
ARM GAS  /tmp/ccBYTIZg.s 			page 79


3006:Middlewares/Third_Party/FatFs/src/ff.c **** 
3007:Middlewares/Third_Party/FatFs/src/ff.c **** 
3008:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3009:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = 0;
3010:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(path);
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3012:Middlewares/Third_Party/FatFs/src/ff.c **** 
3013:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check if the file system object is valid or not */
3014:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the file system object */
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
3016:Middlewares/Third_Party/FatFs/src/ff.c **** 
3017:Middlewares/Third_Party/FatFs/src/ff.c **** 	ENTER_FF(fs);						/* Lock the volume */
3018:Middlewares/Third_Party/FatFs/src/ff.c **** 	*rfs = fs;							/* Return pointer to the file system object */
3019:Middlewares/Third_Party/FatFs/src/ff.c **** 
3020:Middlewares/Third_Party/FatFs/src/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
3021:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
3022:Middlewares/Third_Party/FatFs/src/ff.c **** 		stat = disk_status(fs->drv);
3023:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
3025:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
3026:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
3028:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3029:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3030:Middlewares/Third_Party/FatFs/src/ff.c **** 
3031:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* The file system object is not valid. */
3032:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
3033:Middlewares/Third_Party/FatFs/src/ff.c **** 
3034:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
3035:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
3036:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
3037:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
3038:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
3039:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
3041:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
3042:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3043:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
3044:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3045:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3046:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3047:Middlewares/Third_Party/FatFs/src/ff.c **** 
3048:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
3049:Middlewares/Third_Party/FatFs/src/ff.c **** 	bsect = 0;
3050:Middlewares/Third_Party/FatFs/src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
3051:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
3053:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
3055:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3056:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
3057:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i) i--;
3058:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {							/* Find an FAT volume */
3059:Middlewares/Third_Party/FatFs/src/ff.c **** 			bsect = br[i];
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
3061:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
3062:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
ARM GAS  /tmp/ccBYTIZg.s 			page 80


3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
3065:Middlewares/Third_Party/FatFs/src/ff.c **** 
3066:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the file system object */
3067:Middlewares/Third_Party/FatFs/src/ff.c **** 
3068:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3069:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 1) {
3070:Middlewares/Third_Party/FatFs/src/ff.c **** 		QWORD maxlba;
3071:Middlewares/Third_Party/FatFs/src/ff.c **** 
3072:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3073:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3074:Middlewares/Third_Party/FatFs/src/ff.c **** 
3075:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Mu
3076:Middlewares/Third_Party/FatFs/src/ff.c **** 
3077:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3078:Middlewares/Third_Party/FatFs/src/ff.c **** 			return FR_NO_FILESYSTEM;
3079:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3080:Middlewares/Third_Party/FatFs/src/ff.c **** 
3081:Middlewares/Third_Party/FatFs/src/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3082:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
3083:Middlewares/Third_Party/FatFs/src/ff.c **** 
3084:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3085:Middlewares/Third_Party/FatFs/src/ff.c **** 
3086:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3087:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3088:Middlewares/Third_Party/FatFs/src/ff.c **** 
3089:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3090:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3091:Middlewares/Third_Party/FatFs/src/ff.c **** 
3092:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3093:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3094:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fatent = nclst + 2;
3095:Middlewares/Third_Party/FatFs/src/ff.c **** 
3096:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Boundaries and Limits */
3097:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;
3098:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3099:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3100:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3101:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3102:Middlewares/Third_Party/FatFs/src/ff.c **** 
3103:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Check if bitmap location is in assumption (at the first cluster) */
3104:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
3105:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < SS(fs); i += SZDIRE) {
3106:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? *
3107:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3108:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == SS(fs)) return FR_NO_FILESYSTEM;
3109:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3110:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3111:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3112:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3113:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
3114:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
3115:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
3116:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
3117:Middlewares/Third_Party/FatFs/src/ff.c **** 
3118:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
ARM GAS  /tmp/ccBYTIZg.s 			page 81


3120:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
3121:Middlewares/Third_Party/FatFs/src/ff.c **** 
3122:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
3124:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
3125:Middlewares/Third_Party/FatFs/src/ff.c **** 
3126:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
3128:Middlewares/Third_Party/FatFs/src/ff.c **** 
3129:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
3131:Middlewares/Third_Party/FatFs/src/ff.c **** 
3132:Middlewares/Third_Party/FatFs/src/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
3134:Middlewares/Third_Party/FatFs/src/ff.c **** 
3135:Middlewares/Third_Party/FatFs/src/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
3137:Middlewares/Third_Party/FatFs/src/ff.c **** 
3138:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Determine the FAT sub type */
3139:Middlewares/Third_Party/FatFs/src/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
3141:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
3143:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
3145:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
3146:Middlewares/Third_Party/FatFs/src/ff.c **** 
3147:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Boundaries and Limits */
3148:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
3149:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
3150:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
3151:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
3152:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
3155:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
3156:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
3157:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
3159:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
3160:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
3162:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
3164:Middlewares/Third_Party/FatFs/src/ff.c **** 
3165:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3166:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get FSINFO if available */
3167:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3168:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag = 0x80;
3169:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
3170:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
3171:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
3172:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
3173:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
3174:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
3175:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
3176:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
ARM GAS  /tmp/ccBYTIZg.s 			page 82


3177:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
3178:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3179:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 1) == 0
3180:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
3181:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3182:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 2) == 0
3183:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3184:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3185:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3186:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3187:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* (_FS_NOFSINFO & 3) != 3 */
3188:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* !_FS_READONLY */
3189:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3190:Middlewares/Third_Party/FatFs/src/ff.c **** 
3191:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
3192:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
3193:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
3194:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3195:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3196:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3197:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3198:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3199:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
3200:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
3201:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3202:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0			/* Clear file lock semaphores */
3203:Middlewares/Third_Party/FatFs/src/ff.c **** 	clear_lock(fs);
3204:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3205:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
3206:Middlewares/Third_Party/FatFs/src/ff.c **** }
3207:Middlewares/Third_Party/FatFs/src/ff.c **** 
3208:Middlewares/Third_Party/FatFs/src/ff.c **** 
3209:Middlewares/Third_Party/FatFs/src/ff.c **** 
3210:Middlewares/Third_Party/FatFs/src/ff.c **** 
3211:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3212:Middlewares/Third_Party/FatFs/src/ff.c **** /* Check if the file/directory object is valid or not                    */
3213:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3214:Middlewares/Third_Party/FatFs/src/ff.c **** 
3215:Middlewares/Third_Party/FatFs/src/ff.c **** static
3216:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3217:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
3218:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
3219:Middlewares/Third_Party/FatFs/src/ff.c **** )
3220:Middlewares/Third_Party/FatFs/src/ff.c **** {
3221:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
3222:Middlewares/Third_Party/FatFs/src/ff.c **** 
3223:Middlewares/Third_Party/FatFs/src/ff.c **** 
3224:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
3225:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
3226:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
3227:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialize
3228:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_OK;
3229:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
3230:Middlewares/Third_Party/FatFs/src/ff.c **** 				unlock_fs(obj->fs, FR_OK);
3231:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3232:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
3233:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_TIMEOUT;
ARM GAS  /tmp/ccBYTIZg.s 			page 83


3234:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3235:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3236:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized
3237:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
3238:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3239:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3240:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3241:Middlewares/Third_Party/FatFs/src/ff.c **** 	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
3242:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
3243:Middlewares/Third_Party/FatFs/src/ff.c **** }
3244:Middlewares/Third_Party/FatFs/src/ff.c **** 
3245:Middlewares/Third_Party/FatFs/src/ff.c **** 
3246:Middlewares/Third_Party/FatFs/src/ff.c **** 
3247:Middlewares/Third_Party/FatFs/src/ff.c **** 
3248:Middlewares/Third_Party/FatFs/src/ff.c **** /*---------------------------------------------------------------------------
3249:Middlewares/Third_Party/FatFs/src/ff.c **** 
3250:Middlewares/Third_Party/FatFs/src/ff.c ****    Public Functions (FatFs API)
3251:Middlewares/Third_Party/FatFs/src/ff.c **** 
3252:Middlewares/Third_Party/FatFs/src/ff.c **** ----------------------------------------------------------------------------*/
3253:Middlewares/Third_Party/FatFs/src/ff.c **** 
3254:Middlewares/Third_Party/FatFs/src/ff.c **** 
3255:Middlewares/Third_Party/FatFs/src/ff.c **** 
3256:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3257:Middlewares/Third_Party/FatFs/src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3258:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3259:Middlewares/Third_Party/FatFs/src/ff.c **** 
3260:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mount (
3261:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
3262:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3263:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3264:Middlewares/Third_Party/FatFs/src/ff.c **** )
3265:Middlewares/Third_Party/FatFs/src/ff.c **** {
3266:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *cfs;
3267:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3268:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3269:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR *rp = path;
3270:Middlewares/Third_Party/FatFs/src/ff.c **** 
3271:Middlewares/Third_Party/FatFs/src/ff.c **** 
3272:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3273:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&rp);
3274:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
3275:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
3276:Middlewares/Third_Party/FatFs/src/ff.c **** 
3277:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (cfs) {
3278:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3279:Middlewares/Third_Party/FatFs/src/ff.c **** 		clear_lock(cfs);
3280:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3281:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Discard sync object of the current volume */
3282:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3283:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3284:Middlewares/Third_Party/FatFs/src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
3285:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3286:Middlewares/Third_Party/FatFs/src/ff.c **** 
3287:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs) {
3288:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
3289:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
3290:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
ARM GAS  /tmp/ccBYTIZg.s 			page 84


3291:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3292:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3293:Middlewares/Third_Party/FatFs/src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
3294:Middlewares/Third_Party/FatFs/src/ff.c **** 
3295:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
3296:Middlewares/Third_Party/FatFs/src/ff.c **** 
3297:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
3298:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3299:Middlewares/Third_Party/FatFs/src/ff.c **** }
3300:Middlewares/Third_Party/FatFs/src/ff.c **** 
3301:Middlewares/Third_Party/FatFs/src/ff.c **** 
3302:Middlewares/Third_Party/FatFs/src/ff.c **** 
3303:Middlewares/Third_Party/FatFs/src/ff.c **** 
3304:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3305:Middlewares/Third_Party/FatFs/src/ff.c **** /* Open or Create a File                                                 */
3306:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3307:Middlewares/Third_Party/FatFs/src/ff.c **** 
3308:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_open (
3309:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3310:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3311:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3312:Middlewares/Third_Party/FatFs/src/ff.c **** )
3313:Middlewares/Third_Party/FatFs/src/ff.c **** {
3314:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3315:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3316:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3317:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3318:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dw, cl, bcs, clst, sc;
3319:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs;
3320:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3321:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3322:Middlewares/Third_Party/FatFs/src/ff.c **** 
3323:Middlewares/Third_Party/FatFs/src/ff.c **** 
3324:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
3325:Middlewares/Third_Party/FatFs/src/ff.c **** 
3326:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3327:Middlewares/Third_Party/FatFs/src/ff.c **** 	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_A
3328:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, mode);
3329:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3330:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3331:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3332:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3333:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
3334:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3335:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3336:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
3337:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3338:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3339:Middlewares/Third_Party/FatFs/src/ff.c **** 			else {
3340:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3341:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3342:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3343:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3344:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create or Open a file */
3345:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
3346:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
3347:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
ARM GAS  /tmp/ccBYTIZg.s 			page 85


3348:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3349:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
3350:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3351:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&dj);
3352:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3353:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3354:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
3355:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3356:Middlewares/Third_Party/FatFs/src/ff.c **** 			else {								/* Any object is already existing */
3357:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
3358:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;
3359:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3360:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
3361:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3362:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3363:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
3364:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
3365:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3366:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3367:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Get current allocation info */
3368:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.fs = fs;
3369:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
3370:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3371:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3372:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.n_frag = 0;
3373:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Initialize directory entry block */
3374:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
3375:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_CrtTime10] = 0;
3376:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
3377:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_ModTime10] = 0;
3378:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
3379:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
3380:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_qword(fs->dirbuf + XDIR_FileSize, 0);
3381:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
3382:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3383:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = store_xdir(&dj);
3384:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
3385:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3386:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3387:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3388:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
3389:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3390:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
3391:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean directory info */
3392:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
3393:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
3394:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
3395:Middlewares/Third_Party/FatFs/src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
3396:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
3397:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
3398:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
3399:Middlewares/Third_Party/FatFs/src/ff.c **** 
3400:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (cl) {							/* Remove the cluster chain if exist */
3401:Middlewares/Third_Party/FatFs/src/ff.c **** 						dw = fs->winsect;
3402:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
3403:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
3404:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, dw);
ARM GAS  /tmp/ccBYTIZg.s 			page 86


3405:Middlewares/Third_Party/FatFs/src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
3406:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
3407:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3408:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3409:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3411:Middlewares/Third_Party/FatFs/src/ff.c **** 		else {	/* Open an existing file */
3412:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Following succeeded */
3413:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3414:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
3415:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3416:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
3417:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
3418:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3419:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3420:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3421:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3422:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3423:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
3424:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_MODIFIED;
3425:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
3426:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_ptr = dj.dir;
3427:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3428:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
3429:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
3430:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3431:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3432:Middlewares/Third_Party/FatFs/src/ff.c **** #else		/* R/O configuration */
3433:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3434:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
3435:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
3436:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
3437:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
3438:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
3439:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3440:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3441:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3442:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3443:Middlewares/Third_Party/FatFs/src/ff.c **** 
3444:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3445:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3446:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3447:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3448:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3449:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3450:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
3451:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
3452:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3453:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
3454:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3455:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3456:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
3457:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
3458:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3459:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3460:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3461:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccBYTIZg.s 			page 87


3462:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
3463:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.id = fs->id;
3464:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->err = 0;			/* Clear error flag */
3466:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
3467:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
3468:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3469:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3470:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
3471:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3472:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
3473:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
3474:Middlewares/Third_Party/FatFs/src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
3475:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
3476:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
3477:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
3478:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
3479:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
3480:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3481:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;
3482:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
3483:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
3484:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_INT_ERR;
3485:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
3486:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
3487:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3488:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
3489:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3490:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3491:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3492:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3493:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3494:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3495:Middlewares/Third_Party/FatFs/src/ff.c **** 
3496:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3497:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3498:Middlewares/Third_Party/FatFs/src/ff.c **** 
3499:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
3500:Middlewares/Third_Party/FatFs/src/ff.c **** 
3501:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3502:Middlewares/Third_Party/FatFs/src/ff.c **** }
3503:Middlewares/Third_Party/FatFs/src/ff.c **** 
3504:Middlewares/Third_Party/FatFs/src/ff.c **** 
3505:Middlewares/Third_Party/FatFs/src/ff.c **** 
3506:Middlewares/Third_Party/FatFs/src/ff.c **** 
3507:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3508:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read File                                                             */
3509:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3510:Middlewares/Third_Party/FatFs/src/ff.c **** 
3511:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_read (
3512:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3513:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* buff,	/* Pointer to data buffer */
3514:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btr,	/* Number of bytes to read */
3515:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3516:Middlewares/Third_Party/FatFs/src/ff.c **** )
3517:Middlewares/Third_Party/FatFs/src/ff.c **** {
3518:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
ARM GAS  /tmp/ccBYTIZg.s 			page 88


3519:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3520:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
3521:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t remain;
3522:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rcnt, cc, csect;
3523:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
3524:Middlewares/Third_Party/FatFs/src/ff.c **** 
3525:Middlewares/Third_Party/FatFs/src/ff.c **** 
3526:Middlewares/Third_Party/FatFs/src/ff.c **** 	*br = 0;	/* Clear read byte counter */
3527:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
3528:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3529:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
3530:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
3531:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
3532:Middlewares/Third_Party/FatFs/src/ff.c **** 
3533:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btr;								/* Repeat until all data read */
3534:Middlewares/Third_Party/FatFs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
3535:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
3536:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
3537:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
3538:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
3540:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* Middle or end of the file */
3541:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3542:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->cltbl) {
3543:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3544:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3545:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3546:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3547:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
3548:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3549:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3550:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
3551:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3552:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
3553:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3554:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3555:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3556:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
3557:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cc) {							/* Read maximum contiguous sectors directly */
3559:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3560:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
3561:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3562:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3563:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
3564:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3565:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3566:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3567:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3568:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3569:Middlewares/Third_Party/FatFs/src/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
3571:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3572:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3573:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
3575:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
ARM GAS  /tmp/ccBYTIZg.s 			page 89


3576:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3577:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3578:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
3579:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3580:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
3581:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3582:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
3583:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3584:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3585:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
3586:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3587:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3588:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = sect;
3589:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3590:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3591:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
3592:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3593:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3594:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3595:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3596:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3597:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3598:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3599:Middlewares/Third_Party/FatFs/src/ff.c **** 
3600:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
3601:Middlewares/Third_Party/FatFs/src/ff.c **** }
3602:Middlewares/Third_Party/FatFs/src/ff.c **** 
3603:Middlewares/Third_Party/FatFs/src/ff.c **** 
3604:Middlewares/Third_Party/FatFs/src/ff.c **** 
3605:Middlewares/Third_Party/FatFs/src/ff.c **** 
3606:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3607:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3608:Middlewares/Third_Party/FatFs/src/ff.c **** /* Write File                                                            */
3609:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3610:Middlewares/Third_Party/FatFs/src/ff.c **** 
3611:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_write (
3612:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
3613:Middlewares/Third_Party/FatFs/src/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
3614:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btw,			/* Number of bytes to write */
3615:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
3616:Middlewares/Third_Party/FatFs/src/ff.c **** )
3617:Middlewares/Third_Party/FatFs/src/ff.c **** {
3618:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3619:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3620:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
3621:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wcnt, cc, csect;
3622:Middlewares/Third_Party/FatFs/src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
3623:Middlewares/Third_Party/FatFs/src/ff.c **** 
3624:Middlewares/Third_Party/FatFs/src/ff.c **** 
3625:Middlewares/Third_Party/FatFs/src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
3626:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
3627:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
3628:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
3629:Middlewares/Third_Party/FatFs/src/ff.c **** 
3630:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
3631:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
3632:Middlewares/Third_Party/FatFs/src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
ARM GAS  /tmp/ccBYTIZg.s 			page 90


3633:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3634:Middlewares/Third_Party/FatFs/src/ff.c **** 
3635:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
3636:Middlewares/Third_Party/FatFs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
3637:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
3638:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
3639:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
3640:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
3641:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
3642:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
3643:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
3644:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3645:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {					/* On the middle or end of the file */
3646:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
3647:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->cltbl) {
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3649:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3650:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3651:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3652:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
3653:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3654:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3655:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
3656:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
3657:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
3658:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
3660:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3661:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3662:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
3663:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3664:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
3665:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
3666:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
3667:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3668:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3669:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect = clust2sect(fs, fp->clust);	/* Get current sector */
3670:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
3671:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
3672:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
3673:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cc) {						/* Write maximum contiguous sectors directly */
3674:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
3675:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
3676:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3677:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
3678:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
3679:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3680:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
3681:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
3682:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 0;
3683:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3684:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3685:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
3686:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
3687:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
3688:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3689:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccBYTIZg.s 			page 91


3690:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3691:Middlewares/Third_Party/FatFs/src/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
3692:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
3693:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3694:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3695:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
3696:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
3697:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->winsect = sect;
3698:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3699:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3700:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
3701:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
3702:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
3703:Middlewares/Third_Party/FatFs/src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
3704:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3705:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3706:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = sect;
3707:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3708:Middlewares/Third_Party/FatFs/src/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
3709:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
3710:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
3711:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3712:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3713:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
3714:Middlewares/Third_Party/FatFs/src/ff.c **** #else
3715:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
3716:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_DIRTY;
3717:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3718:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3719:Middlewares/Third_Party/FatFs/src/ff.c **** 
3720:Middlewares/Third_Party/FatFs/src/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
3721:Middlewares/Third_Party/FatFs/src/ff.c **** 
3722:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
3723:Middlewares/Third_Party/FatFs/src/ff.c **** }
3724:Middlewares/Third_Party/FatFs/src/ff.c **** 
3725:Middlewares/Third_Party/FatFs/src/ff.c **** 
3726:Middlewares/Third_Party/FatFs/src/ff.c **** 
3727:Middlewares/Third_Party/FatFs/src/ff.c **** 
3728:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3729:Middlewares/Third_Party/FatFs/src/ff.c **** /* Synchronize the File                                                  */
3730:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3731:Middlewares/Third_Party/FatFs/src/ff.c **** 
3732:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_sync (
3733:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
3734:Middlewares/Third_Party/FatFs/src/ff.c **** )
3735:Middlewares/Third_Party/FatFs/src/ff.c **** {
3736:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3737:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3738:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tm;
3739:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dir;
3740:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3741:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3742:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3743:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3744:Middlewares/Third_Party/FatFs/src/ff.c **** 
3745:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
3746:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
ARM GAS  /tmp/ccBYTIZg.s 			page 92


3747:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
3748:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
3749:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
3750:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
3751:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
3752:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3753:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3754:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Update the directory entry */
3755:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
3756:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3757:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3758:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
3759:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3760:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
3761:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3762:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3763:Middlewares/Third_Party/FatFs/src/ff.c **** 					INIT_NAMBUF(fs);
3764:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
3765:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
3766:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
3767:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
3768:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
3769:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
3770:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
3771:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
3772:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
3773:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
3774:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
3775:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
3776:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = sync_fs(fs);
3777:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
3778:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
3779:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3780:Middlewares/Third_Party/FatFs/src/ff.c **** 					FREE_NAMBUF();
3781:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3782:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
3783:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3784:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3785:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, fp->dir_sect);
3786:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
3787:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = fp->dir_ptr;
3788:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
3789:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
3790:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
3791:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
3792:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
3793:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
3794:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
3795:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
3796:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3797:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3798:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3799:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3800:Middlewares/Third_Party/FatFs/src/ff.c **** 
3801:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3802:Middlewares/Third_Party/FatFs/src/ff.c **** }
3803:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 93


3804:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
3805:Middlewares/Third_Party/FatFs/src/ff.c **** 
3806:Middlewares/Third_Party/FatFs/src/ff.c **** 
3807:Middlewares/Third_Party/FatFs/src/ff.c **** 
3808:Middlewares/Third_Party/FatFs/src/ff.c **** 
3809:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3810:Middlewares/Third_Party/FatFs/src/ff.c **** /* Close File                                                            */
3811:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3812:Middlewares/Third_Party/FatFs/src/ff.c **** 
3813:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_close (
3814:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
3815:Middlewares/Third_Party/FatFs/src/ff.c **** )
3816:Middlewares/Third_Party/FatFs/src/ff.c **** {
3817:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3818:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3819:Middlewares/Third_Party/FatFs/src/ff.c **** 
3820:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
3821:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
3822:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK)
3823:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3824:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
3825:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
3826:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3827:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
3828:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
3829:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK)
3830:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3831:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
3832:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.fs = 0;			/* Invalidate file object */
3833:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3834:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
3835:Middlewares/Third_Party/FatFs/src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
3836:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3837:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3838:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3839:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
3840:Middlewares/Third_Party/FatFs/src/ff.c **** }
3841:Middlewares/Third_Party/FatFs/src/ff.c **** 
3842:Middlewares/Third_Party/FatFs/src/ff.c **** 
3843:Middlewares/Third_Party/FatFs/src/ff.c **** 
3844:Middlewares/Third_Party/FatFs/src/ff.c **** 
3845:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH >= 1
3846:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3847:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
3848:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3849:Middlewares/Third_Party/FatFs/src/ff.c **** 
3850:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES >= 2
3851:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chdrive (
3852:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Drive number */
3853:Middlewares/Third_Party/FatFs/src/ff.c **** )
3854:Middlewares/Third_Party/FatFs/src/ff.c **** {
3855:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
3856:Middlewares/Third_Party/FatFs/src/ff.c **** 
3857:Middlewares/Third_Party/FatFs/src/ff.c **** 
3858:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive number */
3859:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&path);
3860:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
ARM GAS  /tmp/ccBYTIZg.s 			page 94


3861:Middlewares/Third_Party/FatFs/src/ff.c **** 
3862:Middlewares/Third_Party/FatFs/src/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
3863:Middlewares/Third_Party/FatFs/src/ff.c **** 
3864:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
3865:Middlewares/Third_Party/FatFs/src/ff.c **** }
3866:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3867:Middlewares/Third_Party/FatFs/src/ff.c **** 
3868:Middlewares/Third_Party/FatFs/src/ff.c **** 
3869:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chdir (
3870:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
3871:Middlewares/Third_Party/FatFs/src/ff.c **** )
3872:Middlewares/Third_Party/FatFs/src/ff.c **** {
3873:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3874:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3875:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3876:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3877:Middlewares/Third_Party/FatFs/src/ff.c **** 
3878:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3879:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
3880:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3881:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3882:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3883:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
3884:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
3885:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
3886:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
3887:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3888:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3889:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
3890:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_size = dj.obj.c_size;
3891:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
3892:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3893:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3894:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
3895:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
3896:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
3897:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
3898:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
3899:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
3900:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3901:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
3902:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
3903:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3904:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
3905:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
3906:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
3907:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
3908:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
3909:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3910:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3911:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3912:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3913:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
3914:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3915:Middlewares/Third_Party/FatFs/src/ff.c **** 
3916:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3917:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  /tmp/ccBYTIZg.s 			page 95


3918:Middlewares/Third_Party/FatFs/src/ff.c **** 
3919:Middlewares/Third_Party/FatFs/src/ff.c **** 
3920:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH >= 2
3921:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getcwd (
3922:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
3923:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT len		/* Size of path */
3924:Middlewares/Third_Party/FatFs/src/ff.c **** )
3925:Middlewares/Third_Party/FatFs/src/ff.c **** {
3926:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
3927:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
3928:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
3929:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, n;
3930:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ccl;
3931:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR *tp;
3932:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO fno;
3933:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
3934:Middlewares/Third_Party/FatFs/src/ff.c **** 
3935:Middlewares/Third_Party/FatFs/src/ff.c **** 
3936:Middlewares/Third_Party/FatFs/src/ff.c **** 	*buff = 0;
3937:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
3938:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
3939:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
3940:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
3941:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
3942:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
3943:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root path)
3944:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
3945:Middlewares/Third_Party/FatFs/src/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
3946:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
3947:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3948:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = move_window(fs, dj.sect);
3949:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3950:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
3951:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(&dj, 0);
3952:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3953:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {							/* Find the entry links to the child directory */
3954:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_read(&dj, 0);
3955:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
3956:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
3957:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_next(&dj, 0);
3958:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (res == FR_OK);
3959:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
3960:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res != FR_OK) break;
3961:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
3962:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;
3963:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i < n + 3) {
3964:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
3965:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
3966:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (n) buff[--i] = fno.fname[--n];
3967:Middlewares/Third_Party/FatFs/src/ff.c **** 				buff[--i] = '/';
3968:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3969:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3970:Middlewares/Third_Party/FatFs/src/ff.c **** 		tp = buff;
3971:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
3972:Middlewares/Third_Party/FatFs/src/ff.c **** #if _VOLUMES >= 2
3973:Middlewares/Third_Party/FatFs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
3974:Middlewares/Third_Party/FatFs/src/ff.c **** 			*tp++ = ':';
ARM GAS  /tmp/ccBYTIZg.s 			page 96


3975:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
3976:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (i == len) {					/* Root-directory */
3977:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tp++ = '/';
3978:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {						/* Sub-directroy */
3979:Middlewares/Third_Party/FatFs/src/ff.c **** 				do		/* Add stacked path str */
3980:Middlewares/Third_Party/FatFs/src/ff.c **** 					*tp++ = buff[i++];
3981:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (i < len);
3982:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
3983:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
3984:Middlewares/Third_Party/FatFs/src/ff.c **** 		*tp = 0;
3985:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
3986:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
3987:Middlewares/Third_Party/FatFs/src/ff.c **** 
3988:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
3989:Middlewares/Third_Party/FatFs/src/ff.c **** }
3990:Middlewares/Third_Party/FatFs/src/ff.c **** 
3991:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_RPATH >= 2 */
3992:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_RPATH >= 1 */
3993:Middlewares/Third_Party/FatFs/src/ff.c **** 
3994:Middlewares/Third_Party/FatFs/src/ff.c **** 
3995:Middlewares/Third_Party/FatFs/src/ff.c **** 
3996:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
3997:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
3998:Middlewares/Third_Party/FatFs/src/ff.c **** /* Seek File R/W Pointer                                                 */
3999:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4000:Middlewares/Third_Party/FatFs/src/ff.c **** 
4001:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_lseek (
4002:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
4003:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
4004:Middlewares/Third_Party/FatFs/src/ff.c **** )
4005:Middlewares/Third_Party/FatFs/src/ff.c **** {
4006:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4007:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4008:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, bcs, nsect;
4009:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t ifptr;
4010:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
4011:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
4012:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4013:Middlewares/Third_Party/FatFs/src/ff.c **** 
4014:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
4015:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
4016:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
4017:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4018:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4019:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4020:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4021:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
4022:Middlewares/Third_Party/FatFs/src/ff.c **** 
4023:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FASTSEEK
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4026:Middlewares/Third_Party/FatFs/src/ff.c **** 			tbl = fp->cltbl;
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4028:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4029:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl) {
4030:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
4031:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Get a fragment */
ARM GAS  /tmp/ccBYTIZg.s 			page 97


4032:Middlewares/Third_Party/FatFs/src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4033:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4034:Middlewares/Third_Party/FatFs/src/ff.c **** 						pcl = cl; ncl++;
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 						cl = get_fat(&fp->obj, cl);
4036:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4037:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4038:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
4039:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4040:Middlewares/Third_Party/FatFs/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
4041:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4042:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4043:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4044:Middlewares/Third_Party/FatFs/src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ulen <= tlen) {
4046:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tbl = 0;		/* Terminate table */
4047:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4048:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4049:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4050:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {						/* Fast seek */
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4052:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
4053:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs) {
4054:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
4055:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, fp->clust);
4056:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
4057:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4058:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4059:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4060:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4061:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4062:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4063:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
4064:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4065:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4066:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sec
4067:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4068:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->sect = dsc;
4069:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4070:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4071:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4072:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
4073:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4074:Middlewares/Third_Party/FatFs/src/ff.c **** 
4075:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Normal Seek */
4076:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
4077:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4078:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATx
4079:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4080:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, cl
4081:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
4082:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4083:Middlewares/Third_Party/FatFs/src/ff.c **** 		ifptr = fp->fptr;
4084:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr = nsect = 0;
4085:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
4086:Middlewares/Third_Party/FatFs/src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ifptr > 0 &&
4088:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
ARM GAS  /tmp/ccBYTIZg.s 			page 98


4089:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
4090:Middlewares/Third_Party/FatFs/src/ff.c **** 				ofs -= fp->fptr;
4091:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->clust;
4092:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* When seek to back cluster, */
4093:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
4094:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4095:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
4096:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&fp->obj, 0);
4097:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
4098:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4099:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
4100:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4101:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4102:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;
4103:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4104:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst != 0) {
4105:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
4106:Middlewares/Third_Party/FatFs/src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
4107:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4108:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
4109:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
4110:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->obj.objsize = fp->fptr;
4111:Middlewares/Third_Party/FatFs/src/ff.c **** 							fp->flag |= FA_MODIFIED;
4112:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4113:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
4114:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
4115:Middlewares/Third_Party/FatFs/src/ff.c **** 							ofs = 0; break;
4116:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4117:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4118:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4119:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4120:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
4121:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4122:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4123:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
4124:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
4125:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4126:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr += ofs;
4127:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ofs % SS(fs)) {
4128:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
4129:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
4130:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
4131:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4132:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4133:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4134:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is e
4135:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fp->fptr;
4136:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
4137:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4138:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
4139:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4140:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4141:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
4142:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4143:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4144:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4145:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccBYTIZg.s 			page 99


4146:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cach
4147:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4148:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = nsect;
4149:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4150:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4151:Middlewares/Third_Party/FatFs/src/ff.c **** 
4152:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4153:Middlewares/Third_Party/FatFs/src/ff.c **** }
4154:Middlewares/Third_Party/FatFs/src/ff.c **** 
4155:Middlewares/Third_Party/FatFs/src/ff.c **** 
4156:Middlewares/Third_Party/FatFs/src/ff.c **** 
4157:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 1
4158:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4159:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create a Directory Object                                             */
4160:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4161:Middlewares/Third_Party/FatFs/src/ff.c **** 
4162:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_opendir (
4163:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4164:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4165:Middlewares/Third_Party/FatFs/src/ff.c **** )
4166:Middlewares/Third_Party/FatFs/src/ff.c **** {
4167:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4168:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4169:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID *obj;
4170:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4171:Middlewares/Third_Party/FatFs/src/ff.c **** 
4172:Middlewares/Third_Party/FatFs/src/ff.c **** 
4173:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
4174:Middlewares/Third_Party/FatFs/src/ff.c **** 
4175:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4176:Middlewares/Third_Party/FatFs/src/ff.c **** 	obj = &dp->obj;
4177:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4178:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4179:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->fs = fs;
4180:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4181:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
4182:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
4183:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
4184:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
4185:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4186:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4187:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
4188:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
4189:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->c_ofs = dp->blk_ofs;
4190:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
4191:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4192:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
4193:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4194:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4195:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4196:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
4197:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4198:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* This object is a file */
4199:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_PATH;
4200:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4201:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4202:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
ARM GAS  /tmp/ccBYTIZg.s 			page 100


4203:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->id = fs->id;
4204:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
4205:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4206:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4207:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->sclust) {
4208:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
4210:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
4211:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = 0;	/* Root directory need not to be locked */
4212:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4213:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4214:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4215:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4216:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4217:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4218:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
4219:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4220:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
4221:Middlewares/Third_Party/FatFs/src/ff.c **** 
4222:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4223:Middlewares/Third_Party/FatFs/src/ff.c **** }
4224:Middlewares/Third_Party/FatFs/src/ff.c **** 
4225:Middlewares/Third_Party/FatFs/src/ff.c **** 
4226:Middlewares/Third_Party/FatFs/src/ff.c **** 
4227:Middlewares/Third_Party/FatFs/src/ff.c **** 
4228:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4229:Middlewares/Third_Party/FatFs/src/ff.c **** /* Close Directory                                                       */
4230:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4231:Middlewares/Third_Party/FatFs/src/ff.c **** 
4232:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_closedir (
4233:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4234:Middlewares/Third_Party/FatFs/src/ff.c **** )
4235:Middlewares/Third_Party/FatFs/src/ff.c **** {
4236:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4237:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4238:Middlewares/Third_Party/FatFs/src/ff.c **** 
4239:Middlewares/Third_Party/FatFs/src/ff.c **** 
4240:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
4241:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4242:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4243:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
4244:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(dp->obj.lockid);
4245:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4246:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK)
4247:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4248:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
4249:Middlewares/Third_Party/FatFs/src/ff.c **** 			dp->obj.fs = 0;			/* Invalidate directory object */
4250:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4251:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
4252:Middlewares/Third_Party/FatFs/src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4253:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4254:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4255:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4256:Middlewares/Third_Party/FatFs/src/ff.c **** }
4257:Middlewares/Third_Party/FatFs/src/ff.c **** 
4258:Middlewares/Third_Party/FatFs/src/ff.c **** 
4259:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 101


4260:Middlewares/Third_Party/FatFs/src/ff.c **** 
4261:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4262:Middlewares/Third_Party/FatFs/src/ff.c **** /* Read Directory Entries in Sequence                                    */
4263:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4264:Middlewares/Third_Party/FatFs/src/ff.c **** 
4265:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_readdir (
4266:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4267:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4268:Middlewares/Third_Party/FatFs/src/ff.c **** )
4269:Middlewares/Third_Party/FatFs/src/ff.c **** {
4270:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4271:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4272:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4273:Middlewares/Third_Party/FatFs/src/ff.c **** 
4274:Middlewares/Third_Party/FatFs/src/ff.c **** 
4275:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
4276:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4277:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!fno) {
4278:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
4279:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
4280:Middlewares/Third_Party/FatFs/src/ff.c **** 			INIT_NAMBUF(fs);
4281:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_read(dp, 0);			/* Read an item */
4282:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
4283:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
4284:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
4285:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
4286:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
4287:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4288:Middlewares/Third_Party/FatFs/src/ff.c **** 			FREE_NAMBUF();
4289:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4290:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4291:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4292:Middlewares/Third_Party/FatFs/src/ff.c **** }
4293:Middlewares/Third_Party/FatFs/src/ff.c **** 
4294:Middlewares/Third_Party/FatFs/src/ff.c **** 
4295:Middlewares/Third_Party/FatFs/src/ff.c **** 
4296:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FIND
4297:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4298:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find Next File                                                        */
4299:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4300:Middlewares/Third_Party/FatFs/src/ff.c **** 
4301:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_findnext (
4302:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4303:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4304:Middlewares/Third_Party/FatFs/src/ff.c **** )
4305:Middlewares/Third_Party/FatFs/src/ff.c **** {
4306:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4307:Middlewares/Third_Party/FatFs/src/ff.c **** 
4308:Middlewares/Third_Party/FatFs/src/ff.c **** 
4309:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
4310:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4311:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4312:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
4313:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0 && _USE_FIND == 2
4314:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist *
4315:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4316:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
ARM GAS  /tmp/ccBYTIZg.s 			page 102


4317:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4318:Middlewares/Third_Party/FatFs/src/ff.c **** }
4319:Middlewares/Third_Party/FatFs/src/ff.c **** 
4320:Middlewares/Third_Party/FatFs/src/ff.c **** 
4321:Middlewares/Third_Party/FatFs/src/ff.c **** 
4322:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4323:Middlewares/Third_Party/FatFs/src/ff.c **** /* Find First File                                                       */
4324:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4325:Middlewares/Third_Party/FatFs/src/ff.c **** 
4326:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_findfirst (
4327:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4328:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4329:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4330:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4331:Middlewares/Third_Party/FatFs/src/ff.c **** )
4332:Middlewares/Third_Party/FatFs/src/ff.c **** {
4333:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4334:Middlewares/Third_Party/FatFs/src/ff.c **** 
4335:Middlewares/Third_Party/FatFs/src/ff.c **** 
4336:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4337:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4338:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4339:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4340:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4341:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
4342:Middlewares/Third_Party/FatFs/src/ff.c **** }
4343:Middlewares/Third_Party/FatFs/src/ff.c **** 
4344:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_FIND */
4345:Middlewares/Third_Party/FatFs/src/ff.c **** 
4346:Middlewares/Third_Party/FatFs/src/ff.c **** 
4347:Middlewares/Third_Party/FatFs/src/ff.c **** 
4348:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE == 0
4349:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4350:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get File Status                                                       */
4351:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4352:Middlewares/Third_Party/FatFs/src/ff.c **** 
4353:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_stat (
4354:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4355:Middlewares/Third_Party/FatFs/src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4356:Middlewares/Third_Party/FatFs/src/ff.c **** )
4357:Middlewares/Third_Party/FatFs/src/ff.c **** {
4358:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4359:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4360:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4361:Middlewares/Third_Party/FatFs/src/ff.c **** 
4362:Middlewares/Third_Party/FatFs/src/ff.c **** 
4363:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4364:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &dj.obj.fs, 0);
4365:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4366:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4367:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
4369:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
4370:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
4371:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {							/* Found an object */
4372:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
4373:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
ARM GAS  /tmp/ccBYTIZg.s 			page 103


4374:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4375:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4376:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4377:Middlewares/Third_Party/FatFs/src/ff.c **** 
4378:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
4379:Middlewares/Third_Party/FatFs/src/ff.c **** }
4380:Middlewares/Third_Party/FatFs/src/ff.c **** 
4381:Middlewares/Third_Party/FatFs/src/ff.c **** 
4382:Middlewares/Third_Party/FatFs/src/ff.c **** 
4383:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
4384:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4385:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get Number of Free Clusters                                           */
4386:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4387:Middlewares/Third_Party/FatFs/src/ff.c **** 
4388:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getfree (
4389:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4390:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4391:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
4392:Middlewares/Third_Party/FatFs/src/ff.c **** )
4393:Middlewares/Third_Party/FatFs/src/ff.c **** {
4394:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4395:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4396:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD nfree, clst, sect, stat;
4397:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
4398:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *p;
4399:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID obj;
4400:Middlewares/Third_Party/FatFs/src/ff.c **** 
4401:Middlewares/Third_Party/FatFs/src/ff.c **** 
4402:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4403:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4404:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
4406:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
4408:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = fs->free_clst;
4409:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
4410:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get number of free clusters */
4411:Middlewares/Third_Party/FatFs/src/ff.c **** 			nfree = 0;
4412:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
4413:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = 2; obj.fs = fs;
4414:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
4415:Middlewares/Third_Party/FatFs/src/ff.c **** 					stat = get_fat(&obj, clst);
4416:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
4417:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
4418:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
4419:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
4420:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4421:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4422:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
4423:Middlewares/Third_Party/FatFs/src/ff.c **** 					BYTE bm;
4424:Middlewares/Third_Party/FatFs/src/ff.c **** 					UINT b;
4425:Middlewares/Third_Party/FatFs/src/ff.c **** 
4426:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fs->n_fatent - 2;
4427:Middlewares/Third_Party/FatFs/src/ff.c **** 					sect = fs->database;
4428:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0;
4429:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4430:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
ARM GAS  /tmp/ccBYTIZg.s 			page 104


4431:Middlewares/Third_Party/FatFs/src/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4432:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!(bm & 1)) nfree++;
4433:Middlewares/Third_Party/FatFs/src/ff.c **** 							bm >>= 1;
4434:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4435:Middlewares/Third_Party/FatFs/src/ff.c **** 						i = (i + 1) % SS(fs);
4436:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (clst);
4437:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4438:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4439:Middlewares/Third_Party/FatFs/src/ff.c **** 				{	/* FAT16/32: Sector alighed FAT entries */
4440:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fs->n_fatent; sect = fs->fatbase;
4441:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0; p = 0;
4442:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4443:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (i == 0) {
4444:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, sect++);
4445:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
4446:Middlewares/Third_Party/FatFs/src/ff.c **** 							p = fs->win;
4447:Middlewares/Third_Party/FatFs/src/ff.c **** 							i = SS(fs);
4448:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4449:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (fs->fs_type == FS_FAT16) {
4450:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (ld_word(p) == 0) nfree++;
4451:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
4452:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
4453:Middlewares/Third_Party/FatFs/src/ff.c **** 							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
4454:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
4455:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4456:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (--clst);
4457:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4458:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4459:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
4460:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
4461:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
4462:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4463:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4464:Middlewares/Third_Party/FatFs/src/ff.c **** 
4465:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4466:Middlewares/Third_Party/FatFs/src/ff.c **** }
4467:Middlewares/Third_Party/FatFs/src/ff.c **** 
4468:Middlewares/Third_Party/FatFs/src/ff.c **** 
4469:Middlewares/Third_Party/FatFs/src/ff.c **** 
4470:Middlewares/Third_Party/FatFs/src/ff.c **** 
4471:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4472:Middlewares/Third_Party/FatFs/src/ff.c **** /* Truncate File                                                         */
4473:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4474:Middlewares/Third_Party/FatFs/src/ff.c **** 
4475:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_truncate (
4476:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4477:Middlewares/Third_Party/FatFs/src/ff.c **** )
4478:Middlewares/Third_Party/FatFs/src/ff.c **** {
4479:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4480:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4481:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ncl;
4482:Middlewares/Third_Party/FatFs/src/ff.c **** 
4483:Middlewares/Third_Party/FatFs/src/ff.c **** 
4484:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
4486:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
4487:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 105


4488:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
4489:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
4490:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
4491:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = 0;
4492:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
4494:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4495:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
4496:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
4497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
4498:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
4499:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4500:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
4502:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_MODIFIED;
4503:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
4504:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
4505:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
4506:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
4507:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4508:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
4509:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4510:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4511:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4512:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
4513:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4514:Middlewares/Third_Party/FatFs/src/ff.c **** 
4515:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4516:Middlewares/Third_Party/FatFs/src/ff.c **** }
4517:Middlewares/Third_Party/FatFs/src/ff.c **** 
4518:Middlewares/Third_Party/FatFs/src/ff.c **** 
4519:Middlewares/Third_Party/FatFs/src/ff.c **** 
4520:Middlewares/Third_Party/FatFs/src/ff.c **** 
4521:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4522:Middlewares/Third_Party/FatFs/src/ff.c **** /* Delete a File/Directory                                               */
4523:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4524:Middlewares/Third_Party/FatFs/src/ff.c **** 
4525:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_unlink (
4526:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4527:Middlewares/Third_Party/FatFs/src/ff.c **** )
4528:Middlewares/Third_Party/FatFs/src/ff.c **** {
4529:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4530:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj, sdj;
4531:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dclst = 0;
4532:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4533:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4534:Middlewares/Third_Party/FatFs/src/ff.c **** 	_FDID obj;
4535:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4536:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4537:Middlewares/Third_Party/FatFs/src/ff.c **** 
4538:Middlewares/Third_Party/FatFs/src/ff.c **** 
4539:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4540:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
4541:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4542:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4543:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4544:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
ARM GAS  /tmp/ccBYTIZg.s 			page 106


4545:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
4546:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
4547:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4548:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4549:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
4550:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4551:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
4552:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
4553:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
4554:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4555:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_RDO) {
4556:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
4557:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4558:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4559:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4560:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4561:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj.fs = fs;
4562:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4563:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.sclust = dclst = ld_dword(fs->dirbuf + XDIR_FstClus);
4564:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
4565:Middlewares/Third_Party/FatFs/src/ff.c **** 					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
4566:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4567:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4568:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4569:Middlewares/Third_Party/FatFs/src/ff.c **** 					dclst = ld_clust(fs, dj.dir);
4570:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4571:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
4572:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
4573:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
4574:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
4575:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
4576:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4577:Middlewares/Third_Party/FatFs/src/ff.c **** 					{
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.fs = fs;						/* Open the sub-directory */
4579:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.sclust = dclst;
4580:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4581:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
4582:Middlewares/Third_Party/FatFs/src/ff.c **** 							sdj.obj.objsize = obj.objsize;
4583:Middlewares/Third_Party/FatFs/src/ff.c **** 							sdj.obj.stat = obj.stat;
4584:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4585:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4586:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = dir_sdi(&sdj, 0);
4587:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
4588:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
4589:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
4590:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
4591:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4592:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4593:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4594:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4595:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4596:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
4597:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
4598:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4599:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = remove_chain(&obj, dclst, 0);
4600:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4601:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
ARM GAS  /tmp/ccBYTIZg.s 			page 107


4602:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4603:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4604:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
4605:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4606:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4607:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4608:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4609:Middlewares/Third_Party/FatFs/src/ff.c **** 
4610:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4611:Middlewares/Third_Party/FatFs/src/ff.c **** }
4612:Middlewares/Third_Party/FatFs/src/ff.c **** 
4613:Middlewares/Third_Party/FatFs/src/ff.c **** 
4614:Middlewares/Third_Party/FatFs/src/ff.c **** 
4615:Middlewares/Third_Party/FatFs/src/ff.c **** 
4616:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4617:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create a Directory                                                    */
4618:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4619:Middlewares/Third_Party/FatFs/src/ff.c **** 
4620:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mkdir (
4621:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
4622:Middlewares/Third_Party/FatFs/src/ff.c **** )
4623:Middlewares/Third_Party/FatFs/src/ff.c **** {
4624:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4625:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4626:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4627:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dir;
4628:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT n;
4629:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dsc, dcl, pcl, tm;
4630:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4631:Middlewares/Third_Party/FatFs/src/ff.c **** 
4632:Middlewares/Third_Party/FatFs/src/ff.c **** 
4633:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4634:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);
4635:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4636:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4637:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
4640:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
4641:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_INVALID_NAME;
4642:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4643:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
4644:Middlewares/Third_Party/FatFs/src/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
4645:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
4646:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4647:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
4648:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
4649:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
4650:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
4651:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
4652:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, dcl);
4654:Middlewares/Third_Party/FatFs/src/ff.c **** 				dir = fs->win;
4655:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(dir, 0, SS(fs));
4656:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
4658:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Name] = '.';
ARM GAS  /tmp/ccBYTIZg.s 			page 108


4659:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
4660:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
4661:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);
4662:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
4663:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
4665:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
4666:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4667:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
4668:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
4669:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
4670:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_window(fs);
4671:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
4672:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir, 0, SS(fs));
4673:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4674:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4675:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4676:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
4677:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4678:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4679:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4680:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
4681:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
4682:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
4683:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
4684:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
4685:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
4686:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
4687:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = store_xdir(&dj);
4688:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4689:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4690:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4691:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = dj.dir;
4692:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
4693:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
4694:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
4695:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
4696:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4697:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4698:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
4699:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4700:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
4701:Middlewares/Third_Party/FatFs/src/ff.c **** 				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
4702:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4703:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4704:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4705:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4706:Middlewares/Third_Party/FatFs/src/ff.c **** 
4707:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4708:Middlewares/Third_Party/FatFs/src/ff.c **** }
4709:Middlewares/Third_Party/FatFs/src/ff.c **** 
4710:Middlewares/Third_Party/FatFs/src/ff.c **** 
4711:Middlewares/Third_Party/FatFs/src/ff.c **** 
4712:Middlewares/Third_Party/FatFs/src/ff.c **** 
4713:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4714:Middlewares/Third_Party/FatFs/src/ff.c **** /* Rename a File/Directory                                               */
4715:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  /tmp/ccBYTIZg.s 			page 109


4716:Middlewares/Third_Party/FatFs/src/ff.c **** 
4717:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_rename (
4718:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
4719:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
4720:Middlewares/Third_Party/FatFs/src/ff.c **** )
4721:Middlewares/Third_Party/FatFs/src/ff.c **** {
4722:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4723:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR djo, djn;
4724:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4725:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
4726:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD dw;
4727:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4728:Middlewares/Third_Party/FatFs/src/ff.c **** 
4729:Middlewares/Third_Party/FatFs/src/ff.c **** 
4730:Middlewares/Third_Party/FatFs/src/ff.c **** 	get_ldnumber(&path_new);						/* Snip drive number of new name off */
4731:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
4732:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4733:Middlewares/Third_Party/FatFs/src/ff.c **** 		djo.obj.fs = fs;
4734:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4735:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
4736:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
4737:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
4738:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4739:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = chk_lock(&djo, 2);
4740:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4741:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4742:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
4743:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4744:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT */
4745:Middlewares/Third_Party/FatFs/src/ff.c **** 				BYTE nf, nn;
4746:Middlewares/Third_Party/FatFs/src/ff.c **** 				WORD nh;
4747:Middlewares/Third_Party/FatFs/src/ff.c **** 
4748:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
4749:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
4750:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4751:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
4752:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4753:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4754:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4755:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4756:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
4757:Middlewares/Third_Party/FatFs/src/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
4758:Middlewares/Third_Party/FatFs/src/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
4759:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);
4760:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
4761:Middlewares/Third_Party/FatFs/src/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
4762:Middlewares/Third_Party/FatFs/src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4763:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = store_xdir(&djn);
4764:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4765:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4766:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4767:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4768:Middlewares/Third_Party/FatFs/src/ff.c **** 			{	/* At FAT12/FAT16/FAT32 */
4769:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
4770:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
4772:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
ARM GAS  /tmp/ccBYTIZg.s 			page 110


4773:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
4774:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4775:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
4776:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
4777:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
4778:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
4780:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
4781:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
4782:Middlewares/Third_Party/FatFs/src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
4783:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
4784:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!dw) {
4785:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = FR_INT_ERR;
4786:Middlewares/Third_Party/FatFs/src/ff.c **** 							} else {
4787:Middlewares/Third_Party/FatFs/src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
4788:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = move_window(fs, dw);
4789:Middlewares/Third_Party/FatFs/src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
4790:Middlewares/Third_Party/FatFs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
4791:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
4792:Middlewares/Third_Party/FatFs/src/ff.c **** 									fs->wflag = 1;
4793:Middlewares/Third_Party/FatFs/src/ff.c **** 								}
4794:Middlewares/Third_Party/FatFs/src/ff.c **** 							}
4795:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4796:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4797:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4798:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4799:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4800:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
4801:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
4802:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
4803:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4804:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4805:Middlewares/Third_Party/FatFs/src/ff.c **** /* End of the critical section */
4806:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4807:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4808:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4809:Middlewares/Third_Party/FatFs/src/ff.c **** 
4810:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4811:Middlewares/Third_Party/FatFs/src/ff.c **** }
4812:Middlewares/Third_Party/FatFs/src/ff.c **** 
4813:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
4814:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE == 0 */
4815:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
4816:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
4817:Middlewares/Third_Party/FatFs/src/ff.c **** 
4818:Middlewares/Third_Party/FatFs/src/ff.c **** 
4819:Middlewares/Third_Party/FatFs/src/ff.c **** 
4820:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_CHMOD && !_FS_READONLY
4821:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4822:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Attribute                                                      */
4823:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4824:Middlewares/Third_Party/FatFs/src/ff.c **** 
4825:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_chmod (
4826:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4827:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE attr,			/* Attribute bits */
4828:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE mask			/* Attribute mask to change */
4829:Middlewares/Third_Party/FatFs/src/ff.c **** )
ARM GAS  /tmp/ccBYTIZg.s 			page 111


4830:Middlewares/Third_Party/FatFs/src/ff.c **** {
4831:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4832:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4833:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4834:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4835:Middlewares/Third_Party/FatFs/src/ff.c **** 
4836:Middlewares/Third_Party/FatFs/src/ff.c **** 
4837:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4838:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4839:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4840:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
4841:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4842:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4843:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4844:Middlewares/Third_Party/FatFs/src/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
4845:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4846:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4847:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
4848:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = store_xdir(&dj);
4849:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4850:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4851:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
4852:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
4853:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
4854:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4855:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4856:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = sync_fs(fs);
4857:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4858:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4859:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4860:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4861:Middlewares/Third_Party/FatFs/src/ff.c **** 
4862:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4863:Middlewares/Third_Party/FatFs/src/ff.c **** }
4864:Middlewares/Third_Party/FatFs/src/ff.c **** 
4865:Middlewares/Third_Party/FatFs/src/ff.c **** 
4866:Middlewares/Third_Party/FatFs/src/ff.c **** 
4867:Middlewares/Third_Party/FatFs/src/ff.c **** 
4868:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4869:Middlewares/Third_Party/FatFs/src/ff.c **** /* Change Timestamp                                                      */
4870:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4871:Middlewares/Third_Party/FatFs/src/ff.c **** 
4872:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_utime (
4873:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
4874:Middlewares/Third_Party/FatFs/src/ff.c **** 	const FILINFO* fno	/* Pointer to the time stamp to be set */
4875:Middlewares/Third_Party/FatFs/src/ff.c **** )
4876:Middlewares/Third_Party/FatFs/src/ff.c **** {
4877:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4878:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4879:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4880:Middlewares/Third_Party/FatFs/src/ff.c **** 	DEF_NAMBUF
4881:Middlewares/Third_Party/FatFs/src/ff.c **** 
4882:Middlewares/Third_Party/FatFs/src/ff.c **** 
4883:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
4884:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
4885:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
4886:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
ARM GAS  /tmp/ccBYTIZg.s 			page 112


4887:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
4888:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
4889:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4890:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
4891:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4892:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4893:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = store_xdir(&dj);
4894:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else
4895:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4896:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
4897:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
4898:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->wflag = 1;
4899:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4900:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {
4901:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = sync_fs(fs);
4902:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4903:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4904:Middlewares/Third_Party/FatFs/src/ff.c **** 		FREE_NAMBUF();
4905:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4906:Middlewares/Third_Party/FatFs/src/ff.c **** 
4907:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
4908:Middlewares/Third_Party/FatFs/src/ff.c **** }
4909:Middlewares/Third_Party/FatFs/src/ff.c **** 
4910:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _USE_CHMOD && !_FS_READONLY */
4911:Middlewares/Third_Party/FatFs/src/ff.c **** 
4912:Middlewares/Third_Party/FatFs/src/ff.c **** 
4913:Middlewares/Third_Party/FatFs/src/ff.c **** 
4914:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LABEL
4915:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4916:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get Volume Label                                                      */
4917:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
4918:Middlewares/Third_Party/FatFs/src/ff.c **** 
4919:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_getlabel (
4920:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Path name of the logical drive number */
4921:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* label,		/* Pointer to a buffer to return the volume label */
4922:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
4923:Middlewares/Third_Party/FatFs/src/ff.c **** )
4924:Middlewares/Third_Party/FatFs/src/ff.c **** {
4925:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
4926:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
4927:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
4928:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT si, di;
4929:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE || _FS_EXFAT
4930:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
4931:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4932:Middlewares/Third_Party/FatFs/src/ff.c **** 
4933:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
4934:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, 0);
4935:Middlewares/Third_Party/FatFs/src/ff.c **** 
4936:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get volume label */
4937:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && label) {
4938:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
4939:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(&dj, 0);
4940:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4941:Middlewares/Third_Party/FatFs/src/ff.c **** 		 	res = dir_read(&dj, 1);			/* Find a volume label entry */
4942:Middlewares/Third_Party/FatFs/src/ff.c **** 		 	if (res == FR_OK) {
4943:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
ARM GAS  /tmp/ccBYTIZg.s 			page 113


4944:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4945:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (si = di = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 entry */
4946:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = ld_word(dj.dir + XDIR_Label + si * 2);
4947:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
4948:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = w;
4949:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4950:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = ff_convert(w, 0);	/* Unicode -> OEM */
4951:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (w == 0) w = '?';	/* Replace wrong character */
4952:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_DF1S && w >= 0x100) label[di++] = (char)(w >> 8);
4953:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = (char)w;
4954:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4955:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
4956:Middlewares/Third_Party/FatFs/src/ff.c **** 					label[di] = 0;
4957:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else
4958:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4959:Middlewares/Third_Party/FatFs/src/ff.c **** 				{
4960:Middlewares/Third_Party/FatFs/src/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry with code comversion */
4961:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
4962:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
4963:Middlewares/Third_Party/FatFs/src/ff.c **** 						w = (si < 11) ? dj.dir[si++] : ' ';
4964:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (IsDBCS1(w) && si < 11 && IsDBCS2(dj.dir[si])) {
4965:Middlewares/Third_Party/FatFs/src/ff.c **** 							w = w << 8 | dj.dir[si++];
4966:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
4967:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = ff_convert(w, 1);	/* OEM -> Unicode */
4968:Middlewares/Third_Party/FatFs/src/ff.c **** #else
4969:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di++] = dj.dir[si++];
4970:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
4971:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (di < 11);
4972:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {				/* Truncate trailing spaces */
4973:Middlewares/Third_Party/FatFs/src/ff.c **** 						label[di] = 0;
4974:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (di == 0) break;
4975:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (label[--di] == ' ');
4976:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
4977:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4978:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4979:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
4980:Middlewares/Third_Party/FatFs/src/ff.c **** 			label[0] = 0;
4981:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
4982:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
4983:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
4984:Middlewares/Third_Party/FatFs/src/ff.c **** 
4985:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get volume serial number */
4986:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK && vsn) {
4987:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, fs->volbase);
4988:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
4989:Middlewares/Third_Party/FatFs/src/ff.c **** 			switch (fs->fs_type) {
4990:Middlewares/Third_Party/FatFs/src/ff.c **** 			case FS_EXFAT:
4991:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BPB_VolIDEx; break;
4992:Middlewares/Third_Party/FatFs/src/ff.c **** 
4993:Middlewares/Third_Party/FatFs/src/ff.c **** 			case FS_FAT32:
4994:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BS_VolID32; break;
4995:Middlewares/Third_Party/FatFs/src/ff.c **** 
4996:Middlewares/Third_Party/FatFs/src/ff.c **** 			default:
4997:Middlewares/Third_Party/FatFs/src/ff.c **** 				di = BS_VolID;
4998:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
4999:Middlewares/Third_Party/FatFs/src/ff.c **** 			*vsn = ld_dword(fs->win + di);
5000:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
ARM GAS  /tmp/ccBYTIZg.s 			page 114


5001:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5002:Middlewares/Third_Party/FatFs/src/ff.c **** 
5003:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
5004:Middlewares/Third_Party/FatFs/src/ff.c **** }
5005:Middlewares/Third_Party/FatFs/src/ff.c **** 
5006:Middlewares/Third_Party/FatFs/src/ff.c **** 
5007:Middlewares/Third_Party/FatFs/src/ff.c **** 
5008:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
5009:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5010:Middlewares/Third_Party/FatFs/src/ff.c **** /* Set Volume Label                                                      */
5011:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5012:Middlewares/Third_Party/FatFs/src/ff.c **** 
5013:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_setlabel (
5014:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* label	/* Pointer to the volume label to set */
5015:Middlewares/Third_Party/FatFs/src/ff.c **** )
5016:Middlewares/Third_Party/FatFs/src/ff.c **** {
5017:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5018:Middlewares/Third_Party/FatFs/src/ff.c **** 	DIR dj;
5019:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5020:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE dirvn[22];
5021:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j, slen;
5022:Middlewares/Third_Party/FatFs/src/ff.c **** 	WCHAR w;
5023:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const char badchr[] = "\"*+,.:;<=>\?[]|\x7F";
5024:Middlewares/Third_Party/FatFs/src/ff.c **** 
5025:Middlewares/Third_Party/FatFs/src/ff.c **** 
5026:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get logical drive */
5027:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&label, &fs, FA_WRITE);
5028:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5029:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
5030:Middlewares/Third_Party/FatFs/src/ff.c **** 
5031:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get length of given volume label */
5032:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (slen = 0; (UINT)label[slen] >= ' '; slen++) ;	/* Get name length */
5033:Middlewares/Third_Party/FatFs/src/ff.c **** 
5034:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5035:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5036:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = j = 0; i < slen; ) {	/* Create volume label in directory form */
5037:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = label[i++];
5038:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_LFN_UNICODE
5039:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (IsDBCS1(w)) {
5040:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = (i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5041:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5042:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = ff_convert(w, 1);
5043:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5044:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (w == 0 || chk_chr(badchr, w) || j == 22) {	/* Check validity check validity of the volume la
5045:Middlewares/Third_Party/FatFs/src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5046:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5047:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(dirvn + j, w); j += 2;
5048:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5049:Middlewares/Third_Party/FatFs/src/ff.c **** 		slen = j;
5050:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5051:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5052:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* On the FAT12/16/32 volume */
5053:Middlewares/Third_Party/FatFs/src/ff.c **** 		for ( ; slen && label[slen - 1] == ' '; slen--) ;	/* Remove trailing spaces */
5054:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (slen) {		/* Is there a volume label to be set? */
5055:Middlewares/Third_Party/FatFs/src/ff.c **** 			dirvn[0] = 0; i = j = 0;	/* Create volume label in directory form */
5056:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {
5057:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
ARM GAS  /tmp/ccBYTIZg.s 			page 115


5058:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(ff_wtoupper(label[i++]), 0);
5059:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5060:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = (BYTE)label[i++];
5061:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsDBCS1(w)) {
5062:Middlewares/Third_Party/FatFs/src/ff.c **** 					w = (j < 10 && i < slen && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
5063:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5064:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
5065:Middlewares/Third_Party/FatFs/src/ff.c **** 				w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
5066:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5067:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
5068:Middlewares/Third_Party/FatFs/src/ff.c **** #ifdef _EXCVT
5069:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
5070:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5071:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
5072:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5073:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5074:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5075:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w == 0 || chk_chr(badchr, w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) {	/* Reject invalid ch
5076:Middlewares/Third_Party/FatFs/src/ff.c **** 					LEAVE_FF(fs, FR_INVALID_NAME);
5077:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5078:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (w >= 0x100) dirvn[j++] = (BYTE)(w >> 8);
5079:Middlewares/Third_Party/FatFs/src/ff.c **** 				dirvn[j++] = (BYTE)w;
5080:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (i < slen);
5081:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (j < 11) dirvn[j++] = ' ';	/* Fill remaining name field */
5082:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5083:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5084:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5085:Middlewares/Third_Party/FatFs/src/ff.c **** 
5086:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Set volume label */
5087:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.sclust = 0;		/* Open root directory */
5088:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = dir_sdi(&dj, 0);
5089:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
5090:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_read(&dj, 1);	/* Get volume label entry */
5091:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
5092:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5093:Middlewares/Third_Party/FatFs/src/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
5094:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
5095:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5096:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (slen) {
5097:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5098:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
5099:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5100:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5101:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5102:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
5103:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = sync_fs(fs);
5104:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {			/* No volume label entry is found or error */
5105:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) {
5106:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_OK;
5107:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (slen) {	/* Create a volume label entry */
5108:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5109:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
5110:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clear the entry */
5111:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5112:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[XDIR_Type] = 0x83;		/* Create 83 entry */
5113:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);
5114:Middlewares/Third_Party/FatFs/src/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, slen);
ARM GAS  /tmp/ccBYTIZg.s 			page 116


5115:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
5116:Middlewares/Third_Party/FatFs/src/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5117:Middlewares/Third_Party/FatFs/src/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5118:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
5119:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
5120:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = sync_fs(fs);
5121:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5122:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5123:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5124:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5125:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5126:Middlewares/Third_Party/FatFs/src/ff.c **** 
5127:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
5128:Middlewares/Third_Party/FatFs/src/ff.c **** }
5129:Middlewares/Third_Party/FatFs/src/ff.c **** 
5130:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* !_FS_READONLY */
5131:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_LABEL */
5132:Middlewares/Third_Party/FatFs/src/ff.c **** 
5133:Middlewares/Third_Party/FatFs/src/ff.c **** 
5134:Middlewares/Third_Party/FatFs/src/ff.c **** 
5135:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_EXPAND && !_FS_READONLY
5136:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5137:Middlewares/Third_Party/FatFs/src/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5138:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5139:Middlewares/Third_Party/FatFs/src/ff.c **** 
5140:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_expand (
5141:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5142:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5143:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5144:Middlewares/Third_Party/FatFs/src/ff.c **** )
5145:Middlewares/Third_Party/FatFs/src/ff.c **** {
5146:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5147:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5148:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5149:Middlewares/Third_Party/FatFs/src/ff.c **** 
5150:Middlewares/Third_Party/FatFs/src/ff.c **** 
5151:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5152:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5153:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5154:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5155:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5156:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5157:Middlewares/Third_Party/FatFs/src/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5158:Middlewares/Third_Party/FatFs/src/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5159:Middlewares/Third_Party/FatFs/src/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5160:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5161:Middlewares/Third_Party/FatFs/src/ff.c **** 
5162:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5163:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5164:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5165:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5166:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5167:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5168:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (opt) {		/* Allocate it now */
5169:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5170:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl + tcl - 1;
5171:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
ARM GAS  /tmp/ccBYTIZg.s 			page 117


5172:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl - 1;
5173:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5174:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5175:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5176:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5177:Middlewares/Third_Party/FatFs/src/ff.c **** 	{
5178:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst = stcl; ncl = 0;
5179:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5180:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = get_fat(&fp->obj, clst);
5181:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5182:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5183:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5184:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5185:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5186:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5187:Middlewares/Third_Party/FatFs/src/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5188:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5189:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5190:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5191:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5192:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (opt) {		/* Allocate it now */
5193:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5194:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5195:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
5196:Middlewares/Third_Party/FatFs/src/ff.c **** 					lclst = clst;
5197:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5198:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5199:Middlewares/Third_Party/FatFs/src/ff.c **** 				lclst = scl - 1;
5200:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5201:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5202:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5203:Middlewares/Third_Party/FatFs/src/ff.c **** 
5204:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
5205:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5206:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt) {	/* Is it allocated now? */
5207:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5208:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fsz;
5209:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5210:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
5211:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5212:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->free_clst -= tcl;
5213:Middlewares/Third_Party/FatFs/src/ff.c **** 				fs->fsi_flag |= 1;
5214:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5215:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5216:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5217:Middlewares/Third_Party/FatFs/src/ff.c **** 
5218:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
5219:Middlewares/Third_Party/FatFs/src/ff.c **** }
5220:Middlewares/Third_Party/FatFs/src/ff.c **** 
5221:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_EXPAND && !_FS_READONLY */
5222:Middlewares/Third_Party/FatFs/src/ff.c **** 
5223:Middlewares/Third_Party/FatFs/src/ff.c **** 
5224:Middlewares/Third_Party/FatFs/src/ff.c **** 
5225:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_FORWARD
5226:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5227:Middlewares/Third_Party/FatFs/src/ff.c **** /* Forward data to the stream directly                                   */
5228:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
ARM GAS  /tmp/ccBYTIZg.s 			page 118


5229:Middlewares/Third_Party/FatFs/src/ff.c **** 
5230:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_forward (
5231:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5232:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5233:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5234:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5235:Middlewares/Third_Party/FatFs/src/ff.c **** )
5236:Middlewares/Third_Party/FatFs/src/ff.c **** {
5237:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
5238:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
5239:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD clst, sect;
5240:Middlewares/Third_Party/FatFs/src/ff.c **** 	FSIZE_t remain;
5241:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rcnt, csect;
5242:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE *dbuf;
5243:Middlewares/Third_Party/FatFs/src/ff.c **** 
5244:Middlewares/Third_Party/FatFs/src/ff.c **** 
5245:Middlewares/Third_Party/FatFs/src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5246:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5247:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5248:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5249:Middlewares/Third_Party/FatFs/src/ff.c **** 
5250:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5251:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5252:Middlewares/Third_Party/FatFs/src/ff.c **** 
5253:Middlewares/Third_Party/FatFs/src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5254:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5255:Middlewares/Third_Party/FatFs/src/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5256:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5257:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5258:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5259:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5260:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5261:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5262:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5263:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5264:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5265:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = clust2sect(fs, fp->clust);			/* Get current data sector */
5266:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!sect) ABORT(fs, FR_INT_ERR);
5267:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect += csect;
5268:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
5269:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5270:Middlewares/Third_Party/FatFs/src/ff.c **** 		dbuf = fs->win;
5271:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5272:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5273:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
5274:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5275:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5276:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5277:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5278:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5279:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5280:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5281:Middlewares/Third_Party/FatFs/src/ff.c **** 		dbuf = fp->buf;
5282:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5283:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->sect = sect;
5284:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
5285:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
ARM GAS  /tmp/ccBYTIZg.s 			page 119


5286:Middlewares/Third_Party/FatFs/src/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5287:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!rcnt) ABORT(fs, FR_INT_ERR);
5288:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5289:Middlewares/Third_Party/FatFs/src/ff.c **** 
5290:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, FR_OK);
5291:Middlewares/Third_Party/FatFs/src/ff.c **** }
5292:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_FORWARD */
5293:Middlewares/Third_Party/FatFs/src/ff.c **** 
5294:Middlewares/Third_Party/FatFs/src/ff.c **** 
5295:Middlewares/Third_Party/FatFs/src/ff.c **** 
5296:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_MKFS && !_FS_READONLY
5297:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5298:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create an FAT/exFAT volume                                            */
5299:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5300:Middlewares/Third_Party/FatFs/src/ff.c **** 
5301:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_mkfs (
5302:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5303:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE opt,			/* Format option */
5304:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD au,			/* Size of allocation unit (cluster) [byte] */
5305:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* work,			/* Pointer to working buffer */
5306:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT len			/* Size of working buffer */
5307:Middlewares/Third_Party/FatFs/src/ff.c **** )
5308:Middlewares/Third_Party/FatFs/src/ff.c **** {
5309:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
5310:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
5311:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT12/16 volum
5312:Middlewares/Third_Party/FatFs/src/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5313:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, sys, *buf, *pte, pdrv, part;
5314:Middlewares/Third_Party/FatFs/src/ff.c **** 	WORD ss;
5315:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD szb_buf, sz_buf, sz_blk, n_clst, pau, sect, nsect, n;
5316:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD b_vol, b_fat, b_data;				/* Base LBA for volume, fat, data */
5317:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sz_vol, sz_rsv, sz_fat, sz_dir;	/* Size for volume, fat, dir, data */
5318:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i;
5319:Middlewares/Third_Party/FatFs/src/ff.c **** 	int vol;
5320:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
5321:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM || _FS_EXFAT
5322:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD tbl[3];
5323:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5324:Middlewares/Third_Party/FatFs/src/ff.c **** 
5325:Middlewares/Third_Party/FatFs/src/ff.c **** 
5326:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check mounted drive and clear work area */
5327:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5328:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5329:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
5330:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
5331:Middlewares/Third_Party/FatFs/src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
5332:Middlewares/Third_Party/FatFs/src/ff.c **** 
5333:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Check physical drive status */
5334:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(pdrv);
5335:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5336:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5337:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
5338:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
5339:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5340:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5341:Middlewares/Third_Party/FatFs/src/ff.c **** #else
5342:Middlewares/Third_Party/FatFs/src/ff.c **** 	ss = _MAX_SS;
ARM GAS  /tmp/ccBYTIZg.s 			page 120


5343:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Che
5345:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
5346:Middlewares/Third_Party/FatFs/src/ff.c **** 
5347:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Get working buffer */
5348:Middlewares/Third_Party/FatFs/src/ff.c **** 	buf = (BYTE*)work;		/* Working buffer */
5349:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_buf = len / ss;		/* Size of working buffer (sector) */
5350:Middlewares/Third_Party/FatFs/src/ff.c **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
5351:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!szb_buf) return FR_MKFS_ABORTED;
5352:Middlewares/Third_Party/FatFs/src/ff.c **** 
5353:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5354:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {
5355:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get partition information from partition table in the MBR */
5356:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Load MBR */
5357:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;	/* Check if MBR is valid */
5358:Middlewares/Third_Party/FatFs/src/ff.c **** 		pte = buf + (MBR_Table + (part - 1) * SZ_PTE);
5359:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
5360:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5361:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5362:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5363:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create a single-partition in this function */
5364:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
5365:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
5366:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
5368:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
5370:Middlewares/Third_Party/FatFs/src/ff.c **** 
5371:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Pre-determine the FAT type */
5372:Middlewares/Third_Party/FatFs/src/ff.c **** 	do {
5373:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
5374:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms 
5375:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_EXFAT; break;
5376:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5377:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5378:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
5379:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
5380:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
5381:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
5382:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5383:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5384:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
5385:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
5386:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (0);
5387:Middlewares/Third_Party/FatFs/src/ff.c **** 
5388:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
5389:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == FS_EXFAT) {	/* Create an exFAT volume */
5390:Middlewares/Third_Party/FatFs/src/ff.c **** 		DWORD szb_bit, szb_case, sum, nb, cl;
5391:Middlewares/Third_Party/FatFs/src/ff.c **** 		WCHAR ch, si;
5392:Middlewares/Third_Party/FatFs/src/ff.c **** 		UINT j, st;
5393:Middlewares/Third_Party/FatFs/src/ff.c **** 		BYTE b;
5394:Middlewares/Third_Party/FatFs/src/ff.c **** 
5395:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x1000) return FR_MKFS_ABORTED;	/* Too small volume? */
5396:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
5397:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area may be erased *
5398:Middlewares/Third_Party/FatFs/src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5399:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccBYTIZg.s 			page 121


5400:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Determine FAT location, data location and number of clusters */
5401:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!au) {	/* au auto-selection */
5402:Middlewares/Third_Party/FatFs/src/ff.c **** 			au = 8;
5403:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x80000) au = 64;		/* >= 512Ks */
5404:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x4000000) au = 256;	/* >= 64Ms */
5405:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5406:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
5407:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_fat = ((sz_vol / au + 2) * 4 + ss - 1) / ss;			/* Number of FAT sectors */
5408:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~(sz_blk - 1);	/* Align data area to the erase block bou
5409:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (b_data >= sz_vol / 2) return FR_MKFS_ABORTED;		/* Too small volume? */
5410:Middlewares/Third_Party/FatFs/src/ff.c **** 		n_clst = (sz_vol - (b_data - b_vol)) / au;				/* Number of clusters */
5411:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n_clst <16) return FR_MKFS_ABORTED;					/* Too few clusters? */
5412:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (n_clst > MAX_EXFAT) return FR_MKFS_ABORTED;			/* Too many clusters? */
5413:Middlewares/Third_Party/FatFs/src/ff.c **** 
5414:Middlewares/Third_Party/FatFs/src/ff.c **** 		szb_bit = (n_clst + 7) / 8;						/* Size of allocation bitmap */
5415:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = (szb_bit + au * ss - 1) / (au * ss);	/* Number of allocation bitmap clusters */
5416:Middlewares/Third_Party/FatFs/src/ff.c **** 
5417:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create a compressed up-case table */
5418:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data + au * tbl[0];	/* Table start sector */
5419:Middlewares/Third_Party/FatFs/src/ff.c **** 		sum = 0;						/* Table checksum to be stored in the 82 entry */
5420:Middlewares/Third_Party/FatFs/src/ff.c **** 		st = si = i = j = szb_case = 0;
5421:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5422:Middlewares/Third_Party/FatFs/src/ff.c **** 			switch (st) {
5423:Middlewares/Third_Party/FatFs/src/ff.c **** 			case 0:
5424:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = ff_wtoupper(si);	/* Get an up-case char */
5425:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ch != si) {
5426:Middlewares/Third_Party/FatFs/src/ff.c **** 					si++; break;		/* Store the up-case char if exist */
5427:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5428:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
5429:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (j >= 128) {
5430:Middlewares/Third_Party/FatFs/src/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 */
5431:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5432:Middlewares/Third_Party/FatFs/src/ff.c **** 				st = 1;			/* Do not compress short run */
5433:Middlewares/Third_Party/FatFs/src/ff.c **** 				/* go to next case */
5434:Middlewares/Third_Party/FatFs/src/ff.c **** 			case 1:
5435:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = si++;		/* Fill the short run */
5436:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (--j == 0) st = 0;
5437:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
5438:Middlewares/Third_Party/FatFs/src/ff.c **** 
5439:Middlewares/Third_Party/FatFs/src/ff.c **** 			default:
5440:Middlewares/Third_Party/FatFs/src/ff.c **** 				ch = (WCHAR)j; si += j;	/* Number of chars to skip */
5441:Middlewares/Third_Party/FatFs/src/ff.c **** 				st = 0;
5442:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5443:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
5444:Middlewares/Third_Party/FatFs/src/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
5445:Middlewares/Third_Party/FatFs/src/ff.c **** 			i += 2; szb_case += 2;
5446:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!si || i == szb_buf) {		/* Write buffered data when buffer full or end of process */
5447:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = (i + ss - 1) / ss;
5448:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5449:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; i = 0;
5450:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5451:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (si);
5452:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[1] = (szb_case + au * ss - 1) / (au * ss);	/* Number of up-case table clusters */
5453:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[2] = 1;										/* Number of root dir clusters */
5454:Middlewares/Third_Party/FatFs/src/ff.c **** 
5455:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the allocation bitmap */
5456:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of sectors */
ARM GAS  /tmp/ccBYTIZg.s 			page 122


5457:Middlewares/Third_Party/FatFs/src/ff.c **** 		nb = tbl[0] + tbl[1] + tbl[2];					/* Number of clusters in-use by system */
5458:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5459:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, szb_buf);
5460:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; nb >= 8 && i < szb_buf; buf[i++] = 0xFF, nb -= 8) ;
5461:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (b = 1; nb && i < szb_buf; buf[i] |= b, b <<= 1, nb--) ;
5462:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
5463:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5464:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5465:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5466:Middlewares/Third_Party/FatFs/src/ff.c **** 
5467:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the FAT */
5468:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
5469:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = nb = cl = 0;
5470:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5471:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, szb_buf); i = 0;	/* Clear work area and reset write index */
5472:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl == 0) {	/* Set entry 0 and 1 */
5473:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; cl++;
5474:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; cl++;
5475:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5476:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
5477:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (nb && i < szb_buf) {			/* Create a chain */
5478:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(buf + i, (nb > 1) ? cl + 1 : 0xFFFFFFFF);
5479:Middlewares/Third_Party/FatFs/src/ff.c **** 					i += 4; cl++; nb--;
5480:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5481:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!nb && j < 3) nb = tbl[j++];	/* Next chain */
5482:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nb && i < szb_buf);
5483:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
5484:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5485:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5486:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5487:Middlewares/Third_Party/FatFs/src/ff.c **** 
5488:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize the root directory */
5489:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, szb_buf);
5490:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 0 + 0] = 0x83;		/* 83 entry (volume label) */
5491:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 1 + 0] = 0x81;		/* 81 entry (allocation bitmap) */
5492:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);
5493:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);
5494:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[SZDIRE * 2 + 0] = 0x82;		/* 82 entry (up-case table) */
5495:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);
5496:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + tbl[0]);
5497:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);
5498:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_data + au * (tbl[0] + tbl[1]);	nsect = au;	/* Start of the root directory and number of 
5499:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {	/* Fill root directory sectors */
5500:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5501:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) return FR_DISK_ERR;
5502:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5503:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5504:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5505:Middlewares/Third_Party/FatFs/src/ff.c **** 
5506:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create two set of the exFAT VBR blocks */
5507:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_vol;
5508:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (n = 0; n < 2; n++) {
5509:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Main record (+0) */
5510:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5511:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
5512:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
5513:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
ARM GAS  /tmp/ccBYTIZg.s 			page 123


5514:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FatOfsEx, b_fat - b_vol);			/* FAT offset [sector] */
5515:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
5516:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_DataOfsEx, b_data - b_vol);			/* Data offset [sector] */
5517:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
5518:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + tbl[0] + tbl[1]);	/* Root dir cluster # */
5519:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
5520:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* File system version (1.00) */
5521:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
5522:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluster s
5523:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
5524:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
5525:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
5526:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
5527:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
5528:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
5529:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5530:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5531:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Extended bootstrap record (+1..+8) */
5532:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5533:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
5534:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (j = 1; j < 9; j++) {
5535:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5536:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5537:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5538:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* OEM/Reserved record (+9..+10) */
5539:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5540:Middlewares/Third_Party/FatFs/src/ff.c **** 			for ( ; j < 11; j++) {
5541:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
5542:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5543:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5544:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Sum record (+11) */
5545:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
5546:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) return FR_DISK_ERR;
5547:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5548:Middlewares/Third_Party/FatFs/src/ff.c **** 
5549:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else
5550:Middlewares/Third_Party/FatFs/src/ff.c **** #endif	/* _FS_EXFAT */
5551:Middlewares/Third_Party/FatFs/src/ff.c **** 	{	/* Create an FAT12/16/32 volume */
5552:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 			pau = au;
5554:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
5555:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {	/* FAT32 volume */
5556:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
5558:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5559:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5560:Middlewares/Third_Party/FatFs/src/ff.c **** 				n_clst = sz_vol / pau;	/* Number of clusters */
5561:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
5562:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
5563:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = 0;		/* No static directory */
5564:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
5565:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
5566:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
5567:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
5569:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5570:Middlewares/Third_Party/FatFs/src/ff.c **** 				n_clst = sz_vol / pau;
ARM GAS  /tmp/ccBYTIZg.s 			page 124


5571:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT12) {
5572:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
5573:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
5574:Middlewares/Third_Party/FatFs/src/ff.c **** 					fmt = FS_FAT12;
5575:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
5576:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5577:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
5578:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
5579:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
5580:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5581:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
5582:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
5583:Middlewares/Third_Party/FatFs/src/ff.c **** 
5584:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Align data base to erase block boundary (for flash memory media) */
5585:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current d
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv += n; b_fat += n;
5588:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
5589:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat += n / n_fats;
5590:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5591:Middlewares/Third_Party/FatFs/src/ff.c **** 
5592:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
5593:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
5594:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
5595:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
5596:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
5597:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5599:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5600:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5601:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT16) {
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (pau * 2) <= 64) {
5604:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
5605:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((opt & FM_FAT32)) {
5607:Middlewares/Third_Party/FatFs/src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
5608:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
5609:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5610:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5611:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5612:Middlewares/Third_Party/FatFs/src/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
5613:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
5614:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
5615:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5616:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5617:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT1
5618:Middlewares/Third_Party/FatFs/src/ff.c **** 
5619:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Ok, it is the valid cluster configuration */
5620:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
5621:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (1);
5622:Middlewares/Third_Party/FatFs/src/ff.c **** 
5623:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_TRIM
5624:Middlewares/Third_Party/FatFs/src/ff.c **** 		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased *
5625:Middlewares/Third_Party/FatFs/src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, tbl);
5626:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5627:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create FAT VBR */
ARM GAS  /tmp/ccBYTIZg.s 			page 125


5628:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, ss);
5629:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
5630:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
5631:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
5632:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
5633:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
5635:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
5636:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
5637:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5638:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
5639:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5640:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
5641:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
5642:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
5643:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
5644:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5645:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
5646:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
5647:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
5648:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
5649:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
5651:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
5652:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
5653:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5654:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
5655:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
5656:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
5657:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
5658:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
5659:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5660:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
5661:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
5662:Middlewares/Third_Party/FatFs/src/ff.c **** 
5663:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Create FSINFO record if needed */
5664:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5665:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
5666:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5667:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
5669:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
5670:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
5671:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
5672:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
5673:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
5674:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5675:Middlewares/Third_Party/FatFs/src/ff.c **** 
5676:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize FAT area */
5677:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_set(buf, 0, (UINT)szb_buf);
5678:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat;		/* FAT start sector */
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
5680:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
5681:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
5682:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
5683:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
5684:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
ARM GAS  /tmp/ccBYTIZg.s 			page 126


5685:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
5686:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5687:Middlewares/Third_Party/FatFs/src/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
5688:Middlewares/Third_Party/FatFs/src/ff.c **** 			do {	/* Fill FAT sectors */
5689:Middlewares/Third_Party/FatFs/src/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
5690:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5691:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
5692:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; nsect -= n;
5693:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nsect);
5694:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5695:Middlewares/Third_Party/FatFs/src/ff.c **** 
5696:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Initialize root directory (fill with zero) */
5697:Middlewares/Third_Party/FatFs/src/ff.c **** 		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
5698:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
5699:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
5700:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
5701:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
5702:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
5703:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5704:Middlewares/Third_Party/FatFs/src/ff.c **** 
5705:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine system ID in the partition table */
5706:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_FS_EXFAT && fmt == FS_EXFAT) {
5707:Middlewares/Third_Party/FatFs/src/ff.c **** 		sys = 0x07;			/* HPFS/NTFS/exFAT */
5708:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5709:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
5710:Middlewares/Third_Party/FatFs/src/ff.c **** 			sys = 0x0C;		/* FAT32X */
5711:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5712:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (sz_vol >= 0x10000) {
5713:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
5714:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
5715:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
5716:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5717:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5718:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5719:Middlewares/Third_Party/FatFs/src/ff.c **** 
5720:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Update partition information */
5721:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_MULTI_PARTITION && part != 0) {	/* Created in the existing partition */
5722:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update system ID in the partition table */
5723:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
5724:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
5725:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
5726:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {								/* Created as a new single partition */
5727:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
5728:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
5729:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5730:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
5731:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_Boot] = 0;					/* Boot indicator */
5732:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
5733:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
5734:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
5735:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
5736:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
5737:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
5738:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
5739:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
5740:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
5741:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
ARM GAS  /tmp/ccBYTIZg.s 			page 127


5742:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
5743:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5744:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5745:Middlewares/Third_Party/FatFs/src/ff.c **** 
5746:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
5747:Middlewares/Third_Party/FatFs/src/ff.c **** 
5748:Middlewares/Third_Party/FatFs/src/ff.c **** 	return FR_OK;
5749:Middlewares/Third_Party/FatFs/src/ff.c **** }
5750:Middlewares/Third_Party/FatFs/src/ff.c **** 
5751:Middlewares/Third_Party/FatFs/src/ff.c **** 
5752:Middlewares/Third_Party/FatFs/src/ff.c **** 
5753:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MULTI_PARTITION
5754:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5755:Middlewares/Third_Party/FatFs/src/ff.c **** /* Create partition table on the physical drive                          */
5756:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5757:Middlewares/Third_Party/FatFs/src/ff.c **** 
5758:Middlewares/Third_Party/FatFs/src/ff.c **** FRESULT f_fdisk (
5759:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
5760:Middlewares/Third_Party/FatFs/src/ff.c **** 	const DWORD* szt,	/* Pointer to the size table for each partitions */
5761:Middlewares/Third_Party/FatFs/src/ff.c **** 	void* work			/* Pointer to the working buffer */
5762:Middlewares/Third_Party/FatFs/src/ff.c **** )
5763:Middlewares/Third_Party/FatFs/src/ff.c **** {
5764:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
5765:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
5766:Middlewares/Third_Party/FatFs/src/ff.c **** 	DSTATUS stat;
5767:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD sz_disk, sz_part, s_part;
5768:Middlewares/Third_Party/FatFs/src/ff.c **** 
5769:Middlewares/Third_Party/FatFs/src/ff.c **** 
5770:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(pdrv);
5771:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
5772:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
5773:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
5774:Middlewares/Third_Party/FatFs/src/ff.c **** 
5775:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Determine the CHS without any consideration of the drive geometry */
5776:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
5777:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (n == 256) n--;
5778:Middlewares/Third_Party/FatFs/src/ff.c **** 	e_hd = n - 1;
5779:Middlewares/Third_Party/FatFs/src/ff.c **** 	sz_cyl = 63 * n;
5780:Middlewares/Third_Party/FatFs/src/ff.c **** 	tot_cyl = sz_disk / sz_cyl;
5781:Middlewares/Third_Party/FatFs/src/ff.c **** 
5782:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Create partition table */
5783:Middlewares/Third_Party/FatFs/src/ff.c **** 	mem_set(buf, 0, _MAX_SS);
5784:Middlewares/Third_Party/FatFs/src/ff.c **** 	p = buf + MBR_Table; b_cyl = 0;
5785:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (i = 0; i < 4; i++, p += SZ_PTE) {
5786:Middlewares/Third_Party/FatFs/src/ff.c **** 		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;	/* Number of cylinder
5787:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!p_cyl) continue;
5788:Middlewares/Third_Party/FatFs/src/ff.c **** 		s_part = (DWORD)sz_cyl * b_cyl;
5789:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_part = (DWORD)sz_cyl * p_cyl;
5790:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (i == 0) {	/* Exclude first track of cylinder 0 */
5791:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_hd = 1;
5792:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_part += 63; sz_part -= 63;
5793:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
5794:Middlewares/Third_Party/FatFs/src/ff.c **** 			s_hd = 0;
5795:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5796:Middlewares/Third_Party/FatFs/src/ff.c **** 		e_cyl = b_cyl + p_cyl - 1;	/* End cylinder */
5797:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
5798:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 128


5799:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Set partition table */
5800:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[1] = s_hd;						/* Start head */
5801:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
5802:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[3] = (BYTE)b_cyl;					/* Start cylinder */
5803:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[4] = 0x07;						/* System type (temporary setting) */
5804:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[5] = e_hd;						/* End head */
5805:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
5806:Middlewares/Third_Party/FatFs/src/ff.c **** 		p[7] = (BYTE)e_cyl;					/* End cylinder */
5807:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(p + 8, s_part);			/* Start sector in LBA */
5808:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(p + 12, sz_part);			/* Number of sectors */
5809:Middlewares/Third_Party/FatFs/src/ff.c **** 
5810:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Next partition */
5811:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_cyl += p_cyl;
5812:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5813:Middlewares/Third_Party/FatFs/src/ff.c **** 	st_word(p, 0xAA55);
5814:Middlewares/Third_Party/FatFs/src/ff.c **** 
5815:Middlewares/Third_Party/FatFs/src/ff.c **** 	/* Write it to the MBR */
5816:Middlewares/Third_Party/FatFs/src/ff.c **** 	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DI
5817:Middlewares/Third_Party/FatFs/src/ff.c **** }
5818:Middlewares/Third_Party/FatFs/src/ff.c **** 
5819:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _MULTI_PARTITION */
5820:Middlewares/Third_Party/FatFs/src/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
5821:Middlewares/Third_Party/FatFs/src/ff.c **** 
5822:Middlewares/Third_Party/FatFs/src/ff.c **** 
5823:Middlewares/Third_Party/FatFs/src/ff.c **** 
5824:Middlewares/Third_Party/FatFs/src/ff.c **** 
5825:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_STRFUNC
5826:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5827:Middlewares/Third_Party/FatFs/src/ff.c **** /* Get a string from the file                                            */
5828:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5829:Middlewares/Third_Party/FatFs/src/ff.c **** 
5830:Middlewares/Third_Party/FatFs/src/ff.c **** TCHAR* f_gets (
5831:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR* buff,	/* Pointer to the string buffer to read */
5832:Middlewares/Third_Party/FatFs/src/ff.c **** 	int len,		/* Size of string buffer (characters) */
5833:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp			/* Pointer to the file object */
5834:Middlewares/Third_Party/FatFs/src/ff.c **** )
5835:Middlewares/Third_Party/FatFs/src/ff.c **** {
5836:Middlewares/Third_Party/FatFs/src/ff.c **** 	int n = 0;
5837:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, *p = buff;
5838:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s[2];
5839:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT rc;
5840:Middlewares/Third_Party/FatFs/src/ff.c **** 
5841:Middlewares/Third_Party/FatFs/src/ff.c **** 
5842:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (n < len - 1) {	/* Read characters until buffer gets filled */
5843:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5844:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
5845:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5846:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5847:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5848:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c >= 0x80) {
5849:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c < 0xC0) continue;	/* Skip stray trailer */
5850:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c < 0xE0) {			/* Two-byte sequence (0x80-0x7FF) */
5851:Middlewares/Third_Party/FatFs/src/ff.c **** 				f_read(fp, s, 1, &rc);
5852:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (rc != 1) break;
5853:Middlewares/Third_Party/FatFs/src/ff.c **** 				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
5854:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c < 0x80) c = '?';	/* Reject invalid code range */
5855:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
ARM GAS  /tmp/ccBYTIZg.s 			page 129


5856:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (c < 0xF0) {		/* Three-byte sequence (0x800-0xFFFF) */
5857:Middlewares/Third_Party/FatFs/src/ff.c **** 					f_read(fp, s, 2, &rc);
5858:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (rc != 2) break;
5859:Middlewares/Third_Party/FatFs/src/ff.c **** 					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
5860:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (c < 0x800) c = '?';	/* Reject invalid code range */
5861:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {			/* Reject four-byte sequence */
5862:Middlewares/Third_Party/FatFs/src/ff.c **** 					c = '?';
5863:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
5864:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
5865:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5866:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
5867:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 2, &rc);
5868:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 2) break;
5869:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[1] + (s[0] << 8);
5870:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
5871:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 2, &rc);
5872:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 2) break;
5873:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0] + (s[1] << 8);
5874:Middlewares/Third_Party/FatFs/src/ff.c **** #else						/* Read a character in ANSI/OEM */
5875:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5876:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5877:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5878:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsDBCS1(c)) {
5879:Middlewares/Third_Party/FatFs/src/ff.c **** 			f_read(fp, s, 1, &rc);
5880:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (rc != 1) break;
5881:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = (c << 8) + s[0];
5882:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5883:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = ff_convert(c, 1);	/* OEM -> Unicode */
5884:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) c = '?';
5885:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5886:Middlewares/Third_Party/FatFs/src/ff.c **** #else						/* Read a character without conversion */
5887:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_read(fp, s, 1, &rc);
5888:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
5889:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
5890:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5891:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
5892:Middlewares/Third_Party/FatFs/src/ff.c **** 		*p++ = c;
5893:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
5894:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
5895:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5896:Middlewares/Third_Party/FatFs/src/ff.c **** 	*p = 0;
5897:Middlewares/Third_Party/FatFs/src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
5898:Middlewares/Third_Party/FatFs/src/ff.c **** }
5899:Middlewares/Third_Party/FatFs/src/ff.c **** 
5900:Middlewares/Third_Party/FatFs/src/ff.c **** 
5901:Middlewares/Third_Party/FatFs/src/ff.c **** 
5902:Middlewares/Third_Party/FatFs/src/ff.c **** 
5903:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
5904:Middlewares/Third_Party/FatFs/src/ff.c **** #include <stdarg.h>
5905:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5906:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a character to the file                                           */
5907:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
5908:Middlewares/Third_Party/FatFs/src/ff.c **** 
5909:Middlewares/Third_Party/FatFs/src/ff.c **** typedef struct {
5910:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
5911:Middlewares/Third_Party/FatFs/src/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of chars written */
5912:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE buf[64];	/* Write buffer */
ARM GAS  /tmp/ccBYTIZg.s 			page 130


5913:Middlewares/Third_Party/FatFs/src/ff.c **** } putbuff;
5914:Middlewares/Third_Party/FatFs/src/ff.c **** 
5915:Middlewares/Third_Party/FatFs/src/ff.c **** 
5916:Middlewares/Third_Party/FatFs/src/ff.c **** static
5917:Middlewares/Third_Party/FatFs/src/ff.c **** void putc_bfd (		/* Buffered write with code conversion */
5918:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb,
5919:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c
5920:Middlewares/Third_Party/FatFs/src/ff.c **** )
5921:Middlewares/Third_Party/FatFs/src/ff.c **** {
5922:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bw;
5923:Middlewares/Third_Party/FatFs/src/ff.c **** 	int i;
5924:Middlewares/Third_Party/FatFs/src/ff.c **** 
5925:Middlewares/Third_Party/FatFs/src/ff.c **** 
5926:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
5927:Middlewares/Third_Party/FatFs/src/ff.c **** 		putc_bfd(pb, '\r');
5928:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5929:Middlewares/Third_Party/FatFs/src/ff.c **** 
5930:Middlewares/Third_Party/FatFs/src/ff.c **** 	i = pb->idx;		/* Write index of pb->buf[] */
5931:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i < 0) return;
5932:Middlewares/Third_Party/FatFs/src/ff.c **** 
5933:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
5934:Middlewares/Third_Party/FatFs/src/ff.c **** #if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
5935:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (c < 0x80) {				/* 7-bit */
5936:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)c;
5937:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
5938:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c < 0x800) {		/* 11-bit */
5939:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
5940:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* 16-bit */
5941:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
5942:Middlewares/Third_Party/FatFs/src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
5943:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
5944:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
5945:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5946:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
5947:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5948:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5949:Middlewares/Third_Party/FatFs/src/ff.c **** #elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
5950:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5951:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)(c >> 8);
5952:Middlewares/Third_Party/FatFs/src/ff.c **** #else							/* Write a character in ANSI/OEM */
5953:Middlewares/Third_Party/FatFs/src/ff.c **** 	c = ff_convert(c, 0);	/* Unicode -> OEM */
5954:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!c) c = '?';
5955:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (c >= 0x100)
5956:Middlewares/Third_Party/FatFs/src/ff.c **** 		pb->buf[i++] = (BYTE)(c >> 8);
5957:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5958:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5959:Middlewares/Third_Party/FatFs/src/ff.c **** #else							/* Write a character without conversion */
5960:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->buf[i++] = (BYTE)c;
5961:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
5962:Middlewares/Third_Party/FatFs/src/ff.c **** 
5963:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
5964:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
5965:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
5966:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
5967:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->idx = i;
5968:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr++;
5969:Middlewares/Third_Party/FatFs/src/ff.c **** }
ARM GAS  /tmp/ccBYTIZg.s 			page 131


5970:Middlewares/Third_Party/FatFs/src/ff.c **** 
5971:Middlewares/Third_Party/FatFs/src/ff.c **** 
5972:Middlewares/Third_Party/FatFs/src/ff.c **** static
5973:Middlewares/Third_Party/FatFs/src/ff.c **** int putc_flush (		/* Flush left characters in the buffer */
5974:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb
5975:Middlewares/Third_Party/FatFs/src/ff.c **** )
5976:Middlewares/Third_Party/FatFs/src/ff.c **** {
5977:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
5978:Middlewares/Third_Party/FatFs/src/ff.c **** 
5979:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
5980:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
5981:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
5982:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
5983:Middlewares/Third_Party/FatFs/src/ff.c **** }
5984:Middlewares/Third_Party/FatFs/src/ff.c **** 
5985:Middlewares/Third_Party/FatFs/src/ff.c **** 
5986:Middlewares/Third_Party/FatFs/src/ff.c **** static
5987:Middlewares/Third_Party/FatFs/src/ff.c **** void putc_init (		/* Initialize write buffer */
5988:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff* pb,
5989:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp
5990:Middlewares/Third_Party/FatFs/src/ff.c **** )
5991:Middlewares/Third_Party/FatFs/src/ff.c **** {
 1407              		.loc 1 5991 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 0
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411              		@ link register save eliminated.
 1412              	.LVL190:
5992:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->fp = fp;
 1413              		.loc 1 5992 0
 1414 0000 0160     		str	r1, [r0]
5993:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr = pb->idx = 0;
 1415              		.loc 1 5993 0
 1416 0002 0023     		movs	r3, #0
 1417 0004 4360     		str	r3, [r0, #4]
 1418 0006 8360     		str	r3, [r0, #8]
 1419 0008 7047     		bx	lr
 1420              		.cfi_endproc
 1421              	.LFE199:
 1423              		.section	.text.validate,"ax",%progbits
 1424              		.align	1
 1425              		.syntax unified
 1426              		.thumb
 1427              		.thumb_func
 1428              		.fpu fpv5-d16
 1430              	validate:
 1431              	.LFB178:
3220:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
 1432              		.loc 1 3220 0
 1433              		.cfi_startproc
 1434              		@ args = 0, pretend = 0, frame = 0
 1435              		@ frame_needed = 0, uses_anonymous_args = 0
 1436              	.LVL191:
 1437 0000 38B5     		push	{r3, r4, r5, lr}
 1438              	.LCFI20:
 1439              		.cfi_def_cfa_offset 16
 1440              		.cfi_offset 3, -16
ARM GAS  /tmp/ccBYTIZg.s 			page 132


 1441              		.cfi_offset 4, -12
 1442              		.cfi_offset 5, -8
 1443              		.cfi_offset 14, -4
 1444 0002 0D46     		mov	r5, r1
 1445              	.LVL192:
3224:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 1446              		.loc 1 3224 0
 1447 0004 0446     		mov	r4, r0
 1448 0006 B0B1     		cbz	r0, .L159
3224:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 1449              		.loc 1 3224 0 is_stmt 0 discriminator 1
 1450 0008 0368     		ldr	r3, [r0]
 1451 000a B3B1     		cbz	r3, .L160
3224:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 1452              		.loc 1 3224 0 discriminator 2
 1453 000c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1454 000e 22B9     		cbnz	r2, .L166
3221:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1455              		.loc 1 3221 0 is_stmt 1
 1456 0010 0920     		movs	r0, #9
 1457              	.LVL193:
 1458              	.L157:
3241:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 1459              		.loc 1 3241 0
 1460 0012 B0B9     		cbnz	r0, .L164
3241:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 1461              		.loc 1 3241 0 is_stmt 0 discriminator 1
 1462 0014 2368     		ldr	r3, [r4]
 1463              	.L158:
3241:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 1464              		.loc 1 3241 0 discriminator 4
 1465 0016 2B60     		str	r3, [r5]
3243:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1466              		.loc 1 3243 0 is_stmt 1 discriminator 4
 1467 0018 38BD     		pop	{r3, r4, r5, pc}
 1468              	.LVL194:
 1469              	.L166:
3224:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT
 1470              		.loc 1 3224 0 discriminator 3
 1471 001a 8188     		ldrh	r1, [r0, #4]
 1472              	.LVL195:
 1473 001c DA88     		ldrh	r2, [r3, #6]
 1474 001e 9142     		cmp	r1, r2
 1475 0020 01D0     		beq	.L167
3221:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1476              		.loc 1 3221 0
 1477 0022 0920     		movs	r0, #9
 1478              	.LVL196:
 1479 0024 F5E7     		b	.L157
 1480              	.LVL197:
 1481              	.L167:
3236:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
 1482              		.loc 1 3236 0
 1483 0026 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 1484              	.LVL198:
 1485 0028 FFF7FEFF 		bl	disk_status
 1486              	.LVL199:
ARM GAS  /tmp/ccBYTIZg.s 			page 133


 1487 002c 10F0010F 		tst	r0, #1
 1488 0030 05D0     		beq	.L163
3221:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1489              		.loc 1 3221 0
 1490 0032 0920     		movs	r0, #9
 1491 0034 EDE7     		b	.L157
 1492              	.LVL200:
 1493              	.L159:
 1494 0036 0920     		movs	r0, #9
 1495              	.LVL201:
 1496 0038 EBE7     		b	.L157
 1497              	.LVL202:
 1498              	.L160:
 1499 003a 0920     		movs	r0, #9
 1500              	.LVL203:
 1501 003c E9E7     		b	.L157
 1502              	.LVL204:
 1503              	.L163:
3237:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1504              		.loc 1 3237 0
 1505 003e 0020     		movs	r0, #0
 1506 0040 E7E7     		b	.L157
 1507              	.LVL205:
 1508              	.L164:
3241:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 1509              		.loc 1 3241 0
 1510 0042 0023     		movs	r3, #0
 1511 0044 E7E7     		b	.L158
 1512              		.cfi_endproc
 1513              	.LFE178:
 1515              		.section	.text.sync_window,"ax",%progbits
 1516              		.align	1
 1517              		.syntax unified
 1518              		.thumb
 1519              		.thumb_func
 1520              		.fpu fpv5-d16
 1522              	sync_window:
 1523              	.LFB154:
 886:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD wsect;
 1524              		.loc 1 886 0
 1525              		.cfi_startproc
 1526              		@ args = 0, pretend = 0, frame = 0
 1527              		@ frame_needed = 0, uses_anonymous_args = 0
 1528              	.LVL206:
 1529 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1530              	.LCFI21:
 1531              		.cfi_def_cfa_offset 24
 1532              		.cfi_offset 3, -24
 1533              		.cfi_offset 4, -20
 1534              		.cfi_offset 5, -16
 1535              		.cfi_offset 6, -12
 1536              		.cfi_offset 7, -8
 1537              		.cfi_offset 14, -4
 1538              	.LVL207:
 892:Middlewares/Third_Party/FatFs/src/ff.c **** 		wsect = fs->winsect;	/* Current sector number */
 1539              		.loc 1 892 0
 1540 0002 C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
ARM GAS  /tmp/ccBYTIZg.s 			page 134


 1541 0004 0BB9     		cbnz	r3, .L176
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1542              		.loc 1 889 0
 1543 0006 0020     		movs	r0, #0
 1544              	.LVL208:
 1545 0008 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1546              	.LVL209:
 1547              	.L176:
 1548 000a 0446     		mov	r4, r0
 893:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 1549              		.loc 1 893 0
 1550 000c C66A     		ldr	r6, [r0, #44]
 1551              	.LVL210:
 894:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_DISK_ERR;
 1552              		.loc 1 894 0
 1553 000e 00F13007 		add	r7, r0, #48
 1554 0012 0123     		movs	r3, #1
 1555 0014 3246     		mov	r2, r6
 1556 0016 3946     		mov	r1, r7
 1557 0018 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1558              	.LVL211:
 1559 001a FFF7FEFF 		bl	disk_write
 1560              	.LVL212:
 1561 001e A8B9     		cbnz	r0, .L173
 897:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 1562              		.loc 1 897 0
 1563 0020 0023     		movs	r3, #0
 1564 0022 E370     		strb	r3, [r4, #3]
 898:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 1565              		.loc 1 898 0
 1566 0024 236A     		ldr	r3, [r4, #32]
 1567 0026 F31A     		subs	r3, r6, r3
 1568 0028 A269     		ldr	r2, [r4, #24]
 1569 002a 9342     		cmp	r3, r2
 1570 002c 10D2     		bcs	.L174
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1571              		.loc 1 899 0
 1572 002e A578     		ldrb	r5, [r4, #2]	@ zero_extendqisi2
 1573              	.LVL213:
 1574 0030 08E0     		b	.L170
 1575              	.L171:
 900:Middlewares/Third_Party/FatFs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 1576              		.loc 1 900 0 discriminator 3
 1577 0032 A369     		ldr	r3, [r4, #24]
 1578 0034 1E44     		add	r6, r6, r3
 1579              	.LVL214:
 901:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 1580              		.loc 1 901 0 discriminator 3
 1581 0036 0123     		movs	r3, #1
 1582 0038 3246     		mov	r2, r6
 1583 003a 3946     		mov	r1, r7
 1584 003c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1585 003e FFF7FEFF 		bl	disk_write
 1586              	.LVL215:
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1587              		.loc 1 899 0 discriminator 3
 1588 0042 013D     		subs	r5, r5, #1
ARM GAS  /tmp/ccBYTIZg.s 			page 135


 1589              	.LVL216:
 1590              	.L170:
 899:Middlewares/Third_Party/FatFs/src/ff.c **** 					wsect += fs->fsize;
 1591              		.loc 1 899 0 is_stmt 0 discriminator 1
 1592 0044 012D     		cmp	r5, #1
 1593 0046 F4D8     		bhi	.L171
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1594              		.loc 1 889 0 is_stmt 1
 1595 0048 0020     		movs	r0, #0
 1596 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1597              	.LVL217:
 1598              	.L173:
 895:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 1599              		.loc 1 895 0
 1600 004c 0120     		movs	r0, #1
 1601 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1602              	.LVL218:
 1603              	.L174:
 889:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1604              		.loc 1 889 0
 1605 0050 0020     		movs	r0, #0
 1606              	.LVL219:
 907:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 1607              		.loc 1 907 0
 1608 0052 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1609              		.cfi_endproc
 1610              	.LFE154:
 1612              		.section	.text.move_window,"ax",%progbits
 1613              		.align	1
 1614              		.syntax unified
 1615              		.thumb
 1616              		.thumb_func
 1617              		.fpu fpv5-d16
 1619              	move_window:
 1620              	.LFB155:
 916:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 1621              		.loc 1 916 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 0
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 1625              	.LVL220:
 1626 0000 70B5     		push	{r4, r5, r6, lr}
 1627              	.LCFI22:
 1628              		.cfi_def_cfa_offset 16
 1629              		.cfi_offset 4, -16
 1630              		.cfi_offset 5, -12
 1631              		.cfi_offset 6, -8
 1632              		.cfi_offset 14, -4
 1633              	.LVL221:
 920:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 1634              		.loc 1 920 0
 1635 0002 C36A     		ldr	r3, [r0, #44]
 1636 0004 8B42     		cmp	r3, r1
 1637 0006 14D0     		beq	.L180
 1638 0008 0446     		mov	r4, r0
 1639 000a 0D46     		mov	r5, r1
 922:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
ARM GAS  /tmp/ccBYTIZg.s 			page 136


 1640              		.loc 1 922 0
 1641 000c FFF7FEFF 		bl	sync_window
 1642              	.LVL222:
 924:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 1643              		.loc 1 924 0
 1644 0010 0646     		mov	r6, r0
 1645 0012 08B1     		cbz	r0, .L183
 1646              	.LVL223:
 1647              	.L178:
 933:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1648              		.loc 1 933 0
 1649 0014 3046     		mov	r0, r6
 1650 0016 70BD     		pop	{r4, r5, r6, pc}
 1651              	.LVL224:
 1652              	.L183:
 925:Middlewares/Third_Party/FatFs/src/ff.c **** 				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 1653              		.loc 1 925 0
 1654 0018 0123     		movs	r3, #1
 1655 001a 2A46     		mov	r2, r5
 1656 001c 04F13001 		add	r1, r4, #48
 1657 0020 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1658              	.LVL225:
 1659 0022 FFF7FEFF 		bl	disk_read
 1660              	.LVL226:
 1661 0026 10B1     		cbz	r0, .L179
 927:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 1662              		.loc 1 927 0
 1663 0028 0126     		movs	r6, #1
 926:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 1664              		.loc 1 926 0
 1665 002a 4FF0FF35 		mov	r5, #-1
 1666              	.LVL227:
 1667              	.L179:
 929:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1668              		.loc 1 929 0
 1669 002e E562     		str	r5, [r4, #44]
 1670 0030 F0E7     		b	.L178
 1671              	.LVL228:
 1672              	.L180:
 917:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1673              		.loc 1 917 0
 1674 0032 0026     		movs	r6, #0
 1675 0034 EEE7     		b	.L178
 1676              		.cfi_endproc
 1677              	.LFE155:
 1679              		.section	.text.check_fs,"ax",%progbits
 1680              		.align	1
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1684              		.fpu fpv5-d16
 1686              	check_fs:
 1687              	.LFB176:
2969:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 1688              		.loc 1 2969 0
 1689              		.cfi_startproc
 1690              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBYTIZg.s 			page 137


 1691              		@ frame_needed = 0, uses_anonymous_args = 0
 1692              	.LVL229:
 1693 0000 10B5     		push	{r4, lr}
 1694              	.LCFI23:
 1695              		.cfi_def_cfa_offset 8
 1696              		.cfi_offset 4, -8
 1697              		.cfi_offset 14, -4
 1698 0002 0446     		mov	r4, r0
2970:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 1699              		.loc 1 2970 0
 1700 0004 0023     		movs	r3, #0
 1701 0006 C370     		strb	r3, [r0, #3]
 1702 0008 4FF0FF33 		mov	r3, #-1
 1703 000c C362     		str	r3, [r0, #44]
2971:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1704              		.loc 1 2971 0
 1705 000e FFF7FEFF 		bl	move_window
 1706              	.LVL230:
 1707 0012 08B1     		cbz	r0, .L193
 1708 0014 0420     		movs	r0, #4
 1709 0016 10BD     		pop	{r4, pc}
 1710              	.LVL231:
 1711              	.L193:
2973:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1712              		.loc 1 2973 0
 1713 0018 04F22E20 		addw	r0, r4, #558
 1714 001c FFF7FEFF 		bl	ld_word
 1715              	.LVL232:
 1716 0020 4AF65523 		movw	r3, #43605
 1717 0024 9842     		cmp	r0, r3
 1718 0026 01D0     		beq	.L194
 1719 0028 0320     		movs	r0, #3
 1720 002a 10BD     		pop	{r4, pc}
 1721              	.LVL233:
 1722              	.L194:
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1723              		.loc 1 2975 0
 1724 002c 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 1725 0030 E92B     		cmp	r3, #233
 1726 0032 07D0     		beq	.L186
2975:Middlewares/Third_Party/FatFs/src/ff.c **** 		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string *
 1727              		.loc 1 2975 0 is_stmt 0 discriminator 1
 1728 0034 236B     		ldr	r3, [r4, #48]
 1729 0036 03F0FF13 		and	r3, r3, #16711935
 1730 003a 0D4A     		ldr	r2, .L196
 1731 003c 9342     		cmp	r3, r2
 1732 003e 01D0     		beq	.L186
2982:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1733              		.loc 1 2982 0 is_stmt 1
 1734 0040 0220     		movs	r0, #2
 1735 0042 10BD     		pop	{r4, pc}
 1736              	.LVL234:
 1737              	.L186:
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1738              		.loc 1 2976 0
 1739 0044 04F16600 		add	r0, r4, #102
 1740 0048 FFF7FEFF 		bl	ld_dword
ARM GAS  /tmp/ccBYTIZg.s 			page 138


 1741              	.LVL235:
 1742 004c 20F07F40 		bic	r0, r0, #-16777216
 1743 0050 084B     		ldr	r3, .L196+4
 1744 0052 9842     		cmp	r0, r3
 1745 0054 0AD0     		beq	.L190
2977:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1746              		.loc 1 2977 0
 1747 0056 04F18200 		add	r0, r4, #130
 1748 005a FFF7FEFF 		bl	ld_dword
 1749              	.LVL236:
 1750 005e 064B     		ldr	r3, .L196+8
 1751 0060 9842     		cmp	r0, r3
 1752 0062 01D0     		beq	.L195
2982:Middlewares/Third_Party/FatFs/src/ff.c **** }
 1753              		.loc 1 2982 0
 1754 0064 0220     		movs	r0, #2
2983:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1755              		.loc 1 2983 0
 1756 0066 10BD     		pop	{r4, pc}
 1757              	.LVL237:
 1758              	.L195:
2977:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1759              		.loc 1 2977 0
 1760 0068 0020     		movs	r0, #0
 1761 006a 10BD     		pop	{r4, pc}
 1762              	.LVL238:
 1763              	.L190:
2976:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 1764              		.loc 1 2976 0
 1765 006c 0020     		movs	r0, #0
 1766 006e 10BD     		pop	{r4, pc}
 1767              	.LVL239:
 1768              	.L197:
 1769              		.align	2
 1770              	.L196:
 1771 0070 EB009000 		.word	9437419
 1772 0074 46415400 		.word	5521734
 1773 0078 46415433 		.word	861159750
 1774              		.cfi_endproc
 1775              	.LFE176:
 1777              		.section	.text.find_volume,"ax",%progbits
 1778              		.align	1
 1779              		.syntax unified
 1780              		.thumb
 1781              		.thumb_func
 1782              		.fpu fpv5-d16
 1784              	find_volume:
 1785              	.LFB177:
2998:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE fmt, *pt;
 1786              		.loc 1 2998 0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 16
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 1790              	.LVL240:
 1791 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1792              	.LCFI24:
 1793              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccBYTIZg.s 			page 139


 1794              		.cfi_offset 4, -32
 1795              		.cfi_offset 5, -28
 1796              		.cfi_offset 6, -24
 1797              		.cfi_offset 7, -20
 1798              		.cfi_offset 8, -16
 1799              		.cfi_offset 9, -12
 1800              		.cfi_offset 10, -8
 1801              		.cfi_offset 14, -4
 1802 0004 84B0     		sub	sp, sp, #16
 1803              	.LCFI25:
 1804              		.cfi_def_cfa_offset 48
 1805 0006 0E46     		mov	r6, r1
 1806 0008 1746     		mov	r7, r2
3009:Middlewares/Third_Party/FatFs/src/ff.c **** 	vol = get_ldnumber(path);
 1807              		.loc 1 3009 0
 1808 000a 0023     		movs	r3, #0
 1809 000c 0B60     		str	r3, [r1]
3010:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 1810              		.loc 1 3010 0
 1811 000e FFF7FEFF 		bl	get_ldnumber
 1812              	.LVL241:
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1813              		.loc 1 3011 0
 1814 0012 051E     		subs	r5, r0, #0
 1815 0014 C0F23881 		blt	.L216
3014:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1816              		.loc 1 3014 0
 1817 0018 A94B     		ldr	r3, .L250
 1818 001a 53F82540 		ldr	r4, [r3, r5, lsl #2]
 1819              	.LVL242:
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1820              		.loc 1 3015 0
 1821 001e 002C     		cmp	r4, #0
 1822 0020 00F03681 		beq	.L217
3018:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1823              		.loc 1 3018 0
 1824 0024 3460     		str	r4, [r6]
3020:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fs->fs_type) {					/* If the volume has been mounted */
 1825              		.loc 1 3020 0
 1826 0026 07F0FE07 		and	r7, r7, #254
 1827              	.LVL243:
3021:Middlewares/Third_Party/FatFs/src/ff.c **** 		stat = disk_status(fs->drv);
 1828              		.loc 1 3021 0
 1829 002a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1830 002c 7BB1     		cbz	r3, .L200
3022:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 1831              		.loc 1 3022 0
 1832 002e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1833              	.LVL244:
 1834 0030 FFF7FEFF 		bl	disk_status
 1835              	.LVL245:
3023:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 1836              		.loc 1 3023 0
 1837 0034 10F0010F 		tst	r0, #1
 1838 0038 09D1     		bne	.L200
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 1839              		.loc 1 3024 0
ARM GAS  /tmp/ccBYTIZg.s 			page 140


 1840 003a 002F     		cmp	r7, #0
 1841 003c 00F02A81 		beq	.L218
3024:Middlewares/Third_Party/FatFs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 1842              		.loc 1 3024 0 is_stmt 0 discriminator 1
 1843 0040 10F0040F 		tst	r0, #4
 1844 0044 01D0     		beq	.L242
3025:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 1845              		.loc 1 3025 0 is_stmt 1
 1846 0046 0A20     		movs	r0, #10
 1847              	.LVL246:
 1848 0048 1FE1     		b	.L199
 1849              	.LVL247:
 1850              	.L242:
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1851              		.loc 1 3027 0
 1852 004a 0020     		movs	r0, #0
 1853              	.LVL248:
 1854 004c 1DE1     		b	.L199
 1855              	.L200:
3034:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 1856              		.loc 1 3034 0
 1857 004e 0023     		movs	r3, #0
 1858 0050 2370     		strb	r3, [r4]
3035:Middlewares/Third_Party/FatFs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 1859              		.loc 1 3035 0
 1860 0052 E8B2     		uxtb	r0, r5
 1861 0054 6070     		strb	r0, [r4, #1]
3036:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 1862              		.loc 1 3036 0
 1863 0056 FFF7FEFF 		bl	disk_initialize
 1864              	.LVL249:
3037:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 1865              		.loc 1 3037 0
 1866 005a 10F0010F 		tst	r0, #1
 1867 005e 01D0     		beq	.L243
3038:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1868              		.loc 1 3038 0
 1869 0060 0320     		movs	r0, #3
 1870              	.LVL250:
 1871 0062 12E1     		b	.L199
 1872              	.LVL251:
 1873              	.L243:
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 1874              		.loc 1 3040 0
 1875 0064 27B1     		cbz	r7, .L201
3040:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 1876              		.loc 1 3040 0 is_stmt 0 discriminator 1
 1877 0066 10F0040F 		tst	r0, #4
 1878 006a 01D0     		beq	.L201
3041:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1879              		.loc 1 3041 0 is_stmt 1
 1880 006c 0A20     		movs	r0, #10
 1881              	.LVL252:
 1882 006e 0CE1     		b	.L199
 1883              	.LVL253:
 1884              	.L201:
3050:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
ARM GAS  /tmp/ccBYTIZg.s 			page 141


 1885              		.loc 1 3050 0
 1886 0070 0021     		movs	r1, #0
 1887 0072 2046     		mov	r0, r4
 1888              	.LVL254:
 1889 0074 FFF7FEFF 		bl	check_fs
 1890              	.LVL255:
3051:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (i = 0; i < 4; i++) {		/* Get partition offset */
 1891              		.loc 1 3051 0
 1892 0078 0228     		cmp	r0, #2
 1893 007a 1DD0     		beq	.L222
3049:Middlewares/Third_Party/FatFs/src/ff.c **** 	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 1894              		.loc 1 3049 0
 1895 007c 0026     		movs	r6, #0
 1896              	.LVL256:
 1897              	.L203:
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 1898              		.loc 1 3063 0
 1899 007e 0428     		cmp	r0, #4
 1900 0080 00F00A81 		beq	.L225
3064:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1901              		.loc 1 3064 0
 1902 0084 0128     		cmp	r0, #1
 1903 0086 2DD9     		bls	.L244
 1904 0088 0D20     		movs	r0, #13
 1905              	.LVL257:
 1906 008a FEE0     		b	.L199
 1907              	.LVL258:
 1908              	.L223:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1909              		.loc 1 3054 0
 1910 008c 0020     		movs	r0, #0
 1911              	.LVL259:
 1912              	.L204:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1913              		.loc 1 3054 0 is_stmt 0 discriminator 4
 1914 008e 04AB     		add	r3, sp, #16
 1915 0090 03EB8503 		add	r3, r3, r5, lsl #2
 1916 0094 43F8100C 		str	r0, [r3, #-16]
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 1917              		.loc 1 3052 0 is_stmt 1 discriminator 4
 1918 0098 0135     		adds	r5, r5, #1
 1919              	.LVL260:
 1920              	.L202:
3052:Middlewares/Third_Party/FatFs/src/ff.c **** 			pt = fs->win + (MBR_Table + i * SZ_PTE);
 1921              		.loc 1 3052 0 is_stmt 0 discriminator 2
 1922 009a 032D     		cmp	r5, #3
 1923 009c 0ED8     		bhi	.L245
3053:Middlewares/Third_Party/FatFs/src/ff.c **** 			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 1924              		.loc 1 3053 0 is_stmt 1
 1925 009e 04F13000 		add	r0, r4, #48
 1926 00a2 2B01     		lsls	r3, r5, #4
 1927 00a4 03F5DF73 		add	r3, r3, #446
 1928 00a8 1844     		add	r0, r0, r3
 1929              	.LVL261:
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1930              		.loc 1 3054 0
 1931 00aa 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
ARM GAS  /tmp/ccBYTIZg.s 			page 142


 1932 00ac 002B     		cmp	r3, #0
 1933 00ae EDD0     		beq	.L223
3054:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 1934              		.loc 1 3054 0 is_stmt 0 discriminator 1
 1935 00b0 0830     		adds	r0, r0, #8
 1936              	.LVL262:
 1937 00b2 FFF7FEFF 		bl	ld_dword
 1938              	.LVL263:
 1939 00b6 EAE7     		b	.L204
 1940              	.LVL264:
 1941              	.L222:
 1942 00b8 0025     		movs	r5, #0
 1943              	.LVL265:
 1944 00ba EEE7     		b	.L202
 1945              	.LVL266:
 1946              	.L245:
 1947 00bc 0025     		movs	r5, #0
 1948              	.LVL267:
 1949 00be 08E0     		b	.L207
 1950              	.LVL268:
 1951              	.L246:
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 1952              		.loc 1 3060 0 is_stmt 1 discriminator 1
 1953 00c0 3146     		mov	r1, r6
 1954 00c2 2046     		mov	r0, r4
 1955 00c4 FFF7FEFF 		bl	check_fs
 1956              	.LVL269:
 1957              	.L206:
3061:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1958              		.loc 1 3061 0 discriminator 4
 1959 00c8 0128     		cmp	r0, #1
 1960 00ca D8D9     		bls	.L203
3061:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 1961              		.loc 1 3061 0 is_stmt 0 discriminator 1
 1962 00cc 0135     		adds	r5, r5, #1
 1963              	.LVL270:
 1964 00ce 032D     		cmp	r5, #3
 1965 00d0 D5D8     		bhi	.L203
 1966              	.LVL271:
 1967              	.L207:
3059:Middlewares/Third_Party/FatFs/src/ff.c **** 			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 1968              		.loc 1 3059 0 is_stmt 1
 1969 00d2 04AB     		add	r3, sp, #16
 1970 00d4 03EB8503 		add	r3, r3, r5, lsl #2
 1971 00d8 53F8106C 		ldr	r6, [r3, #-16]
 1972              	.LVL272:
3060:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 1973              		.loc 1 3060 0
 1974 00dc 002E     		cmp	r6, #0
 1975 00de EFD1     		bne	.L246
 1976 00e0 0320     		movs	r0, #3
 1977 00e2 F1E7     		b	.L206
 1978              	.LVL273:
 1979              	.L244:
3116:Middlewares/Third_Party/FatFs/src/ff.c **** 
 1980              		.loc 1 3116 0
 1981 00e4 04F13B00 		add	r0, r4, #59
ARM GAS  /tmp/ccBYTIZg.s 			page 143


 1982              	.LVL274:
 1983 00e8 FFF7FEFF 		bl	ld_word
 1984              	.LVL275:
 1985 00ec B0F5007F 		cmp	r0, #512
 1986 00f0 01D0     		beq	.L247
 1987 00f2 0D20     		movs	r0, #13
 1988 00f4 C9E0     		b	.L199
 1989              	.L247:
3118:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 1990              		.loc 1 3118 0
 1991 00f6 04F14600 		add	r0, r4, #70
 1992 00fa FFF7FEFF 		bl	ld_word
 1993              	.LVL276:
 1994 00fe 8046     		mov	r8, r0
 1995              	.LVL277:
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
 1996              		.loc 1 3119 0
 1997 0100 20B9     		cbnz	r0, .L208
3119:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsize = fasize;
 1998              		.loc 1 3119 0 is_stmt 0 discriminator 1
 1999 0102 04F15400 		add	r0, r4, #84
 2000              	.LVL278:
 2001 0106 FFF7FEFF 		bl	ld_dword
 2002              	.LVL279:
 2003 010a 8046     		mov	r8, r0
 2004              	.LVL280:
 2005              	.L208:
3120:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2006              		.loc 1 3120 0 is_stmt 1
 2007 010c C4F81880 		str	r8, [r4, #24]
3122:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 2008              		.loc 1 3122 0
 2009 0110 94F84090 		ldrb	r9, [r4, #64]	@ zero_extendqisi2
 2010 0114 84F80290 		strb	r9, [r4, #2]
3123:Middlewares/Third_Party/FatFs/src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 2011              		.loc 1 3123 0
 2012 0118 09F1FF33 		add	r3, r9, #-1
 2013 011c DBB2     		uxtb	r3, r3
 2014 011e 012B     		cmp	r3, #1
 2015 0120 01D9     		bls	.L248
 2016 0122 0D20     		movs	r0, #13
 2017              	.LVL281:
 2018 0124 B1E0     		b	.L199
 2019              	.LVL282:
 2020              	.L248:
3124:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2021              		.loc 1 3124 0
 2022 0126 09FB08F9 		mul	r9, r9, r8
 2023              	.LVL283:
3126:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 2024              		.loc 1 3126 0
 2025 012a 94F83D70 		ldrb	r7, [r4, #61]	@ zero_extendqisi2
 2026              	.LVL284:
 2027 012e 6781     		strh	r7, [r4, #10]	@ movhi
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2028              		.loc 1 3127 0
 2029 0130 002F     		cmp	r7, #0
ARM GAS  /tmp/ccBYTIZg.s 			page 144


 2030 0132 00F0B380 		beq	.L229
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2031              		.loc 1 3127 0 is_stmt 0 discriminator 2
 2032 0136 7B1E     		subs	r3, r7, #1
 2033 0138 1F42     		tst	r7, r3
 2034 013a 01D0     		beq	.L249
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2035              		.loc 1 3127 0
 2036 013c 0D20     		movs	r0, #13
 2037 013e A4E0     		b	.L199
 2038              	.L249:
3129:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 2039              		.loc 1 3129 0 is_stmt 1
 2040 0140 04F14100 		add	r0, r4, #65
 2041 0144 FFF7FEFF 		bl	ld_word
 2042              	.LVL285:
 2043 0148 8246     		mov	r10, r0
 2044 014a 2081     		strh	r0, [r4, #8]	@ movhi
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2045              		.loc 1 3130 0
 2046 014c 10F00F0F 		tst	r0, #15
 2047 0150 40F0A680 		bne	.L231
3132:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 2048              		.loc 1 3132 0
 2049 0154 04F14300 		add	r0, r4, #67
 2050 0158 FFF7FEFF 		bl	ld_word
 2051              	.LVL286:
 2052 015c 0546     		mov	r5, r0
 2053              	.LVL287:
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2054              		.loc 1 3133 0
 2055 015e 20B9     		cbnz	r0, .L209
3133:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2056              		.loc 1 3133 0 is_stmt 0 discriminator 1
 2057 0160 04F15000 		add	r0, r4, #80
 2058              	.LVL288:
 2059 0164 FFF7FEFF 		bl	ld_dword
 2060              	.LVL289:
 2061 0168 0546     		mov	r5, r0
 2062              	.LVL290:
 2063              	.L209:
3135:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 2064              		.loc 1 3135 0 is_stmt 1
 2065 016a 04F13E00 		add	r0, r4, #62
 2066              	.LVL291:
 2067 016e FFF7FEFF 		bl	ld_word
 2068              	.LVL292:
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2069              		.loc 1 3136 0
 2070 0172 0246     		mov	r2, r0
 2071 0174 0028     		cmp	r0, #0
 2072 0176 00F09580 		beq	.L232
3139:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 2073              		.loc 1 3139 0
 2074 017a 09EB0003 		add	r3, r9, r0
 2075 017e 03EB1A13 		add	r3, r3, r10, lsr #4
 2076              	.LVL293:
ARM GAS  /tmp/ccBYTIZg.s 			page 145


3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 2077              		.loc 1 3140 0
 2078 0182 9D42     		cmp	r5, r3
 2079 0184 C0F09080 		bcc	.L233
3141:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 2080              		.loc 1 3141 0
 2081 0188 ED1A     		subs	r5, r5, r3
 2082              	.LVL294:
 2083 018a B5FBF7F5 		udiv	r5, r5, r7
 2084              	.LVL295:
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
 2085              		.loc 1 3142 0
 2086 018e 002D     		cmp	r5, #0
 2087 0190 00F08C80 		beq	.L234
 2088              	.LVL296:
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 2089              		.loc 1 3144 0
 2090 0194 4FF6F571 		movw	r1, #65525
 2091 0198 8D42     		cmp	r5, r1
 2092 019a 63D9     		bls	.L235
3143:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 2093              		.loc 1 3143 0
 2094 019c 0327     		movs	r7, #3
 2095              	.L210:
 2096              	.LVL297:
3145:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2097              		.loc 1 3145 0
 2098 019e 40F6F571 		movw	r1, #4085
 2099 01a2 8D42     		cmp	r5, r1
 2100 01a4 00D8     		bhi	.L211
 2101 01a6 0127     		movs	r7, #1
 2102              	.LVL298:
 2103              	.L211:
3148:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 2104              		.loc 1 3148 0
 2105 01a8 0235     		adds	r5, r5, #2
 2106              	.LVL299:
 2107 01aa 6561     		str	r5, [r4, #20]
3149:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 2108              		.loc 1 3149 0
 2109 01ac E661     		str	r6, [r4, #28]
3150:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 2110              		.loc 1 3150 0
 2111 01ae 3244     		add	r2, r2, r6
 2112 01b0 2262     		str	r2, [r4, #32]
3151:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
 2113              		.loc 1 3151 0
 2114 01b2 3344     		add	r3, r3, r6
 2115              	.LVL300:
 2116 01b4 A362     		str	r3, [r4, #40]
3152:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 2117              		.loc 1 3152 0
 2118 01b6 032F     		cmp	r7, #3
 2119 01b8 56D1     		bne	.L212
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 2120              		.loc 1 3153 0
 2121 01ba 04F15A00 		add	r0, r4, #90
ARM GAS  /tmp/ccBYTIZg.s 			page 146


 2122              	.LVL301:
 2123 01be FFF7FEFF 		bl	ld_word
 2124              	.LVL302:
 2125 01c2 0028     		cmp	r0, #0
 2126 01c4 74D1     		bne	.L237
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 2127              		.loc 1 3154 0
 2128 01c6 BAF1000F 		cmp	r10, #0
 2129 01ca 73D1     		bne	.L238
3155:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 2130              		.loc 1 3155 0
 2131 01cc 04F15C00 		add	r0, r4, #92
 2132 01d0 FFF7FEFF 		bl	ld_dword
 2133              	.LVL303:
 2134 01d4 6062     		str	r0, [r4, #36]
3156:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 2135              		.loc 1 3156 0
 2136 01d6 AD00     		lsls	r5, r5, #2
 2137              	.LVL304:
 2138              	.L213:
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2139              		.loc 1 3163 0
 2140 01d8 05F2FF15 		addw	r5, r5, #511
 2141              	.LVL305:
 2142 01dc B8EB552F 		cmp	r8, r5, lsr #9
 2143 01e0 6CD3     		bcc	.L240
3167:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag = 0x80;
 2144              		.loc 1 3167 0
 2145 01e2 4FF0FF33 		mov	r3, #-1
 2146 01e6 2361     		str	r3, [r4, #16]
 2147 01e8 E360     		str	r3, [r4, #12]
3168:Middlewares/Third_Party/FatFs/src/ff.c **** #if (_FS_NOFSINFO & 3) != 3
 2148              		.loc 1 3168 0
 2149 01ea 8023     		movs	r3, #128
 2150 01ec 2371     		strb	r3, [r4, #4]
3170:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 2151              		.loc 1 3170 0
 2152 01ee 032F     		cmp	r7, #3
 2153 01f0 2CD1     		bne	.L215
3171:Middlewares/Third_Party/FatFs/src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 2154              		.loc 1 3171 0
 2155 01f2 04F16000 		add	r0, r4, #96
 2156 01f6 FFF7FEFF 		bl	ld_word
 2157              	.LVL306:
 2158 01fa 0128     		cmp	r0, #1
 2159 01fc 26D1     		bne	.L215
3172:Middlewares/Third_Party/FatFs/src/ff.c **** 		{
 2160              		.loc 1 3172 0
 2161 01fe 711C     		adds	r1, r6, #1
 2162 0200 2046     		mov	r0, r4
 2163 0202 FFF7FEFF 		bl	move_window
 2164              	.LVL307:
 2165 0206 08BB     		cbnz	r0, .L215
3174:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 2166              		.loc 1 3174 0
 2167 0208 0023     		movs	r3, #0
 2168 020a 2371     		strb	r3, [r4, #4]
ARM GAS  /tmp/ccBYTIZg.s 			page 147


3175:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 2169              		.loc 1 3175 0
 2170 020c 04F22E20 		addw	r0, r4, #558
 2171 0210 FFF7FEFF 		bl	ld_word
 2172              	.LVL308:
 2173 0214 4AF65523 		movw	r3, #43605
 2174 0218 9842     		cmp	r0, r3
 2175 021a 17D1     		bne	.L215
3176:Middlewares/Third_Party/FatFs/src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 2176              		.loc 1 3176 0
 2177 021c 04F13000 		add	r0, r4, #48
 2178 0220 FFF7FEFF 		bl	ld_dword
 2179              	.LVL309:
 2180 0224 274B     		ldr	r3, .L250+4
 2181 0226 9842     		cmp	r0, r3
 2182 0228 10D1     		bne	.L215
3177:Middlewares/Third_Party/FatFs/src/ff.c **** 			{
 2183              		.loc 1 3177 0
 2184 022a 04F50570 		add	r0, r4, #532
 2185 022e FFF7FEFF 		bl	ld_dword
 2186              	.LVL310:
 2187 0232 254B     		ldr	r3, .L250+8
 2188 0234 9842     		cmp	r0, r3
 2189 0236 09D1     		bne	.L215
3180:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2190              		.loc 1 3180 0
 2191 0238 04F50670 		add	r0, r4, #536
 2192 023c FFF7FEFF 		bl	ld_dword
 2193              	.LVL311:
 2194 0240 2061     		str	r0, [r4, #16]
3183:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2195              		.loc 1 3183 0
 2196 0242 04F50770 		add	r0, r4, #540
 2197 0246 FFF7FEFF 		bl	ld_dword
 2198              	.LVL312:
 2199 024a E060     		str	r0, [r4, #12]
 2200              	.L215:
3191:Middlewares/Third_Party/FatFs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 2201              		.loc 1 3191 0
 2202 024c 2770     		strb	r7, [r4]
3192:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN == 1
 2203              		.loc 1 3192 0
 2204 024e 1F4A     		ldr	r2, .L250+12
 2205 0250 1388     		ldrh	r3, [r2]
 2206 0252 0133     		adds	r3, r3, #1
 2207 0254 9BB2     		uxth	r3, r3
 2208 0256 1380     		strh	r3, [r2]	@ movhi
 2209 0258 E380     		strh	r3, [r4, #6]	@ movhi
3203:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 2210              		.loc 1 3203 0
 2211 025a 2046     		mov	r0, r4
 2212 025c FFF7FEFF 		bl	clear_lock
 2213              	.LVL313:
3205:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2214              		.loc 1 3205 0
 2215 0260 0020     		movs	r0, #0
 2216 0262 12E0     		b	.L199
ARM GAS  /tmp/ccBYTIZg.s 			page 148


 2217              	.LVL314:
 2218              	.L235:
3144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 2219              		.loc 1 3144 0
 2220 0264 0227     		movs	r7, #2
 2221 0266 9AE7     		b	.L210
 2222              	.LVL315:
 2223              	.L212:
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 2224              		.loc 1 3158 0
 2225 0268 BAF1000F 		cmp	r10, #0
 2226 026c 24D0     		beq	.L239
3159:Middlewares/Third_Party/FatFs/src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 2227              		.loc 1 3159 0
 2228 026e 4A44     		add	r2, r2, r9
 2229 0270 6262     		str	r2, [r4, #36]
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2230              		.loc 1 3161 0
 2231 0272 022F     		cmp	r7, #2
 2232 0274 01D1     		bne	.L214
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2233              		.loc 1 3161 0 is_stmt 0 discriminator 1
 2234 0276 6D00     		lsls	r5, r5, #1
 2235              	.LVL316:
 2236 0278 AEE7     		b	.L213
 2237              	.LVL317:
 2238              	.L214:
3161:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2239              		.loc 1 3161 0 discriminator 2
 2240 027a 05EB4503 		add	r3, r5, r5, lsl #1
 2241 027e 05F00105 		and	r5, r5, #1
 2242              	.LVL318:
 2243 0282 05EB5305 		add	r5, r5, r3, lsr #1
 2244 0286 A7E7     		b	.L213
 2245              	.LVL319:
 2246              	.L216:
3011:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2247              		.loc 1 3011 0 is_stmt 1
 2248 0288 0B20     		movs	r0, #11
 2249              	.LVL320:
 2250              	.L199:
3206:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2251              		.loc 1 3206 0
 2252 028a 04B0     		add	sp, sp, #16
 2253              	.LCFI26:
 2254              		.cfi_remember_state
 2255              		.cfi_def_cfa_offset 32
 2256              		@ sp needed
 2257 028c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2258              	.LVL321:
 2259              	.L217:
 2260              	.LCFI27:
 2261              		.cfi_restore_state
3015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2262              		.loc 1 3015 0
 2263 0290 0C20     		movs	r0, #12
 2264              	.LVL322:
ARM GAS  /tmp/ccBYTIZg.s 			page 149


 2265 0292 FAE7     		b	.L199
 2266              	.LVL323:
 2267              	.L218:
3027:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2268              		.loc 1 3027 0
 2269 0294 0020     		movs	r0, #0
 2270              	.LVL324:
 2271 0296 F8E7     		b	.L199
 2272              	.LVL325:
 2273              	.L225:
3063:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 2274              		.loc 1 3063 0
 2275 0298 0120     		movs	r0, #1
 2276              	.LVL326:
 2277 029a F6E7     		b	.L199
 2278              	.LVL327:
 2279              	.L229:
3127:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2280              		.loc 1 3127 0
 2281 029c 0D20     		movs	r0, #13
 2282 029e F4E7     		b	.L199
 2283              	.L231:
3130:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2284              		.loc 1 3130 0
 2285 02a0 0D20     		movs	r0, #13
 2286 02a2 F2E7     		b	.L199
 2287              	.LVL328:
 2288              	.L232:
3136:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2289              		.loc 1 3136 0
 2290 02a4 0D20     		movs	r0, #13
 2291              	.LVL329:
 2292 02a6 F0E7     		b	.L199
 2293              	.LVL330:
 2294              	.L233:
3140:Middlewares/Third_Party/FatFs/src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 2295              		.loc 1 3140 0
 2296 02a8 0D20     		movs	r0, #13
 2297              	.LVL331:
 2298 02aa EEE7     		b	.L199
 2299              	.LVL332:
 2300              	.L234:
3142:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT32;
 2301              		.loc 1 3142 0
 2302 02ac 0D20     		movs	r0, #13
 2303              	.LVL333:
 2304 02ae ECE7     		b	.L199
 2305              	.LVL334:
 2306              	.L237:
3153:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 2307              		.loc 1 3153 0
 2308 02b0 0D20     		movs	r0, #13
 2309 02b2 EAE7     		b	.L199
 2310              	.L238:
3154:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 2311              		.loc 1 3154 0
 2312 02b4 0D20     		movs	r0, #13
ARM GAS  /tmp/ccBYTIZg.s 			page 150


 2313 02b6 E8E7     		b	.L199
 2314              	.LVL335:
 2315              	.L239:
3158:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 2316              		.loc 1 3158 0
 2317 02b8 0D20     		movs	r0, #13
 2318              	.LVL336:
 2319 02ba E6E7     		b	.L199
 2320              	.LVL337:
 2321              	.L240:
3163:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2322              		.loc 1 3163 0
 2323 02bc 0D20     		movs	r0, #13
 2324 02be E4E7     		b	.L199
 2325              	.L251:
 2326              		.align	2
 2327              	.L250:
 2328 02c0 00000000 		.word	.LANCHOR2
 2329 02c4 52526141 		.word	1096897106
 2330 02c8 72724161 		.word	1631679090
 2331 02cc 00000000 		.word	.LANCHOR3
 2332              		.cfi_endproc
 2333              	.LFE177:
 2335              		.section	.text.put_fat,"ax",%progbits
 2336              		.align	1
 2337              		.syntax unified
 2338              		.thumb
 2339              		.thumb_func
 2340              		.fpu fpv5-d16
 2342              	put_fat:
 2343              	.LFB159:
1086:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bc;
 2344              		.loc 1 1086 0
 2345              		.cfi_startproc
 2346              		@ args = 0, pretend = 0, frame = 0
 2347              		@ frame_needed = 0, uses_anonymous_args = 0
 2348              	.LVL338:
 2349 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2350              	.LCFI28:
 2351              		.cfi_def_cfa_offset 32
 2352              		.cfi_offset 4, -32
 2353              		.cfi_offset 5, -28
 2354              		.cfi_offset 6, -24
 2355              		.cfi_offset 7, -20
 2356              		.cfi_offset 8, -16
 2357              		.cfi_offset 9, -12
 2358              		.cfi_offset 10, -8
 2359              		.cfi_offset 14, -4
 2360              	.LVL339:
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
 2361              		.loc 1 1091 0
 2362 0004 0129     		cmp	r1, #1
 2363 0006 7CD9     		bls	.L261
1091:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (fs->fs_type) {
 2364              		.loc 1 1091 0 is_stmt 0 discriminator 1
 2365 0008 4369     		ldr	r3, [r0, #20]
 2366 000a 9942     		cmp	r1, r3
ARM GAS  /tmp/ccBYTIZg.s 			page 151


 2367 000c 01D3     		bcc	.L266
1089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2368              		.loc 1 1089 0 is_stmt 1
 2369 000e 0225     		movs	r5, #2
 2370 0010 78E0     		b	.L253
 2371              	.L266:
 2372 0012 1746     		mov	r7, r2
 2373 0014 0C46     		mov	r4, r1
 2374 0016 0646     		mov	r6, r0
1092:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :	/* Bitfield items */
 2375              		.loc 1 1092 0
 2376 0018 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 2377 001a 022B     		cmp	r3, #2
 2378 001c 43D0     		beq	.L254
 2379 001e 032B     		cmp	r3, #3
 2380 0020 54D0     		beq	.L255
 2381 0022 012B     		cmp	r3, #1
 2382 0024 01D0     		beq	.L267
1089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2383              		.loc 1 1089 0
 2384 0026 0225     		movs	r5, #2
 2385 0028 6CE0     		b	.L253
 2386              	.L267:
 2387              	.LVL340:
1094:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2388              		.loc 1 1094 0
 2389 002a 01EB5108 		add	r8, r1, r1, lsr #1
 2390              	.LVL341:
1095:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2391              		.loc 1 1095 0
 2392 002e 016A     		ldr	r1, [r0, #32]
 2393              	.LVL342:
 2394 0030 01EB5821 		add	r1, r1, r8, lsr #9
 2395 0034 FFF7FEFF 		bl	move_window
 2396              	.LVL343:
1096:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2397              		.loc 1 1096 0
 2398 0038 0546     		mov	r5, r0
 2399 003a 0028     		cmp	r0, #0
 2400 003c 62D1     		bne	.L253
1097:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2401              		.loc 1 1097 0
 2402 003e 06F1300A 		add	r10, r6, #48
 2403 0042 08F10109 		add	r9, r8, #1
 2404              	.LVL344:
 2405 0046 C8F30808 		ubfx	r8, r8, #0, #9
 2406              	.LVL345:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2407              		.loc 1 1098 0
 2408 004a 14F00104 		ands	r4, r4, #1
 2409              	.LVL346:
 2410 004e 1FD0     		beq	.L257
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2411              		.loc 1 1098 0 is_stmt 0 discriminator 1
 2412 0050 1AF90830 		ldrsb	r3, [r10, r8]
 2413 0054 03F00F03 		and	r3, r3, #15
 2414 0058 3A01     		lsls	r2, r7, #4
ARM GAS  /tmp/ccBYTIZg.s 			page 152


 2415 005a 02F47F62 		and	r2, r2, #4080
 2416 005e 1343     		orrs	r3, r3, r2
 2417 0060 DBB2     		uxtb	r3, r3
 2418              	.L258:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2419              		.loc 1 1098 0 discriminator 4
 2420 0062 0AF80830 		strb	r3, [r10, r8]
1099:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2421              		.loc 1 1099 0 is_stmt 1 discriminator 4
 2422 0066 0123     		movs	r3, #1
 2423 0068 F370     		strb	r3, [r6, #3]
1100:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2424              		.loc 1 1100 0 discriminator 4
 2425 006a 316A     		ldr	r1, [r6, #32]
 2426 006c 01EB5921 		add	r1, r1, r9, lsr #9
 2427 0070 3046     		mov	r0, r6
 2428              	.LVL347:
 2429 0072 FFF7FEFF 		bl	move_window
 2430              	.LVL348:
1101:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = fs->win + bc % SS(fs);
 2431              		.loc 1 1101 0 discriminator 4
 2432 0076 0546     		mov	r5, r0
 2433 0078 0028     		cmp	r0, #0
 2434 007a 43D1     		bne	.L253
1102:Middlewares/Third_Party/FatFs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2435              		.loc 1 1102 0
 2436 007c C9F30809 		ubfx	r9, r9, #0, #9
 2437              	.LVL349:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2438              		.loc 1 1103 0
 2439 0080 44B1     		cbz	r4, .L259
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2440              		.loc 1 1103 0 is_stmt 0 discriminator 1
 2441 0082 C7F30712 		ubfx	r2, r7, #4, #8
 2442              	.LVL350:
 2443              	.L260:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2444              		.loc 1 1103 0 discriminator 4
 2445 0086 0AF80920 		strb	r2, [r10, r9]
1104:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2446              		.loc 1 1104 0 is_stmt 1 discriminator 4
 2447 008a 0123     		movs	r3, #1
 2448 008c F370     		strb	r3, [r6, #3]
1105:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2449              		.loc 1 1105 0 discriminator 4
 2450 008e 39E0     		b	.L253
 2451              	.LVL351:
 2452              	.L257:
1098:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2453              		.loc 1 1098 0 discriminator 2
 2454 0090 FBB2     		uxtb	r3, r7
 2455 0092 E6E7     		b	.L258
 2456              	.LVL352:
 2457              	.L259:
1103:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2458              		.loc 1 1103 0 discriminator 2
 2459 0094 1AF90920 		ldrsb	r2, [r10, r9]
ARM GAS  /tmp/ccBYTIZg.s 			page 153


 2460 0098 22F00F02 		bic	r2, r2, #15
 2461 009c C7F30327 		ubfx	r7, r7, #8, #4
 2462              	.LVL353:
 2463 00a0 3A43     		orrs	r2, r2, r7
 2464 00a2 D2B2     		uxtb	r2, r2
 2465 00a4 EFE7     		b	.L260
 2466              	.LVL354:
 2467              	.L254:
1108:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2468              		.loc 1 1108 0
 2469 00a6 016A     		ldr	r1, [r0, #32]
 2470              	.LVL355:
 2471 00a8 01EB1421 		add	r1, r1, r4, lsr #8
 2472 00ac FFF7FEFF 		bl	move_window
 2473              	.LVL356:
1109:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 2474              		.loc 1 1109 0
 2475 00b0 0546     		mov	r5, r0
 2476 00b2 38BB     		cbnz	r0, .L253
1110:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2477              		.loc 1 1110 0
 2478 00b4 06F13000 		add	r0, r6, #48
 2479              	.LVL357:
 2480 00b8 6300     		lsls	r3, r4, #1
 2481 00ba 03F4FF73 		and	r3, r3, #510
 2482 00be B9B2     		uxth	r1, r7
 2483 00c0 1844     		add	r0, r0, r3
 2484 00c2 FFF7FEFF 		bl	st_word
 2485              	.LVL358:
1111:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2486              		.loc 1 1111 0
 2487 00c6 0123     		movs	r3, #1
 2488 00c8 F370     		strb	r3, [r6, #3]
1112:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2489              		.loc 1 1112 0
 2490 00ca 1BE0     		b	.L253
 2491              	.LVL359:
 2492              	.L255:
1118:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 2493              		.loc 1 1118 0
 2494 00cc 016A     		ldr	r1, [r0, #32]
 2495              	.LVL360:
 2496 00ce 01EBD411 		add	r1, r1, r4, lsr #7
 2497 00d2 FFF7FEFF 		bl	move_window
 2498              	.LVL361:
1119:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 2499              		.loc 1 1119 0
 2500 00d6 0546     		mov	r5, r0
 2501 00d8 A0B9     		cbnz	r0, .L253
1121:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 2502              		.loc 1 1121 0
 2503 00da 27F07047 		bic	r7, r7, #-268435456
 2504              	.LVL362:
 2505 00de 06F13003 		add	r3, r6, #48
 2506 00e2 A100     		lsls	r1, r4, #2
 2507 00e4 01F4FE71 		and	r1, r1, #508
 2508 00e8 5C18     		adds	r4, r3, r1
ARM GAS  /tmp/ccBYTIZg.s 			page 154


 2509              	.LVL363:
 2510 00ea 2046     		mov	r0, r4
 2511              	.LVL364:
 2512 00ec FFF7FEFF 		bl	ld_dword
 2513              	.LVL365:
 2514 00f0 00F07041 		and	r1, r0, #-268435456
 2515              	.LVL366:
1123:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->wflag = 1;
 2516              		.loc 1 1123 0
 2517 00f4 3943     		orrs	r1, r1, r7
 2518              	.LVL367:
 2519 00f6 2046     		mov	r0, r4
 2520 00f8 FFF7FEFF 		bl	st_dword
 2521              	.LVL368:
1124:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2522              		.loc 1 1124 0
 2523 00fc 0123     		movs	r3, #1
 2524 00fe F370     		strb	r3, [r6, #3]
1125:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2525              		.loc 1 1125 0
 2526 0100 00E0     		b	.L253
 2527              	.LVL369:
 2528              	.L261:
1089:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2529              		.loc 1 1089 0
 2530 0102 0225     		movs	r5, #2
 2531              	.LVL370:
 2532              	.L253:
1129:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2533              		.loc 1 1129 0
 2534 0104 2846     		mov	r0, r5
 2535 0106 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2536              		.cfi_endproc
 2537              	.LFE159:
 2539              		.section	.text.get_fat,"ax",%progbits
 2540              		.align	1
 2541              		.syntax unified
 2542              		.thumb
 2543              		.thumb_func
 2544              		.fpu fpv5-d16
 2546              	get_fat:
 2547              	.LFB158:
1005:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT wc, bc;
 2548              		.loc 1 1005 0
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 0, uses_anonymous_args = 0
 2552              	.LVL371:
 2553 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2554              	.LCFI29:
 2555              		.cfi_def_cfa_offset 24
 2556              		.cfi_offset 3, -24
 2557              		.cfi_offset 4, -20
 2558              		.cfi_offset 5, -16
 2559              		.cfi_offset 6, -12
 2560              		.cfi_offset 7, -8
 2561              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBYTIZg.s 			page 155


1008:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2562              		.loc 1 1008 0
 2563 0002 0668     		ldr	r6, [r0]
 2564              	.LVL372:
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
 2565              		.loc 1 1011 0
 2566 0004 0129     		cmp	r1, #1
 2567 0006 5ED9     		bls	.L274
1011:Middlewares/Third_Party/FatFs/src/ff.c **** 		val = 1;	/* Internal error */
 2568              		.loc 1 1011 0 is_stmt 0 discriminator 1
 2569 0008 7369     		ldr	r3, [r6, #20]
 2570 000a 9942     		cmp	r1, r3
 2571 000c 5DD2     		bcs	.L275
 2572 000e 0C46     		mov	r4, r1
 2573              	.LVL373:
1017:Middlewares/Third_Party/FatFs/src/ff.c **** 		case FS_FAT12 :
 2574              		.loc 1 1017 0 is_stmt 1
 2575 0010 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 2576 0012 022B     		cmp	r3, #2
 2577 0014 30D0     		beq	.L270
 2578 0016 032B     		cmp	r3, #3
 2579 0018 41D0     		beq	.L271
 2580 001a 012B     		cmp	r3, #1
 2581 001c 01D0     		beq	.L283
1065:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2582              		.loc 1 1065 0
 2583 001e 0120     		movs	r0, #1
 2584              	.LVL374:
 2585 0020 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2586              	.LVL375:
 2587              	.L283:
1019:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2588              		.loc 1 1019 0
 2589 0022 01EB5105 		add	r5, r1, r1, lsr #1
 2590              	.LVL376:
1020:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];
 2591              		.loc 1 1020 0
 2592 0026 316A     		ldr	r1, [r6, #32]
 2593              	.LVL377:
 2594 0028 01EB5521 		add	r1, r1, r5, lsr #9
 2595 002c 3046     		mov	r0, r6
 2596              	.LVL378:
 2597 002e FFF7FEFF 		bl	move_window
 2598              	.LVL379:
 2599 0032 10B1     		cbz	r0, .L284
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2600              		.loc 1 1015 0
 2601 0034 4FF0FF30 		mov	r0, #-1
 2602 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2603              	.LVL380:
 2604              	.L284:
1021:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 2605              		.loc 1 1021 0
 2606 003a 6F1C     		adds	r7, r5, #1
 2607              	.LVL381:
 2608 003c C5F30805 		ubfx	r5, r5, #0, #9
 2609 0040 3544     		add	r5, r5, r6
ARM GAS  /tmp/ccBYTIZg.s 			page 156


 2610 0042 95F83050 		ldrb	r5, [r5, #48]	@ zero_extendqisi2
 2611              	.LVL382:
1022:Middlewares/Third_Party/FatFs/src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;
 2612              		.loc 1 1022 0
 2613 0046 316A     		ldr	r1, [r6, #32]
 2614 0048 01EB5721 		add	r1, r1, r7, lsr #9
 2615 004c 3046     		mov	r0, r6
 2616 004e FFF7FEFF 		bl	move_window
 2617              	.LVL383:
 2618 0052 10B1     		cbz	r0, .L285
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2619              		.loc 1 1015 0
 2620 0054 4FF0FF30 		mov	r0, #-1
 2621 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2622              	.LVL384:
 2623              	.L285:
1023:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2624              		.loc 1 1023 0
 2625 005a C7F30803 		ubfx	r3, r7, #0, #9
 2626 005e 3344     		add	r3, r3, r6
 2627 0060 93F83000 		ldrb	r0, [r3, #48]	@ zero_extendqisi2
 2628 0064 45EA0020 		orr	r0, r5, r0, lsl #8
 2629              	.LVL385:
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2630              		.loc 1 1024 0
 2631 0068 14F0010F 		tst	r4, #1
 2632 006c 01D0     		beq	.L273
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2633              		.loc 1 1024 0 is_stmt 0 discriminator 1
 2634 006e 0009     		lsrs	r0, r0, #4
 2635              	.LVL386:
 2636 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2637              	.LVL387:
 2638              	.L273:
1024:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2639              		.loc 1 1024 0 discriminator 2
 2640 0072 C0F30B00 		ubfx	r0, r0, #0, #12
 2641              	.LVL388:
 2642 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2643              	.LVL389:
 2644              	.L270:
1028:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));
 2645              		.loc 1 1028 0 is_stmt 1
 2646 0078 316A     		ldr	r1, [r6, #32]
 2647              	.LVL390:
 2648 007a 01EB1421 		add	r1, r1, r4, lsr #8
 2649 007e 3046     		mov	r0, r6
 2650              	.LVL391:
 2651 0080 FFF7FEFF 		bl	move_window
 2652              	.LVL392:
 2653 0084 10B1     		cbz	r0, .L286
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2654              		.loc 1 1015 0
 2655 0086 4FF0FF30 		mov	r0, #-1
 2656 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2657              	.LVL393:
 2658              	.L286:
ARM GAS  /tmp/ccBYTIZg.s 			page 157


1029:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2659              		.loc 1 1029 0
 2660 008c 06F13000 		add	r0, r6, #48
 2661 0090 6100     		lsls	r1, r4, #1
 2662 0092 01F4FF71 		and	r1, r1, #510
 2663 0096 0844     		add	r0, r0, r1
 2664 0098 FFF7FEFF 		bl	ld_word
 2665              	.LVL394:
1030:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2666              		.loc 1 1030 0
 2667 009c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2668              	.LVL395:
 2669              	.L271:
1033:Middlewares/Third_Party/FatFs/src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 2670              		.loc 1 1033 0
 2671 009e 316A     		ldr	r1, [r6, #32]
 2672              	.LVL396:
 2673 00a0 01EBD411 		add	r1, r1, r4, lsr #7
 2674 00a4 3046     		mov	r0, r6
 2675              	.LVL397:
 2676 00a6 FFF7FEFF 		bl	move_window
 2677              	.LVL398:
 2678 00aa 10B1     		cbz	r0, .L287
1015:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2679              		.loc 1 1015 0
 2680 00ac 4FF0FF30 		mov	r0, #-1
1070:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2681              		.loc 1 1070 0
 2682 00b0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2683              	.LVL399:
 2684              	.L287:
1034:Middlewares/Third_Party/FatFs/src/ff.c **** 			break;
 2685              		.loc 1 1034 0
 2686 00b2 3036     		adds	r6, r6, #48
 2687              	.LVL400:
 2688 00b4 A100     		lsls	r1, r4, #2
 2689 00b6 01F4FE70 		and	r0, r1, #508
 2690 00ba 3044     		add	r0, r0, r6
 2691 00bc FFF7FEFF 		bl	ld_dword
 2692              	.LVL401:
 2693 00c0 20F07040 		bic	r0, r0, #-268435456
 2694              	.LVL402:
1035:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 2695              		.loc 1 1035 0
 2696 00c4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2697              	.LVL403:
 2698              	.L274:
1012:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2699              		.loc 1 1012 0
 2700 00c6 0120     		movs	r0, #1
 2701              	.LVL404:
 2702 00c8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2703              	.LVL405:
 2704              	.L275:
 2705 00ca 0120     		movs	r0, #1
 2706              	.LVL406:
 2707 00cc F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccBYTIZg.s 			page 158


 2708              		.cfi_endproc
 2709              	.LFE158:
 2711              		.section	.text.dir_sdi,"ax",%progbits
 2712              		.align	1
 2713              		.syntax unified
 2714              		.thumb
 2715              		.thumb_func
 2716              		.fpu fpv5-d16
 2718              	dir_sdi:
 2719              	.LFB163:
1474:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD csz, clst;
 2720              		.loc 1 1474 0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 0
 2723              		@ frame_needed = 0, uses_anonymous_args = 0
 2724              	.LVL407:
 2725 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2726              	.LCFI30:
 2727              		.cfi_def_cfa_offset 24
 2728              		.cfi_offset 4, -24
 2729              		.cfi_offset 5, -20
 2730              		.cfi_offset 6, -16
 2731              		.cfi_offset 7, -12
 2732              		.cfi_offset 8, -8
 2733              		.cfi_offset 14, -4
1476:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2734              		.loc 1 1476 0
 2735 0004 0768     		ldr	r7, [r0]
 2736              	.LVL408:
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
 2737              		.loc 1 1479 0
 2738 0006 B1F5001F 		cmp	r1, #2097152
 2739 000a 02D3     		bcc	.L303
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2740              		.loc 1 1480 0
 2741 000c 0220     		movs	r0, #2
 2742              	.LVL409:
 2743 000e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2744              	.LVL410:
 2745              	.L303:
 2746 0012 0646     		mov	r6, r0
 2747 0014 0C46     		mov	r4, r1
1479:Middlewares/Third_Party/FatFs/src/ff.c **** 		return FR_INT_ERR;
 2748              		.loc 1 1479 0 discriminator 1
 2749 0016 11F01F0F 		tst	r1, #31
 2750 001a 02D0     		beq	.L304
1480:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2751              		.loc 1 1480 0
 2752 001c 0220     		movs	r0, #2
 2753              	.LVL411:
 2754 001e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2755              	.LVL412:
 2756              	.L304:
1482:Middlewares/Third_Party/FatFs/src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2757              		.loc 1 1482 0
 2758 0022 7161     		str	r1, [r6, #20]
1483:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
ARM GAS  /tmp/ccBYTIZg.s 			page 159


 2759              		.loc 1 1483 0
 2760 0024 8568     		ldr	r5, [r0, #8]
 2761              	.LVL413:
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
 2762              		.loc 1 1484 0
 2763 0026 1DB9     		cbnz	r5, .L290
1484:Middlewares/Third_Party/FatFs/src/ff.c **** 		clst = fs->dirbase;
 2764              		.loc 1 1484 0 is_stmt 0 discriminator 1
 2765 0028 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 2766 002a 022B     		cmp	r3, #2
 2767 002c 00D9     		bls	.L290
1485:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 2768              		.loc 1 1485 0 is_stmt 1
 2769 002e 7D6A     		ldr	r5, [r7, #36]
 2770              	.LVL414:
 2771              	.L290:
1489:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 2772              		.loc 1 1489 0
 2773 0030 75B9     		cbnz	r5, .L291
1490:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect = fs->dirbase;
 2774              		.loc 1 1490 0
 2775 0032 3B89     		ldrh	r3, [r7, #8]
 2776 0034 B3EB541F 		cmp	r3, r4, lsr #5
 2777 0038 02D8     		bhi	.L305
 2778 003a 0220     		movs	r0, #2
 2779              	.LVL415:
 2780 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2781              	.LVL416:
 2782              	.L305:
1491:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2783              		.loc 1 1491 0
 2784 0040 7B6A     		ldr	r3, [r7, #36]
 2785 0042 F361     		str	r3, [r6, #28]
 2786              	.LVL417:
 2787              	.L292:
1503:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect) return FR_INT_ERR;
 2788              		.loc 1 1503 0
 2789 0044 B561     		str	r5, [r6, #24]
1504:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 2790              		.loc 1 1504 0
 2791 0046 F369     		ldr	r3, [r6, #28]
 2792 0048 0BBB     		cbnz	r3, .L306
 2793 004a 0220     		movs	r0, #2
1509:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2794              		.loc 1 1509 0
 2795 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2796              	.LVL418:
 2797              	.L291:
1494:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2798              		.loc 1 1494 0
 2799 0050 B7F80A80 		ldrh	r8, [r7, #10]
 2800 0054 4FEA4828 		lsl	r8, r8, #9
 2801              	.LVL419:
1495:Middlewares/Third_Party/FatFs/src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2802              		.loc 1 1495 0
 2803 0058 01E0     		b	.L293
 2804              	.LVL420:
ARM GAS  /tmp/ccBYTIZg.s 			page 160


 2805              	.L308:
1499:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2806              		.loc 1 1499 0
 2807 005a A4EB0804 		sub	r4, r4, r8
 2808              	.LVL421:
 2809              	.L293:
1495:Middlewares/Third_Party/FatFs/src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2810              		.loc 1 1495 0
 2811 005e 4445     		cmp	r4, r8
 2812 0060 0FD3     		bcc	.L307
1496:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2813              		.loc 1 1496 0
 2814 0062 2946     		mov	r1, r5
 2815 0064 3046     		mov	r0, r6
 2816 0066 FFF7FEFF 		bl	get_fat
 2817              	.LVL422:
 2818 006a 0546     		mov	r5, r0
 2819              	.LVL423:
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2820              		.loc 1 1497 0
 2821 006c B0F1FF3F 		cmp	r0, #-1
 2822 0070 18D0     		beq	.L298
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 2823              		.loc 1 1498 0
 2824 0072 0128     		cmp	r0, #1
 2825 0074 19D9     		bls	.L299
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 2826              		.loc 1 1498 0 is_stmt 0 discriminator 2
 2827 0076 7B69     		ldr	r3, [r7, #20]
 2828 0078 9842     		cmp	r0, r3
 2829 007a EED3     		bcc	.L308
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 2830              		.loc 1 1498 0
 2831 007c 0220     		movs	r0, #2
 2832              	.LVL424:
 2833 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2834              	.LVL425:
 2835              	.L307:
1501:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2836              		.loc 1 1501 0 is_stmt 1
 2837 0082 2946     		mov	r1, r5
 2838 0084 3846     		mov	r0, r7
 2839 0086 FFF7FEFF 		bl	clust2sect
 2840              	.LVL426:
 2841 008a F061     		str	r0, [r6, #28]
 2842 008c DAE7     		b	.L292
 2843              	.LVL427:
 2844              	.L306:
1505:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 2845              		.loc 1 1505 0
 2846 008e 03EB5423 		add	r3, r3, r4, lsr #9
 2847 0092 F361     		str	r3, [r6, #28]
1506:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2848              		.loc 1 1506 0
 2849 0094 3037     		adds	r7, r7, #48
 2850              	.LVL428:
 2851 0096 C4F30804 		ubfx	r4, r4, #0, #9
ARM GAS  /tmp/ccBYTIZg.s 			page 161


 2852              	.LVL429:
 2853 009a 3C44     		add	r4, r4, r7
 2854 009c 3462     		str	r4, [r6, #32]
1508:Middlewares/Third_Party/FatFs/src/ff.c **** }
 2855              		.loc 1 1508 0
 2856 009e 0020     		movs	r0, #0
 2857 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2858              	.LVL430:
 2859              	.L298:
1497:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2860              		.loc 1 1497 0
 2861 00a4 0120     		movs	r0, #1
 2862              	.LVL431:
 2863 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2864              	.LVL432:
 2865              	.L299:
1498:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs -= csz;
 2866              		.loc 1 1498 0
 2867 00aa 0220     		movs	r0, #2
 2868              	.LVL433:
 2869 00ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2870              		.cfi_endproc
 2871              	.LFE163:
 2873              		.section	.text.create_chain,"ax",%progbits
 2874              		.align	1
 2875              		.syntax unified
 2876              		.thumb
 2877              		.thumb_func
 2878              		.fpu fpv5-d16
 2880              	create_chain:
 2881              	.LFB161:
1355:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD cs, ncl, scl;
 2882              		.loc 1 1355 0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 0
 2885              		@ frame_needed = 0, uses_anonymous_args = 0
 2886              	.LVL434:
 2887 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2888              	.LCFI31:
 2889              		.cfi_def_cfa_offset 24
 2890              		.cfi_offset 4, -24
 2891              		.cfi_offset 5, -20
 2892              		.cfi_offset 6, -16
 2893              		.cfi_offset 7, -12
 2894              		.cfi_offset 8, -8
 2895              		.cfi_offset 14, -4
 2896 0004 0746     		mov	r7, r0
1358:Middlewares/Third_Party/FatFs/src/ff.c **** 
 2897              		.loc 1 1358 0
 2898 0006 0668     		ldr	r6, [r0]
 2899              	.LVL435:
1361:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = fs->last_clst;				/* Get suggested cluster to start from */
 2900              		.loc 1 1361 0
 2901 0008 8846     		mov	r8, r1
 2902 000a 31B9     		cbnz	r1, .L310
1362:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2903              		.loc 1 1362 0
ARM GAS  /tmp/ccBYTIZg.s 			page 162


 2904 000c F568     		ldr	r5, [r6, #12]
 2905              	.LVL436:
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2906              		.loc 1 1363 0
 2907 000e 8DB1     		cbz	r5, .L319
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2908              		.loc 1 1363 0 is_stmt 0 discriminator 2
 2909 0010 7369     		ldr	r3, [r6, #20]
 2910 0012 9D42     		cmp	r5, r3
 2911 0014 0FD3     		bcc	.L311
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2912              		.loc 1 1363 0
 2913 0016 0125     		movs	r5, #1
 2914              	.LVL437:
 2915 0018 0DE0     		b	.L311
 2916              	.LVL438:
 2917              	.L310:
1366:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < 2) return 1;				/* Invalid FAT value */
 2918              		.loc 1 1366 0 is_stmt 1
 2919 001a FFF7FEFF 		bl	get_fat
 2920              	.LVL439:
 2921 001e 0346     		mov	r3, r0
 2922              	.LVL440:
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 2923              		.loc 1 1367 0
 2924 0020 0128     		cmp	r0, #1
 2925 0022 4BD9     		bls	.L321
1368:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2926              		.loc 1 1368 0
 2927 0024 B0F1FF3F 		cmp	r0, #-1
 2928 0028 4DD0     		beq	.L309
1369:Middlewares/Third_Party/FatFs/src/ff.c **** 		scl = clst;
 2929              		.loc 1 1369 0
 2930 002a 7269     		ldr	r2, [r6, #20]
 2931 002c 9042     		cmp	r0, r2
 2932 002e 4AD3     		bcc	.L309
1370:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2933              		.loc 1 1370 0
 2934 0030 4546     		mov	r5, r8
 2935 0032 00E0     		b	.L311
 2936              	.LVL441:
 2937              	.L319:
1363:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 2938              		.loc 1 1363 0
 2939 0034 0125     		movs	r5, #1
 2940              	.LVL442:
 2941              	.L311:
1400:Middlewares/Third_Party/FatFs/src/ff.c **** 		for (;;) {
 2942              		.loc 1 1400 0
 2943 0036 2C46     		mov	r4, r5
 2944 0038 0CE0     		b	.L315
 2945              	.LVL443:
 2946              	.L313:
1407:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 0) break;				/* Found a free cluster */
 2947              		.loc 1 1407 0
 2948 003a 2146     		mov	r1, r4
 2949 003c 3846     		mov	r0, r7
ARM GAS  /tmp/ccBYTIZg.s 			page 163


 2950 003e FFF7FEFF 		bl	get_fat
 2951              	.LVL444:
1408:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 2952              		.loc 1 1408 0
 2953 0042 0346     		mov	r3, r0
 2954 0044 70B1     		cbz	r0, .L314
1409:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == scl) return 0;		/* No free cluster */
 2955              		.loc 1 1409 0
 2956 0046 B0F1FF3F 		cmp	r0, #-1
 2957 004a 18BF     		it	ne
 2958 004c 0128     		cmpne	r0, #1
 2959 004e 3AD0     		beq	.L309
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 2960              		.loc 1 1410 0
 2961 0050 AC42     		cmp	r4, r5
 2962 0052 37D0     		beq	.L326
 2963              	.LVL445:
 2964              	.L315:
1402:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2965              		.loc 1 1402 0
 2966 0054 0134     		adds	r4, r4, #1
 2967              	.LVL446:
1403:Middlewares/Third_Party/FatFs/src/ff.c **** 				ncl = 2;
 2968              		.loc 1 1403 0
 2969 0056 7369     		ldr	r3, [r6, #20]
 2970 0058 9C42     		cmp	r4, r3
 2971 005a EED3     		bcc	.L313
 2972              	.LVL447:
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 2973              		.loc 1 1405 0
 2974 005c 012D     		cmp	r5, #1
 2975 005e 2FD9     		bls	.L322
1404:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ncl > scl) return 0;	/* No free cluster */
 2976              		.loc 1 1404 0
 2977 0060 0224     		movs	r4, #2
 2978 0062 EAE7     		b	.L313
 2979              	.LVL448:
 2980              	.L314:
1412:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && clst != 0) {
 2981              		.loc 1 1412 0
 2982 0064 4FF0FF32 		mov	r2, #-1
 2983 0068 2146     		mov	r1, r4
 2984 006a 3046     		mov	r0, r6
 2985              	.LVL449:
 2986 006c FFF7FEFF 		bl	put_fat
 2987              	.LVL450:
1413:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 2988              		.loc 1 1413 0
 2989 0070 0346     		mov	r3, r0
 2990 0072 B0FA80F0 		clz	r0, r0
 2991              	.LVL451:
 2992 0076 4009     		lsrs	r0, r0, #5
 2993 0078 B8F1000F 		cmp	r8, #0
 2994 007c 08BF     		it	eq
 2995 007e 0020     		moveq	r0, #0
 2996 0080 70B9     		cbnz	r0, .L327
 2997              	.L316:
ARM GAS  /tmp/ccBYTIZg.s 			page 164


 2998              	.LVL452:
1418:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->last_clst = ncl;
 2999              		.loc 1 1418 0
 3000 0082 A3B9     		cbnz	r3, .L317
1419:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 3001              		.loc 1 1419 0
 3002 0084 F460     		str	r4, [r6, #12]
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
 3003              		.loc 1 1420 0
 3004 0086 3269     		ldr	r2, [r6, #16]
 3005 0088 7369     		ldr	r3, [r6, #20]
 3006              	.LVL453:
 3007 008a 023B     		subs	r3, r3, #2
 3008 008c 9A42     		cmp	r2, r3
 3009 008e 01D8     		bhi	.L318
1420:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fsi_flag |= 1;
 3010              		.loc 1 1420 0 is_stmt 0 discriminator 1
 3011 0090 013A     		subs	r2, r2, #1
 3012 0092 3261     		str	r2, [r6, #16]
 3013              	.L318:
1421:Middlewares/Third_Party/FatFs/src/ff.c **** 	} else {
 3014              		.loc 1 1421 0 is_stmt 1
 3015 0094 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 3016 0096 43F00103 		orr	r3, r3, #1
 3017 009a 3371     		strb	r3, [r6, #4]
 3018 009c 2346     		mov	r3, r4
 3019 009e 12E0     		b	.L309
 3020              	.L327:
1414:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3021              		.loc 1 1414 0
 3022 00a0 2246     		mov	r2, r4
 3023 00a2 4146     		mov	r1, r8
 3024 00a4 3046     		mov	r0, r6
 3025 00a6 FFF7FEFF 		bl	put_fat
 3026              	.LVL454:
 3027 00aa 0346     		mov	r3, r0
 3028              	.LVL455:
 3029 00ac E9E7     		b	.L316
 3030              	.L317:
1423:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3031              		.loc 1 1423 0
 3032 00ae 012B     		cmp	r3, #1
 3033 00b0 01D0     		beq	.L328
 3034 00b2 0123     		movs	r3, #1
 3035              	.LVL456:
 3036 00b4 07E0     		b	.L309
 3037              	.LVL457:
 3038              	.L328:
 3039 00b6 4FF0FF33 		mov	r3, #-1
 3040              	.LVL458:
 3041 00ba 04E0     		b	.L309
 3042              	.LVL459:
 3043              	.L321:
1367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 3044              		.loc 1 1367 0
 3045 00bc 0123     		movs	r3, #1
 3046 00be 02E0     		b	.L309
ARM GAS  /tmp/ccBYTIZg.s 			page 165


 3047              	.LVL460:
 3048              	.L322:
1405:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3049              		.loc 1 1405 0
 3050 00c0 0023     		movs	r3, #0
 3051 00c2 00E0     		b	.L309
 3052              	.LVL461:
 3053              	.L326:
1410:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3054              		.loc 1 1410 0
 3055 00c4 0023     		movs	r3, #0
 3056              	.LVL462:
 3057              	.L309:
1427:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3058              		.loc 1 1427 0
 3059 00c6 1846     		mov	r0, r3
 3060 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3061              		.cfi_endproc
 3062              	.LFE161:
 3064              		.section	.text.remove_chain,"ax",%progbits
 3065              		.align	1
 3066              		.syntax unified
 3067              		.thumb
 3068              		.thumb_func
 3069              		.fpu fpv5-d16
 3071              	remove_chain:
 3072              	.LFB160:
1276:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_OK;
 3073              		.loc 1 1276 0
 3074              		.cfi_startproc
 3075              		@ args = 0, pretend = 0, frame = 0
 3076              		@ frame_needed = 0, uses_anonymous_args = 0
 3077              	.LVL463:
 3078 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3079              	.LCFI32:
 3080              		.cfi_def_cfa_offset 24
 3081              		.cfi_offset 3, -24
 3082              		.cfi_offset 4, -20
 3083              		.cfi_offset 5, -16
 3084              		.cfi_offset 6, -12
 3085              		.cfi_offset 7, -8
 3086              		.cfi_offset 14, -4
 3087 0002 0E46     		mov	r6, r1
 3088              	.LVL464:
1279:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT || _USE_TRIM
 3089              		.loc 1 1279 0
 3090 0004 0468     		ldr	r4, [r0]
 3091              	.LVL465:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3092              		.loc 1 1287 0
 3093 0006 0129     		cmp	r1, #1
 3094 0008 30D9     		bls	.L334
 3095 000a 0746     		mov	r7, r0
 3096 000c 1146     		mov	r1, r2
 3097              	.LVL466:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3098              		.loc 1 1287 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccBYTIZg.s 			page 166


 3099 000e 6369     		ldr	r3, [r4, #20]
 3100 0010 9E42     		cmp	r6, r3
 3101 0012 01D3     		bcc	.L340
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3102              		.loc 1 1287 0
 3103 0014 0221     		movs	r1, #2
 3104 0016 2AE0     		b	.L330
 3105              	.LVL467:
 3106              	.L340:
1290:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 3107              		.loc 1 1290 0 is_stmt 1
 3108 0018 52B1     		cbz	r2, .L333
1291:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) return res;
 3109              		.loc 1 1291 0
 3110 001a 4FF0FF32 		mov	r2, #-1
 3111 001e 2046     		mov	r0, r4
 3112              	.LVL468:
 3113 0020 FFF7FEFF 		bl	put_fat
 3114              	.LVL469:
1292:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3115              		.loc 1 1292 0
 3116 0024 0146     		mov	r1, r0
 3117 0026 18B1     		cbz	r0, .L333
 3118 0028 21E0     		b	.L330
 3119              	.LVL470:
 3120              	.L332:
1327:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 3121              		.loc 1 1327 0
 3122 002a 2E46     		mov	r6, r5
1328:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3123              		.loc 1 1328 0
 3124 002c 9542     		cmp	r5, r2
 3125 002e 1ED2     		bcs	.L330
 3126              	.LVL471:
 3127              	.L333:
1297:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 3128              		.loc 1 1297 0
 3129 0030 3146     		mov	r1, r6
 3130 0032 3846     		mov	r0, r7
 3131 0034 FFF7FEFF 		bl	get_fat
 3132              	.LVL472:
1298:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 3133              		.loc 1 1298 0
 3134 0038 0546     		mov	r5, r0
 3135 003a D0B1     		cbz	r0, .L336
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3136              		.loc 1 1299 0
 3137 003c 0128     		cmp	r0, #1
 3138 003e 1AD0     		beq	.L337
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3139              		.loc 1 1300 0
 3140 0040 B0F1FF3F 		cmp	r0, #-1
 3141 0044 19D0     		beq	.L338
1302:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) return res;
 3142              		.loc 1 1302 0
 3143 0046 0022     		movs	r2, #0
 3144 0048 3146     		mov	r1, r6
ARM GAS  /tmp/ccBYTIZg.s 			page 167


 3145 004a 2046     		mov	r0, r4
 3146              	.LVL473:
 3147 004c FFF7FEFF 		bl	put_fat
 3148              	.LVL474:
1303:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3149              		.loc 1 1303 0
 3150 0050 0146     		mov	r1, r0
 3151 0052 60B9     		cbnz	r0, .L330
1305:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst++;
 3152              		.loc 1 1305 0
 3153 0054 2369     		ldr	r3, [r4, #16]
 3154 0056 6269     		ldr	r2, [r4, #20]
 3155 0058 901E     		subs	r0, r2, #2
 3156              	.LVL475:
 3157 005a 8342     		cmp	r3, r0
 3158 005c E5D2     		bcs	.L332
1306:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;
 3159              		.loc 1 1306 0
 3160 005e 0133     		adds	r3, r3, #1
 3161 0060 2361     		str	r3, [r4, #16]
1307:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3162              		.loc 1 1307 0
 3163 0062 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 3164 0064 43F00103 		orr	r3, r3, #1
 3165 0068 2371     		strb	r3, [r4, #4]
 3166 006a DEE7     		b	.L332
 3167              	.LVL476:
 3168              	.L334:
1287:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3169              		.loc 1 1287 0
 3170 006c 0221     		movs	r1, #2
 3171              	.LVL477:
 3172              	.L330:
1342:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3173              		.loc 1 1342 0
 3174 006e 0846     		mov	r0, r1
 3175 0070 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3176              	.LVL478:
 3177              	.L336:
1341:Middlewares/Third_Party/FatFs/src/ff.c **** }
 3178              		.loc 1 1341 0
 3179 0072 0021     		movs	r1, #0
 3180 0074 FBE7     		b	.L330
 3181              	.L337:
1299:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 3182              		.loc 1 1299 0
 3183 0076 0221     		movs	r1, #2
 3184 0078 F9E7     		b	.L330
 3185              	.L338:
1300:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 3186              		.loc 1 1300 0
 3187 007a 0121     		movs	r1, #1
 3188 007c F7E7     		b	.L330
 3189              		.cfi_endproc
 3190              	.LFE160:
 3192              		.section	.text.dir_remove,"ax",%progbits
 3193              		.align	1
ARM GAS  /tmp/ccBYTIZg.s 			page 168


 3194              		.syntax unified
 3195              		.thumb
 3196              		.thumb_func
 3197              		.fpu fpv5-d16
 3199              	dir_remove:
 3200              	.LFB171:
2399:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3201              		.loc 1 2399 0
 3202              		.cfi_startproc
 3203              		@ args = 0, pretend = 0, frame = 0
 3204              		@ frame_needed = 0, uses_anonymous_args = 0
 3205              	.LVL479:
 3206 0000 38B5     		push	{r3, r4, r5, lr}
 3207              	.LCFI33:
 3208              		.cfi_def_cfa_offset 16
 3209              		.cfi_offset 3, -16
 3210              		.cfi_offset 4, -12
 3211              		.cfi_offset 5, -8
 3212              		.cfi_offset 14, -4
 3213 0002 0446     		mov	r4, r0
2401:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3214              		.loc 1 2401 0
 3215 0004 0568     		ldr	r5, [r0]
 3216              	.LVL480:
2424:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3217              		.loc 1 2424 0
 3218 0006 C169     		ldr	r1, [r0, #28]
 3219 0008 2846     		mov	r0, r5
 3220              	.LVL481:
 3221 000a FFF7FEFF 		bl	move_window
 3222              	.LVL482:
2425:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->dir[DIR_Name] = DDEM;
 3223              		.loc 1 2425 0
 3224 000e 0346     		mov	r3, r0
 3225 0010 20B9     		cbnz	r0, .L342
2426:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->wflag = 1;
 3226              		.loc 1 2426 0
 3227 0012 226A     		ldr	r2, [r4, #32]
 3228 0014 E521     		movs	r1, #229
 3229 0016 1170     		strb	r1, [r2]
2427:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3230              		.loc 1 2427 0
 3231 0018 0122     		movs	r2, #1
 3232 001a EA70     		strb	r2, [r5, #3]
 3233              	.L342:
2432:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3234              		.loc 1 2432 0
 3235 001c 1846     		mov	r0, r3
 3236              	.LVL483:
 3237 001e 38BD     		pop	{r3, r4, r5, pc}
 3238              		.cfi_endproc
 3239              	.LFE171:
 3241              		.section	.text.dir_next,"ax",%progbits
 3242              		.align	1
 3243              		.syntax unified
 3244              		.thumb
 3245              		.thumb_func
ARM GAS  /tmp/ccBYTIZg.s 			page 169


 3246              		.fpu fpv5-d16
 3248              	dir_next:
 3249              	.LFB164:
1523:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD ofs, clst;
 3250              		.loc 1 1523 0
 3251              		.cfi_startproc
 3252              		@ args = 0, pretend = 0, frame = 0
 3253              		@ frame_needed = 0, uses_anonymous_args = 0
 3254              	.LVL484:
 3255 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3256              	.LCFI34:
 3257              		.cfi_def_cfa_offset 32
 3258              		.cfi_offset 3, -32
 3259              		.cfi_offset 4, -28
 3260              		.cfi_offset 5, -24
 3261              		.cfi_offset 6, -20
 3262              		.cfi_offset 7, -16
 3263              		.cfi_offset 8, -12
 3264              		.cfi_offset 9, -8
 3265              		.cfi_offset 14, -4
1525:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 3266              		.loc 1 1525 0
 3267 0004 0668     		ldr	r6, [r0]
 3268              	.LVL485:
1530:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) re
 3269              		.loc 1 1530 0
 3270 0006 4369     		ldr	r3, [r0, #20]
 3271 0008 03F12005 		add	r5, r3, #32
 3272              	.LVL486:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3273              		.loc 1 1531 0
 3274 000c C369     		ldr	r3, [r0, #28]
 3275 000e 13B9     		cbnz	r3, .L362
 3276 0010 0420     		movs	r0, #4
 3277              	.LVL487:
 3278 0012 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3279              	.LVL488:
 3280              	.L362:
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3281              		.loc 1 1531 0 is_stmt 0 discriminator 2
 3282 0016 B5F5001F 		cmp	r5, #2097152
 3283 001a 02D3     		bcc	.L363
1531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3284              		.loc 1 1531 0
 3285 001c 0420     		movs	r0, #4
 3286              	.LVL489:
 3287 001e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3288              	.LVL490:
 3289              	.L363:
 3290 0022 8846     		mov	r8, r1
 3291 0024 0446     		mov	r4, r0
1533:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->sect++;				/* Next sector */
 3292              		.loc 1 1533 0 is_stmt 1
 3293 0026 C5F30807 		ubfx	r7, r5, #0, #9
 3294 002a 8FB9     		cbnz	r7, .L346
1534:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3295              		.loc 1 1534 0
ARM GAS  /tmp/ccBYTIZg.s 			page 170


 3296 002c 0133     		adds	r3, r3, #1
 3297 002e C361     		str	r3, [r0, #28]
1536:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3298              		.loc 1 1536 0
 3299 0030 8169     		ldr	r1, [r0, #24]
 3300              	.LVL491:
 3301 0032 41B9     		cbnz	r1, .L347
1537:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3302              		.loc 1 1537 0
 3303 0034 3389     		ldrh	r3, [r6, #8]
 3304 0036 B3EB551F 		cmp	r3, r5, lsr #5
 3305 003a 09D8     		bhi	.L346
1538:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3306              		.loc 1 1538 0
 3307 003c 0023     		movs	r3, #0
 3308 003e C361     		str	r3, [r0, #28]
 3309 0040 0420     		movs	r0, #4
 3310              	.LVL492:
 3311 0042 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3312              	.LVL493:
 3313              	.L347:
1542:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 3314              		.loc 1 1542 0
 3315 0046 7389     		ldrh	r3, [r6, #10]
 3316 0048 013B     		subs	r3, r3, #1
 3317 004a 13EA5523 		ands	r3, r3, r5, lsr #9
 3318 004e 06D0     		beq	.L364
 3319              	.LVL494:
 3320              	.L346:
1574:Middlewares/Third_Party/FatFs/src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3321              		.loc 1 1574 0
 3322 0050 6561     		str	r5, [r4, #20]
1575:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3323              		.loc 1 1575 0
 3324 0052 3036     		adds	r6, r6, #48
 3325              	.LVL495:
 3326 0054 3E44     		add	r6, r6, r7
 3327              	.LVL496:
 3328 0056 2662     		str	r6, [r4, #32]
1577:Middlewares/Third_Party/FatFs/src/ff.c **** }
 3329              		.loc 1 1577 0
 3330 0058 0020     		movs	r0, #0
 3331 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3332              	.LVL497:
 3333              	.L364:
1543:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 3334              		.loc 1 1543 0
 3335 005e FFF7FEFF 		bl	get_fat
 3336              	.LVL498:
 3337 0062 8146     		mov	r9, r0
 3338              	.LVL499:
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 3339              		.loc 1 1544 0
 3340 0064 0128     		cmp	r0, #1
 3341 0066 48D9     		bls	.L354
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 3342              		.loc 1 1545 0
ARM GAS  /tmp/ccBYTIZg.s 			page 171


 3343 0068 B0F1FF3F 		cmp	r0, #-1
 3344 006c 48D0     		beq	.L355
1546:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 3345              		.loc 1 1546 0
 3346 006e 7369     		ldr	r3, [r6, #20]
 3347 0070 9842     		cmp	r0, r3
 3348 0072 3AD3     		bcc	.L348
1548:Middlewares/Third_Party/FatFs/src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3349              		.loc 1 1548 0
 3350 0074 B8F1000F 		cmp	r8, #0
 3351 0078 04D1     		bne	.L349
1549:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3352              		.loc 1 1549 0
 3353 007a 0023     		movs	r3, #0
 3354 007c E361     		str	r3, [r4, #28]
 3355 007e 0420     		movs	r0, #4
 3356              	.LVL500:
 3357 0080 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3358              	.LVL501:
 3359              	.L349:
1551:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3360              		.loc 1 1551 0
 3361 0084 A169     		ldr	r1, [r4, #24]
 3362 0086 2046     		mov	r0, r4
 3363              	.LVL502:
 3364 0088 FFF7FEFF 		bl	create_chain
 3365              	.LVL503:
1552:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3366              		.loc 1 1552 0
 3367 008c 8146     		mov	r9, r0
 3368 008e 10B9     		cbnz	r0, .L365
 3369 0090 0720     		movs	r0, #7
 3370              	.LVL504:
 3371 0092 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3372              	.LVL505:
 3373              	.L365:
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3374              		.loc 1 1553 0
 3375 0096 0128     		cmp	r0, #1
 3376 0098 35D0     		beq	.L357
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
 3377              		.loc 1 1554 0
 3378 009a B0F1FF3F 		cmp	r0, #-1
 3379 009e 35D0     		beq	.L358
1557:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 3380              		.loc 1 1557 0
 3381 00a0 3046     		mov	r0, r6
 3382              	.LVL506:
 3383 00a2 FFF7FEFF 		bl	sync_window
 3384              	.LVL507:
 3385 00a6 A0BB     		cbnz	r0, .L359
1558:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill t
 3386              		.loc 1 1558 0
 3387 00a8 4FF40072 		mov	r2, #512
 3388 00ac 0021     		movs	r1, #0
 3389 00ae 06F13000 		add	r0, r6, #48
 3390 00b2 FFF7FEFF 		bl	mem_set
ARM GAS  /tmp/ccBYTIZg.s 			page 172


 3391              	.LVL508:
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3392              		.loc 1 1559 0
 3393 00b6 4946     		mov	r1, r9
 3394 00b8 3046     		mov	r0, r6
 3395 00ba FFF7FEFF 		bl	clust2sect
 3396              	.LVL509:
 3397 00be F062     		str	r0, [r6, #44]
 3398 00c0 4FF00008 		mov	r8, #0
 3399              	.LVL510:
 3400              	.L350:
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3401              		.loc 1 1559 0 is_stmt 0 discriminator 1
 3402 00c4 7389     		ldrh	r3, [r6, #10]
 3403 00c6 9845     		cmp	r8, r3
 3404 00c8 0BD2     		bcs	.L366
1560:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 3405              		.loc 1 1560 0 is_stmt 1
 3406 00ca 0123     		movs	r3, #1
 3407 00cc F370     		strb	r3, [r6, #3]
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3408              		.loc 1 1561 0
 3409 00ce 3046     		mov	r0, r6
 3410 00d0 FFF7FEFF 		bl	sync_window
 3411              	.LVL511:
 3412 00d4 00BB     		cbnz	r0, .L360
1559:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 3413              		.loc 1 1559 0 discriminator 2
 3414 00d6 08F10108 		add	r8, r8, #1
 3415              	.LVL512:
 3416 00da F36A     		ldr	r3, [r6, #44]
 3417 00dc 0133     		adds	r3, r3, #1
 3418 00de F362     		str	r3, [r6, #44]
 3419 00e0 F0E7     		b	.L350
 3420              	.L366:
1563:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 3421              		.loc 1 1563 0
 3422 00e2 F36A     		ldr	r3, [r6, #44]
 3423 00e4 A3EB0803 		sub	r3, r3, r8
 3424 00e8 F362     		str	r3, [r6, #44]
 3425              	.LVL513:
 3426              	.L348:
1569:Middlewares/Third_Party/FatFs/src/ff.c **** 				dp->sect = clust2sect(fs, clst);
 3427              		.loc 1 1569 0
 3428 00ea C4F81890 		str	r9, [r4, #24]
1570:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3429              		.loc 1 1570 0
 3430 00ee 4946     		mov	r1, r9
 3431 00f0 3046     		mov	r0, r6
 3432 00f2 FFF7FEFF 		bl	clust2sect
 3433              	.LVL514:
 3434 00f6 E061     		str	r0, [r4, #28]
 3435 00f8 AAE7     		b	.L346
 3436              	.LVL515:
 3437              	.L354:
1544:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 3438              		.loc 1 1544 0
ARM GAS  /tmp/ccBYTIZg.s 			page 173


 3439 00fa 0220     		movs	r0, #2
 3440              	.LVL516:
 3441 00fc BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3442              	.LVL517:
 3443              	.L355:
1545:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 3444              		.loc 1 1545 0
 3445 0100 0120     		movs	r0, #1
 3446              	.LVL518:
 3447 0102 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3448              	.LVL519:
 3449              	.L357:
1553:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3450              		.loc 1 1553 0
 3451 0106 0220     		movs	r0, #2
 3452              	.LVL520:
 3453 0108 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3454              	.LVL521:
 3455              	.L358:
1554:Middlewares/Third_Party/FatFs/src/ff.c **** 					/* Clean-up the stretched table */
 3456              		.loc 1 1554 0
 3457 010c 0120     		movs	r0, #1
 3458              	.LVL522:
 3459 010e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3460              	.LVL523:
 3461              	.L359:
1557:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 3462              		.loc 1 1557 0
 3463 0112 0120     		movs	r0, #1
 3464 0114 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3465              	.LVL524:
 3466              	.L360:
1561:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 3467              		.loc 1 1561 0
 3468 0118 0120     		movs	r0, #1
1578:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3469              		.loc 1 1578 0
 3470 011a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3471              		.cfi_endproc
 3472              	.LFE164:
 3474              		.section	.text.dir_find,"ax",%progbits
 3475              		.align	1
 3476              		.syntax unified
 3477              		.thumb
 3478              		.thumb_func
 3479              		.fpu fpv5-d16
 3481              	dir_find:
 3482              	.LFB169:
2213:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3483              		.loc 1 2213 0
 3484              		.cfi_startproc
 3485              		@ args = 0, pretend = 0, frame = 0
 3486              		@ frame_needed = 0, uses_anonymous_args = 0
 3487              	.LVL525:
 3488 0000 70B5     		push	{r4, r5, r6, lr}
 3489              	.LCFI35:
 3490              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccBYTIZg.s 			page 174


 3491              		.cfi_offset 4, -16
 3492              		.cfi_offset 5, -12
 3493              		.cfi_offset 6, -8
 3494              		.cfi_offset 14, -4
 3495 0002 0446     		mov	r4, r0
2215:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE c;
 3496              		.loc 1 2215 0
 3497 0004 0668     		ldr	r6, [r0]
 3498              	.LVL526:
2221:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK) return res;
 3499              		.loc 1 2221 0
 3500 0006 0021     		movs	r1, #0
 3501 0008 FFF7FEFF 		bl	dir_sdi
 3502              	.LVL527:
2222:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 3503              		.loc 1 2222 0
 3504 000c 0546     		mov	r5, r0
 3505 000e 40B1     		cbz	r0, .L370
 3506              	.LVL528:
 3507              	.L368:
2281:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3508              		.loc 1 2281 0
 3509 0010 2846     		mov	r0, r5
 3510 0012 70BD     		pop	{r4, r5, r6, pc}
 3511              	.LVL529:
 3512              	.L369:
2277:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (res == FR_OK);
 3513              		.loc 1 2277 0
 3514 0014 0021     		movs	r1, #0
 3515 0016 2046     		mov	r0, r4
 3516 0018 FFF7FEFF 		bl	dir_next
 3517              	.LVL530:
2278:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3518              		.loc 1 2278 0
 3519 001c 0546     		mov	r5, r0
 3520 001e 0028     		cmp	r0, #0
 3521 0020 F6D1     		bne	.L368
 3522              	.L370:
2248:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3523              		.loc 1 2248 0
 3524 0022 E169     		ldr	r1, [r4, #28]
 3525 0024 3046     		mov	r0, r6
 3526              	.LVL531:
 3527 0026 FFF7FEFF 		bl	move_window
 3528              	.LVL532:
2249:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];
 3529              		.loc 1 2249 0
 3530 002a 0546     		mov	r5, r0
 3531 002c 0028     		cmp	r0, #0
 3532 002e EFD1     		bne	.L368
2250:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3533              		.loc 1 2250 0
 3534 0030 206A     		ldr	r0, [r4, #32]
 3535              	.LVL533:
 3536 0032 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 3537              	.LVL534:
2251:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
ARM GAS  /tmp/ccBYTIZg.s 			page 175


 3538              		.loc 1 2251 0
 3539 0034 7BB1     		cbz	r3, .L371
2274:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 3540              		.loc 1 2274 0
 3541 0036 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 3542              	.LVL535:
 3543 0038 03F03F03 		and	r3, r3, #63
 3544 003c A371     		strb	r3, [r4, #6]
 3545              	.LVL536:
2275:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3546              		.loc 1 2275 0
 3547 003e C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 3548 0040 13F0080F 		tst	r3, #8
 3549 0044 E6D1     		bne	.L369
2275:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3550              		.loc 1 2275 0 is_stmt 0 discriminator 1
 3551 0046 0B22     		movs	r2, #11
 3552 0048 04F12401 		add	r1, r4, #36
 3553 004c FFF7FEFF 		bl	mem_cmp
 3554              	.LVL537:
 3555 0050 0028     		cmp	r0, #0
 3556 0052 DFD1     		bne	.L369
 3557 0054 DCE7     		b	.L368
 3558              	.LVL538:
 3559              	.L371:
2251:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3560              		.loc 1 2251 0 is_stmt 1
 3561 0056 0425     		movs	r5, #4
 3562 0058 DAE7     		b	.L368
 3563              		.cfi_endproc
 3564              	.LFE169:
 3566              		.section	.text.follow_path,"ax",%progbits
 3567              		.align	1
 3568              		.syntax unified
 3569              		.thumb
 3570              		.thumb_func
 3571              		.fpu fpv5-d16
 3573              	follow_path:
 3574              	.LFB174:
2817:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3575              		.loc 1 2817 0
 3576              		.cfi_startproc
 3577              		@ args = 0, pretend = 0, frame = 8
 3578              		@ frame_needed = 0, uses_anonymous_args = 0
 3579              	.LVL539:
 3580 0000 30B5     		push	{r4, r5, lr}
 3581              	.LCFI36:
 3582              		.cfi_def_cfa_offset 12
 3583              		.cfi_offset 4, -12
 3584              		.cfi_offset 5, -8
 3585              		.cfi_offset 14, -4
 3586 0002 83B0     		sub	sp, sp, #12
 3587              	.LCFI37:
 3588              		.cfi_def_cfa_offset 24
 3589 0004 0446     		mov	r4, r0
 3590 0006 0191     		str	r1, [sp, #4]
 3591              	.LVL540:
ARM GAS  /tmp/ccBYTIZg.s 			page 176


2821:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3592              		.loc 1 2821 0
 3593 0008 0568     		ldr	r5, [r0]
 3594              	.LVL541:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 3595              		.loc 1 2830 0
 3596 000a 01E0     		b	.L374
 3597              	.L375:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 3598              		.loc 1 2830 0 is_stmt 0 discriminator 2
 3599 000c 0133     		adds	r3, r3, #1
 3600 000e 0193     		str	r3, [sp, #4]
 3601              	.L374:
2830:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->sclust = 0;					/* Start from root directory */
 3602              		.loc 1 2830 0 discriminator 1
 3603 0010 019B     		ldr	r3, [sp, #4]
 3604 0012 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3605 0014 5C2A     		cmp	r2, #92
 3606 0016 18BF     		it	ne
 3607 0018 2F2A     		cmpne	r2, #47
 3608 001a F7D0     		beq	.L375
2831:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3609              		.loc 1 2831 0 is_stmt 1
 3610 001c 0022     		movs	r2, #0
 3611 001e A260     		str	r2, [r4, #8]
2850:Middlewares/Third_Party/FatFs/src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 3612              		.loc 1 2850 0
 3613 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3614 0022 1F2B     		cmp	r3, #31
 3615 0024 1ED9     		bls	.L382
 3616              	.LVL542:
 3617              	.L376:
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3618              		.loc 1 2856 0
 3619 0026 01A9     		add	r1, sp, #4
 3620 0028 2046     		mov	r0, r4
 3621 002a FFF7FEFF 		bl	create_name
 3622              	.LVL543:
2857:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 3623              		.loc 1 2857 0
 3624 002e 0346     		mov	r3, r0
 3625 0030 00BB     		cbnz	r0, .L377
2858:Middlewares/Third_Party/FatFs/src/ff.c **** 			ns = dp->fn[NSFLAG];
 3626              		.loc 1 2858 0
 3627 0032 2046     		mov	r0, r4
 3628              	.LVL544:
 3629 0034 FFF7FEFF 		bl	dir_find
 3630              	.LVL545:
2859:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3631              		.loc 1 2859 0
 3632 0038 94F82F20 		ldrb	r2, [r4, #47]	@ zero_extendqisi2
 3633              	.LVL546:
2860:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 3634              		.loc 1 2860 0
 3635 003c 0346     		mov	r3, r0
 3636 003e E0B9     		cbnz	r0, .L383
2872:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Get into the sub-directory */
ARM GAS  /tmp/ccBYTIZg.s 			page 177


 3637              		.loc 1 2872 0
 3638 0040 12F0040F 		tst	r2, #4
 3639 0044 16D1     		bne	.L377
2874:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_NO_PATH; break;
 3640              		.loc 1 2874 0
 3641 0046 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 3642 0048 13F0100F 		tst	r3, #16
 3643 004c 1CD0     		beq	.L380
2888:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3644              		.loc 1 2888 0
 3645 004e 05F13001 		add	r1, r5, #48
 3646 0052 6369     		ldr	r3, [r4, #20]
 3647 0054 C3F30803 		ubfx	r3, r3, #0, #9
 3648 0058 1944     		add	r1, r1, r3
 3649 005a 2846     		mov	r0, r5
 3650              	.LVL547:
 3651 005c FFF7FEFF 		bl	ld_clust
 3652              	.LVL548:
 3653 0060 A060     		str	r0, [r4, #8]
2856:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3654              		.loc 1 2856 0
 3655 0062 E0E7     		b	.L376
 3656              	.LVL549:
 3657              	.L382:
2851:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = dir_sdi(dp, 0);
 3658              		.loc 1 2851 0
 3659 0064 8023     		movs	r3, #128
 3660 0066 84F82F30 		strb	r3, [r4, #47]
2852:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3661              		.loc 1 2852 0
 3662 006a 1146     		mov	r1, r2
 3663              	.LVL550:
 3664 006c 2046     		mov	r0, r4
 3665              	.LVL551:
 3666 006e FFF7FEFF 		bl	dir_sdi
 3667              	.LVL552:
 3668 0072 0346     		mov	r3, r0
 3669              	.LVL553:
 3670              	.L377:
2894:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3671              		.loc 1 2894 0
 3672 0074 1846     		mov	r0, r3
 3673 0076 03B0     		add	sp, sp, #12
 3674              	.LCFI38:
 3675              		.cfi_remember_state
 3676              		.cfi_def_cfa_offset 12
 3677              		@ sp needed
 3678 0078 30BD     		pop	{r4, r5, pc}
 3679              	.LVL554:
 3680              	.L383:
 3681              	.LCFI39:
 3682              		.cfi_restore_state
2861:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 3683              		.loc 1 2861 0
 3684 007a 0428     		cmp	r0, #4
 3685 007c FAD1     		bne	.L377
2867:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
ARM GAS  /tmp/ccBYTIZg.s 			page 178


 3686              		.loc 1 2867 0
 3687 007e 12F0040F 		tst	r2, #4
 3688 0082 F7D1     		bne	.L377
 3689 0084 0523     		movs	r3, #5
 3690 0086 F5E7     		b	.L377
 3691              	.L380:
2875:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3692              		.loc 1 2875 0
 3693 0088 0523     		movs	r3, #5
 3694 008a F3E7     		b	.L377
 3695              		.cfi_endproc
 3696              	.LFE174:
 3698              		.section	.text.dir_alloc,"ax",%progbits
 3699              		.align	1
 3700              		.syntax unified
 3701              		.thumb
 3702              		.thumb_func
 3703              		.fpu fpv5-d16
 3705              	dir_alloc:
 3706              	.LFB165:
1593:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3707              		.loc 1 1593 0
 3708              		.cfi_startproc
 3709              		@ args = 0, pretend = 0, frame = 0
 3710              		@ frame_needed = 0, uses_anonymous_args = 0
 3711              	.LVL555:
 3712 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3713              	.LCFI40:
 3714              		.cfi_def_cfa_offset 24
 3715              		.cfi_offset 3, -24
 3716              		.cfi_offset 4, -20
 3717              		.cfi_offset 5, -16
 3718              		.cfi_offset 6, -12
 3719              		.cfi_offset 7, -8
 3720              		.cfi_offset 14, -4
 3721 0002 0446     		mov	r4, r0
 3722 0004 0F46     		mov	r7, r1
1596:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3723              		.loc 1 1596 0
 3724 0006 0668     		ldr	r6, [r0]
 3725              	.LVL556:
1599:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3726              		.loc 1 1599 0
 3727 0008 0021     		movs	r1, #0
 3728              	.LVL557:
 3729 000a FFF7FEFF 		bl	dir_sdi
 3730              	.LVL558:
1600:Middlewares/Third_Party/FatFs/src/ff.c **** 		n = 0;
 3731              		.loc 1 1600 0
 3732 000e 0246     		mov	r2, r0
 3733 0010 B8B9     		cbnz	r0, .L385
 3734 0012 0025     		movs	r5, #0
 3735 0014 06E0     		b	.L387
 3736              	.LVL559:
 3737              	.L389:
1612:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 3738              		.loc 1 1612 0
ARM GAS  /tmp/ccBYTIZg.s 			page 179


 3739 0016 0025     		movs	r5, #0
 3740              	.LVL560:
 3741              	.L386:
1614:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 3742              		.loc 1 1614 0
 3743 0018 0121     		movs	r1, #1
 3744 001a 2046     		mov	r0, r4
 3745              	.LVL561:
 3746 001c FFF7FEFF 		bl	dir_next
 3747              	.LVL562:
1615:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3748              		.loc 1 1615 0
 3749 0020 0246     		mov	r2, r0
 3750 0022 70B9     		cbnz	r0, .L385
 3751              	.LVL563:
 3752              	.L387:
1603:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) break;
 3753              		.loc 1 1603 0
 3754 0024 E169     		ldr	r1, [r4, #28]
 3755 0026 3046     		mov	r0, r6
 3756              	.LVL564:
 3757 0028 FFF7FEFF 		bl	move_window
 3758              	.LVL565:
1604:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 3759              		.loc 1 1604 0
 3760 002c 0246     		mov	r2, r0
 3761 002e 40B9     		cbnz	r0, .L385
1608:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 3762              		.loc 1 1608 0
 3763 0030 236A     		ldr	r3, [r4, #32]
 3764 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3765 0034 002B     		cmp	r3, #0
 3766 0036 18BF     		it	ne
 3767 0038 E52B     		cmpne	r3, #229
 3768 003a ECD1     		bne	.L389
1610:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 3769              		.loc 1 1610 0
 3770 003c 0135     		adds	r5, r5, #1
 3771              	.LVL566:
 3772 003e BD42     		cmp	r5, r7
 3773 0040 EAD1     		bne	.L386
 3774              	.LVL567:
 3775              	.L385:
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3776              		.loc 1 1618 0
 3777 0042 042A     		cmp	r2, #4
 3778 0044 01D0     		beq	.L392
 3779              	.LVL568:
 3780              	.L388:
1620:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3781              		.loc 1 1620 0
 3782 0046 1046     		mov	r0, r2
 3783 0048 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3784              	.LVL569:
 3785              	.L392:
1618:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3786              		.loc 1 1618 0
ARM GAS  /tmp/ccBYTIZg.s 			page 180


 3787 004a 0722     		movs	r2, #7
 3788              	.LVL570:
 3789 004c FBE7     		b	.L388
 3790              		.cfi_endproc
 3791              	.LFE165:
 3793              		.section	.text.dir_register,"ax",%progbits
 3794              		.align	1
 3795              		.syntax unified
 3796              		.thumb
 3797              		.thumb_func
 3798              		.fpu fpv5-d16
 3800              	dir_register:
 3801              	.LFB170:
2295:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3802              		.loc 1 2295 0
 3803              		.cfi_startproc
 3804              		@ args = 0, pretend = 0, frame = 0
 3805              		@ frame_needed = 0, uses_anonymous_args = 0
 3806              	.LVL571:
 3807 0000 70B5     		push	{r4, r5, r6, lr}
 3808              	.LCFI41:
 3809              		.cfi_def_cfa_offset 16
 3810              		.cfi_offset 4, -16
 3811              		.cfi_offset 5, -12
 3812              		.cfi_offset 6, -8
 3813              		.cfi_offset 14, -4
 3814 0002 0446     		mov	r4, r0
2297:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3815              		.loc 1 2297 0
 3816 0004 0668     		ldr	r6, [r0]
 3817              	.LVL572:
2366:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3818              		.loc 1 2366 0
 3819 0006 0121     		movs	r1, #1
 3820 0008 FFF7FEFF 		bl	dir_alloc
 3821              	.LVL573:
2371:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3822              		.loc 1 2371 0
 3823 000c 0546     		mov	r5, r0
 3824 000e 08B1     		cbz	r0, .L396
 3825              	.LVL574:
 3826              	.L394:
2384:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3827              		.loc 1 2384 0
 3828 0010 2846     		mov	r0, r5
 3829 0012 70BD     		pop	{r4, r5, r6, pc}
 3830              	.LVL575:
 3831              	.L396:
2372:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
 3832              		.loc 1 2372 0
 3833 0014 E169     		ldr	r1, [r4, #28]
 3834 0016 3046     		mov	r0, r6
 3835              	.LVL576:
 3836 0018 FFF7FEFF 		bl	move_window
 3837              	.LVL577:
2373:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3838              		.loc 1 2373 0
ARM GAS  /tmp/ccBYTIZg.s 			page 181


 3839 001c 0546     		mov	r5, r0
 3840 001e 0028     		cmp	r0, #0
 3841 0020 F6D1     		bne	.L394
2374:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3842              		.loc 1 2374 0
 3843 0022 2022     		movs	r2, #32
 3844 0024 0021     		movs	r1, #0
 3845 0026 206A     		ldr	r0, [r4, #32]
 3846              	.LVL578:
 3847 0028 FFF7FEFF 		bl	mem_set
 3848              	.LVL579:
2375:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0
 3849              		.loc 1 2375 0
 3850 002c 0B22     		movs	r2, #11
 3851 002e 04F12401 		add	r1, r4, #36
 3852 0032 206A     		ldr	r0, [r4, #32]
 3853 0034 FFF7FEFF 		bl	mem_cpy
 3854              	.LVL580:
2379:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3855              		.loc 1 2379 0
 3856 0038 0123     		movs	r3, #1
 3857 003a F370     		strb	r3, [r6, #3]
 3858 003c E8E7     		b	.L394
 3859              		.cfi_endproc
 3860              	.LFE170:
 3862              		.section	.text.dir_read,"ax",%progbits
 3863              		.align	1
 3864              		.syntax unified
 3865              		.thumb
 3866              		.thumb_func
 3867              		.fpu fpv5-d16
 3869              	dir_read:
 3870              	.LFB168:
2135:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res = FR_NO_FILE;
 3871              		.loc 1 2135 0
 3872              		.cfi_startproc
 3873              		@ args = 0, pretend = 0, frame = 0
 3874              		@ frame_needed = 0, uses_anonymous_args = 0
 3875              	.LVL581:
 3876 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3877              	.LCFI42:
 3878              		.cfi_def_cfa_offset 24
 3879              		.cfi_offset 3, -24
 3880              		.cfi_offset 4, -20
 3881              		.cfi_offset 5, -16
 3882              		.cfi_offset 6, -12
 3883              		.cfi_offset 7, -8
 3884              		.cfi_offset 14, -4
 3885 0002 0446     		mov	r4, r0
 3886 0004 0E46     		mov	r6, r1
 3887              	.LVL582:
2137:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE a, c;
 3888              		.loc 1 2137 0
 3889 0006 0568     		ldr	r5, [r0]
 3890              	.LVL583:
2136:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3891              		.loc 1 2136 0
ARM GAS  /tmp/ccBYTIZg.s 			page 182


 3892 0008 0427     		movs	r7, #4
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3893              		.loc 1 2143 0
 3894 000a 05E0     		b	.L398
 3895              	.LVL584:
 3896              	.L400:
2193:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3897              		.loc 1 2193 0
 3898 000c 0021     		movs	r1, #0
 3899 000e 2046     		mov	r0, r4
 3900              	.LVL585:
 3901 0010 FFF7FEFF 		bl	dir_next
 3902              	.LVL586:
2194:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3903              		.loc 1 2194 0
 3904 0014 0746     		mov	r7, r0
 3905 0016 E8B9     		cbnz	r0, .L399
 3906              	.LVL587:
 3907              	.L398:
2143:Middlewares/Third_Party/FatFs/src/ff.c **** 		res = move_window(fs, dp->sect);
 3908              		.loc 1 2143 0
 3909 0018 E169     		ldr	r1, [r4, #28]
 3910 001a D9B1     		cbz	r1, .L399
2144:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res != FR_OK) break;
 3911              		.loc 1 2144 0
 3912 001c 2846     		mov	r0, r5
 3913 001e FFF7FEFF 		bl	move_window
 3914              	.LVL588:
2145:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = dp->dir[DIR_Name];	/* Test for the entry type */
 3915              		.loc 1 2145 0
 3916 0022 0746     		mov	r7, r0
 3917 0024 B0B9     		cbnz	r0, .L399
2146:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) {
 3918              		.loc 1 2146 0
 3919 0026 236A     		ldr	r3, [r4, #32]
 3920 0028 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3921              	.LVL589:
2147:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3922              		.loc 1 2147 0
 3923 002a 92B1     		cbz	r2, .L403
2167:Middlewares/Third_Party/FatFs/src/ff.c **** #if _USE_LFN != 0	/* LFN configuration */
 3924              		.loc 1 2167 0
 3925 002c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 3926 002e 03F03F03 		and	r3, r3, #63
 3927              	.LVL590:
 3928 0032 A371     		strb	r3, [r4, #6]
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
 3929              		.loc 1 2188 0
 3930 0034 E52A     		cmp	r2, #229
 3931 0036 18BF     		it	ne
 3932 0038 2E2A     		cmpne	r2, #46
 3933 003a E7D0     		beq	.L400
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
 3934              		.loc 1 2188 0 is_stmt 0 discriminator 1
 3935 003c 0F2B     		cmp	r3, #15
 3936 003e E5D0     		beq	.L400
2188:Middlewares/Third_Party/FatFs/src/ff.c **** 				break;
ARM GAS  /tmp/ccBYTIZg.s 			page 183


 3937              		.loc 1 2188 0 discriminator 2
 3938 0040 23F02003 		bic	r3, r3, #32
 3939              	.LVL591:
 3940 0044 082B     		cmp	r3, #8
 3941 0046 14BF     		ite	ne
 3942 0048 0023     		movne	r3, #0
 3943 004a 0123     		moveq	r3, #1
 3944 004c B342     		cmp	r3, r6
 3945 004e DDD1     		bne	.L400
 3946 0050 00E0     		b	.L399
 3947              	.LVL592:
 3948              	.L403:
2148:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 3949              		.loc 1 2148 0 is_stmt 1
 3950 0052 0427     		movs	r7, #4
 3951              	.LVL593:
 3952              	.L399:
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3953              		.loc 1 2197 0
 3954 0054 0FB1     		cbz	r7, .L402
2197:Middlewares/Third_Party/FatFs/src/ff.c **** 	return res;
 3955              		.loc 1 2197 0 is_stmt 0 discriminator 1
 3956 0056 0023     		movs	r3, #0
 3957 0058 E361     		str	r3, [r4, #28]
 3958              	.L402:
2199:Middlewares/Third_Party/FatFs/src/ff.c **** 
 3959              		.loc 1 2199 0 is_stmt 1
 3960 005a 3846     		mov	r0, r7
 3961 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3962              		.cfi_endproc
 3963              	.LFE168:
 3965              		.section	.text.sync_fs,"ax",%progbits
 3966              		.align	1
 3967              		.syntax unified
 3968              		.thumb
 3969              		.thumb_func
 3970              		.fpu fpv5-d16
 3972              	sync_fs:
 3973              	.LFB156:
 947:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 3974              		.loc 1 947 0
 3975              		.cfi_startproc
 3976              		@ args = 0, pretend = 0, frame = 0
 3977              		@ frame_needed = 0, uses_anonymous_args = 0
 3978              	.LVL594:
 3979 0000 70B5     		push	{r4, r5, r6, lr}
 3980              	.LCFI43:
 3981              		.cfi_def_cfa_offset 16
 3982              		.cfi_offset 4, -16
 3983              		.cfi_offset 5, -12
 3984              		.cfi_offset 6, -8
 3985              		.cfi_offset 14, -4
 3986 0002 0446     		mov	r4, r0
 951:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 3987              		.loc 1 951 0
 3988 0004 FFF7FEFF 		bl	sync_window
 3989              	.LVL595:
ARM GAS  /tmp/ccBYTIZg.s 			page 184


 952:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Update FSInfo sector if needed */
 3990              		.loc 1 952 0
 3991 0008 0546     		mov	r5, r0
 3992 000a 48B9     		cbnz	r0, .L406
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
 3993              		.loc 1 954 0
 3994 000c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 3995 000e 032B     		cmp	r3, #3
 3996 0010 08D0     		beq	.L410
 3997              	.LVL596:
 3998              	.L407:
 968:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 3999              		.loc 1 968 0
 4000 0012 0022     		movs	r2, #0
 4001 0014 1146     		mov	r1, r2
 4002 0016 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 4003 0018 FFF7FEFF 		bl	disk_ioctl
 4004              	.LVL597:
 4005 001c 00B1     		cbz	r0, .L406
 4006 001e 0125     		movs	r5, #1
 4007              	.L406:
 4008              	.LVL598:
 972:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4009              		.loc 1 972 0
 4010 0020 2846     		mov	r0, r5
 4011 0022 70BD     		pop	{r4, r5, r6, pc}
 4012              	.LVL599:
 4013              	.L410:
 954:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Create FSInfo structure */
 4014              		.loc 1 954 0 discriminator 1
 4015 0024 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 4016 0026 012B     		cmp	r3, #1
 4017 0028 F3D1     		bne	.L407
 956:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);
 4018              		.loc 1 956 0
 4019 002a 04F13006 		add	r6, r4, #48
 4020 002e 4FF40072 		mov	r2, #512
 4021 0032 0021     		movs	r1, #0
 4022 0034 3046     		mov	r0, r6
 4023              	.LVL600:
 4024 0036 FFF7FEFF 		bl	mem_set
 4025              	.LVL601:
 957:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 4026              		.loc 1 957 0
 4027 003a 4AF65521 		movw	r1, #43605
 4028 003e 04F22E20 		addw	r0, r4, #558
 4029 0042 FFF7FEFF 		bl	st_word
 4030              	.LVL602:
 958:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 4031              		.loc 1 958 0
 4032 0046 0F49     		ldr	r1, .L411
 4033 0048 3046     		mov	r0, r6
 4034 004a FFF7FEFF 		bl	st_dword
 4035              	.LVL603:
 959:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 4036              		.loc 1 959 0
 4037 004e 0E49     		ldr	r1, .L411+4
ARM GAS  /tmp/ccBYTIZg.s 			page 185


 4038 0050 04F50570 		add	r0, r4, #532
 4039 0054 FFF7FEFF 		bl	st_dword
 4040              	.LVL604:
 960:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 4041              		.loc 1 960 0
 4042 0058 2169     		ldr	r1, [r4, #16]
 4043 005a 04F50670 		add	r0, r4, #536
 4044 005e FFF7FEFF 		bl	st_dword
 4045              	.LVL605:
 961:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Write it into the FSInfo sector */
 4046              		.loc 1 961 0
 4047 0062 E168     		ldr	r1, [r4, #12]
 4048 0064 04F50770 		add	r0, r4, #540
 4049 0068 FFF7FEFF 		bl	st_dword
 4050              	.LVL606:
 963:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->winsect, 1);
 4051              		.loc 1 963 0
 4052 006c E269     		ldr	r2, [r4, #28]
 4053 006e 0132     		adds	r2, r2, #1
 4054 0070 E262     		str	r2, [r4, #44]
 964:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag = 0;
 4055              		.loc 1 964 0
 4056 0072 0123     		movs	r3, #1
 4057 0074 3146     		mov	r1, r6
 4058 0076 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 4059 0078 FFF7FEFF 		bl	disk_write
 4060              	.LVL607:
 965:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4061              		.loc 1 965 0
 4062 007c 0023     		movs	r3, #0
 4063 007e 2371     		strb	r3, [r4, #4]
 4064 0080 C7E7     		b	.L407
 4065              	.L412:
 4066 0082 00BF     		.align	2
 4067              	.L411:
 4068 0084 52526141 		.word	1096897106
 4069 0088 72724161 		.word	1631679090
 4070              		.cfi_endproc
 4071              	.LFE156:
 4073              		.section	.text.f_mount,"ax",%progbits
 4074              		.align	1
 4075              		.global	f_mount
 4076              		.syntax unified
 4077              		.thumb
 4078              		.thumb_func
 4079              		.fpu fpv5-d16
 4081              	f_mount:
 4082              	.LFB179:
3265:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *cfs;
 4083              		.loc 1 3265 0
 4084              		.cfi_startproc
 4085              		@ args = 0, pretend = 0, frame = 16
 4086              		@ frame_needed = 0, uses_anonymous_args = 0
 4087              	.LVL608:
 4088 0000 70B5     		push	{r4, r5, r6, lr}
 4089              	.LCFI44:
 4090              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccBYTIZg.s 			page 186


 4091              		.cfi_offset 4, -16
 4092              		.cfi_offset 5, -12
 4093              		.cfi_offset 6, -8
 4094              		.cfi_offset 14, -4
 4095 0002 84B0     		sub	sp, sp, #16
 4096              	.LCFI45:
 4097              		.cfi_def_cfa_offset 32
 4098 0004 0190     		str	r0, [sp, #4]
 4099 0006 0091     		str	r1, [sp]
 4100 0008 1446     		mov	r4, r2
3269:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4101              		.loc 1 3269 0
 4102 000a 04A8     		add	r0, sp, #16
 4103              	.LVL609:
 4104 000c 40F8041D 		str	r1, [r0, #-4]!
3273:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 4105              		.loc 1 3273 0
 4106 0010 FFF7FEFF 		bl	get_ldnumber
 4107              	.LVL610:
3274:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 4108              		.loc 1 3274 0
 4109 0014 051E     		subs	r5, r0, #0
 4110 0016 21DB     		blt	.L417
3275:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4111              		.loc 1 3275 0
 4112 0018 124B     		ldr	r3, .L421
 4113 001a 53F82560 		ldr	r6, [r3, r5, lsl #2]
 4114              	.LVL611:
3277:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 4115              		.loc 1 3277 0
 4116 001e 26B1     		cbz	r6, .L415
3279:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4117              		.loc 1 3279 0
 4118 0020 3046     		mov	r0, r6
 4119              	.LVL612:
 4120 0022 FFF7FEFF 		bl	clear_lock
 4121              	.LVL613:
3284:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4122              		.loc 1 3284 0
 4123 0026 0023     		movs	r3, #0
 4124 0028 3370     		strb	r3, [r6]
 4125              	.L415:
3287:Middlewares/Third_Party/FatFs/src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 4126              		.loc 1 3287 0
 4127 002a 019B     		ldr	r3, [sp, #4]
 4128 002c 0BB1     		cbz	r3, .L416
3288:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_REENTRANT						/* Create sync object for the new volume */
 4129              		.loc 1 3288 0
 4130 002e 0022     		movs	r2, #0
 4131 0030 1A70     		strb	r2, [r3]
 4132              	.L416:
3293:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4133              		.loc 1 3293 0
 4134 0032 019B     		ldr	r3, [sp, #4]
 4135 0034 0B4A     		ldr	r2, .L421
 4136 0036 42F82530 		str	r3, [r2, r5, lsl #2]
3295:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 187


 4137              		.loc 1 3295 0
 4138 003a 14F1FF34 		adds	r4, r4, #-1
 4139 003e 18BF     		it	ne
 4140 0040 0124     		movne	r4, #1
 4141 0042 002B     		cmp	r3, #0
 4142 0044 08BF     		it	eq
 4143 0046 44F00104 		orreq	r4, r4, #1
 4144 004a 0CB1     		cbz	r4, .L420
 4145 004c 0020     		movs	r0, #0
 4146 004e 06E0     		b	.L414
 4147              	.L420:
3297:Middlewares/Third_Party/FatFs/src/ff.c **** 	LEAVE_FF(fs, res);
 4148              		.loc 1 3297 0
 4149 0050 0022     		movs	r2, #0
 4150 0052 01A9     		add	r1, sp, #4
 4151 0054 6846     		mov	r0, sp
 4152 0056 FFF7FEFF 		bl	find_volume
 4153              	.LVL614:
3298:Middlewares/Third_Party/FatFs/src/ff.c **** }
 4154              		.loc 1 3298 0
 4155 005a 00E0     		b	.L414
 4156              	.LVL615:
 4157              	.L417:
3274:Middlewares/Third_Party/FatFs/src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 4158              		.loc 1 3274 0
 4159 005c 0B20     		movs	r0, #11
 4160              	.LVL616:
 4161              	.L414:
3299:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4162              		.loc 1 3299 0
 4163 005e 04B0     		add	sp, sp, #16
 4164              	.LCFI46:
 4165              		.cfi_def_cfa_offset 16
 4166              		@ sp needed
 4167 0060 70BD     		pop	{r4, r5, r6, pc}
 4168              	.LVL617:
 4169              	.L422:
 4170 0062 00BF     		.align	2
 4171              	.L421:
 4172 0064 00000000 		.word	.LANCHOR2
 4173              		.cfi_endproc
 4174              	.LFE179:
 4176              		.section	.text.f_open,"ax",%progbits
 4177              		.align	1
 4178              		.global	f_open
 4179              		.syntax unified
 4180              		.thumb
 4181              		.thumb_func
 4182              		.fpu fpv5-d16
 4184              	f_open:
 4185              	.LFB180:
3313:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 4186              		.loc 1 3313 0
 4187              		.cfi_startproc
 4188              		@ args = 0, pretend = 0, frame = 64
 4189              		@ frame_needed = 0, uses_anonymous_args = 0
 4190              	.LVL618:
ARM GAS  /tmp/ccBYTIZg.s 			page 188


 4191 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4192              	.LCFI47:
 4193              		.cfi_def_cfa_offset 28
 4194              		.cfi_offset 4, -28
 4195              		.cfi_offset 5, -24
 4196              		.cfi_offset 6, -20
 4197              		.cfi_offset 7, -16
 4198              		.cfi_offset 8, -12
 4199              		.cfi_offset 9, -8
 4200              		.cfi_offset 14, -4
 4201 0004 91B0     		sub	sp, sp, #68
 4202              	.LCFI48:
 4203              		.cfi_def_cfa_offset 96
 4204 0006 0191     		str	r1, [sp, #4]
3324:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4205              		.loc 1 3324 0
 4206 0008 0028     		cmp	r0, #0
 4207 000a 00F01181 		beq	.L438
 4208 000e 0546     		mov	r5, r0
 4209 0010 1646     		mov	r6, r2
3327:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path, &fs, mode);
 4210              		.loc 1 3327 0
 4211 0012 02F03F07 		and	r7, r2, #63
 4212              	.LVL619:
3328:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 4213              		.loc 1 3328 0
 4214 0016 3A46     		mov	r2, r7
 4215 0018 03A9     		add	r1, sp, #12
 4216              	.LVL620:
 4217 001a 01A8     		add	r0, sp, #4
 4218              	.LVL621:
 4219 001c FFF7FEFF 		bl	find_volume
 4220              	.LVL622:
3329:Middlewares/Third_Party/FatFs/src/ff.c **** 		dj.obj.fs = fs;
 4221              		.loc 1 3329 0
 4222 0020 0446     		mov	r4, r0
 4223 0022 28B1     		cbz	r0, .L451
 4224              	.LVL623:
 4225              	.L425:
3499:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4226              		.loc 1 3499 0
 4227 0024 002C     		cmp	r4, #0
 4228 0026 00F00481 		beq	.L424
3499:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4229              		.loc 1 3499 0 is_stmt 0 discriminator 1
 4230 002a 0023     		movs	r3, #0
 4231 002c 2B60     		str	r3, [r5]
 4232 002e 00E1     		b	.L424
 4233              	.LVL624:
 4234              	.L451:
3330:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 4235              		.loc 1 3330 0 is_stmt 1
 4236 0030 039B     		ldr	r3, [sp, #12]
 4237 0032 0493     		str	r3, [sp, #16]
3332:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
 4238              		.loc 1 3332 0
 4239 0034 0199     		ldr	r1, [sp, #4]
ARM GAS  /tmp/ccBYTIZg.s 			page 189


 4240 0036 04A8     		add	r0, sp, #16
 4241              	.LVL625:
 4242 0038 FFF7FEFF 		bl	follow_path
 4243              	.LVL626:
3334:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 4244              		.loc 1 3334 0
 4245 003c 0446     		mov	r4, r0
 4246 003e 60B9     		cbnz	r0, .L426
3335:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
 4247              		.loc 1 3335 0
 4248 0040 9DF93F30 		ldrsb	r3, [sp, #63]
 4249 0044 002B     		cmp	r3, #0
 4250 0046 57DB     		blt	.L439
3340:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4251              		.loc 1 3340 0
 4252 0048 37F00103 		bics	r3, r7, #1
 4253 004c 14BF     		ite	ne
 4254 004e 0121     		movne	r1, #1
 4255 0050 0021     		moveq	r1, #0
 4256 0052 04A8     		add	r0, sp, #16
 4257              	.LVL627:
 4258 0054 FFF7FEFF 		bl	chk_lock
 4259              	.LVL628:
 4260 0058 0446     		mov	r4, r0
 4261              	.LVL629:
 4262              	.L426:
3345:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 4263              		.loc 1 3345 0
 4264 005a 16F01C0F 		tst	r6, #28
 4265 005e 00F0A180 		beq	.L427
3346:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 4266              		.loc 1 3346 0
 4267 0062 002C     		cmp	r4, #0
 4268 0064 54D0     		beq	.L428
3347:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 4269              		.loc 1 3347 0
 4270 0066 042C     		cmp	r4, #4
 4271 0068 48D0     		beq	.L452
 4272              	.LVL630:
 4273              	.L429:
3354:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4274              		.loc 1 3354 0
 4275 006a 47F00807 		orr	r7, r7, #8
 4276              	.LVL631:
 4277              	.L430:
3363:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
 4278              		.loc 1 3363 0
 4279 006e 14B9     		cbnz	r4, .L431
3363:Middlewares/Third_Party/FatFs/src/ff.c **** 				dw = GET_FATTIME();
 4280              		.loc 1 3363 0 is_stmt 0 discriminator 1
 4281 0070 17F0080F 		tst	r7, #8
 4282 0074 58D1     		bne	.L453
 4283              	.LVL632:
 4284              	.L431:
3422:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 4285              		.loc 1 3422 0 is_stmt 1
 4286 0076 A4B9     		cbnz	r4, .L432
ARM GAS  /tmp/ccBYTIZg.s 			page 190


3423:Middlewares/Third_Party/FatFs/src/ff.c **** 				mode |= FA_MODIFIED;
 4287              		.loc 1 3423 0
 4288 0078 17F0080F 		tst	r7, #8
 4289 007c 01D0     		beq	.L433
3424:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 4290              		.loc 1 3424 0
 4291 007e 47F04007 		orr	r7, r7, #64
 4292              	.LVL633:
 4293              	.L433:
3425:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->dir_ptr = dj.dir;
 4294              		.loc 1 3425 0
 4295 0082 039B     		ldr	r3, [sp, #12]
 4296 0084 DB6A     		ldr	r3, [r3, #44]
 4297 0086 6B62     		str	r3, [r5, #36]
3426:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 4298              		.loc 1 3426 0
 4299 0088 0C9B     		ldr	r3, [sp, #48]
 4300 008a AB62     		str	r3, [r5, #40]
3428:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!fp->obj.lockid) res = FR_INT_ERR;
 4301              		.loc 1 3428 0
 4302 008c 37F00103 		bics	r3, r7, #1
 4303 0090 14BF     		ite	ne
 4304 0092 0121     		movne	r1, #1
 4305 0094 0021     		moveq	r1, #0
 4306 0096 04A8     		add	r0, sp, #16
 4307 0098 FFF7FEFF 		bl	inc_lock
 4308              	.LVL634:
 4309 009c 2861     		str	r0, [r5, #16]
3429:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4310              		.loc 1 3429 0
 4311 009e 00B9     		cbnz	r0, .L432
 4312 00a0 0224     		movs	r4, #2
 4313              	.LVL635:
 4314              	.L432:
3444:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 4315              		.loc 1 3444 0
 4316 00a2 002C     		cmp	r4, #0
 4317 00a4 BED1     		bne	.L425
3456:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 4318              		.loc 1 3456 0
 4319 00a6 039E     		ldr	r6, [sp, #12]
 4320 00a8 DDF83080 		ldr	r8, [sp, #48]
 4321 00ac 4146     		mov	r1, r8
 4322 00ae 3046     		mov	r0, r6
 4323 00b0 FFF7FEFF 		bl	ld_clust
 4324              	.LVL636:
 4325 00b4 A860     		str	r0, [r5, #8]
3457:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4326              		.loc 1 3457 0
 4327 00b6 08F11C00 		add	r0, r8, #28
 4328 00ba FFF7FEFF 		bl	ld_dword
 4329              	.LVL637:
 4330 00be E860     		str	r0, [r5, #12]
3460:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4331              		.loc 1 3460 0
 4332 00c0 0021     		movs	r1, #0
 4333 00c2 E962     		str	r1, [r5, #44]
ARM GAS  /tmp/ccBYTIZg.s 			page 191


3462:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.id = fs->id;
 4334              		.loc 1 3462 0
 4335 00c4 2E60     		str	r6, [r5]
3463:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 4336              		.loc 1 3463 0
 4337 00c6 F388     		ldrh	r3, [r6, #6]
 4338 00c8 AB80     		strh	r3, [r5, #4]	@ movhi
3464:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->err = 0;			/* Clear error flag */
 4339              		.loc 1 3464 0
 4340 00ca 2F75     		strb	r7, [r5, #20]
3465:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 4341              		.loc 1 3465 0
 4342 00cc 6975     		strb	r1, [r5, #21]
3466:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 4343              		.loc 1 3466 0
 4344 00ce 2962     		str	r1, [r5, #32]
3467:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 4345              		.loc 1 3467 0
 4346 00d0 A961     		str	r1, [r5, #24]
3470:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4347              		.loc 1 3470 0
 4348 00d2 05F13008 		add	r8, r5, #48
 4349 00d6 4FF40072 		mov	r2, #512
 4350 00da 4046     		mov	r0, r8
 4351 00dc FFF7FEFF 		bl	mem_set
 4352              	.LVL638:
3472:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 4353              		.loc 1 3472 0
 4354 00e0 17F0200F 		tst	r7, #32
 4355 00e4 9ED0     		beq	.L425
3472:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 4356              		.loc 1 3472 0 is_stmt 0 discriminator 1
 4357 00e6 EE68     		ldr	r6, [r5, #12]
 4358 00e8 002E     		cmp	r6, #0
 4359 00ea 9BD0     		beq	.L425
3473:Middlewares/Third_Party/FatFs/src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 4360              		.loc 1 3473 0 is_stmt 1
 4361 00ec AE61     		str	r6, [r5, #24]
3474:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 4362              		.loc 1 3474 0
 4363 00ee 039B     		ldr	r3, [sp, #12]
 4364 00f0 5F89     		ldrh	r7, [r3, #10]
 4365              	.LVL639:
 4366 00f2 7F02     		lsls	r7, r7, #9
 4367              	.LVL640:
3475:Middlewares/Third_Party/FatFs/src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 4368              		.loc 1 3475 0
 4369 00f4 A968     		ldr	r1, [r5, #8]
 4370              	.LVL641:
3476:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4371              		.loc 1 3476 0
 4372 00f6 6CE0     		b	.L434
 4373              	.LVL642:
 4374              	.L439:
3336:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4375              		.loc 1 3336 0
 4376 00f8 0624     		movs	r4, #6
ARM GAS  /tmp/ccBYTIZg.s 			page 192


 4377 00fa AEE7     		b	.L426
 4378              	.LVL643:
 4379              	.L452:
3349:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 4380              		.loc 1 3349 0
 4381 00fc FFF7FEFF 		bl	enq_lock
 4382              	.LVL644:
 4383 0100 08B9     		cbnz	r0, .L454
 4384 0102 1224     		movs	r4, #18
 4385              	.LVL645:
 4386 0104 B1E7     		b	.L429
 4387              	.LVL646:
 4388              	.L454:
3349:Middlewares/Third_Party/FatFs/src/ff.c **** #else
 4389              		.loc 1 3349 0 is_stmt 0 discriminator 1
 4390 0106 04A8     		add	r0, sp, #16
 4391 0108 FFF7FEFF 		bl	dir_register
 4392              	.LVL647:
 4393 010c 0446     		mov	r4, r0
 4394              	.LVL648:
 4395 010e ACE7     		b	.L429
 4396              	.LVL649:
 4397              	.L428:
3357:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;
 4398              		.loc 1 3357 0 is_stmt 1
 4399 0110 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 4400 0114 13F0110F 		tst	r3, #17
 4401 0118 04D1     		bne	.L441
3360:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4402              		.loc 1 3360 0
 4403 011a 16F0040F 		tst	r6, #4
 4404 011e A6D0     		beq	.L430
 4405 0120 0824     		movs	r4, #8
 4406              	.LVL650:
 4407 0122 A4E7     		b	.L430
 4408              	.LVL651:
 4409              	.L441:
3358:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 4410              		.loc 1 3358 0
 4411 0124 0724     		movs	r4, #7
 4412              	.LVL652:
 4413 0126 A2E7     		b	.L430
 4414              	.LVL653:
 4415              	.L453:
3364:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 4416              		.loc 1 3364 0
 4417 0128 FFF7FEFF 		bl	get_fattime
 4418              	.LVL654:
 4419 012c 0646     		mov	r6, r0
 4420              	.LVL655:
3392:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 4421              		.loc 1 3392 0
 4422 012e 0146     		mov	r1, r0
 4423 0130 0C98     		ldr	r0, [sp, #48]
 4424              	.LVL656:
 4425 0132 0E30     		adds	r0, r0, #14
 4426 0134 FFF7FEFF 		bl	st_dword
ARM GAS  /tmp/ccBYTIZg.s 			page 193


 4427              	.LVL657:
3393:Middlewares/Third_Party/FatFs/src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 4428              		.loc 1 3393 0
 4429 0138 3146     		mov	r1, r6
 4430 013a 0C98     		ldr	r0, [sp, #48]
 4431 013c 1630     		adds	r0, r0, #22
 4432 013e FFF7FEFF 		bl	st_dword
 4433              	.LVL658:
3394:Middlewares/Third_Party/FatFs/src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 4434              		.loc 1 3394 0
 4435 0142 2022     		movs	r2, #32
 4436 0144 0C9B     		ldr	r3, [sp, #48]
 4437 0146 DA72     		strb	r2, [r3, #11]
3395:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 4438              		.loc 1 3395 0
 4439 0148 039E     		ldr	r6, [sp, #12]
 4440              	.LVL659:
 4441 014a DDF83080 		ldr	r8, [sp, #48]
 4442 014e 4146     		mov	r1, r8
 4443 0150 3046     		mov	r0, r6
 4444 0152 FFF7FEFF 		bl	ld_clust
 4445              	.LVL660:
 4446 0156 8146     		mov	r9, r0
 4447              	.LVL661:
3396:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 4448              		.loc 1 3396 0
 4449 0158 0022     		movs	r2, #0
 4450 015a 4146     		mov	r1, r8
 4451 015c 3046     		mov	r0, r6
 4452              	.LVL662:
 4453 015e FFF7FEFF 		bl	st_clust
 4454              	.LVL663:
3397:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 4455              		.loc 1 3397 0
 4456 0162 0021     		movs	r1, #0
 4457 0164 0C98     		ldr	r0, [sp, #48]
 4458 0166 1C30     		adds	r0, r0, #28
 4459 0168 FFF7FEFF 		bl	st_dword
 4460              	.LVL664:
3398:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4461              		.loc 1 3398 0
 4462 016c 0122     		movs	r2, #1
 4463 016e 039B     		ldr	r3, [sp, #12]
 4464 0170 DA70     		strb	r2, [r3, #3]
3400:Middlewares/Third_Party/FatFs/src/ff.c **** 						dw = fs->winsect;
 4465              		.loc 1 3400 0
 4466 0172 B9F1000F 		cmp	r9, #0
 4467 0176 3FF47EAF 		beq	.L431
3401:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 4468              		.loc 1 3401 0
 4469 017a 039B     		ldr	r3, [sp, #12]
 4470 017c DE6A     		ldr	r6, [r3, #44]
 4471              	.LVL665:
3402:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
 4472              		.loc 1 3402 0
 4473 017e 0022     		movs	r2, #0
 4474 0180 4946     		mov	r1, r9
ARM GAS  /tmp/ccBYTIZg.s 			page 194


 4475 0182 04A8     		add	r0, sp, #16
 4476 0184 FFF7FEFF 		bl	remove_chain
 4477              	.LVL666:
3403:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, dw);
 4478              		.loc 1 3403 0
 4479 0188 0446     		mov	r4, r0
 4480 018a 0028     		cmp	r0, #0
 4481 018c 7FF473AF 		bne	.L431
3404:Middlewares/Third_Party/FatFs/src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 4482              		.loc 1 3404 0
 4483 0190 3146     		mov	r1, r6
 4484 0192 0398     		ldr	r0, [sp, #12]
 4485              	.LVL667:
 4486 0194 FFF7FEFF 		bl	move_window
 4487              	.LVL668:
 4488 0198 0446     		mov	r4, r0
 4489              	.LVL669:
3405:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 4490              		.loc 1 3405 0
 4491 019a 09F1FF33 		add	r3, r9, #-1
 4492 019e 039A     		ldr	r2, [sp, #12]
 4493 01a0 D360     		str	r3, [r2, #12]
 4494 01a2 68E7     		b	.L431
 4495              	.LVL670:
 4496              	.L427:
3412:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 4497              		.loc 1 3412 0
 4498 01a4 002C     		cmp	r4, #0
 4499 01a6 7FF466AF 		bne	.L431
3413:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_NO_FILE;
 4500              		.loc 1 3413 0
 4501 01aa 9DF81630 		ldrb	r3, [sp, #22]	@ zero_extendqisi2
 4502 01ae 13F0100F 		tst	r3, #16
 4503 01b2 09D1     		bne	.L443
3416:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
 4504              		.loc 1 3416 0
 4505 01b4 16F0020F 		tst	r6, #2
 4506 01b8 3FF45DAF 		beq	.L431
3416:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_DENIED;
 4507              		.loc 1 3416 0 is_stmt 0 discriminator 1
 4508 01bc 13F0010F 		tst	r3, #1
 4509 01c0 3FF459AF 		beq	.L431
3417:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 4510              		.loc 1 3417 0 is_stmt 1
 4511 01c4 0724     		movs	r4, #7
 4512              	.LVL671:
 4513 01c6 56E7     		b	.L431
 4514              	.LVL672:
 4515              	.L443:
3414:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 4516              		.loc 1 3414 0
 4517 01c8 0424     		movs	r4, #4
 4518              	.LVL673:
 4519 01ca 54E7     		b	.L431
 4520              	.LVL674:
 4521              	.L456:
3478:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
ARM GAS  /tmp/ccBYTIZg.s 			page 195


 4522              		.loc 1 3478 0
 4523 01cc 0224     		movs	r4, #2
 4524              	.LVL675:
 4525 01ce 0DE0     		b	.L435
 4526              	.L436:
 4527              	.LVL676:
3476:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4528              		.loc 1 3476 0 discriminator 2
 4529 01d0 F61B     		subs	r6, r6, r7
 4530              	.LVL677:
 4531              	.L434:
3476:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 4532              		.loc 1 3476 0 is_stmt 0 discriminator 1
 4533 01d2 B4FA84F3 		clz	r3, r4
 4534 01d6 5B09     		lsrs	r3, r3, #5
 4535 01d8 BE42     		cmp	r6, r7
 4536 01da 98BF     		it	ls
 4537 01dc 0023     		movls	r3, #0
 4538 01de 53B1     		cbz	r3, .L455
3477:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 4539              		.loc 1 3477 0 is_stmt 1
 4540 01e0 2846     		mov	r0, r5
 4541 01e2 FFF7FEFF 		bl	get_fat
 4542              	.LVL678:
 4543 01e6 0146     		mov	r1, r0
 4544              	.LVL679:
3478:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 4545              		.loc 1 3478 0
 4546 01e8 0128     		cmp	r0, #1
 4547 01ea EFD9     		bls	.L456
 4548              	.LVL680:
 4549              	.L435:
3479:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4550              		.loc 1 3479 0
 4551 01ec B1F1FF3F 		cmp	r1, #-1
 4552 01f0 EED1     		bne	.L436
 4553 01f2 0124     		movs	r4, #1
 4554              	.LVL681:
 4555 01f4 ECE7     		b	.L436
 4556              	.LVL682:
 4557              	.L455:
3481:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 4558              		.loc 1 3481 0
 4559 01f6 E961     		str	r1, [r5, #28]
3482:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 4560              		.loc 1 3482 0
 4561 01f8 002C     		cmp	r4, #0
 4562 01fa 7FF413AF 		bne	.L425
3482:Middlewares/Third_Party/FatFs/src/ff.c **** 					if ((sc = clust2sect(fs, clst)) == 0) {
 4563              		.loc 1 3482 0 is_stmt 0 discriminator 1
 4564 01fe C6F30803 		ubfx	r3, r6, #0, #9
 4565 0202 002B     		cmp	r3, #0
 4566 0204 3FF40EAF 		beq	.L425
3483:Middlewares/Third_Party/FatFs/src/ff.c **** 						res = FR_INT_ERR;
 4567              		.loc 1 3483 0 is_stmt 1
 4568 0208 039F     		ldr	r7, [sp, #12]
 4569              	.LVL683:
ARM GAS  /tmp/ccBYTIZg.s 			page 196


 4570 020a 3846     		mov	r0, r7
 4571 020c FFF7FEFF 		bl	clust2sect
 4572              	.LVL684:
 4573 0210 08B9     		cbnz	r0, .L457
3484:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
 4574              		.loc 1 3484 0
 4575 0212 0224     		movs	r4, #2
 4576              	.LVL685:
 4577 0214 06E7     		b	.L425
 4578              	.LVL686:
 4579              	.L457:
3486:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 4580              		.loc 1 3486 0
 4581 0216 00EB5622 		add	r2, r0, r6, lsr #9
 4582 021a 2A62     		str	r2, [r5, #32]
3488:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4583              		.loc 1 3488 0
 4584 021c 0123     		movs	r3, #1
 4585 021e 4146     		mov	r1, r8
 4586 0220 7878     		ldrb	r0, [r7, #1]	@ zero_extendqisi2
 4587              	.LVL687:
 4588 0222 FFF7FEFF 		bl	disk_read
 4589              	.LVL688:
 4590 0226 0028     		cmp	r0, #0
 4591 0228 3FF4FCAE 		beq	.L425
 4592 022c 0124     		movs	r4, #1
 4593              	.LVL689:
 4594 022e F9E6     		b	.L425
 4595              	.LVL690:
 4596              	.L438:
3324:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4597              		.loc 1 3324 0
 4598 0230 0924     		movs	r4, #9
 4599              	.LVL691:
 4600              	.L424:
3502:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4601              		.loc 1 3502 0
 4602 0232 2046     		mov	r0, r4
 4603 0234 11B0     		add	sp, sp, #68
 4604              	.LCFI49:
 4605              		.cfi_def_cfa_offset 28
 4606              		@ sp needed
 4607 0236 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 4608              		.cfi_endproc
 4609              	.LFE180:
 4611              		.section	.text.f_read,"ax",%progbits
 4612              		.align	1
 4613              		.global	f_read
 4614              		.syntax unified
 4615              		.thumb
 4616              		.thumb_func
 4617              		.fpu fpv5-d16
 4619              	f_read:
 4620              	.LFB181:
3517:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 4621              		.loc 1 3517 0
 4622              		.cfi_startproc
ARM GAS  /tmp/ccBYTIZg.s 			page 197


 4623              		@ args = 0, pretend = 0, frame = 16
 4624              		@ frame_needed = 0, uses_anonymous_args = 0
 4625              	.LVL692:
 4626 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4627              	.LCFI50:
 4628              		.cfi_def_cfa_offset 36
 4629              		.cfi_offset 4, -36
 4630              		.cfi_offset 5, -32
 4631              		.cfi_offset 6, -28
 4632              		.cfi_offset 7, -24
 4633              		.cfi_offset 8, -20
 4634              		.cfi_offset 9, -16
 4635              		.cfi_offset 10, -12
 4636              		.cfi_offset 11, -8
 4637              		.cfi_offset 14, -4
 4638 0004 85B0     		sub	sp, sp, #20
 4639              	.LCFI51:
 4640              		.cfi_def_cfa_offset 56
 4641 0006 0446     		mov	r4, r0
 4642 0008 8846     		mov	r8, r1
 4643 000a 1646     		mov	r6, r2
 4644 000c 9946     		mov	r9, r3
 4645              	.LVL693:
3526:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 4646              		.loc 1 3526 0
 4647 000e 0023     		movs	r3, #0
 4648              	.LVL694:
 4649 0010 C9F80030 		str	r3, [r9]
3527:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4650              		.loc 1 3527 0
 4651 0014 0190     		str	r0, [sp, #4]
 4652 0016 03A9     		add	r1, sp, #12
 4653              	.LVL695:
 4654 0018 FFF7FEFF 		bl	validate
 4655              	.LVL696:
3528:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4656              		.loc 1 3528 0
 4657 001c 0746     		mov	r7, r0
 4658 001e 30B9     		cbnz	r0, .L459
3528:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 4659              		.loc 1 3528 0 is_stmt 0 discriminator 2
 4660 0020 677D     		ldrb	r7, [r4, #21]	@ zero_extendqisi2
 4661              	.LVL697:
 4662 0022 27B9     		cbnz	r7, .L459
3529:Middlewares/Third_Party/FatFs/src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 4663              		.loc 1 3529 0 is_stmt 1
 4664 0024 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 4665 0026 13F0010F 		tst	r3, #1
 4666 002a 04D1     		bne	.L484
 4667 002c 0727     		movs	r7, #7
 4668              	.LVL698:
 4669              	.L459:
3601:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4670              		.loc 1 3601 0
 4671 002e 3846     		mov	r0, r7
 4672 0030 05B0     		add	sp, sp, #20
 4673              	.LCFI52:
ARM GAS  /tmp/ccBYTIZg.s 			page 198


 4674              		.cfi_remember_state
 4675              		.cfi_def_cfa_offset 36
 4676              		@ sp needed
 4677 0032 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4678              	.LVL699:
 4679              	.L484:
 4680              	.LCFI53:
 4681              		.cfi_restore_state
3530:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 4682              		.loc 1 3530 0
 4683 0036 E368     		ldr	r3, [r4, #12]
 4684 0038 A269     		ldr	r2, [r4, #24]
 4685 003a 9B1A     		subs	r3, r3, r2
 4686              	.LVL700:
3531:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4687              		.loc 1 3531 0
 4688 003c B342     		cmp	r3, r6
 4689 003e 53D2     		bcs	.L461
 4690 0040 1E46     		mov	r6, r3
 4691              	.LVL701:
 4692 0042 51E0     		b	.L461
 4693              	.LVL702:
 4694              	.L464:
3542:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 4695              		.loc 1 3542 0
 4696 0044 E36A     		ldr	r3, [r4, #44]
 4697 0046 1BB1     		cbz	r3, .L466
3543:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
 4698              		.loc 1 3543 0
 4699 0048 2046     		mov	r0, r4
 4700 004a FFF7FEFF 		bl	clmt_clust
 4701              	.LVL703:
 4702 004e 5DE0     		b	.L465
 4703              	.LVL704:
 4704              	.L466:
3547:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 4705              		.loc 1 3547 0
 4706 0050 E169     		ldr	r1, [r4, #28]
 4707 0052 0198     		ldr	r0, [sp, #4]
 4708 0054 FFF7FEFF 		bl	get_fat
 4709              	.LVL705:
 4710 0058 58E0     		b	.L465
 4711              	.L487:
3550:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4712              		.loc 1 3550 0 discriminator 1
 4713 005a 0227     		movs	r7, #2
 4714              	.LVL706:
 4715 005c 6775     		strb	r7, [r4, #21]
 4716 005e E6E7     		b	.L459
 4717              	.LVL707:
 4718              	.L488:
3551:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 4719              		.loc 1 3551 0 discriminator 1
 4720 0060 0127     		movs	r7, #1
 4721              	.LVL708:
 4722 0062 6775     		strb	r7, [r4, #21]
 4723 0064 E3E7     		b	.L459
ARM GAS  /tmp/ccBYTIZg.s 			page 199


 4724              	.LVL709:
 4725              	.L489:
3555:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 4726              		.loc 1 3555 0 discriminator 1
 4727 0066 0227     		movs	r7, #2
 4728              	.LVL710:
 4729 0068 6775     		strb	r7, [r4, #21]
 4730 006a E0E7     		b	.L459
 4731              	.LVL711:
 4732              	.L490:
3562:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 4733              		.loc 1 3562 0 discriminator 1
 4734 006c 0127     		movs	r7, #1
 4735              	.LVL712:
 4736 006e 6775     		strb	r7, [r4, #21]
 4737 0070 DDE7     		b	.L459
 4738              	.LVL713:
 4739              	.L491:
3569:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4740              		.loc 1 3569 0 discriminator 1
 4741 0072 206A     		ldr	r0, [r4, #32]
 4742 0074 009B     		ldr	r3, [sp]
 4743 0076 C01A     		subs	r0, r0, r3
 4744 0078 8345     		cmp	fp, r0
 4745 007a 6DD9     		bls	.L473
3570:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4746              		.loc 1 3570 0
 4747 007c 4FF40072 		mov	r2, #512
 4748 0080 04F13001 		add	r1, r4, #48
 4749 0084 08EB4020 		add	r0, r8, r0, lsl #9
 4750 0088 FFF7FEFF 		bl	mem_cpy
 4751              	.LVL714:
 4752 008c 64E0     		b	.L473
 4753              	.LVL715:
 4754              	.L470:
3578:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 4755              		.loc 1 3578 0
 4756 008e 226A     		ldr	r2, [r4, #32]
 4757 0090 009B     		ldr	r3, [sp]
 4758              	.LVL716:
 4759 0092 9342     		cmp	r3, r2
 4760 0094 0DD0     		beq	.L475
3580:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 4761              		.loc 1 3580 0
 4762 0096 94F91430 		ldrsb	r3, [r4, #20]
 4763 009a 002B     		cmp	r3, #0
 4764 009c 5FDB     		blt	.L485
 4765              	.L476:
3585:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4766              		.loc 1 3585 0
 4767 009e 0123     		movs	r3, #1
 4768 00a0 009A     		ldr	r2, [sp]
 4769 00a2 04F13001 		add	r1, r4, #48
 4770 00a6 0398     		ldr	r0, [sp, #12]
 4771 00a8 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 4772 00aa FFF7FEFF 		bl	disk_read
 4773              	.LVL717:
ARM GAS  /tmp/ccBYTIZg.s 			page 200


 4774 00ae 0028     		cmp	r0, #0
 4775 00b0 64D1     		bne	.L486
 4776              	.L475:
3588:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 4777              		.loc 1 3588 0
 4778 00b2 009B     		ldr	r3, [sp]
 4779 00b4 2362     		str	r3, [r4, #32]
 4780              	.LVL718:
 4781              	.L462:
3590:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 4782              		.loc 1 3590 0
 4783 00b6 A369     		ldr	r3, [r4, #24]
 4784 00b8 C3F30803 		ubfx	r3, r3, #0, #9
 4785 00bc C3F50075 		rsb	r5, r3, #512
 4786              	.LVL719:
3591:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
 4787              		.loc 1 3591 0
 4788 00c0 AE42     		cmp	r6, r5
 4789 00c2 00D2     		bcs	.L478
 4790 00c4 3546     		mov	r5, r6
 4791              	.LVL720:
 4792              	.L478:
3596:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 4793              		.loc 1 3596 0
 4794 00c6 04F13001 		add	r1, r4, #48
 4795 00ca 2A46     		mov	r2, r5
 4796 00cc 1944     		add	r1, r1, r3
 4797 00ce 4046     		mov	r0, r8
 4798 00d0 FFF7FEFF 		bl	mem_cpy
 4799              	.LVL721:
 4800              	.L474:
3534:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 4801              		.loc 1 3534 0
 4802 00d4 A844     		add	r8, r8, r5
 4803              	.LVL722:
 4804 00d6 A369     		ldr	r3, [r4, #24]
 4805 00d8 2B44     		add	r3, r3, r5
 4806 00da A361     		str	r3, [r4, #24]
 4807 00dc D9F80030 		ldr	r3, [r9]
 4808 00e0 2B44     		add	r3, r3, r5
 4809 00e2 C9F80030 		str	r3, [r9]
 4810 00e6 761B     		subs	r6, r6, r5
 4811              	.LVL723:
 4812              	.L461:
3533:Middlewares/Third_Party/FatFs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 4813              		.loc 1 3533 0
 4814 00e8 002E     		cmp	r6, #0
 4815 00ea A0D0     		beq	.L459
3535:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 4816              		.loc 1 3535 0
 4817 00ec A169     		ldr	r1, [r4, #24]
 4818 00ee C1F30803 		ubfx	r3, r1, #0, #9
 4819 00f2 002B     		cmp	r3, #0
 4820 00f4 DFD1     		bne	.L462
3536:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 4821              		.loc 1 3536 0
 4822 00f6 039B     		ldr	r3, [sp, #12]
ARM GAS  /tmp/ccBYTIZg.s 			page 201


 4823 00f8 B3F80AA0 		ldrh	r10, [r3, #10]
 4824 00fc 0AF1FF3A 		add	r10, r10, #-1
 4825              	.LVL724:
3537:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 4826              		.loc 1 3537 0
 4827 0100 1AEA512A 		ands	r10, r10, r1, lsr #9
 4828              	.LVL725:
 4829 0104 08D1     		bne	.L463
3538:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 4830              		.loc 1 3538 0
 4831 0106 0029     		cmp	r1, #0
 4832 0108 9CD1     		bne	.L464
3539:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {						/* Middle or end of the file */
 4833              		.loc 1 3539 0
 4834 010a A068     		ldr	r0, [r4, #8]
 4835              	.LVL726:
 4836              	.L465:
3550:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 4837              		.loc 1 3550 0
 4838 010c 0128     		cmp	r0, #1
 4839 010e A4D9     		bls	.L487
3551:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 4840              		.loc 1 3551 0
 4841 0110 B0F1FF3F 		cmp	r0, #-1
 4842 0114 A4D0     		beq	.L488
3552:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4843              		.loc 1 3552 0
 4844 0116 E061     		str	r0, [r4, #28]
 4845              	.LVL727:
 4846              	.L463:
3554:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 4847              		.loc 1 3554 0
 4848 0118 039D     		ldr	r5, [sp, #12]
 4849 011a E169     		ldr	r1, [r4, #28]
 4850 011c 2846     		mov	r0, r5
 4851 011e FFF7FEFF 		bl	clust2sect
 4852              	.LVL728:
3555:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 4853              		.loc 1 3555 0
 4854 0122 0028     		cmp	r0, #0
 4855 0124 9FD0     		beq	.L489
3556:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 4856              		.loc 1 3556 0
 4857 0126 0AEB0003 		add	r3, r10, r0
 4858 012a 0093     		str	r3, [sp]
 4859              	.LVL729:
3558:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 4860              		.loc 1 3558 0
 4861 012c 5FEA562B 		lsrs	fp, r6, #9
 4862              	.LVL730:
 4863 0130 ADD0     		beq	.L470
3559:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
 4864              		.loc 1 3559 0
 4865 0132 0AEB0B03 		add	r3, r10, fp
 4866              	.LVL731:
 4867 0136 6A89     		ldrh	r2, [r5, #10]
 4868 0138 9342     		cmp	r3, r2
ARM GAS  /tmp/ccBYTIZg.s 			page 202


 4869 013a 01D9     		bls	.L471
3560:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4870              		.loc 1 3560 0
 4871 013c A2EB0A0B 		sub	fp, r2, r10
 4872              	.LVL732:
 4873              	.L471:
3562:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it 
 4874              		.loc 1 3562 0
 4875 0140 5B46     		mov	r3, fp
 4876 0142 009A     		ldr	r2, [sp]
 4877 0144 4146     		mov	r1, r8
 4878 0146 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 4879 0148 FFF7FEFF 		bl	disk_read
 4880              	.LVL733:
 4881 014c 0028     		cmp	r0, #0
 4882 014e 8DD1     		bne	.L490
3569:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 4883              		.loc 1 3569 0
 4884 0150 94F91430 		ldrsb	r3, [r4, #20]
 4885 0154 002B     		cmp	r3, #0
 4886 0156 8CDB     		blt	.L491
 4887              	.L473:
3574:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
 4888              		.loc 1 3574 0
 4889 0158 4FEA4B25 		lsl	r5, fp, #9
 4890              	.LVL734:
3575:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4891              		.loc 1 3575 0
 4892 015c BAE7     		b	.L474
 4893              	.LVL735:
 4894              	.L485:
3581:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4895              		.loc 1 3581 0
 4896 015e 0123     		movs	r3, #1
 4897 0160 04F13001 		add	r1, r4, #48
 4898 0164 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 4899 0166 FFF7FEFF 		bl	disk_write
 4900              	.LVL736:
 4901 016a 20B9     		cbnz	r0, .L492
3582:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 4902              		.loc 1 3582 0
 4903 016c 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 4904 016e 03F07F03 		and	r3, r3, #127
 4905 0172 2375     		strb	r3, [r4, #20]
 4906 0174 93E7     		b	.L476
 4907              	.L492:
3581:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 4908              		.loc 1 3581 0 discriminator 1
 4909 0176 0127     		movs	r7, #1
 4910              	.LVL737:
 4911 0178 6775     		strb	r7, [r4, #21]
 4912 017a 58E7     		b	.L459
 4913              	.LVL738:
 4914              	.L486:
3585:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 4915              		.loc 1 3585 0 discriminator 1
 4916 017c 0127     		movs	r7, #1
ARM GAS  /tmp/ccBYTIZg.s 			page 203


 4917              	.LVL739:
 4918 017e 6775     		strb	r7, [r4, #21]
 4919 0180 55E7     		b	.L459
 4920              		.cfi_endproc
 4921              	.LFE181:
 4923              		.section	.text.f_write,"ax",%progbits
 4924              		.align	1
 4925              		.global	f_write
 4926              		.syntax unified
 4927              		.thumb
 4928              		.thumb_func
 4929              		.fpu fpv5-d16
 4931              	f_write:
 4932              	.LFB182:
3617:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 4933              		.loc 1 3617 0
 4934              		.cfi_startproc
 4935              		@ args = 0, pretend = 0, frame = 16
 4936              		@ frame_needed = 0, uses_anonymous_args = 0
 4937              	.LVL740:
 4938 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4939              	.LCFI54:
 4940              		.cfi_def_cfa_offset 36
 4941              		.cfi_offset 4, -36
 4942              		.cfi_offset 5, -32
 4943              		.cfi_offset 6, -28
 4944              		.cfi_offset 7, -24
 4945              		.cfi_offset 8, -20
 4946              		.cfi_offset 9, -16
 4947              		.cfi_offset 10, -12
 4948              		.cfi_offset 11, -8
 4949              		.cfi_offset 14, -4
 4950 0004 85B0     		sub	sp, sp, #20
 4951              	.LCFI55:
 4952              		.cfi_def_cfa_offset 56
 4953 0006 0446     		mov	r4, r0
 4954 0008 8846     		mov	r8, r1
 4955 000a 1646     		mov	r6, r2
 4956 000c 9946     		mov	r9, r3
 4957              	.LVL741:
3625:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 4958              		.loc 1 3625 0
 4959 000e 0023     		movs	r3, #0
 4960              	.LVL742:
 4961 0010 C9F80030 		str	r3, [r9]
3626:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 4962              		.loc 1 3626 0
 4963 0014 0090     		str	r0, [sp]
 4964 0016 03A9     		add	r1, sp, #12
 4965              	.LVL743:
 4966 0018 FFF7FEFF 		bl	validate
 4967              	.LVL744:
3627:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 4968              		.loc 1 3627 0
 4969 001c 0746     		mov	r7, r0
 4970 001e 30B9     		cbnz	r0, .L494
3627:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
ARM GAS  /tmp/ccBYTIZg.s 			page 204


 4971              		.loc 1 3627 0 is_stmt 0 discriminator 2
 4972 0020 677D     		ldrb	r7, [r4, #21]	@ zero_extendqisi2
 4973              	.LVL745:
 4974 0022 27B9     		cbnz	r7, .L494
3628:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4975              		.loc 1 3628 0 is_stmt 1
 4976 0024 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 4977 0026 13F0020F 		tst	r3, #2
 4978 002a 04D1     		bne	.L519
 4979 002c 0727     		movs	r7, #7
 4980              	.LVL746:
 4981              	.L494:
3723:Middlewares/Third_Party/FatFs/src/ff.c **** 
 4982              		.loc 1 3723 0
 4983 002e 3846     		mov	r0, r7
 4984 0030 05B0     		add	sp, sp, #20
 4985              	.LCFI56:
 4986              		.cfi_remember_state
 4987              		.cfi_def_cfa_offset 36
 4988              		@ sp needed
 4989 0032 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4990              	.LVL747:
 4991              	.L519:
 4992              	.LCFI57:
 4993              		.cfi_restore_state
3631:Middlewares/Third_Party/FatFs/src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 4994              		.loc 1 3631 0
 4995 0036 A369     		ldr	r3, [r4, #24]
 4996 0038 F342     		cmn	r3, r6
 4997 003a C0F09580 		bcc	.L496
3632:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 4998              		.loc 1 3632 0
 4999 003e DE43     		mvns	r6, r3
 5000              	.LVL748:
 5001 0040 92E0     		b	.L496
 5002              	.LVL749:
 5003              	.L499:
3647:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 5004              		.loc 1 3647 0
 5005 0042 E36A     		ldr	r3, [r4, #44]
 5006 0044 002B     		cmp	r3, #0
 5007 0046 35D0     		beq	.L501
3648:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else
 5008              		.loc 1 3648 0
 5009 0048 2046     		mov	r0, r4
 5010 004a FFF7FEFF 		bl	clmt_clust
 5011              	.LVL750:
 5012              	.L500:
3655:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 5013              		.loc 1 3655 0
 5014 004e 0028     		cmp	r0, #0
 5015 0050 00F0B180 		beq	.L502
3656:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5016              		.loc 1 3656 0
 5017 0054 0128     		cmp	r0, #1
 5018 0056 32D0     		beq	.L520
3657:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
ARM GAS  /tmp/ccBYTIZg.s 			page 205


 5019              		.loc 1 3657 0
 5020 0058 B0F1FF3F 		cmp	r0, #-1
 5021 005c 32D0     		beq	.L521
3658:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 5022              		.loc 1 3658 0
 5023 005e E061     		str	r0, [r4, #28]
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5024              		.loc 1 3659 0
 5025 0060 A368     		ldr	r3, [r4, #8]
 5026 0062 03B9     		cbnz	r3, .L498
3659:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5027              		.loc 1 3659 0 is_stmt 0 discriminator 1
 5028 0064 A060     		str	r0, [r4, #8]
 5029              	.LVL751:
 5030              	.L498:
3664:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 5031              		.loc 1 3664 0 is_stmt 1
 5032 0066 94F91430 		ldrsb	r3, [r4, #20]
 5033 006a 002B     		cmp	r3, #0
 5034 006c 2DDB     		blt	.L522
 5035              	.L505:
3669:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!sect) ABORT(fs, FR_INT_ERR);
 5036              		.loc 1 3669 0
 5037 006e 039B     		ldr	r3, [sp, #12]
 5038 0070 0193     		str	r3, [sp, #4]
 5039 0072 E169     		ldr	r1, [r4, #28]
 5040 0074 1846     		mov	r0, r3
 5041 0076 FFF7FEFF 		bl	clust2sect
 5042              	.LVL752:
3670:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 5043              		.loc 1 3670 0
 5044 007a 8346     		mov	fp, r0
 5045 007c 0028     		cmp	r0, #0
 5046 007e 35D0     		beq	.L523
3671:Middlewares/Third_Party/FatFs/src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 5047              		.loc 1 3671 0
 5048 0080 D344     		add	fp, fp, r10
 5049              	.LVL753:
3673:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 5050              		.loc 1 3673 0
 5051 0082 750A     		lsrs	r5, r6, #9
 5052              	.LVL754:
 5053 0084 45D0     		beq	.L508
3674:Middlewares/Third_Party/FatFs/src/ff.c **** 					cc = fs->csize - csect;
 5054              		.loc 1 3674 0
 5055 0086 0AEB0503 		add	r3, r10, r5
 5056 008a 019A     		ldr	r2, [sp, #4]
 5057 008c 5289     		ldrh	r2, [r2, #10]
 5058 008e 9342     		cmp	r3, r2
 5059 0090 01D9     		bls	.L509
3675:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5060              		.loc 1 3675 0
 5061 0092 A2EB0A05 		sub	r5, r2, r10
 5062              	.LVL755:
 5063              	.L509:
3677:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
 5064              		.loc 1 3677 0
ARM GAS  /tmp/ccBYTIZg.s 			page 206


 5065 0096 2B46     		mov	r3, r5
 5066 0098 5A46     		mov	r2, fp
 5067 009a 4146     		mov	r1, r8
 5068 009c 0198     		ldr	r0, [sp, #4]
 5069 009e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5070 00a0 FFF7FEFF 		bl	disk_write
 5071              	.LVL756:
 5072 00a4 28BB     		cbnz	r0, .L524
3685:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 5073              		.loc 1 3685 0
 5074 00a6 216A     		ldr	r1, [r4, #32]
 5075 00a8 A1EB0B01 		sub	r1, r1, fp
 5076 00ac 8D42     		cmp	r5, r1
 5077 00ae 23D8     		bhi	.L525
 5078              	.L511:
3691:Middlewares/Third_Party/FatFs/src/ff.c **** 				continue;
 5079              		.loc 1 3691 0
 5080 00b0 6D02     		lsls	r5, r5, #9
 5081              	.LVL757:
3692:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5082              		.loc 1 3692 0
 5083 00b2 4AE0     		b	.L512
 5084              	.LVL758:
 5085              	.L501:
3652:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5086              		.loc 1 3652 0
 5087 00b4 E169     		ldr	r1, [r4, #28]
 5088 00b6 0098     		ldr	r0, [sp]
 5089 00b8 FFF7FEFF 		bl	create_chain
 5090              	.LVL759:
 5091 00bc C7E7     		b	.L500
 5092              	.L520:
3656:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5093              		.loc 1 3656 0 discriminator 1
 5094 00be 0227     		movs	r7, #2
 5095              	.LVL760:
 5096 00c0 6775     		strb	r7, [r4, #21]
 5097 00c2 B4E7     		b	.L494
 5098              	.LVL761:
 5099              	.L521:
3657:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 5100              		.loc 1 3657 0 discriminator 1
 5101 00c4 0127     		movs	r7, #1
 5102              	.LVL762:
 5103 00c6 6775     		strb	r7, [r4, #21]
 5104 00c8 B1E7     		b	.L494
 5105              	.LVL763:
 5106              	.L522:
3665:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5107              		.loc 1 3665 0
 5108 00ca 0123     		movs	r3, #1
 5109 00cc 226A     		ldr	r2, [r4, #32]
 5110 00ce 04F13001 		add	r1, r4, #48
 5111 00d2 0398     		ldr	r0, [sp, #12]
 5112 00d4 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5113 00d6 FFF7FEFF 		bl	disk_write
 5114              	.LVL764:
ARM GAS  /tmp/ccBYTIZg.s 			page 207


 5115 00da 20B9     		cbnz	r0, .L526
3666:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5116              		.loc 1 3666 0
 5117 00dc 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5118 00de 03F07F03 		and	r3, r3, #127
 5119 00e2 2375     		strb	r3, [r4, #20]
 5120 00e4 C3E7     		b	.L505
 5121              	.L526:
3665:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5122              		.loc 1 3665 0 discriminator 1
 5123 00e6 0127     		movs	r7, #1
 5124              	.LVL765:
 5125 00e8 6775     		strb	r7, [r4, #21]
 5126 00ea A0E7     		b	.L494
 5127              	.LVL766:
 5128              	.L523:
3670:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += csect;
 5129              		.loc 1 3670 0 discriminator 1
 5130 00ec 0227     		movs	r7, #2
 5131              	.LVL767:
 5132 00ee 6775     		strb	r7, [r4, #21]
 5133 00f0 9DE7     		b	.L494
 5134              	.LVL768:
 5135              	.L524:
3677:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_MINIMIZE <= 2
 5136              		.loc 1 3677 0 discriminator 1
 5137 00f2 0127     		movs	r7, #1
 5138              	.LVL769:
 5139 00f4 6775     		strb	r7, [r4, #21]
 5140 00f6 9AE7     		b	.L494
 5141              	.LVL770:
 5142              	.L525:
3686:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 5143              		.loc 1 3686 0
 5144 00f8 4FF40072 		mov	r2, #512
 5145 00fc 08EB4121 		add	r1, r8, r1, lsl #9
 5146 0100 04F13000 		add	r0, r4, #48
 5147 0104 FFF7FEFF 		bl	mem_cpy
 5148              	.LVL771:
3687:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5149              		.loc 1 3687 0
 5150 0108 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5151 010a 03F07F03 		and	r3, r3, #127
 5152 010e 2375     		strb	r3, [r4, #20]
 5153 0110 CEE7     		b	.L511
 5154              	.L508:
3700:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 5155              		.loc 1 3700 0
 5156 0112 236A     		ldr	r3, [r4, #32]
 5157 0114 9B45     		cmp	fp, r3
 5158 0116 03D0     		beq	.L513
3701:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 5159              		.loc 1 3701 0 discriminator 1
 5160 0118 A269     		ldr	r2, [r4, #24]
 5161 011a E368     		ldr	r3, [r4, #12]
3700:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 5162              		.loc 1 3700 0 discriminator 1
ARM GAS  /tmp/ccBYTIZg.s 			page 208


 5163 011c 9A42     		cmp	r2, r3
 5164 011e 3DD3     		bcc	.L527
 5165              	.L513:
3706:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5166              		.loc 1 3706 0
 5167 0120 C4F820B0 		str	fp, [r4, #32]
 5168              	.LVL772:
 5169              	.L497:
3708:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 5170              		.loc 1 3708 0
 5171 0124 A369     		ldr	r3, [r4, #24]
 5172 0126 C3F30803 		ubfx	r3, r3, #0, #9
 5173 012a C3F50075 		rsb	r5, r3, #512
 5174              	.LVL773:
3709:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_TINY
 5175              		.loc 1 3709 0
 5176 012e AE42     		cmp	r6, r5
 5177 0130 00D2     		bcs	.L514
 5178 0132 3546     		mov	r5, r6
 5179              	.LVL774:
 5180              	.L514:
3715:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_DIRTY;
 5181              		.loc 1 3715 0
 5182 0134 04F13000 		add	r0, r4, #48
 5183 0138 2A46     		mov	r2, r5
 5184 013a 4146     		mov	r1, r8
 5185 013c 1844     		add	r0, r0, r3
 5186 013e FFF7FEFF 		bl	mem_cpy
 5187              	.LVL775:
3716:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5188              		.loc 1 3716 0
 5189 0142 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5190 0144 63F07F03 		orn	r3, r3, #127
 5191 0148 2375     		strb	r3, [r4, #20]
 5192              	.L512:
3636:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 5193              		.loc 1 3636 0
 5194 014a A844     		add	r8, r8, r5
 5195              	.LVL776:
 5196 014c A369     		ldr	r3, [r4, #24]
 5197 014e 2B44     		add	r3, r3, r5
 5198 0150 A361     		str	r3, [r4, #24]
 5199 0152 E268     		ldr	r2, [r4, #12]
 5200 0154 9342     		cmp	r3, r2
 5201 0156 38BF     		it	cc
 5202 0158 1346     		movcc	r3, r2
 5203 015a E360     		str	r3, [r4, #12]
 5204 015c D9F80030 		ldr	r3, [r9]
 5205 0160 2B44     		add	r3, r3, r5
 5206 0162 C9F80030 		str	r3, [r9]
 5207 0166 761B     		subs	r6, r6, r5
 5208              	.LVL777:
 5209              	.L496:
3635:Middlewares/Third_Party/FatFs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->
 5210              		.loc 1 3635 0
 5211 0168 2EB3     		cbz	r6, .L502
3637:Middlewares/Third_Party/FatFs/src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
ARM GAS  /tmp/ccBYTIZg.s 			page 209


 5212              		.loc 1 3637 0
 5213 016a A169     		ldr	r1, [r4, #24]
 5214 016c C1F30803 		ubfx	r3, r1, #0, #9
 5215 0170 002B     		cmp	r3, #0
 5216 0172 D7D1     		bne	.L497
3638:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 5217              		.loc 1 3638 0
 5218 0174 039B     		ldr	r3, [sp, #12]
 5219 0176 B3F80AA0 		ldrh	r10, [r3, #10]
 5220 017a 0AF1FF3A 		add	r10, r10, #-1
 5221              	.LVL778:
3639:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 5222              		.loc 1 3639 0
 5223 017e 1AEA512A 		ands	r10, r10, r1, lsr #9
 5224              	.LVL779:
 5225 0182 7FF470AF 		bne	.L498
3640:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 5226              		.loc 1 3640 0
 5227 0186 0029     		cmp	r1, #0
 5228 0188 7FF45BAF 		bne	.L499
3641:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 5229              		.loc 1 3641 0
 5230 018c A068     		ldr	r0, [r4, #8]
 5231              	.LVL780:
3642:Middlewares/Third_Party/FatFs/src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 5232              		.loc 1 3642 0
 5233 018e 0028     		cmp	r0, #0
 5234 0190 7FF45DAF 		bne	.L500
3643:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5235              		.loc 1 3643 0
 5236 0194 0098     		ldr	r0, [sp]
 5237              	.LVL781:
 5238 0196 FFF7FEFF 		bl	create_chain
 5239              	.LVL782:
 5240 019a 58E7     		b	.L500
 5241              	.LVL783:
 5242              	.L527:
3702:Middlewares/Third_Party/FatFs/src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 5243              		.loc 1 3702 0
 5244 019c 0123     		movs	r3, #1
 5245 019e 5A46     		mov	r2, fp
 5246 01a0 04F13001 		add	r1, r4, #48
 5247 01a4 0198     		ldr	r0, [sp, #4]
 5248 01a6 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5249 01a8 FFF7FEFF 		bl	disk_read
 5250              	.LVL784:
3701:Middlewares/Third_Party/FatFs/src/ff.c **** 				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 5251              		.loc 1 3701 0
 5252 01ac 0028     		cmp	r0, #0
 5253 01ae B7D0     		beq	.L513
3703:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5254              		.loc 1 3703 0
 5255 01b0 0127     		movs	r7, #1
 5256              	.LVL785:
 5257 01b2 6775     		strb	r7, [r4, #21]
 5258 01b4 3BE7     		b	.L494
 5259              	.LVL786:
ARM GAS  /tmp/ccBYTIZg.s 			page 210


 5260              	.L502:
3720:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5261              		.loc 1 3720 0
 5262 01b6 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5263 01b8 43F04003 		orr	r3, r3, #64
 5264 01bc 2375     		strb	r3, [r4, #20]
3722:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5265              		.loc 1 3722 0
 5266 01be 36E7     		b	.L494
 5267              		.cfi_endproc
 5268              	.LFE182:
 5270              		.section	.text.putc_bfd,"ax",%progbits
 5271              		.align	1
 5272              		.syntax unified
 5273              		.thumb
 5274              		.thumb_func
 5275              		.fpu fpv5-d16
 5277              	putc_bfd:
 5278              	.LFB197:
5921:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT bw;
 5279              		.loc 1 5921 0
 5280              		.cfi_startproc
 5281              		@ args = 0, pretend = 0, frame = 8
 5282              		@ frame_needed = 0, uses_anonymous_args = 0
 5283              	.LVL787:
 5284 0000 70B5     		push	{r4, r5, r6, lr}
 5285              	.LCFI58:
 5286              		.cfi_def_cfa_offset 16
 5287              		.cfi_offset 4, -16
 5288              		.cfi_offset 5, -12
 5289              		.cfi_offset 6, -8
 5290              		.cfi_offset 14, -4
 5291 0002 82B0     		sub	sp, sp, #8
 5292              	.LCFI59:
 5293              		.cfi_def_cfa_offset 24
 5294 0004 0446     		mov	r4, r0
 5295 0006 0E46     		mov	r6, r1
5926:Middlewares/Third_Party/FatFs/src/ff.c **** 		putc_bfd(pb, '\r');
 5296              		.loc 1 5926 0
 5297 0008 0A29     		cmp	r1, #10
 5298 000a 0DD0     		beq	.L535
 5299              	.LVL788:
 5300              	.L529:
5930:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (i < 0) return;
 5301              		.loc 1 5930 0
 5302 000c 6368     		ldr	r3, [r4, #4]
 5303              	.LVL789:
5931:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5304              		.loc 1 5931 0
 5305 000e 002B     		cmp	r3, #0
 5306 0010 08DB     		blt	.L528
5960:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5307              		.loc 1 5960 0
 5308 0012 5D1C     		adds	r5, r3, #1
 5309              	.LVL790:
 5310 0014 2344     		add	r3, r3, r4
 5311 0016 1E73     		strb	r6, [r3, #12]
ARM GAS  /tmp/ccBYTIZg.s 			page 211


5963:Middlewares/Third_Party/FatFs/src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 5312              		.loc 1 5963 0
 5313 0018 3C2D     		cmp	r5, #60
 5314 001a 09DC     		bgt	.L536
 5315              	.LVL791:
 5316              	.L531:
5967:Middlewares/Third_Party/FatFs/src/ff.c **** 	pb->nchr++;
 5317              		.loc 1 5967 0
 5318 001c 6560     		str	r5, [r4, #4]
5968:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5319              		.loc 1 5968 0
 5320 001e A368     		ldr	r3, [r4, #8]
 5321 0020 0133     		adds	r3, r3, #1
 5322 0022 A360     		str	r3, [r4, #8]
 5323              	.LVL792:
 5324              	.L528:
5969:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5325              		.loc 1 5969 0
 5326 0024 02B0     		add	sp, sp, #8
 5327              	.LCFI60:
 5328              		.cfi_remember_state
 5329              		.cfi_def_cfa_offset 16
 5330              		@ sp needed
 5331 0026 70BD     		pop	{r4, r5, r6, pc}
 5332              	.LVL793:
 5333              	.L535:
 5334              	.LCFI61:
 5335              		.cfi_restore_state
5927:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5336              		.loc 1 5927 0
 5337 0028 0D21     		movs	r1, #13
 5338              	.LVL794:
 5339 002a FFF7E9FF 		bl	putc_bfd
 5340              	.LVL795:
 5341 002e EDE7     		b	.L529
 5342              	.LVL796:
 5343              	.L536:
5964:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = (bw == (UINT)i) ? 0 : -1;
 5344              		.loc 1 5964 0
 5345 0030 01AB     		add	r3, sp, #4
 5346 0032 2A46     		mov	r2, r5
 5347 0034 04F10C01 		add	r1, r4, #12
 5348 0038 2068     		ldr	r0, [r4]
 5349 003a FFF7FEFF 		bl	f_write
 5350              	.LVL797:
5965:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 5351              		.loc 1 5965 0
 5352 003e 019B     		ldr	r3, [sp, #4]
 5353 0040 9D42     		cmp	r5, r3
 5354 0042 02D0     		beq	.L537
 5355 0044 4FF0FF35 		mov	r5, #-1
 5356              	.LVL798:
 5357 0048 E8E7     		b	.L531
 5358              	.LVL799:
 5359              	.L537:
 5360 004a 0025     		movs	r5, #0
 5361              	.LVL800:
ARM GAS  /tmp/ccBYTIZg.s 			page 212


 5362 004c E6E7     		b	.L531
 5363              		.cfi_endproc
 5364              	.LFE197:
 5366              		.section	.text.putc_flush,"ax",%progbits
 5367              		.align	1
 5368              		.syntax unified
 5369              		.thumb
 5370              		.thumb_func
 5371              		.fpu fpv5-d16
 5373              	putc_flush:
 5374              	.LFB198:
5976:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
 5375              		.loc 1 5976 0
 5376              		.cfi_startproc
 5377              		@ args = 0, pretend = 0, frame = 8
 5378              		@ frame_needed = 0, uses_anonymous_args = 0
 5379              	.LVL801:
5979:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 5380              		.loc 1 5979 0
 5381 0000 4268     		ldr	r2, [r0, #4]
 5382 0002 002A     		cmp	r2, #0
 5383 0004 10DB     		blt	.L540
5976:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT nw;
 5384              		.loc 1 5976 0
 5385 0006 10B5     		push	{r4, lr}
 5386              	.LCFI62:
 5387              		.cfi_def_cfa_offset 8
 5388              		.cfi_offset 4, -8
 5389              		.cfi_offset 14, -4
 5390 0008 82B0     		sub	sp, sp, #8
 5391              	.LCFI63:
 5392              		.cfi_def_cfa_offset 16
 5393 000a 0446     		mov	r4, r0
5980:Middlewares/Third_Party/FatFs/src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 5394              		.loc 1 5980 0
 5395 000c 01AB     		add	r3, sp, #4
 5396 000e 00F10C01 		add	r1, r0, #12
 5397 0012 0068     		ldr	r0, [r0]
 5398              	.LVL802:
 5399 0014 FFF7FEFF 		bl	f_write
 5400              	.LVL803:
 5401 0018 48B9     		cbnz	r0, .L541
5981:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
 5402              		.loc 1 5981 0
 5403 001a 6268     		ldr	r2, [r4, #4]
 5404 001c 019B     		ldr	r3, [sp, #4]
 5405 001e 9A42     		cmp	r2, r3
 5406 0020 08D1     		bne	.L542
5981:Middlewares/Third_Party/FatFs/src/ff.c **** 	return EOF;
 5407              		.loc 1 5981 0 is_stmt 0 discriminator 1
 5408 0022 A068     		ldr	r0, [r4, #8]
 5409              	.L538:
5983:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5410              		.loc 1 5983 0 is_stmt 1
 5411 0024 02B0     		add	sp, sp, #8
 5412              	.LCFI64:
 5413              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccBYTIZg.s 			page 213


 5414              		@ sp needed
 5415 0026 10BD     		pop	{r4, pc}
 5416              	.LVL804:
 5417              	.L540:
 5418              	.LCFI65:
 5419              		.cfi_def_cfa_offset 0
 5420              		.cfi_restore 4
 5421              		.cfi_restore 14
5982:Middlewares/Third_Party/FatFs/src/ff.c **** }
 5422              		.loc 1 5982 0
 5423 0028 4FF0FF30 		mov	r0, #-1
 5424              	.LVL805:
 5425 002c 7047     		bx	lr
 5426              	.LVL806:
 5427              	.L541:
 5428              	.LCFI66:
 5429              		.cfi_def_cfa_offset 16
 5430              		.cfi_offset 4, -8
 5431              		.cfi_offset 14, -4
 5432 002e 4FF0FF30 		mov	r0, #-1
 5433 0032 F7E7     		b	.L538
 5434              	.L542:
 5435 0034 4FF0FF30 		mov	r0, #-1
 5436 0038 F4E7     		b	.L538
 5437              		.cfi_endproc
 5438              	.LFE198:
 5440              		.section	.text.f_sync,"ax",%progbits
 5441              		.align	1
 5442              		.global	f_sync
 5443              		.syntax unified
 5444              		.thumb
 5445              		.thumb_func
 5446              		.fpu fpv5-d16
 5448              	f_sync:
 5449              	.LFB183:
3735:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5450              		.loc 1 3735 0
 5451              		.cfi_startproc
 5452              		@ args = 0, pretend = 0, frame = 8
 5453              		@ frame_needed = 0, uses_anonymous_args = 0
 5454              	.LVL807:
 5455 0000 70B5     		push	{r4, r5, r6, lr}
 5456              	.LCFI67:
 5457              		.cfi_def_cfa_offset 16
 5458              		.cfi_offset 4, -16
 5459              		.cfi_offset 5, -12
 5460              		.cfi_offset 6, -8
 5461              		.cfi_offset 14, -4
 5462 0002 82B0     		sub	sp, sp, #8
 5463              	.LCFI68:
 5464              		.cfi_def_cfa_offset 24
 5465 0004 0446     		mov	r4, r0
3745:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 5466              		.loc 1 3745 0
 5467 0006 01A9     		add	r1, sp, #4
 5468 0008 FFF7FEFF 		bl	validate
 5469              	.LVL808:
ARM GAS  /tmp/ccBYTIZg.s 			page 214


3746:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 5470              		.loc 1 3746 0
 5471 000c 0346     		mov	r3, r0
 5472 000e 78B9     		cbnz	r0, .L548
3747:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 5473              		.loc 1 3747 0
 5474 0010 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 5475 0012 12F0400F 		tst	r2, #64
 5476 0016 0BD0     		beq	.L548
3749:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 5477              		.loc 1 3749 0
 5478 0018 12F0800F 		tst	r2, #128
 5479 001c 0BD1     		bne	.L552
 5480              	.LVL809:
 5481              	.L549:
3755:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 5482              		.loc 1 3755 0
 5483 001e FFF7FEFF 		bl	get_fattime
 5484              	.LVL810:
 5485 0022 0646     		mov	r6, r0
 5486              	.LVL811:
3785:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
 5487              		.loc 1 3785 0
 5488 0024 616A     		ldr	r1, [r4, #36]
 5489 0026 0198     		ldr	r0, [sp, #4]
 5490              	.LVL812:
 5491 0028 FFF7FEFF 		bl	move_window
 5492              	.LVL813:
3786:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir = fp->dir_ptr;
 5493              		.loc 1 3786 0
 5494 002c 0346     		mov	r3, r0
 5495 002e 80B1     		cbz	r0, .L553
 5496              	.LVL814:
 5497              	.L548:
3802:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5498              		.loc 1 3802 0
 5499 0030 1846     		mov	r0, r3
 5500 0032 02B0     		add	sp, sp, #8
 5501              	.LCFI69:
 5502              		.cfi_remember_state
 5503              		.cfi_def_cfa_offset 16
 5504              		@ sp needed
 5505 0034 70BD     		pop	{r4, r5, r6, pc}
 5506              	.LVL815:
 5507              	.L552:
 5508              	.LCFI70:
 5509              		.cfi_restore_state
3750:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5510              		.loc 1 3750 0
 5511 0036 0123     		movs	r3, #1
 5512 0038 226A     		ldr	r2, [r4, #32]
 5513 003a 04F13001 		add	r1, r4, #48
 5514 003e 0198     		ldr	r0, [sp, #4]
 5515              	.LVL816:
 5516 0040 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5517 0042 FFF7FEFF 		bl	disk_write
 5518              	.LVL817:
ARM GAS  /tmp/ccBYTIZg.s 			page 215


 5519 0046 48BB     		cbnz	r0, .L550
3751:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5520              		.loc 1 3751 0
 5521 0048 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5522 004a 03F07F03 		and	r3, r3, #127
 5523 004e 2375     		strb	r3, [r4, #20]
 5524 0050 E5E7     		b	.L549
 5525              	.LVL818:
 5526              	.L553:
3787:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 5527              		.loc 1 3787 0
 5528 0052 A56A     		ldr	r5, [r4, #40]
 5529              	.LVL819:
3788:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 5530              		.loc 1 3788 0
 5531 0054 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 5532 0056 43F02003 		orr	r3, r3, #32
 5533 005a EB72     		strb	r3, [r5, #11]
3789:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 5534              		.loc 1 3789 0
 5535 005c A268     		ldr	r2, [r4, #8]
 5536 005e 2946     		mov	r1, r5
 5537 0060 2068     		ldr	r0, [r4]
 5538              	.LVL820:
 5539 0062 FFF7FEFF 		bl	st_clust
 5540              	.LVL821:
3790:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 5541              		.loc 1 3790 0
 5542 0066 E168     		ldr	r1, [r4, #12]
 5543 0068 05F11C00 		add	r0, r5, #28
 5544 006c FFF7FEFF 		bl	st_dword
 5545              	.LVL822:
3791:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 5546              		.loc 1 3791 0
 5547 0070 3146     		mov	r1, r6
 5548 0072 05F11600 		add	r0, r5, #22
 5549 0076 FFF7FEFF 		bl	st_dword
 5550              	.LVL823:
3792:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 5551              		.loc 1 3792 0
 5552 007a 0021     		movs	r1, #0
 5553 007c 05F11200 		add	r0, r5, #18
 5554 0080 FFF7FEFF 		bl	st_word
 5555              	.LVL824:
3793:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 5556              		.loc 1 3793 0
 5557 0084 0122     		movs	r2, #1
 5558 0086 019B     		ldr	r3, [sp, #4]
 5559 0088 DA70     		strb	r2, [r3, #3]
3794:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 5560              		.loc 1 3794 0
 5561 008a 0198     		ldr	r0, [sp, #4]
 5562 008c FFF7FEFF 		bl	sync_fs
 5563              	.LVL825:
 5564 0090 0346     		mov	r3, r0
 5565              	.LVL826:
3795:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
ARM GAS  /tmp/ccBYTIZg.s 			page 216


 5566              		.loc 1 3795 0
 5567 0092 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 5568 0094 22F04002 		bic	r2, r2, #64
 5569 0098 2275     		strb	r2, [r4, #20]
 5570 009a C9E7     		b	.L548
 5571              	.LVL827:
 5572              	.L550:
3750:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 5573              		.loc 1 3750 0
 5574 009c 0123     		movs	r3, #1
 5575 009e C7E7     		b	.L548
 5576              		.cfi_endproc
 5577              	.LFE183:
 5579              		.section	.text.f_close,"ax",%progbits
 5580              		.align	1
 5581              		.global	f_close
 5582              		.syntax unified
 5583              		.thumb
 5584              		.thumb_func
 5585              		.fpu fpv5-d16
 5587              	f_close:
 5588              	.LFB184:
3816:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5589              		.loc 1 3816 0
 5590              		.cfi_startproc
 5591              		@ args = 0, pretend = 0, frame = 8
 5592              		@ frame_needed = 0, uses_anonymous_args = 0
 5593              	.LVL828:
 5594 0000 10B5     		push	{r4, lr}
 5595              	.LCFI71:
 5596              		.cfi_def_cfa_offset 8
 5597              		.cfi_offset 4, -8
 5598              		.cfi_offset 14, -4
 5599 0002 82B0     		sub	sp, sp, #8
 5600              	.LCFI72:
 5601              		.cfi_def_cfa_offset 16
 5602 0004 0446     		mov	r4, r0
3821:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK)
 5603              		.loc 1 3821 0
 5604 0006 FFF7FEFF 		bl	f_sync
 5605              	.LVL829:
3822:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5606              		.loc 1 3822 0
 5607 000a 0346     		mov	r3, r0
 5608 000c 10B1     		cbz	r0, .L557
 5609              	.L555:
 5610              	.LVL830:
3840:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5611              		.loc 1 3840 0
 5612 000e 1846     		mov	r0, r3
 5613 0010 02B0     		add	sp, sp, #8
 5614              	.LCFI73:
 5615              		.cfi_remember_state
 5616              		.cfi_def_cfa_offset 8
 5617              		@ sp needed
 5618 0012 10BD     		pop	{r4, pc}
 5619              	.LVL831:
ARM GAS  /tmp/ccBYTIZg.s 			page 217


 5620              	.L557:
 5621              	.LCFI74:
 5622              		.cfi_restore_state
3825:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {
 5623              		.loc 1 3825 0
 5624 0014 01A9     		add	r1, sp, #4
 5625 0016 2046     		mov	r0, r4
 5626              	.LVL832:
 5627 0018 FFF7FEFF 		bl	validate
 5628              	.LVL833:
3826:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 5629              		.loc 1 3826 0
 5630 001c 0346     		mov	r3, r0
 5631 001e 0028     		cmp	r0, #0
 5632 0020 F5D1     		bne	.L555
3828:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK)
 5633              		.loc 1 3828 0
 5634 0022 2069     		ldr	r0, [r4, #16]
 5635              	.LVL834:
 5636 0024 FFF7FEFF 		bl	dec_lock
 5637              	.LVL835:
3829:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5638              		.loc 1 3829 0
 5639 0028 0346     		mov	r3, r0
 5640 002a 0028     		cmp	r0, #0
 5641 002c EFD1     		bne	.L555
3832:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5642              		.loc 1 3832 0
 5643 002e 0022     		movs	r2, #0
 5644 0030 2260     		str	r2, [r4]
 5645 0032 ECE7     		b	.L555
 5646              		.cfi_endproc
 5647              	.LFE184:
 5649              		.section	.text.f_lseek,"ax",%progbits
 5650              		.align	1
 5651              		.global	f_lseek
 5652              		.syntax unified
 5653              		.thumb
 5654              		.thumb_func
 5655              		.fpu fpv5-d16
 5657              	f_lseek:
 5658              	.LFB185:
4005:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 5659              		.loc 1 4005 0
 5660              		.cfi_startproc
 5661              		@ args = 0, pretend = 0, frame = 16
 5662              		@ frame_needed = 0, uses_anonymous_args = 0
 5663              	.LVL836:
 5664 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 5665              	.LCFI75:
 5666              		.cfi_def_cfa_offset 36
 5667              		.cfi_offset 4, -36
 5668              		.cfi_offset 5, -32
 5669              		.cfi_offset 6, -28
 5670              		.cfi_offset 7, -24
 5671              		.cfi_offset 8, -20
 5672              		.cfi_offset 9, -16
ARM GAS  /tmp/ccBYTIZg.s 			page 218


 5673              		.cfi_offset 10, -12
 5674              		.cfi_offset 11, -8
 5675              		.cfi_offset 14, -4
 5676 0004 85B0     		sub	sp, sp, #20
 5677              	.LCFI76:
 5678              		.cfi_def_cfa_offset 56
 5679 0006 0446     		mov	r4, r0
 5680 0008 0E46     		mov	r6, r1
4014:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 5681              		.loc 1 4014 0
 5682 000a 8046     		mov	r8, r0
 5683 000c 03A9     		add	r1, sp, #12
 5684              	.LVL837:
 5685 000e FFF7FEFF 		bl	validate
 5686              	.LVL838:
4015:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
 5687              		.loc 1 4015 0
 5688 0012 0546     		mov	r5, r0
 5689 0014 00B9     		cbnz	r0, .L559
4015:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT && !_FS_READONLY
 5690              		.loc 1 4015 0 is_stmt 0 discriminator 1
 5691 0016 657D     		ldrb	r5, [r4, #21]	@ zero_extendqisi2
 5692              	.LVL839:
 5693              	.L559:
4021:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5694              		.loc 1 4021 0 is_stmt 1
 5695 0018 6DB9     		cbnz	r5, .L560
4024:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 5696              		.loc 1 4024 0
 5697 001a E36A     		ldr	r3, [r4, #44]
 5698 001c 002B     		cmp	r3, #0
 5699 001e 00F08B80 		beq	.L561
4025:Middlewares/Third_Party/FatFs/src/ff.c **** 			tbl = fp->cltbl;
 5700              		.loc 1 4025 0
 5701 0022 B6F1FF3F 		cmp	r6, #-1
 5702 0026 0AD0     		beq	.L602
4051:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
 5703              		.loc 1 4051 0
 5704 0028 E768     		ldr	r7, [r4, #12]
 5705 002a BE42     		cmp	r6, r7
 5706 002c 00D8     		bhi	.L569
 5707 002e 3746     		mov	r7, r6
 5708              	.L569:
 5709              	.LVL840:
4052:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ofs) {
 5710              		.loc 1 4052 0
 5711 0030 A761     		str	r7, [r4, #24]
4053:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
 5712              		.loc 1 4053 0
 5713 0032 002F     		cmp	r7, #0
 5714 0034 42D1     		bne	.L603
 5715              	.LVL841:
 5716              	.L560:
4153:Middlewares/Third_Party/FatFs/src/ff.c **** 
 5717              		.loc 1 4153 0
 5718 0036 2846     		mov	r0, r5
 5719 0038 05B0     		add	sp, sp, #20
ARM GAS  /tmp/ccBYTIZg.s 			page 219


 5720              	.LCFI77:
 5721              		.cfi_remember_state
 5722              		.cfi_def_cfa_offset 36
 5723              		@ sp needed
 5724 003a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 5725              	.LVL842:
 5726              	.L602:
 5727              	.LCFI78:
 5728              		.cfi_restore_state
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 5729              		.loc 1 4027 0
 5730 003e 1A1D     		adds	r2, r3, #4
 5731 0040 0192     		str	r2, [sp, #4]
 5732              	.LVL843:
 5733 0042 D3F800B0 		ldr	fp, [r3]
 5734              	.LVL844:
4028:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (cl) {
 5735              		.loc 1 4028 0
 5736 0046 D4F808A0 		ldr	r10, [r4, #8]
 5737              	.LVL845:
4029:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
 5738              		.loc 1 4029 0
 5739 004a BAF1000F 		cmp	r10, #0
 5740 004e 28D0     		beq	.L594
 5741 0050 4FF00209 		mov	r9, #2
 5742              	.LVL846:
 5743              	.L568:
4032:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
 5744              		.loc 1 4032 0
 5745 0054 09F10209 		add	r9, r9, #2
 5746              	.LVL847:
 5747 0058 5646     		mov	r6, r10
 5748 005a 0027     		movs	r7, #0
 5749              	.LVL848:
 5750              	.L566:
4034:Middlewares/Third_Party/FatFs/src/ff.c **** 						cl = get_fat(&fp->obj, cl);
 5751              		.loc 1 4034 0
 5752 005c 0137     		adds	r7, r7, #1
 5753              	.LVL849:
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 5754              		.loc 1 4035 0
 5755 005e 3146     		mov	r1, r6
 5756 0060 4046     		mov	r0, r8
 5757 0062 FFF7FEFF 		bl	get_fat
 5758              	.LVL850:
4036:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5759              		.loc 1 4036 0
 5760 0066 0128     		cmp	r0, #1
 5761 0068 15D9     		bls	.L604
4037:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
 5762              		.loc 1 4037 0
 5763 006a B0F1FF3F 		cmp	r0, #-1
 5764 006e 15D0     		beq	.L605
4038:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 5765              		.loc 1 4038 0
 5766 0070 731C     		adds	r3, r6, #1
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
ARM GAS  /tmp/ccBYTIZg.s 			page 220


 5767              		.loc 1 4035 0
 5768 0072 0646     		mov	r6, r0
 5769              	.LVL851:
4038:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 5770              		.loc 1 4038 0
 5771 0074 9842     		cmp	r0, r3
 5772 0076 F1D0     		beq	.L566
4039:Middlewares/Third_Party/FatFs/src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
 5773              		.loc 1 4039 0
 5774 0078 CB45     		cmp	fp, r9
 5775 007a 06D3     		bcc	.L567
 5776              	.LVL852:
4040:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5777              		.loc 1 4040 0
 5778 007c 019A     		ldr	r2, [sp, #4]
 5779 007e 1346     		mov	r3, r2
 5780              	.LVL853:
 5781 0080 43F8087B 		str	r7, [r3], #8
 5782              	.LVL854:
 5783 0084 C2F804A0 		str	r10, [r2, #4]
 5784 0088 0193     		str	r3, [sp, #4]
 5785              	.LVL855:
 5786              	.L567:
4042:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5787              		.loc 1 4042 0
 5788 008a 039B     		ldr	r3, [sp, #12]
 5789 008c 5B69     		ldr	r3, [r3, #20]
 5790 008e 9842     		cmp	r0, r3
 5791 0090 09D2     		bcs	.L563
4035:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 5792              		.loc 1 4035 0
 5793 0092 8246     		mov	r10, r0
 5794              	.LVL856:
 5795 0094 DEE7     		b	.L568
 5796              	.LVL857:
 5797              	.L604:
4036:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5798              		.loc 1 4036 0 discriminator 1
 5799 0096 0225     		movs	r5, #2
 5800              	.LVL858:
 5801 0098 6575     		strb	r5, [r4, #21]
 5802 009a CCE7     		b	.L560
 5803              	.LVL859:
 5804              	.L605:
4037:Middlewares/Third_Party/FatFs/src/ff.c **** 					} while (cl == pcl + 1);
 5805              		.loc 1 4037 0 discriminator 1
 5806 009c 0125     		movs	r5, #1
 5807              	.LVL860:
 5808 009e 6575     		strb	r5, [r4, #21]
 5809 00a0 C9E7     		b	.L560
 5810              	.LVL861:
 5811              	.L594:
4027:Middlewares/Third_Party/FatFs/src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
 5812              		.loc 1 4027 0
 5813 00a2 4FF00209 		mov	r9, #2
 5814              	.LVL862:
 5815              	.L563:
ARM GAS  /tmp/ccBYTIZg.s 			page 221


4044:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ulen <= tlen) {
 5816              		.loc 1 4044 0
 5817 00a6 E36A     		ldr	r3, [r4, #44]
 5818 00a8 C3F80090 		str	r9, [r3]
4045:Middlewares/Third_Party/FatFs/src/ff.c **** 				*tbl = 0;		/* Terminate table */
 5819              		.loc 1 4045 0
 5820 00ac D945     		cmp	r9, fp
 5821 00ae 01D9     		bls	.L606
4048:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5822              		.loc 1 4048 0
 5823 00b0 1125     		movs	r5, #17
 5824              	.LVL863:
 5825 00b2 C0E7     		b	.L560
 5826              	.LVL864:
 5827              	.L606:
4046:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 5828              		.loc 1 4046 0
 5829 00b4 0023     		movs	r3, #0
 5830 00b6 019A     		ldr	r2, [sp, #4]
 5831 00b8 1360     		str	r3, [r2]
 5832 00ba BCE7     		b	.L560
 5833              	.LVL865:
 5834              	.L603:
4054:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, fp->clust);
 5835              		.loc 1 4054 0
 5836 00bc 07F1FF38 		add	r8, r7, #-1
 5837 00c0 4146     		mov	r1, r8
 5838 00c2 2046     		mov	r0, r4
 5839 00c4 FFF7FEFF 		bl	clmt_clust
 5840              	.LVL866:
 5841 00c8 0146     		mov	r1, r0
 5842 00ca E061     		str	r0, [r4, #28]
4055:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!dsc) ABORT(fs, FR_INT_ERR);
 5843              		.loc 1 4055 0
 5844 00cc 039E     		ldr	r6, [sp, #12]
 5845 00ce 3046     		mov	r0, r6
 5846 00d0 FFF7FEFF 		bl	clust2sect
 5847              	.LVL867:
4056:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 5848              		.loc 1 4056 0
 5849 00d4 10B9     		cbnz	r0, .L570
4056:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 5850              		.loc 1 4056 0 is_stmt 0 discriminator 1
 5851 00d6 0225     		movs	r5, #2
 5852              	.LVL868:
 5853 00d8 6575     		strb	r5, [r4, #21]
 5854 00da ACE7     		b	.L560
 5855              	.LVL869:
 5856              	.L570:
4057:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 5857              		.loc 1 4057 0 is_stmt 1
 5858 00dc 7389     		ldrh	r3, [r6, #10]
 5859 00de 013B     		subs	r3, r3, #1
 5860 00e0 03EA5828 		and	r8, r3, r8, lsr #9
 5861 00e4 8044     		add	r8, r8, r0
 5862              	.LVL870:
4058:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
ARM GAS  /tmp/ccBYTIZg.s 			page 222


 5863              		.loc 1 4058 0
 5864 00e6 C7F30807 		ubfx	r7, r7, #0, #9
 5865              	.LVL871:
 5866 00ea 002F     		cmp	r7, #0
 5867 00ec A3D0     		beq	.L560
4058:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 5868              		.loc 1 4058 0 is_stmt 0 discriminator 1
 5869 00ee 226A     		ldr	r2, [r4, #32]
 5870 00f0 9045     		cmp	r8, r2
 5871 00f2 A0D0     		beq	.L560
4061:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 5872              		.loc 1 4061 0 is_stmt 1
 5873 00f4 94F91430 		ldrsb	r3, [r4, #20]
 5874 00f8 002B     		cmp	r3, #0
 5875 00fa 0BDB     		blt	.L607
 5876              	.L571:
4066:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5877              		.loc 1 4066 0
 5878 00fc 0123     		movs	r3, #1
 5879 00fe 4246     		mov	r2, r8
 5880 0100 04F13001 		add	r1, r4, #48
 5881 0104 0398     		ldr	r0, [sp, #12]
 5882 0106 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5883 0108 FFF7FEFF 		bl	disk_read
 5884              	.LVL872:
 5885 010c 88B1     		cbz	r0, .L573
4066:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 5886              		.loc 1 4066 0 is_stmt 0 discriminator 1
 5887 010e 0125     		movs	r5, #1
 5888              	.LVL873:
 5889 0110 6575     		strb	r5, [r4, #21]
 5890 0112 90E7     		b	.L560
 5891              	.LVL874:
 5892              	.L607:
4062:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
 5893              		.loc 1 4062 0 is_stmt 1
 5894 0114 0123     		movs	r3, #1
 5895 0116 04F13001 		add	r1, r4, #48
 5896 011a 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 5897 011c FFF7FEFF 		bl	disk_write
 5898              	.LVL875:
 5899 0120 20B9     		cbnz	r0, .L608
4063:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 5900              		.loc 1 4063 0
 5901 0122 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 5902 0124 03F07F03 		and	r3, r3, #127
 5903 0128 2375     		strb	r3, [r4, #20]
 5904 012a E7E7     		b	.L571
 5905              	.L608:
4062:Middlewares/Third_Party/FatFs/src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
 5906              		.loc 1 4062 0 discriminator 1
 5907 012c 0125     		movs	r5, #1
 5908              	.LVL876:
 5909 012e 6575     		strb	r5, [r4, #21]
 5910 0130 81E7     		b	.L560
 5911              	.LVL877:
 5912              	.L573:
ARM GAS  /tmp/ccBYTIZg.s 			page 223


4068:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5913              		.loc 1 4068 0
 5914 0132 C4F82080 		str	r8, [r4, #32]
 5915 0136 7EE7     		b	.L560
 5916              	.LVL878:
 5917              	.L561:
4080:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
 5918              		.loc 1 4080 0
 5919 0138 E368     		ldr	r3, [r4, #12]
 5920 013a 9E42     		cmp	r6, r3
 5921 013c 04D9     		bls	.L574
4080:Middlewares/Third_Party/FatFs/src/ff.c **** 			ofs = fp->obj.objsize;
 5922              		.loc 1 4080 0 is_stmt 0 discriminator 1
 5923 013e 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 5924 0140 12F0020F 		tst	r2, #2
 5925 0144 00D1     		bne	.L574
4081:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 5926              		.loc 1 4081 0 is_stmt 1
 5927 0146 1E46     		mov	r6, r3
 5928              	.LVL879:
 5929              	.L574:
4083:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->fptr = nsect = 0;
 5930              		.loc 1 4083 0
 5931 0148 A369     		ldr	r3, [r4, #24]
 5932              	.LVL880:
4084:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 5933              		.loc 1 4084 0
 5934 014a 0022     		movs	r2, #0
 5935 014c A261     		str	r2, [r4, #24]
4085:Middlewares/Third_Party/FatFs/src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 5936              		.loc 1 4085 0
 5937 014e 002E     		cmp	r6, #0
 5938 0150 64D0     		beq	.L598
4086:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ifptr > 0 &&
 5939              		.loc 1 4086 0
 5940 0152 039A     		ldr	r2, [sp, #12]
 5941 0154 B2F80A90 		ldrh	r9, [r2, #10]
 5942 0158 4FEA4929 		lsl	r9, r9, #9
 5943              	.LVL881:
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5944              		.loc 1 4087 0
 5945 015c 73B1     		cbz	r3, .L576
4088:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 5946              		.loc 1 4088 0 discriminator 1
 5947 015e 721E     		subs	r2, r6, #1
 5948 0160 B2FBF9F2 		udiv	r2, r2, r9
 5949 0164 013B     		subs	r3, r3, #1
 5950              	.LVL882:
 5951 0166 B3FBF9F1 		udiv	r1, r3, r9
4087:Middlewares/Third_Party/FatFs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5952              		.loc 1 4087 0 discriminator 1
 5953 016a 8A42     		cmp	r2, r1
 5954 016c 06D3     		bcc	.L576
4089:Middlewares/Third_Party/FatFs/src/ff.c **** 				ofs -= fp->fptr;
 5955              		.loc 1 4089 0
 5956 016e C9F10002 		rsb	r2, r9, #0
 5957 0172 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccBYTIZg.s 			page 224


 5958              	.LVL883:
 5959 0174 A361     		str	r3, [r4, #24]
4090:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = fp->clust;
 5960              		.loc 1 4090 0
 5961 0176 F61A     		subs	r6, r6, r3
 5962              	.LVL884:
4091:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {									/* When seek to back cluster, */
 5963              		.loc 1 4091 0
 5964 0178 E769     		ldr	r7, [r4, #28]
 5965              	.LVL885:
 5966 017a 02E0     		b	.L577
 5967              	.LVL886:
 5968              	.L576:
4093:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 5969              		.loc 1 4093 0
 5970 017c A768     		ldr	r7, [r4, #8]
 5971              	.LVL887:
4095:Middlewares/Third_Party/FatFs/src/ff.c **** 					clst = create_chain(&fp->obj, 0);
 5972              		.loc 1 4095 0
 5973 017e 17B1     		cbz	r7, .L609
 5974              	.L578:
4102:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 5975              		.loc 1 4102 0
 5976 0180 E761     		str	r7, [r4, #28]
 5977              	.L577:
4104:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 5978              		.loc 1 4104 0
 5979 0182 0FBB     		cbnz	r7, .L581
 5980 0184 4BE0     		b	.L575
 5981              	.L609:
4096:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 5982              		.loc 1 4096 0
 5983 0186 0021     		movs	r1, #0
 5984 0188 2046     		mov	r0, r4
 5985 018a FFF7FEFF 		bl	create_chain
 5986              	.LVL888:
 5987 018e 0746     		mov	r7, r0
 5988              	.LVL889:
4097:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5989              		.loc 1 4097 0
 5990 0190 0128     		cmp	r0, #1
 5991 0192 04D0     		beq	.L610
4098:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
 5992              		.loc 1 4098 0
 5993 0194 B0F1FF3F 		cmp	r0, #-1
 5994 0198 04D0     		beq	.L611
4099:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 5995              		.loc 1 4099 0
 5996 019a A060     		str	r0, [r4, #8]
 5997 019c F0E7     		b	.L578
 5998              	.L610:
4097:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 5999              		.loc 1 4097 0 discriminator 1
 6000 019e 0225     		movs	r5, #2
 6001              	.LVL890:
 6002 01a0 6575     		strb	r5, [r4, #21]
 6003 01a2 48E7     		b	.L560
ARM GAS  /tmp/ccBYTIZg.s 			page 225


 6004              	.LVL891:
 6005              	.L611:
4098:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->obj.sclust = clst;
 6006              		.loc 1 4098 0 discriminator 1
 6007 01a4 0125     		movs	r5, #1
 6008              	.LVL892:
 6009 01a6 6575     		strb	r5, [r4, #21]
 6010 01a8 45E7     		b	.L560
 6011              	.LVL893:
 6012              	.L582:
4120:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6013              		.loc 1 4120 0
 6014 01aa 3946     		mov	r1, r7
 6015 01ac 4046     		mov	r0, r8
 6016 01ae FFF7FEFF 		bl	get_fat
 6017              	.LVL894:
 6018 01b2 0746     		mov	r7, r0
 6019              	.LVL895:
 6020              	.L584:
4122:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 6021              		.loc 1 4122 0
 6022 01b4 B7F1FF3F 		cmp	r7, #-1
 6023 01b8 27D0     		beq	.L612
4123:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 6024              		.loc 1 4123 0
 6025 01ba 012F     		cmp	r7, #1
 6026 01bc 28D9     		bls	.L586
4123:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 6027              		.loc 1 4123 0 is_stmt 0 discriminator 2
 6028 01be 039B     		ldr	r3, [sp, #12]
 6029 01c0 5B69     		ldr	r3, [r3, #20]
 6030 01c2 9F42     		cmp	r7, r3
 6031 01c4 24D2     		bcs	.L586
4124:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6032              		.loc 1 4124 0 is_stmt 1
 6033 01c6 E761     		str	r7, [r4, #28]
 6034              	.LVL896:
 6035              	.L581:
4105:Middlewares/Third_Party/FatFs/src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 6036              		.loc 1 4105 0
 6037 01c8 4E45     		cmp	r6, r9
 6038 01ca 10D9     		bls	.L583
4106:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_READONLY
 6039              		.loc 1 4106 0
 6040 01cc A6EB0906 		sub	r6, r6, r9
 6041              	.LVL897:
 6042 01d0 A369     		ldr	r3, [r4, #24]
 6043 01d2 4B44     		add	r3, r3, r9
 6044 01d4 A361     		str	r3, [r4, #24]
4108:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize t
 6045              		.loc 1 4108 0
 6046 01d6 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6047 01d8 13F0020F 		tst	r3, #2
 6048 01dc E5D0     		beq	.L582
4113:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 6049              		.loc 1 4113 0
 6050 01de 3946     		mov	r1, r7
ARM GAS  /tmp/ccBYTIZg.s 			page 226


 6051 01e0 4046     		mov	r0, r8
 6052 01e2 FFF7FEFF 		bl	create_chain
 6053              	.LVL898:
4114:Middlewares/Third_Party/FatFs/src/ff.c **** 							ofs = 0; break;
 6054              		.loc 1 4114 0
 6055 01e6 0746     		mov	r7, r0
 6056 01e8 0028     		cmp	r0, #0
 6057 01ea E3D1     		bne	.L584
4115:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 6058              		.loc 1 4115 0
 6059 01ec 0026     		movs	r6, #0
 6060              	.LVL899:
 6061              	.L583:
4126:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (ofs % SS(fs)) {
 6062              		.loc 1 4126 0
 6063 01ee A369     		ldr	r3, [r4, #24]
 6064 01f0 3344     		add	r3, r3, r6
 6065 01f2 A361     		str	r3, [r4, #24]
4127:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect = clust2sect(fs, clst);	/* Current sector */
 6066              		.loc 1 4127 0
 6067 01f4 C6F30803 		ubfx	r3, r6, #0, #9
 6068 01f8 93B3     		cbz	r3, .L600
4128:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!nsect) ABORT(fs, FR_INT_ERR);
 6069              		.loc 1 4128 0
 6070 01fa 3946     		mov	r1, r7
 6071 01fc 0398     		ldr	r0, [sp, #12]
 6072 01fe FFF7FEFF 		bl	clust2sect
 6073              	.LVL900:
4129:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 6074              		.loc 1 4129 0
 6075 0202 40B9     		cbnz	r0, .L589
4129:Middlewares/Third_Party/FatFs/src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 6076              		.loc 1 4129 0 is_stmt 0 discriminator 1
 6077 0204 0225     		movs	r5, #2
 6078              	.LVL901:
 6079 0206 6575     		strb	r5, [r4, #21]
 6080 0208 15E7     		b	.L560
 6081              	.LVL902:
 6082              	.L612:
4122:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 6083              		.loc 1 4122 0 is_stmt 1 discriminator 1
 6084 020a 0125     		movs	r5, #1
 6085              	.LVL903:
 6086 020c 6575     		strb	r5, [r4, #21]
 6087 020e 12E7     		b	.L560
 6088              	.LVL904:
 6089              	.L586:
4123:Middlewares/Third_Party/FatFs/src/ff.c **** 					fp->clust = clst;
 6090              		.loc 1 4123 0 discriminator 3
 6091 0210 0225     		movs	r5, #2
 6092              	.LVL905:
 6093 0212 6575     		strb	r5, [r4, #21]
 6094 0214 0FE7     		b	.L560
 6095              	.LVL906:
 6096              	.L589:
4130:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6097              		.loc 1 4130 0
ARM GAS  /tmp/ccBYTIZg.s 			page 227


 6098 0216 00EB5627 		add	r7, r0, r6, lsr #9
 6099              	.LVL907:
 6100 021a 00E0     		b	.L575
 6101              	.LVL908:
 6102              	.L598:
4084:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 6103              		.loc 1 4084 0
 6104 021c 0027     		movs	r7, #0
 6105              	.LVL909:
 6106              	.L575:
4134:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.objsize = fp->fptr;
 6107              		.loc 1 4134 0
 6108 021e A369     		ldr	r3, [r4, #24]
 6109 0220 E268     		ldr	r2, [r4, #12]
 6110 0222 9342     		cmp	r3, r2
 6111 0224 04D9     		bls	.L590
4135:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->flag |= FA_MODIFIED;
 6112              		.loc 1 4135 0
 6113 0226 E360     		str	r3, [r4, #12]
4136:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6114              		.loc 1 4136 0
 6115 0228 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 6116 022a 42F04002 		orr	r2, r2, #64
 6117 022e 2275     		strb	r2, [r4, #20]
 6118              	.L590:
4138:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6119              		.loc 1 4138 0
 6120 0230 C3F30803 		ubfx	r3, r3, #0, #9
 6121 0234 002B     		cmp	r3, #0
 6122 0236 3FF4FEAE 		beq	.L560
4138:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6123              		.loc 1 4138 0 is_stmt 0 discriminator 1
 6124 023a 226A     		ldr	r2, [r4, #32]
 6125 023c 9742     		cmp	r7, r2
 6126 023e 3FF4FAAE 		beq	.L560
4141:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6127              		.loc 1 4141 0 is_stmt 1
 6128 0242 94F91430 		ldrsb	r3, [r4, #20]
 6129 0246 002B     		cmp	r3, #0
 6130 0248 0CDB     		blt	.L613
 6131              	.L591:
4146:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6132              		.loc 1 4146 0
 6133 024a 0123     		movs	r3, #1
 6134 024c 3A46     		mov	r2, r7
 6135 024e 04F13001 		add	r1, r4, #48
 6136 0252 0398     		ldr	r0, [sp, #12]
 6137 0254 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6138 0256 FFF7FEFF 		bl	disk_read
 6139              	.LVL910:
 6140 025a 98B9     		cbnz	r0, .L614
4148:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6141              		.loc 1 4148 0
 6142 025c 2762     		str	r7, [r4, #32]
 6143 025e EAE6     		b	.L560
 6144              	.LVL911:
 6145              	.L600:
ARM GAS  /tmp/ccBYTIZg.s 			page 228


4084:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (ofs) {
 6146              		.loc 1 4084 0
 6147 0260 0027     		movs	r7, #0
 6148              	.LVL912:
 6149 0262 DCE7     		b	.L575
 6150              	.LVL913:
 6151              	.L613:
4142:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 6152              		.loc 1 4142 0
 6153 0264 0123     		movs	r3, #1
 6154 0266 04F13001 		add	r1, r4, #48
 6155 026a 0398     		ldr	r0, [sp, #12]
 6156 026c 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6157 026e FFF7FEFF 		bl	disk_write
 6158              	.LVL914:
 6159 0272 20B9     		cbnz	r0, .L615
4143:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6160              		.loc 1 4143 0
 6161 0274 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 6162 0276 03F07F03 		and	r3, r3, #127
 6163 027a 2375     		strb	r3, [r4, #20]
 6164 027c E5E7     		b	.L591
 6165              	.L615:
4142:Middlewares/Third_Party/FatFs/src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 6166              		.loc 1 4142 0 discriminator 1
 6167 027e 0125     		movs	r5, #1
 6168              	.LVL915:
 6169 0280 6575     		strb	r5, [r4, #21]
 6170 0282 D8E6     		b	.L560
 6171              	.LVL916:
 6172              	.L614:
4146:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6173              		.loc 1 4146 0 discriminator 1
 6174 0284 0125     		movs	r5, #1
 6175              	.LVL917:
 6176 0286 6575     		strb	r5, [r4, #21]
 6177 0288 D5E6     		b	.L560
 6178              		.cfi_endproc
 6179              	.LFE185:
 6181              		.section	.text.f_opendir,"ax",%progbits
 6182              		.align	1
 6183              		.global	f_opendir
 6184              		.syntax unified
 6185              		.thumb
 6186              		.thumb_func
 6187              		.fpu fpv5-d16
 6189              	f_opendir:
 6190              	.LFB186:
4166:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6191              		.loc 1 4166 0
 6192              		.cfi_startproc
 6193              		@ args = 0, pretend = 0, frame = 16
 6194              		@ frame_needed = 0, uses_anonymous_args = 0
 6195              	.LVL918:
 6196 0000 30B5     		push	{r4, r5, lr}
 6197              	.LCFI79:
 6198              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccBYTIZg.s 			page 229


 6199              		.cfi_offset 4, -12
 6200              		.cfi_offset 5, -8
 6201              		.cfi_offset 14, -4
 6202 0002 85B0     		sub	sp, sp, #20
 6203              	.LCFI80:
 6204              		.cfi_def_cfa_offset 32
 6205 0004 0191     		str	r1, [sp, #4]
4173:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6206              		.loc 1 4173 0
 6207 0006 0028     		cmp	r0, #0
 6208 0008 40D0     		beq	.L622
 6209 000a 0546     		mov	r5, r0
 6210              	.LVL919:
4177:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6211              		.loc 1 4177 0
 6212 000c 0022     		movs	r2, #0
 6213 000e 03A9     		add	r1, sp, #12
 6214              	.LVL920:
 6215 0010 01A8     		add	r0, sp, #4
 6216              	.LVL921:
 6217 0012 FFF7FEFF 		bl	find_volume
 6218              	.LVL922:
4178:Middlewares/Third_Party/FatFs/src/ff.c **** 		obj->fs = fs;
 6219              		.loc 1 4178 0
 6220 0016 0446     		mov	r4, r0
 6221 0018 20B1     		cbz	r0, .L627
 6222              	.LVL923:
 6223              	.L618:
4220:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6224              		.loc 1 4220 0
 6225 001a 002C     		cmp	r4, #0
 6226 001c 37D0     		beq	.L617
4220:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6227              		.loc 1 4220 0 is_stmt 0 discriminator 1
 6228 001e 0023     		movs	r3, #0
 6229 0020 2B60     		str	r3, [r5]
 6230 0022 34E0     		b	.L617
 6231              	.LVL924:
 6232              	.L627:
4179:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 6233              		.loc 1 4179 0 is_stmt 1
 6234 0024 039B     		ldr	r3, [sp, #12]
 6235 0026 2B60     		str	r3, [r5]
4181:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 6236              		.loc 1 4181 0
 6237 0028 0199     		ldr	r1, [sp, #4]
 6238 002a 2846     		mov	r0, r5
 6239              	.LVL925:
 6240 002c FFF7FEFF 		bl	follow_path
 6241              	.LVL926:
4182:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 6242              		.loc 1 4182 0
 6243 0030 0446     		mov	r4, r0
 6244 0032 68B9     		cbnz	r0, .L619
4183:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 6245              		.loc 1 4183 0
 6246 0034 95F92F30 		ldrsb	r3, [r5, #47]
ARM GAS  /tmp/ccBYTIZg.s 			page 230


 6247 0038 002B     		cmp	r3, #0
 6248 003a 08DB     		blt	.L620
4184:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 6249              		.loc 1 4184 0
 6250 003c AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 6251 003e 13F0100F 		tst	r3, #16
 6252 0042 09D0     		beq	.L623
4196:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6253              		.loc 1 4196 0
 6254 0044 296A     		ldr	r1, [r5, #32]
 6255 0046 0398     		ldr	r0, [sp, #12]
 6256              	.LVL927:
 6257 0048 FFF7FEFF 		bl	ld_clust
 6258              	.LVL928:
 6259 004c A860     		str	r0, [r5, #8]
 6260              	.L620:
 6261              	.LVL929:
4202:Middlewares/Third_Party/FatFs/src/ff.c **** 				obj->id = fs->id;
 6262              		.loc 1 4202 0
 6263 004e 2CB1     		cbz	r4, .L628
 6264              	.LVL930:
 6265              	.L619:
4218:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 6266              		.loc 1 4218 0
 6267 0050 042C     		cmp	r4, #4
 6268 0052 E2D1     		bne	.L618
 6269 0054 0524     		movs	r4, #5
 6270              	.LVL931:
 6271 0056 E0E7     		b	.L618
 6272              	.LVL932:
 6273              	.L623:
4199:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6274              		.loc 1 4199 0
 6275 0058 0524     		movs	r4, #5
 6276 005a F8E7     		b	.L620
 6277              	.LVL933:
 6278              	.L628:
4203:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 6279              		.loc 1 4203 0
 6280 005c 039B     		ldr	r3, [sp, #12]
 6281 005e DB88     		ldrh	r3, [r3, #6]
 6282 0060 AB80     		strh	r3, [r5, #4]	@ movhi
4204:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 6283              		.loc 1 4204 0
 6284 0062 0021     		movs	r1, #0
 6285 0064 2846     		mov	r0, r5
 6286 0066 FFF7FEFF 		bl	dir_sdi
 6287              	.LVL934:
4206:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (obj->sclust) {
 6288              		.loc 1 4206 0
 6289 006a 0446     		mov	r4, r0
 6290 006c 0028     		cmp	r0, #0
 6291 006e EFD1     		bne	.L619
4207:Middlewares/Third_Party/FatFs/src/ff.c **** 						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 6292              		.loc 1 4207 0
 6293 0070 AB68     		ldr	r3, [r5, #8]
 6294 0072 13B9     		cbnz	r3, .L629
ARM GAS  /tmp/ccBYTIZg.s 			page 231


4211:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 6295              		.loc 1 4211 0
 6296 0074 0023     		movs	r3, #0
 6297 0076 2B61     		str	r3, [r5, #16]
 6298 0078 EAE7     		b	.L619
 6299              	.L629:
4208:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 6300              		.loc 1 4208 0
 6301 007a 0021     		movs	r1, #0
 6302 007c 2846     		mov	r0, r5
 6303              	.LVL935:
 6304 007e FFF7FEFF 		bl	inc_lock
 6305              	.LVL936:
 6306 0082 2861     		str	r0, [r5, #16]
4209:Middlewares/Third_Party/FatFs/src/ff.c **** 					} else {
 6307              		.loc 1 4209 0
 6308 0084 0028     		cmp	r0, #0
 6309 0086 E3D1     		bne	.L619
 6310 0088 1224     		movs	r4, #18
 6311 008a E1E7     		b	.L619
 6312              	.LVL937:
 6313              	.L622:
4173:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6314              		.loc 1 4173 0
 6315 008c 0924     		movs	r4, #9
 6316              	.LVL938:
 6317              	.L617:
4223:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6318              		.loc 1 4223 0
 6319 008e 2046     		mov	r0, r4
 6320 0090 05B0     		add	sp, sp, #20
 6321              	.LCFI81:
 6322              		.cfi_def_cfa_offset 12
 6323              		@ sp needed
 6324 0092 30BD     		pop	{r4, r5, pc}
 6325              		.cfi_endproc
 6326              	.LFE186:
 6328              		.section	.text.f_closedir,"ax",%progbits
 6329              		.align	1
 6330              		.global	f_closedir
 6331              		.syntax unified
 6332              		.thumb
 6333              		.thumb_func
 6334              		.fpu fpv5-d16
 6336              	f_closedir:
 6337              	.LFB187:
4235:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6338              		.loc 1 4235 0
 6339              		.cfi_startproc
 6340              		@ args = 0, pretend = 0, frame = 8
 6341              		@ frame_needed = 0, uses_anonymous_args = 0
 6342              	.LVL939:
 6343 0000 10B5     		push	{r4, lr}
 6344              	.LCFI82:
 6345              		.cfi_def_cfa_offset 8
 6346              		.cfi_offset 4, -8
 6347              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBYTIZg.s 			page 232


 6348 0002 82B0     		sub	sp, sp, #8
 6349              	.LCFI83:
 6350              		.cfi_def_cfa_offset 16
 6351 0004 0446     		mov	r4, r0
4240:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6352              		.loc 1 4240 0
 6353 0006 01A9     		add	r1, sp, #4
 6354 0008 FFF7FEFF 		bl	validate
 6355              	.LVL940:
4241:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 6356              		.loc 1 4241 0
 6357 000c 0346     		mov	r3, r0
 6358 000e 20B9     		cbnz	r0, .L631
4243:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dec_lock(dp->obj.lockid);
 6359              		.loc 1 4243 0
 6360 0010 2069     		ldr	r0, [r4, #16]
 6361              	.LVL941:
 6362 0012 28B9     		cbnz	r0, .L634
 6363              	.L632:
 6364              	.LVL942:
4246:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 6365              		.loc 1 4246 0
 6366 0014 0BB9     		cbnz	r3, .L631
4249:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6367              		.loc 1 4249 0
 6368 0016 0022     		movs	r2, #0
 6369 0018 2260     		str	r2, [r4]
 6370              	.LVL943:
 6371              	.L631:
4256:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6372              		.loc 1 4256 0
 6373 001a 1846     		mov	r0, r3
 6374 001c 02B0     		add	sp, sp, #8
 6375              	.LCFI84:
 6376              		.cfi_remember_state
 6377              		.cfi_def_cfa_offset 8
 6378              		@ sp needed
 6379 001e 10BD     		pop	{r4, pc}
 6380              	.LVL944:
 6381              	.L634:
 6382              	.LCFI85:
 6383              		.cfi_restore_state
4244:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6384              		.loc 1 4244 0
 6385 0020 FFF7FEFF 		bl	dec_lock
 6386              	.LVL945:
 6387 0024 0346     		mov	r3, r0
 6388              	.LVL946:
 6389 0026 F5E7     		b	.L632
 6390              		.cfi_endproc
 6391              	.LFE187:
 6393              		.section	.text.f_readdir,"ax",%progbits
 6394              		.align	1
 6395              		.global	f_readdir
 6396              		.syntax unified
 6397              		.thumb
 6398              		.thumb_func
ARM GAS  /tmp/ccBYTIZg.s 			page 233


 6399              		.fpu fpv5-d16
 6401              	f_readdir:
 6402              	.LFB188:
4269:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6403              		.loc 1 4269 0
 6404              		.cfi_startproc
 6405              		@ args = 0, pretend = 0, frame = 8
 6406              		@ frame_needed = 0, uses_anonymous_args = 0
 6407              	.LVL947:
 6408 0000 70B5     		push	{r4, r5, r6, lr}
 6409              	.LCFI86:
 6410              		.cfi_def_cfa_offset 16
 6411              		.cfi_offset 4, -16
 6412              		.cfi_offset 5, -12
 6413              		.cfi_offset 6, -8
 6414              		.cfi_offset 14, -4
 6415 0002 82B0     		sub	sp, sp, #8
 6416              	.LCFI87:
 6417              		.cfi_def_cfa_offset 24
 6418 0004 0546     		mov	r5, r0
 6419 0006 0E46     		mov	r6, r1
4275:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6420              		.loc 1 4275 0
 6421 0008 01A9     		add	r1, sp, #4
 6422              	.LVL948:
 6423 000a FFF7FEFF 		bl	validate
 6424              	.LVL949:
4276:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!fno) {
 6425              		.loc 1 4276 0
 6426 000e 0446     		mov	r4, r0
 6427 0010 40B9     		cbnz	r0, .L636
4277:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 6428              		.loc 1 4277 0
 6429 0012 56B1     		cbz	r6, .L640
4281:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 6430              		.loc 1 4281 0
 6431 0014 0021     		movs	r1, #0
 6432 0016 2846     		mov	r0, r5
 6433              	.LVL950:
 6434 0018 FFF7FEFF 		bl	dir_read
 6435              	.LVL951:
4282:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 6436              		.loc 1 4282 0
 6437 001c 0428     		cmp	r0, #4
 6438 001e 00D0     		beq	.L638
4281:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 6439              		.loc 1 4281 0
 6440 0020 0446     		mov	r4, r0
 6441              	.L638:
 6442              	.LVL952:
4283:Middlewares/Third_Party/FatFs/src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 6443              		.loc 1 4283 0
 6444 0022 44B1     		cbz	r4, .L641
 6445              	.LVL953:
 6446              	.L636:
4292:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6447              		.loc 1 4292 0
ARM GAS  /tmp/ccBYTIZg.s 			page 234


 6448 0024 2046     		mov	r0, r4
 6449 0026 02B0     		add	sp, sp, #8
 6450              	.LCFI88:
 6451              		.cfi_remember_state
 6452              		.cfi_def_cfa_offset 16
 6453              		@ sp needed
 6454 0028 70BD     		pop	{r4, r5, r6, pc}
 6455              	.LVL954:
 6456              	.L640:
 6457              	.LCFI89:
 6458              		.cfi_restore_state
4278:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 6459              		.loc 1 4278 0
 6460 002a 0021     		movs	r1, #0
 6461 002c 2846     		mov	r0, r5
 6462              	.LVL955:
 6463 002e FFF7FEFF 		bl	dir_sdi
 6464              	.LVL956:
 6465 0032 0446     		mov	r4, r0
 6466              	.LVL957:
 6467 0034 F6E7     		b	.L636
 6468              	.L641:
4284:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 6469              		.loc 1 4284 0
 6470 0036 3146     		mov	r1, r6
 6471 0038 2846     		mov	r0, r5
 6472 003a FFF7FEFF 		bl	get_fileinfo
 6473              	.LVL958:
4285:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 6474              		.loc 1 4285 0
 6475 003e 0021     		movs	r1, #0
 6476 0040 2846     		mov	r0, r5
 6477 0042 FFF7FEFF 		bl	dir_next
 6478              	.LVL959:
4286:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6479              		.loc 1 4286 0
 6480 0046 0428     		cmp	r0, #4
 6481 0048 ECD0     		beq	.L636
4285:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 6482              		.loc 1 4285 0
 6483 004a 0446     		mov	r4, r0
 6484 004c EAE7     		b	.L636
 6485              		.cfi_endproc
 6486              	.LFE188:
 6488              		.section	.text.f_stat,"ax",%progbits
 6489              		.align	1
 6490              		.global	f_stat
 6491              		.syntax unified
 6492              		.thumb
 6493              		.thumb_func
 6494              		.fpu fpv5-d16
 6496              	f_stat:
 6497              	.LFB189:
4357:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6498              		.loc 1 4357 0
 6499              		.cfi_startproc
 6500              		@ args = 0, pretend = 0, frame = 56
ARM GAS  /tmp/ccBYTIZg.s 			page 235


 6501              		@ frame_needed = 0, uses_anonymous_args = 0
 6502              	.LVL960:
 6503 0000 30B5     		push	{r4, r5, lr}
 6504              	.LCFI90:
 6505              		.cfi_def_cfa_offset 12
 6506              		.cfi_offset 4, -12
 6507              		.cfi_offset 5, -8
 6508              		.cfi_offset 14, -4
 6509 0002 8FB0     		sub	sp, sp, #60
 6510              	.LCFI91:
 6511              		.cfi_def_cfa_offset 72
 6512 0004 0190     		str	r0, [sp, #4]
 6513 0006 0D46     		mov	r5, r1
4364:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6514              		.loc 1 4364 0
 6515 0008 0022     		movs	r2, #0
 6516 000a 02A9     		add	r1, sp, #8
 6517              	.LVL961:
 6518 000c 01A8     		add	r0, sp, #4
 6519              	.LVL962:
 6520 000e FFF7FEFF 		bl	find_volume
 6521              	.LVL963:
4365:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
 6522              		.loc 1 4365 0
 6523 0012 0446     		mov	r4, r0
 6524 0014 10B1     		cbz	r0, .L646
 6525              	.LVL964:
 6526              	.L643:
4379:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6527              		.loc 1 4379 0
 6528 0016 2046     		mov	r0, r4
 6529 0018 0FB0     		add	sp, sp, #60
 6530              	.LCFI92:
 6531              		.cfi_remember_state
 6532              		.cfi_def_cfa_offset 12
 6533              		@ sp needed
 6534 001a 30BD     		pop	{r4, r5, pc}
 6535              	.LVL965:
 6536              	.L646:
 6537              	.LCFI93:
 6538              		.cfi_restore_state
4367:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 6539              		.loc 1 4367 0
 6540 001c 0199     		ldr	r1, [sp, #4]
 6541 001e 02A8     		add	r0, sp, #8
 6542              	.LVL966:
 6543 0020 FFF7FEFF 		bl	follow_path
 6544              	.LVL967:
4368:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 6545              		.loc 1 4368 0
 6546 0024 0446     		mov	r4, r0
 6547 0026 0028     		cmp	r0, #0
 6548 0028 F5D1     		bne	.L643
4369:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;
 6549              		.loc 1 4369 0
 6550 002a 9DF93730 		ldrsb	r3, [sp, #55]
 6551 002e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccBYTIZg.s 			page 236


 6552 0030 06DB     		blt	.L644
4372:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6553              		.loc 1 4372 0
 6554 0032 002D     		cmp	r5, #0
 6555 0034 EFD0     		beq	.L643
4372:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6556              		.loc 1 4372 0 is_stmt 0 discriminator 1
 6557 0036 2946     		mov	r1, r5
 6558 0038 02A8     		add	r0, sp, #8
 6559              	.LVL968:
 6560 003a FFF7FEFF 		bl	get_fileinfo
 6561              	.LVL969:
 6562 003e EAE7     		b	.L643
 6563              	.LVL970:
 6564              	.L644:
4370:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {							/* Found an object */
 6565              		.loc 1 4370 0 is_stmt 1
 6566 0040 0624     		movs	r4, #6
 6567 0042 E8E7     		b	.L643
 6568              		.cfi_endproc
 6569              	.LFE189:
 6571              		.section	.text.f_getfree,"ax",%progbits
 6572              		.align	1
 6573              		.global	f_getfree
 6574              		.syntax unified
 6575              		.thumb
 6576              		.thumb_func
 6577              		.fpu fpv5-d16
 6579              	f_getfree:
 6580              	.LFB190:
4393:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6581              		.loc 1 4393 0
 6582              		.cfi_startproc
 6583              		@ args = 0, pretend = 0, frame = 32
 6584              		@ frame_needed = 0, uses_anonymous_args = 0
 6585              	.LVL971:
 6586 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 6587              	.LCFI94:
 6588              		.cfi_def_cfa_offset 32
 6589              		.cfi_offset 4, -32
 6590              		.cfi_offset 5, -28
 6591              		.cfi_offset 6, -24
 6592              		.cfi_offset 7, -20
 6593              		.cfi_offset 8, -16
 6594              		.cfi_offset 9, -12
 6595              		.cfi_offset 10, -8
 6596              		.cfi_offset 14, -4
 6597 0004 88B0     		sub	sp, sp, #32
 6598              	.LCFI95:
 6599              		.cfi_def_cfa_offset 64
 6600 0006 0190     		str	r0, [sp, #4]
 6601 0008 8A46     		mov	r10, r1
 6602 000a 1446     		mov	r4, r2
4403:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6603              		.loc 1 4403 0
 6604 000c 0022     		movs	r2, #0
 6605              	.LVL972:
ARM GAS  /tmp/ccBYTIZg.s 			page 237


 6606 000e 07A9     		add	r1, sp, #28
 6607              	.LVL973:
 6608 0010 01A8     		add	r0, sp, #4
 6609              	.LVL974:
 6610 0012 FFF7FEFF 		bl	find_volume
 6611              	.LVL975:
4404:Middlewares/Third_Party/FatFs/src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 6612              		.loc 1 4404 0
 6613 0016 8146     		mov	r9, r0
 6614 0018 0028     		cmp	r0, #0
 6615 001a 5AD1     		bne	.L648
4405:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* If free_clst is valid, return it without full cluster scan */
 6616              		.loc 1 4405 0
 6617 001c 079B     		ldr	r3, [sp, #28]
 6618 001e 2360     		str	r3, [r4]
4407:Middlewares/Third_Party/FatFs/src/ff.c **** 			*nclst = fs->free_clst;
 6619              		.loc 1 4407 0
 6620 0020 1A69     		ldr	r2, [r3, #16]
 6621 0022 5E69     		ldr	r6, [r3, #20]
 6622 0024 B11E     		subs	r1, r6, #2
 6623 0026 8A42     		cmp	r2, r1
 6624 0028 08D9     		bls	.L663
 6625              	.LVL976:
4412:Middlewares/Third_Party/FatFs/src/ff.c **** 				clst = 2; obj.fs = fs;
 6626              		.loc 1 4412 0
 6627 002a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 6628 002c 012A     		cmp	r2, #1
 6629 002e 08D0     		beq	.L664
 6630              	.LVL977:
4440:Middlewares/Third_Party/FatFs/src/ff.c **** 					i = 0; p = 0;
 6631              		.loc 1 4440 0
 6632 0030 D3F82080 		ldr	r8, [r3, #32]
 6633              	.LVL978:
4441:Middlewares/Third_Party/FatFs/src/ff.c **** 					do {
 6634              		.loc 1 4441 0
 6635 0034 0024     		movs	r4, #0
 6636              	.LVL979:
 6637 0036 2546     		mov	r5, r4
4411:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 6638              		.loc 1 4411 0
 6639 0038 2746     		mov	r7, r4
 6640 003a 32E0     		b	.L659
 6641              	.LVL980:
 6642              	.L663:
4408:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 6643              		.loc 1 4408 0
 6644 003c CAF80020 		str	r2, [r10]
 6645 0040 47E0     		b	.L648
 6646              	.LVL981:
 6647              	.L664:
4413:Middlewares/Third_Party/FatFs/src/ff.c **** 				do {
 6648              		.loc 1 4413 0
 6649 0042 0293     		str	r3, [sp, #8]
 6650 0044 0224     		movs	r4, #2
 6651              	.LVL982:
4411:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 6652              		.loc 1 4411 0
ARM GAS  /tmp/ccBYTIZg.s 			page 238


 6653 0046 0027     		movs	r7, #0
 6654 0048 04E0     		b	.L653
 6655              	.LVL983:
 6656              	.L652:
4419:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 6657              		.loc 1 4419 0
 6658 004a 0134     		adds	r4, r4, #1
 6659              	.LVL984:
 6660 004c 079B     		ldr	r3, [sp, #28]
 6661 004e 5B69     		ldr	r3, [r3, #20]
 6662 0050 9C42     		cmp	r4, r3
 6663 0052 36D2     		bcs	.L651
 6664              	.LVL985:
 6665              	.L653:
4415:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 6666              		.loc 1 4415 0
 6667 0054 2146     		mov	r1, r4
 6668 0056 02A8     		add	r0, sp, #8
 6669 0058 FFF7FEFF 		bl	get_fat
 6670              	.LVL986:
4416:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6671              		.loc 1 4416 0
 6672 005c B0F1FF3F 		cmp	r0, #-1
 6673 0060 2DD0     		beq	.L660
4417:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
 6674              		.loc 1 4417 0
 6675 0062 0128     		cmp	r0, #1
 6676 0064 39D0     		beq	.L661
4418:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
 6677              		.loc 1 4418 0
 6678 0066 0028     		cmp	r0, #0
 6679 0068 EFD1     		bne	.L652
4418:Middlewares/Third_Party/FatFs/src/ff.c **** 				} while (++clst < fs->n_fatent);
 6680              		.loc 1 4418 0 is_stmt 0 discriminator 1
 6681 006a 0137     		adds	r7, r7, #1
 6682              	.LVL987:
 6683 006c EDE7     		b	.L652
 6684              	.LVL988:
 6685              	.L665:
4444:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
 6686              		.loc 1 4444 0 is_stmt 1
 6687 006e 08F10105 		add	r5, r8, #1
 6688              	.LVL989:
 6689 0072 4146     		mov	r1, r8
 6690 0074 0798     		ldr	r0, [sp, #28]
 6691 0076 FFF7FEFF 		bl	move_window
 6692              	.LVL990:
4445:Middlewares/Third_Party/FatFs/src/ff.c **** 							p = fs->win;
 6693              		.loc 1 4445 0
 6694 007a 8146     		mov	r9, r0
 6695 007c 08BB     		cbnz	r0, .L651
4446:Middlewares/Third_Party/FatFs/src/ff.c **** 							i = SS(fs);
 6696              		.loc 1 4446 0
 6697 007e 079C     		ldr	r4, [sp, #28]
 6698              	.LVL991:
 6699 0080 3034     		adds	r4, r4, #48
 6700              	.LVL992:
ARM GAS  /tmp/ccBYTIZg.s 			page 239


4444:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res != FR_OK) break;
 6701              		.loc 1 4444 0
 6702 0082 A846     		mov	r8, r5
4447:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 6703              		.loc 1 4447 0
 6704 0084 4FF40075 		mov	r5, #512
 6705              	.LVL993:
 6706 0088 0DE0     		b	.L654
 6707              	.LVL994:
 6708              	.L666:
4450:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
 6709              		.loc 1 4450 0
 6710 008a 2046     		mov	r0, r4
 6711 008c FFF7FEFF 		bl	ld_word
 6712              	.LVL995:
 6713 0090 00B9     		cbnz	r0, .L656
4450:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 2; i -= 2;
 6714              		.loc 1 4450 0 is_stmt 0 discriminator 1
 6715 0092 0137     		adds	r7, r7, #1
 6716              	.LVL996:
 6717              	.L656:
4451:Middlewares/Third_Party/FatFs/src/ff.c **** 						} else {
 6718              		.loc 1 4451 0 is_stmt 1
 6719 0094 0234     		adds	r4, r4, #2
 6720              	.LVL997:
 6721 0096 023D     		subs	r5, r5, #2
 6722              	.LVL998:
 6723 0098 01E0     		b	.L657
 6724              	.L658:
4454:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 6725              		.loc 1 4454 0
 6726 009a 0434     		adds	r4, r4, #4
 6727              	.LVL999:
 6728 009c 043D     		subs	r5, r5, #4
 6729              	.LVL1000:
 6730              	.L657:
4456:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 6731              		.loc 1 4456 0
 6732 009e 013E     		subs	r6, r6, #1
 6733              	.LVL1001:
 6734 00a0 0FD0     		beq	.L651
 6735              	.LVL1002:
 6736              	.L659:
4443:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = move_window(fs, sect++);
 6737              		.loc 1 4443 0
 6738 00a2 002D     		cmp	r5, #0
 6739 00a4 E3D0     		beq	.L665
 6740              	.LVL1003:
 6741              	.L654:
4449:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (ld_word(p) == 0) nfree++;
 6742              		.loc 1 4449 0
 6743 00a6 079B     		ldr	r3, [sp, #28]
 6744 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 6745 00aa 022B     		cmp	r3, #2
 6746 00ac EDD0     		beq	.L666
4453:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
 6747              		.loc 1 4453 0
ARM GAS  /tmp/ccBYTIZg.s 			page 240


 6748 00ae 2046     		mov	r0, r4
 6749 00b0 FFF7FEFF 		bl	ld_dword
 6750              	.LVL1004:
 6751 00b4 30F07043 		bics	r3, r0, #-268435456
 6752 00b8 EFD1     		bne	.L658
4453:Middlewares/Third_Party/FatFs/src/ff.c **** 							p += 4; i -= 4;
 6753              		.loc 1 4453 0 is_stmt 0 discriminator 1
 6754 00ba 0137     		adds	r7, r7, #1
 6755              	.LVL1005:
 6756 00bc EDE7     		b	.L658
 6757              	.LVL1006:
 6758              	.L660:
4416:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6759              		.loc 1 4416 0 is_stmt 1
 6760 00be 4FF00109 		mov	r9, #1
 6761              	.LVL1007:
 6762              	.L651:
4459:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 6763              		.loc 1 4459 0
 6764 00c2 CAF80070 		str	r7, [r10]
4460:Middlewares/Third_Party/FatFs/src/ff.c **** 			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 6765              		.loc 1 4460 0
 6766 00c6 079B     		ldr	r3, [sp, #28]
 6767 00c8 1F61     		str	r7, [r3, #16]
4461:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 6768              		.loc 1 4461 0
 6769 00ca 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 6770 00cc 42F00102 		orr	r2, r2, #1
 6771 00d0 1A71     		strb	r2, [r3, #4]
 6772              	.LVL1008:
 6773              	.L648:
4466:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6774              		.loc 1 4466 0
 6775 00d2 4846     		mov	r0, r9
 6776 00d4 08B0     		add	sp, sp, #32
 6777              	.LCFI96:
 6778              		.cfi_remember_state
 6779              		.cfi_def_cfa_offset 32
 6780              		@ sp needed
 6781 00d6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 6782              	.LVL1009:
 6783              	.L661:
 6784              	.LCFI97:
 6785              		.cfi_restore_state
4417:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (stat == 0) nfree++;
 6786              		.loc 1 4417 0
 6787 00da 4FF00209 		mov	r9, #2
 6788 00de F0E7     		b	.L651
 6789              		.cfi_endproc
 6790              	.LFE190:
 6792              		.section	.text.f_truncate,"ax",%progbits
 6793              		.align	1
 6794              		.global	f_truncate
 6795              		.syntax unified
 6796              		.thumb
 6797              		.thumb_func
 6798              		.fpu fpv5-d16
ARM GAS  /tmp/ccBYTIZg.s 			page 241


 6800              	f_truncate:
 6801              	.LFB191:
4478:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6802              		.loc 1 4478 0
 6803              		.cfi_startproc
 6804              		@ args = 0, pretend = 0, frame = 8
 6805              		@ frame_needed = 0, uses_anonymous_args = 0
 6806              	.LVL1010:
 6807 0000 30B5     		push	{r4, r5, lr}
 6808              	.LCFI98:
 6809              		.cfi_def_cfa_offset 12
 6810              		.cfi_offset 4, -12
 6811              		.cfi_offset 5, -8
 6812              		.cfi_offset 14, -4
 6813 0002 83B0     		sub	sp, sp, #12
 6814              	.LCFI99:
 6815              		.cfi_def_cfa_offset 24
 6816 0004 0546     		mov	r5, r0
4484:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 6817              		.loc 1 4484 0
 6818 0006 01A9     		add	r1, sp, #4
 6819 0008 FFF7FEFF 		bl	validate
 6820              	.LVL1011:
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6821              		.loc 1 4485 0
 6822 000c 0446     		mov	r4, r0
 6823 000e 30B9     		cbnz	r0, .L668
4485:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6824              		.loc 1 4485 0 is_stmt 0 discriminator 2
 6825 0010 6C7D     		ldrb	r4, [r5, #21]	@ zero_extendqisi2
 6826              	.LVL1012:
 6827 0012 24B9     		cbnz	r4, .L668
4486:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6828              		.loc 1 4486 0 is_stmt 1
 6829 0014 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 6830 0016 13F0020F 		tst	r3, #2
 6831 001a 03D1     		bne	.L679
 6832 001c 0724     		movs	r4, #7
 6833              	.LVL1013:
 6834              	.L668:
4516:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6835              		.loc 1 4516 0
 6836 001e 2046     		mov	r0, r4
 6837 0020 03B0     		add	sp, sp, #12
 6838              	.LCFI100:
 6839              		.cfi_remember_state
 6840              		.cfi_def_cfa_offset 12
 6841              		@ sp needed
 6842 0022 30BD     		pop	{r4, r5, pc}
 6843              	.LVL1014:
 6844              	.L679:
 6845              	.LCFI101:
 6846              		.cfi_restore_state
4488:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 6847              		.loc 1 4488 0
 6848 0024 AB69     		ldr	r3, [r5, #24]
 6849 0026 EA68     		ldr	r2, [r5, #12]
ARM GAS  /tmp/ccBYTIZg.s 			page 242


 6850 0028 9342     		cmp	r3, r2
 6851 002a F8D2     		bcs	.L668
4489:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 6852              		.loc 1 4489 0
 6853 002c ABB9     		cbnz	r3, .L669
4490:Middlewares/Third_Party/FatFs/src/ff.c **** 			fp->obj.sclust = 0;
 6854              		.loc 1 4490 0
 6855 002e 0022     		movs	r2, #0
 6856 0030 A968     		ldr	r1, [r5, #8]
 6857 0032 2846     		mov	r0, r5
 6858 0034 FFF7FEFF 		bl	remove_chain
 6859              	.LVL1015:
 6860 0038 0446     		mov	r4, r0
 6861              	.LVL1016:
4491:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
 6862              		.loc 1 4491 0
 6863 003a 0023     		movs	r3, #0
 6864 003c AB60     		str	r3, [r5, #8]
 6865              	.L670:
4501:Middlewares/Third_Party/FatFs/src/ff.c **** 		fp->flag |= FA_MODIFIED;
 6866              		.loc 1 4501 0
 6867 003e AB69     		ldr	r3, [r5, #24]
 6868 0040 EB60     		str	r3, [r5, #12]
4502:Middlewares/Third_Party/FatFs/src/ff.c **** #if !_FS_TINY
 6869              		.loc 1 4502 0
 6870 0042 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 6871 0044 43F04003 		orr	r3, r3, #64
 6872 0048 2B75     		strb	r3, [r5, #20]
4504:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 6873              		.loc 1 4504 0
 6874 004a 14B9     		cbnz	r4, .L673
4504:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
 6875              		.loc 1 4504 0 is_stmt 0 discriminator 1
 6876 004c 13F0800F 		tst	r3, #128
 6877 0050 1DD1     		bne	.L680
 6878              	.LVL1017:
 6879              	.L673:
4512:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 6880              		.loc 1 4512 0 is_stmt 1
 6881 0052 002C     		cmp	r4, #0
 6882 0054 E3D0     		beq	.L668
4512:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 6883              		.loc 1 4512 0 is_stmt 0 discriminator 1
 6884 0056 6C75     		strb	r4, [r5, #21]
 6885 0058 E1E7     		b	.L668
 6886              	.L669:
4493:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
 6887              		.loc 1 4493 0 is_stmt 1
 6888 005a E969     		ldr	r1, [r5, #28]
 6889 005c 2846     		mov	r0, r5
 6890 005e FFF7FEFF 		bl	get_fat
 6891              	.LVL1018:
4495:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 6892              		.loc 1 4495 0
 6893 0062 B0F1FF3F 		cmp	r0, #-1
 6894 0066 0ED0     		beq	.L681
 6895              	.L671:
ARM GAS  /tmp/ccBYTIZg.s 			page 243


 6896              	.LVL1019:
4496:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 6897              		.loc 1 4496 0
 6898 0068 0128     		cmp	r0, #1
 6899 006a 0ED0     		beq	.L682
 6900              	.LVL1020:
 6901              	.L672:
4497:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 6902              		.loc 1 4497 0
 6903 006c 002C     		cmp	r4, #0
 6904 006e E6D1     		bne	.L670
4497:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 6905              		.loc 1 4497 0 is_stmt 0 discriminator 1
 6906 0070 019B     		ldr	r3, [sp, #4]
 6907 0072 5B69     		ldr	r3, [r3, #20]
 6908 0074 9842     		cmp	r0, r3
 6909 0076 E2D2     		bcs	.L670
4498:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6910              		.loc 1 4498 0 is_stmt 1
 6911 0078 EA69     		ldr	r2, [r5, #28]
 6912 007a 0146     		mov	r1, r0
 6913 007c 2846     		mov	r0, r5
 6914              	.LVL1021:
 6915 007e FFF7FEFF 		bl	remove_chain
 6916              	.LVL1022:
 6917 0082 0446     		mov	r4, r0
 6918              	.LVL1023:
 6919 0084 DBE7     		b	.L670
 6920              	.LVL1024:
 6921              	.L681:
4495:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 6922              		.loc 1 4495 0
 6923 0086 0124     		movs	r4, #1
 6924 0088 EEE7     		b	.L671
 6925              	.LVL1025:
 6926              	.L682:
4496:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 6927              		.loc 1 4496 0
 6928 008a 0224     		movs	r4, #2
 6929              	.LVL1026:
 6930 008c EEE7     		b	.L672
 6931              	.LVL1027:
 6932              	.L680:
4505:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_DISK_ERR;
 6933              		.loc 1 4505 0
 6934 008e 0123     		movs	r3, #1
 6935 0090 2A6A     		ldr	r2, [r5, #32]
 6936 0092 05F13001 		add	r1, r5, #48
 6937 0096 0198     		ldr	r0, [sp, #4]
 6938 0098 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 6939 009a FFF7FEFF 		bl	disk_write
 6940              	.LVL1028:
 6941 009e 20B9     		cbnz	r0, .L677
4508:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 6942              		.loc 1 4508 0
 6943 00a0 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 6944 00a2 03F07F03 		and	r3, r3, #127
ARM GAS  /tmp/ccBYTIZg.s 			page 244


 6945 00a6 2B75     		strb	r3, [r5, #20]
 6946 00a8 D3E7     		b	.L673
 6947              	.L677:
4506:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 6948              		.loc 1 4506 0
 6949 00aa 0124     		movs	r4, #1
 6950              	.LVL1029:
 6951 00ac D1E7     		b	.L673
 6952              		.cfi_endproc
 6953              	.LFE191:
 6955              		.section	.text.f_unlink,"ax",%progbits
 6956              		.align	1
 6957              		.global	f_unlink
 6958              		.syntax unified
 6959              		.thumb
 6960              		.thumb_func
 6961              		.fpu fpv5-d16
 6963              	f_unlink:
 6964              	.LFB192:
4528:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 6965              		.loc 1 4528 0
 6966              		.cfi_startproc
 6967              		@ args = 0, pretend = 0, frame = 112
 6968              		@ frame_needed = 0, uses_anonymous_args = 0
 6969              	.LVL1030:
 6970 0000 70B5     		push	{r4, r5, r6, lr}
 6971              	.LCFI102:
 6972              		.cfi_def_cfa_offset 16
 6973              		.cfi_offset 4, -16
 6974              		.cfi_offset 5, -12
 6975              		.cfi_offset 6, -8
 6976              		.cfi_offset 14, -4
 6977 0002 9CB0     		sub	sp, sp, #112
 6978              	.LCFI103:
 6979              		.cfi_def_cfa_offset 128
 6980 0004 0190     		str	r0, [sp, #4]
 6981              	.LVL1031:
4540:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
 6982              		.loc 1 4540 0
 6983 0006 0222     		movs	r2, #2
 6984 0008 03A9     		add	r1, sp, #12
 6985 000a 01A8     		add	r0, sp, #4
 6986              	.LVL1032:
 6987 000c FFF7FEFF 		bl	find_volume
 6988              	.LVL1033:
4541:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 6989              		.loc 1 4541 0
 6990 0010 039B     		ldr	r3, [sp, #12]
 6991 0012 1093     		str	r3, [sp, #64]
4542:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 6992              		.loc 1 4542 0
 6993 0014 0446     		mov	r4, r0
 6994 0016 10B1     		cbz	r0, .L695
 6995              	.LVL1034:
 6996              	.L684:
4611:Middlewares/Third_Party/FatFs/src/ff.c **** 
 6997              		.loc 1 4611 0
ARM GAS  /tmp/ccBYTIZg.s 			page 245


 6998 0018 2046     		mov	r0, r4
 6999 001a 1CB0     		add	sp, sp, #112
 7000              	.LCFI104:
 7001              		.cfi_remember_state
 7002              		.cfi_def_cfa_offset 16
 7003              		@ sp needed
 7004 001c 70BD     		pop	{r4, r5, r6, pc}
 7005              	.LVL1035:
 7006              	.L695:
 7007              	.LCFI105:
 7008              		.cfi_restore_state
4544:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 7009              		.loc 1 4544 0
 7010 001e 0199     		ldr	r1, [sp, #4]
 7011 0020 10A8     		add	r0, sp, #64
 7012              	.LVL1036:
 7013 0022 FFF7FEFF 		bl	follow_path
 7014              	.LVL1037:
4549:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7015              		.loc 1 4549 0
 7016 0026 0446     		mov	r4, r0
 7017 0028 20B9     		cbnz	r0, .L685
4549:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7018              		.loc 1 4549 0 is_stmt 0 discriminator 1
 7019 002a 0221     		movs	r1, #2
 7020 002c 10A8     		add	r0, sp, #64
 7021              	.LVL1038:
 7022 002e FFF7FEFF 		bl	chk_lock
 7023              	.LVL1039:
 7024 0032 0446     		mov	r4, r0
 7025              	.LVL1040:
 7026              	.L685:
4551:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 7027              		.loc 1 4551 0 is_stmt 1
 7028 0034 002C     		cmp	r4, #0
 7029 0036 EFD1     		bne	.L684
4552:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 7030              		.loc 1 4552 0
 7031 0038 9DF96F30 		ldrsb	r3, [sp, #111]
 7032 003c 002B     		cmp	r3, #0
 7033 003e 23DB     		blt	.L690
4555:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 7034              		.loc 1 4555 0
 7035 0040 9DF84630 		ldrb	r3, [sp, #70]	@ zero_extendqisi2
 7036 0044 13F0010F 		tst	r3, #1
 7037 0048 20D1     		bne	.L691
 7038              	.LVL1041:
 7039              	.L686:
4559:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7040              		.loc 1 4559 0
 7041 004a 0CBB     		cbnz	r4, .L692
4569:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7042              		.loc 1 4569 0
 7043 004c 039E     		ldr	r6, [sp, #12]
 7044 004e 1899     		ldr	r1, [sp, #96]
 7045 0050 3046     		mov	r0, r6
 7046 0052 FFF7FEFF 		bl	ld_clust
ARM GAS  /tmp/ccBYTIZg.s 			page 246


 7047              	.LVL1042:
 7048 0056 0546     		mov	r5, r0
 7049              	.LVL1043:
4571:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_RPATH != 0
 7050              		.loc 1 4571 0
 7051 0058 9DF84630 		ldrb	r3, [sp, #70]	@ zero_extendqisi2
 7052 005c 13F0100F 		tst	r3, #16
 7053 0060 17D0     		beq	.L687
4578:Middlewares/Third_Party/FatFs/src/ff.c **** 						sdj.obj.sclust = dclst;
 7054              		.loc 1 4578 0
 7055 0062 0496     		str	r6, [sp, #16]
4579:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7056              		.loc 1 4579 0
 7057 0064 0690     		str	r0, [sp, #24]
4586:Middlewares/Third_Party/FatFs/src/ff.c **** 						if (res == FR_OK) {
 7058              		.loc 1 4586 0
 7059 0066 0021     		movs	r1, #0
 7060 0068 04A8     		add	r0, sp, #16
 7061              	.LVL1044:
 7062 006a FFF7FEFF 		bl	dir_sdi
 7063              	.LVL1045:
4587:Middlewares/Third_Party/FatFs/src/ff.c **** 							res = dir_read(&sdj, 0);			/* Read an item */
 7064              		.loc 1 4587 0
 7065 006e 0446     		mov	r4, r0
 7066 0070 78B9     		cbnz	r0, .L687
4588:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 7067              		.loc 1 4588 0
 7068 0072 0021     		movs	r1, #0
 7069 0074 04A8     		add	r0, sp, #16
 7070              	.LVL1046:
 7071 0076 FFF7FEFF 		bl	dir_read
 7072              	.LVL1047:
4589:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 7073              		.loc 1 4589 0
 7074 007a 0346     		mov	r3, r0
 7075 007c 00B9     		cbnz	r0, .L688
 7076 007e 0723     		movs	r3, #7
 7077              	.L688:
 7078              	.LVL1048:
4590:Middlewares/Third_Party/FatFs/src/ff.c **** 						}
 7079              		.loc 1 4590 0
 7080 0080 042B     		cmp	r3, #4
 7081 0082 06D0     		beq	.L687
 7082 0084 1C46     		mov	r4, r3
 7083 0086 04E0     		b	.L687
 7084              	.LVL1049:
 7085              	.L690:
4553:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 7086              		.loc 1 4553 0
 7087 0088 0624     		movs	r4, #6
 7088              	.LVL1050:
 7089 008a DEE7     		b	.L686
 7090              	.LVL1051:
 7091              	.L691:
4556:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7092              		.loc 1 4556 0
 7093 008c 0724     		movs	r4, #7
ARM GAS  /tmp/ccBYTIZg.s 			page 247


 7094              	.LVL1052:
 7095 008e DCE7     		b	.L686
 7096              	.LVL1053:
 7097              	.L692:
4531:Middlewares/Third_Party/FatFs/src/ff.c **** 	FATFS *fs;
 7098              		.loc 1 4531 0
 7099 0090 0025     		movs	r5, #0
 7100              	.LVL1054:
 7101              	.L687:
4595:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 7102              		.loc 1 4595 0
 7103 0092 002C     		cmp	r4, #0
 7104 0094 C0D1     		bne	.L684
4596:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 7105              		.loc 1 4596 0
 7106 0096 10A8     		add	r0, sp, #64
 7107 0098 FFF7FEFF 		bl	dir_remove
 7108              	.LVL1055:
4597:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7109              		.loc 1 4597 0
 7110 009c 0446     		mov	r4, r0
 7111 009e B0FA80F0 		clz	r0, r0
 7112              	.LVL1056:
 7113 00a2 4009     		lsrs	r0, r0, #5
 7114 00a4 002D     		cmp	r5, #0
 7115 00a6 08BF     		it	eq
 7116 00a8 0020     		moveq	r0, #0
 7117 00aa 30B9     		cbnz	r0, .L696
 7118              	.L689:
 7119              	.LVL1057:
4604:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7120              		.loc 1 4604 0
 7121 00ac 002C     		cmp	r4, #0
 7122 00ae B3D1     		bne	.L684
4604:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7123              		.loc 1 4604 0 is_stmt 0 discriminator 1
 7124 00b0 0398     		ldr	r0, [sp, #12]
 7125 00b2 FFF7FEFF 		bl	sync_fs
 7126              	.LVL1058:
 7127 00b6 0446     		mov	r4, r0
 7128              	.LVL1059:
 7129 00b8 AEE7     		b	.L684
 7130              	.LVL1060:
 7131              	.L696:
4601:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 7132              		.loc 1 4601 0 is_stmt 1
 7133 00ba 0022     		movs	r2, #0
 7134 00bc 2946     		mov	r1, r5
 7135 00be 10A8     		add	r0, sp, #64
 7136 00c0 FFF7FEFF 		bl	remove_chain
 7137              	.LVL1061:
 7138 00c4 0446     		mov	r4, r0
 7139              	.LVL1062:
 7140 00c6 F1E7     		b	.L689
 7141              		.cfi_endproc
 7142              	.LFE192:
 7144              		.section	.text.f_mkdir,"ax",%progbits
ARM GAS  /tmp/ccBYTIZg.s 			page 248


 7145              		.align	1
 7146              		.global	f_mkdir
 7147              		.syntax unified
 7148              		.thumb
 7149              		.thumb_func
 7150              		.fpu fpv5-d16
 7152              	f_mkdir:
 7153              	.LFB193:
4623:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7154              		.loc 1 4623 0
 7155              		.cfi_startproc
 7156              		@ args = 0, pretend = 0, frame = 64
 7157              		@ frame_needed = 0, uses_anonymous_args = 0
 7158              	.LVL1063:
 7159 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7160              	.LCFI106:
 7161              		.cfi_def_cfa_offset 36
 7162              		.cfi_offset 4, -36
 7163              		.cfi_offset 5, -32
 7164              		.cfi_offset 6, -28
 7165              		.cfi_offset 7, -24
 7166              		.cfi_offset 8, -20
 7167              		.cfi_offset 9, -16
 7168              		.cfi_offset 10, -12
 7169              		.cfi_offset 11, -8
 7170              		.cfi_offset 14, -4
 7171 0004 91B0     		sub	sp, sp, #68
 7172              	.LCFI107:
 7173              		.cfi_def_cfa_offset 104
 7174 0006 0190     		str	r0, [sp, #4]
4634:Middlewares/Third_Party/FatFs/src/ff.c **** 	dj.obj.fs = fs;
 7175              		.loc 1 4634 0
 7176 0008 0222     		movs	r2, #2
 7177 000a 03A9     		add	r1, sp, #12
 7178 000c 01A8     		add	r0, sp, #4
 7179              	.LVL1064:
 7180 000e FFF7FEFF 		bl	find_volume
 7181              	.LVL1065:
4635:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 7182              		.loc 1 4635 0
 7183 0012 039B     		ldr	r3, [sp, #12]
 7184 0014 0493     		str	r3, [sp, #16]
4636:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 7185              		.loc 1 4636 0
 7186 0016 0446     		mov	r4, r0
 7187 0018 18B1     		cbz	r0, .L717
 7188              	.LVL1066:
 7189              	.L698:
4708:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7190              		.loc 1 4708 0
 7191 001a 2046     		mov	r0, r4
 7192 001c 11B0     		add	sp, sp, #68
 7193              	.LCFI108:
 7194              		.cfi_remember_state
 7195              		.cfi_def_cfa_offset 36
 7196              		@ sp needed
 7197 001e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccBYTIZg.s 			page 249


 7198              	.LVL1067:
 7199              	.L717:
 7200              	.LCFI109:
 7201              		.cfi_restore_state
4638:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 7202              		.loc 1 4638 0
 7203 0022 0199     		ldr	r1, [sp, #4]
 7204 0024 04A8     		add	r0, sp, #16
 7205              	.LVL1068:
 7206 0026 FFF7FEFF 		bl	follow_path
 7207              	.LVL1069:
4639:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 7208              		.loc 1 4639 0
 7209 002a 0346     		mov	r3, r0
 7210 002c 00B9     		cbnz	r0, .L699
 7211 002e 0823     		movs	r3, #8
 7212              	.L699:
 7213              	.LVL1070:
4643:Middlewares/Third_Party/FatFs/src/ff.c **** 			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 7214              		.loc 1 4643 0
 7215 0030 042B     		cmp	r3, #4
 7216 0032 01D0     		beq	.L718
 7217 0034 1C46     		mov	r4, r3
 7218 0036 F0E7     		b	.L698
 7219              	.L718:
4644:Middlewares/Third_Party/FatFs/src/ff.c **** 			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 7220              		.loc 1 4644 0
 7221 0038 0021     		movs	r1, #0
 7222 003a 04A8     		add	r0, sp, #16
 7223 003c FFF7FEFF 		bl	create_chain
 7224              	.LVL1071:
4645:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = FR_OK;
 7225              		.loc 1 4645 0
 7226 0040 039A     		ldr	r2, [sp, #12]
 7227 0042 5389     		ldrh	r3, [r2, #10]
 7228 0044 5B02     		lsls	r3, r3, #9
 7229 0046 0793     		str	r3, [sp, #28]
 7230              	.LVL1072:
4647:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 7231              		.loc 1 4647 0
 7232 0048 8046     		mov	r8, r0
 7233 004a 00B9     		cbnz	r0, .L700
 7234 004c 0724     		movs	r4, #7
 7235              	.L700:
 7236              	.LVL1073:
4648:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7237              		.loc 1 4648 0
 7238 004e B8F1010F 		cmp	r8, #1
 7239 0052 11D0     		beq	.L719
 7240              	.LVL1074:
 7241              	.L701:
4649:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 7242              		.loc 1 4649 0
 7243 0054 B8F1FF3F 		cmp	r8, #-1
 7244 0058 10D0     		beq	.L720
 7245              	.LVL1075:
 7246              	.L702:
ARM GAS  /tmp/ccBYTIZg.s 			page 250


4650:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
 7247              		.loc 1 4650 0
 7248 005a 8CB1     		cbz	r4, .L721
 7249              	.LVL1076:
 7250              	.L703:
4651:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 7251              		.loc 1 4651 0
 7252 005c FFF7FEFF 		bl	get_fattime
 7253              	.LVL1077:
 7254 0060 8246     		mov	r10, r0
 7255              	.LVL1078:
4652:Middlewares/Third_Party/FatFs/src/ff.c **** 				dsc = clust2sect(fs, dcl);
 7256              		.loc 1 4652 0
 7257 0062 94B1     		cbz	r4, .L722
 7258              	.LVL1079:
 7259              	.L704:
4675:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_register(&dj);	/* Register the object to the directoy */
 7260              		.loc 1 4675 0
 7261 0064 002C     		cmp	r4, #0
 7262 0066 62D0     		beq	.L723
 7263              	.L708:
4678:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7264              		.loc 1 4678 0
 7265 0068 002C     		cmp	r4, #0
 7266 006a 65D0     		beq	.L724
4701:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7267              		.loc 1 4701 0
 7268 006c 0022     		movs	r2, #0
 7269 006e 4146     		mov	r1, r8
 7270 0070 04A8     		add	r0, sp, #16
 7271 0072 FFF7FEFF 		bl	remove_chain
 7272              	.LVL1080:
 7273 0076 D0E7     		b	.L698
 7274              	.LVL1081:
 7275              	.L719:
4648:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7276              		.loc 1 4648 0
 7277 0078 0224     		movs	r4, #2
 7278              	.LVL1082:
 7279 007a EBE7     		b	.L701
 7280              	.LVL1083:
 7281              	.L720:
4649:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 7282              		.loc 1 4649 0
 7283 007c 0124     		movs	r4, #1
 7284              	.LVL1084:
 7285 007e ECE7     		b	.L702
 7286              	.LVL1085:
 7287              	.L721:
4650:Middlewares/Third_Party/FatFs/src/ff.c **** 			tm = GET_FATTIME();
 7288              		.loc 1 4650 0 discriminator 1
 7289 0080 1046     		mov	r0, r2
 7290              	.LVL1086:
 7291 0082 FFF7FEFF 		bl	sync_window
 7292              	.LVL1087:
 7293 0086 0446     		mov	r4, r0
 7294              	.LVL1088:
ARM GAS  /tmp/ccBYTIZg.s 			page 251


 7295 0088 E8E7     		b	.L703
 7296              	.LVL1089:
 7297              	.L722:
4653:Middlewares/Third_Party/FatFs/src/ff.c **** 				dir = fs->win;
 7298              		.loc 1 4653 0
 7299 008a 039D     		ldr	r5, [sp, #12]
 7300 008c 4146     		mov	r1, r8
 7301 008e 2846     		mov	r0, r5
 7302              	.LVL1090:
 7303 0090 FFF7FEFF 		bl	clust2sect
 7304              	.LVL1091:
 7305 0094 0646     		mov	r6, r0
 7306              	.LVL1092:
4654:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(dir, 0, SS(fs));
 7307              		.loc 1 4654 0
 7308 0096 05F13009 		add	r9, r5, #48
 7309              	.LVL1093:
4655:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 7310              		.loc 1 4655 0
 7311 009a 4FF40072 		mov	r2, #512
 7312 009e 0021     		movs	r1, #0
 7313 00a0 4846     		mov	r0, r9
 7314              	.LVL1094:
 7315 00a2 FFF7FEFF 		bl	mem_set
 7316              	.LVL1095:
4657:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Name] = '.';
 7317              		.loc 1 4657 0
 7318 00a6 0B22     		movs	r2, #11
 7319 00a8 2021     		movs	r1, #32
 7320 00aa 4846     		mov	r0, r9
 7321 00ac FFF7FEFF 		bl	mem_set
 7322              	.LVL1096:
4658:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;
 7323              		.loc 1 4658 0
 7324 00b0 4FF02E0B 		mov	fp, #46
 7325 00b4 85F830B0 		strb	fp, [r5, #48]
4659:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);
 7326              		.loc 1 4659 0
 7327 00b8 1023     		movs	r3, #16
 7328 00ba 85F83B30 		strb	r3, [r5, #59]
4660:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);
 7329              		.loc 1 4660 0
 7330 00be 5146     		mov	r1, r10
 7331 00c0 05F14600 		add	r0, r5, #70
 7332 00c4 FFF7FEFF 		bl	st_dword
 7333              	.LVL1097:
4661:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 7334              		.loc 1 4661 0
 7335 00c8 4246     		mov	r2, r8
 7336 00ca 4946     		mov	r1, r9
 7337 00cc 0398     		ldr	r0, [sp, #12]
 7338 00ce FFF7FEFF 		bl	st_clust
 7339              	.LVL1098:
4662:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 7340              		.loc 1 4662 0
 7341 00d2 05F15007 		add	r7, r5, #80
 7342 00d6 2022     		movs	r2, #32
ARM GAS  /tmp/ccBYTIZg.s 			page 252


 7343 00d8 4946     		mov	r1, r9
 7344 00da 3846     		mov	r0, r7
 7345 00dc FFF7FEFF 		bl	mem_cpy
 7346              	.LVL1099:
4663:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 7347              		.loc 1 4663 0
 7348 00e0 85F851B0 		strb	fp, [r5, #81]
 7349 00e4 069A     		ldr	r2, [sp, #24]
 7350              	.LVL1100:
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 7351              		.loc 1 4664 0
 7352 00e6 0398     		ldr	r0, [sp, #12]
 7353 00e8 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 7354 00ea 032B     		cmp	r3, #3
 7355 00ec 1AD0     		beq	.L725
 7356              	.LVL1101:
 7357              	.L705:
4665:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7358              		.loc 1 4665 0
 7359 00ee 3946     		mov	r1, r7
 7360 00f0 FFF7FEFF 		bl	st_clust
 7361              	.LVL1102:
4667:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 7362              		.loc 1 4667 0
 7363 00f4 039B     		ldr	r3, [sp, #12]
 7364 00f6 5D89     		ldrh	r5, [r3, #10]
 7365              	.LVL1103:
 7366              	.L706:
4667:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 7367              		.loc 1 4667 0 is_stmt 0 discriminator 1
 7368 00f8 002D     		cmp	r5, #0
 7369 00fa B3D0     		beq	.L704
4668:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 7370              		.loc 1 4668 0 is_stmt 1
 7371 00fc 039B     		ldr	r3, [sp, #12]
 7372 00fe 771C     		adds	r7, r6, #1
 7373              	.LVL1104:
 7374 0100 DE62     		str	r6, [r3, #44]
4669:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_window(fs);
 7375              		.loc 1 4669 0
 7376 0102 0122     		movs	r2, #1
 7377 0104 DA70     		strb	r2, [r3, #3]
4670:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res != FR_OK) break;
 7378              		.loc 1 4670 0
 7379 0106 0398     		ldr	r0, [sp, #12]
 7380 0108 FFF7FEFF 		bl	sync_window
 7381              	.LVL1105:
4671:Middlewares/Third_Party/FatFs/src/ff.c **** 					mem_set(dir, 0, SS(fs));
 7382              		.loc 1 4671 0
 7383 010c 0446     		mov	r4, r0
 7384 010e 0028     		cmp	r0, #0
 7385 0110 A8D1     		bne	.L704
4672:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7386              		.loc 1 4672 0 discriminator 2
 7387 0112 4FF40072 		mov	r2, #512
 7388 0116 0021     		movs	r1, #0
 7389 0118 4846     		mov	r0, r9
ARM GAS  /tmp/ccBYTIZg.s 			page 253


 7390              	.LVL1106:
 7391 011a FFF7FEFF 		bl	mem_set
 7392              	.LVL1107:
4667:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->winsect = dsc++;
 7393              		.loc 1 4667 0 discriminator 2
 7394 011e 013D     		subs	r5, r5, #1
 7395              	.LVL1108:
4668:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 7396              		.loc 1 4668 0 discriminator 2
 7397 0120 3E46     		mov	r6, r7
 7398 0122 E9E7     		b	.L706
 7399              	.LVL1109:
 7400              	.L725:
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 7401              		.loc 1 4664 0 discriminator 1
 7402 0124 436A     		ldr	r3, [r0, #36]
 7403 0126 9A42     		cmp	r2, r3
 7404 0128 E1D1     		bne	.L705
4664:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir + SZDIRE, pcl);
 7405              		.loc 1 4664 0 is_stmt 0
 7406 012a 0022     		movs	r2, #0
 7407              	.LVL1110:
 7408 012c DFE7     		b	.L705
 7409              	.LVL1111:
 7410              	.L723:
4676:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 7411              		.loc 1 4676 0 is_stmt 1
 7412 012e 04A8     		add	r0, sp, #16
 7413 0130 FFF7FEFF 		bl	dir_register
 7414              	.LVL1112:
 7415 0134 0446     		mov	r4, r0
 7416              	.LVL1113:
 7417 0136 97E7     		b	.L708
 7418              	.L724:
4691:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 7419              		.loc 1 4691 0
 7420 0138 0C9C     		ldr	r4, [sp, #48]
 7421              	.LVL1114:
4692:Middlewares/Third_Party/FatFs/src/ff.c **** 					st_clust(fs, dir, dcl);				/* Table start cluster */
 7422              		.loc 1 4692 0
 7423 013a 5146     		mov	r1, r10
 7424 013c 04F11600 		add	r0, r4, #22
 7425 0140 FFF7FEFF 		bl	st_dword
 7426              	.LVL1115:
4693:Middlewares/Third_Party/FatFs/src/ff.c **** 					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 7427              		.loc 1 4693 0
 7428 0144 4246     		mov	r2, r8
 7429 0146 2146     		mov	r1, r4
 7430 0148 0398     		ldr	r0, [sp, #12]
 7431 014a FFF7FEFF 		bl	st_clust
 7432              	.LVL1116:
4694:Middlewares/Third_Party/FatFs/src/ff.c **** 					fs->wflag = 1;
 7433              		.loc 1 4694 0
 7434 014e 1023     		movs	r3, #16
 7435 0150 E372     		strb	r3, [r4, #11]
4695:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7436              		.loc 1 4695 0
ARM GAS  /tmp/ccBYTIZg.s 			page 254


 7437 0152 0122     		movs	r2, #1
 7438 0154 039B     		ldr	r3, [sp, #12]
 7439 0156 DA70     		strb	r2, [r3, #3]
4698:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7440              		.loc 1 4698 0
 7441 0158 0398     		ldr	r0, [sp, #12]
 7442 015a FFF7FEFF 		bl	sync_fs
 7443              	.LVL1117:
 7444 015e 0446     		mov	r4, r0
 7445              	.LVL1118:
 7446 0160 5BE7     		b	.L698
 7447              		.cfi_endproc
 7448              	.LFE193:
 7450              		.section	.text.f_rename,"ax",%progbits
 7451              		.align	1
 7452              		.global	f_rename
 7453              		.syntax unified
 7454              		.thumb
 7455              		.thumb_func
 7456              		.fpu fpv5-d16
 7458              	f_rename:
 7459              	.LFB194:
4721:Middlewares/Third_Party/FatFs/src/ff.c **** 	FRESULT res;
 7460              		.loc 1 4721 0
 7461              		.cfi_startproc
 7462              		@ args = 0, pretend = 0, frame = 136
 7463              		@ frame_needed = 0, uses_anonymous_args = 0
 7464              	.LVL1119:
 7465 0000 30B5     		push	{r4, r5, lr}
 7466              	.LCFI110:
 7467              		.cfi_def_cfa_offset 12
 7468              		.cfi_offset 4, -12
 7469              		.cfi_offset 5, -8
 7470              		.cfi_offset 14, -4
 7471 0002 A3B0     		sub	sp, sp, #140
 7472              	.LCFI111:
 7473              		.cfi_def_cfa_offset 152
 7474 0004 0190     		str	r0, [sp, #4]
 7475 0006 22A8     		add	r0, sp, #136
 7476              	.LVL1120:
 7477 0008 40F8881D 		str	r1, [r0, #-136]!
4730:Middlewares/Third_Party/FatFs/src/ff.c **** 	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 7478              		.loc 1 4730 0
 7479 000c FFF7FEFF 		bl	get_ldnumber
 7480              	.LVL1121:
4731:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (res == FR_OK) {
 7481              		.loc 1 4731 0
 7482 0010 0222     		movs	r2, #2
 7483 0012 09A9     		add	r1, sp, #36
 7484 0014 01A8     		add	r0, sp, #4
 7485 0016 FFF7FEFF 		bl	find_volume
 7486              	.LVL1122:
4732:Middlewares/Third_Party/FatFs/src/ff.c **** 		djo.obj.fs = fs;
 7487              		.loc 1 4732 0
 7488 001a 0446     		mov	r4, r0
 7489 001c 10B1     		cbz	r0, .L737
 7490              	.LVL1123:
ARM GAS  /tmp/ccBYTIZg.s 			page 255


 7491              	.L727:
4811:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7492              		.loc 1 4811 0
 7493 001e 2046     		mov	r0, r4
 7494 0020 23B0     		add	sp, sp, #140
 7495              	.LCFI112:
 7496              		.cfi_remember_state
 7497              		.cfi_def_cfa_offset 12
 7498              		@ sp needed
 7499 0022 30BD     		pop	{r4, r5, pc}
 7500              	.LVL1124:
 7501              	.L737:
 7502              	.LCFI113:
 7503              		.cfi_restore_state
4733:Middlewares/Third_Party/FatFs/src/ff.c **** 		INIT_NAMBUF(fs);
 7504              		.loc 1 4733 0
 7505 0024 099B     		ldr	r3, [sp, #36]
 7506 0026 1693     		str	r3, [sp, #88]
4735:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 7507              		.loc 1 4735 0
 7508 0028 0199     		ldr	r1, [sp, #4]
 7509 002a 16A8     		add	r0, sp, #88
 7510              	.LVL1125:
 7511 002c FFF7FEFF 		bl	follow_path
 7512              	.LVL1126:
4736:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 7513              		.loc 1 4736 0
 7514 0030 0446     		mov	r4, r0
 7515 0032 28B9     		cbnz	r0, .L728
4736:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 7516              		.loc 1 4736 0 is_stmt 0 discriminator 1
 7517 0034 9DF88730 		ldrb	r3, [sp, #135]	@ zero_extendqisi2
 7518 0038 13F0A00F 		tst	r3, #160
 7519 003c 00D0     		beq	.L728
4736:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_LOCK != 0
 7520              		.loc 1 4736 0
 7521 003e 0624     		movs	r4, #6
 7522              	.L728:
 7523              	.LVL1127:
4738:Middlewares/Third_Party/FatFs/src/ff.c **** 			res = chk_lock(&djo, 2);
 7524              		.loc 1 4738 0 is_stmt 1
 7525 0040 24B9     		cbnz	r4, .L729
4739:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 7526              		.loc 1 4739 0
 7527 0042 0221     		movs	r1, #2
 7528 0044 16A8     		add	r0, sp, #88
 7529 0046 FFF7FEFF 		bl	chk_lock
 7530              	.LVL1128:
 7531 004a 0446     		mov	r4, r0
 7532              	.LVL1129:
 7533              	.L729:
4742:Middlewares/Third_Party/FatFs/src/ff.c **** #if _FS_EXFAT
 7534              		.loc 1 4742 0
 7535 004c 002C     		cmp	r4, #0
 7536 004e E6D1     		bne	.L727
4769:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 7537              		.loc 1 4769 0
ARM GAS  /tmp/ccBYTIZg.s 			page 256


 7538 0050 1522     		movs	r2, #21
 7539 0052 1E99     		ldr	r1, [sp, #120]
 7540 0054 0B31     		adds	r1, r1, #11
 7541 0056 03A8     		add	r0, sp, #12
 7542 0058 FFF7FEFF 		bl	mem_cpy
 7543              	.LVL1130:
4770:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 7544              		.loc 1 4770 0
 7545 005c 3022     		movs	r2, #48
 7546 005e 16A9     		add	r1, sp, #88
 7547 0060 0AA8     		add	r0, sp, #40
 7548 0062 FFF7FEFF 		bl	mem_cpy
 7549              	.LVL1131:
4771:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 7550              		.loc 1 4771 0
 7551 0066 0099     		ldr	r1, [sp]
 7552 0068 0AA8     		add	r0, sp, #40
 7553 006a FFF7FEFF 		bl	follow_path
 7554              	.LVL1132:
4772:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 7555              		.loc 1 4772 0
 7556 006e 0446     		mov	r4, r0
 7557 0070 20B9     		cbnz	r0, .L730
4773:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7558              		.loc 1 4773 0
 7559 0072 189B     		ldr	r3, [sp, #96]
 7560 0074 0C9A     		ldr	r2, [sp, #48]
 7561 0076 9A42     		cmp	r2, r3
 7562 0078 0FD0     		beq	.L738
 7563 007a 0824     		movs	r4, #8
 7564              	.L730:
 7565              	.LVL1133:
4775:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 7566              		.loc 1 4775 0
 7567 007c 042C     		cmp	r4, #4
 7568 007e 14D0     		beq	.L739
 7569              	.LVL1134:
 7570              	.L731:
4799:Middlewares/Third_Party/FatFs/src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 7571              		.loc 1 4799 0
 7572 0080 002C     		cmp	r4, #0
 7573 0082 CCD1     		bne	.L727
4800:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (res == FR_OK) {
 7574              		.loc 1 4800 0
 7575 0084 16A8     		add	r0, sp, #88
 7576 0086 FFF7FEFF 		bl	dir_remove
 7577              	.LVL1135:
4801:Middlewares/Third_Party/FatFs/src/ff.c **** 					res = sync_fs(fs);
 7578              		.loc 1 4801 0
 7579 008a 0446     		mov	r4, r0
 7580 008c 0028     		cmp	r0, #0
 7581 008e C6D1     		bne	.L727
4802:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7582              		.loc 1 4802 0
 7583 0090 0998     		ldr	r0, [sp, #36]
 7584              	.LVL1136:
 7585 0092 FFF7FEFF 		bl	sync_fs
ARM GAS  /tmp/ccBYTIZg.s 			page 257


 7586              	.LVL1137:
 7587 0096 0446     		mov	r4, r0
 7588              	.LVL1138:
 7589 0098 C1E7     		b	.L727
 7590              	.LVL1139:
 7591              	.L738:
4773:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7592              		.loc 1 4773 0 discriminator 1
 7593 009a 1B9B     		ldr	r3, [sp, #108]
 7594 009c 0F9A     		ldr	r2, [sp, #60]
 7595 009e 9A42     		cmp	r2, r3
 7596 00a0 01D0     		beq	.L734
4773:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7597              		.loc 1 4773 0 is_stmt 0
 7598 00a2 0824     		movs	r4, #8
 7599 00a4 EAE7     		b	.L730
 7600              	.L734:
 7601 00a6 0424     		movs	r4, #4
 7602 00a8 E8E7     		b	.L730
 7603              	.LVL1140:
 7604              	.L739:
4776:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (res == FR_OK) {
 7605              		.loc 1 4776 0 is_stmt 1
 7606 00aa 0AA8     		add	r0, sp, #40
 7607 00ac FFF7FEFF 		bl	dir_register
 7608              	.LVL1141:
4777:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir = djn.dir;					/* Copy information about object except name */
 7609              		.loc 1 4777 0
 7610 00b0 0446     		mov	r4, r0
 7611 00b2 0028     		cmp	r0, #0
 7612 00b4 E4D1     		bne	.L731
4778:Middlewares/Third_Party/FatFs/src/ff.c **** 						mem_cpy(dir + 13, buf + 2, 19);
 7613              		.loc 1 4778 0
 7614 00b6 129D     		ldr	r5, [sp, #72]
 7615              	.LVL1142:
4779:Middlewares/Third_Party/FatFs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 7616              		.loc 1 4779 0
 7617 00b8 1322     		movs	r2, #19
 7618 00ba 0DF10E01 		add	r1, sp, #14
 7619 00be 05F10D00 		add	r0, r5, #13
 7620              	.LVL1143:
 7621 00c2 FFF7FEFF 		bl	mem_cpy
 7622              	.LVL1144:
4780:Middlewares/Third_Party/FatFs/src/ff.c **** 						fs->wflag = 1;
 7623              		.loc 1 4780 0
 7624 00c6 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 7625 00ca 43F02003 		orr	r3, r3, #32
 7626 00ce EB72     		strb	r3, [r5, #11]
4781:Middlewares/Third_Party/FatFs/src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 7627              		.loc 1 4781 0
 7628 00d0 0122     		movs	r2, #1
 7629 00d2 099B     		ldr	r3, [sp, #36]
 7630 00d4 DA70     		strb	r2, [r3, #3]
4782:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 7631              		.loc 1 4782 0
 7632 00d6 EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 7633 00d8 13F0100F 		tst	r3, #16
ARM GAS  /tmp/ccBYTIZg.s 			page 258


 7634 00dc D0D0     		beq	.L731
4782:Middlewares/Third_Party/FatFs/src/ff.c **** 							dw = clust2sect(fs, ld_clust(fs, dir));
 7635              		.loc 1 4782 0 is_stmt 0 discriminator 1
 7636 00de 0C9B     		ldr	r3, [sp, #48]
 7637 00e0 189A     		ldr	r2, [sp, #96]
 7638 00e2 9A42     		cmp	r2, r3
 7639 00e4 CCD0     		beq	.L731
4783:Middlewares/Third_Party/FatFs/src/ff.c **** 							if (!dw) {
 7640              		.loc 1 4783 0 is_stmt 1
 7641 00e6 099C     		ldr	r4, [sp, #36]
 7642 00e8 2946     		mov	r1, r5
 7643 00ea 2046     		mov	r0, r4
 7644 00ec FFF7FEFF 		bl	ld_clust
 7645              	.LVL1145:
 7646 00f0 0146     		mov	r1, r0
 7647 00f2 2046     		mov	r0, r4
 7648 00f4 FFF7FEFF 		bl	clust2sect
 7649              	.LVL1146:
4784:Middlewares/Third_Party/FatFs/src/ff.c **** 								res = FR_INT_ERR;
 7650              		.loc 1 4784 0
 7651 00f8 0146     		mov	r1, r0
 7652 00fa 08B9     		cbnz	r0, .L740
4785:Middlewares/Third_Party/FatFs/src/ff.c **** 							} else {
 7653              		.loc 1 4785 0
 7654 00fc 0224     		movs	r4, #2
 7655 00fe BFE7     		b	.L731
 7656              	.L740:
4788:Middlewares/Third_Party/FatFs/src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 7657              		.loc 1 4788 0
 7658 0100 2046     		mov	r0, r4
 7659              	.LVL1147:
 7660 0102 FFF7FEFF 		bl	move_window
 7661              	.LVL1148:
4789:Middlewares/Third_Party/FatFs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 7662              		.loc 1 4789 0
 7663 0106 099B     		ldr	r3, [sp, #36]
 7664 0108 03F15001 		add	r1, r3, #80
 7665              	.LVL1149:
4790:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 7666              		.loc 1 4790 0
 7667 010c 0446     		mov	r4, r0
 7668 010e 0028     		cmp	r0, #0
 7669 0110 B6D1     		bne	.L731
4790:Middlewares/Third_Party/FatFs/src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 7670              		.loc 1 4790 0 is_stmt 0 discriminator 1
 7671 0112 93F85120 		ldrb	r2, [r3, #81]	@ zero_extendqisi2
 7672 0116 2E2A     		cmp	r2, #46
 7673 0118 B2D1     		bne	.L731
4791:Middlewares/Third_Party/FatFs/src/ff.c **** 									fs->wflag = 1;
 7674              		.loc 1 4791 0 is_stmt 1
 7675 011a 0C9A     		ldr	r2, [sp, #48]
 7676 011c 1846     		mov	r0, r3
 7677              	.LVL1150:
 7678 011e FFF7FEFF 		bl	st_clust
 7679              	.LVL1151:
4792:Middlewares/Third_Party/FatFs/src/ff.c **** 								}
 7680              		.loc 1 4792 0
ARM GAS  /tmp/ccBYTIZg.s 			page 259


 7681 0122 0122     		movs	r2, #1
 7682 0124 099B     		ldr	r3, [sp, #36]
 7683 0126 DA70     		strb	r2, [r3, #3]
 7684 0128 AAE7     		b	.L731
 7685              		.cfi_endproc
 7686              	.LFE194:
 7688              		.section	.text.f_mkfs,"ax",%progbits
 7689              		.align	1
 7690              		.global	f_mkfs
 7691              		.syntax unified
 7692              		.thumb
 7693              		.thumb_func
 7694              		.fpu fpv5-d16
 7696              	f_mkfs:
 7697              	.LFB195:
5308:Middlewares/Third_Party/FatFs/src/ff.c **** 	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 7698              		.loc 1 5308 0
 7699              		.cfi_startproc
 7700              		@ args = 4, pretend = 0, frame = 40
 7701              		@ frame_needed = 0, uses_anonymous_args = 0
 7702              	.LVL1152:
 7703 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 7704              	.LCFI114:
 7705              		.cfi_def_cfa_offset 36
 7706              		.cfi_offset 4, -36
 7707              		.cfi_offset 5, -32
 7708              		.cfi_offset 6, -28
 7709              		.cfi_offset 7, -24
 7710              		.cfi_offset 8, -20
 7711              		.cfi_offset 9, -16
 7712              		.cfi_offset 10, -12
 7713              		.cfi_offset 11, -8
 7714              		.cfi_offset 14, -4
 7715 0004 8BB0     		sub	sp, sp, #44
 7716              	.LCFI115:
 7717              		.cfi_def_cfa_offset 80
 7718 0006 0AAC     		add	r4, sp, #40
 7719 0008 44F80C0D 		str	r0, [r4, #-12]!
 7720 000c 0E46     		mov	r6, r1
 7721 000e 1746     		mov	r7, r2
 7722 0010 1D46     		mov	r5, r3
 7723              	.LVL1153:
5327:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 7724              		.loc 1 5327 0
 7725 0012 2046     		mov	r0, r4
 7726              	.LVL1154:
 7727 0014 FFF7FEFF 		bl	get_ldnumber
 7728              	.LVL1155:
5328:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 7729              		.loc 1 5328 0
 7730 0018 0028     		cmp	r0, #0
 7731 001a C0F2E182 		blt	.L784
5329:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 7732              		.loc 1 5329 0
 7733 001e 9D4B     		ldr	r3, .L828
 7734 0020 53F82030 		ldr	r3, [r3, r0, lsl #2]
 7735 0024 0BB1     		cbz	r3, .L743
ARM GAS  /tmp/ccBYTIZg.s 			page 260


5329:Middlewares/Third_Party/FatFs/src/ff.c **** 	pdrv = LD2PD(vol);	/* Physical drive */
 7736              		.loc 1 5329 0 is_stmt 0 discriminator 1
 7737 0026 0022     		movs	r2, #0
 7738 0028 1A70     		strb	r2, [r3]
 7739              	.L743:
5330:Middlewares/Third_Party/FatFs/src/ff.c **** 	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 7740              		.loc 1 5330 0 is_stmt 1
 7741 002a C4B2     		uxtb	r4, r0
 7742              	.LVL1156:
5334:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 7743              		.loc 1 5334 0
 7744 002c 2046     		mov	r0, r4
 7745              	.LVL1157:
 7746 002e FFF7FEFF 		bl	disk_initialize
 7747              	.LVL1158:
5335:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 7748              		.loc 1 5335 0
 7749 0032 10F0010F 		tst	r0, #1
 7750 0036 01D0     		beq	.L822
 7751 0038 0320     		movs	r0, #3
 7752              	.LVL1159:
 7753 003a D2E2     		b	.L742
 7754              	.LVL1160:
 7755              	.L822:
5336:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & 
 7756              		.loc 1 5336 0
 7757 003c 10F0040F 		tst	r0, #4
 7758 0040 01D0     		beq	.L823
 7759 0042 0A20     		movs	r0, #10
 7760              	.LVL1161:
 7761 0044 CDE2     		b	.L742
 7762              	.LVL1162:
 7763              	.L823:
5337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 7764              		.loc 1 5337 0
 7765 0046 09AA     		add	r2, sp, #36
 7766 0048 0321     		movs	r1, #3
 7767 004a 2046     		mov	r0, r4
 7768              	.LVL1163:
 7769 004c FFF7FEFF 		bl	disk_ioctl
 7770              	.LVL1164:
 7771 0050 38B9     		cbnz	r0, .L744
5337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 7772              		.loc 1 5337 0 is_stmt 0 discriminator 2
 7773 0052 099B     		ldr	r3, [sp, #36]
 7774 0054 2BB1     		cbz	r3, .L744
5337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 7775              		.loc 1 5337 0 discriminator 4
 7776 0056 B3F5004F 		cmp	r3, #32768
 7777 005a 02D8     		bhi	.L744
5337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
 7778              		.loc 1 5337 0 discriminator 6
 7779 005c 5A1E     		subs	r2, r3, #1
 7780 005e 1342     		tst	r3, r2
 7781 0060 01D0     		beq	.L745
 7782              	.L744:
5337:Middlewares/Third_Party/FatFs/src/ff.c **** #if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
ARM GAS  /tmp/ccBYTIZg.s 			page 261


 7783              		.loc 1 5337 0 discriminator 7
 7784 0062 0123     		movs	r3, #1
 7785 0064 0993     		str	r3, [sp, #36]
 7786              	.L745:
 7787              	.LVL1165:
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 7788              		.loc 1 5344 0 is_stmt 1
 7789 0066 27B1     		cbz	r7, .L746
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 7790              		.loc 1 5344 0 is_stmt 0 discriminator 1
 7791 0068 B7F5007F 		cmp	r7, #512
 7792 006c 01D2     		bcs	.L746
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 7793              		.loc 1 5344 0
 7794 006e 1320     		movs	r0, #19
 7795 0070 B7E2     		b	.L742
 7796              	.L746:
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 7797              		.loc 1 5344 0 discriminator 4
 7798 0072 B7F1807F 		cmp	r7, #16777216
 7799 0076 01D9     		bls	.L824
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 7800              		.loc 1 5344 0
 7801 0078 1320     		movs	r0, #19
 7802 007a B2E2     		b	.L742
 7803              	.L824:
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 7804              		.loc 1 5344 0 discriminator 6
 7805 007c 7B1E     		subs	r3, r7, #1
 7806 007e 1F42     		tst	r7, r3
 7807 0080 01D0     		beq	.L825
5344:Middlewares/Third_Party/FatFs/src/ff.c **** 	au /= ss;	/* Cluster size in unit of sector */
 7808              		.loc 1 5344 0
 7809 0082 1320     		movs	r0, #19
 7810 0084 ADE2     		b	.L742
 7811              	.L825:
5345:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7812              		.loc 1 5345 0 is_stmt 1
 7813 0086 4FEA5729 		lsr	r9, r7, #9
 7814              	.LVL1166:
5349:Middlewares/Third_Party/FatFs/src/ff.c **** 	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 7815              		.loc 1 5349 0
 7816 008a 149B     		ldr	r3, [sp, #80]
 7817 008c 5B0A     		lsrs	r3, r3, #9
 7818 008e 0593     		str	r3, [sp, #20]
 7819              	.LVL1167:
5350:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (!szb_buf) return FR_MKFS_ABORTED;
 7820              		.loc 1 5350 0
 7821 0090 DFF804A2 		ldr	r10, .L828+4
 7822 0094 149B     		ldr	r3, [sp, #80]
 7823              	.LVL1168:
 7824 0096 03EA0A0A 		and	r10, r3, r10
 7825              	.LVL1169:
5351:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7826              		.loc 1 5351 0
 7827 009a BAF1000F 		cmp	r10, #0
 7828 009e 01D1     		bne	.L826
ARM GAS  /tmp/ccBYTIZg.s 			page 262


 7829 00a0 0E20     		movs	r0, #14
 7830 00a2 9EE2     		b	.L742
 7831              	.L826:
5364:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 7832              		.loc 1 5364 0
 7833 00a4 08AA     		add	r2, sp, #32
 7834 00a6 0121     		movs	r1, #1
 7835 00a8 2046     		mov	r0, r4
 7836 00aa FFF7FEFF 		bl	disk_ioctl
 7837              	.LVL1170:
 7838 00ae 0028     		cmp	r0, #0
 7839 00b0 40F09A82 		bne	.L791
5365:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 7840              		.loc 1 5365 0
 7841 00b4 16F00803 		ands	r3, r6, #8
 7842 00b8 0693     		str	r3, [sp, #24]
 7843 00ba 0CD0     		beq	.L792
 7844 00bc 4FF00008 		mov	r8, #0
 7845              	.L747:
 7846              	.LVL1171:
5366:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
 7847              		.loc 1 5366 0 discriminator 4
 7848 00c0 089A     		ldr	r2, [sp, #32]
 7849 00c2 9045     		cmp	r8, r2
 7850 00c4 00F29282 		bhi	.L793
5367:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 7851              		.loc 1 5367 0
 7852 00c8 A2EB0802 		sub	r2, r2, r8
 7853 00cc 0892     		str	r2, [sp, #32]
5369:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7854              		.loc 1 5369 0
 7855 00ce 7F2A     		cmp	r2, #127
 7856 00d0 04D8     		bhi	.L827
 7857 00d2 0E20     		movs	r0, #14
 7858 00d4 85E2     		b	.L742
 7859              	.LVL1172:
 7860              	.L792:
5365:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 7861              		.loc 1 5365 0
 7862 00d6 4FF03F08 		mov	r8, #63
 7863 00da F1E7     		b	.L747
 7864              	.LVL1173:
 7865              	.L827:
5378:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
 7866              		.loc 1 5378 0
 7867 00dc B9F1800F 		cmp	r9, #128
 7868 00e0 00F28682 		bhi	.L795
5379:Middlewares/Third_Party/FatFs/src/ff.c **** 			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 7869              		.loc 1 5379 0
 7870 00e4 16F00201 		ands	r1, r6, #2
 7871 00e8 06D0     		beq	.L748
5380:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
 7872              		.loc 1 5380 0
 7873 00ea 06F00703 		and	r3, r6, #7
 7874 00ee 022B     		cmp	r3, #2
 7875 00f0 69D0     		beq	.L796
5380:Middlewares/Third_Party/FatFs/src/ff.c **** 				fmt = FS_FAT32; break;
ARM GAS  /tmp/ccBYTIZg.s 			page 263


 7876              		.loc 1 5380 0 is_stmt 0 discriminator 1
 7877 00f2 16F0010F 		tst	r6, #1
 7878 00f6 6AD0     		beq	.L797
 7879              	.L748:
5384:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
 7880              		.loc 1 5384 0 is_stmt 1
 7881 00f8 16F0010F 		tst	r6, #1
 7882 00fc 00F07A82 		beq	.L798
5385:Middlewares/Third_Party/FatFs/src/ff.c **** 	} while (0);
 7883              		.loc 1 5385 0
 7884 0100 0227     		movs	r7, #2
 7885 0102 4846     		mov	r0, r9
 7886 0104 0191     		str	r1, [sp, #4]
 7887              	.LVL1174:
 7888              	.L750:
5555:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (!pau) {	/* au auto-selection */
 7889              		.loc 1 5555 0
 7890 0106 032F     		cmp	r7, #3
 7891 0108 70D1     		bne	.L751
5556:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 7892              		.loc 1 5556 0
 7893 010a 0028     		cmp	r0, #0
 7894 010c 6AD1     		bne	.L799
5557:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 7895              		.loc 1 5557 0
 7896 010e 4FEA524C 		lsr	ip, r2, #17
 7897              	.LVL1175:
5558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7898              		.loc 1 5558 0
 7899 0112 0023     		movs	r3, #0
 7900 0114 0126     		movs	r6, #1
 7901 0116 0199     		ldr	r1, [sp, #4]
 7902              	.LVL1176:
 7903              	.L753:
5558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7904              		.loc 1 5558 0 is_stmt 0 discriminator 1
 7905 0118 DFF880E1 		ldr	lr, .L828+8
 7906 011c 3EF813E0 		ldrh	lr, [lr, r3, lsl #1]
 7907 0120 BEF1000F 		cmp	lr, #0
 7908 0124 60D0     		beq	.L818
5558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7909              		.loc 1 5558 0 discriminator 3
 7910 0126 F445     		cmp	ip, lr
 7911 0128 59D2     		bcs	.L754
 7912 012a 0191     		str	r1, [sp, #4]
 7913              	.LVL1177:
 7914              	.L752:
5560:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 7915              		.loc 1 5560 0 is_stmt 1
 7916 012c B2FBF6FE 		udiv	lr, r2, r6
 7917              	.LVL1178:
5561:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
 7918              		.loc 1 5561 0
 7919 0130 0EF10203 		add	r3, lr, #2
 7920 0134 9B00     		lsls	r3, r3, #2
 7921 0136 03F2FF13 		addw	r3, r3, #511
 7922 013a 5B0A     		lsrs	r3, r3, #9
ARM GAS  /tmp/ccBYTIZg.s 			page 264


 7923 013c 0293     		str	r3, [sp, #8]
 7924              	.LVL1179:
5564:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
 7925              		.loc 1 5564 0
 7926 013e DFF860C1 		ldr	ip, .L828+12
 7927 0142 F444     		add	ip, ip, lr
 7928 0144 DFF85CE1 		ldr	lr, .L828+16
 7929              	.LVL1180:
 7930 0148 F445     		cmp	ip, lr
 7931 014a 00F25582 		bhi	.L800
5563:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 7932              		.loc 1 5563 0
 7933 014e 0023     		movs	r3, #0
 7934              	.LVL1181:
 7935 0150 0493     		str	r3, [sp, #16]
5562:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = 0;		/* No static directory */
 7936              		.loc 1 5562 0
 7937 0152 4FF02009 		mov	r9, #32
 7938              	.LVL1182:
 7939              	.L755:
5581:Middlewares/Third_Party/FatFs/src/ff.c **** 			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 7940              		.loc 1 5581 0
 7941 0156 09EB0803 		add	r3, r9, r8
 7942 015a 0393     		str	r3, [sp, #12]
 7943              	.LVL1183:
5582:Middlewares/Third_Party/FatFs/src/ff.c **** 
 7944              		.loc 1 5582 0
 7945 015c 0299     		ldr	r1, [sp, #8]
 7946 015e 01EB030E 		add	lr, r1, r3
 7947 0162 049B     		ldr	r3, [sp, #16]
 7948              	.LVL1184:
 7949 0164 9E44     		add	lr, lr, r3
 7950              	.LVL1185:
5585:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 7951              		.loc 1 5585 0
 7952 0166 DDF824B0 		ldr	fp, [sp, #36]
 7953 016a 0EEB0B0C 		add	ip, lr, fp
 7954 016e 0CF1FF3C 		add	ip, ip, #-1
 7955 0172 CBF1000B 		rsb	fp, fp, #0
 7956 0176 0CEA0B0C 		and	ip, ip, fp
 7957 017a ACEB0E0C 		sub	ip, ip, lr
 7958              	.LVL1186:
5586:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv += n; b_fat += n;
 7959              		.loc 1 5586 0
 7960 017e 032F     		cmp	r7, #3
 7961 0180 63D1     		bne	.L761
5587:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {					/* FAT12/16: Expand FAT size */
 7962              		.loc 1 5587 0
 7963 0182 E144     		add	r9, r9, ip
 7964              	.LVL1187:
 7965 0184 039B     		ldr	r3, [sp, #12]
 7966 0186 6344     		add	r3, r3, ip
 7967 0188 0393     		str	r3, [sp, #12]
 7968              	.LVL1188:
 7969              	.L762:
5593:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 7970              		.loc 1 5593 0
ARM GAS  /tmp/ccBYTIZg.s 			page 265


 7971 018a 0EEB061E 		add	lr, lr, r6, lsl #4
 7972              	.LVL1189:
 7973 018e AEEB080E 		sub	lr, lr, r8
 7974 0192 7245     		cmp	r2, lr
 7975 0194 C0F03282 		bcc	.L802
5594:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 7976              		.loc 1 5594 0
 7977 0198 A2EB090B 		sub	fp, r2, r9
 7978 019c 029B     		ldr	r3, [sp, #8]
 7979 019e ABEB030B 		sub	fp, fp, r3
 7980 01a2 049B     		ldr	r3, [sp, #16]
 7981 01a4 ABEB030B 		sub	fp, fp, r3
 7982 01a8 BBFBF6FB 		udiv	fp, fp, r6
 7983              	.LVL1190:
5595:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 7984              		.loc 1 5595 0
 7985 01ac 032F     		cmp	r7, #3
 7986 01ae 50D1     		bne	.L763
5596:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 7987              		.loc 1 5596 0
 7988 01b0 4FF6F57E 		movw	lr, #65525
 7989 01b4 F345     		cmp	fp, lr
 7990 01b6 4CD8     		bhi	.L763
5597:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 7991              		.loc 1 5597 0
 7992 01b8 0028     		cmp	r0, #0
 7993 01ba 40F02182 		bne	.L803
 7994              	.LVL1191:
5597:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 7995              		.loc 1 5597 0 is_stmt 0 discriminator 1
 7996 01be 7308     		lsrs	r3, r6, #1
 7997              	.LVL1192:
 7998 01c0 0BD1     		bne	.L764
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 7999              		.loc 1 5598 0 is_stmt 1
 8000 01c2 0E20     		movs	r0, #14
 8001 01c4 0DE2     		b	.L742
 8002              	.LVL1193:
 8003              	.L796:
5381:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8004              		.loc 1 5381 0
 8005 01c6 0327     		movs	r7, #3
 8006 01c8 4846     		mov	r0, r9
 8007 01ca 0191     		str	r1, [sp, #4]
 8008 01cc 9BE7     		b	.L750
 8009              	.L797:
 8010 01ce 0327     		movs	r7, #3
 8011 01d0 4846     		mov	r0, r9
 8012 01d2 0191     		str	r1, [sp, #4]
 8013 01d4 97E7     		b	.L750
 8014              	.LVL1194:
 8015              	.L804:
 8016 01d6 0346     		mov	r3, r0
5607:Middlewares/Third_Party/FatFs/src/ff.c **** 					}
 8017              		.loc 1 5607 0
 8018 01d8 0327     		movs	r7, #3
 8019              	.LVL1195:
ARM GAS  /tmp/ccBYTIZg.s 			page 266


 8020              	.L764:
 8021 01da 1846     		mov	r0, r3
 8022 01dc 93E7     		b	.L750
 8023              	.LVL1196:
 8024              	.L754:
5558:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8025              		.loc 1 5558 0 discriminator 4
 8026 01de 0133     		adds	r3, r3, #1
 8027              	.LVL1197:
 8028 01e0 7600     		lsls	r6, r6, #1
 8029              	.LVL1198:
 8030 01e2 99E7     		b	.L753
 8031              	.LVL1199:
 8032              	.L799:
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
 8033              		.loc 1 5553 0
 8034 01e4 0646     		mov	r6, r0
 8035 01e6 A1E7     		b	.L752
 8036              	.LVL1200:
 8037              	.L818:
 8038 01e8 0191     		str	r1, [sp, #4]
 8039 01ea 9FE7     		b	.L752
 8040              	.LVL1201:
 8041              	.L751:
5566:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8042              		.loc 1 5566 0
 8043 01ec 10BB     		cbnz	r0, .L801
5567:Middlewares/Third_Party/FatFs/src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8044              		.loc 1 5567 0
 8045 01ee 4FEA123C 		lsr	ip, r2, #12
 8046              	.LVL1202:
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8047              		.loc 1 5568 0
 8048 01f2 0023     		movs	r3, #0
 8049 01f4 0126     		movs	r6, #1
 8050 01f6 0199     		ldr	r1, [sp, #4]
 8051              	.LVL1203:
 8052              	.L757:
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8053              		.loc 1 5568 0 is_stmt 0 discriminator 1
 8054 01f8 DFF8ACE0 		ldr	lr, .L828+20
 8055 01fc 3EF813E0 		ldrh	lr, [lr, r3, lsl #1]
 8056 0200 BEF1000F 		cmp	lr, #0
 8057 0204 18D0     		beq	.L819
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8058              		.loc 1 5568 0 discriminator 3
 8059 0206 F445     		cmp	ip, lr
 8060 0208 11D2     		bcs	.L758
 8061 020a 0191     		str	r1, [sp, #4]
 8062              	.LVL1204:
 8063              	.L756:
5570:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT12) {
 8064              		.loc 1 5570 0 is_stmt 1
 8065 020c B2FBF6F3 		udiv	r3, r2, r6
 8066              	.LVL1205:
5571:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8067              		.loc 1 5571 0
ARM GAS  /tmp/ccBYTIZg.s 			page 267


 8068 0210 40F6F57E 		movw	lr, #4085
 8069 0214 7345     		cmp	r3, lr
 8070 0216 11D9     		bls	.L759
5572:Middlewares/Third_Party/FatFs/src/ff.c **** 				} else {
 8071              		.loc 1 5572 0
 8072 0218 0233     		adds	r3, r3, #2
 8073              	.LVL1206:
 8074 021a 5B00     		lsls	r3, r3, #1
 8075              	.LVL1207:
 8076              	.L760:
5577:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
 8077              		.loc 1 5577 0
 8078 021c 03F2FF13 		addw	r3, r3, #511
 8079              	.LVL1208:
 8080 0220 5B0A     		lsrs	r3, r3, #9
 8081              	.LVL1209:
 8082 0222 0293     		str	r3, [sp, #8]
 8083              	.LVL1210:
5579:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8084              		.loc 1 5579 0
 8085 0224 2023     		movs	r3, #32
 8086              	.LVL1211:
 8087 0226 0493     		str	r3, [sp, #16]
5578:Middlewares/Third_Party/FatFs/src/ff.c **** 				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8088              		.loc 1 5578 0
 8089 0228 4FF00109 		mov	r9, #1
 8090 022c 93E7     		b	.L755
 8091              	.LVL1212:
 8092              	.L758:
5568:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8093              		.loc 1 5568 0 discriminator 4
 8094 022e 0133     		adds	r3, r3, #1
 8095              	.LVL1213:
 8096 0230 7600     		lsls	r6, r6, #1
 8097              	.LVL1214:
 8098 0232 E1E7     		b	.L757
 8099              	.LVL1215:
 8100              	.L801:
5553:Middlewares/Third_Party/FatFs/src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
 8101              		.loc 1 5553 0
 8102 0234 0646     		mov	r6, r0
 8103 0236 E9E7     		b	.L756
 8104              	.LVL1216:
 8105              	.L819:
 8106 0238 0191     		str	r1, [sp, #4]
 8107 023a E7E7     		b	.L756
 8108              	.LVL1217:
 8109              	.L759:
5575:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8110              		.loc 1 5575 0
 8111 023c 03EB4303 		add	r3, r3, r3, lsl #1
 8112              	.LVL1218:
 8113 0240 0133     		adds	r3, r3, #1
 8114 0242 5B08     		lsrs	r3, r3, #1
 8115 0244 0333     		adds	r3, r3, #3
 8116              	.LVL1219:
5574:Middlewares/Third_Party/FatFs/src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
ARM GAS  /tmp/ccBYTIZg.s 			page 268


 8117              		.loc 1 5574 0
 8118 0246 0127     		movs	r7, #1
 8119 0248 E8E7     		b	.L760
 8120              	.LVL1220:
 8121              	.L761:
5589:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8122              		.loc 1 5589 0
 8123 024a 029B     		ldr	r3, [sp, #8]
 8124              	.LVL1221:
 8125 024c 6344     		add	r3, r3, ip
 8126 024e 0293     		str	r3, [sp, #8]
 8127              	.LVL1222:
 8128 0250 9BE7     		b	.L762
 8129              	.LVL1223:
 8130              	.L763:
5601:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8131              		.loc 1 5601 0
 8132 0252 022F     		cmp	r7, #2
 8133 0254 2AD1     		bne	.L765
5602:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (pau * 2) <= 64) {
 8134              		.loc 1 5602 0
 8135 0256 4FF6F57E 		movw	lr, #65525
 8136 025a F345     		cmp	fp, lr
 8137 025c 0ED9     		bls	.L766
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8138              		.loc 1 5603 0
 8139 025e 10B9     		cbnz	r0, .L767
5603:Middlewares/Third_Party/FatFs/src/ff.c **** 						au = pau * 2; continue;		/* Adjust cluster size and retry */
 8140              		.loc 1 5603 0 is_stmt 0 discriminator 1
 8141 0260 7300     		lsls	r3, r6, #1
 8142 0262 402B     		cmp	r3, #64
 8143 0264 B9D9     		bls	.L764
 8144              	.L767:
5606:Middlewares/Third_Party/FatFs/src/ff.c **** 						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8145              		.loc 1 5606 0 is_stmt 1
 8146 0266 019B     		ldr	r3, [sp, #4]
 8147 0268 002B     		cmp	r3, #0
 8148 026a B4D1     		bne	.L804
5609:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8149              		.loc 1 5609 0
 8150 026c 0028     		cmp	r0, #0
 8151 026e 40F0C981 		bne	.L805
5609:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8152              		.loc 1 5609 0 is_stmt 0 discriminator 1
 8153 0272 7300     		lsls	r3, r6, #1
 8154              	.LVL1224:
 8155 0274 802B     		cmp	r3, #128
 8156 0276 B0D9     		bls	.L764
5610:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8157              		.loc 1 5610 0 is_stmt 1
 8158 0278 0E20     		movs	r0, #14
 8159 027a B2E1     		b	.L742
 8160              	.LVL1225:
 8161              	.L766:
5612:Middlewares/Third_Party/FatFs/src/ff.c **** 					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8162              		.loc 1 5612 0
 8163 027c 40F6F57E 		movw	lr, #4085
ARM GAS  /tmp/ccBYTIZg.s 			page 269


 8164 0280 F345     		cmp	fp, lr
 8165 0282 13D8     		bhi	.L765
5613:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8166              		.loc 1 5613 0
 8167 0284 0028     		cmp	r0, #0
 8168 0286 40F0BF81 		bne	.L806
5613:Middlewares/Third_Party/FatFs/src/ff.c **** 					return FR_MKFS_ABORTED;
 8169              		.loc 1 5613 0 is_stmt 0 discriminator 1
 8170 028a 7300     		lsls	r3, r6, #1
 8171              	.LVL1226:
 8172 028c 802B     		cmp	r3, #128
 8173 028e A4D9     		bls	.L764
5614:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8174              		.loc 1 5614 0 is_stmt 1
 8175 0290 0E20     		movs	r0, #14
 8176 0292 A6E1     		b	.L742
 8177              	.L829:
 8178              		.align	2
 8179              	.L828:
 8180 0294 00000000 		.word	.LANCHOR2
 8181 0298 00FEFFFF 		.word	-512
 8182 029c 00000000 		.word	.LANCHOR4
 8183 02a0 0A00FFFF 		.word	-65526
 8184 02a4 FFFFFE0F 		.word	268369919
 8185 02a8 00000000 		.word	.LANCHOR5
 8186              	.LVL1227:
 8187              	.L765:
5617:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8188              		.loc 1 5617 0
 8189 02ac 40F6F572 		movw	r2, #4085
 8190 02b0 012F     		cmp	r7, #1
 8191 02b2 14BF     		ite	ne
 8192 02b4 0023     		movne	r3, #0
 8193 02b6 0123     		moveq	r3, #1
 8194 02b8 9345     		cmp	fp, r2
 8195 02ba 98BF     		it	ls
 8196 02bc 0023     		movls	r3, #0
 8197 02be 002B     		cmp	r3, #0
 8198 02c0 40F0A481 		bne	.L807
5628:Middlewares/Third_Party/FatFs/src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8199              		.loc 1 5628 0
 8200 02c4 4FF40072 		mov	r2, #512
 8201 02c8 0021     		movs	r1, #0
 8202 02ca 2846     		mov	r0, r5
 8203              	.LVL1228:
 8204 02cc FFF7FEFF 		bl	mem_set
 8205              	.LVL1229:
5629:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8206              		.loc 1 5629 0
 8207 02d0 0B22     		movs	r2, #11
 8208 02d2 D449     		ldr	r1, .L830
 8209 02d4 2846     		mov	r0, r5
 8210 02d6 FFF7FEFF 		bl	mem_cpy
 8211              	.LVL1230:
5630:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8212              		.loc 1 5630 0
 8213 02da 4FF40071 		mov	r1, #512
ARM GAS  /tmp/ccBYTIZg.s 			page 270


 8214 02de 05F10B00 		add	r0, r5, #11
 8215 02e2 FFF7FEFF 		bl	st_word
 8216              	.LVL1231:
5631:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8217              		.loc 1 5631 0
 8218 02e6 6E73     		strb	r6, [r5, #13]
5632:Middlewares/Third_Party/FatFs/src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8219              		.loc 1 5632 0
 8220 02e8 1FFA89F1 		uxth	r1, r9
 8221 02ec 05F10E00 		add	r0, r5, #14
 8222 02f0 FFF7FEFF 		bl	st_word
 8223              	.LVL1232:
5633:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root direc
 8224              		.loc 1 5633 0
 8225 02f4 0123     		movs	r3, #1
 8226 02f6 2B74     		strb	r3, [r5, #16]
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 8227              		.loc 1 5634 0
 8228 02f8 05F11100 		add	r0, r5, #17
 8229 02fc 032F     		cmp	r7, #3
 8230 02fe 00F00581 		beq	.L808
 8231 0302 4FF40071 		mov	r1, #512
 8232              	.L768:
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 8233              		.loc 1 5634 0 is_stmt 0 discriminator 4
 8234 0306 FFF7FEFF 		bl	st_word
 8235              	.LVL1233:
5635:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8236              		.loc 1 5635 0 is_stmt 1 discriminator 4
 8237 030a 0899     		ldr	r1, [sp, #32]
 8238 030c B1F5803F 		cmp	r1, #65536
 8239 0310 80F0FE80 		bcs	.L769
5636:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8240              		.loc 1 5636 0
 8241 0314 89B2     		uxth	r1, r1
 8242 0316 05F11300 		add	r0, r5, #19
 8243 031a FFF7FEFF 		bl	st_word
 8244              	.LVL1234:
 8245              	.L770:
5640:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8246              		.loc 1 5640 0
 8247 031e F823     		movs	r3, #248
 8248 0320 6B75     		strb	r3, [r5, #21]
5641:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8249              		.loc 1 5641 0
 8250 0322 3F21     		movs	r1, #63
 8251 0324 05F11800 		add	r0, r5, #24
 8252 0328 FFF7FEFF 		bl	st_word
 8253              	.LVL1235:
5642:Middlewares/Third_Party/FatFs/src/ff.c **** 		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8254              		.loc 1 5642 0
 8255 032c FF21     		movs	r1, #255
 8256 032e 05F11A00 		add	r0, r5, #26
 8257 0332 FFF7FEFF 		bl	st_word
 8258              	.LVL1236:
5643:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (fmt == FS_FAT32) {
 8259              		.loc 1 5643 0
ARM GAS  /tmp/ccBYTIZg.s 			page 271


 8260 0336 4146     		mov	r1, r8
 8261 0338 05F11C00 		add	r0, r5, #28
 8262 033c FFF7FEFF 		bl	st_dword
 8263              	.LVL1237:
5644:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8264              		.loc 1 5644 0
 8265 0340 032F     		cmp	r7, #3
 8266 0342 40F0EA80 		bne	.L771
5645:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8267              		.loc 1 5645 0
 8268 0346 FFF7FEFF 		bl	get_fattime
 8269              	.LVL1238:
 8270 034a 0146     		mov	r1, r0
 8271 034c 05F14300 		add	r0, r5, #67
 8272 0350 FFF7FEFF 		bl	st_dword
 8273              	.LVL1239:
5646:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8274              		.loc 1 5646 0
 8275 0354 0299     		ldr	r1, [sp, #8]
 8276 0356 05F12400 		add	r0, r5, #36
 8277 035a FFF7FEFF 		bl	st_dword
 8278              	.LVL1240:
5647:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8279              		.loc 1 5647 0
 8280 035e 0221     		movs	r1, #2
 8281 0360 05F12C00 		add	r0, r5, #44
 8282 0364 FFF7FEFF 		bl	st_dword
 8283              	.LVL1241:
5648:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8284              		.loc 1 5648 0
 8285 0368 0121     		movs	r1, #1
 8286 036a 05F13000 		add	r0, r5, #48
 8287 036e FFF7FEFF 		bl	st_word
 8288              	.LVL1242:
5649:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8289              		.loc 1 5649 0
 8290 0372 0621     		movs	r1, #6
 8291 0374 05F13200 		add	r0, r5, #50
 8292 0378 FFF7FEFF 		bl	st_word
 8293              	.LVL1243:
5650:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8294              		.loc 1 5650 0
 8295 037c 8023     		movs	r3, #128
 8296 037e 85F84030 		strb	r3, [r5, #64]
5651:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8297              		.loc 1 5651 0
 8298 0382 2923     		movs	r3, #41
 8299 0384 85F84230 		strb	r3, [r5, #66]
5652:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8300              		.loc 1 5652 0
 8301 0388 1322     		movs	r2, #19
 8302 038a A749     		ldr	r1, .L830+4
 8303 038c 05F14700 		add	r0, r5, #71
 8304 0390 FFF7FEFF 		bl	mem_cpy
 8305              	.LVL1244:
 8306              	.L772:
5660:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector 
ARM GAS  /tmp/ccBYTIZg.s 			page 272


 8307              		.loc 1 5660 0
 8308 0394 05F5FF73 		add	r3, r5, #510
 8309 0398 0193     		str	r3, [sp, #4]
 8310 039a 4AF65521 		movw	r1, #43605
 8311 039e 1846     		mov	r0, r3
 8312 03a0 FFF7FEFF 		bl	st_word
 8313              	.LVL1245:
5661:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8314              		.loc 1 5661 0
 8315 03a4 0123     		movs	r3, #1
 8316 03a6 4246     		mov	r2, r8
 8317 03a8 2946     		mov	r1, r5
 8318 03aa 2046     		mov	r0, r4
 8319 03ac FFF7FEFF 		bl	disk_write
 8320              	.LVL1246:
 8321 03b0 0028     		cmp	r0, #0
 8322 03b2 40F02D81 		bne	.L809
5664:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8323              		.loc 1 5664 0
 8324 03b6 032F     		cmp	r7, #3
 8325 03b8 33D1     		bne	.L773
5665:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
 8326              		.loc 1 5665 0
 8327 03ba 0123     		movs	r3, #1
 8328 03bc 08F10602 		add	r2, r8, #6
 8329 03c0 2946     		mov	r1, r5
 8330 03c2 2046     		mov	r0, r4
 8331 03c4 FFF7FEFF 		bl	disk_write
 8332              	.LVL1247:
5666:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
 8333              		.loc 1 5666 0
 8334 03c8 4FF40072 		mov	r2, #512
 8335 03cc 0021     		movs	r1, #0
 8336 03ce 2846     		mov	r0, r5
 8337 03d0 FFF7FEFF 		bl	mem_set
 8338              	.LVL1248:
5667:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
 8339              		.loc 1 5667 0
 8340 03d4 9549     		ldr	r1, .L830+8
 8341 03d6 2846     		mov	r0, r5
 8342 03d8 FFF7FEFF 		bl	st_dword
 8343              	.LVL1249:
5668:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8344              		.loc 1 5668 0
 8345 03dc 9449     		ldr	r1, .L830+12
 8346 03de 05F5F270 		add	r0, r5, #484
 8347 03e2 FFF7FEFF 		bl	st_dword
 8348              	.LVL1250:
5669:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8349              		.loc 1 5669 0
 8350 03e6 0BF1FF31 		add	r1, fp, #-1
 8351 03ea 05F5F470 		add	r0, r5, #488
 8352 03ee FFF7FEFF 		bl	st_dword
 8353              	.LVL1251:
5670:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
 8354              		.loc 1 5670 0
 8355 03f2 0221     		movs	r1, #2
ARM GAS  /tmp/ccBYTIZg.s 			page 273


 8356 03f4 05F5F670 		add	r0, r5, #492
 8357 03f8 FFF7FEFF 		bl	st_dword
 8358              	.LVL1252:
5671:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8359              		.loc 1 5671 0
 8360 03fc 4AF65521 		movw	r1, #43605
 8361 0400 0198     		ldr	r0, [sp, #4]
 8362 0402 FFF7FEFF 		bl	st_word
 8363              	.LVL1253:
5672:Middlewares/Third_Party/FatFs/src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8364              		.loc 1 5672 0
 8365 0406 0123     		movs	r3, #1
 8366 0408 08F10702 		add	r2, r8, #7
 8367 040c 2946     		mov	r1, r5
 8368 040e 2046     		mov	r0, r4
 8369 0410 FFF7FEFF 		bl	disk_write
 8370              	.LVL1254:
5673:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8371              		.loc 1 5673 0
 8372 0414 0123     		movs	r3, #1
 8373 0416 08EB0302 		add	r2, r8, r3
 8374 041a 2946     		mov	r1, r5
 8375 041c 2046     		mov	r0, r4
 8376 041e FFF7FEFF 		bl	disk_write
 8377              	.LVL1255:
 8378              	.L773:
5677:Middlewares/Third_Party/FatFs/src/ff.c **** 		sect = b_fat;		/* FAT start sector */
 8379              		.loc 1 5677 0
 8380 0422 5246     		mov	r2, r10
 8381 0424 0021     		movs	r1, #0
 8382 0426 2846     		mov	r0, r5
 8383 0428 FFF7FEFF 		bl	mem_set
 8384              	.LVL1256:
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 8385              		.loc 1 5679 0
 8386 042c 4FF0000B 		mov	fp, #0
 8387              	.LVL1257:
 8388              	.L774:
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 8389              		.loc 1 5679 0 is_stmt 0 discriminator 1
 8390 0430 BBF1000F 		cmp	fp, #0
 8391 0434 00F08B80 		beq	.L779
5697:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
 8392              		.loc 1 5697 0 is_stmt 1
 8393 0438 032F     		cmp	r7, #3
 8394 043a 40F0C380 		bne	.L820
 8395 043e DDF80CA0 		ldr	r10, [sp, #12]
 8396 0442 B146     		mov	r9, r6
 8397              	.LVL1258:
 8398              	.L781:
5699:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8399              		.loc 1 5699 0
 8400 0444 059B     		ldr	r3, [sp, #20]
 8401 0446 4B45     		cmp	r3, r9
 8402 0448 28BF     		it	cs
 8403 044a 4B46     		movcs	r3, r9
 8404 044c 1E46     		mov	r6, r3
ARM GAS  /tmp/ccBYTIZg.s 			page 274


 8405              	.LVL1259:
5700:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
 8406              		.loc 1 5700 0
 8407 044e 5246     		mov	r2, r10
 8408 0450 2946     		mov	r1, r5
 8409 0452 2046     		mov	r0, r4
 8410 0454 FFF7FEFF 		bl	disk_write
 8411              	.LVL1260:
 8412 0458 0028     		cmp	r0, #0
 8413 045a 40F0DD80 		bne	.L812
5701:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (nsect);
 8414              		.loc 1 5701 0
 8415 045e B244     		add	r10, r10, r6
 8416              	.LVL1261:
5702:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 8417              		.loc 1 5702 0
 8418 0460 B9EB0609 		subs	r9, r9, r6
 8419              	.LVL1262:
 8420 0464 EED1     		bne	.L781
5709:Middlewares/Third_Party/FatFs/src/ff.c **** 			sys = 0x0C;		/* FAT32X */
 8421              		.loc 1 5709 0
 8422 0466 032F     		cmp	r7, #3
 8423 0468 00F0B180 		beq	.L813
5712:Middlewares/Third_Party/FatFs/src/ff.c **** 				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8424              		.loc 1 5712 0
 8425 046c 089B     		ldr	r3, [sp, #32]
 8426 046e B3F5803F 		cmp	r3, #65536
 8427 0472 80F0AF80 		bcs	.L814
5715:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8428              		.loc 1 5715 0
 8429 0476 022F     		cmp	r7, #2
 8430 0478 40F0AF80 		bne	.L815
 8431 047c 4FF00409 		mov	r9, #4
 8432              	.LVL1263:
 8433              	.L782:
5727:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_set(buf, 0, ss);
 8434              		.loc 1 5727 0
 8435 0480 069B     		ldr	r3, [sp, #24]
 8436 0482 CBBB     		cbnz	r3, .L783
5728:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8437              		.loc 1 5728 0
 8438 0484 4FF40072 		mov	r2, #512
 8439 0488 0021     		movs	r1, #0
 8440 048a 2846     		mov	r0, r5
 8441 048c FFF7FEFF 		bl	mem_set
 8442              	.LVL1264:
5729:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8443              		.loc 1 5729 0
 8444 0490 4AF65521 		movw	r1, #43605
 8445 0494 0198     		ldr	r0, [sp, #4]
 8446 0496 FFF7FEFF 		bl	st_word
 8447              	.LVL1265:
5731:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StHead] = 1;				/* Start head */
 8448              		.loc 1 5731 0
 8449 049a 0026     		movs	r6, #0
 8450              	.LVL1266:
 8451 049c 85F8BE61 		strb	r6, [r5, #446]
ARM GAS  /tmp/ccBYTIZg.s 			page 275


5732:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StSec] = 1;					/* Start sector */
 8452              		.loc 1 5732 0
 8453 04a0 0127     		movs	r7, #1
 8454 04a2 85F8BF71 		strb	r7, [r5, #447]
5733:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8455              		.loc 1 5733 0
 8456 04a6 85F8C071 		strb	r7, [r5, #448]
5734:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_System] = sys;				/* System type */
 8457              		.loc 1 5734 0
 8458 04aa 85F8C161 		strb	r6, [r5, #449]
5735:Middlewares/Third_Party/FatFs/src/ff.c **** 			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8459              		.loc 1 5735 0
 8460 04ae 85F8C291 		strb	r9, [r5, #450]
5736:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdHead] = 254;				/* End head */
 8461              		.loc 1 5736 0
 8462 04b2 089B     		ldr	r3, [sp, #32]
 8463 04b4 4344     		add	r3, r3, r8
 8464 04b6 43F6C162 		movw	r2, #16065
 8465 04ba B3FBF2F3 		udiv	r3, r3, r2
 8466              	.LVL1267:
5737:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8467              		.loc 1 5737 0
 8468 04be FE22     		movs	r2, #254
 8469 04c0 85F8C321 		strb	r2, [r5, #451]
5738:Middlewares/Third_Party/FatFs/src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8470              		.loc 1 5738 0
 8471 04c4 9A08     		lsrs	r2, r3, #2
 8472 04c6 42F03F02 		orr	r2, r2, #63
 8473 04ca 85F8C421 		strb	r2, [r5, #452]
5739:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8474              		.loc 1 5739 0
 8475 04ce 85F8C531 		strb	r3, [r5, #453]
5740:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8476              		.loc 1 5740 0
 8477 04d2 4146     		mov	r1, r8
 8478 04d4 05F5E370 		add	r0, r5, #454
 8479 04d8 FFF7FEFF 		bl	st_dword
 8480              	.LVL1268:
5741:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8481              		.loc 1 5741 0
 8482 04dc 0899     		ldr	r1, [sp, #32]
 8483 04de 05F5E570 		add	r0, r5, #458
 8484 04e2 FFF7FEFF 		bl	st_dword
 8485              	.LVL1269:
5742:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8486              		.loc 1 5742 0
 8487 04e6 3B46     		mov	r3, r7
 8488 04e8 3246     		mov	r2, r6
 8489 04ea 2946     		mov	r1, r5
 8490 04ec 2046     		mov	r0, r4
 8491 04ee FFF7FEFF 		bl	disk_write
 8492              	.LVL1270:
 8493 04f2 0028     		cmp	r0, #0
 8494 04f4 40F09280 		bne	.L816
 8495              	.LVL1271:
 8496              	.L783:
5746:Middlewares/Third_Party/FatFs/src/ff.c **** 
ARM GAS  /tmp/ccBYTIZg.s 			page 276


 8497              		.loc 1 5746 0
 8498 04f8 0022     		movs	r2, #0
 8499 04fa 1146     		mov	r1, r2
 8500 04fc 2046     		mov	r0, r4
 8501 04fe FFF7FEFF 		bl	disk_ioctl
 8502              	.LVL1272:
 8503 0502 0028     		cmp	r0, #0
 8504 0504 00F08C80 		beq	.L817
 8505 0508 0120     		movs	r0, #1
 8506 050a 6AE0     		b	.L742
 8507              	.LVL1273:
 8508              	.L808:
5634:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (sz_vol < 0x10000) {
 8509              		.loc 1 5634 0
 8510 050c 0021     		movs	r1, #0
 8511 050e FAE6     		b	.L768
 8512              	.L769:
5638:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8513              		.loc 1 5638 0
 8514 0510 05F12000 		add	r0, r5, #32
 8515 0514 FFF7FEFF 		bl	st_dword
 8516              	.LVL1274:
 8517 0518 01E7     		b	.L770
 8518              	.L771:
5654:Middlewares/Third_Party/FatFs/src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8519              		.loc 1 5654 0
 8520 051a FFF7FEFF 		bl	get_fattime
 8521              	.LVL1275:
 8522 051e 0146     		mov	r1, r0
 8523 0520 05F12700 		add	r0, r5, #39
 8524 0524 FFF7FEFF 		bl	st_dword
 8525              	.LVL1276:
5655:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8526              		.loc 1 5655 0
 8527 0528 BDF80810 		ldrh	r1, [sp, #8]
 8528 052c 05F11600 		add	r0, r5, #22
 8529 0530 FFF7FEFF 		bl	st_word
 8530              	.LVL1277:
5656:Middlewares/Third_Party/FatFs/src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8531              		.loc 1 5656 0
 8532 0534 8023     		movs	r3, #128
 8533 0536 85F82430 		strb	r3, [r5, #36]
5657:Middlewares/Third_Party/FatFs/src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8534              		.loc 1 5657 0
 8535 053a 2923     		movs	r3, #41
 8536 053c 85F82630 		strb	r3, [r5, #38]
5658:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8537              		.loc 1 5658 0
 8538 0540 1322     		movs	r2, #19
 8539 0542 3C49     		ldr	r1, .L830+16
 8540 0544 05F12B00 		add	r0, r5, #43
 8541 0548 FFF7FEFF 		bl	mem_cpy
 8542              	.LVL1278:
 8543 054c 22E7     		b	.L772
 8544              	.LVL1279:
 8545              	.L779:
5680:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
ARM GAS  /tmp/ccBYTIZg.s 			page 277


 8546              		.loc 1 5680 0
 8547 054e 032F     		cmp	r7, #3
 8548 0550 2ED1     		bne	.L775
5681:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8549              		.loc 1 5681 0
 8550 0552 6FF00701 		mvn	r1, #7
 8551 0556 2846     		mov	r0, r5
 8552 0558 FFF7FEFF 		bl	st_dword
 8553              	.LVL1280:
5682:Middlewares/Third_Party/FatFs/src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8554              		.loc 1 5682 0
 8555 055c 4FF0FF31 		mov	r1, #-1
 8556 0560 281D     		adds	r0, r5, #4
 8557 0562 FFF7FEFF 		bl	st_dword
 8558              	.LVL1281:
5683:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 8559              		.loc 1 5683 0
 8560 0566 6FF07041 		mvn	r1, #-268435456
 8561 056a 05F10800 		add	r0, r5, #8
 8562 056e FFF7FEFF 		bl	st_dword
 8563              	.LVL1282:
 8564              	.L776:
5685:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8565              		.loc 1 5685 0
 8566 0572 DDF80890 		ldr	r9, [sp, #8]
 8567 0576 BA46     		mov	r10, r7
 8568              	.L778:
 8569              	.LVL1283:
5689:Middlewares/Third_Party/FatFs/src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8570              		.loc 1 5689 0
 8571 0578 059B     		ldr	r3, [sp, #20]
 8572 057a 4B45     		cmp	r3, r9
 8573 057c 28BF     		it	cs
 8574 057e 4B46     		movcs	r3, r9
 8575 0580 1F46     		mov	r7, r3
 8576              	.LVL1284:
5690:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
 8577              		.loc 1 5690 0
 8578 0582 039A     		ldr	r2, [sp, #12]
 8579 0584 2946     		mov	r1, r5
 8580 0586 2046     		mov	r0, r4
 8581 0588 FFF7FEFF 		bl	disk_write
 8582              	.LVL1285:
 8583 058c 0028     		cmp	r0, #0
 8584 058e 41D1     		bne	.L811
5691:Middlewares/Third_Party/FatFs/src/ff.c **** 				sect += n; nsect -= n;
 8585              		.loc 1 5691 0
 8586 0590 4FF40072 		mov	r2, #512
 8587 0594 0021     		movs	r1, #0
 8588 0596 2846     		mov	r0, r5
 8589 0598 FFF7FEFF 		bl	mem_set
 8590              	.LVL1286:
5692:Middlewares/Third_Party/FatFs/src/ff.c **** 			} while (nsect);
 8591              		.loc 1 5692 0
 8592 059c 039B     		ldr	r3, [sp, #12]
 8593 059e 3B44     		add	r3, r3, r7
 8594 05a0 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccBYTIZg.s 			page 278


 8595              	.LVL1287:
5693:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8596              		.loc 1 5693 0
 8597 05a2 B9EB0709 		subs	r9, r9, r7
 8598              	.LVL1288:
 8599 05a6 E7D1     		bne	.L778
 8600 05a8 5746     		mov	r7, r10
 8601              	.LVL1289:
5679:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (fmt == FS_FAT32) {
 8602              		.loc 1 5679 0 discriminator 2
 8603 05aa 0BF1010B 		add	fp, fp, #1
 8604              	.LVL1290:
 8605 05ae 3FE7     		b	.L774
 8606              	.LVL1291:
 8607              	.L775:
5685:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8608              		.loc 1 5685 0
 8609 05b0 012F     		cmp	r7, #1
 8610 05b2 04D1     		bne	.L810
 8611 05b4 2049     		ldr	r1, .L830+20
 8612              	.L777:
5685:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8613              		.loc 1 5685 0 is_stmt 0 discriminator 4
 8614 05b6 2846     		mov	r0, r5
 8615 05b8 FFF7FEFF 		bl	st_dword
 8616              	.LVL1292:
 8617 05bc D9E7     		b	.L776
 8618              	.L810:
5685:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8619              		.loc 1 5685 0
 8620 05be 6FF00701 		mvn	r1, #7
 8621 05c2 F8E7     		b	.L777
 8622              	.L820:
 8623 05c4 DDF80CA0 		ldr	r10, [sp, #12]
 8624 05c8 DDF81090 		ldr	r9, [sp, #16]
 8625 05cc 3AE7     		b	.L781
 8626              	.LVL1293:
 8627              	.L813:
5710:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
 8628              		.loc 1 5710 0 is_stmt 1
 8629 05ce 4FF00C09 		mov	r9, #12
 8630              	.LVL1294:
 8631 05d2 55E7     		b	.L782
 8632              	.LVL1295:
 8633              	.L814:
5713:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {
 8634              		.loc 1 5713 0
 8635 05d4 4FF00609 		mov	r9, #6
 8636              	.LVL1296:
 8637 05d8 52E7     		b	.L782
 8638              	.LVL1297:
 8639              	.L815:
5715:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
 8640              		.loc 1 5715 0
 8641 05da 4FF00109 		mov	r9, #1
 8642              	.LVL1298:
 8643 05de 4FE7     		b	.L782
ARM GAS  /tmp/ccBYTIZg.s 			page 279


 8644              	.LVL1299:
 8645              	.L784:
5328:Middlewares/Third_Party/FatFs/src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8646              		.loc 1 5328 0
 8647 05e0 0B20     		movs	r0, #11
 8648              	.LVL1300:
 8649              	.L742:
5749:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8650              		.loc 1 5749 0
 8651 05e2 0BB0     		add	sp, sp, #44
 8652              	.LCFI116:
 8653              		.cfi_remember_state
 8654              		.cfi_def_cfa_offset 36
 8655              		@ sp needed
 8656 05e4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 8657              	.LVL1301:
 8658              	.L791:
 8659              	.LCFI117:
 8660              		.cfi_restore_state
5364:Middlewares/Third_Party/FatFs/src/ff.c **** 		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8661              		.loc 1 5364 0
 8662 05e8 0120     		movs	r0, #1
 8663 05ea FAE7     		b	.L742
 8664              	.LVL1302:
 8665              	.L793:
5366:Middlewares/Third_Party/FatFs/src/ff.c **** 		sz_vol -= b_vol;						/* Volume size */
 8666              		.loc 1 5366 0
 8667 05ec 0E20     		movs	r0, #14
 8668 05ee F8E7     		b	.L742
 8669              	.L795:
5378:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8670              		.loc 1 5378 0
 8671 05f0 1320     		movs	r0, #19
 8672 05f2 F6E7     		b	.L742
 8673              	.L798:
5384:Middlewares/Third_Party/FatFs/src/ff.c **** 		fmt = FS_FAT16;
 8674              		.loc 1 5384 0
 8675 05f4 1320     		movs	r0, #19
 8676 05f6 F4E7     		b	.L742
 8677              	.LVL1303:
 8678              	.L800:
5564:Middlewares/Third_Party/FatFs/src/ff.c **** 			} else {				/* FAT12/16 volume */
 8679              		.loc 1 5564 0
 8680 05f8 0E20     		movs	r0, #14
 8681              	.LVL1304:
 8682 05fa F2E7     		b	.L742
 8683              	.LVL1305:
 8684              	.L802:
5593:Middlewares/Third_Party/FatFs/src/ff.c **** 			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8685              		.loc 1 5593 0
 8686 05fc 0E20     		movs	r0, #14
 8687              	.LVL1306:
 8688 05fe F0E7     		b	.L742
 8689              	.LVL1307:
 8690              	.L803:
5598:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8691              		.loc 1 5598 0
ARM GAS  /tmp/ccBYTIZg.s 			page 280


 8692 0600 0E20     		movs	r0, #14
 8693              	.LVL1308:
 8694 0602 EEE7     		b	.L742
 8695              	.LVL1309:
 8696              	.L805:
5610:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8697              		.loc 1 5610 0
 8698 0604 0E20     		movs	r0, #14
 8699              	.LVL1310:
 8700 0606 ECE7     		b	.L742
 8701              	.LVL1311:
 8702              	.L806:
5614:Middlewares/Third_Party/FatFs/src/ff.c **** 				}
 8703              		.loc 1 5614 0
 8704 0608 0E20     		movs	r0, #14
 8705              	.LVL1312:
 8706 060a EAE7     		b	.L742
 8707              	.LVL1313:
 8708              	.L807:
5617:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8709              		.loc 1 5617 0
 8710 060c 0E20     		movs	r0, #14
 8711              	.LVL1314:
 8712 060e E8E7     		b	.L742
 8713              	.LVL1315:
 8714              	.L809:
5661:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8715              		.loc 1 5661 0
 8716 0610 0120     		movs	r0, #1
 8717 0612 E6E7     		b	.L742
 8718              	.LVL1316:
 8719              	.L811:
5690:Middlewares/Third_Party/FatFs/src/ff.c **** 				mem_set(buf, 0, ss);
 8720              		.loc 1 5690 0
 8721 0614 0120     		movs	r0, #1
 8722 0616 E4E7     		b	.L742
 8723              	.LVL1317:
 8724              	.L812:
5700:Middlewares/Third_Party/FatFs/src/ff.c **** 			sect += n; nsect -= n;
 8725              		.loc 1 5700 0
 8726 0618 0120     		movs	r0, #1
 8727 061a E2E7     		b	.L742
 8728              	.LVL1318:
 8729              	.L816:
5742:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 8730              		.loc 1 5742 0
 8731 061c 0120     		movs	r0, #1
 8732 061e E0E7     		b	.L742
 8733              	.LVL1319:
 8734              	.L817:
5748:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8735              		.loc 1 5748 0
 8736 0620 0020     		movs	r0, #0
 8737 0622 DEE7     		b	.L742
 8738              	.L831:
 8739              		.align	2
 8740              	.L830:
ARM GAS  /tmp/ccBYTIZg.s 			page 281


 8741 0624 00000000 		.word	.LC1
 8742 0628 0C000000 		.word	.LC2
 8743 062c 52526141 		.word	1096897106
 8744 0630 72724161 		.word	1631679090
 8745 0634 20000000 		.word	.LC3
 8746 0638 F8FFFF00 		.word	16777208
 8747              		.cfi_endproc
 8748              	.LFE195:
 8750              		.section	.text.f_gets,"ax",%progbits
 8751              		.align	1
 8752              		.global	f_gets
 8753              		.syntax unified
 8754              		.thumb
 8755              		.thumb_func
 8756              		.fpu fpv5-d16
 8758              	f_gets:
 8759              	.LFB196:
5835:Middlewares/Third_Party/FatFs/src/ff.c **** 	int n = 0;
 8760              		.loc 1 5835 0
 8761              		.cfi_startproc
 8762              		@ args = 0, pretend = 0, frame = 8
 8763              		@ frame_needed = 0, uses_anonymous_args = 0
 8764              	.LVL1320:
 8765 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8766              	.LCFI118:
 8767              		.cfi_def_cfa_offset 24
 8768              		.cfi_offset 4, -24
 8769              		.cfi_offset 5, -20
 8770              		.cfi_offset 6, -16
 8771              		.cfi_offset 7, -12
 8772              		.cfi_offset 8, -8
 8773              		.cfi_offset 14, -4
 8774 0004 82B0     		sub	sp, sp, #8
 8775              	.LCFI119:
 8776              		.cfi_def_cfa_offset 32
 8777 0006 8046     		mov	r8, r0
 8778 0008 0E46     		mov	r6, r1
 8779 000a 1746     		mov	r7, r2
 8780              	.LVL1321:
5837:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE s[2];
 8781              		.loc 1 5837 0
 8782 000c 0546     		mov	r5, r0
5836:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, *p = buff;
 8783              		.loc 1 5836 0
 8784 000e 0024     		movs	r4, #0
 8785              	.LVL1322:
 8786              	.L833:
5842:Middlewares/Third_Party/FatFs/src/ff.c **** #if _LFN_UNICODE
 8787              		.loc 1 5842 0
 8788 0010 731E     		subs	r3, r6, #1
 8789 0012 9C42     		cmp	r4, r3
 8790 0014 14DA     		bge	.L834
5887:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (rc != 1) break;
 8791              		.loc 1 5887 0
 8792 0016 6B46     		mov	r3, sp
 8793 0018 0122     		movs	r2, #1
 8794 001a 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccBYTIZg.s 			page 282


 8795 001c 3846     		mov	r0, r7
 8796 001e FFF7FEFF 		bl	f_read
 8797              	.LVL1323:
5888:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = s[0];
 8798              		.loc 1 5888 0
 8799 0022 009B     		ldr	r3, [sp]
 8800 0024 012B     		cmp	r3, #1
 8801 0026 0BD1     		bne	.L834
5889:Middlewares/Third_Party/FatFs/src/ff.c **** #endif
 8802              		.loc 1 5889 0
 8803 0028 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 8804              	.LVL1324:
5891:Middlewares/Third_Party/FatFs/src/ff.c **** 		*p++ = c;
 8805              		.loc 1 5891 0
 8806 002c 0D2B     		cmp	r3, #13
 8807 002e EFD0     		beq	.L833
5892:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
 8808              		.loc 1 5892 0
 8809 0030 6A1C     		adds	r2, r5, #1
 8810              	.LVL1325:
 8811 0032 2B70     		strb	r3, [r5]
5893:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '\n') break;		/* Break on EOL */
 8812              		.loc 1 5893 0
 8813 0034 0134     		adds	r4, r4, #1
 8814              	.LVL1326:
5894:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
 8815              		.loc 1 5894 0
 8816 0036 0A2B     		cmp	r3, #10
 8817 0038 01D0     		beq	.L838
5892:Middlewares/Third_Party/FatFs/src/ff.c **** 		n++;
 8818              		.loc 1 5892 0
 8819 003a 1546     		mov	r5, r2
 8820 003c E8E7     		b	.L833
 8821              	.L838:
 8822 003e 1546     		mov	r5, r2
 8823              	.LVL1327:
 8824              	.L834:
5896:Middlewares/Third_Party/FatFs/src/ff.c **** 	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8825              		.loc 1 5896 0
 8826 0040 0023     		movs	r3, #0
 8827 0042 2B70     		strb	r3, [r5]
5897:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8828              		.loc 1 5897 0
 8829 0044 1CB1     		cbz	r4, .L839
 8830 0046 4046     		mov	r0, r8
 8831              	.L832:
5898:Middlewares/Third_Party/FatFs/src/ff.c **** 
 8832              		.loc 1 5898 0
 8833 0048 02B0     		add	sp, sp, #8
 8834              	.LCFI120:
 8835              		.cfi_remember_state
 8836              		.cfi_def_cfa_offset 24
 8837              		@ sp needed
 8838 004a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8839              	.LVL1328:
 8840              	.L839:
 8841              	.LCFI121:
ARM GAS  /tmp/ccBYTIZg.s 			page 283


 8842              		.cfi_restore_state
5897:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8843              		.loc 1 5897 0
 8844 004e 0020     		movs	r0, #0
 8845 0050 FAE7     		b	.L832
 8846              		.cfi_endproc
 8847              	.LFE196:
 8849              		.section	.text.f_putc,"ax",%progbits
 8850              		.align	1
 8851              		.global	f_putc
 8852              		.syntax unified
 8853              		.thumb
 8854              		.thumb_func
 8855              		.fpu fpv5-d16
 8857              	f_putc:
 8858              	.LFB200:
5994:Middlewares/Third_Party/FatFs/src/ff.c **** }
5995:Middlewares/Third_Party/FatFs/src/ff.c **** 
5996:Middlewares/Third_Party/FatFs/src/ff.c **** 
5997:Middlewares/Third_Party/FatFs/src/ff.c **** 
5998:Middlewares/Third_Party/FatFs/src/ff.c **** int f_putc (
5999:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c,	/* A character to be output */
6000:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp		/* Pointer to the file object */
6001:Middlewares/Third_Party/FatFs/src/ff.c **** )
6002:Middlewares/Third_Party/FatFs/src/ff.c **** {
 8859              		.loc 1 6002 0
 8860              		.cfi_startproc
 8861              		@ args = 0, pretend = 0, frame = 80
 8862              		@ frame_needed = 0, uses_anonymous_args = 0
 8863              	.LVL1329:
 8864 0000 10B5     		push	{r4, lr}
 8865              	.LCFI122:
 8866              		.cfi_def_cfa_offset 8
 8867              		.cfi_offset 4, -8
 8868              		.cfi_offset 14, -4
 8869 0002 94B0     		sub	sp, sp, #80
 8870              	.LCFI123:
 8871              		.cfi_def_cfa_offset 88
 8872 0004 0446     		mov	r4, r0
6003:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
6004:Middlewares/Third_Party/FatFs/src/ff.c **** 
6005:Middlewares/Third_Party/FatFs/src/ff.c **** 
6006:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 8873              		.loc 1 6006 0
 8874 0006 01A8     		add	r0, sp, #4
 8875              	.LVL1330:
 8876 0008 FFF7FEFF 		bl	putc_init
 8877              	.LVL1331:
6007:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 8878              		.loc 1 6007 0
 8879 000c 2146     		mov	r1, r4
 8880 000e 01A8     		add	r0, sp, #4
 8881 0010 FFF7FEFF 		bl	putc_bfd
 8882              	.LVL1332:
6008:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 8883              		.loc 1 6008 0
 8884 0014 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccBYTIZg.s 			page 284


 8885 0016 FFF7FEFF 		bl	putc_flush
 8886              	.LVL1333:
6009:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8887              		.loc 1 6009 0
 8888 001a 14B0     		add	sp, sp, #80
 8889              	.LCFI124:
 8890              		.cfi_def_cfa_offset 8
 8891              		@ sp needed
 8892 001c 10BD     		pop	{r4, pc}
 8893              		.cfi_endproc
 8894              	.LFE200:
 8896              		.section	.text.f_puts,"ax",%progbits
 8897              		.align	1
 8898              		.global	f_puts
 8899              		.syntax unified
 8900              		.thumb
 8901              		.thumb_func
 8902              		.fpu fpv5-d16
 8904              	f_puts:
 8905              	.LFB201:
6010:Middlewares/Third_Party/FatFs/src/ff.c **** 
6011:Middlewares/Third_Party/FatFs/src/ff.c **** 
6012:Middlewares/Third_Party/FatFs/src/ff.c **** 
6013:Middlewares/Third_Party/FatFs/src/ff.c **** 
6014:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6015:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a string to the file                                              */
6016:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6017:Middlewares/Third_Party/FatFs/src/ff.c **** 
6018:Middlewares/Third_Party/FatFs/src/ff.c **** int f_puts (
6019:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6020:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp				/* Pointer to the file object */
6021:Middlewares/Third_Party/FatFs/src/ff.c **** )
6022:Middlewares/Third_Party/FatFs/src/ff.c **** {
 8906              		.loc 1 6022 0
 8907              		.cfi_startproc
 8908              		@ args = 0, pretend = 0, frame = 80
 8909              		@ frame_needed = 0, uses_anonymous_args = 0
 8910              	.LVL1334:
 8911 0000 10B5     		push	{r4, lr}
 8912              	.LCFI125:
 8913              		.cfi_def_cfa_offset 8
 8914              		.cfi_offset 4, -8
 8915              		.cfi_offset 14, -4
 8916 0002 94B0     		sub	sp, sp, #80
 8917              	.LCFI126:
 8918              		.cfi_def_cfa_offset 88
 8919 0004 0446     		mov	r4, r0
6023:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
6024:Middlewares/Third_Party/FatFs/src/ff.c **** 
6025:Middlewares/Third_Party/FatFs/src/ff.c **** 
6026:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 8920              		.loc 1 6026 0
 8921 0006 01A8     		add	r0, sp, #4
 8922              	.LVL1335:
 8923 0008 FFF7FEFF 		bl	putc_init
 8924              	.LVL1336:
6027:Middlewares/Third_Party/FatFs/src/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
ARM GAS  /tmp/ccBYTIZg.s 			page 285


 8925              		.loc 1 6027 0
 8926 000c 03E0     		b	.L844
 8927              	.L845:
 8928              		.loc 1 6027 0 is_stmt 0 discriminator 2
 8929 000e 0134     		adds	r4, r4, #1
 8930              	.LVL1337:
 8931 0010 01A8     		add	r0, sp, #4
 8932 0012 FFF7FEFF 		bl	putc_bfd
 8933              	.LVL1338:
 8934              	.L844:
 8935              		.loc 1 6027 0 discriminator 1
 8936 0016 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 8937 0018 0029     		cmp	r1, #0
 8938 001a F8D1     		bne	.L845
6028:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 8939              		.loc 1 6028 0 is_stmt 1
 8940 001c 01A8     		add	r0, sp, #4
 8941 001e FFF7FEFF 		bl	putc_flush
 8942              	.LVL1339:
6029:Middlewares/Third_Party/FatFs/src/ff.c **** }
 8943              		.loc 1 6029 0
 8944 0022 14B0     		add	sp, sp, #80
 8945              	.LCFI127:
 8946              		.cfi_def_cfa_offset 8
 8947              		@ sp needed
 8948 0024 10BD     		pop	{r4, pc}
 8949              		.cfi_endproc
 8950              	.LFE201:
 8952              		.section	.text.f_printf,"ax",%progbits
 8953              		.align	1
 8954              		.global	f_printf
 8955              		.syntax unified
 8956              		.thumb
 8957              		.thumb_func
 8958              		.fpu fpv5-d16
 8960              	f_printf:
 8961              	.LFB202:
6030:Middlewares/Third_Party/FatFs/src/ff.c **** 
6031:Middlewares/Third_Party/FatFs/src/ff.c **** 
6032:Middlewares/Third_Party/FatFs/src/ff.c **** 
6033:Middlewares/Third_Party/FatFs/src/ff.c **** 
6034:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6035:Middlewares/Third_Party/FatFs/src/ff.c **** /* Put a formatted string to the file                                    */
6036:Middlewares/Third_Party/FatFs/src/ff.c **** /*-----------------------------------------------------------------------*/
6037:Middlewares/Third_Party/FatFs/src/ff.c **** 
6038:Middlewares/Third_Party/FatFs/src/ff.c **** int f_printf (
6039:Middlewares/Third_Party/FatFs/src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6040:Middlewares/Third_Party/FatFs/src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6041:Middlewares/Third_Party/FatFs/src/ff.c **** 	...					/* Optional arguments... */
6042:Middlewares/Third_Party/FatFs/src/ff.c **** )
6043:Middlewares/Third_Party/FatFs/src/ff.c **** {
 8962              		.loc 1 6043 0
 8963              		.cfi_startproc
 8964              		@ args = 4, pretend = 12, frame = 112
 8965              		@ frame_needed = 0, uses_anonymous_args = 1
 8966              	.LVL1340:
 8967 0000 0EB4     		push	{r1, r2, r3}
ARM GAS  /tmp/ccBYTIZg.s 			page 286


 8968              	.LCFI128:
 8969              		.cfi_def_cfa_offset 12
 8970              		.cfi_offset 1, -12
 8971              		.cfi_offset 2, -8
 8972              		.cfi_offset 3, -4
 8973 0002 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 8974              	.LCFI129:
 8975              		.cfi_def_cfa_offset 44
 8976              		.cfi_offset 4, -44
 8977              		.cfi_offset 5, -40
 8978              		.cfi_offset 6, -36
 8979              		.cfi_offset 7, -32
 8980              		.cfi_offset 8, -28
 8981              		.cfi_offset 9, -24
 8982              		.cfi_offset 10, -20
 8983              		.cfi_offset 14, -16
 8984 0006 9DB0     		sub	sp, sp, #116
 8985              	.LCFI130:
 8986              		.cfi_def_cfa_offset 160
 8987 0008 25AC     		add	r4, sp, #148
 8988 000a 54F8046B 		ldr	r6, [r4], #4
6044:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_list arp;
6045:Middlewares/Third_Party/FatFs/src/ff.c **** 	putbuff pb;
6046:Middlewares/Third_Party/FatFs/src/ff.c **** 	BYTE f, r;
6047:Middlewares/Third_Party/FatFs/src/ff.c **** 	UINT i, j, w;
6048:Middlewares/Third_Party/FatFs/src/ff.c **** 	DWORD v;
6049:Middlewares/Third_Party/FatFs/src/ff.c **** 	TCHAR c, d, str[32], *p;
6050:Middlewares/Third_Party/FatFs/src/ff.c **** 
6051:Middlewares/Third_Party/FatFs/src/ff.c **** 
6052:Middlewares/Third_Party/FatFs/src/ff.c **** 	putc_init(&pb, fp);
 8989              		.loc 1 6052 0
 8990 000e 0146     		mov	r1, r0
 8991 0010 08A8     		add	r0, sp, #32
 8992              	.LVL1341:
 8993 0012 FFF7FEFF 		bl	putc_init
 8994              	.LVL1342:
6053:Middlewares/Third_Party/FatFs/src/ff.c **** 
6054:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_start(arp, fmt);
 8995              		.loc 1 6054 0
 8996 0016 1B94     		str	r4, [sp, #108]
 8997 0018 F9E0     		b	.L848
 8998              	.LVL1343:
 8999              	.L850:
6055:Middlewares/Third_Party/FatFs/src/ff.c **** 
6056:Middlewares/Third_Party/FatFs/src/ff.c **** 	for (;;) {
6057:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
6058:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) break;			/* End of string */
6059:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '%') {				/* Non escape character */
6060:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c);
6061:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
6062:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6063:Middlewares/Third_Party/FatFs/src/ff.c **** 		w = f = 0;
6064:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
 9000              		.loc 1 6064 0
 9001 001a 0236     		adds	r6, r6, #2
 9002              	.LVL1344:
 9003 001c 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
ARM GAS  /tmp/ccBYTIZg.s 			page 287


 9004              	.LVL1345:
6065:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 9005              		.loc 1 6065 0
 9006 001e 3029     		cmp	r1, #48
 9007 0020 04D0     		beq	.L897
6066:Middlewares/Third_Party/FatFs/src/ff.c **** 			f = 1; c = *fmt++;
6067:Middlewares/Third_Party/FatFs/src/ff.c **** 		} else {
6068:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 9008              		.loc 1 6068 0
 9009 0022 2D29     		cmp	r1, #45
 9010 0024 06D0     		beq	.L898
6063:Middlewares/Third_Party/FatFs/src/ff.c **** 		c = *fmt++;
 9011              		.loc 1 6063 0
 9012 0026 0027     		movs	r7, #0
 9013              	.LVL1346:
 9014              	.L853:
6066:Middlewares/Third_Party/FatFs/src/ff.c **** 			f = 1; c = *fmt++;
 9015              		.loc 1 6066 0
 9016 0028 0025     		movs	r5, #0
 9017 002a 0EE0     		b	.L854
 9018              	.LVL1347:
 9019              	.L897:
 9020 002c A61C     		adds	r6, r4, #2
 9021              	.LVL1348:
 9022 002e 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 9023              	.LVL1349:
 9024 0030 0127     		movs	r7, #1
 9025 0032 F9E7     		b	.L853
 9026              	.LVL1350:
 9027              	.L898:
6069:Middlewares/Third_Party/FatFs/src/ff.c **** 				f = 2; c = *fmt++;
 9028              		.loc 1 6069 0
 9029 0034 A61C     		adds	r6, r4, #2
 9030              	.LVL1351:
 9031 0036 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 9032              	.LVL1352:
 9033 0038 0227     		movs	r7, #2
 9034 003a F5E7     		b	.L853
 9035              	.LVL1353:
 9036              	.L855:
6070:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
6071:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6072:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (IsDigit(c)) {		/* Precision */
6073:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = w * 10 + c - '0';
 9037              		.loc 1 6073 0
 9038 003c 05EB8505 		add	r5, r5, r5, lsl #2
 9039              	.LVL1354:
 9040 0040 6B00     		lsls	r3, r5, #1
 9041 0042 CD18     		adds	r5, r1, r3
 9042 0044 303D     		subs	r5, r5, #48
 9043              	.LVL1355:
6074:Middlewares/Third_Party/FatFs/src/ff.c **** 			c = *fmt++;
 9044              		.loc 1 6074 0
 9045 0046 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 9046              	.LVL1356:
 9047 0048 0136     		adds	r6, r6, #1
 9048              	.LVL1357:
ARM GAS  /tmp/ccBYTIZg.s 			page 288


 9049              	.L854:
6072:Middlewares/Third_Party/FatFs/src/ff.c **** 			w = w * 10 + c - '0';
 9050              		.loc 1 6072 0
 9051 004a A1F13003 		sub	r3, r1, #48
 9052 004e DBB2     		uxtb	r3, r3
 9053 0050 092B     		cmp	r3, #9
 9054 0052 F3D9     		bls	.L855
6075:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6076:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 9055              		.loc 1 6076 0
 9056 0054 4C29     		cmp	r1, #76
 9057 0056 18BF     		it	ne
 9058 0058 6C29     		cmpne	r1, #108
 9059 005a 03D1     		bne	.L856
6077:Middlewares/Third_Party/FatFs/src/ff.c **** 			f |= 4; c = *fmt++;
 9060              		.loc 1 6077 0
 9061 005c 47F00407 		orr	r7, r7, #4
 9062              	.LVL1358:
 9063 0060 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 9064              	.LVL1359:
 9065 0062 0136     		adds	r6, r6, #1
 9066              	.LVL1360:
 9067              	.L856:
6078:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6079:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (!c) break;
 9068              		.loc 1 6079 0
 9069 0064 0029     		cmp	r1, #0
 9070 0066 00F0DD80 		beq	.L849
 9071              	.LVL1361:
6080:Middlewares/Third_Party/FatFs/src/ff.c **** 		d = c;
6081:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 9072              		.loc 1 6081 0
 9073 006a A1F16103 		sub	r3, r1, #97
 9074 006e DBB2     		uxtb	r3, r3
 9075 0070 192B     		cmp	r3, #25
 9076 0072 14D8     		bhi	.L891
 9077              		.loc 1 6081 0 is_stmt 0 discriminator 1
 9078 0074 A1F12003 		sub	r3, r1, #32
 9079 0078 DBB2     		uxtb	r3, r3
 9080              	.LVL1362:
 9081              	.L857:
6082:Middlewares/Third_Party/FatFs/src/ff.c **** 		switch (d) {				/* Type is... */
 9082              		.loc 1 6082 0 is_stmt 1
 9083 007a A3F14202 		sub	r2, r3, #66
 9084 007e 162A     		cmp	r2, #22
 9085 0080 48D8     		bhi	.L858
 9086 0082 DFE802F0 		tbb	[pc, r2]
 9087              	.L860:
 9088 0086 4B       		.byte	(.L859-.L860)/2
 9089 0087 39       		.byte	(.L861-.L860)/2
 9090 0088 41       		.byte	(.L862-.L860)/2
 9091 0089 47       		.byte	(.L858-.L860)/2
 9092 008a 47       		.byte	(.L858-.L860)/2
 9093 008b 47       		.byte	(.L858-.L860)/2
 9094 008c 47       		.byte	(.L858-.L860)/2
 9095 008d 47       		.byte	(.L858-.L860)/2
 9096 008e 47       		.byte	(.L858-.L860)/2
ARM GAS  /tmp/ccBYTIZg.s 			page 289


 9097 008f 47       		.byte	(.L858-.L860)/2
 9098 0090 47       		.byte	(.L858-.L860)/2
 9099 0091 47       		.byte	(.L858-.L860)/2
 9100 0092 47       		.byte	(.L858-.L860)/2
 9101 0093 4E       		.byte	(.L892-.L860)/2
 9102 0094 47       		.byte	(.L858-.L860)/2
 9103 0095 47       		.byte	(.L858-.L860)/2
 9104 0096 47       		.byte	(.L858-.L860)/2
 9105 0097 0E       		.byte	(.L864-.L860)/2
 9106 0098 47       		.byte	(.L858-.L860)/2
 9107 0099 41       		.byte	(.L862-.L860)/2
 9108 009a 47       		.byte	(.L858-.L860)/2
 9109 009b 47       		.byte	(.L858-.L860)/2
 9110 009c 44       		.byte	(.L865-.L860)/2
 9111              	.LVL1363:
 9112 009d 00       		.p2align 1
 9113              	.L891:
6080:Middlewares/Third_Party/FatFs/src/ff.c **** 		d = c;
 9114              		.loc 1 6080 0
 9115 009e 0B46     		mov	r3, r1
 9116 00a0 EBE7     		b	.L857
 9117              	.LVL1364:
 9118              	.L864:
6083:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'S' :					/* String */
6084:Middlewares/Third_Party/FatFs/src/ff.c **** 			p = va_arg(arp, TCHAR*);
 9119              		.loc 1 6084 0
 9120 00a2 1B9B     		ldr	r3, [sp, #108]
 9121              	.LVL1365:
 9122 00a4 1A1D     		adds	r2, r3, #4
 9123 00a6 1B92     		str	r2, [sp, #108]
 9124 00a8 1C68     		ldr	r4, [r3]
 9125              	.LVL1366:
6085:Middlewares/Third_Party/FatFs/src/ff.c **** 			for (j = 0; p[j]; j++) ;
 9126              		.loc 1 6085 0
 9127 00aa 0023     		movs	r3, #0
 9128 00ac 00E0     		b	.L866
 9129              	.LVL1367:
 9130              	.L867:
 9131              		.loc 1 6085 0 is_stmt 0 discriminator 3
 9132 00ae 0133     		adds	r3, r3, #1
 9133              	.LVL1368:
 9134              	.L866:
 9135              		.loc 1 6085 0 discriminator 1
 9136 00b0 E25C     		ldrb	r2, [r4, r3]	@ zero_extendqisi2
 9137 00b2 002A     		cmp	r2, #0
 9138 00b4 FBD1     		bne	.L867
6086:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (!(f & 2)) {
 9139              		.loc 1 6086 0 is_stmt 1
 9140 00b6 17F0020F 		tst	r7, #2
 9141 00ba 07D0     		beq	.L868
 9142 00bc 1F46     		mov	r7, r3
 9143              	.LVL1369:
 9144 00be 0DE0     		b	.L871
 9145              	.LVL1370:
 9146              	.L870:
6087:Middlewares/Third_Party/FatFs/src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ');
 9147              		.loc 1 6087 0 discriminator 2
ARM GAS  /tmp/ccBYTIZg.s 			page 290


 9148 00c0 2021     		movs	r1, #32
 9149 00c2 0DEB0100 		add	r0, sp, r1
 9150 00c6 FFF7FEFF 		bl	putc_bfd
 9151              	.LVL1371:
 9152 00ca 3B46     		mov	r3, r7
 9153              	.LVL1372:
 9154              	.L868:
 9155              		.loc 1 6087 0 is_stmt 0 discriminator 1
 9156 00cc 5F1C     		adds	r7, r3, #1
 9157              	.LVL1373:
 9158 00ce AB42     		cmp	r3, r5
 9159 00d0 F6D3     		bcc	.L870
 9160 00d2 03E0     		b	.L871
 9161              	.LVL1374:
 9162              	.L872:
6088:Middlewares/Third_Party/FatFs/src/ff.c **** 			}
6089:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (*p) putc_bfd(&pb, *p++);
 9163              		.loc 1 6089 0 is_stmt 1 discriminator 2
 9164 00d4 0134     		adds	r4, r4, #1
 9165              	.LVL1375:
 9166 00d6 08A8     		add	r0, sp, #32
 9167 00d8 FFF7FEFF 		bl	putc_bfd
 9168              	.LVL1376:
 9169              	.L871:
 9170              		.loc 1 6089 0 is_stmt 0 discriminator 1
 9171 00dc 2178     		ldrb	r1, [r4]	@ zero_extendqisi2
 9172 00de 0029     		cmp	r1, #0
 9173 00e0 F8D1     		bne	.L872
 9174 00e2 05E0     		b	.L873
 9175              	.LVL1377:
 9176              	.L874:
6090:Middlewares/Third_Party/FatFs/src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ');
 9177              		.loc 1 6090 0 is_stmt 1 discriminator 2
 9178 00e4 2021     		movs	r1, #32
 9179 00e6 0DEB0100 		add	r0, sp, r1
 9180 00ea FFF7FEFF 		bl	putc_bfd
 9181              	.LVL1378:
 9182 00ee 2746     		mov	r7, r4
 9183              	.LVL1379:
 9184              	.L873:
 9185              		.loc 1 6090 0 is_stmt 0 discriminator 1
 9186 00f0 7C1C     		adds	r4, r7, #1
 9187              	.LVL1380:
 9188 00f2 AF42     		cmp	r7, r5
 9189 00f4 F6D3     		bcc	.L874
 9190 00f6 8AE0     		b	.L848
 9191              	.LVL1381:
 9192              	.L861:
6091:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
6092:Middlewares/Third_Party/FatFs/src/ff.c **** 
6093:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'C' :					/* Character */
6094:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 9193              		.loc 1 6094 0 is_stmt 1
 9194 00f8 1B9B     		ldr	r3, [sp, #108]
 9195              	.LVL1382:
 9196 00fa 1A1D     		adds	r2, r3, #4
 9197 00fc 1B92     		str	r2, [sp, #108]
ARM GAS  /tmp/ccBYTIZg.s 			page 291


 9198 00fe 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 9199              	.LVL1383:
 9200 0100 08A8     		add	r0, sp, #32
 9201 0102 FFF7FEFF 		bl	putc_bfd
 9202              	.LVL1384:
 9203 0106 82E0     		b	.L848
 9204              	.LVL1385:
 9205              	.L862:
6095:Middlewares/Third_Party/FatFs/src/ff.c **** 
6096:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'B' :					/* Binary */
6097:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 2; break;
6098:Middlewares/Third_Party/FatFs/src/ff.c **** 
6099:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'O' :					/* Octal */
6100:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 8; break;
6101:Middlewares/Third_Party/FatFs/src/ff.c **** 
6102:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'D' :					/* Signed decimal */
6103:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'U' :					/* Unsigned decimal */
6104:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 10; break;
 9206              		.loc 1 6104 0
 9207 0108 4FF00A0C 		mov	ip, #10
 9208 010c 0BE0     		b	.L863
 9209              	.LVL1386:
 9210              	.L865:
6105:Middlewares/Third_Party/FatFs/src/ff.c **** 
6106:Middlewares/Third_Party/FatFs/src/ff.c **** 		case 'X' :					/* Hexdecimal */
6107:Middlewares/Third_Party/FatFs/src/ff.c **** 			r = 16; break;
 9211              		.loc 1 6107 0
 9212 010e 4FF0100C 		mov	ip, #16
 9213 0112 08E0     		b	.L863
 9214              	.LVL1387:
 9215              	.L858:
6108:Middlewares/Third_Party/FatFs/src/ff.c **** 
6109:Middlewares/Third_Party/FatFs/src/ff.c **** 		default:					/* Unknown type (pass-through) */
6110:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c); continue;
 9216              		.loc 1 6110 0
 9217 0114 08A8     		add	r0, sp, #32
 9218 0116 FFF7FEFF 		bl	putc_bfd
 9219              	.LVL1388:
 9220 011a 78E0     		b	.L848
 9221              	.LVL1389:
 9222              	.L859:
6097:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9223              		.loc 1 6097 0
 9224 011c 4FF0020C 		mov	ip, #2
 9225 0120 01E0     		b	.L863
 9226              	.L892:
6100:Middlewares/Third_Party/FatFs/src/ff.c **** 
 9227              		.loc 1 6100 0
 9228 0122 4FF0080C 		mov	ip, #8
 9229              	.L863:
 9230              	.LVL1390:
6111:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6112:Middlewares/Third_Party/FatFs/src/ff.c **** 
6113:Middlewares/Third_Party/FatFs/src/ff.c **** 		/* Get an argument and put it in numeral */
6114:Middlewares/Third_Party/FatFs/src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 9231              		.loc 1 6114 0
 9232 0126 17F0040F 		tst	r7, #4
ARM GAS  /tmp/ccBYTIZg.s 			page 292


 9233 012a 12D1     		bne	.L899
 9234              		.loc 1 6114 0 is_stmt 0 discriminator 2
 9235 012c 442B     		cmp	r3, #68
 9236 012e 15D0     		beq	.L900
 9237              		.loc 1 6114 0
 9238 0130 1B9A     		ldr	r2, [sp, #108]
 9239 0132 101D     		adds	r0, r2, #4
 9240 0134 1B90     		str	r0, [sp, #108]
 9241 0136 1068     		ldr	r0, [r2]
 9242              	.L876:
 9243              	.LVL1391:
6115:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 9244              		.loc 1 6115 0 is_stmt 1 discriminator 8
 9245 0138 C20F     		lsrs	r2, r0, #31
 9246 013a 442B     		cmp	r3, #68
 9247 013c 14BF     		ite	ne
 9248 013e 0023     		movne	r3, #0
 9249 0140 02F00103 		andeq	r3, r2, #1
 9250              	.LVL1392:
 9251 0144 13B1     		cbz	r3, .L878
6116:Middlewares/Third_Party/FatFs/src/ff.c **** 			v = 0 - v;
 9252              		.loc 1 6116 0
 9253 0146 4042     		negs	r0, r0
 9254              	.LVL1393:
6117:Middlewares/Third_Party/FatFs/src/ff.c **** 			f |= 8;
 9255              		.loc 1 6117 0
 9256 0148 47F00807 		orr	r7, r7, #8
 9257              	.LVL1394:
 9258              	.L878:
6118:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
6119:Middlewares/Third_Party/FatFs/src/ff.c **** 		i = 0;
 9259              		.loc 1 6119 0
 9260 014c 4FF0000E 		mov	lr, #0
 9261 0150 1CE0     		b	.L881
 9262              	.LVL1395:
 9263              	.L899:
6114:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 9264              		.loc 1 6114 0
 9265 0152 1B9A     		ldr	r2, [sp, #108]
 9266 0154 101D     		adds	r0, r2, #4
 9267 0156 1B90     		str	r0, [sp, #108]
 9268 0158 1068     		ldr	r0, [r2]
 9269 015a EDE7     		b	.L876
 9270              	.L900:
 9271 015c 1B9A     		ldr	r2, [sp, #108]
 9272 015e 101D     		adds	r0, r2, #4
 9273 0160 1B90     		str	r0, [sp, #108]
 9274 0162 1068     		ldr	r0, [r2]
 9275 0164 E8E7     		b	.L876
 9276              	.LVL1396:
 9277              	.L902:
6120:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
6121:Middlewares/Third_Party/FatFs/src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
6122:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 9278              		.loc 1 6122 0
 9279 0166 2724     		movs	r4, #39
 9280              	.L880:
ARM GAS  /tmp/ccBYTIZg.s 			page 293


 9281              		.loc 1 6122 0 is_stmt 0 discriminator 5
 9282 0168 2344     		add	r3, r3, r4
 9283              	.LVL1397:
 9284 016a DBB2     		uxtb	r3, r3
 9285              	.LVL1398:
 9286              	.L879:
6123:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9287              		.loc 1 6123 0 is_stmt 1
 9288 016c 0EF10104 		add	r4, lr, #1
 9289              	.LVL1399:
 9290 0170 3033     		adds	r3, r3, #48
 9291              	.LVL1400:
 9292 0172 0DF17008 		add	r8, sp, #112
 9293 0176 F044     		add	r8, r8, lr
 9294 0178 08F8703C 		strb	r3, [r8, #-112]
6124:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (v && i < sizeof str / sizeof str[0]);
 9295              		.loc 1 6124 0
 9296 017c 0032     		adds	r2, r2, #0
 9297 017e 18BF     		it	ne
 9298 0180 0122     		movne	r2, #1
 9299 0182 1F2C     		cmp	r4, #31
 9300 0184 88BF     		it	hi
 9301 0186 0022     		movhi	r2, #0
 9302 0188 62B1     		cbz	r2, .L901
6123:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9303              		.loc 1 6123 0
 9304 018a A646     		mov	lr, r4
 9305              	.LVL1401:
 9306              	.L881:
6121:Middlewares/Third_Party/FatFs/src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 9307              		.loc 1 6121 0
 9308 018c B0FBFCF2 		udiv	r2, r0, ip
 9309 0190 0CFB1203 		mls	r3, ip, r2, r0
 9310 0194 DBB2     		uxtb	r3, r3
 9311              	.LVL1402:
 9312 0196 1046     		mov	r0, r2
 9313              	.LVL1403:
6122:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9314              		.loc 1 6122 0
 9315 0198 092B     		cmp	r3, #9
 9316 019a E7D9     		bls	.L879
6122:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9317              		.loc 1 6122 0 is_stmt 0 discriminator 1
 9318 019c 7829     		cmp	r1, #120
 9319 019e E2D0     		beq	.L902
6122:Middlewares/Third_Party/FatFs/src/ff.c **** 			str[i++] = d + '0';
 9320              		.loc 1 6122 0
 9321 01a0 0724     		movs	r4, #7
 9322 01a2 E1E7     		b	.L880
 9323              	.LVL1404:
 9324              	.L901:
6125:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (f & 8) str[i++] = '-';
 9325              		.loc 1 6125 0 is_stmt 1
 9326 01a4 17F0080F 		tst	r7, #8
 9327 01a8 06D0     		beq	.L882
 9328              	.LVL1405:
 9329              		.loc 1 6125 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccBYTIZg.s 			page 294


 9330 01aa 1CAB     		add	r3, sp, #112
 9331 01ac 1C44     		add	r4, r4, r3
 9332 01ae 2D23     		movs	r3, #45
 9333 01b0 04F8703C 		strb	r3, [r4, #-112]
 9334 01b4 0EF10204 		add	r4, lr, #2
 9335              	.LVL1406:
 9336              	.L882:
6126:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 9337              		.loc 1 6126 0 is_stmt 1
 9338 01b8 17F0010F 		tst	r7, #1
 9339 01bc 03D0     		beq	.L895
 9340 01be 4FF0300A 		mov	r10, #48
 9341              	.L883:
 9342              	.LVL1407:
 9343              		.loc 1 6126 0 is_stmt 0 discriminator 4
 9344 01c2 A046     		mov	r8, r4
6127:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 9345              		.loc 1 6127 0 is_stmt 1 discriminator 4
 9346 01c4 07E0     		b	.L884
 9347              	.LVL1408:
 9348              	.L895:
6126:Middlewares/Third_Party/FatFs/src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 9349              		.loc 1 6126 0
 9350 01c6 4FF0200A 		mov	r10, #32
 9351 01ca FAE7     		b	.L883
 9352              	.LVL1409:
 9353              	.L886:
 9354              		.loc 1 6127 0 discriminator 3
 9355 01cc 5146     		mov	r1, r10
 9356 01ce 08A8     		add	r0, sp, #32
 9357 01d0 FFF7FEFF 		bl	putc_bfd
 9358              	.LVL1410:
 9359 01d4 C846     		mov	r8, r9
 9360              	.LVL1411:
 9361              	.L884:
 9362              		.loc 1 6127 0 is_stmt 0 discriminator 1
 9363 01d6 17F0020F 		tst	r7, #2
 9364 01da 04D1     		bne	.L887
 9365              		.loc 1 6127 0 discriminator 2
 9366 01dc 08F10109 		add	r9, r8, #1
 9367              	.LVL1412:
 9368 01e0 A845     		cmp	r8, r5
 9369 01e2 F3D3     		bcc	.L886
 9370              		.loc 1 6127 0
 9371 01e4 C846     		mov	r8, r9
 9372              	.LVL1413:
 9373              	.L887:
6128:Middlewares/Third_Party/FatFs/src/ff.c **** 		do {
6129:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, str[--i]);
 9374              		.loc 1 6129 0 is_stmt 1 discriminator 1
 9375 01e6 013C     		subs	r4, r4, #1
 9376              	.LVL1414:
 9377 01e8 1CAB     		add	r3, sp, #112
 9378 01ea 2344     		add	r3, r3, r4
 9379 01ec 13F8701C 		ldrb	r1, [r3, #-112]	@ zero_extendqisi2
 9380 01f0 08A8     		add	r0, sp, #32
 9381 01f2 FFF7FEFF 		bl	putc_bfd
ARM GAS  /tmp/ccBYTIZg.s 			page 295


 9382              	.LVL1415:
6130:Middlewares/Third_Party/FatFs/src/ff.c **** 		} while (i);
 9383              		.loc 1 6130 0 discriminator 1
 9384 01f6 002C     		cmp	r4, #0
 9385 01f8 F5D1     		bne	.L887
 9386 01fa 04E0     		b	.L888
 9387              	.LVL1416:
 9388              	.L889:
6131:Middlewares/Third_Party/FatFs/src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);
 9389              		.loc 1 6131 0 discriminator 2
 9390 01fc 5146     		mov	r1, r10
 9391 01fe 08A8     		add	r0, sp, #32
 9392 0200 FFF7FEFF 		bl	putc_bfd
 9393              	.LVL1417:
 9394 0204 A046     		mov	r8, r4
 9395              	.LVL1418:
 9396              	.L888:
 9397              		.loc 1 6131 0 is_stmt 0 discriminator 1
 9398 0206 08F10104 		add	r4, r8, #1
 9399              	.LVL1419:
 9400 020a A845     		cmp	r8, r5
 9401 020c F6D3     		bcc	.L889
 9402              	.LVL1420:
 9403              	.L848:
6057:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) break;			/* End of string */
 9404              		.loc 1 6057 0 is_stmt 1
 9405 020e 741C     		adds	r4, r6, #1
 9406              	.LVL1421:
 9407 0210 3178     		ldrb	r1, [r6]	@ zero_extendqisi2
 9408              	.LVL1422:
6058:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c != '%') {				/* Non escape character */
 9409              		.loc 1 6058 0
 9410 0212 39B1     		cbz	r1, .L849
6059:Middlewares/Third_Party/FatFs/src/ff.c **** 			putc_bfd(&pb, c);
 9411              		.loc 1 6059 0
 9412 0214 2529     		cmp	r1, #37
 9413 0216 3FF400AF 		beq	.L850
6060:Middlewares/Third_Party/FatFs/src/ff.c **** 			continue;
 9414              		.loc 1 6060 0
 9415 021a 08A8     		add	r0, sp, #32
 9416 021c FFF7FEFF 		bl	putc_bfd
 9417              	.LVL1423:
6057:Middlewares/Third_Party/FatFs/src/ff.c **** 		if (c == 0) break;			/* End of string */
 9418              		.loc 1 6057 0
 9419 0220 2646     		mov	r6, r4
6061:Middlewares/Third_Party/FatFs/src/ff.c **** 		}
 9420              		.loc 1 6061 0
 9421 0222 F4E7     		b	.L848
 9422              	.LVL1424:
 9423              	.L849:
6132:Middlewares/Third_Party/FatFs/src/ff.c **** 	}
6133:Middlewares/Third_Party/FatFs/src/ff.c **** 
6134:Middlewares/Third_Party/FatFs/src/ff.c **** 	va_end(arp);
6135:Middlewares/Third_Party/FatFs/src/ff.c **** 
6136:Middlewares/Third_Party/FatFs/src/ff.c **** 	return putc_flush(&pb);
 9424              		.loc 1 6136 0
 9425 0224 08A8     		add	r0, sp, #32
ARM GAS  /tmp/ccBYTIZg.s 			page 296


 9426 0226 FFF7FEFF 		bl	putc_flush
 9427              	.LVL1425:
6137:Middlewares/Third_Party/FatFs/src/ff.c **** }
 9428              		.loc 1 6137 0
 9429 022a 1DB0     		add	sp, sp, #116
 9430              	.LCFI131:
 9431              		.cfi_def_cfa_offset 44
 9432              		@ sp needed
 9433 022c BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 9434              	.LCFI132:
 9435              		.cfi_restore 14
 9436              		.cfi_restore 10
 9437              		.cfi_restore 9
 9438              		.cfi_restore 8
 9439              		.cfi_restore 7
 9440              		.cfi_restore 6
 9441              		.cfi_restore 5
 9442              		.cfi_restore 4
 9443              		.cfi_def_cfa_offset 12
 9444 0230 03B0     		add	sp, sp, #12
 9445              	.LCFI133:
 9446              		.cfi_restore 3
 9447              		.cfi_restore 2
 9448              		.cfi_restore 1
 9449              		.cfi_def_cfa_offset 0
 9450 0232 7047     		bx	lr
 9451              		.cfi_endproc
 9452              	.LFE202:
 9454              		.section	.bss.FatFs,"aw",%nobits
 9455              		.align	2
 9456              		.set	.LANCHOR2,. + 0
 9459              	FatFs:
 9460 0000 00000000 		.space	4
 9461              		.section	.bss.Files,"aw",%nobits
 9462              		.align	2
 9463              		.set	.LANCHOR0,. + 0
 9466              	Files:
 9467 0000 00000000 		.space	32
 9467      00000000 
 9467      00000000 
 9467      00000000 
 9467      00000000 
 9468              		.section	.bss.Fsid,"aw",%nobits
 9469              		.align	1
 9470              		.set	.LANCHOR3,. + 0
 9473              	Fsid:
 9474 0000 0000     		.space	2
 9475              		.section	.rodata.ExCvt,"a",%progbits
 9476              		.align	2
 9477              		.set	.LANCHOR1,. + 0
 9480              	ExCvt:
 9481 0000 43       		.byte	67
 9482 0001 55       		.byte	85
 9483 0002 45       		.byte	69
 9484 0003 41       		.byte	65
 9485 0004 41       		.byte	65
 9486 0005 41       		.byte	65
ARM GAS  /tmp/ccBYTIZg.s 			page 297


 9487 0006 41       		.byte	65
 9488 0007 43       		.byte	67
 9489 0008 45       		.byte	69
 9490 0009 45       		.byte	69
 9491 000a 45       		.byte	69
 9492 000b 49       		.byte	73
 9493 000c 49       		.byte	73
 9494 000d 49       		.byte	73
 9495 000e 41       		.byte	65
 9496 000f 41       		.byte	65
 9497 0010 45       		.byte	69
 9498 0011 92       		.byte	-110
 9499 0012 92       		.byte	-110
 9500 0013 4F       		.byte	79
 9501 0014 4F       		.byte	79
 9502 0015 4F       		.byte	79
 9503 0016 55       		.byte	85
 9504 0017 55       		.byte	85
 9505 0018 59       		.byte	89
 9506 0019 4F       		.byte	79
 9507 001a 55       		.byte	85
 9508 001b 4F       		.byte	79
 9509 001c 9C       		.byte	-100
 9510 001d 4F       		.byte	79
 9511 001e 9E       		.byte	-98
 9512 001f 9F       		.byte	-97
 9513 0020 41       		.byte	65
 9514 0021 49       		.byte	73
 9515 0022 4F       		.byte	79
 9516 0023 55       		.byte	85
 9517 0024 A5       		.byte	-91
 9518 0025 A5       		.byte	-91
 9519 0026 A6       		.byte	-90
 9520 0027 A7       		.byte	-89
 9521 0028 A8       		.byte	-88
 9522 0029 A9       		.byte	-87
 9523 002a AA       		.byte	-86
 9524 002b AB       		.byte	-85
 9525 002c AC       		.byte	-84
 9526 002d AD       		.byte	-83
 9527 002e AE       		.byte	-82
 9528 002f AF       		.byte	-81
 9529 0030 B0       		.byte	-80
 9530 0031 B1       		.byte	-79
 9531 0032 B2       		.byte	-78
 9532 0033 B3       		.byte	-77
 9533 0034 B4       		.byte	-76
 9534 0035 41       		.byte	65
 9535 0036 41       		.byte	65
 9536 0037 41       		.byte	65
 9537 0038 B8       		.byte	-72
 9538 0039 B9       		.byte	-71
 9539 003a BA       		.byte	-70
 9540 003b BB       		.byte	-69
 9541 003c BC       		.byte	-68
 9542 003d BD       		.byte	-67
 9543 003e BE       		.byte	-66
ARM GAS  /tmp/ccBYTIZg.s 			page 298


 9544 003f BF       		.byte	-65
 9545 0040 C0       		.byte	-64
 9546 0041 C1       		.byte	-63
 9547 0042 C2       		.byte	-62
 9548 0043 C3       		.byte	-61
 9549 0044 C4       		.byte	-60
 9550 0045 C5       		.byte	-59
 9551 0046 41       		.byte	65
 9552 0047 41       		.byte	65
 9553 0048 C8       		.byte	-56
 9554 0049 C9       		.byte	-55
 9555 004a CA       		.byte	-54
 9556 004b CB       		.byte	-53
 9557 004c CC       		.byte	-52
 9558 004d CD       		.byte	-51
 9559 004e CE       		.byte	-50
 9560 004f CF       		.byte	-49
 9561 0050 D1       		.byte	-47
 9562 0051 D1       		.byte	-47
 9563 0052 45       		.byte	69
 9564 0053 45       		.byte	69
 9565 0054 45       		.byte	69
 9566 0055 49       		.byte	73
 9567 0056 49       		.byte	73
 9568 0057 49       		.byte	73
 9569 0058 49       		.byte	73
 9570 0059 D9       		.byte	-39
 9571 005a DA       		.byte	-38
 9572 005b DB       		.byte	-37
 9573 005c DC       		.byte	-36
 9574 005d DD       		.byte	-35
 9575 005e 49       		.byte	73
 9576 005f DF       		.byte	-33
 9577 0060 4F       		.byte	79
 9578 0061 E1       		.byte	-31
 9579 0062 4F       		.byte	79
 9580 0063 4F       		.byte	79
 9581 0064 4F       		.byte	79
 9582 0065 4F       		.byte	79
 9583 0066 E6       		.byte	-26
 9584 0067 E8       		.byte	-24
 9585 0068 E8       		.byte	-24
 9586 0069 55       		.byte	85
 9587 006a 55       		.byte	85
 9588 006b 55       		.byte	85
 9589 006c 59       		.byte	89
 9590 006d 59       		.byte	89
 9591 006e EE       		.byte	-18
 9592 006f EF       		.byte	-17
 9593 0070 F0       		.byte	-16
 9594 0071 F1       		.byte	-15
 9595 0072 F2       		.byte	-14
 9596 0073 F3       		.byte	-13
 9597 0074 F4       		.byte	-12
 9598 0075 F5       		.byte	-11
 9599 0076 F6       		.byte	-10
 9600 0077 F7       		.byte	-9
ARM GAS  /tmp/ccBYTIZg.s 			page 299


 9601 0078 F8       		.byte	-8
 9602 0079 F9       		.byte	-7
 9603 007a FA       		.byte	-6
 9604 007b FB       		.byte	-5
 9605 007c FC       		.byte	-4
 9606 007d FD       		.byte	-3
 9607 007e FE       		.byte	-2
 9608 007f FF       		.byte	-1
 9609              		.section	.rodata.create_name.str1.4,"aMS",%progbits,1
 9610              		.align	2
 9611              	.LC0:
 9612 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 9612      3A3B3C3D 
 9612      3E3F5B5D 
 9612      7C7F00
 9613              		.section	.rodata.cst.10499,"a",%progbits
 9614              		.align	2
 9615              		.set	.LANCHOR5,. + 0
 9618              	cst.10499:
 9619 0000 0100     		.short	1
 9620 0002 0400     		.short	4
 9621 0004 1000     		.short	16
 9622 0006 4000     		.short	64
 9623 0008 0001     		.short	256
 9624 000a 0002     		.short	512
 9625 000c 0000     		.short	0
 9626              		.section	.rodata.cst32.10500,"a",%progbits
 9627              		.align	2
 9628              		.set	.LANCHOR4,. + 0
 9631              	cst32.10500:
 9632 0000 0100     		.short	1
 9633 0002 0200     		.short	2
 9634 0004 0400     		.short	4
 9635 0006 0800     		.short	8
 9636 0008 1000     		.short	16
 9637 000a 2000     		.short	32
 9638 000c 0000     		.short	0
 9639              		.section	.rodata.f_mkfs.str1.4,"aMS",%progbits,1
 9640              		.align	2
 9641              	.LC1:
 9642 0000 EBFE904D 		.ascii	"\353\376\220MSDOS5.0\000"
 9642      53444F53 
 9642      352E3000 
 9643              	.LC2:
 9644 000c 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 9644      414D4520 
 9644      20202046 
 9644      41543332 
 9644      20202000 
 9645              	.LC3:
 9646 0020 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 9646      414D4520 
 9646      20202046 
 9646      41542020 
 9646      20202000 
 9647              		.text
 9648              	.Letext0:
ARM GAS  /tmp/ccBYTIZg.s 			page 300


 9649              		.file 2 "Middlewares/Third_Party/FatFs/src/integer.h"
 9650              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 9651              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 9652              		.file 5 "Drivers/CMSIS/Include/core_cm7.h"
 9653              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 9654              		.file 7 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 9655              		.file 8 "/usr/include/newlib/sys/lock.h"
 9656              		.file 9 "/usr/include/newlib/sys/_types.h"
 9657              		.file 10 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 9658              		.file 11 "/usr/include/newlib/sys/reent.h"
 9659              		.file 12 "/usr/include/newlib/stdlib.h"
 9660              		.file 13 "Middlewares/Third_Party/FatFs/src/ff.h"
 9661              		.file 14 "Middlewares/Third_Party/FatFs/src/diskio.h"
 9662              		.file 15 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stdarg.h"
 9663              		.file 16 "<built-in>"
ARM GAS  /tmp/ccBYTIZg.s 			page 301


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ff.c
     /tmp/ccBYTIZg.s:17     .text.ld_word:0000000000000000 $t
     /tmp/ccBYTIZg.s:23     .text.ld_word:0000000000000000 ld_word
     /tmp/ccBYTIZg.s:46     .text.ld_dword:0000000000000000 $t
     /tmp/ccBYTIZg.s:52     .text.ld_dword:0000000000000000 ld_dword
     /tmp/ccBYTIZg.s:82     .text.st_word:0000000000000000 $t
     /tmp/ccBYTIZg.s:88     .text.st_word:0000000000000000 st_word
     /tmp/ccBYTIZg.s:108    .text.st_dword:0000000000000000 $t
     /tmp/ccBYTIZg.s:114    .text.st_dword:0000000000000000 st_dword
     /tmp/ccBYTIZg.s:142    .text.mem_cpy:0000000000000000 $t
     /tmp/ccBYTIZg.s:148    .text.mem_cpy:0000000000000000 mem_cpy
     /tmp/ccBYTIZg.s:179    .text.mem_set:0000000000000000 $t
     /tmp/ccBYTIZg.s:185    .text.mem_set:0000000000000000 mem_set
     /tmp/ccBYTIZg.s:209    .text.mem_cmp:0000000000000000 $t
     /tmp/ccBYTIZg.s:215    .text.mem_cmp:0000000000000000 mem_cmp
     /tmp/ccBYTIZg.s:265    .text.chk_chr:0000000000000000 $t
     /tmp/ccBYTIZg.s:271    .text.chk_chr:0000000000000000 chk_chr
     /tmp/ccBYTIZg.s:301    .text.chk_lock:0000000000000000 $t
     /tmp/ccBYTIZg.s:307    .text.chk_lock:0000000000000000 chk_lock
     /tmp/ccBYTIZg.s:420    .text.chk_lock:0000000000000070 $d
     /tmp/ccBYTIZg.s:425    .text.enq_lock:0000000000000000 $t
     /tmp/ccBYTIZg.s:431    .text.enq_lock:0000000000000000 enq_lock
     /tmp/ccBYTIZg.s:468    .text.enq_lock:000000000000001c $d
     /tmp/ccBYTIZg.s:473    .text.inc_lock:0000000000000000 $t
     /tmp/ccBYTIZg.s:479    .text.inc_lock:0000000000000000 inc_lock
     /tmp/ccBYTIZg.s:631    .text.inc_lock:00000000000000a0 $d
     /tmp/ccBYTIZg.s:636    .text.dec_lock:0000000000000000 $t
     /tmp/ccBYTIZg.s:642    .text.dec_lock:0000000000000000 dec_lock
     /tmp/ccBYTIZg.s:710    .text.dec_lock:000000000000003c $d
     /tmp/ccBYTIZg.s:715    .text.clear_lock:0000000000000000 $t
     /tmp/ccBYTIZg.s:721    .text.clear_lock:0000000000000000 clear_lock
     /tmp/ccBYTIZg.s:787    .text.clear_lock:0000000000000038 $d
     /tmp/ccBYTIZg.s:792    .text.clust2sect:0000000000000000 $t
     /tmp/ccBYTIZg.s:798    .text.clust2sect:0000000000000000 clust2sect
     /tmp/ccBYTIZg.s:831    .text.clmt_clust:0000000000000000 $t
     /tmp/ccBYTIZg.s:837    .text.clmt_clust:0000000000000000 clmt_clust
     /tmp/ccBYTIZg.s:888    .text.ld_clust:0000000000000000 $t
     /tmp/ccBYTIZg.s:894    .text.ld_clust:0000000000000000 ld_clust
     /tmp/ccBYTIZg.s:939    .text.st_clust:0000000000000000 $t
     /tmp/ccBYTIZg.s:945    .text.st_clust:0000000000000000 st_clust
     /tmp/ccBYTIZg.s:988    .text.get_fileinfo:0000000000000000 $t
     /tmp/ccBYTIZg.s:994    .text.get_fileinfo:0000000000000000 get_fileinfo
     /tmp/ccBYTIZg.s:1106   .text.create_name:0000000000000000 $t
     /tmp/ccBYTIZg.s:1112   .text.create_name:0000000000000000 create_name
     /tmp/ccBYTIZg.s:1292   .text.create_name:00000000000000d4 $d
     /tmp/ccBYTIZg.s:1298   .text.get_ldnumber:0000000000000000 $t
     /tmp/ccBYTIZg.s:1304   .text.get_ldnumber:0000000000000000 get_ldnumber
     /tmp/ccBYTIZg.s:1399   .text.putc_init:0000000000000000 $t
     /tmp/ccBYTIZg.s:1405   .text.putc_init:0000000000000000 putc_init
     /tmp/ccBYTIZg.s:1424   .text.validate:0000000000000000 $t
     /tmp/ccBYTIZg.s:1430   .text.validate:0000000000000000 validate
     /tmp/ccBYTIZg.s:1516   .text.sync_window:0000000000000000 $t
     /tmp/ccBYTIZg.s:1522   .text.sync_window:0000000000000000 sync_window
     /tmp/ccBYTIZg.s:1613   .text.move_window:0000000000000000 $t
     /tmp/ccBYTIZg.s:1619   .text.move_window:0000000000000000 move_window
     /tmp/ccBYTIZg.s:1680   .text.check_fs:0000000000000000 $t
ARM GAS  /tmp/ccBYTIZg.s 			page 302


     /tmp/ccBYTIZg.s:1686   .text.check_fs:0000000000000000 check_fs
     /tmp/ccBYTIZg.s:1771   .text.check_fs:0000000000000070 $d
     /tmp/ccBYTIZg.s:1778   .text.find_volume:0000000000000000 $t
     /tmp/ccBYTIZg.s:1784   .text.find_volume:0000000000000000 find_volume
     /tmp/ccBYTIZg.s:2328   .text.find_volume:00000000000002c0 $d
     /tmp/ccBYTIZg.s:2336   .text.put_fat:0000000000000000 $t
     /tmp/ccBYTIZg.s:2342   .text.put_fat:0000000000000000 put_fat
     /tmp/ccBYTIZg.s:2540   .text.get_fat:0000000000000000 $t
     /tmp/ccBYTIZg.s:2546   .text.get_fat:0000000000000000 get_fat
     /tmp/ccBYTIZg.s:2712   .text.dir_sdi:0000000000000000 $t
     /tmp/ccBYTIZg.s:2718   .text.dir_sdi:0000000000000000 dir_sdi
     /tmp/ccBYTIZg.s:2874   .text.create_chain:0000000000000000 $t
     /tmp/ccBYTIZg.s:2880   .text.create_chain:0000000000000000 create_chain
     /tmp/ccBYTIZg.s:3065   .text.remove_chain:0000000000000000 $t
     /tmp/ccBYTIZg.s:3071   .text.remove_chain:0000000000000000 remove_chain
     /tmp/ccBYTIZg.s:3193   .text.dir_remove:0000000000000000 $t
     /tmp/ccBYTIZg.s:3199   .text.dir_remove:0000000000000000 dir_remove
     /tmp/ccBYTIZg.s:3242   .text.dir_next:0000000000000000 $t
     /tmp/ccBYTIZg.s:3248   .text.dir_next:0000000000000000 dir_next
     /tmp/ccBYTIZg.s:3475   .text.dir_find:0000000000000000 $t
     /tmp/ccBYTIZg.s:3481   .text.dir_find:0000000000000000 dir_find
     /tmp/ccBYTIZg.s:3567   .text.follow_path:0000000000000000 $t
     /tmp/ccBYTIZg.s:3573   .text.follow_path:0000000000000000 follow_path
     /tmp/ccBYTIZg.s:3699   .text.dir_alloc:0000000000000000 $t
     /tmp/ccBYTIZg.s:3705   .text.dir_alloc:0000000000000000 dir_alloc
     /tmp/ccBYTIZg.s:3794   .text.dir_register:0000000000000000 $t
     /tmp/ccBYTIZg.s:3800   .text.dir_register:0000000000000000 dir_register
     /tmp/ccBYTIZg.s:3863   .text.dir_read:0000000000000000 $t
     /tmp/ccBYTIZg.s:3869   .text.dir_read:0000000000000000 dir_read
     /tmp/ccBYTIZg.s:3966   .text.sync_fs:0000000000000000 $t
     /tmp/ccBYTIZg.s:3972   .text.sync_fs:0000000000000000 sync_fs
     /tmp/ccBYTIZg.s:4068   .text.sync_fs:0000000000000084 $d
     /tmp/ccBYTIZg.s:4074   .text.f_mount:0000000000000000 $t
     /tmp/ccBYTIZg.s:4081   .text.f_mount:0000000000000000 f_mount
     /tmp/ccBYTIZg.s:4172   .text.f_mount:0000000000000064 $d
     /tmp/ccBYTIZg.s:4177   .text.f_open:0000000000000000 $t
     /tmp/ccBYTIZg.s:4184   .text.f_open:0000000000000000 f_open
     /tmp/ccBYTIZg.s:4612   .text.f_read:0000000000000000 $t
     /tmp/ccBYTIZg.s:4619   .text.f_read:0000000000000000 f_read
     /tmp/ccBYTIZg.s:4924   .text.f_write:0000000000000000 $t
     /tmp/ccBYTIZg.s:4931   .text.f_write:0000000000000000 f_write
     /tmp/ccBYTIZg.s:5271   .text.putc_bfd:0000000000000000 $t
     /tmp/ccBYTIZg.s:5277   .text.putc_bfd:0000000000000000 putc_bfd
     /tmp/ccBYTIZg.s:5367   .text.putc_flush:0000000000000000 $t
     /tmp/ccBYTIZg.s:5373   .text.putc_flush:0000000000000000 putc_flush
     /tmp/ccBYTIZg.s:5441   .text.f_sync:0000000000000000 $t
     /tmp/ccBYTIZg.s:5448   .text.f_sync:0000000000000000 f_sync
     /tmp/ccBYTIZg.s:5580   .text.f_close:0000000000000000 $t
     /tmp/ccBYTIZg.s:5587   .text.f_close:0000000000000000 f_close
     /tmp/ccBYTIZg.s:5650   .text.f_lseek:0000000000000000 $t
     /tmp/ccBYTIZg.s:5657   .text.f_lseek:0000000000000000 f_lseek
     /tmp/ccBYTIZg.s:6182   .text.f_opendir:0000000000000000 $t
     /tmp/ccBYTIZg.s:6189   .text.f_opendir:0000000000000000 f_opendir
     /tmp/ccBYTIZg.s:6329   .text.f_closedir:0000000000000000 $t
     /tmp/ccBYTIZg.s:6336   .text.f_closedir:0000000000000000 f_closedir
     /tmp/ccBYTIZg.s:6394   .text.f_readdir:0000000000000000 $t
     /tmp/ccBYTIZg.s:6401   .text.f_readdir:0000000000000000 f_readdir
ARM GAS  /tmp/ccBYTIZg.s 			page 303


     /tmp/ccBYTIZg.s:6489   .text.f_stat:0000000000000000 $t
     /tmp/ccBYTIZg.s:6496   .text.f_stat:0000000000000000 f_stat
     /tmp/ccBYTIZg.s:6572   .text.f_getfree:0000000000000000 $t
     /tmp/ccBYTIZg.s:6579   .text.f_getfree:0000000000000000 f_getfree
     /tmp/ccBYTIZg.s:6793   .text.f_truncate:0000000000000000 $t
     /tmp/ccBYTIZg.s:6800   .text.f_truncate:0000000000000000 f_truncate
     /tmp/ccBYTIZg.s:6956   .text.f_unlink:0000000000000000 $t
     /tmp/ccBYTIZg.s:6963   .text.f_unlink:0000000000000000 f_unlink
     /tmp/ccBYTIZg.s:7145   .text.f_mkdir:0000000000000000 $t
     /tmp/ccBYTIZg.s:7152   .text.f_mkdir:0000000000000000 f_mkdir
     /tmp/ccBYTIZg.s:7451   .text.f_rename:0000000000000000 $t
     /tmp/ccBYTIZg.s:7458   .text.f_rename:0000000000000000 f_rename
     /tmp/ccBYTIZg.s:7689   .text.f_mkfs:0000000000000000 $t
     /tmp/ccBYTIZg.s:7696   .text.f_mkfs:0000000000000000 f_mkfs
     /tmp/ccBYTIZg.s:8180   .text.f_mkfs:0000000000000294 $d
     /tmp/ccBYTIZg.s:8189   .text.f_mkfs:00000000000002ac $t
     /tmp/ccBYTIZg.s:8741   .text.f_mkfs:0000000000000624 $d
     /tmp/ccBYTIZg.s:8751   .text.f_gets:0000000000000000 $t
     /tmp/ccBYTIZg.s:8758   .text.f_gets:0000000000000000 f_gets
     /tmp/ccBYTIZg.s:8850   .text.f_putc:0000000000000000 $t
     /tmp/ccBYTIZg.s:8857   .text.f_putc:0000000000000000 f_putc
     /tmp/ccBYTIZg.s:8897   .text.f_puts:0000000000000000 $t
     /tmp/ccBYTIZg.s:8904   .text.f_puts:0000000000000000 f_puts
     /tmp/ccBYTIZg.s:8953   .text.f_printf:0000000000000000 $t
     /tmp/ccBYTIZg.s:8960   .text.f_printf:0000000000000000 f_printf
     /tmp/ccBYTIZg.s:9088   .text.f_printf:0000000000000086 $d
     /tmp/ccBYTIZg.s:9455   .bss.FatFs:0000000000000000 $d
     /tmp/ccBYTIZg.s:9459   .bss.FatFs:0000000000000000 FatFs
     /tmp/ccBYTIZg.s:9462   .bss.Files:0000000000000000 $d
     /tmp/ccBYTIZg.s:9466   .bss.Files:0000000000000000 Files
     /tmp/ccBYTIZg.s:9469   .bss.Fsid:0000000000000000 $d
     /tmp/ccBYTIZg.s:9473   .bss.Fsid:0000000000000000 Fsid
     /tmp/ccBYTIZg.s:9476   .rodata.ExCvt:0000000000000000 $d
     /tmp/ccBYTIZg.s:9480   .rodata.ExCvt:0000000000000000 ExCvt
     /tmp/ccBYTIZg.s:9610   .rodata.create_name.str1.4:0000000000000000 $d
     /tmp/ccBYTIZg.s:9614   .rodata.cst.10499:0000000000000000 $d
     /tmp/ccBYTIZg.s:9618   .rodata.cst.10499:0000000000000000 cst.10499
     /tmp/ccBYTIZg.s:9627   .rodata.cst32.10500:0000000000000000 $d
     /tmp/ccBYTIZg.s:9631   .rodata.cst32.10500:0000000000000000 cst32.10500
     /tmp/ccBYTIZg.s:9640   .rodata.f_mkfs.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccBYTIZg.s:9112   .text.f_printf:000000000000009d $d
     /tmp/ccBYTIZg.s:9112   .text.f_printf:000000000000009e $t

UNDEFINED SYMBOLS
disk_status
disk_write
disk_read
disk_initialize
disk_ioctl
get_fattime
