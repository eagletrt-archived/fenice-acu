ARM GAS  /tmp/ccFFwVR3.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"main.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.MX_NVIC_Init,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	MX_NVIC_Init:
  24              	.LFB144:
  25              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "gps.h"
  27:Src/main.c    **** /* USER CODE END Includes */
  28:Src/main.c    **** 
  29:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  30:Src/main.c    **** /* USER CODE BEGIN PTD */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* USER CODE END PTD */
  33:Src/main.c    **** 
ARM GAS  /tmp/ccFFwVR3.s 			page 2


  34:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  35:Src/main.c    **** /* USER CODE BEGIN PD */
  36:Src/main.c    **** /* USER CODE END PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PM */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* USER CODE END PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  44:Src/main.c    **** CAN_HandleTypeDef hcan1;
  45:Src/main.c    **** 
  46:Src/main.c    **** TIM_HandleTypeDef htim2;
  47:Src/main.c    **** 
  48:Src/main.c    **** UART_HandleTypeDef huart2;
  49:Src/main.c    **** UART_HandleTypeDef huart3;
  50:Src/main.c    **** 
  51:Src/main.c    **** /* USER CODE BEGIN PV */
  52:Src/main.c    **** char msg_gps[3];
  53:Src/main.c    **** char buffer_gps[50];
  54:Src/main.c    **** int cont_char;
  55:Src/main.c    **** int msg_arrived = 0;
  56:Src/main.c    **** char msg_computer[3];
  57:Src/main.c    **** gps_struct gps;
  58:Src/main.c    **** /* USER CODE END PV */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  61:Src/main.c    **** void SystemClock_Config(void);
  62:Src/main.c    **** static void MX_GPIO_Init(void);
  63:Src/main.c    **** static void MX_CAN1_Init(void);
  64:Src/main.c    **** static void MX_TIM2_Init(void);
  65:Src/main.c    **** static void MX_USART2_UART_Init(void);
  66:Src/main.c    **** static void MX_USART3_UART_Init(void);
  67:Src/main.c    **** static void MX_NVIC_Init(void);
  68:Src/main.c    **** /* USER CODE BEGIN PFP */
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE END PFP */
  71:Src/main.c    **** 
  72:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  73:Src/main.c    **** /* USER CODE BEGIN 0 */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE END 0 */
  76:Src/main.c    **** 
  77:Src/main.c    **** /**
  78:Src/main.c    ****   * @brief  The application entry point.
  79:Src/main.c    ****   * @retval int
  80:Src/main.c    ****   */
  81:Src/main.c    **** int main(void)
  82:Src/main.c    **** {
  83:Src/main.c    ****   /* USER CODE BEGIN 1 */
  84:Src/main.c    **** 
  85:Src/main.c    ****   /* USER CODE END 1 */
  86:Src/main.c    ****   
  87:Src/main.c    **** 
  88:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  89:Src/main.c    **** 
  90:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
ARM GAS  /tmp/ccFFwVR3.s 			page 3


  91:Src/main.c    ****   HAL_Init();
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* USER CODE BEGIN Init */
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* USER CODE END Init */
  96:Src/main.c    **** 
  97:Src/main.c    ****   /* Configure the system clock */
  98:Src/main.c    ****   SystemClock_Config();
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE END SysInit */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* Initialize all configured peripherals */
 105:Src/main.c    ****   MX_GPIO_Init();
 106:Src/main.c    ****   MX_CAN1_Init();
 107:Src/main.c    ****   MX_TIM2_Init();
 108:Src/main.c    ****   MX_USART2_UART_Init();
 109:Src/main.c    ****   MX_USART3_UART_Init();
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* Initialize interrupts */
 112:Src/main.c    ****   MX_NVIC_Init();
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 114:Src/main.c    ****   HAL_UART_Transmit(&huart3,(uint8_t*)"ciao\r\n",6,10);
 115:Src/main.c    ****   gps.huart_gps = &huart2;
 116:Src/main.c    ****   //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
 117:Src/main.c    ****   /*huart2.Init.BaudRate = 115200;
 118:Src/main.c    ****   if (HAL_UART_DeInit(&huart2) != HAL_OK)
 119:Src/main.c    ****   {
 120:Src/main.c    ****     HAL_UART_Transmit(&huart3,(uint8_t*)"ERRORE 1\r\n",6,10);
 121:Src/main.c    ****   }
 122:Src/main.c    **** 	if (HAL_UART_Init(&huart2) != HAL_OK)
 123:Src/main.c    ****   {
 124:Src/main.c    ****     HAL_UART_Transmit(&huart3,(uint8_t*)"ERRORE 2\r\n",6,10);
 125:Src/main.c    ****   }*/
 126:Src/main.c    ****   HAL_UART_Receive_IT(&huart3, (uint8_t *)msg_computer, 1); //request of rx buffer interrupt
 127:Src/main.c    ****   //gps_init(&huart2, &gps);
 128:Src/main.c    ****   /*HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 129:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);*/
 130:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 131:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 132:Src/main.c    ****   if(HAL_UART_Receive_IT(&huart2, (uint8_t *)msg_gps, 1) != HAL_OK){ //request of rx buffer interru
 133:Src/main.c    ****     char txt[100];
 134:Src/main.c    ****     sprintf(txt,"HAL_UART_Receive_IT FAILED\r\n");
 135:Src/main.c    ****     HAL_UART_Transmit(&huart3,(uint8_t*)txt,strlen(txt),10);
 136:Src/main.c    ****   }
 137:Src/main.c    ****   /* USER CODE END 2 */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* Infinite loop */
 140:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 141:Src/main.c    ****   while (1)
 142:Src/main.c    ****   {
 143:Src/main.c    ****     gps_read(&huart2, &gps);
 144:Src/main.c    ****     /* USER CODE END WHILE */
 145:Src/main.c    **** 
 146:Src/main.c    ****     /* USER CODE BEGIN 3 */
 147:Src/main.c    ****   }
ARM GAS  /tmp/ccFFwVR3.s 			page 4


 148:Src/main.c    ****   /* USER CODE END 3 */
 149:Src/main.c    **** }
 150:Src/main.c    **** 
 151:Src/main.c    **** /**
 152:Src/main.c    ****   * @brief System Clock Configuration
 153:Src/main.c    ****   * @retval None
 154:Src/main.c    ****   */
 155:Src/main.c    **** void SystemClock_Config(void)
 156:Src/main.c    **** {
 157:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 158:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 159:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 160:Src/main.c    **** 
 161:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 162:Src/main.c    ****   */
 163:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 164:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 165:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 166:Src/main.c    ****   */
 167:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 168:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 169:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 170:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 171:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 172:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 176:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 177:Src/main.c    ****   {
 178:Src/main.c    ****     Error_Handler();
 179:Src/main.c    ****   }
 180:Src/main.c    ****   /** Activate the Over-Drive mode 
 181:Src/main.c    ****   */
 182:Src/main.c    ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 183:Src/main.c    ****   {
 184:Src/main.c    ****     Error_Handler();
 185:Src/main.c    ****   }
 186:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 187:Src/main.c    ****   */
 188:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 189:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 190:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 191:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 192:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 193:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 194:Src/main.c    **** 
 195:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 196:Src/main.c    ****   {
 197:Src/main.c    ****     Error_Handler();
 198:Src/main.c    ****   }
 199:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 200:Src/main.c    ****   PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 201:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 202:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 203:Src/main.c    ****   {
 204:Src/main.c    ****     Error_Handler();
ARM GAS  /tmp/ccFFwVR3.s 			page 5


 205:Src/main.c    ****   }
 206:Src/main.c    **** }
 207:Src/main.c    **** 
 208:Src/main.c    **** /**
 209:Src/main.c    ****   * @brief NVIC Configuration.
 210:Src/main.c    ****   * @retval None
 211:Src/main.c    ****   */
 212:Src/main.c    **** static void MX_NVIC_Init(void)
 213:Src/main.c    **** {
  26              		.loc 1 213 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 08B5     		push	{r3, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 3, -8
  34              		.cfi_offset 14, -4
 214:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 215:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
  35              		.loc 1 215 0
  36 0002 0022     		movs	r2, #0
  37 0004 1146     		mov	r1, r2
  38 0006 1620     		movs	r0, #22
  39 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  40              	.LVL0:
 216:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
  41              		.loc 1 216 0
  42 000c 1620     		movs	r0, #22
  43 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  44              	.LVL1:
 217:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 218:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
  45              		.loc 1 218 0
  46 0012 0022     		movs	r2, #0
  47 0014 1146     		mov	r1, r2
  48 0016 1520     		movs	r0, #21
  49 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  50              	.LVL2:
 219:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
  51              		.loc 1 219 0
  52 001c 1520     		movs	r0, #21
  53 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  54              	.LVL3:
 220:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 221:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
  55              		.loc 1 221 0
  56 0022 0022     		movs	r2, #0
  57 0024 1146     		mov	r1, r2
  58 0026 1420     		movs	r0, #20
  59 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  60              	.LVL4:
 222:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
  61              		.loc 1 222 0
  62 002c 1420     		movs	r0, #20
  63 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  64              	.LVL5:
ARM GAS  /tmp/ccFFwVR3.s 			page 6


 223:Src/main.c    ****   /* CAN1_TX_IRQn interrupt configuration */
 224:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
  65              		.loc 1 224 0
  66 0032 0022     		movs	r2, #0
  67 0034 1146     		mov	r1, r2
  68 0036 1320     		movs	r0, #19
  69 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  70              	.LVL6:
 225:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
  71              		.loc 1 225 0
  72 003c 1320     		movs	r0, #19
  73 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  74              	.LVL7:
 226:Src/main.c    ****   /* TIM2_IRQn interrupt configuration */
 227:Src/main.c    ****   HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  75              		.loc 1 227 0
  76 0042 0022     		movs	r2, #0
  77 0044 1146     		mov	r1, r2
  78 0046 1C20     		movs	r0, #28
  79 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  80              	.LVL8:
 228:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM2_IRQn);
  81              		.loc 1 228 0
  82 004c 1C20     		movs	r0, #28
  83 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  84              	.LVL9:
 229:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 230:Src/main.c    ****   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  85              		.loc 1 230 0
  86 0052 0022     		movs	r2, #0
  87 0054 1146     		mov	r1, r2
  88 0056 2720     		movs	r0, #39
  89 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
  90              	.LVL10:
 231:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
  91              		.loc 1 231 0
  92 005c 2720     		movs	r0, #39
  93 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  94              	.LVL11:
  95 0062 08BD     		pop	{r3, pc}
  96              		.cfi_endproc
  97              	.LFE144:
  99              		.section	.text.MX_GPIO_Init,"ax",%progbits
 100              		.align	1
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 104              		.fpu fpv5-d16
 106              	MX_GPIO_Init:
 107              	.LFB149:
 232:Src/main.c    **** }
 233:Src/main.c    **** 
 234:Src/main.c    **** /**
 235:Src/main.c    ****   * @brief CAN1 Initialization Function
 236:Src/main.c    ****   * @param None
 237:Src/main.c    ****   * @retval None
 238:Src/main.c    ****   */
ARM GAS  /tmp/ccFFwVR3.s 			page 7


 239:Src/main.c    **** static void MX_CAN1_Init(void)
 240:Src/main.c    **** {
 241:Src/main.c    **** 
 242:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 243:Src/main.c    **** 
 244:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 245:Src/main.c    **** 
 246:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 247:Src/main.c    **** 
 248:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 249:Src/main.c    ****   hcan1.Instance = CAN1;
 250:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 251:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 252:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 253:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 254:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 255:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 256:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 257:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 258:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 259:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 260:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 261:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 262:Src/main.c    ****   {
 263:Src/main.c    ****     Error_Handler();
 264:Src/main.c    ****   }
 265:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 266:Src/main.c    **** 
 267:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 268:Src/main.c    **** 
 269:Src/main.c    **** }
 270:Src/main.c    **** 
 271:Src/main.c    **** /**
 272:Src/main.c    ****   * @brief TIM2 Initialization Function
 273:Src/main.c    ****   * @param None
 274:Src/main.c    ****   * @retval None
 275:Src/main.c    ****   */
 276:Src/main.c    **** static void MX_TIM2_Init(void)
 277:Src/main.c    **** {
 278:Src/main.c    **** 
 279:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 0 */
 280:Src/main.c    **** 
 281:Src/main.c    ****   /* USER CODE END TIM2_Init 0 */
 282:Src/main.c    **** 
 283:Src/main.c    ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 284:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 285:Src/main.c    **** 
 286:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 1 */
 287:Src/main.c    **** 
 288:Src/main.c    ****   /* USER CODE END TIM2_Init 1 */
 289:Src/main.c    ****   htim2.Instance = TIM2;
 290:Src/main.c    ****   htim2.Init.Prescaler = 108;
 291:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 292:Src/main.c    ****   htim2.Init.Period = 1000;
 293:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 294:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 295:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
ARM GAS  /tmp/ccFFwVR3.s 			page 8


 296:Src/main.c    ****   {
 297:Src/main.c    ****     Error_Handler();
 298:Src/main.c    ****   }
 299:Src/main.c    ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 300:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 301:Src/main.c    ****   {
 302:Src/main.c    ****     Error_Handler();
 303:Src/main.c    ****   }
 304:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 305:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 306:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 307:Src/main.c    ****   {
 308:Src/main.c    ****     Error_Handler();
 309:Src/main.c    ****   }
 310:Src/main.c    ****   /* USER CODE BEGIN TIM2_Init 2 */
 311:Src/main.c    **** 
 312:Src/main.c    ****   /* USER CODE END TIM2_Init 2 */
 313:Src/main.c    **** 
 314:Src/main.c    **** }
 315:Src/main.c    **** 
 316:Src/main.c    **** /**
 317:Src/main.c    ****   * @brief USART2 Initialization Function
 318:Src/main.c    ****   * @param None
 319:Src/main.c    ****   * @retval None
 320:Src/main.c    ****   */
 321:Src/main.c    **** static void MX_USART2_UART_Init(void)
 322:Src/main.c    **** {
 323:Src/main.c    **** 
 324:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 325:Src/main.c    **** 
 326:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 327:Src/main.c    **** 
 328:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 329:Src/main.c    **** 
 330:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 331:Src/main.c    ****   huart2.Instance = USART2;
 332:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 333:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 334:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 335:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 336:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 337:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 338:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 339:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 340:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 341:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 342:Src/main.c    ****   {
 343:Src/main.c    ****     Error_Handler();
 344:Src/main.c    ****   }
 345:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 346:Src/main.c    **** 
 347:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 348:Src/main.c    **** 
 349:Src/main.c    **** }
 350:Src/main.c    **** 
 351:Src/main.c    **** /**
 352:Src/main.c    ****   * @brief USART3 Initialization Function
ARM GAS  /tmp/ccFFwVR3.s 			page 9


 353:Src/main.c    ****   * @param None
 354:Src/main.c    ****   * @retval None
 355:Src/main.c    ****   */
 356:Src/main.c    **** static void MX_USART3_UART_Init(void)
 357:Src/main.c    **** {
 358:Src/main.c    **** 
 359:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 362:Src/main.c    **** 
 363:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 364:Src/main.c    **** 
 365:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 366:Src/main.c    ****   huart3.Instance = USART3;
 367:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 368:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 369:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 370:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 371:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 372:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 373:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 374:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 375:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 376:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 377:Src/main.c    ****   {
 378:Src/main.c    ****     Error_Handler();
 379:Src/main.c    ****   }
 380:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 381:Src/main.c    **** 
 382:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 383:Src/main.c    **** 
 384:Src/main.c    **** }
 385:Src/main.c    **** 
 386:Src/main.c    **** /**
 387:Src/main.c    ****   * @brief GPIO Initialization Function
 388:Src/main.c    ****   * @param None
 389:Src/main.c    ****   * @retval None
 390:Src/main.c    ****   */
 391:Src/main.c    **** static void MX_GPIO_Init(void)
 392:Src/main.c    **** {
 108              		.loc 1 392 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 32
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112 0000 30B5     		push	{r4, r5, lr}
 113              	.LCFI1:
 114              		.cfi_def_cfa_offset 12
 115              		.cfi_offset 4, -12
 116              		.cfi_offset 5, -8
 117              		.cfi_offset 14, -4
 118 0002 89B0     		sub	sp, sp, #36
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 48
 393:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 121              		.loc 1 393 0
 122 0004 0024     		movs	r4, #0
 123 0006 0394     		str	r4, [sp, #12]
ARM GAS  /tmp/ccFFwVR3.s 			page 10


 124 0008 0494     		str	r4, [sp, #16]
 125 000a 0594     		str	r4, [sp, #20]
 126 000c 0694     		str	r4, [sp, #24]
 127 000e 0794     		str	r4, [sp, #28]
 128              	.LBB2:
 394:Src/main.c    **** 
 395:Src/main.c    ****   /* GPIO Ports Clock Enable */
 396:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 129              		.loc 1 396 0
 130 0010 1C4B     		ldr	r3, .L5
 131 0012 1A6B     		ldr	r2, [r3, #48]
 132 0014 42F00402 		orr	r2, r2, #4
 133 0018 1A63     		str	r2, [r3, #48]
 134 001a 1A6B     		ldr	r2, [r3, #48]
 135 001c 02F00402 		and	r2, r2, #4
 136 0020 0092     		str	r2, [sp]
 137 0022 009A     		ldr	r2, [sp]
 138              	.LBE2:
 139              	.LBB3:
 397:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 140              		.loc 1 397 0
 141 0024 1A6B     		ldr	r2, [r3, #48]
 142 0026 42F00202 		orr	r2, r2, #2
 143 002a 1A63     		str	r2, [r3, #48]
 144 002c 1A6B     		ldr	r2, [r3, #48]
 145 002e 02F00202 		and	r2, r2, #2
 146 0032 0192     		str	r2, [sp, #4]
 147 0034 019A     		ldr	r2, [sp, #4]
 148              	.LBE3:
 149              	.LBB4:
 398:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 150              		.loc 1 398 0
 151 0036 1A6B     		ldr	r2, [r3, #48]
 152 0038 42F00802 		orr	r2, r2, #8
 153 003c 1A63     		str	r2, [r3, #48]
 154 003e 1B6B     		ldr	r3, [r3, #48]
 155 0040 03F00803 		and	r3, r3, #8
 156 0044 0293     		str	r3, [sp, #8]
 157 0046 029B     		ldr	r3, [sp, #8]
 158              	.LBE4:
 399:Src/main.c    **** 
 400:Src/main.c    ****   /*Configure GPIO pin Output Level */
 401:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, LED_green_Pin|LED_red_Pin|LED_blue_Pin, GPIO_PIN_RESET);
 159              		.loc 1 401 0
 160 0048 0F4D     		ldr	r5, .L5+4
 161 004a 2246     		mov	r2, r4
 162 004c 44F28101 		movw	r1, #16513
 163 0050 2846     		mov	r0, r5
 164 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 165              	.LVL12:
 402:Src/main.c    **** 
 403:Src/main.c    ****   /*Configure GPIO pin : USER_BUTTON_Pin */
 404:Src/main.c    ****   GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 166              		.loc 1 404 0
 167 0056 4FF40053 		mov	r3, #8192
 168 005a 0393     		str	r3, [sp, #12]
 405:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
ARM GAS  /tmp/ccFFwVR3.s 			page 11


 169              		.loc 1 405 0
 170 005c 0494     		str	r4, [sp, #16]
 406:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 171              		.loc 1 406 0
 172 005e 0594     		str	r4, [sp, #20]
 407:Src/main.c    ****   HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 173              		.loc 1 407 0
 174 0060 03A9     		add	r1, sp, #12
 175 0062 0A48     		ldr	r0, .L5+8
 176 0064 FFF7FEFF 		bl	HAL_GPIO_Init
 177              	.LVL13:
 408:Src/main.c    **** 
 409:Src/main.c    ****   /*Configure GPIO pins : LED_green_Pin LED_red_Pin LED_blue_Pin */
 410:Src/main.c    ****   GPIO_InitStruct.Pin = LED_green_Pin|LED_red_Pin|LED_blue_Pin;
 178              		.loc 1 410 0
 179 0068 44F28103 		movw	r3, #16513
 180 006c 0393     		str	r3, [sp, #12]
 411:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 181              		.loc 1 411 0
 182 006e 0123     		movs	r3, #1
 183 0070 0493     		str	r3, [sp, #16]
 412:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 184              		.loc 1 412 0
 185 0072 0594     		str	r4, [sp, #20]
 413:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 186              		.loc 1 413 0
 187 0074 0694     		str	r4, [sp, #24]
 414:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 188              		.loc 1 414 0
 189 0076 03A9     		add	r1, sp, #12
 190 0078 2846     		mov	r0, r5
 191 007a FFF7FEFF 		bl	HAL_GPIO_Init
 192              	.LVL14:
 415:Src/main.c    **** 
 416:Src/main.c    **** }
 193              		.loc 1 416 0
 194 007e 09B0     		add	sp, sp, #36
 195              	.LCFI3:
 196              		.cfi_def_cfa_offset 12
 197              		@ sp needed
 198 0080 30BD     		pop	{r4, r5, pc}
 199              	.L6:
 200 0082 00BF     		.align	2
 201              	.L5:
 202 0084 00380240 		.word	1073887232
 203 0088 00040240 		.word	1073873920
 204 008c 00080240 		.word	1073874944
 205              		.cfi_endproc
 206              	.LFE149:
 208              		.section	.text.MX_CAN1_Init,"ax",%progbits
 209              		.align	1
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 213              		.fpu fpv5-d16
 215              	MX_CAN1_Init:
 216              	.LFB145:
ARM GAS  /tmp/ccFFwVR3.s 			page 12


 240:Src/main.c    **** 
 217              		.loc 1 240 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221 0000 08B5     		push	{r3, lr}
 222              	.LCFI4:
 223              		.cfi_def_cfa_offset 8
 224              		.cfi_offset 3, -8
 225              		.cfi_offset 14, -4
 249:Src/main.c    ****   hcan1.Init.Prescaler = 3;
 226              		.loc 1 249 0
 227 0002 0C48     		ldr	r0, .L9
 228 0004 0C4B     		ldr	r3, .L9+4
 229 0006 0360     		str	r3, [r0]
 250:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 230              		.loc 1 250 0
 231 0008 0323     		movs	r3, #3
 232 000a 4360     		str	r3, [r0, #4]
 251:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 233              		.loc 1 251 0
 234 000c 0023     		movs	r3, #0
 235 000e 8360     		str	r3, [r0, #8]
 252:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 236              		.loc 1 252 0
 237 0010 C360     		str	r3, [r0, #12]
 253:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 238              		.loc 1 253 0
 239 0012 4FF46022 		mov	r2, #917504
 240 0016 0261     		str	r2, [r0, #16]
 254:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 241              		.loc 1 254 0
 242 0018 4FF48012 		mov	r2, #1048576
 243 001c 4261     		str	r2, [r0, #20]
 255:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 244              		.loc 1 255 0
 245 001e 0376     		strb	r3, [r0, #24]
 256:Src/main.c    ****   hcan1.Init.AutoWakeUp = ENABLE;
 246              		.loc 1 256 0
 247 0020 4376     		strb	r3, [r0, #25]
 257:Src/main.c    ****   hcan1.Init.AutoRetransmission = ENABLE;
 248              		.loc 1 257 0
 249 0022 0122     		movs	r2, #1
 250 0024 8276     		strb	r2, [r0, #26]
 258:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 251              		.loc 1 258 0
 252 0026 C276     		strb	r2, [r0, #27]
 259:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 253              		.loc 1 259 0
 254 0028 0377     		strb	r3, [r0, #28]
 260:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 255              		.loc 1 260 0
 256 002a 4377     		strb	r3, [r0, #29]
 261:Src/main.c    ****   {
 257              		.loc 1 261 0
 258 002c FFF7FEFF 		bl	HAL_CAN_Init
 259              	.LVL15:
ARM GAS  /tmp/ccFFwVR3.s 			page 13


 260 0030 08BD     		pop	{r3, pc}
 261              	.L10:
 262 0032 00BF     		.align	2
 263              	.L9:
 264 0034 00000000 		.word	hcan1
 265 0038 00640040 		.word	1073767424
 266              		.cfi_endproc
 267              	.LFE145:
 269              		.section	.text.MX_TIM2_Init,"ax",%progbits
 270              		.align	1
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu fpv5-d16
 276              	MX_TIM2_Init:
 277              	.LFB146:
 277:Src/main.c    **** 
 278              		.loc 1 277 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 32
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282 0000 30B5     		push	{r4, r5, lr}
 283              	.LCFI5:
 284              		.cfi_def_cfa_offset 12
 285              		.cfi_offset 4, -12
 286              		.cfi_offset 5, -8
 287              		.cfi_offset 14, -4
 288 0002 89B0     		sub	sp, sp, #36
 289              	.LCFI6:
 290              		.cfi_def_cfa_offset 48
 283:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 291              		.loc 1 283 0
 292 0004 0024     		movs	r4, #0
 293 0006 0494     		str	r4, [sp, #16]
 294 0008 0594     		str	r4, [sp, #20]
 295 000a 0694     		str	r4, [sp, #24]
 296 000c 0794     		str	r4, [sp, #28]
 284:Src/main.c    **** 
 297              		.loc 1 284 0
 298 000e 0194     		str	r4, [sp, #4]
 299 0010 0294     		str	r4, [sp, #8]
 300 0012 0394     		str	r4, [sp, #12]
 289:Src/main.c    ****   htim2.Init.Prescaler = 108;
 301              		.loc 1 289 0
 302 0014 0E4D     		ldr	r5, .L13
 303 0016 4FF08043 		mov	r3, #1073741824
 304 001a 2B60     		str	r3, [r5]
 290:Src/main.c    ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 305              		.loc 1 290 0
 306 001c 6C23     		movs	r3, #108
 307 001e 6B60     		str	r3, [r5, #4]
 291:Src/main.c    ****   htim2.Init.Period = 1000;
 308              		.loc 1 291 0
 309 0020 AC60     		str	r4, [r5, #8]
 292:Src/main.c    ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 310              		.loc 1 292 0
 311 0022 4FF47A73 		mov	r3, #1000
ARM GAS  /tmp/ccFFwVR3.s 			page 14


 312 0026 EB60     		str	r3, [r5, #12]
 293:Src/main.c    ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 313              		.loc 1 293 0
 314 0028 2C61     		str	r4, [r5, #16]
 294:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 315              		.loc 1 294 0
 316 002a AC61     		str	r4, [r5, #24]
 295:Src/main.c    ****   {
 317              		.loc 1 295 0
 318 002c 2846     		mov	r0, r5
 319 002e FFF7FEFF 		bl	HAL_TIM_Base_Init
 320              	.LVL16:
 299:Src/main.c    ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 321              		.loc 1 299 0
 322 0032 4FF48053 		mov	r3, #4096
 323 0036 0493     		str	r3, [sp, #16]
 300:Src/main.c    ****   {
 324              		.loc 1 300 0
 325 0038 04A9     		add	r1, sp, #16
 326 003a 2846     		mov	r0, r5
 327 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 328              	.LVL17:
 304:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 329              		.loc 1 304 0
 330 0040 0194     		str	r4, [sp, #4]
 305:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 331              		.loc 1 305 0
 332 0042 0394     		str	r4, [sp, #12]
 306:Src/main.c    ****   {
 333              		.loc 1 306 0
 334 0044 01A9     		add	r1, sp, #4
 335 0046 2846     		mov	r0, r5
 336 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 337              	.LVL18:
 314:Src/main.c    **** 
 338              		.loc 1 314 0
 339 004c 09B0     		add	sp, sp, #36
 340              	.LCFI7:
 341              		.cfi_def_cfa_offset 12
 342              		@ sp needed
 343 004e 30BD     		pop	{r4, r5, pc}
 344              	.L14:
 345              		.align	2
 346              	.L13:
 347 0050 00000000 		.word	htim2
 348              		.cfi_endproc
 349              	.LFE146:
 351              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 352              		.align	1
 353              		.syntax unified
 354              		.thumb
 355              		.thumb_func
 356              		.fpu fpv5-d16
 358              	MX_USART2_UART_Init:
 359              	.LFB147:
 322:Src/main.c    **** 
 360              		.loc 1 322 0
ARM GAS  /tmp/ccFFwVR3.s 			page 15


 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 0
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 08B5     		push	{r3, lr}
 365              	.LCFI8:
 366              		.cfi_def_cfa_offset 8
 367              		.cfi_offset 3, -8
 368              		.cfi_offset 14, -4
 331:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 369              		.loc 1 331 0
 370 0002 0948     		ldr	r0, .L17
 371 0004 094B     		ldr	r3, .L17+4
 372 0006 0360     		str	r3, [r0]
 332:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 373              		.loc 1 332 0
 374 0008 4FF4E133 		mov	r3, #115200
 375 000c 4360     		str	r3, [r0, #4]
 333:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 376              		.loc 1 333 0
 377 000e 0023     		movs	r3, #0
 378 0010 8360     		str	r3, [r0, #8]
 334:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 379              		.loc 1 334 0
 380 0012 C360     		str	r3, [r0, #12]
 335:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 381              		.loc 1 335 0
 382 0014 0361     		str	r3, [r0, #16]
 336:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 383              		.loc 1 336 0
 384 0016 0C22     		movs	r2, #12
 385 0018 4261     		str	r2, [r0, #20]
 337:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 386              		.loc 1 337 0
 387 001a 8361     		str	r3, [r0, #24]
 338:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 388              		.loc 1 338 0
 389 001c C361     		str	r3, [r0, #28]
 339:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 390              		.loc 1 339 0
 391 001e 0362     		str	r3, [r0, #32]
 340:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 392              		.loc 1 340 0
 393 0020 4362     		str	r3, [r0, #36]
 341:Src/main.c    ****   {
 394              		.loc 1 341 0
 395 0022 FFF7FEFF 		bl	HAL_UART_Init
 396              	.LVL19:
 397 0026 08BD     		pop	{r3, pc}
 398              	.L18:
 399              		.align	2
 400              	.L17:
 401 0028 00000000 		.word	huart2
 402 002c 00440040 		.word	1073759232
 403              		.cfi_endproc
 404              	.LFE147:
 406              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 407              		.align	1
ARM GAS  /tmp/ccFFwVR3.s 			page 16


 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv5-d16
 413              	MX_USART3_UART_Init:
 414              	.LFB148:
 357:Src/main.c    **** 
 415              		.loc 1 357 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419 0000 08B5     		push	{r3, lr}
 420              	.LCFI9:
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 3, -8
 423              		.cfi_offset 14, -4
 366:Src/main.c    ****   huart3.Init.BaudRate = 2000000;
 424              		.loc 1 366 0
 425 0002 0948     		ldr	r0, .L21
 426 0004 094B     		ldr	r3, .L21+4
 427 0006 0360     		str	r3, [r0]
 367:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 428              		.loc 1 367 0
 429 0008 094B     		ldr	r3, .L21+8
 430 000a 4360     		str	r3, [r0, #4]
 368:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 431              		.loc 1 368 0
 432 000c 0023     		movs	r3, #0
 433 000e 8360     		str	r3, [r0, #8]
 369:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 434              		.loc 1 369 0
 435 0010 C360     		str	r3, [r0, #12]
 370:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 436              		.loc 1 370 0
 437 0012 0361     		str	r3, [r0, #16]
 371:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 438              		.loc 1 371 0
 439 0014 0C22     		movs	r2, #12
 440 0016 4261     		str	r2, [r0, #20]
 372:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 441              		.loc 1 372 0
 442 0018 8361     		str	r3, [r0, #24]
 373:Src/main.c    ****   huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 443              		.loc 1 373 0
 444 001a C361     		str	r3, [r0, #28]
 374:Src/main.c    ****   huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 445              		.loc 1 374 0
 446 001c 0362     		str	r3, [r0, #32]
 375:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 447              		.loc 1 375 0
 448 001e 4362     		str	r3, [r0, #36]
 376:Src/main.c    ****   {
 449              		.loc 1 376 0
 450 0020 FFF7FEFF 		bl	HAL_UART_Init
 451              	.LVL20:
 452 0024 08BD     		pop	{r3, pc}
 453              	.L22:
ARM GAS  /tmp/ccFFwVR3.s 			page 17


 454 0026 00BF     		.align	2
 455              	.L21:
 456 0028 00000000 		.word	huart3
 457 002c 00480040 		.word	1073760256
 458 0030 80841E00 		.word	2000000
 459              		.cfi_endproc
 460              	.LFE148:
 462              		.section	.text.SystemClock_Config,"ax",%progbits
 463              		.align	1
 464              		.global	SystemClock_Config
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu fpv5-d16
 470              	SystemClock_Config:
 471              	.LFB143:
 156:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 472              		.loc 1 156 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 224
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476 0000 30B5     		push	{r4, r5, lr}
 477              	.LCFI10:
 478              		.cfi_def_cfa_offset 12
 479              		.cfi_offset 4, -12
 480              		.cfi_offset 5, -8
 481              		.cfi_offset 14, -4
 482 0002 B9B0     		sub	sp, sp, #228
 483              	.LCFI11:
 484              		.cfi_def_cfa_offset 240
 157:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 485              		.loc 1 157 0
 486 0004 3422     		movs	r2, #52
 487 0006 0021     		movs	r1, #0
 488 0008 2BA8     		add	r0, sp, #172
 489 000a FFF7FEFF 		bl	memset
 490              	.LVL21:
 158:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 491              		.loc 1 158 0
 492 000e 0024     		movs	r4, #0
 493 0010 2694     		str	r4, [sp, #152]
 494 0012 2794     		str	r4, [sp, #156]
 495 0014 2894     		str	r4, [sp, #160]
 496 0016 2994     		str	r4, [sp, #164]
 497 0018 2A94     		str	r4, [sp, #168]
 159:Src/main.c    **** 
 498              		.loc 1 159 0
 499 001a 9022     		movs	r2, #144
 500 001c 2146     		mov	r1, r4
 501 001e 02A8     		add	r0, sp, #8
 502 0020 FFF7FEFF 		bl	memset
 503              	.LVL22:
 504              	.LBB5:
 163:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 505              		.loc 1 163 0
 506 0024 1F4B     		ldr	r3, .L25
 507 0026 1A6C     		ldr	r2, [r3, #64]
ARM GAS  /tmp/ccFFwVR3.s 			page 18


 508 0028 42F08052 		orr	r2, r2, #268435456
 509 002c 1A64     		str	r2, [r3, #64]
 510 002e 1B6C     		ldr	r3, [r3, #64]
 511 0030 03F08053 		and	r3, r3, #268435456
 512 0034 0093     		str	r3, [sp]
 513 0036 009B     		ldr	r3, [sp]
 514              	.LBE5:
 515              	.LBB6:
 164:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 516              		.loc 1 164 0
 517 0038 1B4B     		ldr	r3, .L25+4
 518 003a 1A68     		ldr	r2, [r3]
 519 003c 42F44042 		orr	r2, r2, #49152
 520 0040 1A60     		str	r2, [r3]
 521 0042 1B68     		ldr	r3, [r3]
 522 0044 03F44043 		and	r3, r3, #49152
 523 0048 0193     		str	r3, [sp, #4]
 524 004a 019B     		ldr	r3, [sp, #4]
 525              	.LBE6:
 167:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 526              		.loc 1 167 0
 527 004c 0225     		movs	r5, #2
 528 004e 2B95     		str	r5, [sp, #172]
 168:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 529              		.loc 1 168 0
 530 0050 0123     		movs	r3, #1
 531 0052 2E93     		str	r3, [sp, #184]
 169:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 532              		.loc 1 169 0
 533 0054 1023     		movs	r3, #16
 534 0056 2F93     		str	r3, [sp, #188]
 170:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 535              		.loc 1 170 0
 536 0058 3195     		str	r5, [sp, #196]
 171:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 537              		.loc 1 171 0
 538 005a 3294     		str	r4, [sp, #200]
 172:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 216;
 539              		.loc 1 172 0
 540 005c 0823     		movs	r3, #8
 541 005e 3393     		str	r3, [sp, #204]
 173:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 542              		.loc 1 173 0
 543 0060 D823     		movs	r3, #216
 544 0062 3493     		str	r3, [sp, #208]
 174:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 9;
 545              		.loc 1 174 0
 546 0064 3595     		str	r5, [sp, #212]
 175:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 547              		.loc 1 175 0
 548 0066 0923     		movs	r3, #9
 549 0068 3693     		str	r3, [sp, #216]
 176:Src/main.c    ****   {
 550              		.loc 1 176 0
 551 006a 2BA8     		add	r0, sp, #172
 552 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 553              	.LVL23:
ARM GAS  /tmp/ccFFwVR3.s 			page 19


 182:Src/main.c    ****   {
 554              		.loc 1 182 0
 555 0070 FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 556              	.LVL24:
 188:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 557              		.loc 1 188 0
 558 0074 0F23     		movs	r3, #15
 559 0076 2693     		str	r3, [sp, #152]
 190:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 560              		.loc 1 190 0
 561 0078 2795     		str	r5, [sp, #156]
 191:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 562              		.loc 1 191 0
 563 007a 2894     		str	r4, [sp, #160]
 192:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 564              		.loc 1 192 0
 565 007c 4FF4A053 		mov	r3, #5120
 566 0080 2993     		str	r3, [sp, #164]
 193:Src/main.c    **** 
 567              		.loc 1 193 0
 568 0082 4FF48053 		mov	r3, #4096
 569 0086 2A93     		str	r3, [sp, #168]
 195:Src/main.c    ****   {
 570              		.loc 1 195 0
 571 0088 0721     		movs	r1, #7
 572 008a 26A8     		add	r0, sp, #152
 573 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 574              	.LVL25:
 199:Src/main.c    ****   PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 575              		.loc 1 199 0
 576 0090 4FF4C073 		mov	r3, #384
 577 0094 0293     		str	r3, [sp, #8]
 200:Src/main.c    ****   PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 578              		.loc 1 200 0
 579 0096 1494     		str	r4, [sp, #80]
 201:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 580              		.loc 1 201 0
 581 0098 1594     		str	r4, [sp, #84]
 202:Src/main.c    ****   {
 582              		.loc 1 202 0
 583 009a 02A8     		add	r0, sp, #8
 584 009c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 585              	.LVL26:
 206:Src/main.c    **** 
 586              		.loc 1 206 0
 587 00a0 39B0     		add	sp, sp, #228
 588              	.LCFI12:
 589              		.cfi_def_cfa_offset 12
 590              		@ sp needed
 591 00a2 30BD     		pop	{r4, r5, pc}
 592              	.L26:
 593              		.align	2
 594              	.L25:
 595 00a4 00380240 		.word	1073887232
 596 00a8 00700040 		.word	1073770496
 597              		.cfi_endproc
 598              	.LFE143:
ARM GAS  /tmp/ccFFwVR3.s 			page 20


 600              		.section	.text.main,"ax",%progbits
 601              		.align	1
 602              		.global	main
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 606              		.fpu fpv5-d16
 608              	main:
 609              	.LFB142:
  82:Src/main.c    ****   /* USER CODE BEGIN 1 */
 610              		.loc 1 82 0
 611              		.cfi_startproc
 612              		@ Volatile: function does not return.
 613              		@ args = 0, pretend = 0, frame = 104
 614              		@ frame_needed = 0, uses_anonymous_args = 0
 615 0000 00B5     		push	{lr}
 616              	.LCFI13:
 617              		.cfi_def_cfa_offset 4
 618              		.cfi_offset 14, -4
 619 0002 9BB0     		sub	sp, sp, #108
 620              	.LCFI14:
 621              		.cfi_def_cfa_offset 112
  91:Src/main.c    **** 
 622              		.loc 1 91 0
 623 0004 FFF7FEFF 		bl	HAL_Init
 624              	.LVL27:
  98:Src/main.c    **** 
 625              		.loc 1 98 0
 626 0008 FFF7FEFF 		bl	SystemClock_Config
 627              	.LVL28:
 105:Src/main.c    ****   MX_CAN1_Init();
 628              		.loc 1 105 0
 629 000c FFF7FEFF 		bl	MX_GPIO_Init
 630              	.LVL29:
 106:Src/main.c    ****   MX_TIM2_Init();
 631              		.loc 1 106 0
 632 0010 FFF7FEFF 		bl	MX_CAN1_Init
 633              	.LVL30:
 107:Src/main.c    ****   MX_USART2_UART_Init();
 634              		.loc 1 107 0
 635 0014 FFF7FEFF 		bl	MX_TIM2_Init
 636              	.LVL31:
 108:Src/main.c    ****   MX_USART3_UART_Init();
 637              		.loc 1 108 0
 638 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 639              	.LVL32:
 109:Src/main.c    **** 
 640              		.loc 1 109 0
 641 001c FFF7FEFF 		bl	MX_USART3_UART_Init
 642              	.LVL33:
 112:Src/main.c    ****   /* USER CODE BEGIN 2 */
 643              		.loc 1 112 0
 644 0020 FFF7FEFF 		bl	MX_NVIC_Init
 645              	.LVL34:
 114:Src/main.c    ****   gps.huart_gps = &huart2;
 646              		.loc 1 114 0
 647 0024 194D     		ldr	r5, .L32
ARM GAS  /tmp/ccFFwVR3.s 			page 21


 648 0026 0A23     		movs	r3, #10
 649 0028 0622     		movs	r2, #6
 650 002a 1949     		ldr	r1, .L32+4
 651 002c 2846     		mov	r0, r5
 652 002e FFF7FEFF 		bl	HAL_UART_Transmit
 653              	.LVL35:
 115:Src/main.c    ****   //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
 654              		.loc 1 115 0
 655 0032 184C     		ldr	r4, .L32+8
 656 0034 184B     		ldr	r3, .L32+12
 657 0036 1C60     		str	r4, [r3]
 126:Src/main.c    ****   //gps_init(&huart2, &gps);
 658              		.loc 1 126 0
 659 0038 0122     		movs	r2, #1
 660 003a 1849     		ldr	r1, .L32+16
 661 003c 2846     		mov	r0, r5
 662 003e FFF7FEFF 		bl	HAL_UART_Receive_IT
 663              	.LVL36:
 130:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 664              		.loc 1 130 0
 665 0042 0022     		movs	r2, #0
 666 0044 1146     		mov	r1, r2
 667 0046 2620     		movs	r0, #38
 668 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 669              	.LVL37:
 131:Src/main.c    ****   if(HAL_UART_Receive_IT(&huart2, (uint8_t *)msg_gps, 1) != HAL_OK){ //request of rx buffer interru
 670              		.loc 1 131 0
 671 004c 2620     		movs	r0, #38
 672 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 673              	.LVL38:
 132:Src/main.c    ****     char txt[100];
 674              		.loc 1 132 0
 675 0052 0122     		movs	r2, #1
 676 0054 1249     		ldr	r1, .L32+20
 677 0056 2046     		mov	r0, r4
 678 0058 FFF7FEFF 		bl	HAL_UART_Receive_IT
 679              	.LVL39:
 680 005c 20B9     		cbnz	r0, .L31
 681              	.L29:
 143:Src/main.c    ****     /* USER CODE END WHILE */
 682              		.loc 1 143 0 discriminator 1
 683 005e 0E49     		ldr	r1, .L32+12
 684 0060 0C48     		ldr	r0, .L32+8
 685 0062 FFF7FEFF 		bl	gps_read
 686              	.LVL40:
 687 0066 FAE7     		b	.L29
 688              	.L31:
 689              	.LBB7:
 134:Src/main.c    ****     HAL_UART_Transmit(&huart3,(uint8_t*)txt,strlen(txt),10);
 690              		.loc 1 134 0
 691 0068 01AC     		add	r4, sp, #4
 692 006a 0E4D     		ldr	r5, .L32+24
 693 006c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 694 006e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 695 0070 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 696 0074 07C4     		stmia	r4!, {r0, r1, r2}
 697 0076 2370     		strb	r3, [r4]
ARM GAS  /tmp/ccFFwVR3.s 			page 22


 135:Src/main.c    ****   }
 698              		.loc 1 135 0
 699 0078 01A8     		add	r0, sp, #4
 700 007a FFF7FEFF 		bl	strlen
 701              	.LVL41:
 702 007e 0A23     		movs	r3, #10
 703 0080 82B2     		uxth	r2, r0
 704 0082 01A9     		add	r1, sp, #4
 705 0084 0148     		ldr	r0, .L32
 706 0086 FFF7FEFF 		bl	HAL_UART_Transmit
 707              	.LVL42:
 708 008a E8E7     		b	.L29
 709              	.L33:
 710              		.align	2
 711              	.L32:
 712 008c 00000000 		.word	huart3
 713 0090 00000000 		.word	.LC0
 714 0094 00000000 		.word	huart2
 715 0098 00000000 		.word	gps
 716 009c 00000000 		.word	msg_computer
 717 00a0 00000000 		.word	msg_gps
 718 00a4 08000000 		.word	.LC1
 719              	.LBE7:
 720              		.cfi_endproc
 721              	.LFE142:
 723              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 724              		.align	1
 725              		.global	HAL_UART_RxCpltCallback
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 729              		.fpu fpv5-d16
 731              	HAL_UART_RxCpltCallback:
 732              	.LFB150:
 417:Src/main.c    **** 
 418:Src/main.c    **** /* USER CODE BEGIN 4 */
 419:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 420:Src/main.c    **** {
 733              		.loc 1 420 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              	.LVL43:
 738 0000 38B5     		push	{r3, r4, r5, lr}
 739              	.LCFI15:
 740              		.cfi_def_cfa_offset 16
 741              		.cfi_offset 3, -16
 742              		.cfi_offset 4, -12
 743              		.cfi_offset 5, -8
 744              		.cfi_offset 14, -4
 745 0002 0446     		mov	r4, r0
 421:Src/main.c    ****     if (huart == &huart2)
 746              		.loc 1 421 0
 747 0004 194B     		ldr	r3, .L42
 748 0006 9842     		cmp	r0, r3
 749 0008 03D0     		beq	.L39
 422:Src/main.c    ****     {
ARM GAS  /tmp/ccFFwVR3.s 			page 23


 423:Src/main.c    ****         buffer_gps[msg_arrived] = msg_gps[0];
 424:Src/main.c    ****         msg_arrived++;
 425:Src/main.c    ****         if(msg_arrived == 50){
 426:Src/main.c    ****           msg_arrived = 0;
 427:Src/main.c    ****         }
 428:Src/main.c    ****         HAL_GPIO_TogglePin(LED_blue_GPIO_Port, LED_blue_Pin);
 429:Src/main.c    ****         HAL_UART_Transmit(&huart3,(uint8_t*)msg_gps,1,10);
 430:Src/main.c    ****         HAL_UART_Receive_IT(huart, (uint8_t *)msg_gps, 1); //request of rx buffer interrupt
 431:Src/main.c    **** 
 432:Src/main.c    ****     }else if(huart == &huart3){
 750              		.loc 1 432 0
 751 000a 194B     		ldr	r3, .L42+4
 752 000c 9842     		cmp	r0, r3
 753 000e 1FD0     		beq	.L40
 754              	.LVL44:
 755              	.L34:
 756 0010 38BD     		pop	{r3, r4, r5, pc}
 757              	.LVL45:
 758              	.L39:
 423:Src/main.c    ****         msg_arrived++;
 759              		.loc 1 423 0
 760 0012 184A     		ldr	r2, .L42+8
 761 0014 1368     		ldr	r3, [r2]
 762 0016 1849     		ldr	r1, .L42+12
 763 0018 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 764              	.LVL46:
 765 001a 1849     		ldr	r1, .L42+16
 766 001c C854     		strb	r0, [r1, r3]
 424:Src/main.c    ****         if(msg_arrived == 50){
 767              		.loc 1 424 0
 768 001e 0133     		adds	r3, r3, #1
 769 0020 1360     		str	r3, [r2]
 425:Src/main.c    ****           msg_arrived = 0;
 770              		.loc 1 425 0
 771 0022 322B     		cmp	r3, #50
 772 0024 10D0     		beq	.L41
 773              	.L36:
 428:Src/main.c    ****         HAL_UART_Transmit(&huart3,(uint8_t*)msg_gps,1,10);
 774              		.loc 1 428 0
 775 0026 8021     		movs	r1, #128
 776 0028 1548     		ldr	r0, .L42+20
 777 002a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 778              	.LVL47:
 429:Src/main.c    ****         HAL_UART_Receive_IT(huart, (uint8_t *)msg_gps, 1); //request of rx buffer interrupt
 779              		.loc 1 429 0
 780 002e 124D     		ldr	r5, .L42+12
 781 0030 0A23     		movs	r3, #10
 782 0032 0122     		movs	r2, #1
 783 0034 2946     		mov	r1, r5
 784 0036 0E48     		ldr	r0, .L42+4
 785 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 786              	.LVL48:
 430:Src/main.c    **** 
 787              		.loc 1 430 0
 788 003c 0122     		movs	r2, #1
 789 003e 2946     		mov	r1, r5
 790 0040 2046     		mov	r0, r4
ARM GAS  /tmp/ccFFwVR3.s 			page 24


 791 0042 FFF7FEFF 		bl	HAL_UART_Receive_IT
 792              	.LVL49:
 793 0046 38BD     		pop	{r3, r4, r5, pc}
 794              	.LVL50:
 795              	.L41:
 426:Src/main.c    ****         }
 796              		.loc 1 426 0
 797 0048 0022     		movs	r2, #0
 798 004a 0A4B     		ldr	r3, .L42+8
 799 004c 1A60     		str	r2, [r3]
 800 004e EAE7     		b	.L36
 801              	.LVL51:
 802              	.L40:
 433:Src/main.c    ****         HAL_UART_Transmit(&huart3,(uint8_t*)msg_computer,1,10);
 803              		.loc 1 433 0
 804 0050 0C4D     		ldr	r5, .L42+24
 805 0052 1C46     		mov	r4, r3
 806 0054 0A23     		movs	r3, #10
 807 0056 0122     		movs	r2, #1
 808 0058 2946     		mov	r1, r5
 809 005a 2046     		mov	r0, r4
 810              	.LVL52:
 811 005c FFF7FEFF 		bl	HAL_UART_Transmit
 812              	.LVL53:
 434:Src/main.c    ****         HAL_UART_Receive_IT(&huart3, (uint8_t *)msg_computer, 1); //request of rx buffer interrupt
 813              		.loc 1 434 0
 814 0060 0122     		movs	r2, #1
 815 0062 2946     		mov	r1, r5
 816 0064 2046     		mov	r0, r4
 817 0066 FFF7FEFF 		bl	HAL_UART_Receive_IT
 818              	.LVL54:
 435:Src/main.c    ****     }
 436:Src/main.c    **** }
 819              		.loc 1 436 0
 820 006a D1E7     		b	.L34
 821              	.L43:
 822              		.align	2
 823              	.L42:
 824 006c 00000000 		.word	huart2
 825 0070 00000000 		.word	huart3
 826 0074 00000000 		.word	.LANCHOR0
 827 0078 00000000 		.word	msg_gps
 828 007c 00000000 		.word	buffer_gps
 829 0080 00040240 		.word	1073873920
 830 0084 00000000 		.word	msg_computer
 831              		.cfi_endproc
 832              	.LFE150:
 834              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 835              		.align	1
 836              		.global	HAL_UART_ErrorCallback
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu fpv5-d16
 842              	HAL_UART_ErrorCallback:
 843              	.LFB151:
 437:Src/main.c    **** void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
ARM GAS  /tmp/ccFFwVR3.s 			page 25


 844              		.loc 1 437 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 104
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              	.LVL55:
 849 0000 00B5     		push	{lr}
 850              	.LCFI16:
 851              		.cfi_def_cfa_offset 4
 852              		.cfi_offset 14, -4
 853 0002 9BB0     		sub	sp, sp, #108
 854              	.LCFI17:
 855              		.cfi_def_cfa_offset 112
 438:Src/main.c    ****   int errore = HAL_UART_GetError(huart);
 856              		.loc 1 438 0
 857 0004 FFF7FEFF 		bl	HAL_UART_GetError
 858              	.LVL56:
 439:Src/main.c    ****   char txt[100];
 440:Src/main.c    ****   sprintf(txt,"CALLBACK ERRORE %d\r\n",errore);
 859              		.loc 1 440 0
 860 0008 0246     		mov	r2, r0
 861 000a 0849     		ldr	r1, .L46
 862 000c 01A8     		add	r0, sp, #4
 863              	.LVL57:
 864 000e FFF7FEFF 		bl	sprintf
 865              	.LVL58:
 441:Src/main.c    ****   HAL_UART_Transmit(&huart3,(uint8_t*)txt,strlen(txt),10);
 866              		.loc 1 441 0
 867 0012 01A8     		add	r0, sp, #4
 868 0014 FFF7FEFF 		bl	strlen
 869              	.LVL59:
 870 0018 0A23     		movs	r3, #10
 871 001a 82B2     		uxth	r2, r0
 872 001c 01A9     		add	r1, sp, #4
 873 001e 0448     		ldr	r0, .L46+4
 874 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 875              	.LVL60:
 442:Src/main.c    **** }
 876              		.loc 1 442 0
 877 0024 1BB0     		add	sp, sp, #108
 878              	.LCFI18:
 879              		.cfi_def_cfa_offset 4
 880              		@ sp needed
 881 0026 5DF804FB 		ldr	pc, [sp], #4
 882              	.L47:
 883 002a 00BF     		.align	2
 884              	.L46:
 885 002c 00000000 		.word	.LC2
 886 0030 00000000 		.word	huart3
 887              		.cfi_endproc
 888              	.LFE151:
 890              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 891              		.align	1
 892              		.global	HAL_UART_AbortReceiveCpltCallback
 893              		.syntax unified
 894              		.thumb
 895              		.thumb_func
 896              		.fpu fpv5-d16
ARM GAS  /tmp/ccFFwVR3.s 			page 26


 898              	HAL_UART_AbortReceiveCpltCallback:
 899              	.LFB152:
 443:Src/main.c    **** void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart){
 900              		.loc 1 443 0
 901              		.cfi_startproc
 902              		@ args = 0, pretend = 0, frame = 104
 903              		@ frame_needed = 0, uses_anonymous_args = 0
 904              	.LVL61:
 905 0000 00B5     		push	{lr}
 906              	.LCFI19:
 907              		.cfi_def_cfa_offset 4
 908              		.cfi_offset 14, -4
 909 0002 9BB0     		sub	sp, sp, #108
 910              	.LCFI20:
 911              		.cfi_def_cfa_offset 112
 444:Src/main.c    ****   int errore = HAL_UART_GetError(huart);
 912              		.loc 1 444 0
 913 0004 FFF7FEFF 		bl	HAL_UART_GetError
 914              	.LVL62:
 445:Src/main.c    ****   char txt[100];
 446:Src/main.c    ****   sprintf(txt,"CALLBACK ABORT RECIVE %d\r\n",errore);
 915              		.loc 1 446 0
 916 0008 0246     		mov	r2, r0
 917 000a 0849     		ldr	r1, .L50
 918 000c 01A8     		add	r0, sp, #4
 919              	.LVL63:
 920 000e FFF7FEFF 		bl	sprintf
 921              	.LVL64:
 447:Src/main.c    ****   HAL_UART_Transmit(&huart3,(uint8_t*)txt,strlen(txt),10);
 922              		.loc 1 447 0
 923 0012 01A8     		add	r0, sp, #4
 924 0014 FFF7FEFF 		bl	strlen
 925              	.LVL65:
 926 0018 0A23     		movs	r3, #10
 927 001a 82B2     		uxth	r2, r0
 928 001c 01A9     		add	r1, sp, #4
 929 001e 0448     		ldr	r0, .L50+4
 930 0020 FFF7FEFF 		bl	HAL_UART_Transmit
 931              	.LVL66:
 448:Src/main.c    **** }
 932              		.loc 1 448 0
 933 0024 1BB0     		add	sp, sp, #108
 934              	.LCFI21:
 935              		.cfi_def_cfa_offset 4
 936              		@ sp needed
 937 0026 5DF804FB 		ldr	pc, [sp], #4
 938              	.L51:
 939 002a 00BF     		.align	2
 940              	.L50:
 941 002c 00000000 		.word	.LC3
 942 0030 00000000 		.word	huart3
 943              		.cfi_endproc
 944              	.LFE152:
 946              		.section	.text.Error_Handler,"ax",%progbits
 947              		.align	1
 948              		.global	Error_Handler
 949              		.syntax unified
ARM GAS  /tmp/ccFFwVR3.s 			page 27


 950              		.thumb
 951              		.thumb_func
 952              		.fpu fpv5-d16
 954              	Error_Handler:
 955              	.LFB153:
 449:Src/main.c    **** /* USER CODE END 4 */
 450:Src/main.c    **** 
 451:Src/main.c    **** /**
 452:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 453:Src/main.c    ****   * @retval None
 454:Src/main.c    ****   */
 455:Src/main.c    **** void Error_Handler(void)
 456:Src/main.c    **** {
 956              		.loc 1 456 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 961 0000 7047     		bx	lr
 962              		.cfi_endproc
 963              	.LFE153:
 965              		.comm	gps,204,4
 966              		.comm	msg_computer,3,4
 967              		.global	msg_arrived
 968              		.comm	cont_char,4,4
 969              		.comm	buffer_gps,50,4
 970              		.comm	msg_gps,3,4
 971              		.comm	huart3,128,4
 972              		.comm	huart2,128,4
 973              		.comm	htim2,64,4
 974              		.comm	hcan1,40,4
 975              		.section	.bss.msg_arrived,"aw",%nobits
 976              		.align	2
 977              		.set	.LANCHOR0,. + 0
 980              	msg_arrived:
 981 0000 00000000 		.space	4
 982              		.section	.rodata.HAL_UART_AbortReceiveCpltCallback.str1.4,"aMS",%progbits,1
 983              		.align	2
 984              	.LC3:
 985 0000 43414C4C 		.ascii	"CALLBACK ABORT RECIVE %d\015\012\000"
 985      4241434B 
 985      2041424F 
 985      52542052 
 985      45434956 
 986              		.section	.rodata.HAL_UART_ErrorCallback.str1.4,"aMS",%progbits,1
 987              		.align	2
 988              	.LC2:
 989 0000 43414C4C 		.ascii	"CALLBACK ERRORE %d\015\012\000"
 989      4241434B 
 989      20455252 
 989      4F524520 
 989      25640D0A 
 990              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 991              		.align	2
 992              	.LC0:
 993 0000 6369616F 		.ascii	"ciao\015\012\000"
 993      0D0A00
ARM GAS  /tmp/ccFFwVR3.s 			page 28


 994 0007 00       		.space	1
 995              	.LC1:
 996 0008 48414C5F 		.ascii	"HAL_UART_Receive_IT FAILED\015\012\000"
 996      55415254 
 996      5F526563 
 996      65697665 
 996      5F495420 
 997              		.text
 998              	.Letext0:
 999              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1000              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1001              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 1002              		.file 5 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/system_stm32f7xx.h"
 1003              		.file 6 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1004              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1005              		.file 8 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1006              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc_ex.h"
 1007              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_rcc.h"
 1008              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1009              		.file 12 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_dma.h"
 1010              		.file 13 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_can.h"
 1011              		.file 14 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim.h"
 1012              		.file 15 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_uart.h"
 1013              		.file 16 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1014              		.file 17 "/usr/include/newlib/sys/lock.h"
 1015              		.file 18 "/usr/include/newlib/sys/_types.h"
 1016              		.file 19 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1017              		.file 20 "/usr/include/newlib/sys/reent.h"
 1018              		.file 21 "/usr/include/newlib/stdlib.h"
 1019              		.file 22 "Inc/gps.h"
 1020              		.file 23 "/usr/include/newlib/stdio.h"
 1021              		.file 24 "/usr/include/newlib/string.h"
 1022              		.file 25 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_tim_ex.h"
 1023              		.file 26 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1024              		.file 27 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_pwr_ex.h"
ARM GAS  /tmp/ccFFwVR3.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFFwVR3.s:17     .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccFFwVR3.s:23     .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccFFwVR3.s:100    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFFwVR3.s:106    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFFwVR3.s:202    .text.MX_GPIO_Init:0000000000000084 $d
     /tmp/ccFFwVR3.s:209    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccFFwVR3.s:215    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccFFwVR3.s:264    .text.MX_CAN1_Init:0000000000000034 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccFFwVR3.s:270    .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccFFwVR3.s:276    .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccFFwVR3.s:347    .text.MX_TIM2_Init:0000000000000050 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccFFwVR3.s:352    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccFFwVR3.s:358    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccFFwVR3.s:401    .text.MX_USART2_UART_Init:0000000000000028 $d
                            *COM*:0000000000000080 huart2
     /tmp/ccFFwVR3.s:407    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccFFwVR3.s:413    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccFFwVR3.s:456    .text.MX_USART3_UART_Init:0000000000000028 $d
                            *COM*:0000000000000080 huart3
     /tmp/ccFFwVR3.s:463    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFFwVR3.s:470    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFFwVR3.s:595    .text.SystemClock_Config:00000000000000a4 $d
     /tmp/ccFFwVR3.s:601    .text.main:0000000000000000 $t
     /tmp/ccFFwVR3.s:608    .text.main:0000000000000000 main
     /tmp/ccFFwVR3.s:712    .text.main:000000000000008c $d
                            *COM*:00000000000000cc gps
                            *COM*:0000000000000003 msg_computer
                            *COM*:0000000000000003 msg_gps
     /tmp/ccFFwVR3.s:724    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccFFwVR3.s:731    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccFFwVR3.s:824    .text.HAL_UART_RxCpltCallback:000000000000006c $d
                            *COM*:0000000000000032 buffer_gps
     /tmp/ccFFwVR3.s:835    .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccFFwVR3.s:842    .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccFFwVR3.s:885    .text.HAL_UART_ErrorCallback:000000000000002c $d
     /tmp/ccFFwVR3.s:891    .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccFFwVR3.s:898    .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccFFwVR3.s:941    .text.HAL_UART_AbortReceiveCpltCallback:000000000000002c $d
     /tmp/ccFFwVR3.s:947    .text.Error_Handler:0000000000000000 $t
     /tmp/ccFFwVR3.s:954    .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccFFwVR3.s:980    .bss.msg_arrived:0000000000000000 msg_arrived
                            *COM*:0000000000000004 cont_char
     /tmp/ccFFwVR3.s:976    .bss.msg_arrived:0000000000000000 $d
     /tmp/ccFFwVR3.s:983    .rodata.HAL_UART_AbortReceiveCpltCallback.str1.4:0000000000000000 $d
     /tmp/ccFFwVR3.s:987    .rodata.HAL_UART_ErrorCallback.str1.4:0000000000000000 $d
     /tmp/ccFFwVR3.s:991    .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
ARM GAS  /tmp/ccFFwVR3.s 			page 30


HAL_CAN_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_UART_Init
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_UART_Transmit
HAL_UART_Receive_IT
gps_read
strlen
HAL_GPIO_TogglePin
HAL_UART_GetError
sprintf
