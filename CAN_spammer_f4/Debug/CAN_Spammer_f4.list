
CAN_Spammer_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f4  080039f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039f4  080039f4  000139f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039fc  080039fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08003a74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003a74  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009807  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019c2  00000000  00000000  000298a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002b270  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000798  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000215f2  00000000  00000000  0002c278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000747f  00000000  00000000  0004d86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9d8a  00000000  00000000  00054ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ea73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024c4  00000000  00000000  0011eaf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080038b4 	.word	0x080038b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080038b4 	.word	0x080038b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c6:	f000 fc33 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ca:	f000 f8b9 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ce:	f000 f9ad 	bl	800092c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005d2:	f000 f94b 	bl	800086c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f97f 	bl	80008d8 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80005da:	f000 f923 	bl	8000824 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart2, (uint8_t*)"***** START *****\r\n", strlen("***** START *****\r\n"), 10);
 80005de:	230a      	movs	r3, #10
 80005e0:	2213      	movs	r2, #19
 80005e2:	494c      	ldr	r1, [pc, #304]	; (8000714 <main+0x154>)
 80005e4:	484c      	ldr	r0, [pc, #304]	; (8000718 <main+0x158>)
 80005e6:	f002 fa40 	bl	8002a6a <HAL_UART_Transmit>

	sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80005ea:	4b4c      	ldr	r3, [pc, #304]	; (800071c <main+0x15c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
	sFilter.FilterIdLow = 0;
 80005f0:	4b4a      	ldr	r3, [pc, #296]	; (800071c <main+0x15c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
	sFilter.FilterIdHigh = 0;
 80005f6:	4b49      	ldr	r3, [pc, #292]	; (800071c <main+0x15c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
	sFilter.FilterMaskIdHigh = 0;
 80005fc:	4b47      	ldr	r3, [pc, #284]	; (800071c <main+0x15c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
	sFilter.FilterMaskIdLow = 0;
 8000602:	4b46      	ldr	r3, [pc, #280]	; (800071c <main+0x15c>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
	sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000608:	4b44      	ldr	r3, [pc, #272]	; (800071c <main+0x15c>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
	sFilter.FilterBank = 0;
 800060e:	4b43      	ldr	r3, [pc, #268]	; (800071c <main+0x15c>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
	sFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 8000614:	4b41      	ldr	r3, [pc, #260]	; (800071c <main+0x15c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
	sFilter.FilterActivation = ENABLE;
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <main+0x15c>)
 800061c:	2201      	movs	r2, #1
 800061e:	621a      	str	r2, [r3, #32]
	configFilter_status = HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 8000620:	493e      	ldr	r1, [pc, #248]	; (800071c <main+0x15c>)
 8000622:	483f      	ldr	r0, [pc, #252]	; (8000720 <main+0x160>)
 8000624:	f000 fd94 	bl	8001150 <HAL_CAN_ConfigFilter>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <main+0x164>)
 800062e:	701a      	strb	r2, [r3, #0]


	HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 8000630:	2114      	movs	r1, #20
 8000632:	483b      	ldr	r0, [pc, #236]	; (8000720 <main+0x160>)
 8000634:	f000 ffe4 	bl	8001600 <HAL_CAN_ActivateNotification>
	activateNotif_status = HAL_CAN_ActivateNotification(&hcan1, CAN1_TX_IRQn);
 8000638:	2113      	movs	r1, #19
 800063a:	4839      	ldr	r0, [pc, #228]	; (8000720 <main+0x160>)
 800063c:	f000 ffe0 	bl	8001600 <HAL_CAN_ActivateNotification>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b38      	ldr	r3, [pc, #224]	; (8000728 <main+0x168>)
 8000646:	701a      	strb	r2, [r3, #0]
	HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 8000648:	2115      	movs	r1, #21
 800064a:	4835      	ldr	r0, [pc, #212]	; (8000720 <main+0x160>)
 800064c:	f000 ffd8 	bl	8001600 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN1_SCE_IRQn);
 8000650:	2116      	movs	r1, #22
 8000652:	4833      	ldr	r0, [pc, #204]	; (8000720 <main+0x160>)
 8000654:	f000 ffd4 	bl	8001600 <HAL_CAN_ActivateNotification>

	canStart_status = HAL_CAN_Start(&hcan1);
 8000658:	4831      	ldr	r0, [pc, #196]	; (8000720 <main+0x160>)
 800065a:	f000 fe59 	bl	8001310 <HAL_CAN_Start>
 800065e:	4603      	mov	r3, r0
 8000660:	461a      	mov	r2, r3
 8000662:	4b32      	ldr	r3, [pc, #200]	; (800072c <main+0x16c>)
 8000664:	701a      	strb	r2, [r3, #0]

	sprintf(debug_tx,
 8000666:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <main+0x164>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4619      	mov	r1, r3
 800066c:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <main+0x168>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
			"CAN config status: %d \r\n"
			"CAN notification status: %d\r\n"
			"CAN start status: %d\r\n"
			"CAN CAN error code: %d\r\n"
			,(int) configFilter_status,(int) activateNotif_status,(int) hcan1.ErrorCode,(int) canStart_status);
 8000672:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <main+0x160>)
 8000674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	sprintf(debug_tx,
 8000676:	461a      	mov	r2, r3
 8000678:	4b2c      	ldr	r3, [pc, #176]	; (800072c <main+0x16c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	4603      	mov	r3, r0
 8000682:	460a      	mov	r2, r1
 8000684:	492a      	ldr	r1, [pc, #168]	; (8000730 <main+0x170>)
 8000686:	482b      	ldr	r0, [pc, #172]	; (8000734 <main+0x174>)
 8000688:	f002 fd0e 	bl	80030a8 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 800068c:	4829      	ldr	r0, [pc, #164]	; (8000734 <main+0x174>)
 800068e:	f7ff fdbf 	bl	8000210 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29a      	uxth	r2, r3
 8000696:	2364      	movs	r3, #100	; 0x64
 8000698:	4926      	ldr	r1, [pc, #152]	; (8000734 <main+0x174>)
 800069a:	481f      	ldr	r0, [pc, #124]	; (8000718 <main+0x158>)
 800069c:	f002 f9e5 	bl	8002a6a <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tx[0] = 0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <main+0x178>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	  tx[1] = 0;
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <main+0x178>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	705a      	strb	r2, [r3, #1]
	  tx[2] = 0;
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <main+0x178>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	709a      	strb	r2, [r3, #2]
	  tx[3] = 0;
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <main+0x178>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	70da      	strb	r2, [r3, #3]
	  tx[4] = counter >> 24;
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <main+0x17c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	161b      	asrs	r3, r3, #24
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <main+0x178>)
 80006c2:	711a      	strb	r2, [r3, #4]
	  tx[5] = counter >> 16;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <main+0x17c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	141b      	asrs	r3, r3, #16
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <main+0x178>)
 80006ce:	715a      	strb	r2, [r3, #5]
	  tx[6] = counter >> 8;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <main+0x17c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	121b      	asrs	r3, r3, #8
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <main+0x178>)
 80006da:	719a      	strb	r2, [r3, #6]
	  tx[7] = counter % 256;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <main+0x17c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	425a      	negs	r2, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	bf58      	it	pl
 80006e8:	4253      	negpl	r3, r2
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <main+0x178>)
 80006ee:	71da      	strb	r2, [r3, #7]
	  int ret = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
	  ret = CAN_Send(0x01, tx);
 80006f4:	4910      	ldr	r1, [pc, #64]	; (8000738 <main+0x178>)
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 f932 	bl	8000960 <CAN_Send>
 80006fc:	6078      	str	r0, [r7, #4]


	  HAL_Delay(500);
 80006fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000702:	f000 fc07 	bl	8000f14 <HAL_Delay>

	  counter ++;
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <main+0x17c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3301      	adds	r3, #1
 800070c:	4a0b      	ldr	r2, [pc, #44]	; (800073c <main+0x17c>)
 800070e:	6013      	str	r3, [r2, #0]
  {
 8000710:	e7c6      	b.n	80006a0 <main+0xe0>
 8000712:	bf00      	nop
 8000714:	080038cc 	.word	0x080038cc
 8000718:	20000198 	.word	0x20000198
 800071c:	2000009c 	.word	0x2000009c
 8000720:	200001d8 	.word	0x200001d8
 8000724:	20000098 	.word	0x20000098
 8000728:	20000201 	.word	0x20000201
 800072c:	20000200 	.word	0x20000200
 8000730:	080038e0 	.word	0x080038e0
 8000734:	200000c4 	.word	0x200000c4
 8000738:	2000018c 	.word	0x2000018c
 800073c:	20000194 	.word	0x20000194

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2234      	movs	r2, #52	; 0x34
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fca2 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b2c      	ldr	r3, [pc, #176]	; (800081c <SystemClock_Config+0xdc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a2b      	ldr	r2, [pc, #172]	; (800081c <SystemClock_Config+0xdc>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b29      	ldr	r3, [pc, #164]	; (800081c <SystemClock_Config+0xdc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b26      	ldr	r3, [pc, #152]	; (8000820 <SystemClock_Config+0xe0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a25      	ldr	r2, [pc, #148]	; (8000820 <SystemClock_Config+0xe0>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <SystemClock_Config+0xe0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80007b4:	23b4      	movs	r3, #180	; 0xb4
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007bc:	2302      	movs	r3, #2
 80007be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fea7 	bl	800251c <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d4:	f000 f98a 	bl	8000aec <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d8:	f001 fbe8 	bl	8001fac <HAL_PWREx_EnableOverDrive>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007e2:	f000 f983 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80007ea:	2303      	movs	r3, #3
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2105      	movs	r1, #5
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fc21 	bl	800204c <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000810:	f000 f96c 	bl	8000aec <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	; 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2013      	movs	r0, #19
 800082e:	f001 f9f4 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000832:	2013      	movs	r0, #19
 8000834:	f001 fa0d 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2015      	movs	r0, #21
 800083e:	f001 f9ec 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000842:	2015      	movs	r0, #21
 8000844:	f001 fa05 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2016      	movs	r0, #22
 800084e:	f001 f9e4 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000852:	2016      	movs	r0, #22
 8000854:	f001 f9fd 	bl	8001c52 <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	2014      	movs	r0, #20
 800085e:	f001 f9dc 	bl	8001c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000862:	2014      	movs	r0, #20
 8000864:	f001 f9f5 	bl	8001c52 <HAL_NVIC_EnableIRQ>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <MX_CAN1_Init+0x64>)
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <MX_CAN1_Init+0x68>)
 8000874:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000876:	4b16      	ldr	r3, [pc, #88]	; (80008d0 <MX_CAN1_Init+0x64>)
 8000878:	2205      	movs	r2, #5
 800087a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_CAN1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_CAN1_Init+0x64>)
 800088a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800088e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_CAN1_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_CAN1_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_CAN1_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_CAN1_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_CAN1_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_CAN1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_CAN1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_CAN1_Init+0x64>)
 80008bc:	f000 fb4c 	bl	8000f58 <HAL_CAN_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80008c6:	f000 f911 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001d8 	.word	0x200001d8
 80008d4:	40006400 	.word	0x40006400

080008d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART2_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x4c>)
 8000910:	f002 f85e 	bl	80029d0 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f8e7 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000198 	.word	0x20000198
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_GPIO_Init+0x30>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <MX_GPIO_Init+0x30>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_GPIO_Init+0x30>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <CAN_Send>:

/* USER CODE BEGIN 4 */
int CAN_Send(int id, uint8_t *tx){
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]

	uint32_t mailbox;
	uint8_t flag = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.StdId = id;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	60bb      	str	r3, [r7, #8]
	TxHeader.IDE = CAN_ID_STD;
 8000974:	2300      	movs	r3, #0
 8000976:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = 8;
 800097c:	2308      	movs	r3, #8
 800097e:	61bb      	str	r3, [r7, #24]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	773b      	strb	r3, [r7, #28]

	if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0 && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAILBOX0) == 0){
 8000984:	480e      	ldr	r0, [pc, #56]	; (80009c0 <CAN_Send+0x60>)
 8000986:	f000 fde2 	bl	800154e <HAL_CAN_GetTxMailboxesFreeLevel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d011      	beq.n	80009b4 <CAN_Send+0x54>
 8000990:	2101      	movs	r1, #1
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <CAN_Send+0x60>)
 8000994:	f000 fe10 	bl	80015b8 <HAL_CAN_IsTxMessagePending>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10a      	bne.n	80009b4 <CAN_Send+0x54>
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, tx, &mailbox);
 800099e:	f107 0320 	add.w	r3, r7, #32
 80009a2:	f107 0108 	add.w	r1, r7, #8
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <CAN_Send+0x60>)
 80009aa:	f000 fcf5 	bl	8001398 <HAL_CAN_AddTxMessage>
		flag = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return flag;
 80009b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3728      	adds	r7, #40	; 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001d8 	.word	0x200001d8

080009c4 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	sprintf(debug_tx, "Messaggio inviato 0 \r\n \r\n");
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 80009d0:	4615      	mov	r5, r2
 80009d2:	461c      	mov	r4, r3
 80009d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009d6:	6028      	str	r0, [r5, #0]
 80009d8:	6069      	str	r1, [r5, #4]
 80009da:	60aa      	str	r2, [r5, #8]
 80009dc:	60eb      	str	r3, [r5, #12]
 80009de:	cc03      	ldmia	r4!, {r0, r1}
 80009e0:	6128      	str	r0, [r5, #16]
 80009e2:	6169      	str	r1, [r5, #20]
 80009e4:	8823      	ldrh	r3, [r4, #0]
 80009e6:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 80009ea:	f7ff fc11 	bl	8000210 <strlen>
 80009ee:	4603      	mov	r3, r0
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	4903      	ldr	r1, [pc, #12]	; (8000a04 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 80009f8:	f002 f837 	bl	8002a6a <HAL_UART_Transmit>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bdb0      	pop	{r4, r5, r7, pc}
 8000a04:	200000c4 	.word	0x200000c4
 8000a08:	08003944 	.word	0x08003944
 8000a0c:	20000198 	.word	0x20000198

08000a10 <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8000a10:	b5b0      	push	{r4, r5, r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	sprintf(debug_tx, "Messaggio inviato 1 \r\n \r\n");
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 8000a1c:	4615      	mov	r5, r2
 8000a1e:	461c      	mov	r4, r3
 8000a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a22:	6028      	str	r0, [r5, #0]
 8000a24:	6069      	str	r1, [r5, #4]
 8000a26:	60aa      	str	r2, [r5, #8]
 8000a28:	60eb      	str	r3, [r5, #12]
 8000a2a:	cc03      	ldmia	r4!, {r0, r1}
 8000a2c:	6128      	str	r0, [r5, #16]
 8000a2e:	6169      	str	r1, [r5, #20]
 8000a30:	8823      	ldrh	r3, [r4, #0]
 8000a32:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 8000a36:	f7ff fbeb 	bl	8000210 <strlen>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	4903      	ldr	r1, [pc, #12]	; (8000a50 <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 8000a44:	f002 f811 	bl	8002a6a <HAL_UART_Transmit>
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a50:	200000c4 	.word	0x200000c4
 8000a54:	08003960 	.word	0x08003960
 8000a58:	20000198 	.word	0x20000198

08000a5c <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	sprintf(debug_tx, "Messaggio inviato 2 \r\n \r\n");
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 8000a68:	4615      	mov	r5, r2
 8000a6a:	461c      	mov	r4, r3
 8000a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6e:	6028      	str	r0, [r5, #0]
 8000a70:	6069      	str	r1, [r5, #4]
 8000a72:	60aa      	str	r2, [r5, #8]
 8000a74:	60eb      	str	r3, [r5, #12]
 8000a76:	cc03      	ldmia	r4!, {r0, r1}
 8000a78:	6128      	str	r0, [r5, #16]
 8000a7a:	6169      	str	r1, [r5, #20]
 8000a7c:	8823      	ldrh	r3, [r4, #0]
 8000a7e:	832b      	strh	r3, [r5, #24]
	HAL_UART_Transmit(&huart2,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 8000a80:	4806      	ldr	r0, [pc, #24]	; (8000a9c <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 8000a82:	f7ff fbc5 	bl	8000210 <strlen>
 8000a86:	4603      	mov	r3, r0
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	4903      	ldr	r1, [pc, #12]	; (8000a9c <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 8000a90:	f001 ffeb 	bl	8002a6a <HAL_UART_Transmit>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a9c:	200000c4 	.word	0x200000c4
 8000aa0:	0800397c 	.word	0x0800397c
 8000aa4:	20000198 	.word	0x20000198

08000aa8 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	sprintf(debug_tx, "ERRORE \r\n \r\n");
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <HAL_CAN_ErrorCallback+0x38>)
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_CAN_ErrorCallback+0x3c>)
 8000ab4:	4614      	mov	r4, r2
 8000ab6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000ab8:	6020      	str	r0, [r4, #0]
 8000aba:	6061      	str	r1, [r4, #4]
 8000abc:	60a2      	str	r2, [r4, #8]
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	7323      	strb	r3, [r4, #12]
	HAL_UART_Transmit(&huart2,(uint8_t*)debug_tx, strlen(debug_tx), 100);
 8000ac2:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <HAL_CAN_ErrorCallback+0x38>)
 8000ac4:	f7ff fba4 	bl	8000210 <strlen>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	2364      	movs	r3, #100	; 0x64
 8000ace:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <HAL_CAN_ErrorCallback+0x38>)
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_CAN_ErrorCallback+0x40>)
 8000ad2:	f001 ffca 	bl	8002a6a <HAL_UART_Transmit>
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000c4 	.word	0x200000c4
 8000ae4:	08003998 	.word	0x08003998
 8000ae8:	20000198 	.word	0x20000198

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_CAN_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_CAN_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_CAN_MspInit+0x88>)
 8000b78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_CAN_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_CAN_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_CAN_MspInit+0x88>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_CAN_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ba6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000bb8:	2309      	movs	r3, #9
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_CAN_MspInit+0x8c>)
 8000bc4:	f001 f860 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40006400 	.word	0x40006400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12b      	bne.n	8000c56 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a10      	ldr	r2, [pc, #64]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_UART_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c36:	230c      	movs	r3, #12
 8000c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c46:	2307      	movs	r3, #7
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4805      	ldr	r0, [pc, #20]	; (8000c68 <HAL_UART_MspInit+0x8c>)
 8000c52:	f001 f819 	bl	8001c88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	; 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40004400 	.word	0x40004400
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020000 	.word	0x40020000

08000c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f908 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <CAN1_TX_IRQHandler+0x10>)
 8000cce:	f000 fcbd 	bl	800164c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001d8 	.word	0x200001d8

08000cdc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ce0:	4802      	ldr	r0, [pc, #8]	; (8000cec <CAN1_RX0_IRQHandler+0x10>)
 8000ce2:	f000 fcb3 	bl	800164c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001d8 	.word	0x200001d8

08000cf0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cf4:	4802      	ldr	r0, [pc, #8]	; (8000d00 <CAN1_RX1_IRQHandler+0x10>)
 8000cf6:	f000 fca9 	bl	800164c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001d8 	.word	0x200001d8

08000d04 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <CAN1_SCE_IRQHandler+0x10>)
 8000d0a:	f000 fc9f 	bl	800164c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001d8 	.word	0x200001d8

08000d18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <_sbrk+0x50>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x16>
		heap_end = &end;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <_sbrk+0x50>)
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <_sbrk+0x54>)
 8000d2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <_sbrk+0x50>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <_sbrk+0x50>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	466a      	mov	r2, sp
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d907      	bls.n	8000d52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d42:	f002 f97f 	bl	8003044 <__errno>
 8000d46:	4602      	mov	r2, r0
 8000d48:	230c      	movs	r3, #12
 8000d4a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d50:	e006      	b.n	8000d60 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d52:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <_sbrk+0x50>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <_sbrk+0x50>)
 8000d5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000008c 	.word	0x2000008c
 8000d6c:	20000210 	.word	0x20000210

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <SystemInit+0x60>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <SystemInit+0x60>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d84:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <SystemInit+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <SystemInit+0x64>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <SystemInit+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <SystemInit+0x64>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <SystemInit+0x64>)
 8000d9c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000da4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <SystemInit+0x64>)
 8000da8:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <SystemInit+0x68>)
 8000daa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <SystemInit+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <SystemInit+0x64>)
 8000db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000db6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <SystemInit+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <SystemInit+0x60>)
 8000dc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc4:	609a      	str	r2, [r3, #8]
#endif
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	24003010 	.word	0x24003010

08000ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000de0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000de2:	e003      	b.n	8000dec <LoopCopyDataInit>

08000de4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000de6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000de8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dea:	3104      	adds	r1, #4

08000dec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dec:	480b      	ldr	r0, [pc, #44]	; (8000e1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000df0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000df2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000df4:	d3f6      	bcc.n	8000de4 <CopyDataInit>
  ldr  r2, =_sbss
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000df8:	e002      	b.n	8000e00 <LoopFillZerobss>

08000dfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dfc:	f842 3b04 	str.w	r3, [r2], #4

08000e00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e04:	d3f9      	bcc.n	8000dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e06:	f7ff ffb3 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f002 f921 	bl	8003050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fbd7 	bl	80005c0 <main>
  bx  lr    
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e18:	08003a04 	.word	0x08003a04
  ldr  r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e20:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000e24:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000e28:	2000020c 	.word	0x2000020c

08000e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <HAL_Init+0x40>)
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_Init+0x40>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_Init+0x40>)
 8000e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e58:	2003      	movs	r0, #3
 8000e5a:	f000 fed3 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 f808 	bl	8000e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff fe4a 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <HAL_InitTick+0x54>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x58>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 feeb 	bl	8001c6e <HAL_SYSTICK_Config>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00e      	b.n	8000ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b0f      	cmp	r3, #15
 8000ea6:	d80a      	bhi.n	8000ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	f000 feb3 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <HAL_InitTick+0x5c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e000      	b.n	8000ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000000 	.word	0x20000000
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000004 	.word	0x20000004

08000ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_IncTick+0x20>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_IncTick+0x24>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000204 	.word	0x20000204

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000204 	.word	0x20000204

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_Delay+0x40>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e0ed      	b.n	8001146 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d102      	bne.n	8000f7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fde8 	bl	8000b4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f022 0202 	bic.w	r2, r2, #2
 8000f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f8c:	f7ff ffb6 	bl	8000efc <HAL_GetTick>
 8000f90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f92:	e012      	b.n	8000fba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f94:	f7ff ffb2 	bl	8000efc <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b0a      	cmp	r3, #10
 8000fa0:	d90b      	bls.n	8000fba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2205      	movs	r2, #5
 8000fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e0c5      	b.n	8001146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e5      	bne.n	8000f94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fd8:	f7ff ff90 	bl	8000efc <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fde:	e012      	b.n	8001006 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fe0:	f7ff ff8c 	bl	8000efc <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b0a      	cmp	r3, #10
 8000fec:	d90b      	bls.n	8001006 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2205      	movs	r2, #5
 8000ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e09f      	b.n	8001146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0e5      	beq.n	8000fe0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	7e1b      	ldrb	r3, [r3, #24]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d108      	bne.n	800102e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e007      	b.n	800103e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	7e5b      	ldrb	r3, [r3, #25]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d108      	bne.n	8001058 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e007      	b.n	8001068 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001066:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7e9b      	ldrb	r3, [r3, #26]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d108      	bne.n	8001082 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f042 0220 	orr.w	r2, r2, #32
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e007      	b.n	8001092 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 0220 	bic.w	r2, r2, #32
 8001090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	7edb      	ldrb	r3, [r3, #27]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d108      	bne.n	80010ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0210 	bic.w	r2, r2, #16
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e007      	b.n	80010bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f042 0210 	orr.w	r2, r2, #16
 80010ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	7f1b      	ldrb	r3, [r3, #28]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d108      	bne.n	80010d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0208 	orr.w	r2, r2, #8
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e007      	b.n	80010e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0208 	bic.w	r2, r2, #8
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	7f5b      	ldrb	r3, [r3, #29]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f042 0204 	orr.w	r2, r2, #4
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e007      	b.n	8001110 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0204 	bic.w	r2, r2, #4
 800110e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	431a      	orrs	r2, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	ea42 0103 	orr.w	r1, r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	1e5a      	subs	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001168:	7cfb      	ldrb	r3, [r7, #19]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d003      	beq.n	8001176 <HAL_CAN_ConfigFilter+0x26>
 800116e:	7cfb      	ldrb	r3, [r7, #19]
 8001170:	2b02      	cmp	r3, #2
 8001172:	f040 80be 	bne.w	80012f2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001176:	4b65      	ldr	r3, [pc, #404]	; (800130c <HAL_CAN_ConfigFilter+0x1bc>)
 8001178:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001180:	f043 0201 	orr.w	r2, r3, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001190:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	431a      	orrs	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2201      	movs	r2, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	401a      	ands	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d123      	bne.n	8001220 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011fa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	3248      	adds	r2, #72	; 0x48
 8001200:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001214:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001216:	6979      	ldr	r1, [r7, #20]
 8001218:	3348      	adds	r3, #72	; 0x48
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	440b      	add	r3, r1
 800121e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d122      	bne.n	800126e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001248:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3248      	adds	r2, #72	; 0x48
 800124e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001262:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001264:	6979      	ldr	r1, [r7, #20]
 8001266:	3348      	adds	r3, #72	; 0x48
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	401a      	ands	r2, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001288:	e007      	b.n	800129a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	431a      	orrs	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d109      	bne.n	80012b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	401a      	ands	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80012b4:	e007      	b.n	80012c6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	431a      	orrs	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d107      	bne.n	80012de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012e4:	f023 0201 	bic.w	r2, r3, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e006      	b.n	8001300 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
  }
}
 8001300:	4618      	mov	r0, r3
 8001302:	371c      	adds	r7, #28
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40006400 	.word	0x40006400

08001310 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d12e      	bne.n	8001382 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2202      	movs	r2, #2
 8001328:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0201 	bic.w	r2, r2, #1
 800133a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800133c:	f7ff fdde 	bl	8000efc <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001342:	e012      	b.n	800136a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001344:	f7ff fdda 	bl	8000efc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b0a      	cmp	r3, #10
 8001350:	d90b      	bls.n	800136a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2205      	movs	r2, #5
 8001362:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e012      	b.n	8001390 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e5      	bne.n	8001344 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e006      	b.n	8001390 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
  }
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
 80013a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d003      	beq.n	80013c4 <HAL_CAN_AddTxMessage+0x2c>
 80013bc:	7ffb      	ldrb	r3, [r7, #31]
 80013be:	2b02      	cmp	r3, #2
 80013c0:	f040 80b8 	bne.w	8001534 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10a      	bne.n	80013e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80a0 	beq.w	8001524 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	0e1b      	lsrs	r3, r3, #24
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d907      	bls.n	8001404 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e09e      	b.n	8001542 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001404:	2201      	movs	r2, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	409a      	lsls	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10d      	bne.n	8001432 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001420:	68f9      	ldr	r1, [r7, #12]
 8001422:	6809      	ldr	r1, [r1, #0]
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3318      	adds	r3, #24
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	440b      	add	r3, r1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	e00f      	b.n	8001452 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800143c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001442:	68f9      	ldr	r1, [r7, #12]
 8001444:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001446:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3318      	adds	r3, #24
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	440b      	add	r3, r1
 8001450:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	691a      	ldr	r2, [r3, #16]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3318      	adds	r3, #24
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	440b      	add	r3, r1
 8001462:	3304      	adds	r3, #4
 8001464:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	7d1b      	ldrb	r3, [r3, #20]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d111      	bne.n	8001492 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3318      	adds	r3, #24
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	4413      	add	r3, r2
 800147a:	3304      	adds	r3, #4
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	6811      	ldr	r1, [r2, #0]
 8001482:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3318      	adds	r3, #24
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	3304      	adds	r3, #4
 8001490:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3307      	adds	r3, #7
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	061a      	lsls	r2, r3, #24
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3306      	adds	r3, #6
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	041b      	lsls	r3, r3, #16
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3305      	adds	r3, #5
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	4313      	orrs	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	3204      	adds	r2, #4
 80014b2:	7812      	ldrb	r2, [r2, #0]
 80014b4:	4610      	mov	r0, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	6811      	ldr	r1, [r2, #0]
 80014ba:	ea43 0200 	orr.w	r2, r3, r0
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	440b      	add	r3, r1
 80014c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80014c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3303      	adds	r3, #3
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	061a      	lsls	r2, r3, #24
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3302      	adds	r3, #2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	4313      	orrs	r3, r2
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	4610      	mov	r0, r2
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	6811      	ldr	r1, [r2, #0]
 80014f0:	ea43 0200 	orr.w	r2, r3, r0
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	440b      	add	r3, r1
 80014fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80014fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3318      	adds	r3, #24
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	6811      	ldr	r1, [r2, #0]
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3318      	adds	r3, #24
 800151a:	011b      	lsls	r3, r3, #4
 800151c:	440b      	add	r3, r1
 800151e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e00e      	b.n	8001542 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e006      	b.n	8001542 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
  }
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800154e:	b480      	push	{r7}
 8001550:	b085      	sub	sp, #20
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001560:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001562:	7afb      	ldrb	r3, [r7, #11]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d002      	beq.n	800156e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001568:	7afb      	ldrb	r3, [r7, #11]
 800156a:	2b02      	cmp	r3, #2
 800156c:	d11d      	bne.n	80015aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3301      	adds	r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d002      	beq.n	8001596 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015cc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80015ce:	7afb      	ldrb	r3, [r7, #11]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d002      	beq.n	80015da <HAL_CAN_IsTxMessagePending+0x22>
 80015d4:	7afb      	ldrb	r3, [r7, #11]
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d10b      	bne.n	80015f2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	069b      	lsls	r3, r3, #26
 80015e4:	401a      	ands	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	069b      	lsls	r3, r3, #26
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d001      	beq.n	80015f2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80015ee:	2301      	movs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001610:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d002      	beq.n	800161e <HAL_CAN_ActivateNotification+0x1e>
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d109      	bne.n	8001632 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6959      	ldr	r1, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e006      	b.n	8001640 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001654:	2300      	movs	r3, #0
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d07c      	beq.n	800178c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d023      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff f988 	bl	80009c4 <HAL_CAN_TxMailbox0CompleteCallback>
 80016b4:	e016      	b.n	80016e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d004      	beq.n	80016ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	e00c      	b.n	80016e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d004      	beq.n	80016de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
 80016dc:	e002      	b.n	80016e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f965 	bl	80019ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d024      	beq.n	8001738 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff f984 	bl	8000a10 <HAL_CAN_TxMailbox1CompleteCallback>
 8001708:	e016      	b.n	8001738 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
 800171c:	e00c      	b.n	8001738 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
 8001730:	e002      	b.n	8001738 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f945 	bl	80019c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d024      	beq.n	800178c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800174a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff f980 	bl	8000a5c <HAL_CAN_TxMailbox2CompleteCallback>
 800175c:	e016      	b.n	800178c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d004      	beq.n	8001772 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	e00c      	b.n	800178c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d004      	beq.n	8001786 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
 8001784:	e002      	b.n	800178c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f925 	bl	80019d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00c      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2210      	movs	r2, #16
 80017ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2208      	movs	r2, #8
 80017ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f916 	bl	80019fe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d009      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8fd 	bl	80019ea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017f0:	6a3b      	ldr	r3, [r7, #32]
 80017f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00c      	beq.n	8001814 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b00      	cmp	r3, #0
 8001802:	d007      	beq.n	8001814 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800180a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2210      	movs	r2, #16
 8001812:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	d006      	beq.n	8001836 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2208      	movs	r2, #8
 800182e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f8f8 	bl	8001a26 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f8df 	bl	8001a12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001854:	6a3b      	ldr	r3, [r7, #32]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00b      	beq.n	8001876 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2210      	movs	r2, #16
 800186e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f8e2 	bl	8001a3a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001876:	6a3b      	ldr	r3, [r7, #32]
 8001878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2208      	movs	r2, #8
 8001890:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f8db 	bl	8001a4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001898:	6a3b      	ldr	r3, [r7, #32]
 800189a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d075      	beq.n	800198e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d06c      	beq.n	8001986 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001906:	2b00      	cmp	r3, #0
 8001908:	d03d      	beq.n	8001986 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001910:	2b00      	cmp	r3, #0
 8001912:	d038      	beq.n	8001986 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800191a:	2b30      	cmp	r3, #48	; 0x30
 800191c:	d017      	beq.n	800194e <HAL_CAN_IRQHandler+0x302>
 800191e:	2b30      	cmp	r3, #48	; 0x30
 8001920:	d804      	bhi.n	800192c <HAL_CAN_IRQHandler+0x2e0>
 8001922:	2b10      	cmp	r3, #16
 8001924:	d009      	beq.n	800193a <HAL_CAN_IRQHandler+0x2ee>
 8001926:	2b20      	cmp	r3, #32
 8001928:	d00c      	beq.n	8001944 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800192a:	e024      	b.n	8001976 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800192c:	2b50      	cmp	r3, #80	; 0x50
 800192e:	d018      	beq.n	8001962 <HAL_CAN_IRQHandler+0x316>
 8001930:	2b60      	cmp	r3, #96	; 0x60
 8001932:	d01b      	beq.n	800196c <HAL_CAN_IRQHandler+0x320>
 8001934:	2b40      	cmp	r3, #64	; 0x40
 8001936:	d00f      	beq.n	8001958 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001938:	e01d      	b.n	8001976 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001942:	e018      	b.n	8001976 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f043 0310 	orr.w	r3, r3, #16
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800194c:	e013      	b.n	8001976 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f043 0320 	orr.w	r3, r3, #32
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001956:	e00e      	b.n	8001976 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001960:	e009      	b.n	8001976 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800196a:	e004      	b.n	8001976 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001974:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001984:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2204      	movs	r2, #4
 800198c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff f881 	bl	8000aa8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019a6:	bf00      	nop
 80019a8:	3728      	adds	r7, #40	; 0x28
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	; (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff29 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff3e 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff31 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b082      	sub	sp, #8
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ffa2 	bl	8001bc0 <SysTick_Config>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
 8001ca2:	e165      	b.n	8001f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	f040 8154 	bne.w	8001f6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x4a>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b12      	cmp	r3, #18
 8001cd0:	d123      	bne.n	8001d1a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	08da      	lsrs	r2, r3, #3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3208      	adds	r2, #8
 8001cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	220f      	movs	r2, #15
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	69b9      	ldr	r1, [r7, #24]
 8001d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	2203      	movs	r2, #3
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0203 	and.w	r2, r3, #3
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d00b      	beq.n	8001d6e <HAL_GPIO_Init+0xe6>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d62:	2b11      	cmp	r3, #17
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80ae 	beq.w	8001f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_GPIO_Init+0x2fc>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a5b      	ldr	r2, [pc, #364]	; (8001f84 <HAL_GPIO_Init+0x2fc>)
 8001e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b59      	ldr	r3, [pc, #356]	; (8001f84 <HAL_GPIO_Init+0x2fc>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2a:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	220f      	movs	r2, #15
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4e      	ldr	r2, [pc, #312]	; (8001f8c <HAL_GPIO_Init+0x304>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d025      	beq.n	8001ea2 <HAL_GPIO_Init+0x21a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4d      	ldr	r2, [pc, #308]	; (8001f90 <HAL_GPIO_Init+0x308>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01f      	beq.n	8001e9e <HAL_GPIO_Init+0x216>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4c      	ldr	r2, [pc, #304]	; (8001f94 <HAL_GPIO_Init+0x30c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <HAL_GPIO_Init+0x212>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4b      	ldr	r2, [pc, #300]	; (8001f98 <HAL_GPIO_Init+0x310>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x20e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4a      	ldr	r2, [pc, #296]	; (8001f9c <HAL_GPIO_Init+0x314>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x20a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a49      	ldr	r2, [pc, #292]	; (8001fa0 <HAL_GPIO_Init+0x318>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x206>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a48      	ldr	r2, [pc, #288]	; (8001fa4 <HAL_GPIO_Init+0x31c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x202>
 8001e86:	2306      	movs	r3, #6
 8001e88:	e00c      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e8a:	2307      	movs	r3, #7
 8001e8c:	e00a      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e8e:	2305      	movs	r3, #5
 8001e90:	e008      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e96:	2303      	movs	r3, #3
 8001e98:	e004      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e002      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_GPIO_Init+0x21c>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	69fa      	ldr	r2, [r7, #28]
 8001ea6:	f002 0203 	and.w	r2, r2, #3
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	4093      	lsls	r3, r2
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb4:	4934      	ldr	r1, [pc, #208]	; (8001f88 <HAL_GPIO_Init+0x300>)
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	3302      	adds	r3, #2
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee6:	4a30      	ldr	r2, [pc, #192]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eec:	4b2e      	ldr	r3, [pc, #184]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f10:	4a25      	ldr	r2, [pc, #148]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f3a:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f64:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_GPIO_Init+0x320>)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	61fb      	str	r3, [r7, #28]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	f67f ae96 	bls.w	8001ca4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f78:	bf00      	nop
 8001f7a:	3724      	adds	r7, #36	; 0x24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40013800 	.word	0x40013800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40020800 	.word	0x40020800
 8001f98:	40020c00 	.word	0x40020c00
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40021400 	.word	0x40021400
 8001fa4:	40021800 	.word	0x40021800
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <HAL_PWREx_EnableOverDrive+0x90>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_PWREx_EnableOverDrive+0x90>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_PWREx_EnableOverDrive+0x90>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_PWREx_EnableOverDrive+0x94>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fd8:	f7fe ff90 	bl	8000efc <HAL_GetTick>
 8001fdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fde:	e009      	b.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fe0:	f7fe ff8c 	bl	8000efc <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fee:	d901      	bls.n	8001ff4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e01f      	b.n	8002034 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002000:	d1ee      	bne.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002008:	f7fe ff78 	bl	8000efc <HAL_GetTick>
 800200c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800200e:	e009      	b.n	8002024 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002010:	f7fe ff74 	bl	8000efc <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201e:	d901      	bls.n	8002024 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e007      	b.n	8002034 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <HAL_PWREx_EnableOverDrive+0x98>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002030:	d1ee      	bne.n	8002010 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	420e0040 	.word	0x420e0040
 8002044:	40007000 	.word	0x40007000
 8002048:	420e0044 	.word	0x420e0044

0800204c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0ca      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1b4>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d90c      	bls.n	8002088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b64      	ldr	r3, [pc, #400]	; (8002200 <HAL_RCC_ClockConfig+0x1b4>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b62      	ldr	r3, [pc, #392]	; (8002200 <HAL_RCC_ClockConfig+0x1b4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b6      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b58      	ldr	r3, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a57      	ldr	r2, [pc, #348]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80020a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b52      	ldr	r3, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a51      	ldr	r2, [pc, #324]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80020be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494c      	ldr	r1, [pc, #304]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d044      	beq.n	800216c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d119      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07d      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06d      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e065      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b36      	ldr	r3, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4933      	ldr	r1, [pc, #204]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800213c:	f7fe fede 	bl	8000efc <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe feda 	bl	8000efc <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e04d      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1b4>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d20c      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b21      	ldr	r3, [pc, #132]	; (8002200 <HAL_RCC_ClockConfig+0x1b4>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <HAL_RCC_ClockConfig+0x1b4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e030      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4915      	ldr	r1, [pc, #84]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490d      	ldr	r1, [pc, #52]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f851 	bl	8002278 <HAL_RCC_GetSysClockFreq>
 80021d6:	4601      	mov	r1, r0
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ea:	4a08      	ldr	r2, [pc, #32]	; (800220c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7fe fe40 	bl	8000e74 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	080039a8 	.word	0x080039a8
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_RCC_GetHCLKFreq+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000000 	.word	0x20000000

08002228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800222c:	f7ff fff0 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 8002230:	4601      	mov	r1, r0
 8002232:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0a9b      	lsrs	r3, r3, #10
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4a03      	ldr	r2, [pc, #12]	; (800224c <HAL_RCC_GetPCLK1Freq+0x24>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40023800 	.word	0x40023800
 800224c:	080039b8 	.word	0x080039b8

08002250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002254:	f7ff ffdc 	bl	8002210 <HAL_RCC_GetHCLKFreq>
 8002258:	4601      	mov	r1, r0
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	0b5b      	lsrs	r3, r3, #13
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002266:	5cd3      	ldrb	r3, [r2, r3]
 8002268:	fa21 f303 	lsr.w	r3, r1, r3
}
 800226c:	4618      	mov	r0, r3
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	080039b8 	.word	0x080039b8

08002278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002292:	4b9f      	ldr	r3, [pc, #636]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b0c      	cmp	r3, #12
 800229c:	f200 8130 	bhi.w	8002500 <HAL_RCC_GetSysClockFreq+0x288>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022dd 	.word	0x080022dd
 80022ac:	08002501 	.word	0x08002501
 80022b0:	08002501 	.word	0x08002501
 80022b4:	08002501 	.word	0x08002501
 80022b8:	080022e3 	.word	0x080022e3
 80022bc:	08002501 	.word	0x08002501
 80022c0:	08002501 	.word	0x08002501
 80022c4:	08002501 	.word	0x08002501
 80022c8:	080022e9 	.word	0x080022e9
 80022cc:	08002501 	.word	0x08002501
 80022d0:	08002501 	.word	0x08002501
 80022d4:	08002501 	.word	0x08002501
 80022d8:	080023f7 	.word	0x080023f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022dc:	4b8d      	ldr	r3, [pc, #564]	; (8002514 <HAL_RCC_GetSysClockFreq+0x29c>)
 80022de:	613b      	str	r3, [r7, #16]
       break;
 80022e0:	e111      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e2:	4b8d      	ldr	r3, [pc, #564]	; (8002518 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80022e4:	613b      	str	r3, [r7, #16]
      break;
 80022e6:	e10e      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e8:	4b89      	ldr	r3, [pc, #548]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f2:	4b87      	ldr	r3, [pc, #540]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d023      	beq.n	8002346 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fe:	4b84      	ldr	r3, [pc, #528]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	f04f 0400 	mov.w	r4, #0
 8002308:	f240 11ff 	movw	r1, #511	; 0x1ff
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	ea03 0501 	and.w	r5, r3, r1
 8002314:	ea04 0602 	and.w	r6, r4, r2
 8002318:	4a7f      	ldr	r2, [pc, #508]	; (8002518 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800231a:	fb02 f106 	mul.w	r1, r2, r6
 800231e:	2200      	movs	r2, #0
 8002320:	fb02 f205 	mul.w	r2, r2, r5
 8002324:	440a      	add	r2, r1
 8002326:	497c      	ldr	r1, [pc, #496]	; (8002518 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002328:	fba5 0101 	umull	r0, r1, r5, r1
 800232c:	1853      	adds	r3, r2, r1
 800232e:	4619      	mov	r1, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	461a      	mov	r2, r3
 8002338:	4623      	mov	r3, r4
 800233a:	f7fd ffc1 	bl	80002c0 <__aeabi_uldivmod>
 800233e:	4603      	mov	r3, r0
 8002340:	460c      	mov	r4, r1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e049      	b.n	80023da <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002346:	4b72      	ldr	r3, [pc, #456]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	f04f 0400 	mov.w	r4, #0
 8002350:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	ea03 0501 	and.w	r5, r3, r1
 800235c:	ea04 0602 	and.w	r6, r4, r2
 8002360:	4629      	mov	r1, r5
 8002362:	4632      	mov	r2, r6
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	f04f 0400 	mov.w	r4, #0
 800236c:	0154      	lsls	r4, r2, #5
 800236e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002372:	014b      	lsls	r3, r1, #5
 8002374:	4619      	mov	r1, r3
 8002376:	4622      	mov	r2, r4
 8002378:	1b49      	subs	r1, r1, r5
 800237a:	eb62 0206 	sbc.w	r2, r2, r6
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	f04f 0400 	mov.w	r4, #0
 8002386:	0194      	lsls	r4, r2, #6
 8002388:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800238c:	018b      	lsls	r3, r1, #6
 800238e:	1a5b      	subs	r3, r3, r1
 8002390:	eb64 0402 	sbc.w	r4, r4, r2
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	00e2      	lsls	r2, r4, #3
 800239e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023a2:	00d9      	lsls	r1, r3, #3
 80023a4:	460b      	mov	r3, r1
 80023a6:	4614      	mov	r4, r2
 80023a8:	195b      	adds	r3, r3, r5
 80023aa:	eb44 0406 	adc.w	r4, r4, r6
 80023ae:	f04f 0100 	mov.w	r1, #0
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	02a2      	lsls	r2, r4, #10
 80023b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023bc:	0299      	lsls	r1, r3, #10
 80023be:	460b      	mov	r3, r1
 80023c0:	4614      	mov	r4, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	4621      	mov	r1, r4
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f04f 0400 	mov.w	r4, #0
 80023cc:	461a      	mov	r2, r3
 80023ce:	4623      	mov	r3, r4
 80023d0:	f7fd ff76 	bl	80002c0 <__aeabi_uldivmod>
 80023d4:	4603      	mov	r3, r0
 80023d6:	460c      	mov	r4, r1
 80023d8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023da:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	0c1b      	lsrs	r3, r3, #16
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	3301      	adds	r3, #1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	613b      	str	r3, [r7, #16]
      break;
 80023f4:	e087      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fe:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002400:	4b43      	ldr	r3, [pc, #268]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d023      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240c:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	f04f 0400 	mov.w	r4, #0
 8002416:	f240 11ff 	movw	r1, #511	; 0x1ff
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	ea03 0501 	and.w	r5, r3, r1
 8002422:	ea04 0602 	and.w	r6, r4, r2
 8002426:	4a3c      	ldr	r2, [pc, #240]	; (8002518 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002428:	fb02 f106 	mul.w	r1, r2, r6
 800242c:	2200      	movs	r2, #0
 800242e:	fb02 f205 	mul.w	r2, r2, r5
 8002432:	440a      	add	r2, r1
 8002434:	4938      	ldr	r1, [pc, #224]	; (8002518 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8002436:	fba5 0101 	umull	r0, r1, r5, r1
 800243a:	1853      	adds	r3, r2, r1
 800243c:	4619      	mov	r1, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f04f 0400 	mov.w	r4, #0
 8002444:	461a      	mov	r2, r3
 8002446:	4623      	mov	r3, r4
 8002448:	f7fd ff3a 	bl	80002c0 <__aeabi_uldivmod>
 800244c:	4603      	mov	r3, r0
 800244e:	460c      	mov	r4, r1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e049      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	f04f 0400 	mov.w	r4, #0
 800245e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	ea03 0501 	and.w	r5, r3, r1
 800246a:	ea04 0602 	and.w	r6, r4, r2
 800246e:	4629      	mov	r1, r5
 8002470:	4632      	mov	r2, r6
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	f04f 0400 	mov.w	r4, #0
 800247a:	0154      	lsls	r4, r2, #5
 800247c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002480:	014b      	lsls	r3, r1, #5
 8002482:	4619      	mov	r1, r3
 8002484:	4622      	mov	r2, r4
 8002486:	1b49      	subs	r1, r1, r5
 8002488:	eb62 0206 	sbc.w	r2, r2, r6
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f04f 0400 	mov.w	r4, #0
 8002494:	0194      	lsls	r4, r2, #6
 8002496:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800249a:	018b      	lsls	r3, r1, #6
 800249c:	1a5b      	subs	r3, r3, r1
 800249e:	eb64 0402 	sbc.w	r4, r4, r2
 80024a2:	f04f 0100 	mov.w	r1, #0
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	00e2      	lsls	r2, r4, #3
 80024ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024b0:	00d9      	lsls	r1, r3, #3
 80024b2:	460b      	mov	r3, r1
 80024b4:	4614      	mov	r4, r2
 80024b6:	195b      	adds	r3, r3, r5
 80024b8:	eb44 0406 	adc.w	r4, r4, r6
 80024bc:	f04f 0100 	mov.w	r1, #0
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	02a2      	lsls	r2, r4, #10
 80024c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024ca:	0299      	lsls	r1, r3, #10
 80024cc:	460b      	mov	r3, r1
 80024ce:	4614      	mov	r4, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	4621      	mov	r1, r4
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f04f 0400 	mov.w	r4, #0
 80024da:	461a      	mov	r2, r3
 80024dc:	4623      	mov	r3, r4
 80024de:	f7fd feef 	bl	80002c0 <__aeabi_uldivmod>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_RCC_GetSysClockFreq+0x298>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	0f1b      	lsrs	r3, r3, #28
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	613b      	str	r3, [r7, #16]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <HAL_RCC_GetSysClockFreq+0x29c>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002506:	693b      	ldr	r3, [r7, #16]
}
 8002508:	4618      	mov	r0, r3
 800250a:	371c      	adds	r7, #28
 800250c:	46bd      	mov	sp, r7
 800250e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	00f42400 	.word	0x00f42400
 8002518:	017d7840 	.word	0x017d7840

0800251c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8083 	beq.w	800263c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002536:	4b95      	ldr	r3, [pc, #596]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d019      	beq.n	8002576 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002542:	4b92      	ldr	r3, [pc, #584]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800254a:	2b08      	cmp	r3, #8
 800254c:	d106      	bne.n	800255c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800254e:	4b8f      	ldr	r3, [pc, #572]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255a:	d00c      	beq.n	8002576 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800255c:	4b8b      	ldr	r3, [pc, #556]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d112      	bne.n	800258e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002568:	4b88      	ldr	r3, [pc, #544]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002574:	d10b      	bne.n	800258e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	4b85      	ldr	r3, [pc, #532]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d05b      	beq.n	800263a <HAL_RCC_OscConfig+0x11e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d157      	bne.n	800263a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e216      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x8a>
 8002598:	4b7c      	ldr	r3, [pc, #496]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a7b      	ldr	r2, [pc, #492]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e01d      	b.n	80025e2 <HAL_RCC_OscConfig+0xc6>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ae:	d10c      	bne.n	80025ca <HAL_RCC_OscConfig+0xae>
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b73      	ldr	r3, [pc, #460]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a72      	ldr	r2, [pc, #456]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	e00b      	b.n	80025e2 <HAL_RCC_OscConfig+0xc6>
 80025ca:	4b70      	ldr	r3, [pc, #448]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6f      	ldr	r2, [pc, #444]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b6d      	ldr	r3, [pc, #436]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a6c      	ldr	r2, [pc, #432]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80025dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d013      	beq.n	8002612 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7fe fc87 	bl	8000efc <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f2:	f7fe fc83 	bl	8000efc <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b64      	cmp	r3, #100	; 0x64
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1db      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002604:	4b61      	ldr	r3, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0xd6>
 8002610:	e014      	b.n	800263c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fc73 	bl	8000efc <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800261a:	f7fe fc6f 	bl	8000efc <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b64      	cmp	r3, #100	; 0x64
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e1c7      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262c:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0xfe>
 8002638:	e000      	b.n	800263c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d06f      	beq.n	8002728 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b00      	cmp	r3, #0
 8002652:	d017      	beq.n	8002684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002654:	4b4d      	ldr	r3, [pc, #308]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800265c:	2b08      	cmp	r3, #8
 800265e:	d105      	bne.n	800266c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002660:	4b4a      	ldr	r3, [pc, #296]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00b      	beq.n	8002684 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800266c:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d11c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002678:	4b44      	ldr	r3, [pc, #272]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d116      	bne.n	80026b2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002684:	4b41      	ldr	r3, [pc, #260]	; (800278c <HAL_RCC_OscConfig+0x270>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_RCC_OscConfig+0x180>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e18f      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4938      	ldr	r1, [pc, #224]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b0:	e03a      	b.n	8002728 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d020      	beq.n	80026fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <HAL_RCC_OscConfig+0x274>)
 80026bc:	2201      	movs	r2, #1
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fc1c 	bl	8000efc <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c8:	f7fe fc18 	bl	8000efc <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e170      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b2c      	ldr	r3, [pc, #176]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	4925      	ldr	r1, [pc, #148]	; (800278c <HAL_RCC_OscConfig+0x270>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]
 80026fa:	e015      	b.n	8002728 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fc:	4b24      	ldr	r3, [pc, #144]	; (8002790 <HAL_RCC_OscConfig+0x274>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe fbfb 	bl	8000efc <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe fbf7 	bl	8000efc <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e14f      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271c:	4b1b      	ldr	r3, [pc, #108]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d037      	beq.n	80027a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d016      	beq.n	800276a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273c:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_RCC_OscConfig+0x278>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002742:	f7fe fbdb 	bl	8000efc <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274a:	f7fe fbd7 	bl	8000efc <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e12f      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_OscConfig+0x270>)
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x22e>
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_RCC_OscConfig+0x278>)
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe fbc4 	bl	8000efc <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002776:	e00f      	b.n	8002798 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe fbc0 	bl	8000efc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d908      	bls.n	8002798 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e118      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
 800278a:	bf00      	nop
 800278c:	40023800 	.word	0x40023800
 8002790:	42470000 	.word	0x42470000
 8002794:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002798:	4b8a      	ldr	r3, [pc, #552]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e9      	bne.n	8002778 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8097 	beq.w	80028e0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b83      	ldr	r3, [pc, #524]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10f      	bne.n	80027e2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b7f      	ldr	r3, [pc, #508]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	4a7e      	ldr	r2, [pc, #504]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80027cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
 80027d2:	4b7c      	ldr	r3, [pc, #496]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b79      	ldr	r3, [pc, #484]	; (80029c8 <HAL_RCC_OscConfig+0x4ac>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d118      	bne.n	8002820 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ee:	4b76      	ldr	r3, [pc, #472]	; (80029c8 <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a75      	ldr	r2, [pc, #468]	; (80029c8 <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fb7f 	bl	8000efc <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002802:	f7fe fb7b 	bl	8000efc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0d3      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002814:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <HAL_RCC_OscConfig+0x4ac>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d106      	bne.n	8002836 <HAL_RCC_OscConfig+0x31a>
 8002828:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a65      	ldr	r2, [pc, #404]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x354>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x33c>
 800283e:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a60      	ldr	r2, [pc, #384]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
 800284a:	4b5e      	ldr	r3, [pc, #376]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a5d      	ldr	r2, [pc, #372]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x354>
 8002858:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	4a59      	ldr	r2, [pc, #356]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	; 0x70
 8002864:	4b57      	ldr	r3, [pc, #348]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a56      	ldr	r2, [pc, #344]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe fb40 	bl	8000efc <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fb3c 	bl	8000efc <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e092      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002896:	4b4b      	ldr	r3, [pc, #300]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x364>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe fb2a 	bl	8000efc <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fb26 	bl	8000efc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e07c      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c2:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b3b      	ldr	r3, [pc, #236]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	4a3a      	ldr	r2, [pc, #232]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d068      	beq.n	80029ba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028e8:	4b36      	ldr	r3, [pc, #216]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 030c 	and.w	r3, r3, #12
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d060      	beq.n	80029b6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d145      	bne.n	8002988 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028fc:	4b33      	ldr	r3, [pc, #204]	; (80029cc <HAL_RCC_OscConfig+0x4b0>)
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fafb 	bl	8000efc <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290a:	f7fe faf7 	bl	8000efc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e04f      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1f0      	bne.n	800290a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	019b      	lsls	r3, r3, #6
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293e:	085b      	lsrs	r3, r3, #1
 8002940:	3b01      	subs	r3, #1
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	061b      	lsls	r3, r3, #24
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	071b      	lsls	r3, r3, #28
 8002954:	491b      	ldr	r1, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295a:	4b1c      	ldr	r3, [pc, #112]	; (80029cc <HAL_RCC_OscConfig+0x4b0>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe facc 	bl	8000efc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fac8 	bl	8000efc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e020      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x44c>
 8002986:	e018      	b.n	80029ba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_OscConfig+0x4b0>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fab5 	bl	8000efc <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fab1 	bl	8000efc <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e009      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x4a8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x47a>
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000
 80029cc:	42470060 	.word	0x42470060

080029d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03f      	b.n	8002a62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe f8f0 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f90b 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	695a      	ldr	r2, [r3, #20]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af02      	add	r7, sp, #8
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	f040 8083 	bne.w	8002b92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_UART_Transmit+0x2e>
 8002a92:	88fb      	ldrh	r3, [r7, #6]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e07b      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Transmit+0x40>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e074      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fa1c 	bl	8000efc <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	88fa      	ldrh	r2, [r7, #6]
 8002aca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	88fa      	ldrh	r2, [r7, #6]
 8002ad0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ad2:	e042      	b.n	8002b5a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d122      	bne.n	8002b32 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2200      	movs	r2, #0
 8002af4:	2180      	movs	r1, #128	; 0x80
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f850 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e046      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3302      	adds	r3, #2
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	e017      	b.n	8002b5a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	e013      	b.n	8002b5a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2180      	movs	r1, #128	; 0x80
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f82d 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e023      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	60ba      	str	r2, [r7, #8]
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1b7      	bne.n	8002ad4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2140      	movs	r1, #64	; 0x40
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f814 	bl	8002b9c <UART_WaitOnFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e00a      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bac:	e02c      	b.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb4:	d028      	beq.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bbc:	f7fe f99e 	bl	8000efc <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d21d      	bcs.n	8002c08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0201 	bic.w	r2, r2, #1
 8002bea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e00f      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	4013      	ands	r3, r2
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d0c3      	beq.n	8002bae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002c70:	f023 030c 	bic.w	r3, r3, #12
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	6812      	ldr	r2, [r2, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9c:	f040 80e4 	bne.w	8002e68 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4aab      	ldr	r2, [pc, #684]	; (8002f54 <UART_SetConfig+0x324>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <UART_SetConfig+0x84>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4aaa      	ldr	r2, [pc, #680]	; (8002f58 <UART_SetConfig+0x328>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d16c      	bne.n	8002d8e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002cb4:	f7ff facc 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009a      	lsls	r2, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cce:	4aa3      	ldr	r2, [pc, #652]	; (8002f5c <UART_SetConfig+0x32c>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	095b      	lsrs	r3, r3, #5
 8002cd6:	011c      	lsls	r4, r3, #4
 8002cd8:	f7ff faba 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009a      	lsls	r2, r3, #2
 8002ce6:	441a      	add	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fbb2 f5f3 	udiv	r5, r2, r3
 8002cf2:	f7ff faad 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009a      	lsls	r2, r3, #2
 8002d00:	441a      	add	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	4a93      	ldr	r2, [pc, #588]	; (8002f5c <UART_SetConfig+0x32c>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	2264      	movs	r2, #100	; 0x64
 8002d16:	fb02 f303 	mul.w	r3, r2, r3
 8002d1a:	1aeb      	subs	r3, r5, r3
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	3332      	adds	r3, #50	; 0x32
 8002d20:	4a8e      	ldr	r2, [pc, #568]	; (8002f5c <UART_SetConfig+0x32c>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d2e:	441c      	add	r4, r3
 8002d30:	f7ff fa8e 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009a      	lsls	r2, r3, #2
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d4a:	f7ff fa81 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	009a      	lsls	r2, r3, #2
 8002d58:	441a      	add	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d64:	4a7d      	ldr	r2, [pc, #500]	; (8002f5c <UART_SetConfig+0x32c>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	095b      	lsrs	r3, r3, #5
 8002d6c:	2264      	movs	r2, #100	; 0x64
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	1aeb      	subs	r3, r5, r3
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	3332      	adds	r3, #50	; 0x32
 8002d78:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <UART_SetConfig+0x32c>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	f003 0207 	and.w	r2, r3, #7
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4422      	add	r2, r4
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	e154      	b.n	8003038 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002d8e:	f7ff fa4b 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da8:	4a6c      	ldr	r2, [pc, #432]	; (8002f5c <UART_SetConfig+0x32c>)
 8002daa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	011c      	lsls	r4, r3, #4
 8002db2:	f7ff fa39 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009a      	lsls	r2, r3, #2
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fbb2 f5f3 	udiv	r5, r2, r3
 8002dcc:	f7ff fa2c 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009a      	lsls	r2, r3, #2
 8002dda:	441a      	add	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4a5d      	ldr	r2, [pc, #372]	; (8002f5c <UART_SetConfig+0x32c>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	2264      	movs	r2, #100	; 0x64
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	1aeb      	subs	r3, r5, r3
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	3332      	adds	r3, #50	; 0x32
 8002dfa:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <UART_SetConfig+0x32c>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e08:	441c      	add	r4, r3
 8002e0a:	f7ff fa0d 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009a      	lsls	r2, r3, #2
 8002e18:	441a      	add	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	fbb2 f5f3 	udiv	r5, r2, r3
 8002e24:	f7ff fa00 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	009a      	lsls	r2, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	4a47      	ldr	r2, [pc, #284]	; (8002f5c <UART_SetConfig+0x32c>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	2264      	movs	r2, #100	; 0x64
 8002e48:	fb02 f303 	mul.w	r3, r2, r3
 8002e4c:	1aeb      	subs	r3, r5, r3
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3332      	adds	r3, #50	; 0x32
 8002e52:	4a42      	ldr	r2, [pc, #264]	; (8002f5c <UART_SetConfig+0x32c>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	f003 0207 	and.w	r2, r3, #7
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4422      	add	r2, r4
 8002e64:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002e66:	e0e7      	b.n	8003038 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a39      	ldr	r2, [pc, #228]	; (8002f54 <UART_SetConfig+0x324>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <UART_SetConfig+0x24c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a38      	ldr	r2, [pc, #224]	; (8002f58 <UART_SetConfig+0x328>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d171      	bne.n	8002f60 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002e7c:	f7ff f9e8 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009a      	lsls	r2, r3, #2
 8002e8a:	441a      	add	r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <UART_SetConfig+0x32c>)
 8002e98:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	011c      	lsls	r4, r3, #4
 8002ea0:	f7ff f9d6 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	441a      	add	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8002eba:	f7ff f9c9 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009a      	lsls	r2, r3, #2
 8002ec8:	441a      	add	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed4:	4a21      	ldr	r2, [pc, #132]	; (8002f5c <UART_SetConfig+0x32c>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2264      	movs	r2, #100	; 0x64
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	1aeb      	subs	r3, r5, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <UART_SetConfig+0x32c>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef4:	441c      	add	r4, r3
 8002ef6:	f7ff f9ab 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002efa:	4602      	mov	r2, r0
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	009a      	lsls	r2, r3, #2
 8002f04:	441a      	add	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f10:	f7ff f99e 	bl	8002250 <HAL_RCC_GetPCLK2Freq>
 8002f14:	4602      	mov	r2, r0
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009a      	lsls	r2, r3, #2
 8002f1e:	441a      	add	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <UART_SetConfig+0x32c>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	2264      	movs	r2, #100	; 0x64
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	1aeb      	subs	r3, r5, r3
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	3332      	adds	r3, #50	; 0x32
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <UART_SetConfig+0x32c>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4422      	add	r2, r4
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	e071      	b.n	8003038 <UART_SetConfig+0x408>
 8002f54:	40011000 	.word	0x40011000
 8002f58:	40011400 	.word	0x40011400
 8002f5c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002f60:	f7ff f962 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009a      	lsls	r2, r3, #2
 8002f6e:	441a      	add	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	4a31      	ldr	r2, [pc, #196]	; (8003040 <UART_SetConfig+0x410>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	095b      	lsrs	r3, r3, #5
 8002f82:	011c      	lsls	r4, r3, #4
 8002f84:	f7ff f950 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009a      	lsls	r2, r3, #2
 8002f92:	441a      	add	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002f9e:	f7ff f943 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	4a21      	ldr	r2, [pc, #132]	; (8003040 <UART_SetConfig+0x410>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2264      	movs	r2, #100	; 0x64
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	1aeb      	subs	r3, r5, r3
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	3332      	adds	r3, #50	; 0x32
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <UART_SetConfig+0x410>)
 8002fce:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fd8:	441c      	add	r4, r3
 8002fda:	f7ff f925 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fbb2 f5f3 	udiv	r5, r2, r3
 8002ff4:	f7ff f918 	bl	8002228 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009a      	lsls	r2, r3, #2
 8003002:	441a      	add	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <UART_SetConfig+0x410>)
 8003010:	fba2 2303 	umull	r2, r3, r2, r3
 8003014:	095b      	lsrs	r3, r3, #5
 8003016:	2264      	movs	r2, #100	; 0x64
 8003018:	fb02 f303 	mul.w	r3, r2, r3
 800301c:	1aeb      	subs	r3, r5, r3
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	3332      	adds	r3, #50	; 0x32
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <UART_SetConfig+0x410>)
 8003024:	fba2 2303 	umull	r2, r3, r2, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4422      	add	r2, r4
 8003034:	609a      	str	r2, [r3, #8]
}
 8003036:	e7ff      	b.n	8003038 <UART_SetConfig+0x408>
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bdb0      	pop	{r4, r5, r7, pc}
 8003040:	51eb851f 	.word	0x51eb851f

08003044 <__errno>:
 8003044:	4b01      	ldr	r3, [pc, #4]	; (800304c <__errno+0x8>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	2000000c 	.word	0x2000000c

08003050 <__libc_init_array>:
 8003050:	b570      	push	{r4, r5, r6, lr}
 8003052:	4e0d      	ldr	r6, [pc, #52]	; (8003088 <__libc_init_array+0x38>)
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <__libc_init_array+0x3c>)
 8003056:	1ba4      	subs	r4, r4, r6
 8003058:	10a4      	asrs	r4, r4, #2
 800305a:	2500      	movs	r5, #0
 800305c:	42a5      	cmp	r5, r4
 800305e:	d109      	bne.n	8003074 <__libc_init_array+0x24>
 8003060:	4e0b      	ldr	r6, [pc, #44]	; (8003090 <__libc_init_array+0x40>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <__libc_init_array+0x44>)
 8003064:	f000 fc26 	bl	80038b4 <_init>
 8003068:	1ba4      	subs	r4, r4, r6
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	2500      	movs	r5, #0
 800306e:	42a5      	cmp	r5, r4
 8003070:	d105      	bne.n	800307e <__libc_init_array+0x2e>
 8003072:	bd70      	pop	{r4, r5, r6, pc}
 8003074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003078:	4798      	blx	r3
 800307a:	3501      	adds	r5, #1
 800307c:	e7ee      	b.n	800305c <__libc_init_array+0xc>
 800307e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003082:	4798      	blx	r3
 8003084:	3501      	adds	r5, #1
 8003086:	e7f2      	b.n	800306e <__libc_init_array+0x1e>
 8003088:	080039fc 	.word	0x080039fc
 800308c:	080039fc 	.word	0x080039fc
 8003090:	080039fc 	.word	0x080039fc
 8003094:	08003a00 	.word	0x08003a00

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <siprintf>:
 80030a8:	b40e      	push	{r1, r2, r3}
 80030aa:	b500      	push	{lr}
 80030ac:	b09c      	sub	sp, #112	; 0x70
 80030ae:	ab1d      	add	r3, sp, #116	; 0x74
 80030b0:	9002      	str	r0, [sp, #8]
 80030b2:	9006      	str	r0, [sp, #24]
 80030b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030b8:	4809      	ldr	r0, [pc, #36]	; (80030e0 <siprintf+0x38>)
 80030ba:	9107      	str	r1, [sp, #28]
 80030bc:	9104      	str	r1, [sp, #16]
 80030be:	4909      	ldr	r1, [pc, #36]	; (80030e4 <siprintf+0x3c>)
 80030c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80030c4:	9105      	str	r1, [sp, #20]
 80030c6:	6800      	ldr	r0, [r0, #0]
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	a902      	add	r1, sp, #8
 80030cc:	f000 f866 	bl	800319c <_svfiprintf_r>
 80030d0:	9b02      	ldr	r3, [sp, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	b01c      	add	sp, #112	; 0x70
 80030d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80030dc:	b003      	add	sp, #12
 80030de:	4770      	bx	lr
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	ffff0208 	.word	0xffff0208

080030e8 <__ssputs_r>:
 80030e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030ec:	688e      	ldr	r6, [r1, #8]
 80030ee:	429e      	cmp	r6, r3
 80030f0:	4682      	mov	sl, r0
 80030f2:	460c      	mov	r4, r1
 80030f4:	4690      	mov	r8, r2
 80030f6:	4699      	mov	r9, r3
 80030f8:	d837      	bhi.n	800316a <__ssputs_r+0x82>
 80030fa:	898a      	ldrh	r2, [r1, #12]
 80030fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003100:	d031      	beq.n	8003166 <__ssputs_r+0x7e>
 8003102:	6825      	ldr	r5, [r4, #0]
 8003104:	6909      	ldr	r1, [r1, #16]
 8003106:	1a6f      	subs	r7, r5, r1
 8003108:	6965      	ldr	r5, [r4, #20]
 800310a:	2302      	movs	r3, #2
 800310c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003110:	fb95 f5f3 	sdiv	r5, r5, r3
 8003114:	f109 0301 	add.w	r3, r9, #1
 8003118:	443b      	add	r3, r7
 800311a:	429d      	cmp	r5, r3
 800311c:	bf38      	it	cc
 800311e:	461d      	movcc	r5, r3
 8003120:	0553      	lsls	r3, r2, #21
 8003122:	d530      	bpl.n	8003186 <__ssputs_r+0x9e>
 8003124:	4629      	mov	r1, r5
 8003126:	f000 fb2b 	bl	8003780 <_malloc_r>
 800312a:	4606      	mov	r6, r0
 800312c:	b950      	cbnz	r0, 8003144 <__ssputs_r+0x5c>
 800312e:	230c      	movs	r3, #12
 8003130:	f8ca 3000 	str.w	r3, [sl]
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313a:	81a3      	strh	r3, [r4, #12]
 800313c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003144:	463a      	mov	r2, r7
 8003146:	6921      	ldr	r1, [r4, #16]
 8003148:	f000 faa8 	bl	800369c <memcpy>
 800314c:	89a3      	ldrh	r3, [r4, #12]
 800314e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003156:	81a3      	strh	r3, [r4, #12]
 8003158:	6126      	str	r6, [r4, #16]
 800315a:	6165      	str	r5, [r4, #20]
 800315c:	443e      	add	r6, r7
 800315e:	1bed      	subs	r5, r5, r7
 8003160:	6026      	str	r6, [r4, #0]
 8003162:	60a5      	str	r5, [r4, #8]
 8003164:	464e      	mov	r6, r9
 8003166:	454e      	cmp	r6, r9
 8003168:	d900      	bls.n	800316c <__ssputs_r+0x84>
 800316a:	464e      	mov	r6, r9
 800316c:	4632      	mov	r2, r6
 800316e:	4641      	mov	r1, r8
 8003170:	6820      	ldr	r0, [r4, #0]
 8003172:	f000 fa9e 	bl	80036b2 <memmove>
 8003176:	68a3      	ldr	r3, [r4, #8]
 8003178:	1b9b      	subs	r3, r3, r6
 800317a:	60a3      	str	r3, [r4, #8]
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	441e      	add	r6, r3
 8003180:	6026      	str	r6, [r4, #0]
 8003182:	2000      	movs	r0, #0
 8003184:	e7dc      	b.n	8003140 <__ssputs_r+0x58>
 8003186:	462a      	mov	r2, r5
 8003188:	f000 fb54 	bl	8003834 <_realloc_r>
 800318c:	4606      	mov	r6, r0
 800318e:	2800      	cmp	r0, #0
 8003190:	d1e2      	bne.n	8003158 <__ssputs_r+0x70>
 8003192:	6921      	ldr	r1, [r4, #16]
 8003194:	4650      	mov	r0, sl
 8003196:	f000 faa5 	bl	80036e4 <_free_r>
 800319a:	e7c8      	b.n	800312e <__ssputs_r+0x46>

0800319c <_svfiprintf_r>:
 800319c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a0:	461d      	mov	r5, r3
 80031a2:	898b      	ldrh	r3, [r1, #12]
 80031a4:	061f      	lsls	r7, r3, #24
 80031a6:	b09d      	sub	sp, #116	; 0x74
 80031a8:	4680      	mov	r8, r0
 80031aa:	460c      	mov	r4, r1
 80031ac:	4616      	mov	r6, r2
 80031ae:	d50f      	bpl.n	80031d0 <_svfiprintf_r+0x34>
 80031b0:	690b      	ldr	r3, [r1, #16]
 80031b2:	b96b      	cbnz	r3, 80031d0 <_svfiprintf_r+0x34>
 80031b4:	2140      	movs	r1, #64	; 0x40
 80031b6:	f000 fae3 	bl	8003780 <_malloc_r>
 80031ba:	6020      	str	r0, [r4, #0]
 80031bc:	6120      	str	r0, [r4, #16]
 80031be:	b928      	cbnz	r0, 80031cc <_svfiprintf_r+0x30>
 80031c0:	230c      	movs	r3, #12
 80031c2:	f8c8 3000 	str.w	r3, [r8]
 80031c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ca:	e0c8      	b.n	800335e <_svfiprintf_r+0x1c2>
 80031cc:	2340      	movs	r3, #64	; 0x40
 80031ce:	6163      	str	r3, [r4, #20]
 80031d0:	2300      	movs	r3, #0
 80031d2:	9309      	str	r3, [sp, #36]	; 0x24
 80031d4:	2320      	movs	r3, #32
 80031d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031da:	2330      	movs	r3, #48	; 0x30
 80031dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031e0:	9503      	str	r5, [sp, #12]
 80031e2:	f04f 0b01 	mov.w	fp, #1
 80031e6:	4637      	mov	r7, r6
 80031e8:	463d      	mov	r5, r7
 80031ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80031ee:	b10b      	cbz	r3, 80031f4 <_svfiprintf_r+0x58>
 80031f0:	2b25      	cmp	r3, #37	; 0x25
 80031f2:	d13e      	bne.n	8003272 <_svfiprintf_r+0xd6>
 80031f4:	ebb7 0a06 	subs.w	sl, r7, r6
 80031f8:	d00b      	beq.n	8003212 <_svfiprintf_r+0x76>
 80031fa:	4653      	mov	r3, sl
 80031fc:	4632      	mov	r2, r6
 80031fe:	4621      	mov	r1, r4
 8003200:	4640      	mov	r0, r8
 8003202:	f7ff ff71 	bl	80030e8 <__ssputs_r>
 8003206:	3001      	adds	r0, #1
 8003208:	f000 80a4 	beq.w	8003354 <_svfiprintf_r+0x1b8>
 800320c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800320e:	4453      	add	r3, sl
 8003210:	9309      	str	r3, [sp, #36]	; 0x24
 8003212:	783b      	ldrb	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 809d 	beq.w	8003354 <_svfiprintf_r+0x1b8>
 800321a:	2300      	movs	r3, #0
 800321c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003220:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003224:	9304      	str	r3, [sp, #16]
 8003226:	9307      	str	r3, [sp, #28]
 8003228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800322c:	931a      	str	r3, [sp, #104]	; 0x68
 800322e:	462f      	mov	r7, r5
 8003230:	2205      	movs	r2, #5
 8003232:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003236:	4850      	ldr	r0, [pc, #320]	; (8003378 <_svfiprintf_r+0x1dc>)
 8003238:	f7fc fff2 	bl	8000220 <memchr>
 800323c:	9b04      	ldr	r3, [sp, #16]
 800323e:	b9d0      	cbnz	r0, 8003276 <_svfiprintf_r+0xda>
 8003240:	06d9      	lsls	r1, r3, #27
 8003242:	bf44      	itt	mi
 8003244:	2220      	movmi	r2, #32
 8003246:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800324a:	071a      	lsls	r2, r3, #28
 800324c:	bf44      	itt	mi
 800324e:	222b      	movmi	r2, #43	; 0x2b
 8003250:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003254:	782a      	ldrb	r2, [r5, #0]
 8003256:	2a2a      	cmp	r2, #42	; 0x2a
 8003258:	d015      	beq.n	8003286 <_svfiprintf_r+0xea>
 800325a:	9a07      	ldr	r2, [sp, #28]
 800325c:	462f      	mov	r7, r5
 800325e:	2000      	movs	r0, #0
 8003260:	250a      	movs	r5, #10
 8003262:	4639      	mov	r1, r7
 8003264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003268:	3b30      	subs	r3, #48	; 0x30
 800326a:	2b09      	cmp	r3, #9
 800326c:	d94d      	bls.n	800330a <_svfiprintf_r+0x16e>
 800326e:	b1b8      	cbz	r0, 80032a0 <_svfiprintf_r+0x104>
 8003270:	e00f      	b.n	8003292 <_svfiprintf_r+0xf6>
 8003272:	462f      	mov	r7, r5
 8003274:	e7b8      	b.n	80031e8 <_svfiprintf_r+0x4c>
 8003276:	4a40      	ldr	r2, [pc, #256]	; (8003378 <_svfiprintf_r+0x1dc>)
 8003278:	1a80      	subs	r0, r0, r2
 800327a:	fa0b f000 	lsl.w	r0, fp, r0
 800327e:	4318      	orrs	r0, r3
 8003280:	9004      	str	r0, [sp, #16]
 8003282:	463d      	mov	r5, r7
 8003284:	e7d3      	b.n	800322e <_svfiprintf_r+0x92>
 8003286:	9a03      	ldr	r2, [sp, #12]
 8003288:	1d11      	adds	r1, r2, #4
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	9103      	str	r1, [sp, #12]
 800328e:	2a00      	cmp	r2, #0
 8003290:	db01      	blt.n	8003296 <_svfiprintf_r+0xfa>
 8003292:	9207      	str	r2, [sp, #28]
 8003294:	e004      	b.n	80032a0 <_svfiprintf_r+0x104>
 8003296:	4252      	negs	r2, r2
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	9207      	str	r2, [sp, #28]
 800329e:	9304      	str	r3, [sp, #16]
 80032a0:	783b      	ldrb	r3, [r7, #0]
 80032a2:	2b2e      	cmp	r3, #46	; 0x2e
 80032a4:	d10c      	bne.n	80032c0 <_svfiprintf_r+0x124>
 80032a6:	787b      	ldrb	r3, [r7, #1]
 80032a8:	2b2a      	cmp	r3, #42	; 0x2a
 80032aa:	d133      	bne.n	8003314 <_svfiprintf_r+0x178>
 80032ac:	9b03      	ldr	r3, [sp, #12]
 80032ae:	1d1a      	adds	r2, r3, #4
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	9203      	str	r2, [sp, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bfb8      	it	lt
 80032b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80032bc:	3702      	adds	r7, #2
 80032be:	9305      	str	r3, [sp, #20]
 80032c0:	4d2e      	ldr	r5, [pc, #184]	; (800337c <_svfiprintf_r+0x1e0>)
 80032c2:	7839      	ldrb	r1, [r7, #0]
 80032c4:	2203      	movs	r2, #3
 80032c6:	4628      	mov	r0, r5
 80032c8:	f7fc ffaa 	bl	8000220 <memchr>
 80032cc:	b138      	cbz	r0, 80032de <_svfiprintf_r+0x142>
 80032ce:	2340      	movs	r3, #64	; 0x40
 80032d0:	1b40      	subs	r0, r0, r5
 80032d2:	fa03 f000 	lsl.w	r0, r3, r0
 80032d6:	9b04      	ldr	r3, [sp, #16]
 80032d8:	4303      	orrs	r3, r0
 80032da:	3701      	adds	r7, #1
 80032dc:	9304      	str	r3, [sp, #16]
 80032de:	7839      	ldrb	r1, [r7, #0]
 80032e0:	4827      	ldr	r0, [pc, #156]	; (8003380 <_svfiprintf_r+0x1e4>)
 80032e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032e6:	2206      	movs	r2, #6
 80032e8:	1c7e      	adds	r6, r7, #1
 80032ea:	f7fc ff99 	bl	8000220 <memchr>
 80032ee:	2800      	cmp	r0, #0
 80032f0:	d038      	beq.n	8003364 <_svfiprintf_r+0x1c8>
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <_svfiprintf_r+0x1e8>)
 80032f4:	bb13      	cbnz	r3, 800333c <_svfiprintf_r+0x1a0>
 80032f6:	9b03      	ldr	r3, [sp, #12]
 80032f8:	3307      	adds	r3, #7
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	3308      	adds	r3, #8
 8003300:	9303      	str	r3, [sp, #12]
 8003302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003304:	444b      	add	r3, r9
 8003306:	9309      	str	r3, [sp, #36]	; 0x24
 8003308:	e76d      	b.n	80031e6 <_svfiprintf_r+0x4a>
 800330a:	fb05 3202 	mla	r2, r5, r2, r3
 800330e:	2001      	movs	r0, #1
 8003310:	460f      	mov	r7, r1
 8003312:	e7a6      	b.n	8003262 <_svfiprintf_r+0xc6>
 8003314:	2300      	movs	r3, #0
 8003316:	3701      	adds	r7, #1
 8003318:	9305      	str	r3, [sp, #20]
 800331a:	4619      	mov	r1, r3
 800331c:	250a      	movs	r5, #10
 800331e:	4638      	mov	r0, r7
 8003320:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003324:	3a30      	subs	r2, #48	; 0x30
 8003326:	2a09      	cmp	r2, #9
 8003328:	d903      	bls.n	8003332 <_svfiprintf_r+0x196>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0c8      	beq.n	80032c0 <_svfiprintf_r+0x124>
 800332e:	9105      	str	r1, [sp, #20]
 8003330:	e7c6      	b.n	80032c0 <_svfiprintf_r+0x124>
 8003332:	fb05 2101 	mla	r1, r5, r1, r2
 8003336:	2301      	movs	r3, #1
 8003338:	4607      	mov	r7, r0
 800333a:	e7f0      	b.n	800331e <_svfiprintf_r+0x182>
 800333c:	ab03      	add	r3, sp, #12
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	4622      	mov	r2, r4
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <_svfiprintf_r+0x1ec>)
 8003344:	a904      	add	r1, sp, #16
 8003346:	4640      	mov	r0, r8
 8003348:	f3af 8000 	nop.w
 800334c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003350:	4681      	mov	r9, r0
 8003352:	d1d6      	bne.n	8003302 <_svfiprintf_r+0x166>
 8003354:	89a3      	ldrh	r3, [r4, #12]
 8003356:	065b      	lsls	r3, r3, #25
 8003358:	f53f af35 	bmi.w	80031c6 <_svfiprintf_r+0x2a>
 800335c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800335e:	b01d      	add	sp, #116	; 0x74
 8003360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003364:	ab03      	add	r3, sp, #12
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4622      	mov	r2, r4
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <_svfiprintf_r+0x1ec>)
 800336c:	a904      	add	r1, sp, #16
 800336e:	4640      	mov	r0, r8
 8003370:	f000 f882 	bl	8003478 <_printf_i>
 8003374:	e7ea      	b.n	800334c <_svfiprintf_r+0x1b0>
 8003376:	bf00      	nop
 8003378:	080039c0 	.word	0x080039c0
 800337c:	080039c6 	.word	0x080039c6
 8003380:	080039ca 	.word	0x080039ca
 8003384:	00000000 	.word	0x00000000
 8003388:	080030e9 	.word	0x080030e9

0800338c <_printf_common>:
 800338c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003390:	4691      	mov	r9, r2
 8003392:	461f      	mov	r7, r3
 8003394:	688a      	ldr	r2, [r1, #8]
 8003396:	690b      	ldr	r3, [r1, #16]
 8003398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800339c:	4293      	cmp	r3, r2
 800339e:	bfb8      	it	lt
 80033a0:	4613      	movlt	r3, r2
 80033a2:	f8c9 3000 	str.w	r3, [r9]
 80033a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033aa:	4606      	mov	r6, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	b112      	cbz	r2, 80033b6 <_printf_common+0x2a>
 80033b0:	3301      	adds	r3, #1
 80033b2:	f8c9 3000 	str.w	r3, [r9]
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	0699      	lsls	r1, r3, #26
 80033ba:	bf42      	ittt	mi
 80033bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033c0:	3302      	addmi	r3, #2
 80033c2:	f8c9 3000 	strmi.w	r3, [r9]
 80033c6:	6825      	ldr	r5, [r4, #0]
 80033c8:	f015 0506 	ands.w	r5, r5, #6
 80033cc:	d107      	bne.n	80033de <_printf_common+0x52>
 80033ce:	f104 0a19 	add.w	sl, r4, #25
 80033d2:	68e3      	ldr	r3, [r4, #12]
 80033d4:	f8d9 2000 	ldr.w	r2, [r9]
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	42ab      	cmp	r3, r5
 80033dc:	dc28      	bgt.n	8003430 <_printf_common+0xa4>
 80033de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	3300      	adds	r3, #0
 80033e6:	bf18      	it	ne
 80033e8:	2301      	movne	r3, #1
 80033ea:	0692      	lsls	r2, r2, #26
 80033ec:	d42d      	bmi.n	800344a <_printf_common+0xbe>
 80033ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f2:	4639      	mov	r1, r7
 80033f4:	4630      	mov	r0, r6
 80033f6:	47c0      	blx	r8
 80033f8:	3001      	adds	r0, #1
 80033fa:	d020      	beq.n	800343e <_printf_common+0xb2>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	68e5      	ldr	r5, [r4, #12]
 8003400:	f8d9 2000 	ldr.w	r2, [r9]
 8003404:	f003 0306 	and.w	r3, r3, #6
 8003408:	2b04      	cmp	r3, #4
 800340a:	bf08      	it	eq
 800340c:	1aad      	subeq	r5, r5, r2
 800340e:	68a3      	ldr	r3, [r4, #8]
 8003410:	6922      	ldr	r2, [r4, #16]
 8003412:	bf0c      	ite	eq
 8003414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003418:	2500      	movne	r5, #0
 800341a:	4293      	cmp	r3, r2
 800341c:	bfc4      	itt	gt
 800341e:	1a9b      	subgt	r3, r3, r2
 8003420:	18ed      	addgt	r5, r5, r3
 8003422:	f04f 0900 	mov.w	r9, #0
 8003426:	341a      	adds	r4, #26
 8003428:	454d      	cmp	r5, r9
 800342a:	d11a      	bne.n	8003462 <_printf_common+0xd6>
 800342c:	2000      	movs	r0, #0
 800342e:	e008      	b.n	8003442 <_printf_common+0xb6>
 8003430:	2301      	movs	r3, #1
 8003432:	4652      	mov	r2, sl
 8003434:	4639      	mov	r1, r7
 8003436:	4630      	mov	r0, r6
 8003438:	47c0      	blx	r8
 800343a:	3001      	adds	r0, #1
 800343c:	d103      	bne.n	8003446 <_printf_common+0xba>
 800343e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003446:	3501      	adds	r5, #1
 8003448:	e7c3      	b.n	80033d2 <_printf_common+0x46>
 800344a:	18e1      	adds	r1, r4, r3
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	2030      	movs	r0, #48	; 0x30
 8003450:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003454:	4422      	add	r2, r4
 8003456:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800345a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800345e:	3302      	adds	r3, #2
 8003460:	e7c5      	b.n	80033ee <_printf_common+0x62>
 8003462:	2301      	movs	r3, #1
 8003464:	4622      	mov	r2, r4
 8003466:	4639      	mov	r1, r7
 8003468:	4630      	mov	r0, r6
 800346a:	47c0      	blx	r8
 800346c:	3001      	adds	r0, #1
 800346e:	d0e6      	beq.n	800343e <_printf_common+0xb2>
 8003470:	f109 0901 	add.w	r9, r9, #1
 8003474:	e7d8      	b.n	8003428 <_printf_common+0x9c>
	...

08003478 <_printf_i>:
 8003478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800347c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003480:	460c      	mov	r4, r1
 8003482:	7e09      	ldrb	r1, [r1, #24]
 8003484:	b085      	sub	sp, #20
 8003486:	296e      	cmp	r1, #110	; 0x6e
 8003488:	4617      	mov	r7, r2
 800348a:	4606      	mov	r6, r0
 800348c:	4698      	mov	r8, r3
 800348e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003490:	f000 80b3 	beq.w	80035fa <_printf_i+0x182>
 8003494:	d822      	bhi.n	80034dc <_printf_i+0x64>
 8003496:	2963      	cmp	r1, #99	; 0x63
 8003498:	d036      	beq.n	8003508 <_printf_i+0x90>
 800349a:	d80a      	bhi.n	80034b2 <_printf_i+0x3a>
 800349c:	2900      	cmp	r1, #0
 800349e:	f000 80b9 	beq.w	8003614 <_printf_i+0x19c>
 80034a2:	2958      	cmp	r1, #88	; 0x58
 80034a4:	f000 8083 	beq.w	80035ae <_printf_i+0x136>
 80034a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80034b0:	e032      	b.n	8003518 <_printf_i+0xa0>
 80034b2:	2964      	cmp	r1, #100	; 0x64
 80034b4:	d001      	beq.n	80034ba <_printf_i+0x42>
 80034b6:	2969      	cmp	r1, #105	; 0x69
 80034b8:	d1f6      	bne.n	80034a8 <_printf_i+0x30>
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	0605      	lsls	r5, r0, #24
 80034c0:	f103 0104 	add.w	r1, r3, #4
 80034c4:	d52a      	bpl.n	800351c <_printf_i+0xa4>
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6011      	str	r1, [r2, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da03      	bge.n	80034d6 <_printf_i+0x5e>
 80034ce:	222d      	movs	r2, #45	; 0x2d
 80034d0:	425b      	negs	r3, r3
 80034d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034d6:	486f      	ldr	r0, [pc, #444]	; (8003694 <_printf_i+0x21c>)
 80034d8:	220a      	movs	r2, #10
 80034da:	e039      	b.n	8003550 <_printf_i+0xd8>
 80034dc:	2973      	cmp	r1, #115	; 0x73
 80034de:	f000 809d 	beq.w	800361c <_printf_i+0x1a4>
 80034e2:	d808      	bhi.n	80034f6 <_printf_i+0x7e>
 80034e4:	296f      	cmp	r1, #111	; 0x6f
 80034e6:	d020      	beq.n	800352a <_printf_i+0xb2>
 80034e8:	2970      	cmp	r1, #112	; 0x70
 80034ea:	d1dd      	bne.n	80034a8 <_printf_i+0x30>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	f043 0320 	orr.w	r3, r3, #32
 80034f2:	6023      	str	r3, [r4, #0]
 80034f4:	e003      	b.n	80034fe <_printf_i+0x86>
 80034f6:	2975      	cmp	r1, #117	; 0x75
 80034f8:	d017      	beq.n	800352a <_printf_i+0xb2>
 80034fa:	2978      	cmp	r1, #120	; 0x78
 80034fc:	d1d4      	bne.n	80034a8 <_printf_i+0x30>
 80034fe:	2378      	movs	r3, #120	; 0x78
 8003500:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003504:	4864      	ldr	r0, [pc, #400]	; (8003698 <_printf_i+0x220>)
 8003506:	e055      	b.n	80035b4 <_printf_i+0x13c>
 8003508:	6813      	ldr	r3, [r2, #0]
 800350a:	1d19      	adds	r1, r3, #4
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6011      	str	r1, [r2, #0]
 8003510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003518:	2301      	movs	r3, #1
 800351a:	e08c      	b.n	8003636 <_printf_i+0x1be>
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6011      	str	r1, [r2, #0]
 8003520:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003524:	bf18      	it	ne
 8003526:	b21b      	sxthne	r3, r3
 8003528:	e7cf      	b.n	80034ca <_printf_i+0x52>
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	6825      	ldr	r5, [r4, #0]
 800352e:	1d18      	adds	r0, r3, #4
 8003530:	6010      	str	r0, [r2, #0]
 8003532:	0628      	lsls	r0, r5, #24
 8003534:	d501      	bpl.n	800353a <_printf_i+0xc2>
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	e002      	b.n	8003540 <_printf_i+0xc8>
 800353a:	0668      	lsls	r0, r5, #25
 800353c:	d5fb      	bpl.n	8003536 <_printf_i+0xbe>
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	4854      	ldr	r0, [pc, #336]	; (8003694 <_printf_i+0x21c>)
 8003542:	296f      	cmp	r1, #111	; 0x6f
 8003544:	bf14      	ite	ne
 8003546:	220a      	movne	r2, #10
 8003548:	2208      	moveq	r2, #8
 800354a:	2100      	movs	r1, #0
 800354c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003550:	6865      	ldr	r5, [r4, #4]
 8003552:	60a5      	str	r5, [r4, #8]
 8003554:	2d00      	cmp	r5, #0
 8003556:	f2c0 8095 	blt.w	8003684 <_printf_i+0x20c>
 800355a:	6821      	ldr	r1, [r4, #0]
 800355c:	f021 0104 	bic.w	r1, r1, #4
 8003560:	6021      	str	r1, [r4, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d13d      	bne.n	80035e2 <_printf_i+0x16a>
 8003566:	2d00      	cmp	r5, #0
 8003568:	f040 808e 	bne.w	8003688 <_printf_i+0x210>
 800356c:	4665      	mov	r5, ip
 800356e:	2a08      	cmp	r2, #8
 8003570:	d10b      	bne.n	800358a <_printf_i+0x112>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	07db      	lsls	r3, r3, #31
 8003576:	d508      	bpl.n	800358a <_printf_i+0x112>
 8003578:	6923      	ldr	r3, [r4, #16]
 800357a:	6862      	ldr	r2, [r4, #4]
 800357c:	429a      	cmp	r2, r3
 800357e:	bfde      	ittt	le
 8003580:	2330      	movle	r3, #48	; 0x30
 8003582:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003586:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800358a:	ebac 0305 	sub.w	r3, ip, r5
 800358e:	6123      	str	r3, [r4, #16]
 8003590:	f8cd 8000 	str.w	r8, [sp]
 8003594:	463b      	mov	r3, r7
 8003596:	aa03      	add	r2, sp, #12
 8003598:	4621      	mov	r1, r4
 800359a:	4630      	mov	r0, r6
 800359c:	f7ff fef6 	bl	800338c <_printf_common>
 80035a0:	3001      	adds	r0, #1
 80035a2:	d14d      	bne.n	8003640 <_printf_i+0x1c8>
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035a8:	b005      	add	sp, #20
 80035aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ae:	4839      	ldr	r0, [pc, #228]	; (8003694 <_printf_i+0x21c>)
 80035b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80035b4:	6813      	ldr	r3, [r2, #0]
 80035b6:	6821      	ldr	r1, [r4, #0]
 80035b8:	1d1d      	adds	r5, r3, #4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6015      	str	r5, [r2, #0]
 80035be:	060a      	lsls	r2, r1, #24
 80035c0:	d50b      	bpl.n	80035da <_printf_i+0x162>
 80035c2:	07ca      	lsls	r2, r1, #31
 80035c4:	bf44      	itt	mi
 80035c6:	f041 0120 	orrmi.w	r1, r1, #32
 80035ca:	6021      	strmi	r1, [r4, #0]
 80035cc:	b91b      	cbnz	r3, 80035d6 <_printf_i+0x15e>
 80035ce:	6822      	ldr	r2, [r4, #0]
 80035d0:	f022 0220 	bic.w	r2, r2, #32
 80035d4:	6022      	str	r2, [r4, #0]
 80035d6:	2210      	movs	r2, #16
 80035d8:	e7b7      	b.n	800354a <_printf_i+0xd2>
 80035da:	064d      	lsls	r5, r1, #25
 80035dc:	bf48      	it	mi
 80035de:	b29b      	uxthmi	r3, r3
 80035e0:	e7ef      	b.n	80035c2 <_printf_i+0x14a>
 80035e2:	4665      	mov	r5, ip
 80035e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80035e8:	fb02 3311 	mls	r3, r2, r1, r3
 80035ec:	5cc3      	ldrb	r3, [r0, r3]
 80035ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035f2:	460b      	mov	r3, r1
 80035f4:	2900      	cmp	r1, #0
 80035f6:	d1f5      	bne.n	80035e4 <_printf_i+0x16c>
 80035f8:	e7b9      	b.n	800356e <_printf_i+0xf6>
 80035fa:	6813      	ldr	r3, [r2, #0]
 80035fc:	6825      	ldr	r5, [r4, #0]
 80035fe:	6961      	ldr	r1, [r4, #20]
 8003600:	1d18      	adds	r0, r3, #4
 8003602:	6010      	str	r0, [r2, #0]
 8003604:	0628      	lsls	r0, r5, #24
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	d501      	bpl.n	800360e <_printf_i+0x196>
 800360a:	6019      	str	r1, [r3, #0]
 800360c:	e002      	b.n	8003614 <_printf_i+0x19c>
 800360e:	066a      	lsls	r2, r5, #25
 8003610:	d5fb      	bpl.n	800360a <_printf_i+0x192>
 8003612:	8019      	strh	r1, [r3, #0]
 8003614:	2300      	movs	r3, #0
 8003616:	6123      	str	r3, [r4, #16]
 8003618:	4665      	mov	r5, ip
 800361a:	e7b9      	b.n	8003590 <_printf_i+0x118>
 800361c:	6813      	ldr	r3, [r2, #0]
 800361e:	1d19      	adds	r1, r3, #4
 8003620:	6011      	str	r1, [r2, #0]
 8003622:	681d      	ldr	r5, [r3, #0]
 8003624:	6862      	ldr	r2, [r4, #4]
 8003626:	2100      	movs	r1, #0
 8003628:	4628      	mov	r0, r5
 800362a:	f7fc fdf9 	bl	8000220 <memchr>
 800362e:	b108      	cbz	r0, 8003634 <_printf_i+0x1bc>
 8003630:	1b40      	subs	r0, r0, r5
 8003632:	6060      	str	r0, [r4, #4]
 8003634:	6863      	ldr	r3, [r4, #4]
 8003636:	6123      	str	r3, [r4, #16]
 8003638:	2300      	movs	r3, #0
 800363a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800363e:	e7a7      	b.n	8003590 <_printf_i+0x118>
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	462a      	mov	r2, r5
 8003644:	4639      	mov	r1, r7
 8003646:	4630      	mov	r0, r6
 8003648:	47c0      	blx	r8
 800364a:	3001      	adds	r0, #1
 800364c:	d0aa      	beq.n	80035a4 <_printf_i+0x12c>
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	079b      	lsls	r3, r3, #30
 8003652:	d413      	bmi.n	800367c <_printf_i+0x204>
 8003654:	68e0      	ldr	r0, [r4, #12]
 8003656:	9b03      	ldr	r3, [sp, #12]
 8003658:	4298      	cmp	r0, r3
 800365a:	bfb8      	it	lt
 800365c:	4618      	movlt	r0, r3
 800365e:	e7a3      	b.n	80035a8 <_printf_i+0x130>
 8003660:	2301      	movs	r3, #1
 8003662:	464a      	mov	r2, r9
 8003664:	4639      	mov	r1, r7
 8003666:	4630      	mov	r0, r6
 8003668:	47c0      	blx	r8
 800366a:	3001      	adds	r0, #1
 800366c:	d09a      	beq.n	80035a4 <_printf_i+0x12c>
 800366e:	3501      	adds	r5, #1
 8003670:	68e3      	ldr	r3, [r4, #12]
 8003672:	9a03      	ldr	r2, [sp, #12]
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	42ab      	cmp	r3, r5
 8003678:	dcf2      	bgt.n	8003660 <_printf_i+0x1e8>
 800367a:	e7eb      	b.n	8003654 <_printf_i+0x1dc>
 800367c:	2500      	movs	r5, #0
 800367e:	f104 0919 	add.w	r9, r4, #25
 8003682:	e7f5      	b.n	8003670 <_printf_i+0x1f8>
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ac      	bne.n	80035e2 <_printf_i+0x16a>
 8003688:	7803      	ldrb	r3, [r0, #0]
 800368a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800368e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003692:	e76c      	b.n	800356e <_printf_i+0xf6>
 8003694:	080039d1 	.word	0x080039d1
 8003698:	080039e2 	.word	0x080039e2

0800369c <memcpy>:
 800369c:	b510      	push	{r4, lr}
 800369e:	1e43      	subs	r3, r0, #1
 80036a0:	440a      	add	r2, r1
 80036a2:	4291      	cmp	r1, r2
 80036a4:	d100      	bne.n	80036a8 <memcpy+0xc>
 80036a6:	bd10      	pop	{r4, pc}
 80036a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036b0:	e7f7      	b.n	80036a2 <memcpy+0x6>

080036b2 <memmove>:
 80036b2:	4288      	cmp	r0, r1
 80036b4:	b510      	push	{r4, lr}
 80036b6:	eb01 0302 	add.w	r3, r1, r2
 80036ba:	d807      	bhi.n	80036cc <memmove+0x1a>
 80036bc:	1e42      	subs	r2, r0, #1
 80036be:	4299      	cmp	r1, r3
 80036c0:	d00a      	beq.n	80036d8 <memmove+0x26>
 80036c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80036ca:	e7f8      	b.n	80036be <memmove+0xc>
 80036cc:	4283      	cmp	r3, r0
 80036ce:	d9f5      	bls.n	80036bc <memmove+0xa>
 80036d0:	1881      	adds	r1, r0, r2
 80036d2:	1ad2      	subs	r2, r2, r3
 80036d4:	42d3      	cmn	r3, r2
 80036d6:	d100      	bne.n	80036da <memmove+0x28>
 80036d8:	bd10      	pop	{r4, pc}
 80036da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80036e2:	e7f7      	b.n	80036d4 <memmove+0x22>

080036e4 <_free_r>:
 80036e4:	b538      	push	{r3, r4, r5, lr}
 80036e6:	4605      	mov	r5, r0
 80036e8:	2900      	cmp	r1, #0
 80036ea:	d045      	beq.n	8003778 <_free_r+0x94>
 80036ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036f0:	1f0c      	subs	r4, r1, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	bfb8      	it	lt
 80036f6:	18e4      	addlt	r4, r4, r3
 80036f8:	f000 f8d2 	bl	80038a0 <__malloc_lock>
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <_free_r+0x98>)
 80036fe:	6813      	ldr	r3, [r2, #0]
 8003700:	4610      	mov	r0, r2
 8003702:	b933      	cbnz	r3, 8003712 <_free_r+0x2e>
 8003704:	6063      	str	r3, [r4, #4]
 8003706:	6014      	str	r4, [r2, #0]
 8003708:	4628      	mov	r0, r5
 800370a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800370e:	f000 b8c8 	b.w	80038a2 <__malloc_unlock>
 8003712:	42a3      	cmp	r3, r4
 8003714:	d90c      	bls.n	8003730 <_free_r+0x4c>
 8003716:	6821      	ldr	r1, [r4, #0]
 8003718:	1862      	adds	r2, r4, r1
 800371a:	4293      	cmp	r3, r2
 800371c:	bf04      	itt	eq
 800371e:	681a      	ldreq	r2, [r3, #0]
 8003720:	685b      	ldreq	r3, [r3, #4]
 8003722:	6063      	str	r3, [r4, #4]
 8003724:	bf04      	itt	eq
 8003726:	1852      	addeq	r2, r2, r1
 8003728:	6022      	streq	r2, [r4, #0]
 800372a:	6004      	str	r4, [r0, #0]
 800372c:	e7ec      	b.n	8003708 <_free_r+0x24>
 800372e:	4613      	mov	r3, r2
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	b10a      	cbz	r2, 8003738 <_free_r+0x54>
 8003734:	42a2      	cmp	r2, r4
 8003736:	d9fa      	bls.n	800372e <_free_r+0x4a>
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	1858      	adds	r0, r3, r1
 800373c:	42a0      	cmp	r0, r4
 800373e:	d10b      	bne.n	8003758 <_free_r+0x74>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	4401      	add	r1, r0
 8003744:	1858      	adds	r0, r3, r1
 8003746:	4282      	cmp	r2, r0
 8003748:	6019      	str	r1, [r3, #0]
 800374a:	d1dd      	bne.n	8003708 <_free_r+0x24>
 800374c:	6810      	ldr	r0, [r2, #0]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	4401      	add	r1, r0
 8003754:	6019      	str	r1, [r3, #0]
 8003756:	e7d7      	b.n	8003708 <_free_r+0x24>
 8003758:	d902      	bls.n	8003760 <_free_r+0x7c>
 800375a:	230c      	movs	r3, #12
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	e7d3      	b.n	8003708 <_free_r+0x24>
 8003760:	6820      	ldr	r0, [r4, #0]
 8003762:	1821      	adds	r1, r4, r0
 8003764:	428a      	cmp	r2, r1
 8003766:	bf04      	itt	eq
 8003768:	6811      	ldreq	r1, [r2, #0]
 800376a:	6852      	ldreq	r2, [r2, #4]
 800376c:	6062      	str	r2, [r4, #4]
 800376e:	bf04      	itt	eq
 8003770:	1809      	addeq	r1, r1, r0
 8003772:	6021      	streq	r1, [r4, #0]
 8003774:	605c      	str	r4, [r3, #4]
 8003776:	e7c7      	b.n	8003708 <_free_r+0x24>
 8003778:	bd38      	pop	{r3, r4, r5, pc}
 800377a:	bf00      	nop
 800377c:	20000090 	.word	0x20000090

08003780 <_malloc_r>:
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	1ccd      	adds	r5, r1, #3
 8003784:	f025 0503 	bic.w	r5, r5, #3
 8003788:	3508      	adds	r5, #8
 800378a:	2d0c      	cmp	r5, #12
 800378c:	bf38      	it	cc
 800378e:	250c      	movcc	r5, #12
 8003790:	2d00      	cmp	r5, #0
 8003792:	4606      	mov	r6, r0
 8003794:	db01      	blt.n	800379a <_malloc_r+0x1a>
 8003796:	42a9      	cmp	r1, r5
 8003798:	d903      	bls.n	80037a2 <_malloc_r+0x22>
 800379a:	230c      	movs	r3, #12
 800379c:	6033      	str	r3, [r6, #0]
 800379e:	2000      	movs	r0, #0
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	f000 f87d 	bl	80038a0 <__malloc_lock>
 80037a6:	4a21      	ldr	r2, [pc, #132]	; (800382c <_malloc_r+0xac>)
 80037a8:	6814      	ldr	r4, [r2, #0]
 80037aa:	4621      	mov	r1, r4
 80037ac:	b991      	cbnz	r1, 80037d4 <_malloc_r+0x54>
 80037ae:	4c20      	ldr	r4, [pc, #128]	; (8003830 <_malloc_r+0xb0>)
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	b91b      	cbnz	r3, 80037bc <_malloc_r+0x3c>
 80037b4:	4630      	mov	r0, r6
 80037b6:	f000 f863 	bl	8003880 <_sbrk_r>
 80037ba:	6020      	str	r0, [r4, #0]
 80037bc:	4629      	mov	r1, r5
 80037be:	4630      	mov	r0, r6
 80037c0:	f000 f85e 	bl	8003880 <_sbrk_r>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d124      	bne.n	8003812 <_malloc_r+0x92>
 80037c8:	230c      	movs	r3, #12
 80037ca:	6033      	str	r3, [r6, #0]
 80037cc:	4630      	mov	r0, r6
 80037ce:	f000 f868 	bl	80038a2 <__malloc_unlock>
 80037d2:	e7e4      	b.n	800379e <_malloc_r+0x1e>
 80037d4:	680b      	ldr	r3, [r1, #0]
 80037d6:	1b5b      	subs	r3, r3, r5
 80037d8:	d418      	bmi.n	800380c <_malloc_r+0x8c>
 80037da:	2b0b      	cmp	r3, #11
 80037dc:	d90f      	bls.n	80037fe <_malloc_r+0x7e>
 80037de:	600b      	str	r3, [r1, #0]
 80037e0:	50cd      	str	r5, [r1, r3]
 80037e2:	18cc      	adds	r4, r1, r3
 80037e4:	4630      	mov	r0, r6
 80037e6:	f000 f85c 	bl	80038a2 <__malloc_unlock>
 80037ea:	f104 000b 	add.w	r0, r4, #11
 80037ee:	1d23      	adds	r3, r4, #4
 80037f0:	f020 0007 	bic.w	r0, r0, #7
 80037f4:	1ac3      	subs	r3, r0, r3
 80037f6:	d0d3      	beq.n	80037a0 <_malloc_r+0x20>
 80037f8:	425a      	negs	r2, r3
 80037fa:	50e2      	str	r2, [r4, r3]
 80037fc:	e7d0      	b.n	80037a0 <_malloc_r+0x20>
 80037fe:	428c      	cmp	r4, r1
 8003800:	684b      	ldr	r3, [r1, #4]
 8003802:	bf16      	itet	ne
 8003804:	6063      	strne	r3, [r4, #4]
 8003806:	6013      	streq	r3, [r2, #0]
 8003808:	460c      	movne	r4, r1
 800380a:	e7eb      	b.n	80037e4 <_malloc_r+0x64>
 800380c:	460c      	mov	r4, r1
 800380e:	6849      	ldr	r1, [r1, #4]
 8003810:	e7cc      	b.n	80037ac <_malloc_r+0x2c>
 8003812:	1cc4      	adds	r4, r0, #3
 8003814:	f024 0403 	bic.w	r4, r4, #3
 8003818:	42a0      	cmp	r0, r4
 800381a:	d005      	beq.n	8003828 <_malloc_r+0xa8>
 800381c:	1a21      	subs	r1, r4, r0
 800381e:	4630      	mov	r0, r6
 8003820:	f000 f82e 	bl	8003880 <_sbrk_r>
 8003824:	3001      	adds	r0, #1
 8003826:	d0cf      	beq.n	80037c8 <_malloc_r+0x48>
 8003828:	6025      	str	r5, [r4, #0]
 800382a:	e7db      	b.n	80037e4 <_malloc_r+0x64>
 800382c:	20000090 	.word	0x20000090
 8003830:	20000094 	.word	0x20000094

08003834 <_realloc_r>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	4607      	mov	r7, r0
 8003838:	4614      	mov	r4, r2
 800383a:	460e      	mov	r6, r1
 800383c:	b921      	cbnz	r1, 8003848 <_realloc_r+0x14>
 800383e:	4611      	mov	r1, r2
 8003840:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003844:	f7ff bf9c 	b.w	8003780 <_malloc_r>
 8003848:	b922      	cbnz	r2, 8003854 <_realloc_r+0x20>
 800384a:	f7ff ff4b 	bl	80036e4 <_free_r>
 800384e:	4625      	mov	r5, r4
 8003850:	4628      	mov	r0, r5
 8003852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003854:	f000 f826 	bl	80038a4 <_malloc_usable_size_r>
 8003858:	42a0      	cmp	r0, r4
 800385a:	d20f      	bcs.n	800387c <_realloc_r+0x48>
 800385c:	4621      	mov	r1, r4
 800385e:	4638      	mov	r0, r7
 8003860:	f7ff ff8e 	bl	8003780 <_malloc_r>
 8003864:	4605      	mov	r5, r0
 8003866:	2800      	cmp	r0, #0
 8003868:	d0f2      	beq.n	8003850 <_realloc_r+0x1c>
 800386a:	4631      	mov	r1, r6
 800386c:	4622      	mov	r2, r4
 800386e:	f7ff ff15 	bl	800369c <memcpy>
 8003872:	4631      	mov	r1, r6
 8003874:	4638      	mov	r0, r7
 8003876:	f7ff ff35 	bl	80036e4 <_free_r>
 800387a:	e7e9      	b.n	8003850 <_realloc_r+0x1c>
 800387c:	4635      	mov	r5, r6
 800387e:	e7e7      	b.n	8003850 <_realloc_r+0x1c>

08003880 <_sbrk_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4c06      	ldr	r4, [pc, #24]	; (800389c <_sbrk_r+0x1c>)
 8003884:	2300      	movs	r3, #0
 8003886:	4605      	mov	r5, r0
 8003888:	4608      	mov	r0, r1
 800388a:	6023      	str	r3, [r4, #0]
 800388c:	f7fd fa44 	bl	8000d18 <_sbrk>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d102      	bne.n	800389a <_sbrk_r+0x1a>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	b103      	cbz	r3, 800389a <_sbrk_r+0x1a>
 8003898:	602b      	str	r3, [r5, #0]
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	20000208 	.word	0x20000208

080038a0 <__malloc_lock>:
 80038a0:	4770      	bx	lr

080038a2 <__malloc_unlock>:
 80038a2:	4770      	bx	lr

080038a4 <_malloc_usable_size_r>:
 80038a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a8:	1f18      	subs	r0, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	bfbc      	itt	lt
 80038ae:	580b      	ldrlt	r3, [r1, r0]
 80038b0:	18c0      	addlt	r0, r0, r3
 80038b2:	4770      	bx	lr

080038b4 <_init>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr

080038c0 <_fini>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	bf00      	nop
 80038c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038c6:	bc08      	pop	{r3}
 80038c8:	469e      	mov	lr, r3
 80038ca:	4770      	bx	lr
